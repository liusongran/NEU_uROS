
STM32_uROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025560  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000236c  08025730  08025730  00035730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08027a9c  08027a9c  00037a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08027aa4  08027aa4  00037aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08027aac  08027aac  00037aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000270  20000000  08027ab0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000133d8  20000270  08027d20  00040270  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20013648  08027d20  00043648  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00040270  2**0
                  CONTENTS, READONLY
 10 .debug_info   00079da0  00000000  00000000  000402a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000f3d2  00000000  00000000  000ba040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004350  00000000  00000000  000c9418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003b98  00000000  00000000  000cd768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002434c  00000000  00000000  000d1300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00069060  00000000  00000000  000f564c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fcf5a  00000000  00000000  0015e6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      0000004d  00000000  00000000  0025b606  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00012388  00000000  00000000  0025b654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000270 	.word	0x20000270
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08025718 	.word	0x08025718

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000274 	.word	0x20000274
 800020c:	08025718 	.word	0x08025718

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_ldivmod>:
 8000ce8:	b97b      	cbnz	r3, 8000d0a <__aeabi_ldivmod+0x22>
 8000cea:	b972      	cbnz	r2, 8000d0a <__aeabi_ldivmod+0x22>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bfbe      	ittt	lt
 8000cf0:	2000      	movlt	r0, #0
 8000cf2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cf6:	e006      	blt.n	8000d06 <__aeabi_ldivmod+0x1e>
 8000cf8:	bf08      	it	eq
 8000cfa:	2800      	cmpeq	r0, #0
 8000cfc:	bf1c      	itt	ne
 8000cfe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d02:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d06:	f000 ba49 	b.w	800119c <__aeabi_idiv0>
 8000d0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d12:	2900      	cmp	r1, #0
 8000d14:	db09      	blt.n	8000d2a <__aeabi_ldivmod+0x42>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db1a      	blt.n	8000d50 <__aeabi_ldivmod+0x68>
 8000d1a:	f000 f883 	bl	8000e24 <__udivmoddi4>
 8000d1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db1b      	blt.n	8000d6c <__aeabi_ldivmod+0x84>
 8000d34:	f000 f876 	bl	8000e24 <__udivmoddi4>
 8000d38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d40:	b004      	add	sp, #16
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	4252      	negs	r2, r2
 8000d4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4e:	4770      	bx	lr
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	f000 f865 	bl	8000e24 <__udivmoddi4>
 8000d5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d62:	b004      	add	sp, #16
 8000d64:	4240      	negs	r0, r0
 8000d66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f857 	bl	8000e24 <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4252      	negs	r2, r2
 8000d82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d9c:	f000 b9fe 	b.w	800119c <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f83c 	bl	8000e24 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_d2lz>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	f7ff febb 	bl	8000b3c <__aeabi_dcmplt>
 8000dc6:	b928      	cbnz	r0, 8000dd4 <__aeabi_d2lz+0x1c>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b80a 	b.w	8000de8 <__aeabi_d2ulz>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dda:	f000 f805 	bl	8000de8 <__aeabi_d2ulz>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2ulz>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__aeabi_d2ulz+0x34>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	4606      	mov	r6, r0
 8000df0:	460f      	mov	r7, r1
 8000df2:	f7ff fc31 	bl	8000658 <__aeabi_dmul>
 8000df6:	f7ff ff07 	bl	8000c08 <__aeabi_d2uiz>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	f7ff fbb2 	bl	8000564 <__aeabi_ui2d>
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <__aeabi_d2ulz+0x38>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f7ff fc28 	bl	8000658 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff fa6a 	bl	80002e8 <__aeabi_dsub>
 8000e14:	f7ff fef8 	bl	8000c08 <__aeabi_d2uiz>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e1c:	3df00000 	.word	0x3df00000
 8000e20:	41f00000 	.word	0x41f00000

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9d08      	ldr	r5, [sp, #32]
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	468e      	mov	lr, r1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d14d      	bne.n	8000ece <__udivmoddi4+0xaa>
 8000e32:	428a      	cmp	r2, r1
 8000e34:	4694      	mov	ip, r2
 8000e36:	d969      	bls.n	8000f0c <__udivmoddi4+0xe8>
 8000e38:	fab2 f282 	clz	r2, r2
 8000e3c:	b152      	cbz	r2, 8000e54 <__udivmoddi4+0x30>
 8000e3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e42:	f1c2 0120 	rsb	r1, r2, #32
 8000e46:	fa20 f101 	lsr.w	r1, r0, r1
 8000e4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e52:	4094      	lsls	r4, r2
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	0c21      	lsrs	r1, r4, #16
 8000e5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e5e:	fa1f f78c 	uxth.w	r7, ip
 8000e62:	fb08 e316 	mls	r3, r8, r6, lr
 8000e66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e6a:	fb06 f107 	mul.w	r1, r6, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x64>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e7a:	f080 811f 	bcs.w	80010bc <__udivmoddi4+0x298>
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	f240 811c 	bls.w	80010bc <__udivmoddi4+0x298>
 8000e84:	3e02      	subs	r6, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb00 f707 	mul.w	r7, r0, r7
 8000e9c:	42a7      	cmp	r7, r4
 8000e9e:	d90a      	bls.n	8000eb6 <__udivmoddi4+0x92>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ea8:	f080 810a 	bcs.w	80010c0 <__udivmoddi4+0x29c>
 8000eac:	42a7      	cmp	r7, r4
 8000eae:	f240 8107 	bls.w	80010c0 <__udivmoddi4+0x29c>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eba:	1be4      	subs	r4, r4, r7
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	b11d      	cbz	r5, 8000ec8 <__udivmoddi4+0xa4>
 8000ec0:	40d4      	lsrs	r4, r2
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d909      	bls.n	8000ee6 <__udivmoddi4+0xc2>
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	f000 80ef 	beq.w	80010b6 <__udivmoddi4+0x292>
 8000ed8:	2600      	movs	r6, #0
 8000eda:	e9c5 0100 	strd	r0, r1, [r5]
 8000ede:	4630      	mov	r0, r6
 8000ee0:	4631      	mov	r1, r6
 8000ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee6:	fab3 f683 	clz	r6, r3
 8000eea:	2e00      	cmp	r6, #0
 8000eec:	d14a      	bne.n	8000f84 <__udivmoddi4+0x160>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d302      	bcc.n	8000ef8 <__udivmoddi4+0xd4>
 8000ef2:	4282      	cmp	r2, r0
 8000ef4:	f200 80f9 	bhi.w	80010ea <__udivmoddi4+0x2c6>
 8000ef8:	1a84      	subs	r4, r0, r2
 8000efa:	eb61 0303 	sbc.w	r3, r1, r3
 8000efe:	2001      	movs	r0, #1
 8000f00:	469e      	mov	lr, r3
 8000f02:	2d00      	cmp	r5, #0
 8000f04:	d0e0      	beq.n	8000ec8 <__udivmoddi4+0xa4>
 8000f06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f0a:	e7dd      	b.n	8000ec8 <__udivmoddi4+0xa4>
 8000f0c:	b902      	cbnz	r2, 8000f10 <__udivmoddi4+0xec>
 8000f0e:	deff      	udf	#255	; 0xff
 8000f10:	fab2 f282 	clz	r2, r2
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	f040 8092 	bne.w	800103e <__udivmoddi4+0x21a>
 8000f1a:	eba1 010c 	sub.w	r1, r1, ip
 8000f1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f22:	fa1f fe8c 	uxth.w	lr, ip
 8000f26:	2601      	movs	r6, #1
 8000f28:	0c20      	lsrs	r0, r4, #16
 8000f2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f36:	fb0e f003 	mul.w	r0, lr, r3
 8000f3a:	4288      	cmp	r0, r1
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x12c>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000f46:	d202      	bcs.n	8000f4e <__udivmoddi4+0x12a>
 8000f48:	4288      	cmp	r0, r1
 8000f4a:	f200 80cb 	bhi.w	80010e4 <__udivmoddi4+0x2c0>
 8000f4e:	4643      	mov	r3, r8
 8000f50:	1a09      	subs	r1, r1, r0
 8000f52:	b2a4      	uxth	r4, r4
 8000f54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f58:	fb07 1110 	mls	r1, r7, r0, r1
 8000f5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f60:	fb0e fe00 	mul.w	lr, lr, r0
 8000f64:	45a6      	cmp	lr, r4
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x156>
 8000f68:	eb1c 0404 	adds.w	r4, ip, r4
 8000f6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f70:	d202      	bcs.n	8000f78 <__udivmoddi4+0x154>
 8000f72:	45a6      	cmp	lr, r4
 8000f74:	f200 80bb 	bhi.w	80010ee <__udivmoddi4+0x2ca>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	eba4 040e 	sub.w	r4, r4, lr
 8000f7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f82:	e79c      	b.n	8000ebe <__udivmoddi4+0x9a>
 8000f84:	f1c6 0720 	rsb	r7, r6, #32
 8000f88:	40b3      	lsls	r3, r6
 8000f8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f92:	fa20 f407 	lsr.w	r4, r0, r7
 8000f96:	fa01 f306 	lsl.w	r3, r1, r6
 8000f9a:	431c      	orrs	r4, r3
 8000f9c:	40f9      	lsrs	r1, r7
 8000f9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000fa2:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000faa:	0c20      	lsrs	r0, r4, #16
 8000fac:	fa1f fe8c 	uxth.w	lr, ip
 8000fb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000fb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000fbc:	4288      	cmp	r0, r1
 8000fbe:	fa02 f206 	lsl.w	r2, r2, r6
 8000fc2:	d90b      	bls.n	8000fdc <__udivmoddi4+0x1b8>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000fcc:	f080 8088 	bcs.w	80010e0 <__udivmoddi4+0x2bc>
 8000fd0:	4288      	cmp	r0, r1
 8000fd2:	f240 8085 	bls.w	80010e0 <__udivmoddi4+0x2bc>
 8000fd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fda:	4461      	add	r1, ip
 8000fdc:	1a09      	subs	r1, r1, r0
 8000fde:	b2a4      	uxth	r4, r4
 8000fe0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fe4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fe8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ff0:	458e      	cmp	lr, r1
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x1e2>
 8000ff4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ffc:	d26c      	bcs.n	80010d8 <__udivmoddi4+0x2b4>
 8000ffe:	458e      	cmp	lr, r1
 8001000:	d96a      	bls.n	80010d8 <__udivmoddi4+0x2b4>
 8001002:	3802      	subs	r0, #2
 8001004:	4461      	add	r1, ip
 8001006:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800100a:	fba0 9402 	umull	r9, r4, r0, r2
 800100e:	eba1 010e 	sub.w	r1, r1, lr
 8001012:	42a1      	cmp	r1, r4
 8001014:	46c8      	mov	r8, r9
 8001016:	46a6      	mov	lr, r4
 8001018:	d356      	bcc.n	80010c8 <__udivmoddi4+0x2a4>
 800101a:	d053      	beq.n	80010c4 <__udivmoddi4+0x2a0>
 800101c:	b15d      	cbz	r5, 8001036 <__udivmoddi4+0x212>
 800101e:	ebb3 0208 	subs.w	r2, r3, r8
 8001022:	eb61 010e 	sbc.w	r1, r1, lr
 8001026:	fa01 f707 	lsl.w	r7, r1, r7
 800102a:	fa22 f306 	lsr.w	r3, r2, r6
 800102e:	40f1      	lsrs	r1, r6
 8001030:	431f      	orrs	r7, r3
 8001032:	e9c5 7100 	strd	r7, r1, [r5]
 8001036:	2600      	movs	r6, #0
 8001038:	4631      	mov	r1, r6
 800103a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103e:	f1c2 0320 	rsb	r3, r2, #32
 8001042:	40d8      	lsrs	r0, r3
 8001044:	fa0c fc02 	lsl.w	ip, ip, r2
 8001048:	fa21 f303 	lsr.w	r3, r1, r3
 800104c:	4091      	lsls	r1, r2
 800104e:	4301      	orrs	r1, r0
 8001050:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001054:	fa1f fe8c 	uxth.w	lr, ip
 8001058:	fbb3 f0f7 	udiv	r0, r3, r7
 800105c:	fb07 3610 	mls	r6, r7, r0, r3
 8001060:	0c0b      	lsrs	r3, r1, #16
 8001062:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001066:	fb00 f60e 	mul.w	r6, r0, lr
 800106a:	429e      	cmp	r6, r3
 800106c:	fa04 f402 	lsl.w	r4, r4, r2
 8001070:	d908      	bls.n	8001084 <__udivmoddi4+0x260>
 8001072:	eb1c 0303 	adds.w	r3, ip, r3
 8001076:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800107a:	d22f      	bcs.n	80010dc <__udivmoddi4+0x2b8>
 800107c:	429e      	cmp	r6, r3
 800107e:	d92d      	bls.n	80010dc <__udivmoddi4+0x2b8>
 8001080:	3802      	subs	r0, #2
 8001082:	4463      	add	r3, ip
 8001084:	1b9b      	subs	r3, r3, r6
 8001086:	b289      	uxth	r1, r1
 8001088:	fbb3 f6f7 	udiv	r6, r3, r7
 800108c:	fb07 3316 	mls	r3, r7, r6, r3
 8001090:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001094:	fb06 f30e 	mul.w	r3, r6, lr
 8001098:	428b      	cmp	r3, r1
 800109a:	d908      	bls.n	80010ae <__udivmoddi4+0x28a>
 800109c:	eb1c 0101 	adds.w	r1, ip, r1
 80010a0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80010a4:	d216      	bcs.n	80010d4 <__udivmoddi4+0x2b0>
 80010a6:	428b      	cmp	r3, r1
 80010a8:	d914      	bls.n	80010d4 <__udivmoddi4+0x2b0>
 80010aa:	3e02      	subs	r6, #2
 80010ac:	4461      	add	r1, ip
 80010ae:	1ac9      	subs	r1, r1, r3
 80010b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010b4:	e738      	b.n	8000f28 <__udivmoddi4+0x104>
 80010b6:	462e      	mov	r6, r5
 80010b8:	4628      	mov	r0, r5
 80010ba:	e705      	b.n	8000ec8 <__udivmoddi4+0xa4>
 80010bc:	4606      	mov	r6, r0
 80010be:	e6e3      	b.n	8000e88 <__udivmoddi4+0x64>
 80010c0:	4618      	mov	r0, r3
 80010c2:	e6f8      	b.n	8000eb6 <__udivmoddi4+0x92>
 80010c4:	454b      	cmp	r3, r9
 80010c6:	d2a9      	bcs.n	800101c <__udivmoddi4+0x1f8>
 80010c8:	ebb9 0802 	subs.w	r8, r9, r2
 80010cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010d0:	3801      	subs	r0, #1
 80010d2:	e7a3      	b.n	800101c <__udivmoddi4+0x1f8>
 80010d4:	4646      	mov	r6, r8
 80010d6:	e7ea      	b.n	80010ae <__udivmoddi4+0x28a>
 80010d8:	4620      	mov	r0, r4
 80010da:	e794      	b.n	8001006 <__udivmoddi4+0x1e2>
 80010dc:	4640      	mov	r0, r8
 80010de:	e7d1      	b.n	8001084 <__udivmoddi4+0x260>
 80010e0:	46d0      	mov	r8, sl
 80010e2:	e77b      	b.n	8000fdc <__udivmoddi4+0x1b8>
 80010e4:	3b02      	subs	r3, #2
 80010e6:	4461      	add	r1, ip
 80010e8:	e732      	b.n	8000f50 <__udivmoddi4+0x12c>
 80010ea:	4630      	mov	r0, r6
 80010ec:	e709      	b.n	8000f02 <__udivmoddi4+0xde>
 80010ee:	4464      	add	r4, ip
 80010f0:	3802      	subs	r0, #2
 80010f2:	e742      	b.n	8000f7a <__udivmoddi4+0x156>

080010f4 <__gthread_active_p>:
 80010f4:	2000      	movs	r0, #0
 80010f6:	4770      	bx	lr

080010f8 <emutls_alloc>:
 80010f8:	b570      	push	{r4, r5, r6, lr}
 80010fa:	6845      	ldr	r5, [r0, #4]
 80010fc:	6806      	ldr	r6, [r0, #0]
 80010fe:	2d04      	cmp	r5, #4
 8001100:	4604      	mov	r4, r0
 8001102:	d80f      	bhi.n	8001124 <emutls_alloc+0x2c>
 8001104:	1d30      	adds	r0, r6, #4
 8001106:	f01f fdbb 	bl	8020c80 <malloc>
 800110a:	4603      	mov	r3, r0
 800110c:	b1f8      	cbz	r0, 800114e <emutls_alloc+0x56>
 800110e:	68e1      	ldr	r1, [r4, #12]
 8001110:	6000      	str	r0, [r0, #0]
 8001112:	3304      	adds	r3, #4
 8001114:	4632      	mov	r2, r6
 8001116:	4618      	mov	r0, r3
 8001118:	b1a1      	cbz	r1, 8001144 <emutls_alloc+0x4c>
 800111a:	f01f fdd1 	bl	8020cc0 <memcpy>
 800111e:	4603      	mov	r3, r0
 8001120:	4618      	mov	r0, r3
 8001122:	bd70      	pop	{r4, r5, r6, pc}
 8001124:	19a8      	adds	r0, r5, r6
 8001126:	3003      	adds	r0, #3
 8001128:	f01f fdaa 	bl	8020c80 <malloc>
 800112c:	b178      	cbz	r0, 800114e <emutls_alloc+0x56>
 800112e:	1ceb      	adds	r3, r5, #3
 8001130:	4403      	add	r3, r0
 8001132:	426d      	negs	r5, r5
 8001134:	402b      	ands	r3, r5
 8001136:	4632      	mov	r2, r6
 8001138:	f843 0c04 	str.w	r0, [r3, #-4]
 800113c:	68e1      	ldr	r1, [r4, #12]
 800113e:	4618      	mov	r0, r3
 8001140:	2900      	cmp	r1, #0
 8001142:	d1ea      	bne.n	800111a <emutls_alloc+0x22>
 8001144:	f01f fde4 	bl	8020d10 <memset>
 8001148:	4603      	mov	r3, r0
 800114a:	4618      	mov	r0, r3
 800114c:	bd70      	pop	{r4, r5, r6, pc}
 800114e:	f022 f89f 	bl	8023290 <abort>
 8001152:	bf00      	nop

08001154 <__emutls_get_address>:
 8001154:	b510      	push	{r4, lr}
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff ffcc 	bl	80010f4 <__gthread_active_p>
 800115c:	b938      	cbnz	r0, 800116e <__emutls_get_address+0x1a>
 800115e:	68a0      	ldr	r0, [r4, #8]
 8001160:	b100      	cbz	r0, 8001164 <__emutls_get_address+0x10>
 8001162:	bd10      	pop	{r4, pc}
 8001164:	4620      	mov	r0, r4
 8001166:	f7ff ffc7 	bl	80010f8 <emutls_alloc>
 800116a:	60a0      	str	r0, [r4, #8]
 800116c:	bd10      	pop	{r4, pc}
 800116e:	f022 f88f 	bl	8023290 <abort>
 8001172:	bf00      	nop

08001174 <__emutls_register_common>:
 8001174:	b410      	push	{r4}
 8001176:	6804      	ldr	r4, [r0, #0]
 8001178:	428c      	cmp	r4, r1
 800117a:	d202      	bcs.n	8001182 <__emutls_register_common+0xe>
 800117c:	2400      	movs	r4, #0
 800117e:	6001      	str	r1, [r0, #0]
 8001180:	60c4      	str	r4, [r0, #12]
 8001182:	6844      	ldr	r4, [r0, #4]
 8001184:	4294      	cmp	r4, r2
 8001186:	bf38      	it	cc
 8001188:	6042      	strcc	r2, [r0, #4]
 800118a:	b11b      	cbz	r3, 8001194 <__emutls_register_common+0x20>
 800118c:	6802      	ldr	r2, [r0, #0]
 800118e:	428a      	cmp	r2, r1
 8001190:	bf08      	it	eq
 8001192:	60c3      	streq	r3, [r0, #12]
 8001194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_idiv0>:
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <ping_timer_callback>:
int device_id;
int seq_no;
int pong_count;

void ping_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	e9c7 2300 	strd	r2, r3, [r7]
	RCLC_UNUSED(last_call_time);

	if (timer != NULL) {
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d031      	beq.n	8001216 <ping_timer_callback+0x76>

		seq_no = rand();
 80011b2:	f020 fefb 	bl	8021fac <rand>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a19      	ldr	r2, [pc, #100]	; (8001220 <ping_timer_callback+0x80>)
 80011ba:	6013      	str	r3, [r2, #0]
		sprintf(outcoming_ping.frame_id.data, "%d_%d", seq_no, device_id);
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <ping_timer_callback+0x84>)
 80011be:	6898      	ldr	r0, [r3, #8]
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <ping_timer_callback+0x80>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <ping_timer_callback+0x88>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4918      	ldr	r1, [pc, #96]	; (800122c <ping_timer_callback+0x8c>)
 80011ca:	f020 ff7f 	bl	80220cc <siprintf>
		outcoming_ping.frame_id.size = strlen(outcoming_ping.frame_id.data);
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <ping_timer_callback+0x84>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f826 	bl	8000224 <strlen>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <ping_timer_callback+0x84>)
 80011dc:	60d3      	str	r3, [r2, #12]

		// Fill the message timestamp
		struct timespec ts;
		clock_gettime(CLOCK_REALTIME, &ts);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4619      	mov	r1, r3
 80011e4:	2001      	movs	r0, #1
 80011e6:	f008 fe4f 	bl	8009e88 <clock_gettime>
		outcoming_ping.stamp.sec = ts.tv_sec;
 80011ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <ping_timer_callback+0x84>)
 80011f0:	601a      	str	r2, [r3, #0]
		outcoming_ping.stamp.nanosec = ts.tv_nsec;
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <ping_timer_callback+0x84>)
 80011f8:	605a      	str	r2, [r3, #4]

		// Reset the pong count and publish the ping message
		pong_count = 0;
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <ping_timer_callback+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
		rcl_publish(&ping_publisher, (const void*)&outcoming_ping, NULL);
 8001200:	2200      	movs	r2, #0
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <ping_timer_callback+0x84>)
 8001204:	480b      	ldr	r0, [pc, #44]	; (8001234 <ping_timer_callback+0x94>)
 8001206:	f016 f84b 	bl	80172a0 <rcl_publish>
		printf("Ping send seq %s\n", outcoming_ping.frame_id.data);
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <ping_timer_callback+0x84>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	4619      	mov	r1, r3
 8001210:	4809      	ldr	r0, [pc, #36]	; (8001238 <ping_timer_callback+0x98>)
 8001212:	f020 fe0f 	bl	8021e34 <iprintf>
	}
}
 8001216:	bf00      	nop
 8001218:	3720      	adds	r7, #32
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200002dc 	.word	0x200002dc
 8001224:	200002b0 	.word	0x200002b0
 8001228:	200002d8 	.word	0x200002d8
 800122c:	08025730 	.word	0x08025730
 8001230:	200002e0 	.word	0x200002e0
 8001234:	2000028c 	.word	0x2000028c
 8001238:	08025738 	.word	0x08025738

0800123c <ping_subscription_callback>:

void ping_subscription_callback(const void * msgin)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Header * msg = (const std_msgs__msg__Header *)msgin;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	60fb      	str	r3, [r7, #12]

	// Dont pong my own pings
	if(strcmp(outcoming_ping.frame_id.data, msg->frame_id.data) != 0){
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <ping_subscription_callback+0x40>)
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4619      	mov	r1, r3
 8001252:	4610      	mov	r0, r2
 8001254:	f7fe ffdc 	bl	8000210 <strcmp>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00a      	beq.n	8001274 <ping_subscription_callback+0x38>
		printf("Ping received with seq %s. Answering.\n", msg->frame_id.data);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	4619      	mov	r1, r3
 8001264:	4806      	ldr	r0, [pc, #24]	; (8001280 <ping_subscription_callback+0x44>)
 8001266:	f020 fde5 	bl	8021e34 <iprintf>
		rcl_publish(&pong_publisher, (const void*)msg, NULL);
 800126a:	2200      	movs	r2, #0
 800126c:	68f9      	ldr	r1, [r7, #12]
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <ping_subscription_callback+0x48>)
 8001270:	f016 f816 	bl	80172a0 <rcl_publish>
	}
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200002b0 	.word	0x200002b0
 8001280:	0802574c 	.word	0x0802574c
 8001284:	20000290 	.word	0x20000290

08001288 <pong_subscription_callback>:


void pong_subscription_callback(const void * msgin)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Header * msg = (const std_msgs__msg__Header *)msgin;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	60fb      	str	r3, [r7, #12]

	if(strcmp(outcoming_ping.frame_id.data, msg->frame_id.data) == 0) {
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <pong_subscription_callback+0x44>)
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	4619      	mov	r1, r3
 800129e:	4610      	mov	r0, r2
 80012a0:	f7fe ffb6 	bl	8000210 <strcmp>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10c      	bne.n	80012c4 <pong_subscription_callback+0x3c>
		pong_count++;
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <pong_subscription_callback+0x48>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <pong_subscription_callback+0x48>)
 80012b2:	6013      	str	r3, [r2, #0]
		printf("Pong for seq %s (%d)\n", msg->frame_id.data, pong_count);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <pong_subscription_callback+0x48>)
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <pong_subscription_callback+0x4c>)
 80012c0:	f020 fdb8 	bl	8021e34 <iprintf>
	}
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200002b0 	.word	0x200002b0
 80012d0:	200002e0 	.word	0x200002e0
 80012d4:	08025774 	.word	0x08025774

080012d8 <appMain>:

rosidl_message_type_support_t* abcd;

void appMain(void *argument)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0f2      	sub	sp, #456	; 0x1c8
 80012dc:	af02      	add	r7, sp, #8
 80012de:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80012e2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80012e6:	6018      	str	r0, [r3, #0]
	rcl_allocator_t allocator = rcl_get_default_allocator();
 80012e8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80012ec:	4618      	mov	r0, r3
 80012ee:	f01a fa29 	bl	801b744 <rcutils_get_default_allocator>
	rclc_support_t support;

	// create init_options
	RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));
 80012f2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80012f6:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	f019 ff61 	bl	801b1c4 <rclc_support_init>
 8001302:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
 8001306:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800130a:	2b00      	cmp	r3, #0
 800130c:	d008      	beq.n	8001320 <appMain+0x48>
 800130e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001312:	215c      	movs	r1, #92	; 0x5c
 8001314:	4890      	ldr	r0, [pc, #576]	; (8001558 <appMain+0x280>)
 8001316:	f020 fd8d 	bl	8021e34 <iprintf>
 800131a:	2000      	movs	r0, #0
 800131c:	f006 fdb2 	bl	8007e84 <vTaskDelete>

	// create node
	rcl_node_t node;
	RCCHECK(rclc_node_init_default(&node, "pingpong_node", "", &support));
 8001320:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001324:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8001328:	4a8c      	ldr	r2, [pc, #560]	; (800155c <appMain+0x284>)
 800132a:	498d      	ldr	r1, [pc, #564]	; (8001560 <appMain+0x288>)
 800132c:	f019 ffea 	bl	801b304 <rclc_node_init_default>
 8001330:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8
 8001334:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001338:	2b00      	cmp	r3, #0
 800133a:	d008      	beq.n	800134e <appMain+0x76>
 800133c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001340:	2160      	movs	r1, #96	; 0x60
 8001342:	4885      	ldr	r0, [pc, #532]	; (8001558 <appMain+0x280>)
 8001344:	f020 fd76 	bl	8021e34 <iprintf>
 8001348:	2000      	movs	r0, #0
 800134a:	f006 fd9b 	bl	8007e84 <vTaskDelete>

	// Create a reliable ping publisher

	RCCHECK(rclc_publisher_init_default(&ping_publisher, &node,
 800134e:	4b85      	ldr	r3, [pc, #532]	; (8001564 <appMain+0x28c>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8001356:	4b84      	ldr	r3, [pc, #528]	; (8001568 <appMain+0x290>)
 8001358:	4884      	ldr	r0, [pc, #528]	; (800156c <appMain+0x294>)
 800135a:	f01a f857 	bl	801b40c <rclc_publisher_init_default>
 800135e:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
 8001362:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001366:	2b00      	cmp	r3, #0
 8001368:	d008      	beq.n	800137c <appMain+0xa4>
 800136a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800136e:	2164      	movs	r1, #100	; 0x64
 8001370:	4879      	ldr	r0, [pc, #484]	; (8001558 <appMain+0x280>)
 8001372:	f020 fd5f 	bl	8021e34 <iprintf>
 8001376:	2000      	movs	r0, #0
 8001378:	f006 fd84 	bl	8007e84 <vTaskDelete>
			abcd, "/microROS/ping"));

	// Create a best effort pong publisher
	RCCHECK(rclc_publisher_init_best_effort(&pong_publisher, &node,
 800137c:	4b79      	ldr	r3, [pc, #484]	; (8001564 <appMain+0x28c>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8001384:	4b7a      	ldr	r3, [pc, #488]	; (8001570 <appMain+0x298>)
 8001386:	487b      	ldr	r0, [pc, #492]	; (8001574 <appMain+0x29c>)
 8001388:	f01a f856 	bl	801b438 <rclc_publisher_init_best_effort>
 800138c:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 8001390:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <appMain+0xd2>
 8001398:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800139c:	2168      	movs	r1, #104	; 0x68
 800139e:	486e      	ldr	r0, [pc, #440]	; (8001558 <appMain+0x280>)
 80013a0:	f020 fd48 	bl	8021e34 <iprintf>
 80013a4:	2000      	movs	r0, #0
 80013a6:	f006 fd6d 	bl	8007e84 <vTaskDelete>
			abcd, "/microROS/pong"));

	// Create a best effort ping subscriber
	RCCHECK(rclc_subscription_init_best_effort(&ping_subscriber, &node,
 80013aa:	4b6e      	ldr	r3, [pc, #440]	; (8001564 <appMain+0x28c>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80013b2:	4b6d      	ldr	r3, [pc, #436]	; (8001568 <appMain+0x290>)
 80013b4:	4870      	ldr	r0, [pc, #448]	; (8001578 <appMain+0x2a0>)
 80013b6:	f01a f8b7 	bl	801b528 <rclc_subscription_init_best_effort>
 80013ba:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
 80013be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d008      	beq.n	80013d8 <appMain+0x100>
 80013c6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80013ca:	216c      	movs	r1, #108	; 0x6c
 80013cc:	4862      	ldr	r0, [pc, #392]	; (8001558 <appMain+0x280>)
 80013ce:	f020 fd31 	bl	8021e34 <iprintf>
 80013d2:	2000      	movs	r0, #0
 80013d4:	f006 fd56 	bl	8007e84 <vTaskDelete>
			abcd, "/microROS/ping"));

	// Create a best effort  pong subscriber
	RCCHECK(rclc_subscription_init_best_effort(&pong_subscriber, &node,
 80013d8:	4b62      	ldr	r3, [pc, #392]	; (8001564 <appMain+0x28c>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80013e0:	4b63      	ldr	r3, [pc, #396]	; (8001570 <appMain+0x298>)
 80013e2:	4866      	ldr	r0, [pc, #408]	; (800157c <appMain+0x2a4>)
 80013e4:	f01a f8a0 	bl	801b528 <rclc_subscription_init_best_effort>
 80013e8:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 80013ec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <appMain+0x12e>
 80013f4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80013f8:	2170      	movs	r1, #112	; 0x70
 80013fa:	4857      	ldr	r0, [pc, #348]	; (8001558 <appMain+0x280>)
 80013fc:	f020 fd1a 	bl	8021e34 <iprintf>
 8001400:	2000      	movs	r0, #0
 8001402:	f006 fd3f 	bl	8007e84 <vTaskDelete>
			abcd, "/microROS/pong"));


	// Create a 3 seconds ping timer timer,
	rcl_timer_t timer;
	RCCHECK(rclc_timer_init_default(&timer, &support, RCL_MS_TO_NS(2000), ping_timer_callback));
 8001406:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800140a:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 800140e:	4b5c      	ldr	r3, [pc, #368]	; (8001580 <appMain+0x2a8>)
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	a34f      	add	r3, pc, #316	; (adr r3, 8001550 <appMain+0x278>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f01a f8e7 	bl	801b5ea <rclc_timer_init_default>
 800141c:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
 8001420:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d008      	beq.n	800143a <appMain+0x162>
 8001428:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800142c:	2176      	movs	r1, #118	; 0x76
 800142e:	484a      	ldr	r0, [pc, #296]	; (8001558 <appMain+0x280>)
 8001430:	f020 fd00 	bl	8021e34 <iprintf>
 8001434:	2000      	movs	r0, #0
 8001436:	f006 fd25 	bl	8007e84 <vTaskDelete>


	// Create executor
	rclc_executor_t executor;
	RCCHECK(rclc_executor_init(&executor, &support.context, 3, &allocator));
 800143a:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800143e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001442:	f103 0108 	add.w	r1, r3, #8
 8001446:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 800144a:	4613      	mov	r3, r2
 800144c:	2203      	movs	r2, #3
 800144e:	f018 ffcf 	bl	801a3f0 <rclc_executor_init>
 8001452:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
 8001456:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d008      	beq.n	8001470 <appMain+0x198>
 800145e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8001462:	217b      	movs	r1, #123	; 0x7b
 8001464:	483c      	ldr	r0, [pc, #240]	; (8001558 <appMain+0x280>)
 8001466:	f020 fce5 	bl	8021e34 <iprintf>
 800146a:	2000      	movs	r0, #0
 800146c:	f006 fd0a 	bl	8007e84 <vTaskDelete>
	RCCHECK(rclc_executor_add_timer(&executor, &timer));
 8001470:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8001474:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001478:	4611      	mov	r1, r2
 800147a:	4618      	mov	r0, r3
 800147c:	f019 f909 	bl	801a692 <rclc_executor_add_timer>
 8001480:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 8001484:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <appMain+0x1c6>
 800148c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001490:	217c      	movs	r1, #124	; 0x7c
 8001492:	4831      	ldr	r0, [pc, #196]	; (8001558 <appMain+0x280>)
 8001494:	f020 fcce 	bl	8021e34 <iprintf>
 8001498:	2000      	movs	r0, #0
 800149a:	f006 fcf3 	bl	8007e84 <vTaskDelete>
	RCCHECK(rclc_executor_add_subscription(&executor, &ping_subscriber, &incoming_ping,
 800149e:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80014a2:	2300      	movs	r3, #0
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	4b37      	ldr	r3, [pc, #220]	; (8001584 <appMain+0x2ac>)
 80014a8:	4a37      	ldr	r2, [pc, #220]	; (8001588 <appMain+0x2b0>)
 80014aa:	4933      	ldr	r1, [pc, #204]	; (8001578 <appMain+0x2a0>)
 80014ac:	f019 f870 	bl	801a590 <rclc_executor_add_subscription>
 80014b0:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
 80014b4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d008      	beq.n	80014ce <appMain+0x1f6>
 80014bc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80014c0:	217d      	movs	r1, #125	; 0x7d
 80014c2:	4825      	ldr	r0, [pc, #148]	; (8001558 <appMain+0x280>)
 80014c4:	f020 fcb6 	bl	8021e34 <iprintf>
 80014c8:	2000      	movs	r0, #0
 80014ca:	f006 fcdb 	bl	8007e84 <vTaskDelete>
		&ping_subscription_callback, ON_NEW_DATA));
	RCCHECK(rclc_executor_add_subscription(&executor, &pong_subscriber, &incoming_pong,
 80014ce:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80014d2:	2300      	movs	r3, #0
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	4b2d      	ldr	r3, [pc, #180]	; (800158c <appMain+0x2b4>)
 80014d8:	4a2d      	ldr	r2, [pc, #180]	; (8001590 <appMain+0x2b8>)
 80014da:	4928      	ldr	r1, [pc, #160]	; (800157c <appMain+0x2a4>)
 80014dc:	f019 f858 	bl	801a590 <rclc_executor_add_subscription>
 80014e0:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 80014e4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <appMain+0x226>
 80014ec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80014f0:	217f      	movs	r1, #127	; 0x7f
 80014f2:	4819      	ldr	r0, [pc, #100]	; (8001558 <appMain+0x280>)
 80014f4:	f020 fc9e 	bl	8021e34 <iprintf>
 80014f8:	2000      	movs	r0, #0
 80014fa:	f006 fcc3 	bl	8007e84 <vTaskDelete>
		&pong_subscription_callback, ON_NEW_DATA));

	// Create and allocate the pingpong messages
	char outcoming_ping_buffer[STRING_BUFFER_LEN];
	outcoming_ping.frame_id.data = outcoming_ping_buffer;
 80014fe:	4a25      	ldr	r2, [pc, #148]	; (8001594 <appMain+0x2bc>)
 8001500:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001504:	6093      	str	r3, [r2, #8]
	outcoming_ping.frame_id.capacity = STRING_BUFFER_LEN;
 8001506:	4b23      	ldr	r3, [pc, #140]	; (8001594 <appMain+0x2bc>)
 8001508:	2232      	movs	r2, #50	; 0x32
 800150a:	611a      	str	r2, [r3, #16]

	char incoming_ping_buffer[STRING_BUFFER_LEN];
	incoming_ping.frame_id.data = incoming_ping_buffer;
 800150c:	4a1e      	ldr	r2, [pc, #120]	; (8001588 <appMain+0x2b0>)
 800150e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001512:	6093      	str	r3, [r2, #8]
	incoming_ping.frame_id.capacity = STRING_BUFFER_LEN;
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <appMain+0x2b0>)
 8001516:	2232      	movs	r2, #50	; 0x32
 8001518:	611a      	str	r2, [r3, #16]

	char incoming_pong_buffer[STRING_BUFFER_LEN];
	incoming_pong.frame_id.data = incoming_pong_buffer;
 800151a:	4a1d      	ldr	r2, [pc, #116]	; (8001590 <appMain+0x2b8>)
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	6093      	str	r3, [r2, #8]
	incoming_pong.frame_id.capacity = STRING_BUFFER_LEN;
 8001522:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <appMain+0x2b8>)
 8001524:	2232      	movs	r2, #50	; 0x32
 8001526:	611a      	str	r2, [r3, #16]

	device_id = rand();
 8001528:	f020 fd40 	bl	8021fac <rand>
 800152c:	4603      	mov	r3, r0
 800152e:	4a1a      	ldr	r2, [pc, #104]	; (8001598 <appMain+0x2c0>)
 8001530:	6013      	str	r3, [r2, #0]

	while(1){
		rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 8001532:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001536:	4a19      	ldr	r2, [pc, #100]	; (800159c <appMain+0x2c4>)
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	4608      	mov	r0, r1
 800153e:	f019 fc97 	bl	801ae70 <rclc_executor_spin_some>
		usleep(10000);
 8001542:	f242 7010 	movw	r0, #10000	; 0x2710
 8001546:	f008 fd17 	bl	8009f78 <usleep>
		rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 800154a:	e7f2      	b.n	8001532 <appMain+0x25a>
 800154c:	f3af 8000 	nop.w
 8001550:	77359400 	.word	0x77359400
 8001554:	00000000 	.word	0x00000000
 8001558:	0802578c 	.word	0x0802578c
 800155c:	080257b8 	.word	0x080257b8
 8001560:	080257bc 	.word	0x080257bc
 8001564:	200002e4 	.word	0x200002e4
 8001568:	080257cc 	.word	0x080257cc
 800156c:	2000028c 	.word	0x2000028c
 8001570:	080257dc 	.word	0x080257dc
 8001574:	20000290 	.word	0x20000290
 8001578:	20000294 	.word	0x20000294
 800157c:	20000298 	.word	0x20000298
 8001580:	080011a1 	.word	0x080011a1
 8001584:	0800123d 	.word	0x0800123d
 8001588:	2000029c 	.word	0x2000029c
 800158c:	08001289 	.word	0x08001289
 8001590:	200002c4 	.word	0x200002c4
 8001594:	200002b0 	.word	0x200002b0
 8001598:	200002d8 	.word	0x200002d8
 800159c:	00989680 	.word	0x00989680

080015a0 <__freertos_allocate>:
#include <allocators.h>

int absoluteUsedMemory = 0;
int usedMemory = 0;

void * __freertos_allocate(size_t size, void * state){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <__freertos_allocate+0x3c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <__freertos_allocate+0x3c>)
 80015b8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <__freertos_allocate+0x40>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <__freertos_allocate+0x40>)
 80015c8:	601a      	str	r2, [r3, #0]
  return pvPortMalloc(size);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f890 	bl	80016f0 <pvPortMalloc>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200002e8 	.word	0x200002e8
 80015e0:	200002ec 	.word	0x200002ec

080015e4 <__freertos_deallocate>:

void __freertos_deallocate(void * pointer, void * state){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  (void) state;
 if( NULL != pointer){
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00b      	beq.n	800160c <__freertos_deallocate+0x28>
    // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
    usedMemory -= getBlockSize(pointer);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f999 	bl	800192c <getBlockSize>
 80015fa:	4602      	mov	r2, r0
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <__freertos_deallocate+0x30>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	4a04      	ldr	r2, [pc, #16]	; (8001614 <__freertos_deallocate+0x30>)
 8001604:	6013      	str	r3, [r2, #0]
    vPortFree(pointer);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f936 	bl	8001878 <vPortFree>
 }
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200002ec 	.word	0x200002ec

08001618 <__freertos_reallocate>:

void * __freertos_reallocate(void * pointer, size_t size, void * state){
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d01e      	beq.n	8001668 <__freertos_reallocate+0x50>
    absoluteUsedMemory += size;
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <__freertos_reallocate+0x80>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4413      	add	r3, r2
 8001634:	461a      	mov	r2, r3
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <__freertos_reallocate+0x80>)
 8001638:	601a      	str	r2, [r3, #0]
    usedMemory += size;
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <__freertos_reallocate+0x84>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4413      	add	r3, r2
 8001644:	461a      	mov	r2, r3
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <__freertos_reallocate+0x84>)
 8001648:	601a      	str	r2, [r3, #0]
    usedMemory -= getBlockSize(pointer);
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 f96e 	bl	800192c <getBlockSize>
 8001650:	4602      	mov	r2, r0
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <__freertos_reallocate+0x84>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1a9b      	subs	r3, r3, r2
 8001658:	4a10      	ldr	r2, [pc, #64]	; (800169c <__freertos_reallocate+0x84>)
 800165a:	6013      	str	r3, [r2, #0]
    return pvPortRealloc(pointer,size);
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 f982 	bl	8001968 <pvPortRealloc>
 8001664:	4603      	mov	r3, r0
 8001666:	e013      	b.n	8001690 <__freertos_reallocate+0x78>
  }
  else {
      absoluteUsedMemory += size;
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <__freertos_reallocate+0x80>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	4413      	add	r3, r2
 8001672:	461a      	mov	r2, r3
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <__freertos_reallocate+0x80>)
 8001676:	601a      	str	r2, [r3, #0]
      usedMemory += size;
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <__freertos_reallocate+0x84>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	4413      	add	r3, r2
 8001682:	461a      	mov	r2, r3
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <__freertos_reallocate+0x84>)
 8001686:	601a      	str	r2, [r3, #0]
      return pvPortMalloc(size);
 8001688:	68b8      	ldr	r0, [r7, #8]
 800168a:	f000 f831 	bl	80016f0 <pvPortMalloc>
 800168e:	4603      	mov	r3, r0
  }
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200002e8 	.word	0x200002e8
 800169c:	200002ec 	.word	0x200002ec

080016a0 <__freertos_zero_allocate>:

void * __freertos_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	fb02 f303 	mul.w	r3, r2, r3
 80016b4:	4a0c      	ldr	r2, [pc, #48]	; (80016e8 <__freertos_zero_allocate+0x48>)
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	4413      	add	r3, r2
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <__freertos_zero_allocate+0x48>)
 80016be:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	fb02 f303 	mul.w	r3, r2, r3
 80016c8:	4a08      	ldr	r2, [pc, #32]	; (80016ec <__freertos_zero_allocate+0x4c>)
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <__freertos_zero_allocate+0x4c>)
 80016d2:	601a      	str	r2, [r3, #0]
  return pvPortCalloc(number_of_elements,size_of_element);
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 f980 	bl	80019dc <pvPortCalloc>
 80016dc:	4603      	mov	r3, r0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200002e8 	.word	0x200002e8
 80016ec:	200002ec 	.word	0x200002ec

080016f0 <pvPortMalloc>:
space. */
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc(size_t xWantedSize) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
  void *pvReturn = NULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]

  vTaskSuspendAll();
 80016fc:	f006 fd34 	bl	8008168 <vTaskSuspendAll>
  {
    /* If this is the first call to malloc then the heap will require
    initialisation to setup the list of free blocks. */
    if (pxEnd == NULL) {
 8001700:	4b58      	ldr	r3, [pc, #352]	; (8001864 <pvPortMalloc+0x174>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <pvPortMalloc+0x1c>
      prvHeapInit();
 8001708:	f000 f98c 	bl	8001a24 <prvHeapInit>

    /* Check the requested block size is not so large that the top bit is
    set.  The top bit of the block size member of the BlockLink_t structure
    is used to determine who owns the block - the application or the
    kernel, so it must be free. */
    if ((xWantedSize & xBlockAllocatedBit) == 0) {
 800170c:	4b56      	ldr	r3, [pc, #344]	; (8001868 <pvPortMalloc+0x178>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	f040 808e 	bne.w	8001836 <pvPortMalloc+0x146>
      /* The wanted size is increased so it can contain a BlockLink_t
      structure in addition to the requested amount of bytes. */
      if (xWantedSize > 0) {
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01d      	beq.n	800175c <pvPortMalloc+0x6c>
        xWantedSize += xHeapStructSize;
 8001720:	2208      	movs	r2, #8
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	607b      	str	r3, [r7, #4]

        /* Ensure that blocks are always aligned to the required number
        of bytes. */
        if ((xWantedSize & portBYTE_ALIGNMENT_MASK) != 0x00) {
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	2b00      	cmp	r3, #0
 8001730:	d014      	beq.n	800175c <pvPortMalloc+0x6c>
          /* Byte alignment required. */
          xWantedSize +=
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f023 0307 	bic.w	r3, r3, #7
 8001738:	3308      	adds	r3, #8
 800173a:	607b      	str	r3, [r7, #4]
              (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
          configASSERT((xWantedSize & portBYTE_ALIGNMENT_MASK) == 0);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00a      	beq.n	800175c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800174a:	f383 8811 	msr	BASEPRI, r3
 800174e:	f3bf 8f6f 	isb	sy
 8001752:	f3bf 8f4f 	dsb	sy
 8001756:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001758:	bf00      	nop
 800175a:	e7fe      	b.n	800175a <pvPortMalloc+0x6a>
        }
      } else {
        mtCOVERAGE_TEST_MARKER();
      }

      if ((xWantedSize > 0) && (xWantedSize <= xFreeBytesRemaining)) {
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d069      	beq.n	8001836 <pvPortMalloc+0x146>
 8001762:	4b42      	ldr	r3, [pc, #264]	; (800186c <pvPortMalloc+0x17c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	429a      	cmp	r2, r3
 800176a:	d864      	bhi.n	8001836 <pvPortMalloc+0x146>
        /* Traverse the list from the start	(lowest address) block until
        one	of adequate size is found. */
        pxPreviousBlock = &xStart;
 800176c:	4b40      	ldr	r3, [pc, #256]	; (8001870 <pvPortMalloc+0x180>)
 800176e:	623b      	str	r3, [r7, #32]
        pxBlock = xStart.pxNextFreeBlock;
 8001770:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <pvPortMalloc+0x180>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
        while ((pxBlock->xBlockSize < xWantedSize) &&
 8001776:	e004      	b.n	8001782 <pvPortMalloc+0x92>
               (pxBlock->pxNextFreeBlock != NULL)) {
          pxPreviousBlock = pxBlock;
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	623b      	str	r3, [r7, #32]
          pxBlock = pxBlock->pxNextFreeBlock;
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
        while ((pxBlock->xBlockSize < xWantedSize) &&
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	429a      	cmp	r2, r3
 800178a:	d903      	bls.n	8001794 <pvPortMalloc+0xa4>
               (pxBlock->pxNextFreeBlock != NULL)) {
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	681b      	ldr	r3, [r3, #0]
        while ((pxBlock->xBlockSize < xWantedSize) &&
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f1      	bne.n	8001778 <pvPortMalloc+0x88>
        }

        /* If the end marker was reached then a block of adequate size
        was	not found. */
        if (pxBlock != pxEnd) {
 8001794:	4b33      	ldr	r3, [pc, #204]	; (8001864 <pvPortMalloc+0x174>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800179a:	429a      	cmp	r2, r3
 800179c:	d04b      	beq.n	8001836 <pvPortMalloc+0x146>
          /* Return the memory space pointed to - jumping over the
          BlockLink_t structure at its start. */
          pvReturn = (void *)(((uint8_t *)pxPreviousBlock->pxNextFreeBlock) +
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2208      	movs	r2, #8
 80017a4:	4413      	add	r3, r2
 80017a6:	61fb      	str	r3, [r7, #28]
                              xHeapStructSize);

          /* This block is being returned for use so must be taken out
          of the list of free blocks. */
          pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	601a      	str	r2, [r3, #0]

          /* If the block is larger than required it can be split into
          two. */
          if ((pxBlock->xBlockSize - xWantedSize) > heapMINIMUM_BLOCK_SIZE) {
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	1ad2      	subs	r2, r2, r3
 80017b8:	2308      	movs	r3, #8
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	429a      	cmp	r2, r3
 80017be:	d91f      	bls.n	8001800 <pvPortMalloc+0x110>
            /* This block is to be split into two.  Create a new
            block following the number of bytes requested. The void
            cast is used to prevent byte alignment warnings from the
            compiler. */
            pxNewBlockLink = (void *)(((uint8_t *)pxBlock) + xWantedSize);
 80017c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
            configASSERT((((size_t)pxNewBlockLink) & portBYTE_ALIGNMENT_MASK) ==
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00a      	beq.n	80017e8 <pvPortMalloc+0xf8>
	__asm volatile
 80017d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d6:	f383 8811 	msr	BASEPRI, r3
 80017da:	f3bf 8f6f 	isb	sy
 80017de:	f3bf 8f4f 	dsb	sy
 80017e2:	613b      	str	r3, [r7, #16]
}
 80017e4:	bf00      	nop
 80017e6:	e7fe      	b.n	80017e6 <pvPortMalloc+0xf6>
                         0);

            /* Calculate the sizes of two blocks split from the
            single block. */
            pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	1ad2      	subs	r2, r2, r3
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	605a      	str	r2, [r3, #4]
            pxBlock->xBlockSize = xWantedSize;
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	605a      	str	r2, [r3, #4]

            /* Insert the new block into the list of free blocks. */
            prvInsertBlockIntoFreeList(pxNewBlockLink);
 80017fa:	69b8      	ldr	r0, [r7, #24]
 80017fc:	f000 f974 	bl	8001ae8 <prvInsertBlockIntoFreeList>
          } else {
            mtCOVERAGE_TEST_MARKER();
          }

          xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <pvPortMalloc+0x17c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	4a18      	ldr	r2, [pc, #96]	; (800186c <pvPortMalloc+0x17c>)
 800180c:	6013      	str	r3, [r2, #0]

          if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <pvPortMalloc+0x17c>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <pvPortMalloc+0x184>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d203      	bcs.n	8001822 <pvPortMalloc+0x132>
            xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800181a:	4b14      	ldr	r3, [pc, #80]	; (800186c <pvPortMalloc+0x17c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a15      	ldr	r2, [pc, #84]	; (8001874 <pvPortMalloc+0x184>)
 8001820:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
          }

          /* The block is being returned - it is allocated and owned
          by the application and has no "next" block. */
          pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <pvPortMalloc+0x178>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	431a      	orrs	r2, r3
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	605a      	str	r2, [r3, #4]
          pxBlock->pxNextFreeBlock = NULL;
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
      mtCOVERAGE_TEST_MARKER();
    }

    traceMALLOC(pvReturn, xWantedSize);
  }
  (void)xTaskResumeAll();
 8001836:	f006 fca5 	bl	8008184 <xTaskResumeAll>
      mtCOVERAGE_TEST_MARKER();
    }
  }
#endif

  configASSERT((((size_t)pvReturn) & (size_t)portBYTE_ALIGNMENT_MASK) == 0);
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00a      	beq.n	800185a <pvPortMalloc+0x16a>
	__asm volatile
 8001844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001848:	f383 8811 	msr	BASEPRI, r3
 800184c:	f3bf 8f6f 	isb	sy
 8001850:	f3bf 8f4f 	dsb	sy
 8001854:	60fb      	str	r3, [r7, #12]
}
 8001856:	bf00      	nop
 8001858:	e7fe      	b.n	8001858 <pvPortMalloc+0x168>
  return pvReturn;
 800185a:	69fb      	ldr	r3, [r7, #28]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3728      	adds	r7, #40	; 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	2000c648 	.word	0x2000c648
 8001868:	2000c654 	.word	0x2000c654
 800186c:	2000c64c 	.word	0x2000c64c
 8001870:	2000c640 	.word	0x2000c640
 8001874:	2000c650 	.word	0x2000c650

08001878 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree(void *pv) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint8_t *puc = (uint8_t *)pv;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	617b      	str	r3, [r7, #20]
  BlockLink_t *pxLink;

  if (pv != NULL) {
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d048      	beq.n	800191c <vPortFree+0xa4>
    /* The memory being freed will have an BlockLink_t structure immediately
    before it. */
    puc -= xHeapStructSize;
 800188a:	2308      	movs	r3, #8
 800188c:	425b      	negs	r3, r3
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	4413      	add	r3, r2
 8001892:	617b      	str	r3, [r7, #20]

    /* This casting is to keep the compiler from issuing warnings. */
    pxLink = (void *)puc;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	613b      	str	r3, [r7, #16]

    /* Check the block is actually allocated. */
    configASSERT((pxLink->xBlockSize & xBlockAllocatedBit) != 0);
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <vPortFree+0xac>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10a      	bne.n	80018bc <vPortFree+0x44>
	__asm volatile
 80018a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018aa:	f383 8811 	msr	BASEPRI, r3
 80018ae:	f3bf 8f6f 	isb	sy
 80018b2:	f3bf 8f4f 	dsb	sy
 80018b6:	60fb      	str	r3, [r7, #12]
}
 80018b8:	bf00      	nop
 80018ba:	e7fe      	b.n	80018ba <vPortFree+0x42>
    configASSERT(pxLink->pxNextFreeBlock == NULL);
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00a      	beq.n	80018da <vPortFree+0x62>
	__asm volatile
 80018c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c8:	f383 8811 	msr	BASEPRI, r3
 80018cc:	f3bf 8f6f 	isb	sy
 80018d0:	f3bf 8f4f 	dsb	sy
 80018d4:	60bb      	str	r3, [r7, #8]
}
 80018d6:	bf00      	nop
 80018d8:	e7fe      	b.n	80018d8 <vPortFree+0x60>

    if ((pxLink->xBlockSize & xBlockAllocatedBit) != 0) {
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <vPortFree+0xac>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d019      	beq.n	800191c <vPortFree+0xa4>
      if (pxLink->pxNextFreeBlock == NULL) {
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d115      	bne.n	800191c <vPortFree+0xa4>
        /* The block is being returned to the heap - it is no longer
        allocated. */
        pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <vPortFree+0xac>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	605a      	str	r2, [r3, #4]

        vTaskSuspendAll();
 8001900:	f006 fc32 	bl	8008168 <vTaskSuspendAll>
        {
          /* Add this block to the list of free blocks. */
          xFreeBytesRemaining += pxLink->xBlockSize;
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <vPortFree+0xb0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4413      	add	r3, r2
 800190e:	4a06      	ldr	r2, [pc, #24]	; (8001928 <vPortFree+0xb0>)
 8001910:	6013      	str	r3, [r2, #0]
          traceFREE(pv, pxLink->xBlockSize);
          prvInsertBlockIntoFreeList(((BlockLink_t *)pxLink));
 8001912:	6938      	ldr	r0, [r7, #16]
 8001914:	f000 f8e8 	bl	8001ae8 <prvInsertBlockIntoFreeList>
        }
        (void)xTaskResumeAll();
 8001918:	f006 fc34 	bl	8008184 <xTaskResumeAll>
      }
    } else {
      mtCOVERAGE_TEST_MARKER();
    }
  }
}
 800191c:	bf00      	nop
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000c654 	.word	0x2000c654
 8001928:	2000c64c 	.word	0x2000c64c

0800192c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize(void *pv) {
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint8_t *puc = (uint8_t *)pv;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	617b      	str	r3, [r7, #20]
  BlockLink_t *pxLink;

  puc -= xHeapStructSize;
 8001938:	2308      	movs	r3, #8
 800193a:	425b      	negs	r3, r3
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	4413      	add	r3, r2
 8001940:	617b      	str	r3, [r7, #20]
  pxLink = (void *)puc;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	613b      	str	r3, [r7, #16]

  size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <getBlockSize+0x38>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	43db      	mvns	r3, r3
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]

  return count;
 8001954:	68fb      	ldr	r3, [r7, #12]
}
 8001956:	4618      	mov	r0, r3
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	2000c654 	.word	0x2000c654

08001968 <pvPortRealloc>:
/*-----------------------------------------------------------*/

void *pvPortRealloc(void *pv, size_t xWantedSize) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  vTaskSuspendAll();
 8001972:	f006 fbf9 	bl	8008168 <vTaskSuspendAll>

  void *newmem = pvPortMalloc(xWantedSize);
 8001976:	6838      	ldr	r0, [r7, #0]
 8001978:	f7ff feba 	bl	80016f0 <pvPortMalloc>
 800197c:	6138      	str	r0, [r7, #16]

  uint8_t *puc = (uint8_t *)pv;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60fb      	str	r3, [r7, #12]
  BlockLink_t *pxLink;

  puc -= xHeapStructSize;
 8001982:	2308      	movs	r3, #8
 8001984:	425b      	negs	r3, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4413      	add	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
  pxLink = (void *)puc;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	60bb      	str	r3, [r7, #8]

  char *in_src = (char *)pv;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	61fb      	str	r3, [r7, #28]
  char *in_dest = (char *)newmem;
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	61bb      	str	r3, [r7, #24]
  size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <pvPortRealloc+0x70>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4013      	ands	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]

  while (count--) *in_dest++ = *in_src++;
 80019a6:	e007      	b.n	80019b8 <pvPortRealloc+0x50>
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	1c53      	adds	r3, r2, #1
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	1c59      	adds	r1, r3, #1
 80019b2:	61b9      	str	r1, [r7, #24]
 80019b4:	7812      	ldrb	r2, [r2, #0]
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	1e5a      	subs	r2, r3, #1
 80019bc:	617a      	str	r2, [r7, #20]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f2      	bne.n	80019a8 <pvPortRealloc+0x40>

  vPortFree(pv);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ff58 	bl	8001878 <vPortFree>

  (void)xTaskResumeAll();
 80019c8:	f006 fbdc 	bl	8008184 <xTaskResumeAll>

  return newmem;
 80019cc:	693b      	ldr	r3, [r7, #16]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3720      	adds	r7, #32
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000c654 	.word	0x2000c654

080019dc <pvPortCalloc>:
/*-----------------------------------------------------------*/

void *pvPortCalloc(size_t num, size_t xWantedSize) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  vTaskSuspendAll();
 80019e6:	f006 fbbf 	bl	8008168 <vTaskSuspendAll>
  size_t count = xWantedSize * num;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	617b      	str	r3, [r7, #20]

  void *mem = pvPortMalloc(count);
 80019f4:	6978      	ldr	r0, [r7, #20]
 80019f6:	f7ff fe7b 	bl	80016f0 <pvPortMalloc>
 80019fa:	60f8      	str	r0, [r7, #12]
  char *in_dest = (char *)mem;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	613b      	str	r3, [r7, #16]

  while (count--) *in_dest++ = 0;
 8001a00:	e004      	b.n	8001a0c <pvPortCalloc+0x30>
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	613a      	str	r2, [r7, #16]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	1e5a      	subs	r2, r3, #1
 8001a10:	617a      	str	r2, [r7, #20]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f5      	bne.n	8001a02 <pvPortCalloc+0x26>

  (void)xTaskResumeAll();
 8001a16:	f006 fbb5 	bl	8008184 <xTaskResumeAll>
  return mem;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <prvHeapInit>:
void vPortInitialiseBlocks(void) {
  /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit(void) {
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
  BlockLink_t *pxFirstFreeBlock;
  uint8_t *pucAlignedHeap;
  size_t uxAddress;
  size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001a2a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001a2e:	60bb      	str	r3, [r7, #8]

  /* Ensure the heap starts on a correctly aligned boundary. */
  uxAddress = (size_t)ucHeap;
 8001a30:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <prvHeapInit+0xac>)
 8001a32:	60fb      	str	r3, [r7, #12]

  if ((uxAddress & portBYTE_ALIGNMENT_MASK) != 0) {
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00c      	beq.n	8001a58 <prvHeapInit+0x34>
    uxAddress += (portBYTE_ALIGNMENT - 1);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3307      	adds	r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~((size_t)portBYTE_ALIGNMENT_MASK);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f023 0307 	bic.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]
    xTotalHeapSize -= uxAddress - (size_t)ucHeap;
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <prvHeapInit+0xac>)
 8001a54:	4413      	add	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
  }

  pucAlignedHeap = (uint8_t *)uxAddress;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	607b      	str	r3, [r7, #4]

  /* xStart is used to hold a pointer to the first item in the list of free
  blocks.  The void cast is used to prevent compiler warnings. */
  xStart.pxNextFreeBlock = (void *)pucAlignedHeap;
 8001a5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <prvHeapInit+0xb0>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  xStart.xBlockSize = (size_t)0;
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <prvHeapInit+0xb0>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	605a      	str	r2, [r3, #4]

  /* pxEnd is used to mark the end of the list of free blocks and is inserted
  at the end of the heap space. */
  uxAddress = ((size_t)pucAlignedHeap) + xTotalHeapSize;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]
  uxAddress -= xHeapStructSize;
 8001a70:	2208      	movs	r2, #8
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1a9b      	subs	r3, r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
  uxAddress &= ~((size_t)portBYTE_ALIGNMENT_MASK);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f023 0307 	bic.w	r3, r3, #7
 8001a7e:	60fb      	str	r3, [r7, #12]
  pxEnd = (void *)uxAddress;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4a15      	ldr	r2, [pc, #84]	; (8001ad8 <prvHeapInit+0xb4>)
 8001a84:	6013      	str	r3, [r2, #0]
  pxEnd->xBlockSize = 0;
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <prvHeapInit+0xb4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
  pxEnd->pxNextFreeBlock = NULL;
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <prvHeapInit+0xb4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]

  /* To start with there is a single free block that is sized to take up the
  entire heap space, minus the space taken by pxEnd. */
  pxFirstFreeBlock = (void *)pucAlignedHeap;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]
  pxFirstFreeBlock->xBlockSize = uxAddress - (size_t)pxFirstFreeBlock;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	1ad2      	subs	r2, r2, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
  pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <prvHeapInit+0xb4>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Only one block exists - and it covers the entire usable heap space. */
  xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <prvHeapInit+0xb8>)
 8001ab2:	6013      	str	r3, [r2, #0]
  xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <prvHeapInit+0xbc>)
 8001aba:	6013      	str	r3, [r2, #0]

  /* Work out the position of the top bit in a size_t variable. */
  xBlockAllocatedBit = ((size_t)1)
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <prvHeapInit+0xc0>)
 8001abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ac2:	601a      	str	r2, [r3, #0]
                       << ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	200002f0 	.word	0x200002f0
 8001ad4:	2000c640 	.word	0x2000c640
 8001ad8:	2000c648 	.word	0x2000c648
 8001adc:	2000c650 	.word	0x2000c650
 8001ae0:	2000c64c 	.word	0x2000c64c
 8001ae4:	2000c654 	.word	0x2000c654

08001ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList(BlockLink_t *pxBlockToInsert) {
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  BlockLink_t *pxIterator;
  uint8_t *puc;

  /* Iterate through the list until a block is found that has a higher address
  than the block being inserted. */
  for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <prvInsertBlockIntoFreeList+0xac>)
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	e002      	b.n	8001afc <prvInsertBlockIntoFreeList+0x14>
       pxIterator = pxIterator->pxNextFreeBlock) {
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60fb      	str	r3, [r7, #12]
  for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d8f7      	bhi.n	8001af6 <prvInsertBlockIntoFreeList+0xe>
    /* Nothing to do here, just iterate to the right position. */
  }

  /* Do the block being inserted, and the block it is being inserted after
  make a contiguous block of memory? */
  puc = (uint8_t *)pxIterator;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
  if ((puc + pxIterator->xBlockSize) == (uint8_t *)pxBlockToInsert) {
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	4413      	add	r3, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d108      	bne.n	8001b2a <prvInsertBlockIntoFreeList+0x42>
    pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	441a      	add	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	605a      	str	r2, [r3, #4]
    pxBlockToInsert = pxIterator;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	607b      	str	r3, [r7, #4]
    mtCOVERAGE_TEST_MARKER();
  }

  /* Do the block being inserted, and the block it is being inserted before
  make a contiguous block of memory? */
  puc = (uint8_t *)pxBlockToInsert;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60bb      	str	r3, [r7, #8]
  if ((puc + pxBlockToInsert->xBlockSize) ==
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	441a      	add	r2, r3
      (uint8_t *)pxIterator->pxNextFreeBlock) {
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
  if ((puc + pxBlockToInsert->xBlockSize) ==
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d118      	bne.n	8001b70 <prvInsertBlockIntoFreeList+0x88>
    if (pxIterator->pxNextFreeBlock != pxEnd) {
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <prvInsertBlockIntoFreeList+0xb0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d00d      	beq.n	8001b66 <prvInsertBlockIntoFreeList+0x7e>
      /* Form one big block from the two blocks. */
      pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	441a      	add	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	605a      	str	r2, [r3, #4]
      pxBlockToInsert->pxNextFreeBlock =
          pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
      pxBlockToInsert->pxNextFreeBlock =
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e008      	b.n	8001b78 <prvInsertBlockIntoFreeList+0x90>
    } else {
      pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <prvInsertBlockIntoFreeList+0xb0>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e003      	b.n	8001b78 <prvInsertBlockIntoFreeList+0x90>
    }
  } else {
    pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	601a      	str	r2, [r3, #0]

  /* If the block being inserted plugged a gab, so was merged with the block
  before and the block after, then it's pxNextFreeBlock pointer will have
  already been set, and should not be set here as that would make it point
  to itself. */
  if (pxIterator != pxBlockToInsert) {
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d002      	beq.n	8001b86 <prvInsertBlockIntoFreeList+0x9e>
    pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	601a      	str	r2, [r3, #0]
  } else {
    mtCOVERAGE_TEST_MARKER();
  }
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	2000c640 	.word	0x2000c640
 8001b98:	2000c648 	.word	0x2000c648

08001b9c <__io_putchar>:
UART_HandleTypeDef *printf_uart = NULL;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint8_t c[1];
  c[0] = ch & 0x00FF;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	733b      	strb	r3, [r7, #12]
  if (printf_uart != NULL) {
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <__io_putchar+0x30>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <__io_putchar+0x26>
    HAL_UART_Transmit(printf_uart, &c[0], 1, 10);
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <__io_putchar+0x30>)
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	f107 010c 	add.w	r1, r7, #12
 8001bba:	230a      	movs	r3, #10
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f003 fa18 	bl	8004ff2 <HAL_UART_Transmit>
  }
  return ch;
 8001bc2:	687b      	ldr	r3, [r7, #4]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	2000cb64 	.word	0x2000cb64

08001bd0 <_write>:

int _write(int file, char *ptr, int len) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	e009      	b.n	8001bf6 <_write+0x26>
    __io_putchar(*ptr++);
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	60ba      	str	r2, [r7, #8]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ffd6 	bl	8001b9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	dbf1      	blt.n	8001be2 <_write+0x12>
  }
  return len;
 8001bfe:	687b      	ldr	r3, [r7, #4]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8001c0c:	f000 fe26 	bl	800285c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c10:	f000 f81c 	bl	8001c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c14:	f000 f924 	bl	8001e60 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c18:	f000 f8fa 	bl	8001e10 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001c1c:	f000 f8a0 	bl	8001d60 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001c20:	f000 f8c8 	bl	8001db4 <MX_USB_OTG_FS_PCD_Init>
  printf_uart = &huart3; 
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c24:	f004 feba 	bl	800699c <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle =
      osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c28:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <main+0x38>)
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <main+0x3c>)
 8001c2e:	f004 ff1f 	bl	8006a70 <osThreadNew>
 8001c32:	4603      	mov	r3, r0
  defaultTaskHandle =
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <main+0x40>)
 8001c36:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001c38:	f004 fee4 	bl	8006a04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001c3c:	e7fe      	b.n	8001c3c <main+0x34>
 8001c3e:	bf00      	nop
 8001c40:	08026fc4 	.word	0x08026fc4
 8001c44:	08001fbd 	.word	0x08001fbd
 8001c48:	2000cb60 	.word	0x2000cb60

08001c4c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b0ac      	sub	sp, #176	; 0xb0
 8001c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c52:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c56:	2234      	movs	r2, #52	; 0x34
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f01f f858 	bl	8020d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c60:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	225c      	movs	r2, #92	; 0x5c
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f01f f849 	bl	8020d10 <memset>

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <SystemClock_Config+0x10c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a34      	ldr	r2, [pc, #208]	; (8001d58 <SystemClock_Config+0x10c>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <SystemClock_Config+0x10c>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	4b2f      	ldr	r3, [pc, #188]	; (8001d5c <SystemClock_Config+0x110>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a2e      	ldr	r2, [pc, #184]	; (8001d5c <SystemClock_Config+0x110>)
 8001ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <SystemClock_Config+0x110>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cba:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001cbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001cd6:	23a8      	movs	r3, #168	; 0xa8
 8001cd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001cee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f002 fc98 	bl	8004628 <HAL_RCC_OscConfig>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <SystemClock_Config+0xb6>
    Error_Handler();
 8001cfe:	f000 fa45 	bl	800218c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001d02:	230f      	movs	r3, #15
 8001d04:	66bb      	str	r3, [r7, #104]	; 0x68
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d06:	2302      	movs	r3, #2
 8001d08:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d12:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d18:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001d1a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d1e:	2105      	movs	r1, #5
 8001d20:	4618      	mov	r0, r3
 8001d22:	f001 fddb 	bl	80038dc <HAL_RCC_ClockConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <SystemClock_Config+0xe4>
    Error_Handler();
 8001d2c:	f000 fa2e 	bl	800218c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d34:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001d36:	2300      	movs	r3, #0
 8001d38:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f001 ff18 	bl	8003b74 <HAL_RCCEx_PeriphCLKConfig>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <SystemClock_Config+0x102>
    Error_Handler();
 8001d4a:	f000 fa1f 	bl	800218c <Error_Handler>
  }
}
 8001d4e:	bf00      	nop
 8001d50:	37b0      	adds	r7, #176	; 0xb0
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40007000 	.word	0x40007000

08001d60 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <MX_USART3_UART_Init+0x50>)
 8001d68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d86:	220c      	movs	r2, #12
 8001d88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d98:	f003 f8de 	bl	8004f58 <HAL_UART_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART3_UART_Init+0x46>
    Error_Handler();
 8001da2:	f000 f9f3 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000c658 	.word	0x2000c658
 8001db0:	40004800 	.word	0x40004800

08001db4 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dc2:	2206      	movs	r2, #6
 8001dc4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dc8:	2202      	movs	r2, #2
 8001dca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df8:	f001 fc27 	bl	800364a <HAL_PCD_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 8001e02:	f000 f9c3 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000c758 	.word	0x2000c758

08001e10 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <MX_DMA_Init+0x4c>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a0f      	ldr	r2, [pc, #60]	; (8001e5c <MX_DMA_Init+0x4c>)
 8001e20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <MX_DMA_Init+0x4c>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2105      	movs	r1, #5
 8001e36:	200c      	movs	r0, #12
 8001e38:	f000 fe2e 	bl	8002a98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e3c:	200c      	movs	r0, #12
 8001e3e:	f000 fe47 	bl	8002ad0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2105      	movs	r1, #5
 8001e46:	200e      	movs	r0, #14
 8001e48:	f000 fe26 	bl	8002a98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001e4c:	200e      	movs	r0, #14
 8001e4e:	f000 fe3f 	bl	8002ad0 <HAL_NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800

08001e60 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08c      	sub	sp, #48	; 0x30
 8001e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e66:	f107 031c 	add.w	r3, r7, #28
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
 8001e74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	4b4b      	ldr	r3, [pc, #300]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a4a      	ldr	r2, [pc, #296]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b48      	ldr	r3, [pc, #288]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	4b44      	ldr	r3, [pc, #272]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a43      	ldr	r2, [pc, #268]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b3a      	ldr	r3, [pc, #232]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a35      	ldr	r2, [pc, #212]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001ed4:	f043 0308 	orr.w	r3, r3, #8
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a2e      	ldr	r2, [pc, #184]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a27      	ldr	r2, [pc, #156]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <MX_GPIO_Init+0x148>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f244 0181 	movw	r1, #16513	; 0x4081
 8001f24:	4821      	ldr	r0, [pc, #132]	; (8001fac <MX_GPIO_Init+0x14c>)
 8001f26:	f001 fb77 	bl	8003618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2140      	movs	r1, #64	; 0x40
 8001f2e:	4820      	ldr	r0, [pc, #128]	; (8001fb0 <MX_GPIO_Init+0x150>)
 8001f30:	f001 fb72 	bl	8003618 <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f3a:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <MX_GPIO_Init+0x154>)
 8001f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	481b      	ldr	r0, [pc, #108]	; (8001fb8 <MX_GPIO_Init+0x158>)
 8001f4a:	f001 f9d1 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8001f4e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	4619      	mov	r1, r3
 8001f66:	4811      	ldr	r0, [pc, #68]	; (8001fac <MX_GPIO_Init+0x14c>)
 8001f68:	f001 f9c2 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001f6c:	2340      	movs	r3, #64	; 0x40
 8001f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f70:	2301      	movs	r3, #1
 8001f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	4619      	mov	r1, r3
 8001f82:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <MX_GPIO_Init+0x150>)
 8001f84:	f001 f9b4 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_GPIO_Init+0x150>)
 8001f9c:	f001 f9a8 	bl	80032f0 <HAL_GPIO_Init>
}
 8001fa0:	bf00      	nop
 8001fa2:	3730      	adds	r7, #48	; 0x30
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40021800 	.word	0x40021800
 8001fb4:	10110000 	.word	0x10110000
 8001fb8:	40020800 	.word	0x40020800

08001fbc <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8001fc2:	af02      	add	r7, sp, #8
 8001fc4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001fc8:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001fcc:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	2140      	movs	r1, #64	; 0x40
 8001fd2:	4855      	ldr	r0, [pc, #340]	; (8002128 <StartDefaultTask+0x16c>)
 8001fd4:	f001 fb20 	bl	8003618 <HAL_GPIO_WritePin>
  bool availableNetwork = false;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

#ifdef RMW_UXRCE_TRANSPORT_CUSTOM 
  availableNetwork = true; 
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
  rmw_uros_set_custom_transport( 
 8001fe4:	4b51      	ldr	r3, [pc, #324]	; (800212c <StartDefaultTask+0x170>)
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	4b51      	ldr	r3, [pc, #324]	; (8002130 <StartDefaultTask+0x174>)
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	4b51      	ldr	r3, [pc, #324]	; (8002134 <StartDefaultTask+0x178>)
 8001fee:	4a52      	ldr	r2, [pc, #328]	; (8002138 <StartDefaultTask+0x17c>)
 8001ff0:	4952      	ldr	r1, [pc, #328]	; (800213c <StartDefaultTask+0x180>)
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f01e fc36 	bl	8020864 <rmw_uros_set_custom_transport>
    printf("Impossible to retrieve an IP\n");
  }
#endif

  // Launch app thread when IP configured
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001ff8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f019 fb67 	bl	801b6d0 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = __freertos_allocate;
 8002002:	4b4f      	ldr	r3, [pc, #316]	; (8002140 <StartDefaultTask+0x184>)
 8002004:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  freeRTOS_allocator.deallocate = __freertos_deallocate;
 8002008:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <StartDefaultTask+0x188>)
 800200a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
  freeRTOS_allocator.reallocate = __freertos_reallocate;
 800200e:	4b4e      	ldr	r3, [pc, #312]	; (8002148 <StartDefaultTask+0x18c>)
 8002010:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
  freeRTOS_allocator.zero_allocate = __freertos_zero_allocate;
 8002014:	4b4d      	ldr	r3, [pc, #308]	; (800214c <StartDefaultTask+0x190>)
 8002016:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800201a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800201e:	4618      	mov	r0, r3
 8002020:	f019 fb6a 	bl	801b6f8 <rcutils_set_default_allocator>
 8002024:	4603      	mov	r3, r0
 8002026:	f083 0301 	eor.w	r3, r3, #1
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d004      	beq.n	800203a <StartDefaultTask+0x7e>
    printf("Error on default allocators (line %d)\n", __LINE__);
 8002030:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002034:	4846      	ldr	r0, [pc, #280]	; (8002150 <StartDefaultTask+0x194>)
 8002036:	f01f fefd 	bl	8021e34 <iprintf>
  }

  osThreadAttr_t attributes;
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800203a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203e:	2224      	movs	r2, #36	; 0x24
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f01e fe64 	bl	8020d10 <memset>
  attributes.name = "microROS_app";
 8002048:	4b42      	ldr	r3, [pc, #264]	; (8002154 <StartDefaultTask+0x198>)
 800204a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
  attributes.stack_size = 5 * 3000;
 800204e:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002052:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
  attributes.priority = (osPriority_t)osPriorityNormal1;
 8002056:	2319      	movs	r3, #25
 8002058:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  osThreadNew(appMain, NULL, &attributes);
 800205c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002060:	461a      	mov	r2, r3
 8002062:	2100      	movs	r1, #0
 8002064:	483c      	ldr	r0, [pc, #240]	; (8002158 <StartDefaultTask+0x19c>)
 8002066:	f004 fd03 	bl	8006a70 <osThreadNew>
  osDelay(500);
 800206a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800206e:	f004 fda5 	bl	8006bbc <osDelay>
  char ptrTaskList[500];
  vTaskList(ptrTaskList);
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	4618      	mov	r0, r3
 8002078:	f007 f86c 	bl	8009154 <vTaskList>
  printf("**********************************\n");
 800207c:	4837      	ldr	r0, [pc, #220]	; (800215c <StartDefaultTask+0x1a0>)
 800207e:	f01f ff5f 	bl	8021f40 <puts>
  printf("Task  State   Prio    Stack    Num\n");
 8002082:	4837      	ldr	r0, [pc, #220]	; (8002160 <StartDefaultTask+0x1a4>)
 8002084:	f01f ff5c 	bl	8021f40 <puts>
  printf("**********************************\n");
 8002088:	4834      	ldr	r0, [pc, #208]	; (800215c <StartDefaultTask+0x1a0>)
 800208a:	f01f ff59 	bl	8021f40 <puts>
  printf(ptrTaskList);
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	4618      	mov	r0, r3
 8002094:	f01f fece 	bl	8021e34 <iprintf>
  printf("**********************************\n");
 8002098:	4830      	ldr	r0, [pc, #192]	; (800215c <StartDefaultTask+0x1a0>)
 800209a:	f01f ff51 	bl	8021f40 <puts>

  TaskHandle_t xHandle;
  xHandle = xTaskGetHandle("microROS_app");
 800209e:	482d      	ldr	r0, [pc, #180]	; (8002154 <StartDefaultTask+0x198>)
 80020a0:	f006 f98c 	bl	80083bc <xTaskGetHandle>
 80020a4:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238

  while (1) {
    if (eTaskGetState(xHandle) != eSuspended && availableNetwork) {
 80020a8:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
 80020ac:	f005 ff90 	bl	8007fd0 <eTaskGetState>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d025      	beq.n	8002102 <StartDefaultTask+0x146>
 80020b6:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d021      	beq.n	8002102 <StartDefaultTask+0x146>
      HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80020be:	2200      	movs	r2, #0
 80020c0:	2101      	movs	r1, #1
 80020c2:	4828      	ldr	r0, [pc, #160]	; (8002164 <StartDefaultTask+0x1a8>)
 80020c4:	f001 faa8 	bl	8003618 <HAL_GPIO_WritePin>
      osDelay(100);
 80020c8:	2064      	movs	r0, #100	; 0x64
 80020ca:	f004 fd77 	bl	8006bbc <osDelay>
      HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80020ce:	2201      	movs	r2, #1
 80020d0:	2101      	movs	r1, #1
 80020d2:	4824      	ldr	r0, [pc, #144]	; (8002164 <StartDefaultTask+0x1a8>)
 80020d4:	f001 faa0 	bl	8003618 <HAL_GPIO_WritePin>
      osDelay(100);
 80020d8:	2064      	movs	r0, #100	; 0x64
 80020da:	f004 fd6f 	bl	8006bbc <osDelay>
      HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80020de:	2200      	movs	r2, #0
 80020e0:	2101      	movs	r1, #1
 80020e2:	4820      	ldr	r0, [pc, #128]	; (8002164 <StartDefaultTask+0x1a8>)
 80020e4:	f001 fa98 	bl	8003618 <HAL_GPIO_WritePin>
      osDelay(150);
 80020e8:	2096      	movs	r0, #150	; 0x96
 80020ea:	f004 fd67 	bl	8006bbc <osDelay>
      HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80020ee:	2201      	movs	r2, #1
 80020f0:	2101      	movs	r1, #1
 80020f2:	481c      	ldr	r0, [pc, #112]	; (8002164 <StartDefaultTask+0x1a8>)
 80020f4:	f001 fa90 	bl	8003618 <HAL_GPIO_WritePin>
      osDelay(500);
 80020f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020fc:	f004 fd5e 	bl	8006bbc <osDelay>
 8002100:	e011      	b.n	8002126 <StartDefaultTask+0x16a>
    } else {
      HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	2101      	movs	r1, #1
 8002106:	4817      	ldr	r0, [pc, #92]	; (8002164 <StartDefaultTask+0x1a8>)
 8002108:	f001 fa86 	bl	8003618 <HAL_GPIO_WritePin>
      osDelay(1000);
 800210c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002110:	f004 fd54 	bl	8006bbc <osDelay>
      HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8002114:	2201      	movs	r2, #1
 8002116:	2101      	movs	r1, #1
 8002118:	4812      	ldr	r0, [pc, #72]	; (8002164 <StartDefaultTask+0x1a8>)
 800211a:	f001 fa7d 	bl	8003618 <HAL_GPIO_WritePin>
      osDelay(1000);
 800211e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002122:	f004 fd4b 	bl	8006bbc <osDelay>
    if (eTaskGetState(xHandle) != eSuspended && availableNetwork) {
 8002126:	e7bf      	b.n	80020a8 <StartDefaultTask+0xec>
 8002128:	40021800 	.word	0x40021800
 800212c:	08002251 	.word	0x08002251
 8002130:	080021e9 	.word	0x080021e9
 8002134:	080021c9 	.word	0x080021c9
 8002138:	0800219d 	.word	0x0800219d
 800213c:	2000c658 	.word	0x2000c658
 8002140:	080015a1 	.word	0x080015a1
 8002144:	080015e5 	.word	0x080015e5
 8002148:	08001619 	.word	0x08001619
 800214c:	080016a1 	.word	0x080016a1
 8002150:	080257f8 	.word	0x080257f8
 8002154:	08025820 	.word	0x08025820
 8002158:	080012d9 	.word	0x080012d9
 800215c:	08025830 	.word	0x08025830
 8002160:	08025854 	.word	0x08025854
 8002164:	40020400 	.word	0x40020400

08002168 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a04      	ldr	r2, [pc, #16]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800217a:	f000 fb91 	bl	80028a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40010000 	.word	0x40010000

0800218c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <freertos_serial_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool freertos_serial_open(struct uxrCustomTransport * transport){
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 80021aa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80021ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021b0:	4904      	ldr	r1, [pc, #16]	; (80021c4 <freertos_serial_open+0x28>)
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f003 f822 	bl	80051fc <HAL_UART_Receive_DMA>
    return true;
 80021b8:	2301      	movs	r3, #1
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	2000cb68 	.word	0x2000cb68

080021c8 <freertos_serial_close>:

bool freertos_serial_close(struct uxrCustomTransport * transport){
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 80021d6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f003 f88f 	bl	80052fc <HAL_UART_DMAStop>
    return true;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <freertos_serial_write>:

size_t freertos_serial_write(struct uxrCustomTransport* transport, const uint8_t * buf, size_t len, uint8_t * err){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 80021fc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b20      	cmp	r3, #32
 8002208:	d11c      	bne.n	8002244 <freertos_serial_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	b29b      	uxth	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	f002 ff86 	bl	8005124 <HAL_UART_Transmit_DMA>
 8002218:	4603      	mov	r3, r0
 800221a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800221c:	e002      	b.n	8002224 <freertos_serial_write+0x3c>
        osDelay(1);
 800221e:	2001      	movs	r0, #1
 8002220:	f004 fccc 	bl	8006bbc <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <freertos_serial_write+0x4e>
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b20      	cmp	r3, #32
 8002234:	d1f3      	bne.n	800221e <freertos_serial_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002236:	7cfb      	ldrb	r3, [r7, #19]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <freertos_serial_write+0x58>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	e002      	b.n	8002246 <freertos_serial_write+0x5e>
 8002240:	2300      	movs	r3, #0
 8002242:	e000      	b.n	8002246 <freertos_serial_write+0x5e>
    }else{
        return 0;
 8002244:	2300      	movs	r3, #0
    }
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <freertos_serial_read>:

size_t freertos_serial_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002264:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002266:	b672      	cpsid	i
}
 8002268:	bf00      	nop

    __disable_irq();
    dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002276:	4a15      	ldr	r2, [pc, #84]	; (80022cc <freertos_serial_read+0x7c>)
 8002278:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800227a:	b662      	cpsie	i
}
 800227c:	bf00      	nop
    __enable_irq();

    size_t wrote = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002282:	e011      	b.n	80022a8 <freertos_serial_read+0x58>
        buf[wrote] = dma_buffer[dma_head];
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <freertos_serial_read+0x80>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	440b      	add	r3, r1
 800228e:	4911      	ldr	r1, [pc, #68]	; (80022d4 <freertos_serial_read+0x84>)
 8002290:	5c8a      	ldrb	r2, [r1, r2]
 8002292:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <freertos_serial_read+0x80>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3301      	adds	r3, #1
 800229a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800229e:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <freertos_serial_read+0x80>)
 80022a0:	6013      	str	r3, [r2, #0]
        wrote++;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	3301      	adds	r3, #1
 80022a6:	617b      	str	r3, [r7, #20]
    while ((dma_head != dma_tail) && (wrote < len)){
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <freertos_serial_read+0x80>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b07      	ldr	r3, [pc, #28]	; (80022cc <freertos_serial_read+0x7c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d003      	beq.n	80022bc <freertos_serial_read+0x6c>
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d3e3      	bcc.n	8002284 <freertos_serial_read+0x34>
    }
    
    return wrote;
 80022bc:	697b      	ldr	r3, [r7, #20]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	2000d36c 	.word	0x2000d36c
 80022d0:	2000d368 	.word	0x2000d368
 80022d4:	2000cb68 	.word	0x2000cb68

080022d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_MspInit+0x54>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a11      	ldr	r2, [pc, #68]	; (800232c <HAL_MspInit+0x54>)
 80022e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_MspInit+0x54>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_MspInit+0x54>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a0a      	ldr	r2, [pc, #40]	; (800232c <HAL_MspInit+0x54>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_MspInit+0x54>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	210f      	movs	r1, #15
 800231a:	f06f 0001 	mvn.w	r0, #1
 800231e:	f000 fbbb 	bl	8002a98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800

08002330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a4c      	ldr	r2, [pc, #304]	; (8002480 <HAL_UART_MspInit+0x150>)
 800234e:	4293      	cmp	r3, r2
 8002350:	f040 8092 	bne.w	8002478 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002354:	2300      	movs	r3, #0
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <HAL_UART_MspInit+0x154>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	4a49      	ldr	r2, [pc, #292]	; (8002484 <HAL_UART_MspInit+0x154>)
 800235e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002362:	6413      	str	r3, [r2, #64]	; 0x40
 8002364:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_UART_MspInit+0x154>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	4b43      	ldr	r3, [pc, #268]	; (8002484 <HAL_UART_MspInit+0x154>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	4a42      	ldr	r2, [pc, #264]	; (8002484 <HAL_UART_MspInit+0x154>)
 800237a:	f043 0308 	orr.w	r3, r3, #8
 800237e:	6313      	str	r3, [r2, #48]	; 0x30
 8002380:	4b40      	ldr	r3, [pc, #256]	; (8002484 <HAL_UART_MspInit+0x154>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800238c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239a:	2303      	movs	r3, #3
 800239c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800239e:	2307      	movs	r3, #7
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	4837      	ldr	r0, [pc, #220]	; (8002488 <HAL_UART_MspInit+0x158>)
 80023aa:	f000 ffa1 	bl	80032f0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <HAL_UART_MspInit+0x15c>)
 80023b0:	4a37      	ldr	r2, [pc, #220]	; (8002490 <HAL_UART_MspInit+0x160>)
 80023b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80023b4:	4b35      	ldr	r3, [pc, #212]	; (800248c <HAL_UART_MspInit+0x15c>)
 80023b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023ba:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023bc:	4b33      	ldr	r3, [pc, #204]	; (800248c <HAL_UART_MspInit+0x15c>)
 80023be:	2240      	movs	r2, #64	; 0x40
 80023c0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c2:	4b32      	ldr	r3, [pc, #200]	; (800248c <HAL_UART_MspInit+0x15c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023c8:	4b30      	ldr	r3, [pc, #192]	; (800248c <HAL_UART_MspInit+0x15c>)
 80023ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ce:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023d0:	4b2e      	ldr	r3, [pc, #184]	; (800248c <HAL_UART_MspInit+0x15c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023d6:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_UART_MspInit+0x15c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80023dc:	4b2b      	ldr	r3, [pc, #172]	; (800248c <HAL_UART_MspInit+0x15c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023e2:	4b2a      	ldr	r3, [pc, #168]	; (800248c <HAL_UART_MspInit+0x15c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023e8:	4b28      	ldr	r3, [pc, #160]	; (800248c <HAL_UART_MspInit+0x15c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80023ee:	4827      	ldr	r0, [pc, #156]	; (800248c <HAL_UART_MspInit+0x15c>)
 80023f0:	f000 fb7c 	bl	8002aec <HAL_DMA_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80023fa:	f7ff fec7 	bl	800218c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a22      	ldr	r2, [pc, #136]	; (800248c <HAL_UART_MspInit+0x15c>)
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
 8002404:	4a21      	ldr	r2, [pc, #132]	; (800248c <HAL_UART_MspInit+0x15c>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800240a:	4b22      	ldr	r3, [pc, #136]	; (8002494 <HAL_UART_MspInit+0x164>)
 800240c:	4a22      	ldr	r2, [pc, #136]	; (8002498 <HAL_UART_MspInit+0x168>)
 800240e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002410:	4b20      	ldr	r3, [pc, #128]	; (8002494 <HAL_UART_MspInit+0x164>)
 8002412:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002416:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002418:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <HAL_UART_MspInit+0x164>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_UART_MspInit+0x164>)
 8002420:	2200      	movs	r2, #0
 8002422:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <HAL_UART_MspInit+0x164>)
 8002426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800242a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_UART_MspInit+0x164>)
 800242e:	2200      	movs	r2, #0
 8002430:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002432:	4b18      	ldr	r3, [pc, #96]	; (8002494 <HAL_UART_MspInit+0x164>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <HAL_UART_MspInit+0x164>)
 800243a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800243e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_UART_MspInit+0x164>)
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <HAL_UART_MspInit+0x164>)
 8002448:	2200      	movs	r2, #0
 800244a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800244c:	4811      	ldr	r0, [pc, #68]	; (8002494 <HAL_UART_MspInit+0x164>)
 800244e:	f000 fb4d 	bl	8002aec <HAL_DMA_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002458:	f7ff fe98 	bl	800218c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a0d      	ldr	r2, [pc, #52]	; (8002494 <HAL_UART_MspInit+0x164>)
 8002460:	635a      	str	r2, [r3, #52]	; 0x34
 8002462:	4a0c      	ldr	r2, [pc, #48]	; (8002494 <HAL_UART_MspInit+0x164>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002468:	2200      	movs	r2, #0
 800246a:	2105      	movs	r1, #5
 800246c:	2027      	movs	r0, #39	; 0x27
 800246e:	f000 fb13 	bl	8002a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002472:	2027      	movs	r0, #39	; 0x27
 8002474:	f000 fb2c 	bl	8002ad0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002478:	bf00      	nop
 800247a:	3728      	adds	r7, #40	; 0x28
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40004800 	.word	0x40004800
 8002484:	40023800 	.word	0x40023800
 8002488:	40020c00 	.word	0x40020c00
 800248c:	2000c698 	.word	0x2000c698
 8002490:	40026058 	.word	0x40026058
 8002494:	2000c6f8 	.word	0x2000c6f8
 8002498:	40026028 	.word	0x40026028

0800249c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024bc:	d13f      	bne.n	800253e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	4b21      	ldr	r3, [pc, #132]	; (8002548 <HAL_PCD_MspInit+0xac>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a20      	ldr	r2, [pc, #128]	; (8002548 <HAL_PCD_MspInit+0xac>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <HAL_PCD_MspInit+0xac>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80024da:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80024de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e8:	2303      	movs	r3, #3
 80024ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80024ec:	230a      	movs	r3, #10
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4619      	mov	r1, r3
 80024f6:	4815      	ldr	r0, [pc, #84]	; (800254c <HAL_PCD_MspInit+0xb0>)
 80024f8:	f000 fefa 	bl	80032f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80024fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4619      	mov	r1, r3
 8002510:	480e      	ldr	r0, [pc, #56]	; (800254c <HAL_PCD_MspInit+0xb0>)
 8002512:	f000 feed 	bl	80032f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <HAL_PCD_MspInit+0xac>)
 8002518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251a:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <HAL_PCD_MspInit+0xac>)
 800251c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002520:	6353      	str	r3, [r2, #52]	; 0x34
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_PCD_MspInit+0xac>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	4a07      	ldr	r2, [pc, #28]	; (8002548 <HAL_PCD_MspInit+0xac>)
 800252c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002530:	6453      	str	r3, [r2, #68]	; 0x44
 8002532:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_PCD_MspInit+0xac>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800253e:	bf00      	nop
 8002540:	3728      	adds	r7, #40	; 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	40020000 	.word	0x40020000

08002550 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	; 0x30
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002560:	2200      	movs	r2, #0
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	2019      	movs	r0, #25
 8002566:	f000 fa97 	bl	8002a98 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800256a:	2019      	movs	r0, #25
 800256c:	f000 fab0 	bl	8002ad0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <HAL_InitTick+0xa4>)
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <HAL_InitTick+0xa4>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6453      	str	r3, [r2, #68]	; 0x44
 8002580:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_InitTick+0xa4>)
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800258c:	f107 0210 	add.w	r2, r7, #16
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f001 faba 	bl	8003b10 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800259c:	f001 faa4 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 80025a0:	4603      	mov	r3, r0
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <HAL_InitTick+0xa8>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	0c9b      	lsrs	r3, r3, #18
 80025b0:	3b01      	subs	r3, #1
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <HAL_InitTick+0xac>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <HAL_InitTick+0xb0>)
 80025b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_InitTick+0xac>)
 80025bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025c0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80025c2:	4a0e      	ldr	r2, [pc, #56]	; (80025fc <HAL_InitTick+0xac>)
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <HAL_InitTick+0xac>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_InitTick+0xac>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80025d4:	4809      	ldr	r0, [pc, #36]	; (80025fc <HAL_InitTick+0xac>)
 80025d6:	f002 fa81 	bl	8004adc <HAL_TIM_Base_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80025e0:	4806      	ldr	r0, [pc, #24]	; (80025fc <HAL_InitTick+0xac>)
 80025e2:	f002 fab0 	bl	8004b46 <HAL_TIM_Base_Start_IT>
 80025e6:	4603      	mov	r3, r0
 80025e8:	e000      	b.n	80025ec <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3730      	adds	r7, #48	; 0x30
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40023800 	.word	0x40023800
 80025f8:	431bde83 	.word	0x431bde83
 80025fc:	2000d370 	.word	0x2000d370
 8002600:	40010000 	.word	0x40010000

08002604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002616:	e7fe      	b.n	8002616 <HardFault_Handler+0x4>

08002618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800261c:	e7fe      	b.n	800261c <MemManage_Handler+0x4>

0800261e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002622:	e7fe      	b.n	8002622 <BusFault_Handler+0x4>

08002624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <UsageFault_Handler+0x4>

0800262a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800263c:	4802      	ldr	r0, [pc, #8]	; (8002648 <DMA1_Stream1_IRQHandler+0x10>)
 800263e:	f000 fbed 	bl	8002e1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	2000c6f8 	.word	0x2000c6f8

0800264c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <DMA1_Stream3_IRQHandler+0x10>)
 8002652:	f000 fbe3 	bl	8002e1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000c698 	.word	0x2000c698

08002660 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002666:	f002 fa92 	bl	8004b8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	2000d370 	.word	0x2000d370

08002674 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <USART3_IRQHandler+0x10>)
 800267a:	f002 fe9b 	bl	80053b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000c658 	.word	0x2000c658

08002688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
	return 1;
 800268c:	2301      	movs	r3, #1
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <_kill>:

int _kill(int pid, int sig)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026a2:	f01e f95b 	bl	802095c <__errno>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2216      	movs	r2, #22
 80026aa:	601a      	str	r2, [r3, #0]
	return -1;
 80026ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <_exit>:

void _exit (int status)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff ffe7 	bl	8002698 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026ca:	e7fe      	b.n	80026ca <_exit+0x12>

080026cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	e00a      	b.n	80026f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026de:	f3af 8000 	nop.w
 80026e2:	4601      	mov	r1, r0
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	60ba      	str	r2, [r7, #8]
 80026ea:	b2ca      	uxtb	r2, r1
 80026ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3301      	adds	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	dbf0      	blt.n	80026de <_read+0x12>
	}

return len;
 80026fc:	687b      	ldr	r3, [r7, #4]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
	return -1;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800272e:	605a      	str	r2, [r3, #4]
	return 0;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <_isatty>:

int _isatty(int file)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
	return 1;
 8002746:	2301      	movs	r3, #1
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
	return 0;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002778:	4a14      	ldr	r2, [pc, #80]	; (80027cc <_sbrk+0x5c>)
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <_sbrk+0x60>)
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <_sbrk+0x64>)
 800278e:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <_sbrk+0x68>)
 8002790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <_sbrk+0x64>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	429a      	cmp	r2, r3
 800279e:	d207      	bcs.n	80027b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a0:	f01e f8dc 	bl	802095c <__errno>
 80027a4:	4603      	mov	r3, r0
 80027a6:	220c      	movs	r2, #12
 80027a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ae:	e009      	b.n	80027c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <_sbrk+0x64>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <_sbrk+0x64>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <_sbrk+0x64>)
 80027c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027c2:	68fb      	ldr	r3, [r7, #12]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20020000 	.word	0x20020000
 80027d0:	00000400 	.word	0x00000400
 80027d4:	2000d3b4 	.word	0x2000d3b4
 80027d8:	20013648 	.word	0x20013648

080027dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027e0:	4b08      	ldr	r3, [pc, #32]	; (8002804 <SystemInit+0x28>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	4a07      	ldr	r2, [pc, #28]	; (8002804 <SystemInit+0x28>)
 80027e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <SystemInit+0x28>)
 80027f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027f6:	609a      	str	r2, [r3, #8]
#endif
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002840 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800280c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800280e:	e003      	b.n	8002818 <LoopCopyDataInit>

08002810 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002812:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002814:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002816:	3104      	adds	r1, #4

08002818 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002818:	480b      	ldr	r0, [pc, #44]	; (8002848 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800281c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800281e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002820:	d3f6      	bcc.n	8002810 <CopyDataInit>
  ldr  r2, =_sbss
 8002822:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002824:	e002      	b.n	800282c <LoopFillZerobss>

08002826 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002826:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002828:	f842 3b04 	str.w	r3, [r2], #4

0800282c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800282e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002830:	d3f9      	bcc.n	8002826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002832:	f7ff ffd3 	bl	80027dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002836:	f01e f9fb 	bl	8020c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800283a:	f7ff f9e5 	bl	8001c08 <main>
  bx  lr    
 800283e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002840:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002844:	08027ab0 	.word	0x08027ab0
  ldr  r0, =_sdata
 8002848:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800284c:	20000270 	.word	0x20000270
  ldr  r2, =_sbss
 8002850:	20000270 	.word	0x20000270
  ldr  r3, = _ebss
 8002854:	20013648 	.word	0x20013648

08002858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002858:	e7fe      	b.n	8002858 <ADC_IRQHandler>
	...

0800285c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <HAL_Init+0x40>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0d      	ldr	r2, [pc, #52]	; (800289c <HAL_Init+0x40>)
 8002866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800286a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_Init+0x40>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0a      	ldr	r2, [pc, #40]	; (800289c <HAL_Init+0x40>)
 8002872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002878:	4b08      	ldr	r3, [pc, #32]	; (800289c <HAL_Init+0x40>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a07      	ldr	r2, [pc, #28]	; (800289c <HAL_Init+0x40>)
 800287e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002884:	2003      	movs	r0, #3
 8002886:	f000 f8fc 	bl	8002a82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800288a:	2000      	movs	r0, #0
 800288c:	f7ff fe60 	bl	8002550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002890:	f7ff fd22 	bl	80022d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023c00 	.word	0x40023c00

080028a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_IncTick+0x20>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_IncTick+0x24>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <HAL_IncTick+0x24>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	2000000c 	.word	0x2000000c
 80028c4:	2000d3b8 	.word	0x2000d3b8

080028c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return uwTick;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_GetTick+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	2000d3b8 	.word	0x2000d3b8

080028e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e8:	f7ff ffee 	bl	80028c8 <HAL_GetTick>
 80028ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028f8:	d005      	beq.n	8002906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_Delay+0x44>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002906:	bf00      	nop
 8002908:	f7ff ffde 	bl	80028c8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	429a      	cmp	r2, r3
 8002916:	d8f7      	bhi.n	8002908 <HAL_Delay+0x28>
  {
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000000c 	.word	0x2000000c

08002928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <__NVIC_SetPriorityGrouping+0x44>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002944:	4013      	ands	r3, r2
 8002946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295a:	4a04      	ldr	r2, [pc, #16]	; (800296c <__NVIC_SetPriorityGrouping+0x44>)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	60d3      	str	r3, [r2, #12]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002974:	4b04      	ldr	r3, [pc, #16]	; (8002988 <__NVIC_GetPriorityGrouping+0x18>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	f003 0307 	and.w	r3, r3, #7
}
 800297e:	4618      	mov	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	2b00      	cmp	r3, #0
 800299c:	db0b      	blt.n	80029b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	f003 021f 	and.w	r2, r3, #31
 80029a4:	4907      	ldr	r1, [pc, #28]	; (80029c4 <__NVIC_EnableIRQ+0x38>)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	2001      	movs	r0, #1
 80029ae:	fa00 f202 	lsl.w	r2, r0, r2
 80029b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000e100 	.word	0xe000e100

080029c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	db0a      	blt.n	80029f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	490c      	ldr	r1, [pc, #48]	; (8002a14 <__NVIC_SetPriority+0x4c>)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	0112      	lsls	r2, r2, #4
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	440b      	add	r3, r1
 80029ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f0:	e00a      	b.n	8002a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4908      	ldr	r1, [pc, #32]	; (8002a18 <__NVIC_SetPriority+0x50>)
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	3b04      	subs	r3, #4
 8002a00:	0112      	lsls	r2, r2, #4
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	440b      	add	r3, r1
 8002a06:	761a      	strb	r2, [r3, #24]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000e100 	.word	0xe000e100
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f1c3 0307 	rsb	r3, r3, #7
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	bf28      	it	cs
 8002a3a:	2304      	movcs	r3, #4
 8002a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3304      	adds	r3, #4
 8002a42:	2b06      	cmp	r3, #6
 8002a44:	d902      	bls.n	8002a4c <NVIC_EncodePriority+0x30>
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3b03      	subs	r3, #3
 8002a4a:	e000      	b.n	8002a4e <NVIC_EncodePriority+0x32>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	401a      	ands	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	43d9      	mvns	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	4313      	orrs	r3, r2
         );
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3724      	adds	r7, #36	; 0x24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ff4c 	bl	8002928 <__NVIC_SetPriorityGrouping>
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aaa:	f7ff ff61 	bl	8002970 <__NVIC_GetPriorityGrouping>
 8002aae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	6978      	ldr	r0, [r7, #20]
 8002ab6:	f7ff ffb1 	bl	8002a1c <NVIC_EncodePriority>
 8002aba:	4602      	mov	r2, r0
 8002abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff ff80 	bl	80029c8 <__NVIC_SetPriority>
}
 8002ac8:	bf00      	nop
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ff54 	bl	800298c <__NVIC_EnableIRQ>
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002af8:	f7ff fee6 	bl	80028c8 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e099      	b.n	8002c3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b28:	e00f      	b.n	8002b4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b2a:	f7ff fecd 	bl	80028c8 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b05      	cmp	r3, #5
 8002b36:	d908      	bls.n	8002b4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2203      	movs	r2, #3
 8002b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e078      	b.n	8002c3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1e8      	bne.n	8002b2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4b38      	ldr	r3, [pc, #224]	; (8002c44 <HAL_DMA_Init+0x158>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d107      	bne.n	8002bb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	4313      	orrs	r3, r2
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f023 0307 	bic.w	r3, r3, #7
 8002bca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d117      	bne.n	8002c0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00e      	beq.n	8002c0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fb01 	bl	80031f8 <DMA_CheckFifoParam>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2240      	movs	r2, #64	; 0x40
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e016      	b.n	8002c3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fab8 	bl	800318c <DMA_CalcBaseAndBitshift>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c24:	223f      	movs	r2, #63	; 0x3f
 8002c26:	409a      	lsls	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	f010803f 	.word	0xf010803f

08002c48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_DMA_Start_IT+0x26>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e040      	b.n	8002cf0 <HAL_DMA_Start_IT+0xa8>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d12f      	bne.n	8002ce2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2202      	movs	r2, #2
 8002c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fa4a 	bl	8003130 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	223f      	movs	r2, #63	; 0x3f
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0216 	orr.w	r2, r2, #22
 8002cb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0208 	orr.w	r2, r2, #8
 8002cce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e005      	b.n	8002cee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cea:	2302      	movs	r3, #2
 8002cec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d06:	f7ff fddf 	bl	80028c8 <HAL_GetTick>
 8002d0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d008      	beq.n	8002d2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2280      	movs	r2, #128	; 0x80
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e052      	b.n	8002dd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0216 	bic.w	r2, r2, #22
 8002d38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d103      	bne.n	8002d5a <HAL_DMA_Abort+0x62>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d007      	beq.n	8002d6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0208 	bic.w	r2, r2, #8
 8002d68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0201 	bic.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d7a:	e013      	b.n	8002da4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d7c:	f7ff fda4 	bl	80028c8 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b05      	cmp	r3, #5
 8002d88:	d90c      	bls.n	8002da4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e015      	b.n	8002dd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1e4      	bne.n	8002d7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db6:	223f      	movs	r2, #63	; 0x3f
 8002db8:	409a      	lsls	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d004      	beq.n	8002df6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e00c      	b.n	8002e10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2205      	movs	r2, #5
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e28:	4b8e      	ldr	r3, [pc, #568]	; (8003064 <HAL_DMA_IRQHandler+0x248>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a8e      	ldr	r2, [pc, #568]	; (8003068 <HAL_DMA_IRQHandler+0x24c>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	0a9b      	lsrs	r3, r3, #10
 8002e34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	2208      	movs	r2, #8
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d01a      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d013      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0204 	bic.w	r2, r2, #4
 8002e6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	2208      	movs	r2, #8
 8002e76:	409a      	lsls	r2, r3
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d012      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00b      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eaa:	2201      	movs	r2, #1
 8002eac:	409a      	lsls	r2, r3
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	f043 0202 	orr.w	r2, r3, #2
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d012      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00b      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eec:	f043 0204 	orr.w	r2, r3, #4
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	2210      	movs	r2, #16
 8002efa:	409a      	lsls	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d043      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d03c      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	2210      	movs	r2, #16
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d018      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d108      	bne.n	8002f4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d024      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	4798      	blx	r3
 8002f4a:	e01f      	b.n	8002f8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01b      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
 8002f5c:	e016      	b.n	8002f8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d107      	bne.n	8002f7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0208 	bic.w	r2, r2, #8
 8002f7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	2220      	movs	r2, #32
 8002f92:	409a      	lsls	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 808f 	beq.w	80030bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 8087 	beq.w	80030bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b05      	cmp	r3, #5
 8002fc4:	d136      	bne.n	8003034 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0216 	bic.w	r2, r2, #22
 8002fd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d103      	bne.n	8002ff6 <HAL_DMA_IRQHandler+0x1da>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0208 	bic.w	r2, r2, #8
 8003004:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300a:	223f      	movs	r2, #63	; 0x3f
 800300c:	409a      	lsls	r2, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003026:	2b00      	cmp	r3, #0
 8003028:	d07e      	beq.n	8003128 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	4798      	blx	r3
        }
        return;
 8003032:	e079      	b.n	8003128 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01d      	beq.n	800307e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10d      	bne.n	800306c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003054:	2b00      	cmp	r3, #0
 8003056:	d031      	beq.n	80030bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	4798      	blx	r3
 8003060:	e02c      	b.n	80030bc <HAL_DMA_IRQHandler+0x2a0>
 8003062:	bf00      	nop
 8003064:	20000004 	.word	0x20000004
 8003068:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003070:	2b00      	cmp	r3, #0
 8003072:	d023      	beq.n	80030bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
 800307c:	e01e      	b.n	80030bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10f      	bne.n	80030ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0210 	bic.w	r2, r2, #16
 800309a:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d032      	beq.n	800312a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d022      	beq.n	8003116 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2205      	movs	r2, #5
 80030d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	3301      	adds	r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d307      	bcc.n	8003104 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f2      	bne.n	80030e8 <HAL_DMA_IRQHandler+0x2cc>
 8003102:	e000      	b.n	8003106 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003104:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d005      	beq.n	800312a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	4798      	blx	r3
 8003126:	e000      	b.n	800312a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003128:	bf00      	nop
    }
  }
}
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800314c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d108      	bne.n	8003170 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800316e:	e007      	b.n	8003180 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	60da      	str	r2, [r3, #12]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	3b10      	subs	r3, #16
 800319c:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <DMA_CalcBaseAndBitshift+0x64>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031a6:	4a13      	ldr	r2, [pc, #76]	; (80031f4 <DMA_CalcBaseAndBitshift+0x68>)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d909      	bls.n	80031ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031c2:	f023 0303 	bic.w	r3, r3, #3
 80031c6:	1d1a      	adds	r2, r3, #4
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	659a      	str	r2, [r3, #88]	; 0x58
 80031cc:	e007      	b.n	80031de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	aaaaaaab 	.word	0xaaaaaaab
 80031f4:	08027000 	.word	0x08027000

080031f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d11f      	bne.n	8003252 <DMA_CheckFifoParam+0x5a>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b03      	cmp	r3, #3
 8003216:	d856      	bhi.n	80032c6 <DMA_CheckFifoParam+0xce>
 8003218:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <DMA_CheckFifoParam+0x28>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	08003231 	.word	0x08003231
 8003224:	08003243 	.word	0x08003243
 8003228:	08003231 	.word	0x08003231
 800322c:	080032c7 	.word	0x080032c7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d046      	beq.n	80032ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003240:	e043      	b.n	80032ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800324a:	d140      	bne.n	80032ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003250:	e03d      	b.n	80032ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325a:	d121      	bne.n	80032a0 <DMA_CheckFifoParam+0xa8>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b03      	cmp	r3, #3
 8003260:	d837      	bhi.n	80032d2 <DMA_CheckFifoParam+0xda>
 8003262:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <DMA_CheckFifoParam+0x70>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	08003279 	.word	0x08003279
 800326c:	0800327f 	.word	0x0800327f
 8003270:	08003279 	.word	0x08003279
 8003274:	08003291 	.word	0x08003291
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
      break;
 800327c:	e030      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d025      	beq.n	80032d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800328e:	e022      	b.n	80032d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003298:	d11f      	bne.n	80032da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800329e:	e01c      	b.n	80032da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d903      	bls.n	80032ae <DMA_CheckFifoParam+0xb6>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d003      	beq.n	80032b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032ac:	e018      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
      break;
 80032b2:	e015      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00e      	beq.n	80032de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
      break;
 80032c4:	e00b      	b.n	80032de <DMA_CheckFifoParam+0xe6>
      break;
 80032c6:	bf00      	nop
 80032c8:	e00a      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
      break;
 80032ca:	bf00      	nop
 80032cc:	e008      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
      break;
 80032ce:	bf00      	nop
 80032d0:	e006      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
      break;
 80032d2:	bf00      	nop
 80032d4:	e004      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
      break;
 80032d6:	bf00      	nop
 80032d8:	e002      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80032da:	bf00      	nop
 80032dc:	e000      	b.n	80032e0 <DMA_CheckFifoParam+0xe8>
      break;
 80032de:	bf00      	nop
    }
  } 
  
  return status; 
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop

080032f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b089      	sub	sp, #36	; 0x24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	e165      	b.n	80035d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800330c:	2201      	movs	r2, #1
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4013      	ands	r3, r2
 800331e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	429a      	cmp	r2, r3
 8003326:	f040 8154 	bne.w	80035d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d00b      	beq.n	800334a <HAL_GPIO_Init+0x5a>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d007      	beq.n	800334a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800333e:	2b11      	cmp	r3, #17
 8003340:	d003      	beq.n	800334a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b12      	cmp	r3, #18
 8003348:	d130      	bne.n	80033ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	2203      	movs	r2, #3
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003380:	2201      	movs	r2, #1
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 0201 	and.w	r2, r3, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	2203      	movs	r2, #3
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0xfc>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b12      	cmp	r3, #18
 80033ea:	d123      	bne.n	8003434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	08da      	lsrs	r2, r3, #3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3208      	adds	r2, #8
 80033f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	220f      	movs	r2, #15
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	08da      	lsrs	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3208      	adds	r2, #8
 800342e:	69b9      	ldr	r1, [r7, #24]
 8003430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	2203      	movs	r2, #3
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0203 	and.w	r2, r3, #3
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80ae 	beq.w	80035d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	4b5d      	ldr	r3, [pc, #372]	; (80035f0 <HAL_GPIO_Init+0x300>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	4a5c      	ldr	r2, [pc, #368]	; (80035f0 <HAL_GPIO_Init+0x300>)
 8003480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003484:	6453      	str	r3, [r2, #68]	; 0x44
 8003486:	4b5a      	ldr	r3, [pc, #360]	; (80035f0 <HAL_GPIO_Init+0x300>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003492:	4a58      	ldr	r2, [pc, #352]	; (80035f4 <HAL_GPIO_Init+0x304>)
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	3302      	adds	r3, #2
 800349a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	220f      	movs	r2, #15
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4013      	ands	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a4f      	ldr	r2, [pc, #316]	; (80035f8 <HAL_GPIO_Init+0x308>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d025      	beq.n	800350a <HAL_GPIO_Init+0x21a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4e      	ldr	r2, [pc, #312]	; (80035fc <HAL_GPIO_Init+0x30c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d01f      	beq.n	8003506 <HAL_GPIO_Init+0x216>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4d      	ldr	r2, [pc, #308]	; (8003600 <HAL_GPIO_Init+0x310>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d019      	beq.n	8003502 <HAL_GPIO_Init+0x212>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4c      	ldr	r2, [pc, #304]	; (8003604 <HAL_GPIO_Init+0x314>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <HAL_GPIO_Init+0x20e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4b      	ldr	r2, [pc, #300]	; (8003608 <HAL_GPIO_Init+0x318>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00d      	beq.n	80034fa <HAL_GPIO_Init+0x20a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4a      	ldr	r2, [pc, #296]	; (800360c <HAL_GPIO_Init+0x31c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d007      	beq.n	80034f6 <HAL_GPIO_Init+0x206>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a49      	ldr	r2, [pc, #292]	; (8003610 <HAL_GPIO_Init+0x320>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d101      	bne.n	80034f2 <HAL_GPIO_Init+0x202>
 80034ee:	2306      	movs	r3, #6
 80034f0:	e00c      	b.n	800350c <HAL_GPIO_Init+0x21c>
 80034f2:	2307      	movs	r3, #7
 80034f4:	e00a      	b.n	800350c <HAL_GPIO_Init+0x21c>
 80034f6:	2305      	movs	r3, #5
 80034f8:	e008      	b.n	800350c <HAL_GPIO_Init+0x21c>
 80034fa:	2304      	movs	r3, #4
 80034fc:	e006      	b.n	800350c <HAL_GPIO_Init+0x21c>
 80034fe:	2303      	movs	r3, #3
 8003500:	e004      	b.n	800350c <HAL_GPIO_Init+0x21c>
 8003502:	2302      	movs	r3, #2
 8003504:	e002      	b.n	800350c <HAL_GPIO_Init+0x21c>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <HAL_GPIO_Init+0x21c>
 800350a:	2300      	movs	r3, #0
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	f002 0203 	and.w	r2, r2, #3
 8003512:	0092      	lsls	r2, r2, #2
 8003514:	4093      	lsls	r3, r2
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800351c:	4935      	ldr	r1, [pc, #212]	; (80035f4 <HAL_GPIO_Init+0x304>)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	089b      	lsrs	r3, r3, #2
 8003522:	3302      	adds	r3, #2
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800352a:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <HAL_GPIO_Init+0x324>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800354e:	4a31      	ldr	r2, [pc, #196]	; (8003614 <HAL_GPIO_Init+0x324>)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003554:	4b2f      	ldr	r3, [pc, #188]	; (8003614 <HAL_GPIO_Init+0x324>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003578:	4a26      	ldr	r2, [pc, #152]	; (8003614 <HAL_GPIO_Init+0x324>)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800357e:	4b25      	ldr	r3, [pc, #148]	; (8003614 <HAL_GPIO_Init+0x324>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	43db      	mvns	r3, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4013      	ands	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035a2:	4a1c      	ldr	r2, [pc, #112]	; (8003614 <HAL_GPIO_Init+0x324>)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035a8:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <HAL_GPIO_Init+0x324>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035cc:	4a11      	ldr	r2, [pc, #68]	; (8003614 <HAL_GPIO_Init+0x324>)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3301      	adds	r3, #1
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b0f      	cmp	r3, #15
 80035dc:	f67f ae96 	bls.w	800330c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	3724      	adds	r7, #36	; 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40013800 	.word	0x40013800
 80035f8:	40020000 	.word	0x40020000
 80035fc:	40020400 	.word	0x40020400
 8003600:	40020800 	.word	0x40020800
 8003604:	40020c00 	.word	0x40020c00
 8003608:	40021000 	.word	0x40021000
 800360c:	40021400 	.word	0x40021400
 8003610:	40021800 	.word	0x40021800
 8003614:	40013c00 	.word	0x40013c00

08003618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	807b      	strh	r3, [r7, #2]
 8003624:	4613      	mov	r3, r2
 8003626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003628:	787b      	ldrb	r3, [r7, #1]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800362e:	887a      	ldrh	r2, [r7, #2]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003634:	e003      	b.n	800363e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003636:	887b      	ldrh	r3, [r7, #2]
 8003638:	041a      	lsls	r2, r3, #16
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	619a      	str	r2, [r3, #24]
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800364a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364c:	b08f      	sub	sp, #60	; 0x3c
 800364e:	af0a      	add	r7, sp, #40	; 0x28
 8003650:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e116      	b.n	800388a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fe ff10 	bl	800249c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2203      	movs	r2, #3
 8003680:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f002 ff2f 	bl	80064fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	603b      	str	r3, [r7, #0]
 80036a6:	687e      	ldr	r6, [r7, #4]
 80036a8:	466d      	mov	r5, sp
 80036aa:	f106 0410 	add.w	r4, r6, #16
 80036ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80036be:	1d33      	adds	r3, r6, #4
 80036c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036c2:	6838      	ldr	r0, [r7, #0]
 80036c4:	f002 feba 	bl	800643c <USB_CoreInit>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2202      	movs	r2, #2
 80036d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e0d7      	b.n	800388a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2100      	movs	r1, #0
 80036e0:	4618      	mov	r0, r3
 80036e2:	f002 ff1d 	bl	8006520 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]
 80036ea:	e04a      	b.n	8003782 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036ec:	7bfa      	ldrb	r2, [r7, #15]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	333d      	adds	r3, #61	; 0x3d
 80036fc:	2201      	movs	r2, #1
 80036fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003700:	7bfa      	ldrb	r2, [r7, #15]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	333c      	adds	r3, #60	; 0x3c
 8003710:	7bfa      	ldrb	r2, [r7, #15]
 8003712:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003714:	7bfa      	ldrb	r2, [r7, #15]
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	b298      	uxth	r0, r3
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	3342      	adds	r3, #66	; 0x42
 8003728:	4602      	mov	r2, r0
 800372a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800372c:	7bfa      	ldrb	r2, [r7, #15]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	333f      	adds	r3, #63	; 0x3f
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003740:	7bfa      	ldrb	r2, [r7, #15]
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	3344      	adds	r3, #68	; 0x44
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003754:	7bfa      	ldrb	r2, [r7, #15]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	3348      	adds	r3, #72	; 0x48
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003768:	7bfa      	ldrb	r2, [r7, #15]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	3350      	adds	r3, #80	; 0x50
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	3301      	adds	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	429a      	cmp	r2, r3
 800378a:	d3af      	bcc.n	80036ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800378c:	2300      	movs	r3, #0
 800378e:	73fb      	strb	r3, [r7, #15]
 8003790:	e044      	b.n	800381c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003792:	7bfa      	ldrb	r2, [r7, #15]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80037a4:	2200      	movs	r2, #0
 80037a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037a8:	7bfa      	ldrb	r2, [r7, #15]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80037ba:	7bfa      	ldrb	r2, [r7, #15]
 80037bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037be:	7bfa      	ldrb	r2, [r7, #15]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037d4:	7bfa      	ldrb	r2, [r7, #15]
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037ea:	7bfa      	ldrb	r2, [r7, #15]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003800:	7bfa      	ldrb	r2, [r7, #15]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	3301      	adds	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
 800381c:	7bfa      	ldrb	r2, [r7, #15]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	429a      	cmp	r2, r3
 8003824:	d3b5      	bcc.n	8003792 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	687e      	ldr	r6, [r7, #4]
 800382e:	466d      	mov	r5, sp
 8003830:	f106 0410 	add.w	r4, r6, #16
 8003834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800383a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800383c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003840:	e885 0003 	stmia.w	r5, {r0, r1}
 8003844:	1d33      	adds	r3, r6, #4
 8003846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003848:	6838      	ldr	r0, [r7, #0]
 800384a:	f002 fe93 	bl	8006574 <USB_DevInit>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e014      	b.n	800388a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	2b01      	cmp	r3, #1
 8003876:	d102      	bne.n	800387e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f80a 	bl	8003892 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f003 f835 	bl	80068f2 <USB_DevDisconnect>

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003892 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003892:	b480      	push	{r7}
 8003894:	b085      	sub	sp, #20
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c4:	f043 0303 	orr.w	r3, r3, #3
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0cc      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f0:	4b68      	ldr	r3, [pc, #416]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d90c      	bls.n	8003918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fe:	4b65      	ldr	r3, [pc, #404]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003906:	4b63      	ldr	r3, [pc, #396]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d001      	beq.n	8003918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0b8      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d020      	beq.n	8003966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003930:	4b59      	ldr	r3, [pc, #356]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4a58      	ldr	r2, [pc, #352]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800393a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003948:	4b53      	ldr	r3, [pc, #332]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	4a52      	ldr	r2, [pc, #328]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003954:	4b50      	ldr	r3, [pc, #320]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	494d      	ldr	r1, [pc, #308]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	4313      	orrs	r3, r2
 8003964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d044      	beq.n	80039fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d107      	bne.n	800398a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397a:	4b47      	ldr	r3, [pc, #284]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d119      	bne.n	80039ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e07f      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d003      	beq.n	800399a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003996:	2b03      	cmp	r3, #3
 8003998:	d107      	bne.n	80039aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399a:	4b3f      	ldr	r3, [pc, #252]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e06f      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039aa:	4b3b      	ldr	r3, [pc, #236]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e067      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ba:	4b37      	ldr	r3, [pc, #220]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 0203 	bic.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4934      	ldr	r1, [pc, #208]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039cc:	f7fe ff7c 	bl	80028c8 <HAL_GetTick>
 80039d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	e00a      	b.n	80039ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d4:	f7fe ff78 	bl	80028c8 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e04f      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 020c 	and.w	r2, r3, #12
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d1eb      	bne.n	80039d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039fc:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d20c      	bcs.n	8003a24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e032      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a30:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	4916      	ldr	r1, [pc, #88]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	490e      	ldr	r1, [pc, #56]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a62:	f000 fbb1 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
 8003a66:	4602      	mov	r2, r0
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	490a      	ldr	r1, [pc, #40]	; (8003a9c <HAL_RCC_ClockConfig+0x1c0>)
 8003a74:	5ccb      	ldrb	r3, [r1, r3]
 8003a76:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7a:	4a09      	ldr	r2, [pc, #36]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a7e:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fd64 	bl	8002550 <HAL_InitTick>

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40023c00 	.word	0x40023c00
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	08026fe8 	.word	0x08026fe8
 8003aa0:	20000004 	.word	0x20000004
 8003aa4:	20000008 	.word	0x20000008

08003aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aac:	4b03      	ldr	r3, [pc, #12]	; (8003abc <HAL_RCC_GetHCLKFreq+0x14>)
 8003aae:	681b      	ldr	r3, [r3, #0]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20000004 	.word	0x20000004

08003ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ac4:	f7ff fff0 	bl	8003aa8 <HAL_RCC_GetHCLKFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	0a9b      	lsrs	r3, r3, #10
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	4903      	ldr	r1, [pc, #12]	; (8003ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	08026ff8 	.word	0x08026ff8

08003ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aec:	f7ff ffdc 	bl	8003aa8 <HAL_RCC_GetHCLKFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	0b5b      	lsrs	r3, r3, #13
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4903      	ldr	r1, [pc, #12]	; (8003b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	08026ff8 	.word	0x08026ff8

08003b10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	220f      	movs	r2, #15
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b20:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <HAL_RCC_GetClockConfig+0x5c>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0203 	and.w	r2, r3, #3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <HAL_RCC_GetClockConfig+0x5c>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <HAL_RCC_GetClockConfig+0x5c>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <HAL_RCC_GetClockConfig+0x5c>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	08db      	lsrs	r3, r3, #3
 8003b4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_RCC_GetClockConfig+0x60>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 020f 	and.w	r2, r3, #15
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	601a      	str	r2, [r3, #0]
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	40023c00 	.word	0x40023c00

08003b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08c      	sub	sp, #48	; 0x30
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d010      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003bac:	4b6f      	ldr	r3, [pc, #444]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	496c      	ldr	r1, [pc, #432]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d010      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003bda:	4b64      	ldr	r3, [pc, #400]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be8:	4960      	ldr	r1, [pc, #384]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d017      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c08:	4b58      	ldr	r3, [pc, #352]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	4955      	ldr	r1, [pc, #340]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c26:	d101      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003c34:	2301      	movs	r3, #1
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d017      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c44:	4b49      	ldr	r3, [pc, #292]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c52:	4946      	ldr	r1, [pc, #280]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c62:	d101      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003c64:	2301      	movs	r3, #1
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003c70:	2301      	movs	r3, #1
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 808a 	beq.w	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	4b39      	ldr	r3, [pc, #228]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	4a38      	ldr	r2, [pc, #224]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c90:	6413      	str	r3, [r2, #64]	; 0x40
 8003c92:	4b36      	ldr	r3, [pc, #216]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c9e:	4b34      	ldr	r3, [pc, #208]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a33      	ldr	r2, [pc, #204]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003caa:	f7fe fe0d 	bl	80028c8 <HAL_GetTick>
 8003cae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003cb2:	f7fe fe09 	bl	80028c8 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e278      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003cc4:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cd0:	4b26      	ldr	r3, [pc, #152]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d02f      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce8:	6a3a      	ldr	r2, [r7, #32]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d028      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cee:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cf8:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cfe:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d04:	4a19      	ldr	r2, [pc, #100]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d0a:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d114      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d16:	f7fe fdd7 	bl	80028c8 <HAL_GetTick>
 8003d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d1e:	f7fe fdd3 	bl	80028c8 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e240      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0ee      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d4c:	d114      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003d4e:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d62:	4902      	ldr	r1, [pc, #8]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	608b      	str	r3, [r1, #8]
 8003d68:	e00c      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003d6a:	bf00      	nop
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40007000 	.word	0x40007000
 8003d74:	42470e40 	.word	0x42470e40
 8003d78:	4b4a      	ldr	r3, [pc, #296]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a49      	ldr	r2, [pc, #292]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d82:	6093      	str	r3, [r2, #8]
 8003d84:	4b47      	ldr	r3, [pc, #284]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d90:	4944      	ldr	r1, [pc, #272]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d004      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003da8:	4b3f      	ldr	r3, [pc, #252]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003daa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003db8:	4b3a      	ldr	r3, [pc, #232]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc6:	4937      	ldr	r1, [pc, #220]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dda:	4b32      	ldr	r3, [pc, #200]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003de0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de8:	492e      	ldr	r1, [pc, #184]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d011      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003dfc:	4b29      	ldr	r3, [pc, #164]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e02:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0a:	4926      	ldr	r1, [pc, #152]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003e2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	491a      	ldr	r1, [pc, #104]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d011      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003e4e:	4b15      	ldr	r3, [pc, #84]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e54:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5c:	4911      	ldr	r1, [pc, #68]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d005      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e80:	f040 80ff 	bne.w	8004082 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e84:	4b09      	ldr	r3, [pc, #36]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e8a:	f7fe fd1d 	bl	80028c8 <HAL_GetTick>
 8003e8e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e90:	e00e      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e92:	f7fe fd19 	bl	80028c8 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d907      	bls.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e188      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	424711e0 	.word	0x424711e0
 8003eac:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eb0:	4b7e      	ldr	r3, [pc, #504]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1ea      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d009      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d028      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d124      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ee4:	4b71      	ldr	r3, [pc, #452]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eea:	0c1b      	lsrs	r3, r3, #16
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ef6:	4b6d      	ldr	r3, [pc, #436]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efc:	0e1b      	lsrs	r3, r3, #24
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	019b      	lsls	r3, r3, #6
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	3b01      	subs	r3, #1
 8003f16:	041b      	lsls	r3, r3, #16
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	061b      	lsls	r3, r3, #24
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	071b      	lsls	r3, r3, #28
 8003f26:	4961      	ldr	r1, [pc, #388]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d004      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d035      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f58:	d130      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f5a:	4b54      	ldr	r3, [pc, #336]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	3301      	adds	r3, #1
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f6c:	4b4f      	ldr	r3, [pc, #316]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f72:	0f1b      	lsrs	r3, r3, #28
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	019b      	lsls	r3, r3, #6
 8003f84:	431a      	orrs	r2, r3
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	061b      	lsls	r3, r3, #24
 8003f96:	431a      	orrs	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	071b      	lsls	r3, r3, #28
 8003f9c:	4943      	ldr	r1, [pc, #268]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fa4:	4b41      	ldr	r3, [pc, #260]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003faa:	f023 021f 	bic.w	r2, r3, #31
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	493d      	ldr	r1, [pc, #244]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d029      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fd0:	d124      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003fd2:	4b36      	ldr	r3, [pc, #216]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	3301      	adds	r3, #1
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fe4:	4b31      	ldr	r3, [pc, #196]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fea:	0f1b      	lsrs	r3, r3, #28
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	019b      	lsls	r3, r3, #6
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	3b01      	subs	r3, #1
 8004006:	041b      	lsls	r3, r3, #16
 8004008:	431a      	orrs	r2, r3
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	061b      	lsls	r3, r3, #24
 800400e:	431a      	orrs	r2, r3
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	071b      	lsls	r3, r3, #28
 8004014:	4925      	ldr	r1, [pc, #148]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004024:	2b00      	cmp	r3, #0
 8004026:	d016      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	019b      	lsls	r3, r3, #6
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	3b01      	subs	r3, #1
 800403c:	041b      	lsls	r3, r3, #16
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	061b      	lsls	r3, r3, #24
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	071b      	lsls	r3, r3, #28
 800404e:	4917      	ldr	r1, [pc, #92]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004056:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004058:	2201      	movs	r2, #1
 800405a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800405c:	f7fe fc34 	bl	80028c8 <HAL_GetTick>
 8004060:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004064:	f7fe fc30 	bl	80028c8 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e09f      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004076:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004084:	2b01      	cmp	r3, #1
 8004086:	f040 8095 	bne.w	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800408a:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004090:	f7fe fc1a 	bl	80028c8 <HAL_GetTick>
 8004094:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004096:	e00f      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004098:	f7fe fc16 	bl	80028c8 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d908      	bls.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e085      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	42470068 	.word	0x42470068
 80040b4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040b8:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c4:	d0e8      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x566>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d009      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d02b      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d127      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80040ee:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	3301      	adds	r3, #1
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699a      	ldr	r2, [r3, #24]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	019b      	lsls	r3, r3, #6
 800410a:	431a      	orrs	r2, r3
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	085b      	lsrs	r3, r3, #1
 8004110:	3b01      	subs	r3, #1
 8004112:	041b      	lsls	r3, r3, #16
 8004114:	431a      	orrs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	061b      	lsls	r3, r3, #24
 800411c:	4928      	ldr	r1, [pc, #160]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004124:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800412a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	3b01      	subs	r3, #1
 8004134:	021b      	lsls	r3, r3, #8
 8004136:	4922      	ldr	r1, [pc, #136]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004146:	2b00      	cmp	r3, #0
 8004148:	d01d      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004152:	d118      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004154:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	0e1b      	lsrs	r3, r3, #24
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	019b      	lsls	r3, r3, #6
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	085b      	lsrs	r3, r3, #1
 8004174:	3b01      	subs	r3, #1
 8004176:	041b      	lsls	r3, r3, #16
 8004178:	431a      	orrs	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	4910      	ldr	r1, [pc, #64]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004186:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004188:	2201      	movs	r2, #1
 800418a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800418c:	f7fe fb9c 	bl	80028c8 <HAL_GetTick>
 8004190:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004194:	f7fe fb98 	bl	80028c8 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e007      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b2:	d1ef      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3730      	adds	r7, #48	; 0x30
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
 80041c4:	42470070 	.word	0x42470070

080041c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041cc:	b0ae      	sub	sp, #184	; 0xb8
 80041ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041ee:	4bcb      	ldr	r3, [pc, #812]	; (800451c <HAL_RCC_GetSysClockFreq+0x354>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	f200 8206 	bhi.w	8004608 <HAL_RCC_GetSysClockFreq+0x440>
 80041fc:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <HAL_RCC_GetSysClockFreq+0x3c>)
 80041fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004202:	bf00      	nop
 8004204:	08004239 	.word	0x08004239
 8004208:	08004609 	.word	0x08004609
 800420c:	08004609 	.word	0x08004609
 8004210:	08004609 	.word	0x08004609
 8004214:	08004241 	.word	0x08004241
 8004218:	08004609 	.word	0x08004609
 800421c:	08004609 	.word	0x08004609
 8004220:	08004609 	.word	0x08004609
 8004224:	08004249 	.word	0x08004249
 8004228:	08004609 	.word	0x08004609
 800422c:	08004609 	.word	0x08004609
 8004230:	08004609 	.word	0x08004609
 8004234:	08004439 	.word	0x08004439
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004238:	4bb9      	ldr	r3, [pc, #740]	; (8004520 <HAL_RCC_GetSysClockFreq+0x358>)
 800423a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800423e:	e1e7      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004240:	4bb8      	ldr	r3, [pc, #736]	; (8004524 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004242:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004246:	e1e3      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004248:	4bb4      	ldr	r3, [pc, #720]	; (800451c <HAL_RCC_GetSysClockFreq+0x354>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004250:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004254:	4bb1      	ldr	r3, [pc, #708]	; (800451c <HAL_RCC_GetSysClockFreq+0x354>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d071      	beq.n	8004344 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004260:	4bae      	ldr	r3, [pc, #696]	; (800451c <HAL_RCC_GetSysClockFreq+0x354>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	099b      	lsrs	r3, r3, #6
 8004266:	2200      	movs	r2, #0
 8004268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800426c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004278:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800427c:	2300      	movs	r3, #0
 800427e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004282:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004286:	4622      	mov	r2, r4
 8004288:	462b      	mov	r3, r5
 800428a:	f04f 0000 	mov.w	r0, #0
 800428e:	f04f 0100 	mov.w	r1, #0
 8004292:	0159      	lsls	r1, r3, #5
 8004294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004298:	0150      	lsls	r0, r2, #5
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4621      	mov	r1, r4
 80042a0:	1a51      	subs	r1, r2, r1
 80042a2:	6439      	str	r1, [r7, #64]	; 0x40
 80042a4:	4629      	mov	r1, r5
 80042a6:	eb63 0301 	sbc.w	r3, r3, r1
 80042aa:	647b      	str	r3, [r7, #68]	; 0x44
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80042b8:	4649      	mov	r1, r9
 80042ba:	018b      	lsls	r3, r1, #6
 80042bc:	4641      	mov	r1, r8
 80042be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042c2:	4641      	mov	r1, r8
 80042c4:	018a      	lsls	r2, r1, #6
 80042c6:	4641      	mov	r1, r8
 80042c8:	1a51      	subs	r1, r2, r1
 80042ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80042cc:	4649      	mov	r1, r9
 80042ce:	eb63 0301 	sbc.w	r3, r3, r1
 80042d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80042e0:	4649      	mov	r1, r9
 80042e2:	00cb      	lsls	r3, r1, #3
 80042e4:	4641      	mov	r1, r8
 80042e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ea:	4641      	mov	r1, r8
 80042ec:	00ca      	lsls	r2, r1, #3
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	4622      	mov	r2, r4
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	633b      	str	r3, [r7, #48]	; 0x30
 80042fa:	462b      	mov	r3, r5
 80042fc:	460a      	mov	r2, r1
 80042fe:	eb42 0303 	adc.w	r3, r2, r3
 8004302:	637b      	str	r3, [r7, #52]	; 0x34
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004310:	4629      	mov	r1, r5
 8004312:	024b      	lsls	r3, r1, #9
 8004314:	4621      	mov	r1, r4
 8004316:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800431a:	4621      	mov	r1, r4
 800431c:	024a      	lsls	r2, r1, #9
 800431e:	4610      	mov	r0, r2
 8004320:	4619      	mov	r1, r3
 8004322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004326:	2200      	movs	r2, #0
 8004328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800432c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004330:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004334:	f7fc fd28 	bl	8000d88 <__aeabi_uldivmod>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4613      	mov	r3, r2
 800433e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004342:	e067      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004344:	4b75      	ldr	r3, [pc, #468]	; (800451c <HAL_RCC_GetSysClockFreq+0x354>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	099b      	lsrs	r3, r3, #6
 800434a:	2200      	movs	r2, #0
 800434c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004350:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004354:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435c:	67bb      	str	r3, [r7, #120]	; 0x78
 800435e:	2300      	movs	r3, #0
 8004360:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004362:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004366:	4622      	mov	r2, r4
 8004368:	462b      	mov	r3, r5
 800436a:	f04f 0000 	mov.w	r0, #0
 800436e:	f04f 0100 	mov.w	r1, #0
 8004372:	0159      	lsls	r1, r3, #5
 8004374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004378:	0150      	lsls	r0, r2, #5
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	4621      	mov	r1, r4
 8004380:	1a51      	subs	r1, r2, r1
 8004382:	62b9      	str	r1, [r7, #40]	; 0x28
 8004384:	4629      	mov	r1, r5
 8004386:	eb63 0301 	sbc.w	r3, r3, r1
 800438a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004398:	4649      	mov	r1, r9
 800439a:	018b      	lsls	r3, r1, #6
 800439c:	4641      	mov	r1, r8
 800439e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043a2:	4641      	mov	r1, r8
 80043a4:	018a      	lsls	r2, r1, #6
 80043a6:	4641      	mov	r1, r8
 80043a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80043ac:	4649      	mov	r1, r9
 80043ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043c6:	4692      	mov	sl, r2
 80043c8:	469b      	mov	fp, r3
 80043ca:	4623      	mov	r3, r4
 80043cc:	eb1a 0303 	adds.w	r3, sl, r3
 80043d0:	623b      	str	r3, [r7, #32]
 80043d2:	462b      	mov	r3, r5
 80043d4:	eb4b 0303 	adc.w	r3, fp, r3
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80043e6:	4629      	mov	r1, r5
 80043e8:	028b      	lsls	r3, r1, #10
 80043ea:	4621      	mov	r1, r4
 80043ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043f0:	4621      	mov	r1, r4
 80043f2:	028a      	lsls	r2, r1, #10
 80043f4:	4610      	mov	r0, r2
 80043f6:	4619      	mov	r1, r3
 80043f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043fc:	2200      	movs	r2, #0
 80043fe:	673b      	str	r3, [r7, #112]	; 0x70
 8004400:	677a      	str	r2, [r7, #116]	; 0x74
 8004402:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004406:	f7fc fcbf 	bl	8000d88 <__aeabi_uldivmod>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4613      	mov	r3, r2
 8004410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004414:	4b41      	ldr	r3, [pc, #260]	; (800451c <HAL_RCC_GetSysClockFreq+0x354>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	0c1b      	lsrs	r3, r3, #16
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	3301      	adds	r3, #1
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004426:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800442a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800442e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004432:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004436:	e0eb      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004438:	4b38      	ldr	r3, [pc, #224]	; (800451c <HAL_RCC_GetSysClockFreq+0x354>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004440:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004444:	4b35      	ldr	r3, [pc, #212]	; (800451c <HAL_RCC_GetSysClockFreq+0x354>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d06b      	beq.n	8004528 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004450:	4b32      	ldr	r3, [pc, #200]	; (800451c <HAL_RCC_GetSysClockFreq+0x354>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	099b      	lsrs	r3, r3, #6
 8004456:	2200      	movs	r2, #0
 8004458:	66bb      	str	r3, [r7, #104]	; 0x68
 800445a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800445c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800445e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004462:	663b      	str	r3, [r7, #96]	; 0x60
 8004464:	2300      	movs	r3, #0
 8004466:	667b      	str	r3, [r7, #100]	; 0x64
 8004468:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800446c:	4622      	mov	r2, r4
 800446e:	462b      	mov	r3, r5
 8004470:	f04f 0000 	mov.w	r0, #0
 8004474:	f04f 0100 	mov.w	r1, #0
 8004478:	0159      	lsls	r1, r3, #5
 800447a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800447e:	0150      	lsls	r0, r2, #5
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4621      	mov	r1, r4
 8004486:	1a51      	subs	r1, r2, r1
 8004488:	61b9      	str	r1, [r7, #24]
 800448a:	4629      	mov	r1, r5
 800448c:	eb63 0301 	sbc.w	r3, r3, r1
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800449e:	4659      	mov	r1, fp
 80044a0:	018b      	lsls	r3, r1, #6
 80044a2:	4651      	mov	r1, sl
 80044a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044a8:	4651      	mov	r1, sl
 80044aa:	018a      	lsls	r2, r1, #6
 80044ac:	4651      	mov	r1, sl
 80044ae:	ebb2 0801 	subs.w	r8, r2, r1
 80044b2:	4659      	mov	r1, fp
 80044b4:	eb63 0901 	sbc.w	r9, r3, r1
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044cc:	4690      	mov	r8, r2
 80044ce:	4699      	mov	r9, r3
 80044d0:	4623      	mov	r3, r4
 80044d2:	eb18 0303 	adds.w	r3, r8, r3
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	462b      	mov	r3, r5
 80044da:	eb49 0303 	adc.w	r3, r9, r3
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80044ec:	4629      	mov	r1, r5
 80044ee:	024b      	lsls	r3, r1, #9
 80044f0:	4621      	mov	r1, r4
 80044f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044f6:	4621      	mov	r1, r4
 80044f8:	024a      	lsls	r2, r1, #9
 80044fa:	4610      	mov	r0, r2
 80044fc:	4619      	mov	r1, r3
 80044fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004502:	2200      	movs	r2, #0
 8004504:	65bb      	str	r3, [r7, #88]	; 0x58
 8004506:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004508:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800450c:	f7fc fc3c 	bl	8000d88 <__aeabi_uldivmod>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4613      	mov	r3, r2
 8004516:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800451a:	e065      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x420>
 800451c:	40023800 	.word	0x40023800
 8004520:	00f42400 	.word	0x00f42400
 8004524:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004528:	4b3d      	ldr	r3, [pc, #244]	; (8004620 <HAL_RCC_GetSysClockFreq+0x458>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	099b      	lsrs	r3, r3, #6
 800452e:	2200      	movs	r2, #0
 8004530:	4618      	mov	r0, r3
 8004532:	4611      	mov	r1, r2
 8004534:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004538:	653b      	str	r3, [r7, #80]	; 0x50
 800453a:	2300      	movs	r3, #0
 800453c:	657b      	str	r3, [r7, #84]	; 0x54
 800453e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004542:	4642      	mov	r2, r8
 8004544:	464b      	mov	r3, r9
 8004546:	f04f 0000 	mov.w	r0, #0
 800454a:	f04f 0100 	mov.w	r1, #0
 800454e:	0159      	lsls	r1, r3, #5
 8004550:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004554:	0150      	lsls	r0, r2, #5
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4641      	mov	r1, r8
 800455c:	1a51      	subs	r1, r2, r1
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	4649      	mov	r1, r9
 8004562:	eb63 0301 	sbc.w	r3, r3, r1
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004574:	4659      	mov	r1, fp
 8004576:	018b      	lsls	r3, r1, #6
 8004578:	4651      	mov	r1, sl
 800457a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800457e:	4651      	mov	r1, sl
 8004580:	018a      	lsls	r2, r1, #6
 8004582:	4651      	mov	r1, sl
 8004584:	1a54      	subs	r4, r2, r1
 8004586:	4659      	mov	r1, fp
 8004588:	eb63 0501 	sbc.w	r5, r3, r1
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	00eb      	lsls	r3, r5, #3
 8004596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800459a:	00e2      	lsls	r2, r4, #3
 800459c:	4614      	mov	r4, r2
 800459e:	461d      	mov	r5, r3
 80045a0:	4643      	mov	r3, r8
 80045a2:	18e3      	adds	r3, r4, r3
 80045a4:	603b      	str	r3, [r7, #0]
 80045a6:	464b      	mov	r3, r9
 80045a8:	eb45 0303 	adc.w	r3, r5, r3
 80045ac:	607b      	str	r3, [r7, #4]
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045ba:	4629      	mov	r1, r5
 80045bc:	028b      	lsls	r3, r1, #10
 80045be:	4621      	mov	r1, r4
 80045c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045c4:	4621      	mov	r1, r4
 80045c6:	028a      	lsls	r2, r1, #10
 80045c8:	4610      	mov	r0, r2
 80045ca:	4619      	mov	r1, r3
 80045cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045d0:	2200      	movs	r2, #0
 80045d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80045d4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80045d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045da:	f7fc fbd5 	bl	8000d88 <__aeabi_uldivmod>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4613      	mov	r3, r2
 80045e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80045e8:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <HAL_RCC_GetSysClockFreq+0x458>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	0f1b      	lsrs	r3, r3, #28
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80045f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004602:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004606:	e003      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <HAL_RCC_GetSysClockFreq+0x45c>)
 800460a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800460e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004610:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004614:	4618      	mov	r0, r3
 8004616:	37b8      	adds	r7, #184	; 0xb8
 8004618:	46bd      	mov	sp, r7
 800461a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800
 8004624:	00f42400 	.word	0x00f42400

08004628 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 8083 	beq.w	8004748 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004642:	4b95      	ldr	r3, [pc, #596]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b04      	cmp	r3, #4
 800464c:	d019      	beq.n	8004682 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800464e:	4b92      	ldr	r3, [pc, #584]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004656:	2b08      	cmp	r3, #8
 8004658:	d106      	bne.n	8004668 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800465a:	4b8f      	ldr	r3, [pc, #572]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004666:	d00c      	beq.n	8004682 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004668:	4b8b      	ldr	r3, [pc, #556]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004670:	2b0c      	cmp	r3, #12
 8004672:	d112      	bne.n	800469a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004674:	4b88      	ldr	r3, [pc, #544]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004680:	d10b      	bne.n	800469a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004682:	4b85      	ldr	r3, [pc, #532]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d05b      	beq.n	8004746 <HAL_RCC_OscConfig+0x11e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d157      	bne.n	8004746 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e216      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a2:	d106      	bne.n	80046b2 <HAL_RCC_OscConfig+0x8a>
 80046a4:	4b7c      	ldr	r3, [pc, #496]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a7b      	ldr	r2, [pc, #492]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	e01d      	b.n	80046ee <HAL_RCC_OscConfig+0xc6>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046ba:	d10c      	bne.n	80046d6 <HAL_RCC_OscConfig+0xae>
 80046bc:	4b76      	ldr	r3, [pc, #472]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a75      	ldr	r2, [pc, #468]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	4b73      	ldr	r3, [pc, #460]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a72      	ldr	r2, [pc, #456]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	e00b      	b.n	80046ee <HAL_RCC_OscConfig+0xc6>
 80046d6:	4b70      	ldr	r3, [pc, #448]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a6f      	ldr	r2, [pc, #444]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	4b6d      	ldr	r3, [pc, #436]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a6c      	ldr	r2, [pc, #432]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80046e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d013      	beq.n	800471e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f6:	f7fe f8e7 	bl	80028c8 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046fe:	f7fe f8e3 	bl	80028c8 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b64      	cmp	r3, #100	; 0x64
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e1db      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004710:	4b61      	ldr	r3, [pc, #388]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <HAL_RCC_OscConfig+0xd6>
 800471c:	e014      	b.n	8004748 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471e:	f7fe f8d3 	bl	80028c8 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004726:	f7fe f8cf 	bl	80028c8 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b64      	cmp	r3, #100	; 0x64
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e1c7      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004738:	4b57      	ldr	r3, [pc, #348]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f0      	bne.n	8004726 <HAL_RCC_OscConfig+0xfe>
 8004744:	e000      	b.n	8004748 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004746:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d06f      	beq.n	8004834 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004754:	4b50      	ldr	r3, [pc, #320]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b00      	cmp	r3, #0
 800475e:	d017      	beq.n	8004790 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004760:	4b4d      	ldr	r3, [pc, #308]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004768:	2b08      	cmp	r3, #8
 800476a:	d105      	bne.n	8004778 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800476c:	4b4a      	ldr	r3, [pc, #296]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00b      	beq.n	8004790 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004778:	4b47      	ldr	r3, [pc, #284]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004780:	2b0c      	cmp	r3, #12
 8004782:	d11c      	bne.n	80047be <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004784:	4b44      	ldr	r3, [pc, #272]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d116      	bne.n	80047be <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004790:	4b41      	ldr	r3, [pc, #260]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <HAL_RCC_OscConfig+0x180>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e18f      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a8:	4b3b      	ldr	r3, [pc, #236]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	4938      	ldr	r1, [pc, #224]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047bc:	e03a      	b.n	8004834 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d020      	beq.n	8004808 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c6:	4b35      	ldr	r3, [pc, #212]	; (800489c <HAL_RCC_OscConfig+0x274>)
 80047c8:	2201      	movs	r2, #1
 80047ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fe f87c 	bl	80028c8 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047d4:	f7fe f878 	bl	80028c8 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e170      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e6:	4b2c      	ldr	r3, [pc, #176]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f2:	4b29      	ldr	r3, [pc, #164]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4925      	ldr	r1, [pc, #148]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 8004802:	4313      	orrs	r3, r2
 8004804:	600b      	str	r3, [r1, #0]
 8004806:	e015      	b.n	8004834 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004808:	4b24      	ldr	r3, [pc, #144]	; (800489c <HAL_RCC_OscConfig+0x274>)
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480e:	f7fe f85b 	bl	80028c8 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004816:	f7fe f857 	bl	80028c8 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e14f      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004828:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f0      	bne.n	8004816 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b00      	cmp	r3, #0
 800483e:	d037      	beq.n	80048b0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d016      	beq.n	8004876 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004848:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <HAL_RCC_OscConfig+0x278>)
 800484a:	2201      	movs	r2, #1
 800484c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484e:	f7fe f83b 	bl	80028c8 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004856:	f7fe f837 	bl	80028c8 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e12f      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_RCC_OscConfig+0x270>)
 800486a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0f0      	beq.n	8004856 <HAL_RCC_OscConfig+0x22e>
 8004874:	e01c      	b.n	80048b0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004876:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <HAL_RCC_OscConfig+0x278>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487c:	f7fe f824 	bl	80028c8 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004882:	e00f      	b.n	80048a4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004884:	f7fe f820 	bl	80028c8 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d908      	bls.n	80048a4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e118      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4a0>
 8004896:	bf00      	nop
 8004898:	40023800 	.word	0x40023800
 800489c:	42470000 	.word	0x42470000
 80048a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048a4:	4b8a      	ldr	r3, [pc, #552]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 80048a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e9      	bne.n	8004884 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 8097 	beq.w	80049ec <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048be:	2300      	movs	r3, #0
 80048c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048c2:	4b83      	ldr	r3, [pc, #524]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10f      	bne.n	80048ee <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	4b7f      	ldr	r3, [pc, #508]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	4a7e      	ldr	r2, [pc, #504]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 80048d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048dc:	6413      	str	r3, [r2, #64]	; 0x40
 80048de:	4b7c      	ldr	r3, [pc, #496]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048ea:	2301      	movs	r3, #1
 80048ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ee:	4b79      	ldr	r3, [pc, #484]	; (8004ad4 <HAL_RCC_OscConfig+0x4ac>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d118      	bne.n	800492c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048fa:	4b76      	ldr	r3, [pc, #472]	; (8004ad4 <HAL_RCC_OscConfig+0x4ac>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a75      	ldr	r2, [pc, #468]	; (8004ad4 <HAL_RCC_OscConfig+0x4ac>)
 8004900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004906:	f7fd ffdf 	bl	80028c8 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800490e:	f7fd ffdb 	bl	80028c8 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e0d3      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004920:	4b6c      	ldr	r3, [pc, #432]	; (8004ad4 <HAL_RCC_OscConfig+0x4ac>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d106      	bne.n	8004942 <HAL_RCC_OscConfig+0x31a>
 8004934:	4b66      	ldr	r3, [pc, #408]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 8004936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004938:	4a65      	ldr	r2, [pc, #404]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	6713      	str	r3, [r2, #112]	; 0x70
 8004940:	e01c      	b.n	800497c <HAL_RCC_OscConfig+0x354>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	2b05      	cmp	r3, #5
 8004948:	d10c      	bne.n	8004964 <HAL_RCC_OscConfig+0x33c>
 800494a:	4b61      	ldr	r3, [pc, #388]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494e:	4a60      	ldr	r2, [pc, #384]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 8004950:	f043 0304 	orr.w	r3, r3, #4
 8004954:	6713      	str	r3, [r2, #112]	; 0x70
 8004956:	4b5e      	ldr	r3, [pc, #376]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	4a5d      	ldr	r2, [pc, #372]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	6713      	str	r3, [r2, #112]	; 0x70
 8004962:	e00b      	b.n	800497c <HAL_RCC_OscConfig+0x354>
 8004964:	4b5a      	ldr	r3, [pc, #360]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 8004966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004968:	4a59      	ldr	r2, [pc, #356]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 800496a:	f023 0301 	bic.w	r3, r3, #1
 800496e:	6713      	str	r3, [r2, #112]	; 0x70
 8004970:	4b57      	ldr	r3, [pc, #348]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 8004972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004974:	4a56      	ldr	r2, [pc, #344]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 8004976:	f023 0304 	bic.w	r3, r3, #4
 800497a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d015      	beq.n	80049b0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004984:	f7fd ffa0 	bl	80028c8 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800498c:	f7fd ff9c 	bl	80028c8 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f241 3288 	movw	r2, #5000	; 0x1388
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e092      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a2:	4b4b      	ldr	r3, [pc, #300]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0ee      	beq.n	800498c <HAL_RCC_OscConfig+0x364>
 80049ae:	e014      	b.n	80049da <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b0:	f7fd ff8a 	bl	80028c8 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b6:	e00a      	b.n	80049ce <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b8:	f7fd ff86 	bl	80028c8 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e07c      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ce:	4b40      	ldr	r3, [pc, #256]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1ee      	bne.n	80049b8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049da:	7dfb      	ldrb	r3, [r7, #23]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d105      	bne.n	80049ec <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e0:	4b3b      	ldr	r3, [pc, #236]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 80049e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e4:	4a3a      	ldr	r2, [pc, #232]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 80049e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d068      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049f4:	4b36      	ldr	r3, [pc, #216]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 030c 	and.w	r3, r3, #12
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d060      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d145      	bne.n	8004a94 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a08:	4b33      	ldr	r3, [pc, #204]	; (8004ad8 <HAL_RCC_OscConfig+0x4b0>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0e:	f7fd ff5b 	bl	80028c8 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a16:	f7fd ff57 	bl	80028c8 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e04f      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a28:	4b29      	ldr	r3, [pc, #164]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f0      	bne.n	8004a16 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69da      	ldr	r2, [r3, #28]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	019b      	lsls	r3, r3, #6
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	085b      	lsrs	r3, r3, #1
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	041b      	lsls	r3, r3, #16
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	071b      	lsls	r3, r3, #28
 8004a60:	491b      	ldr	r1, [pc, #108]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a66:	4b1c      	ldr	r3, [pc, #112]	; (8004ad8 <HAL_RCC_OscConfig+0x4b0>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fd ff2c 	bl	80028c8 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a74:	f7fd ff28 	bl	80028c8 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e020      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a86:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0x44c>
 8004a92:	e018      	b.n	8004ac6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a94:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <HAL_RCC_OscConfig+0x4b0>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9a:	f7fd ff15 	bl	80028c8 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa2:	f7fd ff11 	bl	80028c8 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e009      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab4:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <HAL_RCC_OscConfig+0x4a8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f0      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x47a>
 8004ac0:	e001      	b.n	8004ac6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	40007000 	.word	0x40007000
 8004ad8:	42470060 	.word	0x42470060

08004adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e01d      	b.n	8004b2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f815 	bl	8004b32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3304      	adds	r3, #4
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	f000 f968 	bl	8004df0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b085      	sub	sp, #20
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0201 	orr.w	r2, r2, #1
 8004b5c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b06      	cmp	r3, #6
 8004b6e:	d007      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d122      	bne.n	8004bea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d11b      	bne.n	8004bea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f06f 0202 	mvn.w	r2, #2
 8004bba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f8ee 	bl	8004db2 <HAL_TIM_IC_CaptureCallback>
 8004bd6:	e005      	b.n	8004be4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f8e0 	bl	8004d9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f8f1 	bl	8004dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d122      	bne.n	8004c3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d11b      	bne.n	8004c3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f06f 0204 	mvn.w	r2, #4
 8004c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f8c4 	bl	8004db2 <HAL_TIM_IC_CaptureCallback>
 8004c2a:	e005      	b.n	8004c38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f8b6 	bl	8004d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f8c7 	bl	8004dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d122      	bne.n	8004c92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d11b      	bne.n	8004c92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f06f 0208 	mvn.w	r2, #8
 8004c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2204      	movs	r2, #4
 8004c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f003 0303 	and.w	r3, r3, #3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f89a 	bl	8004db2 <HAL_TIM_IC_CaptureCallback>
 8004c7e:	e005      	b.n	8004c8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f88c 	bl	8004d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f89d 	bl	8004dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d122      	bne.n	8004ce6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b10      	cmp	r3, #16
 8004cac:	d11b      	bne.n	8004ce6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f06f 0210 	mvn.w	r2, #16
 8004cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2208      	movs	r2, #8
 8004cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f870 	bl	8004db2 <HAL_TIM_IC_CaptureCallback>
 8004cd2:	e005      	b.n	8004ce0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f862 	bl	8004d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f873 	bl	8004dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d10e      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d107      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f06f 0201 	mvn.w	r2, #1
 8004d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7fd fa2b 	bl	8002168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1c:	2b80      	cmp	r3, #128	; 0x80
 8004d1e:	d10e      	bne.n	8004d3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2a:	2b80      	cmp	r3, #128	; 0x80
 8004d2c:	d107      	bne.n	8004d3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f903 	bl	8004f44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d10e      	bne.n	8004d6a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d56:	2b40      	cmp	r3, #64	; 0x40
 8004d58:	d107      	bne.n	8004d6a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f838 	bl	8004dda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	d10e      	bne.n	8004d96 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d107      	bne.n	8004d96 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f06f 0220 	mvn.w	r2, #32
 8004d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f8cd 	bl	8004f30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a40      	ldr	r2, [pc, #256]	; (8004f04 <TIM_Base_SetConfig+0x114>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d013      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0e:	d00f      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a3d      	ldr	r2, [pc, #244]	; (8004f08 <TIM_Base_SetConfig+0x118>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00b      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a3c      	ldr	r2, [pc, #240]	; (8004f0c <TIM_Base_SetConfig+0x11c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d007      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a3b      	ldr	r2, [pc, #236]	; (8004f10 <TIM_Base_SetConfig+0x120>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a3a      	ldr	r2, [pc, #232]	; (8004f14 <TIM_Base_SetConfig+0x124>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d108      	bne.n	8004e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a2f      	ldr	r2, [pc, #188]	; (8004f04 <TIM_Base_SetConfig+0x114>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d02b      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e50:	d027      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a2c      	ldr	r2, [pc, #176]	; (8004f08 <TIM_Base_SetConfig+0x118>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d023      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2b      	ldr	r2, [pc, #172]	; (8004f0c <TIM_Base_SetConfig+0x11c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d01f      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2a      	ldr	r2, [pc, #168]	; (8004f10 <TIM_Base_SetConfig+0x120>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d01b      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a29      	ldr	r2, [pc, #164]	; (8004f14 <TIM_Base_SetConfig+0x124>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d017      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a28      	ldr	r2, [pc, #160]	; (8004f18 <TIM_Base_SetConfig+0x128>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a27      	ldr	r2, [pc, #156]	; (8004f1c <TIM_Base_SetConfig+0x12c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00f      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a26      	ldr	r2, [pc, #152]	; (8004f20 <TIM_Base_SetConfig+0x130>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00b      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a25      	ldr	r2, [pc, #148]	; (8004f24 <TIM_Base_SetConfig+0x134>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a24      	ldr	r2, [pc, #144]	; (8004f28 <TIM_Base_SetConfig+0x138>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a23      	ldr	r2, [pc, #140]	; (8004f2c <TIM_Base_SetConfig+0x13c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d108      	bne.n	8004eb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a0a      	ldr	r2, [pc, #40]	; (8004f04 <TIM_Base_SetConfig+0x114>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d003      	beq.n	8004ee8 <TIM_Base_SetConfig+0xf8>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a0c      	ldr	r2, [pc, #48]	; (8004f14 <TIM_Base_SetConfig+0x124>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d103      	bne.n	8004ef0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	615a      	str	r2, [r3, #20]
}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40010000 	.word	0x40010000
 8004f08:	40000400 	.word	0x40000400
 8004f0c:	40000800 	.word	0x40000800
 8004f10:	40000c00 	.word	0x40000c00
 8004f14:	40010400 	.word	0x40010400
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40014400 	.word	0x40014400
 8004f20:	40014800 	.word	0x40014800
 8004f24:	40001800 	.word	0x40001800
 8004f28:	40001c00 	.word	0x40001c00
 8004f2c:	40002000 	.word	0x40002000

08004f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e03f      	b.n	8004fea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fd f9d6 	bl	8002330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2224      	movs	r2, #36	; 0x24
 8004f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fd7f 	bl	8005aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695a      	ldr	r2, [r3, #20]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b088      	sub	sp, #32
 8004ff6:	af02      	add	r7, sp, #8
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	4613      	mov	r3, r2
 8005000:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b20      	cmp	r3, #32
 8005010:	f040 8083 	bne.w	800511a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_UART_Transmit+0x2e>
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e07b      	b.n	800511c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_UART_Transmit+0x40>
 800502e:	2302      	movs	r3, #2
 8005030:	e074      	b.n	800511c <HAL_UART_Transmit+0x12a>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2221      	movs	r2, #33	; 0x21
 8005044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005048:	f7fd fc3e 	bl	80028c8 <HAL_GetTick>
 800504c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	88fa      	ldrh	r2, [r7, #6]
 8005052:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	88fa      	ldrh	r2, [r7, #6]
 8005058:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005062:	e042      	b.n	80050ea <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507a:	d122      	bne.n	80050c2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2200      	movs	r2, #0
 8005084:	2180      	movs	r1, #128	; 0x80
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fb89 	bl	800579e <UART_WaitOnFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e042      	b.n	800511c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d103      	bne.n	80050ba <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	3302      	adds	r3, #2
 80050b6:	60bb      	str	r3, [r7, #8]
 80050b8:	e017      	b.n	80050ea <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	3301      	adds	r3, #1
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	e013      	b.n	80050ea <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2180      	movs	r1, #128	; 0x80
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 fb66 	bl	800579e <UART_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e01f      	b.n	800511c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	60ba      	str	r2, [r7, #8]
 80050e2:	781a      	ldrb	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1b7      	bne.n	8005064 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2200      	movs	r2, #0
 80050fc:	2140      	movs	r1, #64	; 0x40
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 fb4d 	bl	800579e <UART_WaitOnFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e006      	b.n	800511c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	e000      	b.n	800511c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800511a:	2302      	movs	r3, #2
  }
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	4613      	mov	r3, r2
 8005130:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b20      	cmp	r3, #32
 800513c:	d153      	bne.n	80051e6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <HAL_UART_Transmit_DMA+0x26>
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e04c      	b.n	80051e8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005154:	2b01      	cmp	r3, #1
 8005156:	d101      	bne.n	800515c <HAL_UART_Transmit_DMA+0x38>
 8005158:	2302      	movs	r3, #2
 800515a:	e045      	b.n	80051e8 <HAL_UART_Transmit_DMA+0xc4>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	88fa      	ldrh	r2, [r7, #6]
 800516e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	88fa      	ldrh	r2, [r7, #6]
 8005174:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2221      	movs	r2, #33	; 0x21
 8005180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	4a19      	ldr	r2, [pc, #100]	; (80051f0 <HAL_UART_Transmit_DMA+0xcc>)
 800518a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005190:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <HAL_UART_Transmit_DMA+0xd0>)
 8005192:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005198:	4a17      	ldr	r2, [pc, #92]	; (80051f8 <HAL_UART_Transmit_DMA+0xd4>)
 800519a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	2200      	movs	r2, #0
 80051a2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80051a4:	f107 0308 	add.w	r3, r7, #8
 80051a8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	6819      	ldr	r1, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3304      	adds	r3, #4
 80051b8:	461a      	mov	r2, r3
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	f7fd fd44 	bl	8002c48 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051c8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695a      	ldr	r2, [r3, #20]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051e0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	e000      	b.n	80051e8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80051e6:	2302      	movs	r3, #2
  }
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	08005619 	.word	0x08005619
 80051f4:	0800566b 	.word	0x0800566b
 80051f8:	0800570b 	.word	0x0800570b

080051fc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	4613      	mov	r3, r2
 8005208:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b20      	cmp	r3, #32
 8005214:	d166      	bne.n	80052e4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <HAL_UART_Receive_DMA+0x26>
 800521c:	88fb      	ldrh	r3, [r7, #6]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e05f      	b.n	80052e6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_UART_Receive_DMA+0x38>
 8005230:	2302      	movs	r3, #2
 8005232:	e058      	b.n	80052e6 <HAL_UART_Receive_DMA+0xea>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	88fa      	ldrh	r2, [r7, #6]
 8005246:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2222      	movs	r2, #34	; 0x22
 8005252:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525a:	4a25      	ldr	r2, [pc, #148]	; (80052f0 <HAL_UART_Receive_DMA+0xf4>)
 800525c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005262:	4a24      	ldr	r2, [pc, #144]	; (80052f4 <HAL_UART_Receive_DMA+0xf8>)
 8005264:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526a:	4a23      	ldr	r2, [pc, #140]	; (80052f8 <HAL_UART_Receive_DMA+0xfc>)
 800526c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005272:	2200      	movs	r2, #0
 8005274:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3304      	adds	r3, #4
 8005286:	4619      	mov	r1, r3
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	88fb      	ldrh	r3, [r7, #6]
 800528e:	f7fd fcdb 	bl	8002c48 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005292:	2300      	movs	r3, #0
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052be:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695a      	ldr	r2, [r3, #20]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695a      	ldr	r2, [r3, #20]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052de:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	e000      	b.n	80052e6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80052e4:	2302      	movs	r3, #2
  }
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	08005687 	.word	0x08005687
 80052f4:	080056ef 	.word	0x080056ef
 80052f8:	0800570b 	.word	0x0800570b

080052fc <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005312:	2b80      	cmp	r3, #128	; 0x80
 8005314:	bf0c      	ite	eq
 8005316:	2301      	moveq	r3, #1
 8005318:	2300      	movne	r3, #0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b21      	cmp	r3, #33	; 0x21
 8005328:	d116      	bne.n	8005358 <HAL_UART_DMAStop+0x5c>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d013      	beq.n	8005358 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695a      	ldr	r2, [r3, #20]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800533e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	2b00      	cmp	r3, #0
 8005346:	d004      	beq.n	8005352 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	4618      	mov	r0, r3
 800534e:	f7fd fcd3 	bl	8002cf8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fa6d 	bl	8005832 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005362:	2b40      	cmp	r3, #64	; 0x40
 8005364:	bf0c      	ite	eq
 8005366:	2301      	moveq	r3, #1
 8005368:	2300      	movne	r3, #0
 800536a:	b2db      	uxtb	r3, r3
 800536c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b22      	cmp	r3, #34	; 0x22
 8005378:	d116      	bne.n	80053a8 <HAL_UART_DMAStop+0xac>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d013      	beq.n	80053a8 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695a      	ldr	r2, [r3, #20]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800538e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539c:	4618      	mov	r0, r3
 800539e:	f7fd fcab 	bl	8002cf8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fa5b 	bl	800585e <UART_EndRxTransfer>
  }

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10d      	bne.n	8005406 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d008      	beq.n	8005406 <HAL_UART_IRQHandler+0x52>
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 facd 	bl	800599e <UART_Receive_IT>
      return;
 8005404:	e0d0      	b.n	80055a8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80b0 	beq.w	800556e <HAL_UART_IRQHandler+0x1ba>
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d105      	bne.n	8005424 <HAL_UART_IRQHandler+0x70>
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 80a5 	beq.w	800556e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <HAL_UART_IRQHandler+0x90>
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543c:	f043 0201 	orr.w	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f003 0304 	and.w	r3, r3, #4
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <HAL_UART_IRQHandler+0xb0>
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545c:	f043 0202 	orr.w	r2, r3, #2
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_UART_IRQHandler+0xd0>
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547c:	f043 0204 	orr.w	r2, r3, #4
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00f      	beq.n	80054ae <HAL_UART_IRQHandler+0xfa>
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	f003 0320 	and.w	r3, r3, #32
 8005494:	2b00      	cmp	r3, #0
 8005496:	d104      	bne.n	80054a2 <HAL_UART_IRQHandler+0xee>
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a6:	f043 0208 	orr.w	r2, r3, #8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d077      	beq.n	80055a6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <HAL_UART_IRQHandler+0x11c>
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fa67 	bl	800599e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054da:	2b40      	cmp	r3, #64	; 0x40
 80054dc:	bf0c      	ite	eq
 80054de:	2301      	moveq	r3, #1
 80054e0:	2300      	movne	r3, #0
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d102      	bne.n	80054f8 <HAL_UART_IRQHandler+0x144>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d031      	beq.n	800555c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f9b0 	bl	800585e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d123      	bne.n	8005554 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695a      	ldr	r2, [r3, #20]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800551a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005520:	2b00      	cmp	r3, #0
 8005522:	d013      	beq.n	800554c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005528:	4a21      	ldr	r2, [pc, #132]	; (80055b0 <HAL_UART_IRQHandler+0x1fc>)
 800552a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005530:	4618      	mov	r0, r3
 8005532:	f7fd fc51 	bl	8002dd8 <HAL_DMA_Abort_IT>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d016      	beq.n	800556a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005546:	4610      	mov	r0, r2
 8005548:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800554a:	e00e      	b.n	800556a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f859 	bl	8005604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005552:	e00a      	b.n	800556a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f855 	bl	8005604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800555a:	e006      	b.n	800556a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f851 	bl	8005604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005568:	e01d      	b.n	80055a6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800556a:	bf00      	nop
    return;
 800556c:	e01b      	b.n	80055a6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005574:	2b00      	cmp	r3, #0
 8005576:	d008      	beq.n	800558a <HAL_UART_IRQHandler+0x1d6>
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f99d 	bl	80058c2 <UART_Transmit_IT>
    return;
 8005588:	e00e      	b.n	80055a8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005590:	2b00      	cmp	r3, #0
 8005592:	d009      	beq.n	80055a8 <HAL_UART_IRQHandler+0x1f4>
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f9e5 	bl	800596e <UART_EndTransmit_IT>
    return;
 80055a4:	e000      	b.n	80055a8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80055a6:	bf00      	nop
  }
}
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	0800589b 	.word	0x0800589b

080055b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005630:	2b00      	cmp	r3, #0
 8005632:	d113      	bne.n	800565c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695a      	ldr	r2, [r3, #20]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005648:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005658:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800565a:	e002      	b.n	8005662 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f7ff ffa9 	bl	80055b4 <HAL_UART_TxCpltCallback>
}
 8005662:	bf00      	nop
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f7ff ffa5 	bl	80055c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800567e:	bf00      	nop
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d11e      	bne.n	80056e0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056b6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0201 	bic.w	r2, r2, #1
 80056c6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695a      	ldr	r2, [r3, #20]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056d6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f7ff ff7b 	bl	80055dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f7ff ff77 	bl	80055f0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005702:	bf00      	nop
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005726:	2b80      	cmp	r3, #128	; 0x80
 8005728:	bf0c      	ite	eq
 800572a:	2301      	moveq	r3, #1
 800572c:	2300      	movne	r3, #0
 800572e:	b2db      	uxtb	r3, r3
 8005730:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b21      	cmp	r3, #33	; 0x21
 800573c:	d108      	bne.n	8005750 <UART_DMAError+0x46>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2200      	movs	r2, #0
 8005748:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800574a:	68b8      	ldr	r0, [r7, #8]
 800574c:	f000 f871 	bl	8005832 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575a:	2b40      	cmp	r3, #64	; 0x40
 800575c:	bf0c      	ite	eq
 800575e:	2301      	moveq	r3, #1
 8005760:	2300      	movne	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b22      	cmp	r3, #34	; 0x22
 8005770:	d108      	bne.n	8005784 <UART_DMAError+0x7a>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2200      	movs	r2, #0
 800577c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800577e:	68b8      	ldr	r0, [r7, #8]
 8005780:	f000 f86d 	bl	800585e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005788:	f043 0210 	orr.w	r2, r3, #16
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005790:	68b8      	ldr	r0, [r7, #8]
 8005792:	f7ff ff37 	bl	8005604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	603b      	str	r3, [r7, #0]
 80057aa:	4613      	mov	r3, r2
 80057ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ae:	e02c      	b.n	800580a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057b6:	d028      	beq.n	800580a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <UART_WaitOnFlagUntilTimeout+0x30>
 80057be:	f7fd f883 	bl	80028c8 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d21d      	bcs.n	800580a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695a      	ldr	r2, [r3, #20]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0201 	bic.w	r2, r2, #1
 80057ec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e00f      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4013      	ands	r3, r2
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	429a      	cmp	r2, r3
 8005818:	bf0c      	ite	eq
 800581a:	2301      	moveq	r3, #1
 800581c:	2300      	movne	r3, #0
 800581e:	b2db      	uxtb	r3, r3
 8005820:	461a      	mov	r2, r3
 8005822:	79fb      	ldrb	r3, [r7, #7]
 8005824:	429a      	cmp	r2, r3
 8005826:	d0c3      	beq.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005848:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005874:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695a      	ldr	r2, [r3, #20]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0201 	bic.w	r2, r2, #1
 8005884:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f7ff fea5 	bl	8005604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ba:	bf00      	nop
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b085      	sub	sp, #20
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b21      	cmp	r3, #33	; 0x21
 80058d4:	d144      	bne.n	8005960 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058de:	d11a      	bne.n	8005916 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058f4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d105      	bne.n	800590a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	1c9a      	adds	r2, r3, #2
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	621a      	str	r2, [r3, #32]
 8005908:	e00e      	b.n	8005928 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	621a      	str	r2, [r3, #32]
 8005914:	e008      	b.n	8005928 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	1c59      	adds	r1, r3, #1
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6211      	str	r1, [r2, #32]
 8005920:	781a      	ldrb	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29b      	uxth	r3, r3
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	4619      	mov	r1, r3
 8005936:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10f      	bne.n	800595c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800594a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800595a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e000      	b.n	8005962 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
  }
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b082      	sub	sp, #8
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005984:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2220      	movs	r2, #32
 800598a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff fe10 	bl	80055b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b22      	cmp	r3, #34	; 0x22
 80059b0:	d171      	bne.n	8005a96 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ba:	d123      	bne.n	8005a04 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10e      	bne.n	80059e8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	1c9a      	adds	r2, r3, #2
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	629a      	str	r2, [r3, #40]	; 0x28
 80059e6:	e029      	b.n	8005a3c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	629a      	str	r2, [r3, #40]	; 0x28
 8005a02:	e01b      	b.n	8005a3c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6858      	ldr	r0, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a16:	1c59      	adds	r1, r3, #1
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6291      	str	r1, [r2, #40]	; 0x28
 8005a1c:	b2c2      	uxtb	r2, r0
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	e00c      	b.n	8005a3c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2e:	1c58      	adds	r0, r3, #1
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	6288      	str	r0, [r1, #40]	; 0x28
 8005a34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d120      	bne.n	8005a92 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0220 	bic.w	r2, r2, #32
 8005a5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695a      	ldr	r2, [r3, #20]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0201 	bic.w	r2, r2, #1
 8005a7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff fda7 	bl	80055dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e002      	b.n	8005a98 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e000      	b.n	8005a98 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005a96:	2302      	movs	r3, #2
  }
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aa4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005aba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005abe:	68d9      	ldr	r1, [r3, #12]
 8005ac0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	ea40 0301 	orr.w	r3, r0, r1
 8005aca:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005acc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8005aee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005afa:	f021 010c 	bic.w	r1, r1, #12
 8005afe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8005b08:	430b      	orrs	r3, r1
 8005b0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b1c:	6999      	ldr	r1, [r3, #24]
 8005b1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	ea40 0301 	orr.w	r3, r0, r1
 8005b28:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b34:	f040 824a 	bne.w	8005fcc <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4b96      	ldr	r3, [pc, #600]	; (8005d98 <UART_SetConfig+0x2f8>)
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d006      	beq.n	8005b52 <UART_SetConfig+0xb2>
 8005b44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	4b94      	ldr	r3, [pc, #592]	; (8005d9c <UART_SetConfig+0x2fc>)
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	f040 8129 	bne.w	8005da4 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b52:	f7fd ffc9 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 8005b56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8005b64:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8005b68:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8005b6c:	4622      	mov	r2, r4
 8005b6e:	462b      	mov	r3, r5
 8005b70:	1891      	adds	r1, r2, r2
 8005b72:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005b76:	415b      	adcs	r3, r3
 8005b78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b7c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8005b80:	4621      	mov	r1, r4
 8005b82:	1851      	adds	r1, r2, r1
 8005b84:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8005b88:	4629      	mov	r1, r5
 8005b8a:	414b      	adcs	r3, r1
 8005b8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	00cb      	lsls	r3, r1, #3
 8005ba0:	4641      	mov	r1, r8
 8005ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ba6:	4641      	mov	r1, r8
 8005ba8:	00ca      	lsls	r2, r1, #3
 8005baa:	4610      	mov	r0, r2
 8005bac:	4619      	mov	r1, r3
 8005bae:	4603      	mov	r3, r0
 8005bb0:	4622      	mov	r2, r4
 8005bb2:	189b      	adds	r3, r3, r2
 8005bb4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005bb8:	462b      	mov	r3, r5
 8005bba:	460a      	mov	r2, r1
 8005bbc:	eb42 0303 	adc.w	r3, r2, r3
 8005bc0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8005bc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005bd0:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8005bd4:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	18db      	adds	r3, r3, r3
 8005bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005be0:	4613      	mov	r3, r2
 8005be2:	eb42 0303 	adc.w	r3, r2, r3
 8005be6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bea:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8005bee:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005bf2:	f7fb f8c9 	bl	8000d88 <__aeabi_uldivmod>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4b69      	ldr	r3, [pc, #420]	; (8005da0 <UART_SetConfig+0x300>)
 8005bfc:	fba3 2302 	umull	r2, r3, r3, r2
 8005c00:	095b      	lsrs	r3, r3, #5
 8005c02:	011c      	lsls	r4, r3, #4
 8005c04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8005c0e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005c12:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8005c16:	4642      	mov	r2, r8
 8005c18:	464b      	mov	r3, r9
 8005c1a:	1891      	adds	r1, r2, r2
 8005c1c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005c20:	415b      	adcs	r3, r3
 8005c22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005c26:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8005c2a:	4641      	mov	r1, r8
 8005c2c:	1851      	adds	r1, r2, r1
 8005c2e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8005c32:	4649      	mov	r1, r9
 8005c34:	414b      	adcs	r3, r1
 8005c36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8005c46:	4659      	mov	r1, fp
 8005c48:	00cb      	lsls	r3, r1, #3
 8005c4a:	4651      	mov	r1, sl
 8005c4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c50:	4651      	mov	r1, sl
 8005c52:	00ca      	lsls	r2, r1, #3
 8005c54:	4610      	mov	r0, r2
 8005c56:	4619      	mov	r1, r3
 8005c58:	4603      	mov	r3, r0
 8005c5a:	4642      	mov	r2, r8
 8005c5c:	189b      	adds	r3, r3, r2
 8005c5e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8005c62:	464b      	mov	r3, r9
 8005c64:	460a      	mov	r2, r1
 8005c66:	eb42 0303 	adc.w	r3, r2, r3
 8005c6a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8005c6e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8005c7a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8005c7e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8005c82:	460b      	mov	r3, r1
 8005c84:	18db      	adds	r3, r3, r3
 8005c86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	eb42 0303 	adc.w	r3, r2, r3
 8005c90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c94:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8005c98:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8005c9c:	f7fb f874 	bl	8000d88 <__aeabi_uldivmod>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	4b3e      	ldr	r3, [pc, #248]	; (8005da0 <UART_SetConfig+0x300>)
 8005ca8:	fba3 2301 	umull	r2, r3, r3, r1
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	2264      	movs	r2, #100	; 0x64
 8005cb0:	fb02 f303 	mul.w	r3, r2, r3
 8005cb4:	1acb      	subs	r3, r1, r3
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005cbc:	4b38      	ldr	r3, [pc, #224]	; (8005da0 <UART_SetConfig+0x300>)
 8005cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cca:	441c      	add	r4, r3
 8005ccc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005cd6:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8005cda:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8005cde:	4642      	mov	r2, r8
 8005ce0:	464b      	mov	r3, r9
 8005ce2:	1891      	adds	r1, r2, r2
 8005ce4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8005ce8:	415b      	adcs	r3, r3
 8005cea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005cee:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8005cf2:	4641      	mov	r1, r8
 8005cf4:	1851      	adds	r1, r2, r1
 8005cf6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	414b      	adcs	r3, r1
 8005cfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d02:	f04f 0200 	mov.w	r2, #0
 8005d06:	f04f 0300 	mov.w	r3, #0
 8005d0a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8005d0e:	4659      	mov	r1, fp
 8005d10:	00cb      	lsls	r3, r1, #3
 8005d12:	4651      	mov	r1, sl
 8005d14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d18:	4651      	mov	r1, sl
 8005d1a:	00ca      	lsls	r2, r1, #3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4603      	mov	r3, r0
 8005d22:	4642      	mov	r2, r8
 8005d24:	189b      	adds	r3, r3, r2
 8005d26:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8005d2a:	464b      	mov	r3, r9
 8005d2c:	460a      	mov	r2, r1
 8005d2e:	eb42 0303 	adc.w	r3, r2, r3
 8005d32:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005d36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8005d42:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8005d46:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	18db      	adds	r3, r3, r3
 8005d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d52:	4613      	mov	r3, r2
 8005d54:	eb42 0303 	adc.w	r3, r2, r3
 8005d58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d5c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005d60:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8005d64:	f7fb f810 	bl	8000d88 <__aeabi_uldivmod>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <UART_SetConfig+0x300>)
 8005d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	2164      	movs	r1, #100	; 0x64
 8005d76:	fb01 f303 	mul.w	r3, r1, r3
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	3332      	adds	r3, #50	; 0x32
 8005d80:	4a07      	ldr	r2, [pc, #28]	; (8005da0 <UART_SetConfig+0x300>)
 8005d82:	fba2 2303 	umull	r2, r3, r2, r3
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	f003 0207 	and.w	r2, r3, #7
 8005d8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4422      	add	r2, r4
 8005d94:	609a      	str	r2, [r3, #8]
 8005d96:	e349      	b.n	800642c <UART_SetConfig+0x98c>
 8005d98:	40011000 	.word	0x40011000
 8005d9c:	40011400 	.word	0x40011400
 8005da0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005da4:	f7fd fe8c 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8005da8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005db0:	2200      	movs	r2, #0
 8005db2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005db6:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8005dba:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8005dbe:	4622      	mov	r2, r4
 8005dc0:	462b      	mov	r3, r5
 8005dc2:	1891      	adds	r1, r2, r2
 8005dc4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005dc8:	415b      	adcs	r3, r3
 8005dca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005dce:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	eb12 0a01 	adds.w	sl, r2, r1
 8005dd8:	4629      	mov	r1, r5
 8005dda:	eb43 0b01 	adc.w	fp, r3, r1
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	f04f 0300 	mov.w	r3, #0
 8005de6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005df2:	4692      	mov	sl, r2
 8005df4:	469b      	mov	fp, r3
 8005df6:	4623      	mov	r3, r4
 8005df8:	eb1a 0303 	adds.w	r3, sl, r3
 8005dfc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005e00:	462b      	mov	r3, r5
 8005e02:	eb4b 0303 	adc.w	r3, fp, r3
 8005e06:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005e0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8005e16:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8005e1a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8005e1e:	460b      	mov	r3, r1
 8005e20:	18db      	adds	r3, r3, r3
 8005e22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e26:	4613      	mov	r3, r2
 8005e28:	eb42 0303 	adc.w	r3, r2, r3
 8005e2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e30:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005e34:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8005e38:	f7fa ffa6 	bl	8000d88 <__aeabi_uldivmod>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4b61      	ldr	r3, [pc, #388]	; (8005fc8 <UART_SetConfig+0x528>)
 8005e42:	fba3 2302 	umull	r2, r3, r3, r2
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	011c      	lsls	r4, r3, #4
 8005e4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8005e54:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8005e58:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	464b      	mov	r3, r9
 8005e60:	1891      	adds	r1, r2, r2
 8005e62:	67b9      	str	r1, [r7, #120]	; 0x78
 8005e64:	415b      	adcs	r3, r3
 8005e66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e68:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005e6c:	4641      	mov	r1, r8
 8005e6e:	1851      	adds	r1, r2, r1
 8005e70:	6739      	str	r1, [r7, #112]	; 0x70
 8005e72:	4649      	mov	r1, r9
 8005e74:	414b      	adcs	r3, r1
 8005e76:	677b      	str	r3, [r7, #116]	; 0x74
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8005e84:	4659      	mov	r1, fp
 8005e86:	00cb      	lsls	r3, r1, #3
 8005e88:	4651      	mov	r1, sl
 8005e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e8e:	4651      	mov	r1, sl
 8005e90:	00ca      	lsls	r2, r1, #3
 8005e92:	4610      	mov	r0, r2
 8005e94:	4619      	mov	r1, r3
 8005e96:	4603      	mov	r3, r0
 8005e98:	4642      	mov	r2, r8
 8005e9a:	189b      	adds	r3, r3, r2
 8005e9c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	460a      	mov	r2, r1
 8005ea4:	eb42 0303 	adc.w	r3, r2, r3
 8005ea8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8005eac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005eb8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8005ebc:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	18db      	adds	r3, r3, r3
 8005ec4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	eb42 0303 	adc.w	r3, r2, r3
 8005ecc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ece:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005ed2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005ed6:	f7fa ff57 	bl	8000d88 <__aeabi_uldivmod>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	4b39      	ldr	r3, [pc, #228]	; (8005fc8 <UART_SetConfig+0x528>)
 8005ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	2264      	movs	r2, #100	; 0x64
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	1acb      	subs	r3, r1, r3
 8005ef0:	00db      	lsls	r3, r3, #3
 8005ef2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ef6:	4b34      	ldr	r3, [pc, #208]	; (8005fc8 <UART_SetConfig+0x528>)
 8005ef8:	fba3 2302 	umull	r2, r3, r3, r2
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f04:	441c      	add	r4, r3
 8005f06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8005f10:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005f14:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8005f18:	4642      	mov	r2, r8
 8005f1a:	464b      	mov	r3, r9
 8005f1c:	1891      	adds	r1, r2, r2
 8005f1e:	6639      	str	r1, [r7, #96]	; 0x60
 8005f20:	415b      	adcs	r3, r3
 8005f22:	667b      	str	r3, [r7, #100]	; 0x64
 8005f24:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005f28:	4641      	mov	r1, r8
 8005f2a:	1851      	adds	r1, r2, r1
 8005f2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f2e:	4649      	mov	r1, r9
 8005f30:	414b      	adcs	r3, r1
 8005f32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8005f40:	4659      	mov	r1, fp
 8005f42:	00cb      	lsls	r3, r1, #3
 8005f44:	4651      	mov	r1, sl
 8005f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f4a:	4651      	mov	r1, sl
 8005f4c:	00ca      	lsls	r2, r1, #3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	4619      	mov	r1, r3
 8005f52:	4603      	mov	r3, r0
 8005f54:	4642      	mov	r2, r8
 8005f56:	189b      	adds	r3, r3, r2
 8005f58:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8005f5c:	464b      	mov	r3, r9
 8005f5e:	460a      	mov	r2, r1
 8005f60:	eb42 0303 	adc.w	r3, r2, r3
 8005f64:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005f68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8005f74:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8005f78:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	18db      	adds	r3, r3, r3
 8005f80:	653b      	str	r3, [r7, #80]	; 0x50
 8005f82:	4613      	mov	r3, r2
 8005f84:	eb42 0303 	adc.w	r3, r2, r3
 8005f88:	657b      	str	r3, [r7, #84]	; 0x54
 8005f8a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f8e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8005f92:	f7fa fef9 	bl	8000d88 <__aeabi_uldivmod>
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4b0b      	ldr	r3, [pc, #44]	; (8005fc8 <UART_SetConfig+0x528>)
 8005f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa0:	095b      	lsrs	r3, r3, #5
 8005fa2:	2164      	movs	r1, #100	; 0x64
 8005fa4:	fb01 f303 	mul.w	r3, r1, r3
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	3332      	adds	r3, #50	; 0x32
 8005fae:	4a06      	ldr	r2, [pc, #24]	; (8005fc8 <UART_SetConfig+0x528>)
 8005fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb4:	095b      	lsrs	r3, r3, #5
 8005fb6:	f003 0207 	and.w	r2, r3, #7
 8005fba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4422      	add	r2, r4
 8005fc2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005fc4:	e232      	b.n	800642c <UART_SetConfig+0x98c>
 8005fc6:	bf00      	nop
 8005fc8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fcc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	4b8d      	ldr	r3, [pc, #564]	; (8006208 <UART_SetConfig+0x768>)
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d006      	beq.n	8005fe6 <UART_SetConfig+0x546>
 8005fd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b8b      	ldr	r3, [pc, #556]	; (800620c <UART_SetConfig+0x76c>)
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	f040 8117 	bne.w	8006214 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fe6:	f7fd fd7f 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 8005fea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8005ff8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8005ffc:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8006000:	4622      	mov	r2, r4
 8006002:	462b      	mov	r3, r5
 8006004:	1891      	adds	r1, r2, r2
 8006006:	64b9      	str	r1, [r7, #72]	; 0x48
 8006008:	415b      	adcs	r3, r3
 800600a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800600c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006010:	4621      	mov	r1, r4
 8006012:	eb12 0801 	adds.w	r8, r2, r1
 8006016:	4629      	mov	r1, r5
 8006018:	eb43 0901 	adc.w	r9, r3, r1
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006028:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800602c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006030:	4690      	mov	r8, r2
 8006032:	4699      	mov	r9, r3
 8006034:	4623      	mov	r3, r4
 8006036:	eb18 0303 	adds.w	r3, r8, r3
 800603a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800603e:	462b      	mov	r3, r5
 8006040:	eb49 0303 	adc.w	r3, r9, r3
 8006044:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8006048:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006054:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8006058:	f04f 0200 	mov.w	r2, #0
 800605c:	f04f 0300 	mov.w	r3, #0
 8006060:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8006064:	4629      	mov	r1, r5
 8006066:	008b      	lsls	r3, r1, #2
 8006068:	4621      	mov	r1, r4
 800606a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800606e:	4621      	mov	r1, r4
 8006070:	008a      	lsls	r2, r1, #2
 8006072:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8006076:	f7fa fe87 	bl	8000d88 <__aeabi_uldivmod>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4b64      	ldr	r3, [pc, #400]	; (8006210 <UART_SetConfig+0x770>)
 8006080:	fba3 2302 	umull	r2, r3, r3, r2
 8006084:	095b      	lsrs	r3, r3, #5
 8006086:	011c      	lsls	r4, r3, #4
 8006088:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800608c:	2200      	movs	r2, #0
 800608e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8006092:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006096:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 800609a:	4642      	mov	r2, r8
 800609c:	464b      	mov	r3, r9
 800609e:	1891      	adds	r1, r2, r2
 80060a0:	6439      	str	r1, [r7, #64]	; 0x40
 80060a2:	415b      	adcs	r3, r3
 80060a4:	647b      	str	r3, [r7, #68]	; 0x44
 80060a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060aa:	4641      	mov	r1, r8
 80060ac:	1851      	adds	r1, r2, r1
 80060ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80060b0:	4649      	mov	r1, r9
 80060b2:	414b      	adcs	r3, r1
 80060b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80060c2:	4659      	mov	r1, fp
 80060c4:	00cb      	lsls	r3, r1, #3
 80060c6:	4651      	mov	r1, sl
 80060c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060cc:	4651      	mov	r1, sl
 80060ce:	00ca      	lsls	r2, r1, #3
 80060d0:	4610      	mov	r0, r2
 80060d2:	4619      	mov	r1, r3
 80060d4:	4603      	mov	r3, r0
 80060d6:	4642      	mov	r2, r8
 80060d8:	189b      	adds	r3, r3, r2
 80060da:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80060de:	464b      	mov	r3, r9
 80060e0:	460a      	mov	r2, r1
 80060e2:	eb42 0303 	adc.w	r3, r2, r3
 80060e6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80060ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80060f6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8006106:	4649      	mov	r1, r9
 8006108:	008b      	lsls	r3, r1, #2
 800610a:	4641      	mov	r1, r8
 800610c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006110:	4641      	mov	r1, r8
 8006112:	008a      	lsls	r2, r1, #2
 8006114:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8006118:	f7fa fe36 	bl	8000d88 <__aeabi_uldivmod>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4b3b      	ldr	r3, [pc, #236]	; (8006210 <UART_SetConfig+0x770>)
 8006122:	fba3 1302 	umull	r1, r3, r3, r2
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	2164      	movs	r1, #100	; 0x64
 800612a:	fb01 f303 	mul.w	r3, r1, r3
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	3332      	adds	r3, #50	; 0x32
 8006134:	4a36      	ldr	r2, [pc, #216]	; (8006210 <UART_SetConfig+0x770>)
 8006136:	fba2 2303 	umull	r2, r3, r2, r3
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006140:	441c      	add	r4, r3
 8006142:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006146:	2200      	movs	r2, #0
 8006148:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800614c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8006150:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8006154:	4642      	mov	r2, r8
 8006156:	464b      	mov	r3, r9
 8006158:	1891      	adds	r1, r2, r2
 800615a:	6339      	str	r1, [r7, #48]	; 0x30
 800615c:	415b      	adcs	r3, r3
 800615e:	637b      	str	r3, [r7, #52]	; 0x34
 8006160:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006164:	4641      	mov	r1, r8
 8006166:	1851      	adds	r1, r2, r1
 8006168:	62b9      	str	r1, [r7, #40]	; 0x28
 800616a:	4649      	mov	r1, r9
 800616c:	414b      	adcs	r3, r1
 800616e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800617c:	4659      	mov	r1, fp
 800617e:	00cb      	lsls	r3, r1, #3
 8006180:	4651      	mov	r1, sl
 8006182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006186:	4651      	mov	r1, sl
 8006188:	00ca      	lsls	r2, r1, #3
 800618a:	4610      	mov	r0, r2
 800618c:	4619      	mov	r1, r3
 800618e:	4603      	mov	r3, r0
 8006190:	4642      	mov	r2, r8
 8006192:	189b      	adds	r3, r3, r2
 8006194:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006198:	464b      	mov	r3, r9
 800619a:	460a      	mov	r2, r1
 800619c:	eb42 0303 	adc.w	r3, r2, r3
 80061a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80061a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80061b0:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	f04f 0300 	mov.w	r3, #0
 80061bc:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80061c0:	4649      	mov	r1, r9
 80061c2:	008b      	lsls	r3, r1, #2
 80061c4:	4641      	mov	r1, r8
 80061c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ca:	4641      	mov	r1, r8
 80061cc:	008a      	lsls	r2, r1, #2
 80061ce:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80061d2:	f7fa fdd9 	bl	8000d88 <__aeabi_uldivmod>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <UART_SetConfig+0x770>)
 80061dc:	fba3 1302 	umull	r1, r3, r3, r2
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	2164      	movs	r1, #100	; 0x64
 80061e4:	fb01 f303 	mul.w	r3, r1, r3
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	3332      	adds	r3, #50	; 0x32
 80061ee:	4a08      	ldr	r2, [pc, #32]	; (8006210 <UART_SetConfig+0x770>)
 80061f0:	fba2 2303 	umull	r2, r3, r2, r3
 80061f4:	095b      	lsrs	r3, r3, #5
 80061f6:	f003 020f 	and.w	r2, r3, #15
 80061fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4422      	add	r2, r4
 8006202:	609a      	str	r2, [r3, #8]
 8006204:	e112      	b.n	800642c <UART_SetConfig+0x98c>
 8006206:	bf00      	nop
 8006208:	40011000 	.word	0x40011000
 800620c:	40011400 	.word	0x40011400
 8006210:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8006214:	f7fd fc54 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8006218:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800621c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006220:	2200      	movs	r2, #0
 8006222:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006226:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800622a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800622e:	4642      	mov	r2, r8
 8006230:	464b      	mov	r3, r9
 8006232:	1891      	adds	r1, r2, r2
 8006234:	6239      	str	r1, [r7, #32]
 8006236:	415b      	adcs	r3, r3
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
 800623a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800623e:	4641      	mov	r1, r8
 8006240:	1854      	adds	r4, r2, r1
 8006242:	4649      	mov	r1, r9
 8006244:	eb43 0501 	adc.w	r5, r3, r1
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	00eb      	lsls	r3, r5, #3
 8006252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006256:	00e2      	lsls	r2, r4, #3
 8006258:	4614      	mov	r4, r2
 800625a:	461d      	mov	r5, r3
 800625c:	4643      	mov	r3, r8
 800625e:	18e3      	adds	r3, r4, r3
 8006260:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006264:	464b      	mov	r3, r9
 8006266:	eb45 0303 	adc.w	r3, r5, r3
 800626a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800626e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800627a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800628a:	4629      	mov	r1, r5
 800628c:	008b      	lsls	r3, r1, #2
 800628e:	4621      	mov	r1, r4
 8006290:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006294:	4621      	mov	r1, r4
 8006296:	008a      	lsls	r2, r1, #2
 8006298:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800629c:	f7fa fd74 	bl	8000d88 <__aeabi_uldivmod>
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	4b64      	ldr	r3, [pc, #400]	; (8006438 <UART_SetConfig+0x998>)
 80062a6:	fba3 2302 	umull	r2, r3, r3, r2
 80062aa:	095b      	lsrs	r3, r3, #5
 80062ac:	011c      	lsls	r4, r3, #4
 80062ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062b8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80062bc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80062c0:	4642      	mov	r2, r8
 80062c2:	464b      	mov	r3, r9
 80062c4:	1891      	adds	r1, r2, r2
 80062c6:	61b9      	str	r1, [r7, #24]
 80062c8:	415b      	adcs	r3, r3
 80062ca:	61fb      	str	r3, [r7, #28]
 80062cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062d0:	4641      	mov	r1, r8
 80062d2:	1851      	adds	r1, r2, r1
 80062d4:	6139      	str	r1, [r7, #16]
 80062d6:	4649      	mov	r1, r9
 80062d8:	414b      	adcs	r3, r1
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	f04f 0200 	mov.w	r2, #0
 80062e0:	f04f 0300 	mov.w	r3, #0
 80062e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062e8:	4659      	mov	r1, fp
 80062ea:	00cb      	lsls	r3, r1, #3
 80062ec:	4651      	mov	r1, sl
 80062ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062f2:	4651      	mov	r1, sl
 80062f4:	00ca      	lsls	r2, r1, #3
 80062f6:	4610      	mov	r0, r2
 80062f8:	4619      	mov	r1, r3
 80062fa:	4603      	mov	r3, r0
 80062fc:	4642      	mov	r2, r8
 80062fe:	189b      	adds	r3, r3, r2
 8006300:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006304:	464b      	mov	r3, r9
 8006306:	460a      	mov	r2, r1
 8006308:	eb42 0303 	adc.w	r3, r2, r3
 800630c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006310:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800631c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800632c:	4649      	mov	r1, r9
 800632e:	008b      	lsls	r3, r1, #2
 8006330:	4641      	mov	r1, r8
 8006332:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006336:	4641      	mov	r1, r8
 8006338:	008a      	lsls	r2, r1, #2
 800633a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800633e:	f7fa fd23 	bl	8000d88 <__aeabi_uldivmod>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	4b3c      	ldr	r3, [pc, #240]	; (8006438 <UART_SetConfig+0x998>)
 8006348:	fba3 1302 	umull	r1, r3, r3, r2
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	2164      	movs	r1, #100	; 0x64
 8006350:	fb01 f303 	mul.w	r3, r1, r3
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	3332      	adds	r3, #50	; 0x32
 800635a:	4a37      	ldr	r2, [pc, #220]	; (8006438 <UART_SetConfig+0x998>)
 800635c:	fba2 2303 	umull	r2, r3, r2, r3
 8006360:	095b      	lsrs	r3, r3, #5
 8006362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006366:	441c      	add	r4, r3
 8006368:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800636c:	2200      	movs	r2, #0
 800636e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006372:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006376:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800637a:	4642      	mov	r2, r8
 800637c:	464b      	mov	r3, r9
 800637e:	1891      	adds	r1, r2, r2
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	415b      	adcs	r3, r3
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800638a:	4641      	mov	r1, r8
 800638c:	1851      	adds	r1, r2, r1
 800638e:	6039      	str	r1, [r7, #0]
 8006390:	4649      	mov	r1, r9
 8006392:	414b      	adcs	r3, r1
 8006394:	607b      	str	r3, [r7, #4]
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063a2:	4659      	mov	r1, fp
 80063a4:	00cb      	lsls	r3, r1, #3
 80063a6:	4651      	mov	r1, sl
 80063a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ac:	4651      	mov	r1, sl
 80063ae:	00ca      	lsls	r2, r1, #3
 80063b0:	4610      	mov	r0, r2
 80063b2:	4619      	mov	r1, r3
 80063b4:	4603      	mov	r3, r0
 80063b6:	4642      	mov	r2, r8
 80063b8:	189b      	adds	r3, r3, r2
 80063ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063be:	464b      	mov	r3, r9
 80063c0:	460a      	mov	r2, r1
 80063c2:	eb42 0303 	adc.w	r3, r2, r3
 80063c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80063e6:	4649      	mov	r1, r9
 80063e8:	008b      	lsls	r3, r1, #2
 80063ea:	4641      	mov	r1, r8
 80063ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063f0:	4641      	mov	r1, r8
 80063f2:	008a      	lsls	r2, r1, #2
 80063f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063f8:	f7fa fcc6 	bl	8000d88 <__aeabi_uldivmod>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4b0d      	ldr	r3, [pc, #52]	; (8006438 <UART_SetConfig+0x998>)
 8006402:	fba3 1302 	umull	r1, r3, r3, r2
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	2164      	movs	r1, #100	; 0x64
 800640a:	fb01 f303 	mul.w	r3, r1, r3
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	3332      	adds	r3, #50	; 0x32
 8006414:	4a08      	ldr	r2, [pc, #32]	; (8006438 <UART_SetConfig+0x998>)
 8006416:	fba2 2303 	umull	r2, r3, r2, r3
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	f003 020f 	and.w	r2, r3, #15
 8006420:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4422      	add	r2, r4
 8006428:	609a      	str	r2, [r3, #8]
}
 800642a:	e7ff      	b.n	800642c <UART_SetConfig+0x98c>
 800642c:	bf00      	nop
 800642e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006432:	46bd      	mov	sp, r7
 8006434:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006438:	51eb851f 	.word	0x51eb851f

0800643c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800643c:	b084      	sub	sp, #16
 800643e:	b580      	push	{r7, lr}
 8006440:	b084      	sub	sp, #16
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	f107 001c 	add.w	r0, r7, #28
 800644a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	2b01      	cmp	r3, #1
 8006452:	d122      	bne.n	800649a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800647c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647e:	2b01      	cmp	r3, #1
 8006480:	d105      	bne.n	800648e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fa48 	bl	8006924 <USB_CoreReset>
 8006494:	4603      	mov	r3, r0
 8006496:	73fb      	strb	r3, [r7, #15]
 8006498:	e01a      	b.n	80064d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fa3c 	bl	8006924 <USB_CoreReset>
 80064ac:	4603      	mov	r3, r0
 80064ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d106      	bne.n	80064c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	639a      	str	r2, [r3, #56]	; 0x38
 80064c2:	e005      	b.n	80064d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d10b      	bne.n	80064ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f043 0206 	orr.w	r2, r3, #6
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f043 0220 	orr.w	r2, r3, #32
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064fa:	b004      	add	sp, #16
 80064fc:	4770      	bx	lr

080064fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f023 0201 	bic.w	r2, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d106      	bne.n	800654c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60da      	str	r2, [r3, #12]
 800654a:	e00b      	b.n	8006564 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d106      	bne.n	8006560 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60da      	str	r2, [r3, #12]
 800655e:	e001      	b.n	8006564 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e003      	b.n	800656c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006564:	2032      	movs	r0, #50	; 0x32
 8006566:	f7fc f9bb 	bl	80028e0 <HAL_Delay>

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006574:	b084      	sub	sp, #16
 8006576:	b580      	push	{r7, lr}
 8006578:	b086      	sub	sp, #24
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	e009      	b.n	80065a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	3340      	adds	r3, #64	; 0x40
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	2200      	movs	r2, #0
 80065a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	3301      	adds	r3, #1
 80065a6:	613b      	str	r3, [r7, #16]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	2b0e      	cmp	r3, #14
 80065ac:	d9f2      	bls.n	8006594 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d11c      	bne.n	80065ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065c2:	f043 0302 	orr.w	r3, r3, #2
 80065c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	e005      	b.n	80065fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006600:	461a      	mov	r2, r3
 8006602:	2300      	movs	r3, #0
 8006604:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660c:	4619      	mov	r1, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006614:	461a      	mov	r2, r3
 8006616:	680b      	ldr	r3, [r1, #0]
 8006618:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	2b01      	cmp	r3, #1
 800661e:	d10c      	bne.n	800663a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006622:	2b00      	cmp	r3, #0
 8006624:	d104      	bne.n	8006630 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006626:	2100      	movs	r1, #0
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f949 	bl	80068c0 <USB_SetDevSpeed>
 800662e:	e008      	b.n	8006642 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006630:	2101      	movs	r1, #1
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f944 	bl	80068c0 <USB_SetDevSpeed>
 8006638:	e003      	b.n	8006642 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800663a:	2103      	movs	r1, #3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f93f 	bl	80068c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006642:	2110      	movs	r1, #16
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f8f3 	bl	8006830 <USB_FlushTxFifo>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f911 	bl	800687c <USB_FlushRxFifo>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666a:	461a      	mov	r2, r3
 800666c:	2300      	movs	r3, #0
 800666e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006676:	461a      	mov	r2, r3
 8006678:	2300      	movs	r3, #0
 800667a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006682:	461a      	mov	r2, r3
 8006684:	2300      	movs	r3, #0
 8006686:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006688:	2300      	movs	r3, #0
 800668a:	613b      	str	r3, [r7, #16]
 800668c:	e043      	b.n	8006716 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066a4:	d118      	bne.n	80066d8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10a      	bne.n	80066c2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b8:	461a      	mov	r2, r3
 80066ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	e013      	b.n	80066ea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ce:	461a      	mov	r2, r3
 80066d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	e008      	b.n	80066ea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e4:	461a      	mov	r2, r3
 80066e6:	2300      	movs	r3, #0
 80066e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f6:	461a      	mov	r2, r3
 80066f8:	2300      	movs	r3, #0
 80066fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006708:	461a      	mov	r2, r3
 800670a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800670e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	3301      	adds	r3, #1
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	429a      	cmp	r2, r3
 800671c:	d3b7      	bcc.n	800668e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800671e:	2300      	movs	r3, #0
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	e043      	b.n	80067ac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800673a:	d118      	bne.n	800676e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10a      	bne.n	8006758 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674e:	461a      	mov	r2, r3
 8006750:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	e013      	b.n	8006780 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006764:	461a      	mov	r2, r3
 8006766:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	e008      	b.n	8006780 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677a:	461a      	mov	r2, r3
 800677c:	2300      	movs	r3, #0
 800677e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678c:	461a      	mov	r2, r3
 800678e:	2300      	movs	r3, #0
 8006790:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679e:	461a      	mov	r2, r3
 80067a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	3301      	adds	r3, #1
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d3b7      	bcc.n	8006724 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80067d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d105      	bne.n	80067e8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	f043 0210 	orr.w	r2, r3, #16
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	699a      	ldr	r2, [r3, #24]
 80067ec:	4b0f      	ldr	r3, [pc, #60]	; (800682c <USB_DevInit+0x2b8>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d005      	beq.n	8006806 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	f043 0208 	orr.w	r2, r3, #8
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006808:	2b01      	cmp	r3, #1
 800680a:	d107      	bne.n	800681c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006814:	f043 0304 	orr.w	r3, r3, #4
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800681c:	7dfb      	ldrb	r3, [r7, #23]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006828:	b004      	add	sp, #16
 800682a:	4770      	bx	lr
 800682c:	803c3800 	.word	0x803c3800

08006830 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	019b      	lsls	r3, r3, #6
 8006842:	f043 0220 	orr.w	r2, r3, #32
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3301      	adds	r3, #1
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4a09      	ldr	r2, [pc, #36]	; (8006878 <USB_FlushTxFifo+0x48>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d901      	bls.n	800685c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e006      	b.n	800686a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f003 0320 	and.w	r3, r3, #32
 8006864:	2b20      	cmp	r3, #32
 8006866:	d0f0      	beq.n	800684a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	00030d40 	.word	0x00030d40

0800687c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2210      	movs	r2, #16
 800688c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3301      	adds	r3, #1
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4a09      	ldr	r2, [pc, #36]	; (80068bc <USB_FlushRxFifo+0x40>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d901      	bls.n	80068a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e006      	b.n	80068ae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f003 0310 	and.w	r3, r3, #16
 80068a8:	2b10      	cmp	r3, #16
 80068aa:	d0f0      	beq.n	800688e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	00030d40 	.word	0x00030d40

080068c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	68f9      	ldr	r1, [r7, #12]
 80068dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068e0:	4313      	orrs	r3, r2
 80068e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800690c:	f043 0302 	orr.w	r3, r3, #2
 8006910:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006912:	2003      	movs	r0, #3
 8006914:	f7fb ffe4 	bl	80028e0 <HAL_Delay>

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3301      	adds	r3, #1
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4a13      	ldr	r2, [pc, #76]	; (8006988 <USB_CoreReset+0x64>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d901      	bls.n	8006942 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e01b      	b.n	800697a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	daf2      	bge.n	8006930 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f043 0201 	orr.w	r2, r3, #1
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3301      	adds	r3, #1
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4a09      	ldr	r2, [pc, #36]	; (8006988 <USB_CoreReset+0x64>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d901      	bls.n	800696c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e006      	b.n	800697a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b01      	cmp	r3, #1
 8006976:	d0f0      	beq.n	800695a <USB_CoreReset+0x36>

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	00030d40 	.word	0x00030d40

0800698c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006990:	bf00      	nop
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
	...

0800699c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069a2:	f3ef 8305 	mrs	r3, IPSR
 80069a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80069a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10f      	bne.n	80069ce <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ae:	f3ef 8310 	mrs	r3, PRIMASK
 80069b2:	607b      	str	r3, [r7, #4]
  return(result);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d105      	bne.n	80069c6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069ba:	f3ef 8311 	mrs	r3, BASEPRI
 80069be:	603b      	str	r3, [r7, #0]
  return(result);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d007      	beq.n	80069d6 <osKernelInitialize+0x3a>
 80069c6:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <osKernelInitialize+0x64>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d103      	bne.n	80069d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80069ce:	f06f 0305 	mvn.w	r3, #5
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	e00c      	b.n	80069f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80069d6:	4b0a      	ldr	r3, [pc, #40]	; (8006a00 <osKernelInitialize+0x64>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d105      	bne.n	80069ea <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80069de:	4b08      	ldr	r3, [pc, #32]	; (8006a00 <osKernelInitialize+0x64>)
 80069e0:	2201      	movs	r2, #1
 80069e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	e002      	b.n	80069f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80069ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80069f0:	68fb      	ldr	r3, [r7, #12]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	2000d3bc 	.word	0x2000d3bc

08006a04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a0a:	f3ef 8305 	mrs	r3, IPSR
 8006a0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10f      	bne.n	8006a36 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a16:	f3ef 8310 	mrs	r3, PRIMASK
 8006a1a:	607b      	str	r3, [r7, #4]
  return(result);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d105      	bne.n	8006a2e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a22:	f3ef 8311 	mrs	r3, BASEPRI
 8006a26:	603b      	str	r3, [r7, #0]
  return(result);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d007      	beq.n	8006a3e <osKernelStart+0x3a>
 8006a2e:	4b0f      	ldr	r3, [pc, #60]	; (8006a6c <osKernelStart+0x68>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d103      	bne.n	8006a3e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006a36:	f06f 0305 	mvn.w	r3, #5
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	e010      	b.n	8006a60 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a3e:	4b0b      	ldr	r3, [pc, #44]	; (8006a6c <osKernelStart+0x68>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d109      	bne.n	8006a5a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a46:	f7ff ffa1 	bl	800698c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a4a:	4b08      	ldr	r3, [pc, #32]	; (8006a6c <osKernelStart+0x68>)
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a50:	f001 fb24 	bl	800809c <vTaskStartScheduler>
      stat = osOK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	e002      	b.n	8006a60 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006a60:	68fb      	ldr	r3, [r7, #12]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	2000d3bc 	.word	0x2000d3bc

08006a70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b090      	sub	sp, #64	; 0x40
 8006a74:	af04      	add	r7, sp, #16
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a80:	f3ef 8305 	mrs	r3, IPSR
 8006a84:	61fb      	str	r3, [r7, #28]
  return(result);
 8006a86:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f040 808f 	bne.w	8006bac <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a92:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d105      	bne.n	8006aa6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a9e:	617b      	str	r3, [r7, #20]
  return(result);
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <osThreadNew+0x3e>
 8006aa6:	4b44      	ldr	r3, [pc, #272]	; (8006bb8 <osThreadNew+0x148>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d07e      	beq.n	8006bac <osThreadNew+0x13c>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d07b      	beq.n	8006bac <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006ab4:	2380      	movs	r3, #128	; 0x80
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006ab8:	2318      	movs	r3, #24
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ac4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d045      	beq.n	8006b58 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <osThreadNew+0x6a>
        name = attr->name;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d002      	beq.n	8006ae8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d008      	beq.n	8006b00 <osThreadNew+0x90>
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	2b38      	cmp	r3, #56	; 0x38
 8006af2:	d805      	bhi.n	8006b00 <osThreadNew+0x90>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <osThreadNew+0x94>
        return (NULL);
 8006b00:	2300      	movs	r3, #0
 8006b02:	e054      	b.n	8006bae <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d003      	beq.n	8006b14 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	089b      	lsrs	r3, r3, #2
 8006b12:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00e      	beq.n	8006b3a <osThreadNew+0xca>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	2b63      	cmp	r3, #99	; 0x63
 8006b22:	d90a      	bls.n	8006b3a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d006      	beq.n	8006b3a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <osThreadNew+0xca>
        mem = 1;
 8006b34:	2301      	movs	r3, #1
 8006b36:	623b      	str	r3, [r7, #32]
 8006b38:	e010      	b.n	8006b5c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10c      	bne.n	8006b5c <osThreadNew+0xec>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d108      	bne.n	8006b5c <osThreadNew+0xec>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d104      	bne.n	8006b5c <osThreadNew+0xec>
          mem = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	623b      	str	r3, [r7, #32]
 8006b56:	e001      	b.n	8006b5c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d110      	bne.n	8006b84 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b6a:	9202      	str	r2, [sp, #8]
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 ffdf 	bl	8007b3c <xTaskCreateStatic>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	613b      	str	r3, [r7, #16]
 8006b82:	e013      	b.n	8006bac <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d110      	bne.n	8006bac <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	f107 0310 	add.w	r3, r7, #16
 8006b92:	9301      	str	r3, [sp, #4]
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f001 f82a 	bl	8007bf6 <xTaskCreate>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d001      	beq.n	8006bac <osThreadNew+0x13c>
          hTask = NULL;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006bac:	693b      	ldr	r3, [r7, #16]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3730      	adds	r7, #48	; 0x30
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	2000d3bc 	.word	0x2000d3bc

08006bbc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bc4:	f3ef 8305 	mrs	r3, IPSR
 8006bc8:	613b      	str	r3, [r7, #16]
  return(result);
 8006bca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10f      	bne.n	8006bf0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8006bd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d105      	bne.n	8006be8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bdc:	f3ef 8311 	mrs	r3, BASEPRI
 8006be0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d007      	beq.n	8006bf8 <osDelay+0x3c>
 8006be8:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <osDelay+0x58>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d103      	bne.n	8006bf8 <osDelay+0x3c>
    stat = osErrorISR;
 8006bf0:	f06f 0305 	mvn.w	r3, #5
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	e007      	b.n	8006c08 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 f9b0 	bl	8007f68 <vTaskDelay>
    }
  }

  return (stat);
 8006c08:	697b      	ldr	r3, [r7, #20]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	2000d3bc 	.word	0x2000d3bc

08006c18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4a07      	ldr	r2, [pc, #28]	; (8006c44 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	4a06      	ldr	r2, [pc, #24]	; (8006c48 <vApplicationGetIdleTaskMemory+0x30>)
 8006c2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2280      	movs	r2, #128	; 0x80
 8006c34:	601a      	str	r2, [r3, #0]
}
 8006c36:	bf00      	nop
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	2000d3c0 	.word	0x2000d3c0
 8006c48:	2000d424 	.word	0x2000d424

08006c4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4a07      	ldr	r2, [pc, #28]	; (8006c78 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	4a06      	ldr	r2, [pc, #24]	; (8006c7c <vApplicationGetTimerTaskMemory+0x30>)
 8006c62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c6a:	601a      	str	r2, [r3, #0]
}
 8006c6c:	bf00      	nop
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	2000d624 	.word	0x2000d624
 8006c7c:	2000d688 	.word	0x2000d688

08006c80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f103 0208 	add.w	r2, r3, #8
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f103 0208 	add.w	r2, r3, #8
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f103 0208 	add.w	r2, r3, #8
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006cce:	bf00      	nop
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b085      	sub	sp, #20
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	601a      	str	r2, [r3, #0]
}
 8006d16:	bf00      	nop
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d22:	b480      	push	{r7}
 8006d24:	b085      	sub	sp, #20
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d38:	d103      	bne.n	8006d42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	e00c      	b.n	8006d5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3308      	adds	r3, #8
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	e002      	b.n	8006d50 <vListInsert+0x2e>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d2f6      	bcs.n	8006d4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	601a      	str	r2, [r3, #0]
}
 8006d88:	bf00      	nop
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	6892      	ldr	r2, [r2, #8]
 8006daa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	6852      	ldr	r2, [r2, #4]
 8006db4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d103      	bne.n	8006dc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	1e5a      	subs	r2, r3, #1
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <xQueueGenericReset+0x2a>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60bb      	str	r3, [r7, #8]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e12:	f002 ff17 	bl	8009c44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1e:	68f9      	ldr	r1, [r7, #12]
 8006e20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e22:	fb01 f303 	mul.w	r3, r1, r3
 8006e26:	441a      	add	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e42:	3b01      	subs	r3, #1
 8006e44:	68f9      	ldr	r1, [r7, #12]
 8006e46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e48:	fb01 f303 	mul.w	r3, r1, r3
 8006e4c:	441a      	add	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	22ff      	movs	r2, #255	; 0xff
 8006e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	22ff      	movs	r2, #255	; 0xff
 8006e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d114      	bne.n	8006e92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01a      	beq.n	8006ea6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3310      	adds	r3, #16
 8006e74:	4618      	mov	r0, r3
 8006e76:	f001 fd09 	bl	800888c <xTaskRemoveFromEventList>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d012      	beq.n	8006ea6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e80:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <xQueueGenericReset+0xcc>)
 8006e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	e009      	b.n	8006ea6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3310      	adds	r3, #16
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7ff fef2 	bl	8006c80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3324      	adds	r3, #36	; 0x24
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7ff feed 	bl	8006c80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ea6:	f002 fefd 	bl	8009ca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006eaa:	2301      	movs	r3, #1
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	e000ed04 	.word	0xe000ed04

08006eb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08e      	sub	sp, #56	; 0x38
 8006ebc:	af02      	add	r7, sp, #8
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ede:	bf00      	nop
 8006ee0:	e7fe      	b.n	8006ee0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006efa:	bf00      	nop
 8006efc:	e7fe      	b.n	8006efc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <xQueueGenericCreateStatic+0x52>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <xQueueGenericCreateStatic+0x56>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e000      	b.n	8006f10 <xQueueGenericCreateStatic+0x58>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10a      	bne.n	8006f2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	623b      	str	r3, [r7, #32]
}
 8006f26:	bf00      	nop
 8006f28:	e7fe      	b.n	8006f28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d102      	bne.n	8006f36 <xQueueGenericCreateStatic+0x7e>
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <xQueueGenericCreateStatic+0x82>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e000      	b.n	8006f3c <xQueueGenericCreateStatic+0x84>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	61fb      	str	r3, [r7, #28]
}
 8006f52:	bf00      	nop
 8006f54:	e7fe      	b.n	8006f54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f56:	2350      	movs	r3, #80	; 0x50
 8006f58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b50      	cmp	r3, #80	; 0x50
 8006f5e:	d00a      	beq.n	8006f76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	61bb      	str	r3, [r7, #24]
}
 8006f72:	bf00      	nop
 8006f74:	e7fe      	b.n	8006f74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00d      	beq.n	8006f9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	4613      	mov	r3, r2
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	68b9      	ldr	r1, [r7, #8]
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 f805 	bl	8006fa8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3730      	adds	r7, #48	; 0x30
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
 8006fb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d103      	bne.n	8006fc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	e002      	b.n	8006fca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	69b8      	ldr	r0, [r7, #24]
 8006fda:	f7ff ff05 	bl	8006de8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	78fa      	ldrb	r2, [r7, #3]
 8006fe2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006fe6:	bf00      	nop
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00e      	beq.n	800701a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800700e:	2300      	movs	r3, #0
 8007010:	2200      	movs	r2, #0
 8007012:	2100      	movs	r1, #0
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f889 	bl	800712c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800701a:	bf00      	nop
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007022:	b580      	push	{r7, lr}
 8007024:	b088      	sub	sp, #32
 8007026:	af02      	add	r7, sp, #8
 8007028:	4603      	mov	r3, r0
 800702a:	6039      	str	r1, [r7, #0]
 800702c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800702e:	2301      	movs	r3, #1
 8007030:	617b      	str	r3, [r7, #20]
 8007032:	2300      	movs	r3, #0
 8007034:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007036:	79fb      	ldrb	r3, [r7, #7]
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2200      	movs	r2, #0
 800703e:	6939      	ldr	r1, [r7, #16]
 8007040:	6978      	ldr	r0, [r7, #20]
 8007042:	f7ff ff39 	bl	8006eb8 <xQueueGenericCreateStatic>
 8007046:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f7ff ffd0 	bl	8006fee <prvInitialiseMutex>

		return xNewQueue;
 800704e:	68fb      	ldr	r3, [r7, #12]
	}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007058:	b590      	push	{r4, r7, lr}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	60fb      	str	r3, [r7, #12]
}
 800707c:	bf00      	nop
 800707e:	e7fe      	b.n	800707e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	689c      	ldr	r4, [r3, #8]
 8007084:	f001 feba 	bl	8008dfc <xTaskGetCurrentTaskHandle>
 8007088:	4603      	mov	r3, r0
 800708a:	429c      	cmp	r4, r3
 800708c:	d111      	bne.n	80070b2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	1e5a      	subs	r2, r3, #1
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d105      	bne.n	80070ac <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80070a0:	2300      	movs	r3, #0
 80070a2:	2200      	movs	r2, #0
 80070a4:	2100      	movs	r1, #0
 80070a6:	6938      	ldr	r0, [r7, #16]
 80070a8:	f000 f840 	bl	800712c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80070ac:	2301      	movs	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
 80070b0:	e001      	b.n	80070b6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80070b6:	697b      	ldr	r3, [r7, #20]
	}
 80070b8:	4618      	mov	r0, r3
 80070ba:	371c      	adds	r7, #28
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd90      	pop	{r4, r7, pc}

080070c0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80070c0:	b590      	push	{r4, r7, lr}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10a      	bne.n	80070ea <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	60fb      	str	r3, [r7, #12]
}
 80070e6:	bf00      	nop
 80070e8:	e7fe      	b.n	80070e8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	689c      	ldr	r4, [r3, #8]
 80070ee:	f001 fe85 	bl	8008dfc <xTaskGetCurrentTaskHandle>
 80070f2:	4603      	mov	r3, r0
 80070f4:	429c      	cmp	r4, r3
 80070f6:	d107      	bne.n	8007108 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007102:	2301      	movs	r3, #1
 8007104:	617b      	str	r3, [r7, #20]
 8007106:	e00c      	b.n	8007122 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	6938      	ldr	r0, [r7, #16]
 800710c:	f000 fa84 	bl	8007618 <xQueueSemaphoreTake>
 8007110:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d004      	beq.n	8007122 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007122:	697b      	ldr	r3, [r7, #20]
	}
 8007124:	4618      	mov	r0, r3
 8007126:	371c      	adds	r7, #28
 8007128:	46bd      	mov	sp, r7
 800712a:	bd90      	pop	{r4, r7, pc}

0800712c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b08e      	sub	sp, #56	; 0x38
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800713a:	2300      	movs	r3, #0
 800713c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10a      	bne.n	800715e <xQueueGenericSend+0x32>
	__asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800715a:	bf00      	nop
 800715c:	e7fe      	b.n	800715c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d103      	bne.n	800716c <xQueueGenericSend+0x40>
 8007164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <xQueueGenericSend+0x44>
 800716c:	2301      	movs	r3, #1
 800716e:	e000      	b.n	8007172 <xQueueGenericSend+0x46>
 8007170:	2300      	movs	r3, #0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10a      	bne.n	800718c <xQueueGenericSend+0x60>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007188:	bf00      	nop
 800718a:	e7fe      	b.n	800718a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b02      	cmp	r3, #2
 8007190:	d103      	bne.n	800719a <xQueueGenericSend+0x6e>
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007196:	2b01      	cmp	r3, #1
 8007198:	d101      	bne.n	800719e <xQueueGenericSend+0x72>
 800719a:	2301      	movs	r3, #1
 800719c:	e000      	b.n	80071a0 <xQueueGenericSend+0x74>
 800719e:	2300      	movs	r3, #0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10a      	bne.n	80071ba <xQueueGenericSend+0x8e>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a8:	f383 8811 	msr	BASEPRI, r3
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	623b      	str	r3, [r7, #32]
}
 80071b6:	bf00      	nop
 80071b8:	e7fe      	b.n	80071b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071ba:	f001 fe2f 	bl	8008e1c <xTaskGetSchedulerState>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d102      	bne.n	80071ca <xQueueGenericSend+0x9e>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <xQueueGenericSend+0xa2>
 80071ca:	2301      	movs	r3, #1
 80071cc:	e000      	b.n	80071d0 <xQueueGenericSend+0xa4>
 80071ce:	2300      	movs	r3, #0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <xQueueGenericSend+0xbe>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	61fb      	str	r3, [r7, #28]
}
 80071e6:	bf00      	nop
 80071e8:	e7fe      	b.n	80071e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071ea:	f002 fd2b 	bl	8009c44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d302      	bcc.n	8007200 <xQueueGenericSend+0xd4>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d129      	bne.n	8007254 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	68b9      	ldr	r1, [r7, #8]
 8007204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007206:	f000 fb2b 	bl	8007860 <prvCopyDataToQueue>
 800720a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800720c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	2b00      	cmp	r3, #0
 8007212:	d010      	beq.n	8007236 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007216:	3324      	adds	r3, #36	; 0x24
 8007218:	4618      	mov	r0, r3
 800721a:	f001 fb37 	bl	800888c <xTaskRemoveFromEventList>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d013      	beq.n	800724c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007224:	4b3f      	ldr	r3, [pc, #252]	; (8007324 <xQueueGenericSend+0x1f8>)
 8007226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	e00a      	b.n	800724c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007238:	2b00      	cmp	r3, #0
 800723a:	d007      	beq.n	800724c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800723c:	4b39      	ldr	r3, [pc, #228]	; (8007324 <xQueueGenericSend+0x1f8>)
 800723e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800724c:	f002 fd2a 	bl	8009ca4 <vPortExitCritical>
				return pdPASS;
 8007250:	2301      	movs	r3, #1
 8007252:	e063      	b.n	800731c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d103      	bne.n	8007262 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800725a:	f002 fd23 	bl	8009ca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800725e:	2300      	movs	r3, #0
 8007260:	e05c      	b.n	800731c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007264:	2b00      	cmp	r3, #0
 8007266:	d106      	bne.n	8007276 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007268:	f107 0314 	add.w	r3, r7, #20
 800726c:	4618      	mov	r0, r3
 800726e:	f001 fb97 	bl	80089a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007272:	2301      	movs	r3, #1
 8007274:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007276:	f002 fd15 	bl	8009ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800727a:	f000 ff75 	bl	8008168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800727e:	f002 fce1 	bl	8009c44 <vPortEnterCritical>
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007288:	b25b      	sxtb	r3, r3
 800728a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800728e:	d103      	bne.n	8007298 <xQueueGenericSend+0x16c>
 8007290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800729e:	b25b      	sxtb	r3, r3
 80072a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072a4:	d103      	bne.n	80072ae <xQueueGenericSend+0x182>
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072ae:	f002 fcf9 	bl	8009ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072b2:	1d3a      	adds	r2, r7, #4
 80072b4:	f107 0314 	add.w	r3, r7, #20
 80072b8:	4611      	mov	r1, r2
 80072ba:	4618      	mov	r0, r3
 80072bc:	f001 fb86 	bl	80089cc <xTaskCheckForTimeOut>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d124      	bne.n	8007310 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072c8:	f000 fbc2 	bl	8007a50 <prvIsQueueFull>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d018      	beq.n	8007304 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d4:	3310      	adds	r3, #16
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	4611      	mov	r1, r2
 80072da:	4618      	mov	r0, r3
 80072dc:	f001 fa86 	bl	80087ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80072e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072e2:	f000 fb4d 	bl	8007980 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80072e6:	f000 ff4d 	bl	8008184 <xTaskResumeAll>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f47f af7c 	bne.w	80071ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80072f2:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <xQueueGenericSend+0x1f8>)
 80072f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	e772      	b.n	80071ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007306:	f000 fb3b 	bl	8007980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800730a:	f000 ff3b 	bl	8008184 <xTaskResumeAll>
 800730e:	e76c      	b.n	80071ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007312:	f000 fb35 	bl	8007980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007316:	f000 ff35 	bl	8008184 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800731a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800731c:	4618      	mov	r0, r3
 800731e:	3738      	adds	r7, #56	; 0x38
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	e000ed04 	.word	0xe000ed04

08007328 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08e      	sub	sp, #56	; 0x38
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
 8007334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007352:	bf00      	nop
 8007354:	e7fe      	b.n	8007354 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d103      	bne.n	8007364 <xQueueGenericSendFromISR+0x3c>
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <xQueueGenericSendFromISR+0x40>
 8007364:	2301      	movs	r3, #1
 8007366:	e000      	b.n	800736a <xQueueGenericSendFromISR+0x42>
 8007368:	2300      	movs	r3, #0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10a      	bne.n	8007384 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	623b      	str	r3, [r7, #32]
}
 8007380:	bf00      	nop
 8007382:	e7fe      	b.n	8007382 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	2b02      	cmp	r3, #2
 8007388:	d103      	bne.n	8007392 <xQueueGenericSendFromISR+0x6a>
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738e:	2b01      	cmp	r3, #1
 8007390:	d101      	bne.n	8007396 <xQueueGenericSendFromISR+0x6e>
 8007392:	2301      	movs	r3, #1
 8007394:	e000      	b.n	8007398 <xQueueGenericSendFromISR+0x70>
 8007396:	2300      	movs	r3, #0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10a      	bne.n	80073b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	61fb      	str	r3, [r7, #28]
}
 80073ae:	bf00      	nop
 80073b0:	e7fe      	b.n	80073b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073b2:	f002 fd29 	bl	8009e08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80073b6:	f3ef 8211 	mrs	r2, BASEPRI
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	61ba      	str	r2, [r7, #24]
 80073cc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80073ce:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073da:	429a      	cmp	r2, r3
 80073dc:	d302      	bcc.n	80073e4 <xQueueGenericSendFromISR+0xbc>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d12c      	bne.n	800743e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	68b9      	ldr	r1, [r7, #8]
 80073f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073f4:	f000 fa34 	bl	8007860 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073f8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80073fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007400:	d112      	bne.n	8007428 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	2b00      	cmp	r3, #0
 8007408:	d016      	beq.n	8007438 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	3324      	adds	r3, #36	; 0x24
 800740e:	4618      	mov	r0, r3
 8007410:	f001 fa3c 	bl	800888c <xTaskRemoveFromEventList>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00e      	beq.n	8007438 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00b      	beq.n	8007438 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	e007      	b.n	8007438 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007428:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800742c:	3301      	adds	r3, #1
 800742e:	b2db      	uxtb	r3, r3
 8007430:	b25a      	sxtb	r2, r3
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007438:	2301      	movs	r3, #1
 800743a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800743c:	e001      	b.n	8007442 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800743e:	2300      	movs	r3, #0
 8007440:	637b      	str	r3, [r7, #52]	; 0x34
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800744c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800744e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007450:	4618      	mov	r0, r3
 8007452:	3738      	adds	r7, #56	; 0x38
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08c      	sub	sp, #48	; 0x30
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007464:	2300      	movs	r3, #0
 8007466:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10a      	bne.n	8007488 <xQueueReceive+0x30>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	623b      	str	r3, [r7, #32]
}
 8007484:	bf00      	nop
 8007486:	e7fe      	b.n	8007486 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d103      	bne.n	8007496 <xQueueReceive+0x3e>
 800748e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <xQueueReceive+0x42>
 8007496:	2301      	movs	r3, #1
 8007498:	e000      	b.n	800749c <xQueueReceive+0x44>
 800749a:	2300      	movs	r3, #0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <xQueueReceive+0x5e>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	61fb      	str	r3, [r7, #28]
}
 80074b2:	bf00      	nop
 80074b4:	e7fe      	b.n	80074b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074b6:	f001 fcb1 	bl	8008e1c <xTaskGetSchedulerState>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d102      	bne.n	80074c6 <xQueueReceive+0x6e>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <xQueueReceive+0x72>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <xQueueReceive+0x74>
 80074ca:	2300      	movs	r3, #0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <xQueueReceive+0x8e>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	61bb      	str	r3, [r7, #24]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074e6:	f002 fbad 	bl	8009c44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d01f      	beq.n	8007536 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074fa:	f000 fa1b 	bl	8007934 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	1e5a      	subs	r2, r3, #1
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00f      	beq.n	800752e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	3310      	adds	r3, #16
 8007512:	4618      	mov	r0, r3
 8007514:	f001 f9ba 	bl	800888c <xTaskRemoveFromEventList>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d007      	beq.n	800752e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800751e:	4b3d      	ldr	r3, [pc, #244]	; (8007614 <xQueueReceive+0x1bc>)
 8007520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800752e:	f002 fbb9 	bl	8009ca4 <vPortExitCritical>
				return pdPASS;
 8007532:	2301      	movs	r3, #1
 8007534:	e069      	b.n	800760a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d103      	bne.n	8007544 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800753c:	f002 fbb2 	bl	8009ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007540:	2300      	movs	r3, #0
 8007542:	e062      	b.n	800760a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800754a:	f107 0310 	add.w	r3, r7, #16
 800754e:	4618      	mov	r0, r3
 8007550:	f001 fa26 	bl	80089a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007554:	2301      	movs	r3, #1
 8007556:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007558:	f002 fba4 	bl	8009ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800755c:	f000 fe04 	bl	8008168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007560:	f002 fb70 	bl	8009c44 <vPortEnterCritical>
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007566:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800756a:	b25b      	sxtb	r3, r3
 800756c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007570:	d103      	bne.n	800757a <xQueueReceive+0x122>
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007580:	b25b      	sxtb	r3, r3
 8007582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007586:	d103      	bne.n	8007590 <xQueueReceive+0x138>
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007590:	f002 fb88 	bl	8009ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007594:	1d3a      	adds	r2, r7, #4
 8007596:	f107 0310 	add.w	r3, r7, #16
 800759a:	4611      	mov	r1, r2
 800759c:	4618      	mov	r0, r3
 800759e:	f001 fa15 	bl	80089cc <xTaskCheckForTimeOut>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d123      	bne.n	80075f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075aa:	f000 fa3b 	bl	8007a24 <prvIsQueueEmpty>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d017      	beq.n	80075e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	3324      	adds	r3, #36	; 0x24
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	4611      	mov	r1, r2
 80075bc:	4618      	mov	r0, r3
 80075be:	f001 f915 	bl	80087ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075c4:	f000 f9dc 	bl	8007980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075c8:	f000 fddc 	bl	8008184 <xTaskResumeAll>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d189      	bne.n	80074e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80075d2:	4b10      	ldr	r3, [pc, #64]	; (8007614 <xQueueReceive+0x1bc>)
 80075d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	e780      	b.n	80074e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80075e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075e6:	f000 f9cb 	bl	8007980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075ea:	f000 fdcb 	bl	8008184 <xTaskResumeAll>
 80075ee:	e77a      	b.n	80074e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80075f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f2:	f000 f9c5 	bl	8007980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075f6:	f000 fdc5 	bl	8008184 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075fc:	f000 fa12 	bl	8007a24 <prvIsQueueEmpty>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	f43f af6f 	beq.w	80074e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007608:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800760a:	4618      	mov	r0, r3
 800760c:	3730      	adds	r7, #48	; 0x30
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08e      	sub	sp, #56	; 0x38
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007622:	2300      	movs	r3, #0
 8007624:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800762a:	2300      	movs	r3, #0
 800762c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800762e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10a      	bne.n	800764a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	623b      	str	r3, [r7, #32]
}
 8007646:	bf00      	nop
 8007648:	e7fe      	b.n	8007648 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800764a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00a      	beq.n	8007668 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	61fb      	str	r3, [r7, #28]
}
 8007664:	bf00      	nop
 8007666:	e7fe      	b.n	8007666 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007668:	f001 fbd8 	bl	8008e1c <xTaskGetSchedulerState>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d102      	bne.n	8007678 <xQueueSemaphoreTake+0x60>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <xQueueSemaphoreTake+0x64>
 8007678:	2301      	movs	r3, #1
 800767a:	e000      	b.n	800767e <xQueueSemaphoreTake+0x66>
 800767c:	2300      	movs	r3, #0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10a      	bne.n	8007698 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	61bb      	str	r3, [r7, #24]
}
 8007694:	bf00      	nop
 8007696:	e7fe      	b.n	8007696 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007698:	f002 fad4 	bl	8009c44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800769c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d024      	beq.n	80076f2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	1e5a      	subs	r2, r3, #1
 80076ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80076b8:	f001 fde2 	bl	8009280 <pvTaskIncrementMutexHeldCount>
 80076bc:	4602      	mov	r2, r0
 80076be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00f      	beq.n	80076ea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	3310      	adds	r3, #16
 80076ce:	4618      	mov	r0, r3
 80076d0:	f001 f8dc 	bl	800888c <xTaskRemoveFromEventList>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d007      	beq.n	80076ea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076da:	4b54      	ldr	r3, [pc, #336]	; (800782c <xQueueSemaphoreTake+0x214>)
 80076dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076ea:	f002 fadb 	bl	8009ca4 <vPortExitCritical>
				return pdPASS;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e097      	b.n	8007822 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d111      	bne.n	800771c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	617b      	str	r3, [r7, #20]
}
 8007710:	bf00      	nop
 8007712:	e7fe      	b.n	8007712 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007714:	f002 fac6 	bl	8009ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007718:	2300      	movs	r3, #0
 800771a:	e082      	b.n	8007822 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800771c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007722:	f107 030c 	add.w	r3, r7, #12
 8007726:	4618      	mov	r0, r3
 8007728:	f001 f93a 	bl	80089a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800772c:	2301      	movs	r3, #1
 800772e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007730:	f002 fab8 	bl	8009ca4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007734:	f000 fd18 	bl	8008168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007738:	f002 fa84 	bl	8009c44 <vPortEnterCritical>
 800773c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007742:	b25b      	sxtb	r3, r3
 8007744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007748:	d103      	bne.n	8007752 <xQueueSemaphoreTake+0x13a>
 800774a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007758:	b25b      	sxtb	r3, r3
 800775a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800775e:	d103      	bne.n	8007768 <xQueueSemaphoreTake+0x150>
 8007760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007768:	f002 fa9c 	bl	8009ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800776c:	463a      	mov	r2, r7
 800776e:	f107 030c 	add.w	r3, r7, #12
 8007772:	4611      	mov	r1, r2
 8007774:	4618      	mov	r0, r3
 8007776:	f001 f929 	bl	80089cc <xTaskCheckForTimeOut>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d132      	bne.n	80077e6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007780:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007782:	f000 f94f 	bl	8007a24 <prvIsQueueEmpty>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d026      	beq.n	80077da <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800778c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d109      	bne.n	80077a8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007794:	f002 fa56 	bl	8009c44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	4618      	mov	r0, r3
 800779e:	f001 fb5b 	bl	8008e58 <xTaskPriorityInherit>
 80077a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80077a4:	f002 fa7e 	bl	8009ca4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	3324      	adds	r3, #36	; 0x24
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	4611      	mov	r1, r2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f001 f81b 	bl	80087ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077b8:	f000 f8e2 	bl	8007980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077bc:	f000 fce2 	bl	8008184 <xTaskResumeAll>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f47f af68 	bne.w	8007698 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80077c8:	4b18      	ldr	r3, [pc, #96]	; (800782c <xQueueSemaphoreTake+0x214>)
 80077ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ce:	601a      	str	r2, [r3, #0]
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	e75e      	b.n	8007698 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80077da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077dc:	f000 f8d0 	bl	8007980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077e0:	f000 fcd0 	bl	8008184 <xTaskResumeAll>
 80077e4:	e758      	b.n	8007698 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80077e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077e8:	f000 f8ca 	bl	8007980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077ec:	f000 fcca 	bl	8008184 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077f2:	f000 f917 	bl	8007a24 <prvIsQueueEmpty>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f43f af4d 	beq.w	8007698 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80077fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00d      	beq.n	8007820 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007804:	f002 fa1e 	bl	8009c44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800780a:	f000 f811 	bl	8007830 <prvGetDisinheritPriorityAfterTimeout>
 800780e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007816:	4618      	mov	r0, r3
 8007818:	f001 fbf4 	bl	8009004 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800781c:	f002 fa42 	bl	8009ca4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007820:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007822:	4618      	mov	r0, r3
 8007824:	3738      	adds	r7, #56	; 0x38
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	e000ed04 	.word	0xe000ed04

08007830 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	2b00      	cmp	r3, #0
 800783e:	d006      	beq.n	800784e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	e001      	b.n	8007852 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007852:	68fb      	ldr	r3, [r7, #12]
	}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007874:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10d      	bne.n	800789a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d14d      	bne.n	8007922 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	4618      	mov	r0, r3
 800788c:	f001 fb4c 	bl	8008f28 <xTaskPriorityDisinherit>
 8007890:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	609a      	str	r2, [r3, #8]
 8007898:	e043      	b.n	8007922 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d119      	bne.n	80078d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6858      	ldr	r0, [r3, #4]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a8:	461a      	mov	r2, r3
 80078aa:	68b9      	ldr	r1, [r7, #8]
 80078ac:	f019 fa08 	bl	8020cc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	441a      	add	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d32b      	bcc.n	8007922 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	605a      	str	r2, [r3, #4]
 80078d2:	e026      	b.n	8007922 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	68d8      	ldr	r0, [r3, #12]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	461a      	mov	r2, r3
 80078de:	68b9      	ldr	r1, [r7, #8]
 80078e0:	f019 f9ee 	bl	8020cc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ec:	425b      	negs	r3, r3
 80078ee:	441a      	add	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d207      	bcs.n	8007910 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007908:	425b      	negs	r3, r3
 800790a:	441a      	add	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b02      	cmp	r3, #2
 8007914:	d105      	bne.n	8007922 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	3b01      	subs	r3, #1
 8007920:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800792a:	697b      	ldr	r3, [r7, #20]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d018      	beq.n	8007978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794e:	441a      	add	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	429a      	cmp	r2, r3
 800795e:	d303      	bcc.n	8007968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68d9      	ldr	r1, [r3, #12]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007970:	461a      	mov	r2, r3
 8007972:	6838      	ldr	r0, [r7, #0]
 8007974:	f019 f9a4 	bl	8020cc0 <memcpy>
	}
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007988:	f002 f95c 	bl	8009c44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007992:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007994:	e011      	b.n	80079ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	2b00      	cmp	r3, #0
 800799c:	d012      	beq.n	80079c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3324      	adds	r3, #36	; 0x24
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 ff72 	bl	800888c <xTaskRemoveFromEventList>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079ae:	f001 f86f 	bl	8008a90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	dce9      	bgt.n	8007996 <prvUnlockQueue+0x16>
 80079c2:	e000      	b.n	80079c6 <prvUnlockQueue+0x46>
					break;
 80079c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	22ff      	movs	r2, #255	; 0xff
 80079ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80079ce:	f002 f969 	bl	8009ca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079d2:	f002 f937 	bl	8009c44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079de:	e011      	b.n	8007a04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d012      	beq.n	8007a0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3310      	adds	r3, #16
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 ff4d 	bl	800888c <xTaskRemoveFromEventList>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079f8:	f001 f84a 	bl	8008a90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	dce9      	bgt.n	80079e0 <prvUnlockQueue+0x60>
 8007a0c:	e000      	b.n	8007a10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	22ff      	movs	r2, #255	; 0xff
 8007a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a18:	f002 f944 	bl	8009ca4 <vPortExitCritical>
}
 8007a1c:	bf00      	nop
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a2c:	f002 f90a 	bl	8009c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d102      	bne.n	8007a3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	e001      	b.n	8007a42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a42:	f002 f92f 	bl	8009ca4 <vPortExitCritical>

	return xReturn;
 8007a46:	68fb      	ldr	r3, [r7, #12]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a58:	f002 f8f4 	bl	8009c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d102      	bne.n	8007a6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	e001      	b.n	8007a72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a72:	f002 f917 	bl	8009ca4 <vPortExitCritical>

	return xReturn;
 8007a76:	68fb      	ldr	r3, [r7, #12]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	e014      	b.n	8007aba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a90:	4a0f      	ldr	r2, [pc, #60]	; (8007ad0 <vQueueAddToRegistry+0x50>)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10b      	bne.n	8007ab4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a9c:	490c      	ldr	r1, [pc, #48]	; (8007ad0 <vQueueAddToRegistry+0x50>)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007aa6:	4a0a      	ldr	r2, [pc, #40]	; (8007ad0 <vQueueAddToRegistry+0x50>)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	00db      	lsls	r3, r3, #3
 8007aac:	4413      	add	r3, r2
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ab2:	e006      	b.n	8007ac2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b07      	cmp	r3, #7
 8007abe:	d9e7      	bls.n	8007a90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ac0:	bf00      	nop
 8007ac2:	bf00      	nop
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	2000da88 	.word	0x2000da88

08007ad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ae4:	f002 f8ae 	bl	8009c44 <vPortEnterCritical>
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aee:	b25b      	sxtb	r3, r3
 8007af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007af4:	d103      	bne.n	8007afe <vQueueWaitForMessageRestricted+0x2a>
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b04:	b25b      	sxtb	r3, r3
 8007b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b0a:	d103      	bne.n	8007b14 <vQueueWaitForMessageRestricted+0x40>
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b14:	f002 f8c6 	bl	8009ca4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d106      	bne.n	8007b2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	3324      	adds	r3, #36	; 0x24
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	68b9      	ldr	r1, [r7, #8]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fe83 	bl	8008834 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b2e:	6978      	ldr	r0, [r7, #20]
 8007b30:	f7ff ff26 	bl	8007980 <prvUnlockQueue>
	}
 8007b34:	bf00      	nop
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08e      	sub	sp, #56	; 0x38
 8007b40:	af04      	add	r7, sp, #16
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10a      	bne.n	8007b66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	623b      	str	r3, [r7, #32]
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10a      	bne.n	8007b82 <xTaskCreateStatic+0x46>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	61fb      	str	r3, [r7, #28]
}
 8007b7e:	bf00      	nop
 8007b80:	e7fe      	b.n	8007b80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b82:	2364      	movs	r3, #100	; 0x64
 8007b84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	2b64      	cmp	r3, #100	; 0x64
 8007b8a:	d00a      	beq.n	8007ba2 <xTaskCreateStatic+0x66>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	61bb      	str	r3, [r7, #24]
}
 8007b9e:	bf00      	nop
 8007ba0:	e7fe      	b.n	8007ba0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ba2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01e      	beq.n	8007be8 <xTaskCreateStatic+0xac>
 8007baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d01b      	beq.n	8007be8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	9303      	str	r3, [sp, #12]
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	9302      	str	r3, [sp, #8]
 8007bca:	f107 0314 	add.w	r3, r7, #20
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	68b9      	ldr	r1, [r7, #8]
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 f850 	bl	8007c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007be2:	f000 f8df 	bl	8007da4 <prvAddNewTaskToReadyList>
 8007be6:	e001      	b.n	8007bec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007be8:	2300      	movs	r3, #0
 8007bea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bec:	697b      	ldr	r3, [r7, #20]
	}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3728      	adds	r7, #40	; 0x28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b08c      	sub	sp, #48	; 0x30
 8007bfa:	af04      	add	r7, sp, #16
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	603b      	str	r3, [r7, #0]
 8007c02:	4613      	mov	r3, r2
 8007c04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c06:	88fb      	ldrh	r3, [r7, #6]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7f9 fd70 	bl	80016f0 <pvPortMalloc>
 8007c10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00e      	beq.n	8007c36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c18:	2064      	movs	r0, #100	; 0x64
 8007c1a:	f7f9 fd69 	bl	80016f0 <pvPortMalloc>
 8007c1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d003      	beq.n	8007c2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8007c2c:	e005      	b.n	8007c3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c2e:	6978      	ldr	r0, [r7, #20]
 8007c30:	f7f9 fe22 	bl	8001878 <vPortFree>
 8007c34:	e001      	b.n	8007c3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d017      	beq.n	8007c70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c48:	88fa      	ldrh	r2, [r7, #6]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	9303      	str	r3, [sp, #12]
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	9302      	str	r3, [sp, #8]
 8007c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	68b9      	ldr	r1, [r7, #8]
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 f80e 	bl	8007c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c64:	69f8      	ldr	r0, [r7, #28]
 8007c66:	f000 f89d 	bl	8007da4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	61bb      	str	r3, [r7, #24]
 8007c6e:	e002      	b.n	8007c76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c76:	69bb      	ldr	r3, [r7, #24]
	}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3720      	adds	r7, #32
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	461a      	mov	r2, r3
 8007c98:	21a5      	movs	r1, #165	; 0xa5
 8007c9a:	f019 f839 	bl	8020d10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	f023 0307 	bic.w	r3, r3, #7
 8007cb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	f003 0307 	and.w	r3, r3, #7
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	617b      	str	r3, [r7, #20]
}
 8007cd4:	bf00      	nop
 8007cd6:	e7fe      	b.n	8007cd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d01f      	beq.n	8007d1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cde:	2300      	movs	r3, #0
 8007ce0:	61fb      	str	r3, [r7, #28]
 8007ce2:	e012      	b.n	8007d0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	4413      	add	r3, r2
 8007cea:	7819      	ldrb	r1, [r3, #0]
 8007cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	3334      	adds	r3, #52	; 0x34
 8007cf4:	460a      	mov	r2, r1
 8007cf6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d006      	beq.n	8007d12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	3301      	adds	r3, #1
 8007d08:	61fb      	str	r3, [r7, #28]
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	2b0f      	cmp	r3, #15
 8007d0e:	d9e9      	bls.n	8007ce4 <prvInitialiseNewTask+0x64>
 8007d10:	e000      	b.n	8007d14 <prvInitialiseNewTask+0x94>
			{
				break;
 8007d12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d1c:	e003      	b.n	8007d26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d28:	2b37      	cmp	r3, #55	; 0x37
 8007d2a:	d901      	bls.n	8007d30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d2c:	2337      	movs	r3, #55	; 0x37
 8007d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	2200      	movs	r2, #0
 8007d40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	3304      	adds	r3, #4
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fe ffba 	bl	8006cc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4e:	3318      	adds	r3, #24
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fe ffb5 	bl	8006cc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6e:	2200      	movs	r2, #0
 8007d70:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	2200      	movs	r2, #0
 8007d76:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	69b8      	ldr	r0, [r7, #24]
 8007d86:	f001 fe31 	bl	80099ec <pxPortInitialiseStack>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d9c:	bf00      	nop
 8007d9e:	3720      	adds	r7, #32
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007dac:	f001 ff4a 	bl	8009c44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007db0:	4b2d      	ldr	r3, [pc, #180]	; (8007e68 <prvAddNewTaskToReadyList+0xc4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3301      	adds	r3, #1
 8007db6:	4a2c      	ldr	r2, [pc, #176]	; (8007e68 <prvAddNewTaskToReadyList+0xc4>)
 8007db8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007dba:	4b2c      	ldr	r3, [pc, #176]	; (8007e6c <prvAddNewTaskToReadyList+0xc8>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d109      	bne.n	8007dd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007dc2:	4a2a      	ldr	r2, [pc, #168]	; (8007e6c <prvAddNewTaskToReadyList+0xc8>)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007dc8:	4b27      	ldr	r3, [pc, #156]	; (8007e68 <prvAddNewTaskToReadyList+0xc4>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d110      	bne.n	8007df2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007dd0:	f000 fe82 	bl	8008ad8 <prvInitialiseTaskLists>
 8007dd4:	e00d      	b.n	8007df2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007dd6:	4b26      	ldr	r3, [pc, #152]	; (8007e70 <prvAddNewTaskToReadyList+0xcc>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d109      	bne.n	8007df2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007dde:	4b23      	ldr	r3, [pc, #140]	; (8007e6c <prvAddNewTaskToReadyList+0xc8>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d802      	bhi.n	8007df2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007dec:	4a1f      	ldr	r2, [pc, #124]	; (8007e6c <prvAddNewTaskToReadyList+0xc8>)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007df2:	4b20      	ldr	r3, [pc, #128]	; (8007e74 <prvAddNewTaskToReadyList+0xd0>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3301      	adds	r3, #1
 8007df8:	4a1e      	ldr	r2, [pc, #120]	; (8007e74 <prvAddNewTaskToReadyList+0xd0>)
 8007dfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007dfc:	4b1d      	ldr	r3, [pc, #116]	; (8007e74 <prvAddNewTaskToReadyList+0xd0>)
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e08:	4b1b      	ldr	r3, [pc, #108]	; (8007e78 <prvAddNewTaskToReadyList+0xd4>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d903      	bls.n	8007e18 <prvAddNewTaskToReadyList+0x74>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	4a18      	ldr	r2, [pc, #96]	; (8007e78 <prvAddNewTaskToReadyList+0xd4>)
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4a15      	ldr	r2, [pc, #84]	; (8007e7c <prvAddNewTaskToReadyList+0xd8>)
 8007e26:	441a      	add	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4610      	mov	r0, r2
 8007e30:	f7fe ff53 	bl	8006cda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e34:	f001 ff36 	bl	8009ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e38:	4b0d      	ldr	r3, [pc, #52]	; (8007e70 <prvAddNewTaskToReadyList+0xcc>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00e      	beq.n	8007e5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e40:	4b0a      	ldr	r3, [pc, #40]	; (8007e6c <prvAddNewTaskToReadyList+0xc8>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d207      	bcs.n	8007e5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e4e:	4b0c      	ldr	r3, [pc, #48]	; (8007e80 <prvAddNewTaskToReadyList+0xdc>)
 8007e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e5e:	bf00      	nop
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	2000dfa0 	.word	0x2000dfa0
 8007e6c:	2000dac8 	.word	0x2000dac8
 8007e70:	2000dfac 	.word	0x2000dfac
 8007e74:	2000dfbc 	.word	0x2000dfbc
 8007e78:	2000dfa8 	.word	0x2000dfa8
 8007e7c:	2000dacc 	.word	0x2000dacc
 8007e80:	e000ed04 	.word	0xe000ed04

08007e84 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007e8c:	f001 feda 	bl	8009c44 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d102      	bne.n	8007e9c <vTaskDelete+0x18>
 8007e96:	4b2c      	ldr	r3, [pc, #176]	; (8007f48 <vTaskDelete+0xc4>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	e000      	b.n	8007e9e <vTaskDelete+0x1a>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fe ff75 	bl	8006d94 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d004      	beq.n	8007ebc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3318      	adds	r3, #24
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe ff6c 	bl	8006d94 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007ebc:	4b23      	ldr	r3, [pc, #140]	; (8007f4c <vTaskDelete+0xc8>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	4a22      	ldr	r2, [pc, #136]	; (8007f4c <vTaskDelete+0xc8>)
 8007ec4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007ec6:	4b20      	ldr	r3, [pc, #128]	; (8007f48 <vTaskDelete+0xc4>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d10b      	bne.n	8007ee8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	481e      	ldr	r0, [pc, #120]	; (8007f50 <vTaskDelete+0xcc>)
 8007ed8:	f7fe feff 	bl	8006cda <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007edc:	4b1d      	ldr	r3, [pc, #116]	; (8007f54 <vTaskDelete+0xd0>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	4a1c      	ldr	r2, [pc, #112]	; (8007f54 <vTaskDelete+0xd0>)
 8007ee4:	6013      	str	r3, [r2, #0]
 8007ee6:	e009      	b.n	8007efc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007ee8:	4b1b      	ldr	r3, [pc, #108]	; (8007f58 <vTaskDelete+0xd4>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3b01      	subs	r3, #1
 8007eee:	4a1a      	ldr	r2, [pc, #104]	; (8007f58 <vTaskDelete+0xd4>)
 8007ef0:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f000 ff32 	bl	8008d5c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007ef8:	f000 ff60 	bl	8008dbc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007efc:	f001 fed2 	bl	8009ca4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007f00:	4b16      	ldr	r3, [pc, #88]	; (8007f5c <vTaskDelete+0xd8>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d01b      	beq.n	8007f40 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8007f08:	4b0f      	ldr	r3, [pc, #60]	; (8007f48 <vTaskDelete+0xc4>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d116      	bne.n	8007f40 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007f12:	4b13      	ldr	r3, [pc, #76]	; (8007f60 <vTaskDelete+0xdc>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <vTaskDelete+0xac>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	60bb      	str	r3, [r7, #8]
}
 8007f2c:	bf00      	nop
 8007f2e:	e7fe      	b.n	8007f2e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007f30:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <vTaskDelete+0xe0>)
 8007f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f40:	bf00      	nop
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	2000dac8 	.word	0x2000dac8
 8007f4c:	2000dfbc 	.word	0x2000dfbc
 8007f50:	2000df70 	.word	0x2000df70
 8007f54:	2000df84 	.word	0x2000df84
 8007f58:	2000dfa0 	.word	0x2000dfa0
 8007f5c:	2000dfac 	.word	0x2000dfac
 8007f60:	2000dfc8 	.word	0x2000dfc8
 8007f64:	e000ed04 	.word	0xe000ed04

08007f68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d017      	beq.n	8007faa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f7a:	4b13      	ldr	r3, [pc, #76]	; (8007fc8 <vTaskDelay+0x60>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00a      	beq.n	8007f98 <vTaskDelay+0x30>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	60bb      	str	r3, [r7, #8]
}
 8007f94:	bf00      	nop
 8007f96:	e7fe      	b.n	8007f96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f98:	f000 f8e6 	bl	8008168 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 f982 	bl	80092a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007fa4:	f000 f8ee 	bl	8008184 <xTaskResumeAll>
 8007fa8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d107      	bne.n	8007fc0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007fb0:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <vTaskDelay+0x64>)
 8007fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fc0:	bf00      	nop
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	2000dfc8 	.word	0x2000dfc8
 8007fcc:	e000ed04 	.word	0xe000ed04

08007fd0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10a      	bne.n	8007ff8 <eTaskGetState+0x28>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	60bb      	str	r3, [r7, #8]
}
 8007ff4:	bf00      	nop
 8007ff6:	e7fe      	b.n	8007ff6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8007ff8:	4b23      	ldr	r3, [pc, #140]	; (8008088 <eTaskGetState+0xb8>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	69ba      	ldr	r2, [r7, #24]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d102      	bne.n	8008008 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8008002:	2300      	movs	r3, #0
 8008004:	77fb      	strb	r3, [r7, #31]
 8008006:	e03a      	b.n	800807e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8008008:	f001 fe1c 	bl	8009c44 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8008012:	4b1e      	ldr	r3, [pc, #120]	; (800808c <eTaskGetState+0xbc>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8008018:	4b1d      	ldr	r3, [pc, #116]	; (8008090 <eTaskGetState+0xc0>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800801e:	f001 fe41 	bl	8009ca4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	429a      	cmp	r2, r3
 8008028:	d003      	beq.n	8008032 <eTaskGetState+0x62>
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	429a      	cmp	r2, r3
 8008030:	d102      	bne.n	8008038 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8008032:	2302      	movs	r3, #2
 8008034:	77fb      	strb	r3, [r7, #31]
 8008036:	e022      	b.n	800807e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	4a16      	ldr	r2, [pc, #88]	; (8008094 <eTaskGetState+0xc4>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d112      	bne.n	8008066 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10b      	bne.n	8008060 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b01      	cmp	r3, #1
 8008052:	d102      	bne.n	800805a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8008054:	2302      	movs	r3, #2
 8008056:	77fb      	strb	r3, [r7, #31]
 8008058:	e011      	b.n	800807e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800805a:	2303      	movs	r3, #3
 800805c:	77fb      	strb	r3, [r7, #31]
 800805e:	e00e      	b.n	800807e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8008060:	2302      	movs	r3, #2
 8008062:	77fb      	strb	r3, [r7, #31]
 8008064:	e00b      	b.n	800807e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	4a0b      	ldr	r2, [pc, #44]	; (8008098 <eTaskGetState+0xc8>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d002      	beq.n	8008074 <eTaskGetState+0xa4>
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d102      	bne.n	800807a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8008074:	2304      	movs	r3, #4
 8008076:	77fb      	strb	r3, [r7, #31]
 8008078:	e001      	b.n	800807e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800807a:	2301      	movs	r3, #1
 800807c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800807e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008080:	4618      	mov	r0, r3
 8008082:	3720      	adds	r7, #32
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	2000dac8 	.word	0x2000dac8
 800808c:	2000df54 	.word	0x2000df54
 8008090:	2000df58 	.word	0x2000df58
 8008094:	2000df88 	.word	0x2000df88
 8008098:	2000df70 	.word	0x2000df70

0800809c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08a      	sub	sp, #40	; 0x28
 80080a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80080a6:	2300      	movs	r3, #0
 80080a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80080aa:	463a      	mov	r2, r7
 80080ac:	1d39      	adds	r1, r7, #4
 80080ae:	f107 0308 	add.w	r3, r7, #8
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fe fdb0 	bl	8006c18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	9202      	str	r2, [sp, #8]
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	2300      	movs	r3, #0
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	2300      	movs	r3, #0
 80080c8:	460a      	mov	r2, r1
 80080ca:	4921      	ldr	r1, [pc, #132]	; (8008150 <vTaskStartScheduler+0xb4>)
 80080cc:	4821      	ldr	r0, [pc, #132]	; (8008154 <vTaskStartScheduler+0xb8>)
 80080ce:	f7ff fd35 	bl	8007b3c <xTaskCreateStatic>
 80080d2:	4603      	mov	r3, r0
 80080d4:	4a20      	ldr	r2, [pc, #128]	; (8008158 <vTaskStartScheduler+0xbc>)
 80080d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80080d8:	4b1f      	ldr	r3, [pc, #124]	; (8008158 <vTaskStartScheduler+0xbc>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80080e0:	2301      	movs	r3, #1
 80080e2:	617b      	str	r3, [r7, #20]
 80080e4:	e001      	b.n	80080ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d102      	bne.n	80080f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80080f0:	f001 f92e 	bl	8009350 <xTimerCreateTimerTask>
 80080f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d116      	bne.n	800812a <vTaskStartScheduler+0x8e>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	613b      	str	r3, [r7, #16]
}
 800810e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008110:	4b12      	ldr	r3, [pc, #72]	; (800815c <vTaskStartScheduler+0xc0>)
 8008112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008116:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008118:	4b11      	ldr	r3, [pc, #68]	; (8008160 <vTaskStartScheduler+0xc4>)
 800811a:	2201      	movs	r2, #1
 800811c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800811e:	4b11      	ldr	r3, [pc, #68]	; (8008164 <vTaskStartScheduler+0xc8>)
 8008120:	2200      	movs	r2, #0
 8008122:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008124:	f001 fcec 	bl	8009b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008128:	e00e      	b.n	8008148 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008130:	d10a      	bne.n	8008148 <vTaskStartScheduler+0xac>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	60fb      	str	r3, [r7, #12]
}
 8008144:	bf00      	nop
 8008146:	e7fe      	b.n	8008146 <vTaskStartScheduler+0xaa>
}
 8008148:	bf00      	nop
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	08025878 	.word	0x08025878
 8008154:	08008aa9 	.word	0x08008aa9
 8008158:	2000dfc4 	.word	0x2000dfc4
 800815c:	2000dfc0 	.word	0x2000dfc0
 8008160:	2000dfac 	.word	0x2000dfac
 8008164:	2000dfa4 	.word	0x2000dfa4

08008168 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008168:	b480      	push	{r7}
 800816a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800816c:	4b04      	ldr	r3, [pc, #16]	; (8008180 <vTaskSuspendAll+0x18>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	3301      	adds	r3, #1
 8008172:	4a03      	ldr	r2, [pc, #12]	; (8008180 <vTaskSuspendAll+0x18>)
 8008174:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008176:	bf00      	nop
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	2000dfc8 	.word	0x2000dfc8

08008184 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800818e:	2300      	movs	r3, #0
 8008190:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008192:	4b42      	ldr	r3, [pc, #264]	; (800829c <xTaskResumeAll+0x118>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	603b      	str	r3, [r7, #0]
}
 80081ac:	bf00      	nop
 80081ae:	e7fe      	b.n	80081ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80081b0:	f001 fd48 	bl	8009c44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80081b4:	4b39      	ldr	r3, [pc, #228]	; (800829c <xTaskResumeAll+0x118>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3b01      	subs	r3, #1
 80081ba:	4a38      	ldr	r2, [pc, #224]	; (800829c <xTaskResumeAll+0x118>)
 80081bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081be:	4b37      	ldr	r3, [pc, #220]	; (800829c <xTaskResumeAll+0x118>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d162      	bne.n	800828c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081c6:	4b36      	ldr	r3, [pc, #216]	; (80082a0 <xTaskResumeAll+0x11c>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d05e      	beq.n	800828c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081ce:	e02f      	b.n	8008230 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081d0:	4b34      	ldr	r3, [pc, #208]	; (80082a4 <xTaskResumeAll+0x120>)
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3318      	adds	r3, #24
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fe fdd9 	bl	8006d94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3304      	adds	r3, #4
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe fdd4 	bl	8006d94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f0:	4b2d      	ldr	r3, [pc, #180]	; (80082a8 <xTaskResumeAll+0x124>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d903      	bls.n	8008200 <xTaskResumeAll+0x7c>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	4a2a      	ldr	r2, [pc, #168]	; (80082a8 <xTaskResumeAll+0x124>)
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4a27      	ldr	r2, [pc, #156]	; (80082ac <xTaskResumeAll+0x128>)
 800820e:	441a      	add	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3304      	adds	r3, #4
 8008214:	4619      	mov	r1, r3
 8008216:	4610      	mov	r0, r2
 8008218:	f7fe fd5f 	bl	8006cda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008220:	4b23      	ldr	r3, [pc, #140]	; (80082b0 <xTaskResumeAll+0x12c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008226:	429a      	cmp	r2, r3
 8008228:	d302      	bcc.n	8008230 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800822a:	4b22      	ldr	r3, [pc, #136]	; (80082b4 <xTaskResumeAll+0x130>)
 800822c:	2201      	movs	r2, #1
 800822e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008230:	4b1c      	ldr	r3, [pc, #112]	; (80082a4 <xTaskResumeAll+0x120>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1cb      	bne.n	80081d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800823e:	f000 fdbd 	bl	8008dbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008242:	4b1d      	ldr	r3, [pc, #116]	; (80082b8 <xTaskResumeAll+0x134>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d010      	beq.n	8008270 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800824e:	f000 f9a9 	bl	80085a4 <xTaskIncrementTick>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008258:	4b16      	ldr	r3, [pc, #88]	; (80082b4 <xTaskResumeAll+0x130>)
 800825a:	2201      	movs	r2, #1
 800825c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	3b01      	subs	r3, #1
 8008262:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1f1      	bne.n	800824e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800826a:	4b13      	ldr	r3, [pc, #76]	; (80082b8 <xTaskResumeAll+0x134>)
 800826c:	2200      	movs	r2, #0
 800826e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008270:	4b10      	ldr	r3, [pc, #64]	; (80082b4 <xTaskResumeAll+0x130>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d009      	beq.n	800828c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008278:	2301      	movs	r3, #1
 800827a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800827c:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <xTaskResumeAll+0x138>)
 800827e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800828c:	f001 fd0a 	bl	8009ca4 <vPortExitCritical>

	return xAlreadyYielded;
 8008290:	68bb      	ldr	r3, [r7, #8]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	2000dfc8 	.word	0x2000dfc8
 80082a0:	2000dfa0 	.word	0x2000dfa0
 80082a4:	2000df5c 	.word	0x2000df5c
 80082a8:	2000dfa8 	.word	0x2000dfa8
 80082ac:	2000dacc 	.word	0x2000dacc
 80082b0:	2000dac8 	.word	0x2000dac8
 80082b4:	2000dfb4 	.word	0x2000dfb4
 80082b8:	2000dfb0 	.word	0x2000dfb0
 80082bc:	e000ed04 	.word	0xe000ed04

080082c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80082c6:	4b05      	ldr	r3, [pc, #20]	; (80082dc <xTaskGetTickCount+0x1c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80082cc:	687b      	ldr	r3, [r7, #4]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	370c      	adds	r7, #12
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	2000dfa4 	.word	0x2000dfa4

080082e0 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 80082e0:	b480      	push	{r7}
 80082e2:	b08b      	sub	sp, #44	; 0x2c
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d05b      	beq.n	80083ae <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	61bb      	str	r3, [r7, #24]
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	605a      	str	r2, [r3, #4]
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	3308      	adds	r3, #8
 800830c:	429a      	cmp	r2, r3
 800830e:	d104      	bne.n	800831a <prvSearchForNameWithinSingleList+0x3a>
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	605a      	str	r2, [r3, #4]
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	613b      	str	r3, [r7, #16]
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	605a      	str	r2, [r3, #4]
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	3308      	adds	r3, #8
 8008338:	429a      	cmp	r2, r3
 800833a:	d104      	bne.n	8008346 <prvSearchForNameWithinSingleList+0x66>
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	605a      	str	r2, [r3, #4]
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800834e:	2300      	movs	r3, #0
 8008350:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008352:	2300      	movs	r3, #0
 8008354:	623b      	str	r3, [r7, #32]
 8008356:	e01c      	b.n	8008392 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	4413      	add	r3, r2
 800835e:	3334      	adds	r3, #52	; 0x34
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 8008364:	683a      	ldr	r2, [r7, #0]
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	4413      	add	r3, r2
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	7afa      	ldrb	r2, [r7, #11]
 800836e:	429a      	cmp	r2, r3
 8008370:	d002      	beq.n	8008378 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 8008372:	2301      	movs	r3, #1
 8008374:	61fb      	str	r3, [r7, #28]
 8008376:	e006      	b.n	8008386 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 8008378:	7afb      	ldrb	r3, [r7, #11]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d103      	bne.n	8008386 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
						xBreakLoop = pdTRUE;
 8008382:	2301      	movs	r3, #1
 8008384:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d106      	bne.n	800839a <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	3301      	adds	r3, #1
 8008390:	623b      	str	r3, [r7, #32]
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	2b0f      	cmp	r3, #15
 8008396:	d9df      	bls.n	8008358 <prvSearchForNameWithinSingleList+0x78>
 8008398:	e000      	b.n	800839c <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800839a:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d104      	bne.n	80083ac <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d1bb      	bne.n	8008322 <prvSearchForNameWithinSingleList+0x42>
 80083aa:	e000      	b.n	80083ae <prvSearchForNameWithinSingleList+0xce>
					break;
 80083ac:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80083b0:	4618      	mov	r0, r3
 80083b2:	372c      	adds	r7, #44	; 0x2c
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 80083c4:	2338      	movs	r3, #56	; 0x38
 80083c6:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7f7 ff2b 	bl	8000224 <strlen>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b0f      	cmp	r3, #15
 80083d2:	d90a      	bls.n	80083ea <xTaskGetHandle+0x2e>
	__asm volatile
 80083d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d8:	f383 8811 	msr	BASEPRI, r3
 80083dc:	f3bf 8f6f 	isb	sy
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	60fb      	str	r3, [r7, #12]
}
 80083e6:	bf00      	nop
 80083e8:	e7fe      	b.n	80083e8 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 80083ea:	f7ff febd 	bl	8008168 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	4613      	mov	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4a1d      	ldr	r2, [pc, #116]	; (8008474 <xTaskGetHandle+0xb8>)
 8008400:	4413      	add	r3, r2
 8008402:	6879      	ldr	r1, [r7, #4]
 8008404:	4618      	mov	r0, r3
 8008406:	f7ff ff6b 	bl	80082e0 <prvSearchForNameWithinSingleList>
 800840a:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d103      	bne.n	800841a <xTaskGetHandle+0x5e>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1ea      	bne.n	80083ee <xTaskGetHandle+0x32>
 8008418:	e000      	b.n	800841c <xTaskGetHandle+0x60>
					break;
 800841a:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d106      	bne.n	8008430 <xTaskGetHandle+0x74>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8008422:	4b15      	ldr	r3, [pc, #84]	; (8008478 <xTaskGetHandle+0xbc>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	6879      	ldr	r1, [r7, #4]
 8008428:	4618      	mov	r0, r3
 800842a:	f7ff ff59 	bl	80082e0 <prvSearchForNameWithinSingleList>
 800842e:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d106      	bne.n	8008444 <xTaskGetHandle+0x88>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8008436:	4b11      	ldr	r3, [pc, #68]	; (800847c <xTaskGetHandle+0xc0>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6879      	ldr	r1, [r7, #4]
 800843c:	4618      	mov	r0, r3
 800843e:	f7ff ff4f 	bl	80082e0 <prvSearchForNameWithinSingleList>
 8008442:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d104      	bne.n	8008454 <xTaskGetHandle+0x98>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	480c      	ldr	r0, [pc, #48]	; (8008480 <xTaskGetHandle+0xc4>)
 800844e:	f7ff ff47 	bl	80082e0 <prvSearchForNameWithinSingleList>
 8008452:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d104      	bne.n	8008464 <xTaskGetHandle+0xa8>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	4809      	ldr	r0, [pc, #36]	; (8008484 <xTaskGetHandle+0xc8>)
 800845e:	f7ff ff3f 	bl	80082e0 <prvSearchForNameWithinSingleList>
 8008462:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 8008464:	f7ff fe8e 	bl	8008184 <xTaskResumeAll>

		return pxTCB;
 8008468:	693b      	ldr	r3, [r7, #16]
	}
 800846a:	4618      	mov	r0, r3
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	2000dacc 	.word	0x2000dacc
 8008478:	2000df54 	.word	0x2000df54
 800847c:	2000df58 	.word	0x2000df58
 8008480:	2000df88 	.word	0x2000df88
 8008484:	2000df70 	.word	0x2000df70

08008488 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8008494:	2300      	movs	r3, #0
 8008496:	617b      	str	r3, [r7, #20]
 8008498:	2338      	movs	r3, #56	; 0x38
 800849a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800849c:	f7ff fe64 	bl	8008168 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80084a0:	4b3a      	ldr	r3, [pc, #232]	; (800858c <uxTaskGetSystemState+0x104>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d368      	bcc.n	800857c <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	3b01      	subs	r3, #1
 80084ae:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	4613      	mov	r3, r2
 80084b4:	00db      	lsls	r3, r3, #3
 80084b6:	4413      	add	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	461a      	mov	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	1898      	adds	r0, r3, r2
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	4613      	mov	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4a31      	ldr	r2, [pc, #196]	; (8008590 <uxTaskGetSystemState+0x108>)
 80084cc:	4413      	add	r3, r2
 80084ce:	2201      	movs	r2, #1
 80084d0:	4619      	mov	r1, r3
 80084d2:	f000 fbd5 	bl	8008c80 <prvListTasksWithinSingleList>
 80084d6:	4602      	mov	r2, r0
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	4413      	add	r3, r2
 80084dc:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e2      	bne.n	80084aa <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	4613      	mov	r3, r2
 80084e8:	00db      	lsls	r3, r3, #3
 80084ea:	4413      	add	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	461a      	mov	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4413      	add	r3, r2
 80084f4:	4a27      	ldr	r2, [pc, #156]	; (8008594 <uxTaskGetSystemState+0x10c>)
 80084f6:	6811      	ldr	r1, [r2, #0]
 80084f8:	2202      	movs	r2, #2
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 fbc0 	bl	8008c80 <prvListTasksWithinSingleList>
 8008500:	4602      	mov	r2, r0
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	4413      	add	r3, r2
 8008506:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	4613      	mov	r3, r2
 800850c:	00db      	lsls	r3, r3, #3
 800850e:	4413      	add	r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	461a      	mov	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4413      	add	r3, r2
 8008518:	4a1f      	ldr	r2, [pc, #124]	; (8008598 <uxTaskGetSystemState+0x110>)
 800851a:	6811      	ldr	r1, [r2, #0]
 800851c:	2202      	movs	r2, #2
 800851e:	4618      	mov	r0, r3
 8008520:	f000 fbae 	bl	8008c80 <prvListTasksWithinSingleList>
 8008524:	4602      	mov	r2, r0
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	4413      	add	r3, r2
 800852a:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	4613      	mov	r3, r2
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	461a      	mov	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4413      	add	r3, r2
 800853c:	2204      	movs	r2, #4
 800853e:	4917      	ldr	r1, [pc, #92]	; (800859c <uxTaskGetSystemState+0x114>)
 8008540:	4618      	mov	r0, r3
 8008542:	f000 fb9d 	bl	8008c80 <prvListTasksWithinSingleList>
 8008546:	4602      	mov	r2, r0
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	4413      	add	r3, r2
 800854c:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	4613      	mov	r3, r2
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	461a      	mov	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4413      	add	r3, r2
 800855e:	2203      	movs	r2, #3
 8008560:	490f      	ldr	r1, [pc, #60]	; (80085a0 <uxTaskGetSystemState+0x118>)
 8008562:	4618      	mov	r0, r3
 8008564:	f000 fb8c 	bl	8008c80 <prvListTasksWithinSingleList>
 8008568:	4602      	mov	r2, r0
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	4413      	add	r3, r2
 800856e:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800857c:	f7ff fe02 	bl	8008184 <xTaskResumeAll>

		return uxTask;
 8008580:	697b      	ldr	r3, [r7, #20]
	}
 8008582:	4618      	mov	r0, r3
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	2000dfa0 	.word	0x2000dfa0
 8008590:	2000dacc 	.word	0x2000dacc
 8008594:	2000df54 	.word	0x2000df54
 8008598:	2000df58 	.word	0x2000df58
 800859c:	2000df70 	.word	0x2000df70
 80085a0:	2000df88 	.word	0x2000df88

080085a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085aa:	2300      	movs	r3, #0
 80085ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085ae:	4b4f      	ldr	r3, [pc, #316]	; (80086ec <xTaskIncrementTick+0x148>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f040 8089 	bne.w	80086ca <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085b8:	4b4d      	ldr	r3, [pc, #308]	; (80086f0 <xTaskIncrementTick+0x14c>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3301      	adds	r3, #1
 80085be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085c0:	4a4b      	ldr	r2, [pc, #300]	; (80086f0 <xTaskIncrementTick+0x14c>)
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d120      	bne.n	800860e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80085cc:	4b49      	ldr	r3, [pc, #292]	; (80086f4 <xTaskIncrementTick+0x150>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00a      	beq.n	80085ec <xTaskIncrementTick+0x48>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	603b      	str	r3, [r7, #0]
}
 80085e8:	bf00      	nop
 80085ea:	e7fe      	b.n	80085ea <xTaskIncrementTick+0x46>
 80085ec:	4b41      	ldr	r3, [pc, #260]	; (80086f4 <xTaskIncrementTick+0x150>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	60fb      	str	r3, [r7, #12]
 80085f2:	4b41      	ldr	r3, [pc, #260]	; (80086f8 <xTaskIncrementTick+0x154>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a3f      	ldr	r2, [pc, #252]	; (80086f4 <xTaskIncrementTick+0x150>)
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	4a3f      	ldr	r2, [pc, #252]	; (80086f8 <xTaskIncrementTick+0x154>)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6013      	str	r3, [r2, #0]
 8008600:	4b3e      	ldr	r3, [pc, #248]	; (80086fc <xTaskIncrementTick+0x158>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3301      	adds	r3, #1
 8008606:	4a3d      	ldr	r2, [pc, #244]	; (80086fc <xTaskIncrementTick+0x158>)
 8008608:	6013      	str	r3, [r2, #0]
 800860a:	f000 fbd7 	bl	8008dbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800860e:	4b3c      	ldr	r3, [pc, #240]	; (8008700 <xTaskIncrementTick+0x15c>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	429a      	cmp	r2, r3
 8008616:	d349      	bcc.n	80086ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008618:	4b36      	ldr	r3, [pc, #216]	; (80086f4 <xTaskIncrementTick+0x150>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d104      	bne.n	800862c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008622:	4b37      	ldr	r3, [pc, #220]	; (8008700 <xTaskIncrementTick+0x15c>)
 8008624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008628:	601a      	str	r2, [r3, #0]
					break;
 800862a:	e03f      	b.n	80086ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800862c:	4b31      	ldr	r3, [pc, #196]	; (80086f4 <xTaskIncrementTick+0x150>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	429a      	cmp	r2, r3
 8008642:	d203      	bcs.n	800864c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008644:	4a2e      	ldr	r2, [pc, #184]	; (8008700 <xTaskIncrementTick+0x15c>)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800864a:	e02f      	b.n	80086ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	3304      	adds	r3, #4
 8008650:	4618      	mov	r0, r3
 8008652:	f7fe fb9f 	bl	8006d94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	2b00      	cmp	r3, #0
 800865c:	d004      	beq.n	8008668 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	3318      	adds	r3, #24
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe fb96 	bl	8006d94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866c:	4b25      	ldr	r3, [pc, #148]	; (8008704 <xTaskIncrementTick+0x160>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	429a      	cmp	r2, r3
 8008672:	d903      	bls.n	800867c <xTaskIncrementTick+0xd8>
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008678:	4a22      	ldr	r2, [pc, #136]	; (8008704 <xTaskIncrementTick+0x160>)
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008680:	4613      	mov	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4a1f      	ldr	r2, [pc, #124]	; (8008708 <xTaskIncrementTick+0x164>)
 800868a:	441a      	add	r2, r3
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	3304      	adds	r3, #4
 8008690:	4619      	mov	r1, r3
 8008692:	4610      	mov	r0, r2
 8008694:	f7fe fb21 	bl	8006cda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800869c:	4b1b      	ldr	r3, [pc, #108]	; (800870c <xTaskIncrementTick+0x168>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d3b8      	bcc.n	8008618 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80086a6:	2301      	movs	r3, #1
 80086a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086aa:	e7b5      	b.n	8008618 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086ac:	4b17      	ldr	r3, [pc, #92]	; (800870c <xTaskIncrementTick+0x168>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b2:	4915      	ldr	r1, [pc, #84]	; (8008708 <xTaskIncrementTick+0x164>)
 80086b4:	4613      	mov	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	440b      	add	r3, r1
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d907      	bls.n	80086d4 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80086c4:	2301      	movs	r3, #1
 80086c6:	617b      	str	r3, [r7, #20]
 80086c8:	e004      	b.n	80086d4 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80086ca:	4b11      	ldr	r3, [pc, #68]	; (8008710 <xTaskIncrementTick+0x16c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3301      	adds	r3, #1
 80086d0:	4a0f      	ldr	r2, [pc, #60]	; (8008710 <xTaskIncrementTick+0x16c>)
 80086d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80086d4:	4b0f      	ldr	r3, [pc, #60]	; (8008714 <xTaskIncrementTick+0x170>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80086dc:	2301      	movs	r3, #1
 80086de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80086e0:	697b      	ldr	r3, [r7, #20]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	2000dfc8 	.word	0x2000dfc8
 80086f0:	2000dfa4 	.word	0x2000dfa4
 80086f4:	2000df54 	.word	0x2000df54
 80086f8:	2000df58 	.word	0x2000df58
 80086fc:	2000dfb8 	.word	0x2000dfb8
 8008700:	2000dfc0 	.word	0x2000dfc0
 8008704:	2000dfa8 	.word	0x2000dfa8
 8008708:	2000dacc 	.word	0x2000dacc
 800870c:	2000dac8 	.word	0x2000dac8
 8008710:	2000dfb0 	.word	0x2000dfb0
 8008714:	2000dfb4 	.word	0x2000dfb4

08008718 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800871e:	4b2d      	ldr	r3, [pc, #180]	; (80087d4 <vTaskSwitchContext+0xbc>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008726:	4b2c      	ldr	r3, [pc, #176]	; (80087d8 <vTaskSwitchContext+0xc0>)
 8008728:	2201      	movs	r2, #1
 800872a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800872c:	e04b      	b.n	80087c6 <vTaskSwitchContext+0xae>
		xYieldPending = pdFALSE;
 800872e:	4b2a      	ldr	r3, [pc, #168]	; (80087d8 <vTaskSwitchContext+0xc0>)
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 8008734:	4b29      	ldr	r3, [pc, #164]	; (80087dc <vTaskSwitchContext+0xc4>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a29      	ldr	r2, [pc, #164]	; (80087e0 <vTaskSwitchContext+0xc8>)
 800873a:	6812      	ldr	r2, [r2, #0]
 800873c:	661a      	str	r2, [r3, #96]	; 0x60
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800873e:	4b29      	ldr	r3, [pc, #164]	; (80087e4 <vTaskSwitchContext+0xcc>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	e010      	b.n	8008768 <vTaskSwitchContext+0x50>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10a      	bne.n	8008762 <vTaskSwitchContext+0x4a>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	607b      	str	r3, [r7, #4]
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <vTaskSwitchContext+0x48>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3b01      	subs	r3, #1
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	491f      	ldr	r1, [pc, #124]	; (80087e8 <vTaskSwitchContext+0xd0>)
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	4613      	mov	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	440b      	add	r3, r1
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0e4      	beq.n	8008746 <vTaskSwitchContext+0x2e>
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4613      	mov	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4a18      	ldr	r2, [pc, #96]	; (80087e8 <vTaskSwitchContext+0xd0>)
 8008788:	4413      	add	r3, r2
 800878a:	60bb      	str	r3, [r7, #8]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	605a      	str	r2, [r3, #4]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	685a      	ldr	r2, [r3, #4]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	3308      	adds	r3, #8
 800879e:	429a      	cmp	r2, r3
 80087a0:	d104      	bne.n	80087ac <vTaskSwitchContext+0x94>
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	605a      	str	r2, [r3, #4]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	4a0a      	ldr	r2, [pc, #40]	; (80087dc <vTaskSwitchContext+0xc4>)
 80087b4:	6013      	str	r3, [r2, #0]
 80087b6:	4a0b      	ldr	r2, [pc, #44]	; (80087e4 <vTaskSwitchContext+0xcc>)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 80087bc:	4b07      	ldr	r3, [pc, #28]	; (80087dc <vTaskSwitchContext+0xc4>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087c2:	4a07      	ldr	r2, [pc, #28]	; (80087e0 <vTaskSwitchContext+0xc8>)
 80087c4:	6013      	str	r3, [r2, #0]
}
 80087c6:	bf00      	nop
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	2000dfc8 	.word	0x2000dfc8
 80087d8:	2000dfb4 	.word	0x2000dfb4
 80087dc:	2000dac8 	.word	0x2000dac8
 80087e0:	2000df9c 	.word	0x2000df9c
 80087e4:	2000dfa8 	.word	0x2000dfa8
 80087e8:	2000dacc 	.word	0x2000dacc

080087ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10a      	bne.n	8008812 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	60fb      	str	r3, [r7, #12]
}
 800880e:	bf00      	nop
 8008810:	e7fe      	b.n	8008810 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008812:	4b07      	ldr	r3, [pc, #28]	; (8008830 <vTaskPlaceOnEventList+0x44>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3318      	adds	r3, #24
 8008818:	4619      	mov	r1, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7fe fa81 	bl	8006d22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008820:	2101      	movs	r1, #1
 8008822:	6838      	ldr	r0, [r7, #0]
 8008824:	f000 fd40 	bl	80092a8 <prvAddCurrentTaskToDelayedList>
}
 8008828:	bf00      	nop
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	2000dac8 	.word	0x2000dac8

08008834 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10a      	bne.n	800885c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	617b      	str	r3, [r7, #20]
}
 8008858:	bf00      	nop
 800885a:	e7fe      	b.n	800885a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800885c:	4b0a      	ldr	r3, [pc, #40]	; (8008888 <vTaskPlaceOnEventListRestricted+0x54>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3318      	adds	r3, #24
 8008862:	4619      	mov	r1, r3
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f7fe fa38 	bl	8006cda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008874:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008876:	6879      	ldr	r1, [r7, #4]
 8008878:	68b8      	ldr	r0, [r7, #8]
 800887a:	f000 fd15 	bl	80092a8 <prvAddCurrentTaskToDelayedList>
	}
 800887e:	bf00      	nop
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	2000dac8 	.word	0x2000dac8

0800888c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10a      	bne.n	80088b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	60fb      	str	r3, [r7, #12]
}
 80088b4:	bf00      	nop
 80088b6:	e7fe      	b.n	80088b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	3318      	adds	r3, #24
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe fa69 	bl	8006d94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088c2:	4b1e      	ldr	r3, [pc, #120]	; (800893c <xTaskRemoveFromEventList+0xb0>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d11d      	bne.n	8008906 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	3304      	adds	r3, #4
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe fa60 	bl	8006d94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d8:	4b19      	ldr	r3, [pc, #100]	; (8008940 <xTaskRemoveFromEventList+0xb4>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d903      	bls.n	80088e8 <xTaskRemoveFromEventList+0x5c>
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e4:	4a16      	ldr	r2, [pc, #88]	; (8008940 <xTaskRemoveFromEventList+0xb4>)
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ec:	4613      	mov	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4a13      	ldr	r2, [pc, #76]	; (8008944 <xTaskRemoveFromEventList+0xb8>)
 80088f6:	441a      	add	r2, r3
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	3304      	adds	r3, #4
 80088fc:	4619      	mov	r1, r3
 80088fe:	4610      	mov	r0, r2
 8008900:	f7fe f9eb 	bl	8006cda <vListInsertEnd>
 8008904:	e005      	b.n	8008912 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	3318      	adds	r3, #24
 800890a:	4619      	mov	r1, r3
 800890c:	480e      	ldr	r0, [pc, #56]	; (8008948 <xTaskRemoveFromEventList+0xbc>)
 800890e:	f7fe f9e4 	bl	8006cda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008916:	4b0d      	ldr	r3, [pc, #52]	; (800894c <xTaskRemoveFromEventList+0xc0>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	429a      	cmp	r2, r3
 800891e:	d905      	bls.n	800892c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008920:	2301      	movs	r3, #1
 8008922:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008924:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <xTaskRemoveFromEventList+0xc4>)
 8008926:	2201      	movs	r2, #1
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	e001      	b.n	8008930 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800892c:	2300      	movs	r3, #0
 800892e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008930:	697b      	ldr	r3, [r7, #20]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3718      	adds	r7, #24
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	2000dfc8 	.word	0x2000dfc8
 8008940:	2000dfa8 	.word	0x2000dfa8
 8008944:	2000dacc 	.word	0x2000dacc
 8008948:	2000df5c 	.word	0x2000df5c
 800894c:	2000dac8 	.word	0x2000dac8
 8008950:	2000dfb4 	.word	0x2000dfb4

08008954 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10a      	bne.n	8008978 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8008962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	60fb      	str	r3, [r7, #12]
}
 8008974:	bf00      	nop
 8008976:	e7fe      	b.n	8008976 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008978:	f001 f964 	bl	8009c44 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800897c:	4b06      	ldr	r3, [pc, #24]	; (8008998 <vTaskSetTimeOutState+0x44>)
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008984:	4b05      	ldr	r3, [pc, #20]	; (800899c <vTaskSetTimeOutState+0x48>)
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800898c:	f001 f98a 	bl	8009ca4 <vPortExitCritical>
}
 8008990:	bf00      	nop
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	2000dfb8 	.word	0x2000dfb8
 800899c:	2000dfa4 	.word	0x2000dfa4

080089a0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80089a8:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <vTaskInternalSetTimeOutState+0x24>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80089b0:	4b05      	ldr	r3, [pc, #20]	; (80089c8 <vTaskInternalSetTimeOutState+0x28>)
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	605a      	str	r2, [r3, #4]
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	2000dfb8 	.word	0x2000dfb8
 80089c8:	2000dfa4 	.word	0x2000dfa4

080089cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b088      	sub	sp, #32
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10a      	bne.n	80089f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80089dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e0:	f383 8811 	msr	BASEPRI, r3
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	613b      	str	r3, [r7, #16]
}
 80089ee:	bf00      	nop
 80089f0:	e7fe      	b.n	80089f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10a      	bne.n	8008a0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	60fb      	str	r3, [r7, #12]
}
 8008a0a:	bf00      	nop
 8008a0c:	e7fe      	b.n	8008a0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008a0e:	f001 f919 	bl	8009c44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a12:	4b1d      	ldr	r3, [pc, #116]	; (8008a88 <xTaskCheckForTimeOut+0xbc>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	69ba      	ldr	r2, [r7, #24]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a2a:	d102      	bne.n	8008a32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	61fb      	str	r3, [r7, #28]
 8008a30:	e023      	b.n	8008a7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	4b15      	ldr	r3, [pc, #84]	; (8008a8c <xTaskCheckForTimeOut+0xc0>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d007      	beq.n	8008a4e <xTaskCheckForTimeOut+0x82>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d302      	bcc.n	8008a4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	61fb      	str	r3, [r7, #28]
 8008a4c:	e015      	b.n	8008a7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d20b      	bcs.n	8008a70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	1ad2      	subs	r2, r2, r3
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7ff ff9b 	bl	80089a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	61fb      	str	r3, [r7, #28]
 8008a6e:	e004      	b.n	8008a7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	2200      	movs	r2, #0
 8008a74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a76:	2301      	movs	r3, #1
 8008a78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a7a:	f001 f913 	bl	8009ca4 <vPortExitCritical>

	return xReturn;
 8008a7e:	69fb      	ldr	r3, [r7, #28]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3720      	adds	r7, #32
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	2000dfa4 	.word	0x2000dfa4
 8008a8c:	2000dfb8 	.word	0x2000dfb8

08008a90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a90:	b480      	push	{r7}
 8008a92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a94:	4b03      	ldr	r3, [pc, #12]	; (8008aa4 <vTaskMissedYield+0x14>)
 8008a96:	2201      	movs	r2, #1
 8008a98:	601a      	str	r2, [r3, #0]
}
 8008a9a:	bf00      	nop
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	2000dfb4 	.word	0x2000dfb4

08008aa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ab0:	f000 f852 	bl	8008b58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ab4:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <prvIdleTask+0x28>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d9f9      	bls.n	8008ab0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008abc:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <prvIdleTask+0x2c>)
 8008abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008acc:	e7f0      	b.n	8008ab0 <prvIdleTask+0x8>
 8008ace:	bf00      	nop
 8008ad0:	2000dacc 	.word	0x2000dacc
 8008ad4:	e000ed04 	.word	0xe000ed04

08008ad8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ade:	2300      	movs	r3, #0
 8008ae0:	607b      	str	r3, [r7, #4]
 8008ae2:	e00c      	b.n	8008afe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4a12      	ldr	r2, [pc, #72]	; (8008b38 <prvInitialiseTaskLists+0x60>)
 8008af0:	4413      	add	r3, r2
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fe f8c4 	bl	8006c80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	3301      	adds	r3, #1
 8008afc:	607b      	str	r3, [r7, #4]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b37      	cmp	r3, #55	; 0x37
 8008b02:	d9ef      	bls.n	8008ae4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b04:	480d      	ldr	r0, [pc, #52]	; (8008b3c <prvInitialiseTaskLists+0x64>)
 8008b06:	f7fe f8bb 	bl	8006c80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b0a:	480d      	ldr	r0, [pc, #52]	; (8008b40 <prvInitialiseTaskLists+0x68>)
 8008b0c:	f7fe f8b8 	bl	8006c80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b10:	480c      	ldr	r0, [pc, #48]	; (8008b44 <prvInitialiseTaskLists+0x6c>)
 8008b12:	f7fe f8b5 	bl	8006c80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b16:	480c      	ldr	r0, [pc, #48]	; (8008b48 <prvInitialiseTaskLists+0x70>)
 8008b18:	f7fe f8b2 	bl	8006c80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b1c:	480b      	ldr	r0, [pc, #44]	; (8008b4c <prvInitialiseTaskLists+0x74>)
 8008b1e:	f7fe f8af 	bl	8006c80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b22:	4b0b      	ldr	r3, [pc, #44]	; (8008b50 <prvInitialiseTaskLists+0x78>)
 8008b24:	4a05      	ldr	r2, [pc, #20]	; (8008b3c <prvInitialiseTaskLists+0x64>)
 8008b26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b28:	4b0a      	ldr	r3, [pc, #40]	; (8008b54 <prvInitialiseTaskLists+0x7c>)
 8008b2a:	4a05      	ldr	r2, [pc, #20]	; (8008b40 <prvInitialiseTaskLists+0x68>)
 8008b2c:	601a      	str	r2, [r3, #0]
}
 8008b2e:	bf00      	nop
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	2000dacc 	.word	0x2000dacc
 8008b3c:	2000df2c 	.word	0x2000df2c
 8008b40:	2000df40 	.word	0x2000df40
 8008b44:	2000df5c 	.word	0x2000df5c
 8008b48:	2000df70 	.word	0x2000df70
 8008b4c:	2000df88 	.word	0x2000df88
 8008b50:	2000df54 	.word	0x2000df54
 8008b54:	2000df58 	.word	0x2000df58

08008b58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b5e:	e019      	b.n	8008b94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b60:	f001 f870 	bl	8009c44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b64:	4b10      	ldr	r3, [pc, #64]	; (8008ba8 <prvCheckTasksWaitingTermination+0x50>)
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3304      	adds	r3, #4
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fe f90f 	bl	8006d94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b76:	4b0d      	ldr	r3, [pc, #52]	; (8008bac <prvCheckTasksWaitingTermination+0x54>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	4a0b      	ldr	r2, [pc, #44]	; (8008bac <prvCheckTasksWaitingTermination+0x54>)
 8008b7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b80:	4b0b      	ldr	r3, [pc, #44]	; (8008bb0 <prvCheckTasksWaitingTermination+0x58>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	4a0a      	ldr	r2, [pc, #40]	; (8008bb0 <prvCheckTasksWaitingTermination+0x58>)
 8008b88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b8a:	f001 f88b 	bl	8009ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f8e4 	bl	8008d5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b94:	4b06      	ldr	r3, [pc, #24]	; (8008bb0 <prvCheckTasksWaitingTermination+0x58>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1e1      	bne.n	8008b60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b9c:	bf00      	nop
 8008b9e:	bf00      	nop
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	2000df70 	.word	0x2000df70
 8008bac:	2000dfa0 	.word	0x2000dfa0
 8008bb0:	2000df84 	.word	0x2000df84

08008bb4 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d102      	bne.n	8008bce <vTaskGetInfo+0x1a>
 8008bc8:	4b2c      	ldr	r3, [pc, #176]	; (8008c7c <vTaskGetInfo+0xc8>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	e000      	b.n	8008bd0 <vTaskGetInfo+0x1c>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	2200      	movs	r2, #0
 8008c06:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	2b05      	cmp	r3, #5
 8008c0c:	d01a      	beq.n	8008c44 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 8008c0e:	4b1b      	ldr	r3, [pc, #108]	; (8008c7c <vTaskGetInfo+0xc8>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d103      	bne.n	8008c20 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	731a      	strb	r2, [r3, #12]
 8008c1e:	e018      	b.n	8008c52 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	78fa      	ldrb	r2, [r7, #3]
 8008c24:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8008c26:	78fb      	ldrb	r3, [r7, #3]
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d112      	bne.n	8008c52 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 8008c2c:	f7ff fa9c 	bl	8008168 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8008c3e:	f7ff faa1 	bl	8008184 <xTaskResumeAll>
 8008c42:	e006      	b.n	8008c52 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8008c44:	6978      	ldr	r0, [r7, #20]
 8008c46:	f7ff f9c3 	bl	8007fd0 <eTaskGetState>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d009      	beq.n	8008c6c <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f000 f861 	bl	8008d24 <prvTaskCheckFreeStackSpace>
 8008c62:	4603      	mov	r3, r0
 8008c64:	461a      	mov	r2, r3
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8008c6a:	e002      	b.n	8008c72 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	841a      	strh	r2, [r3, #32]
	}
 8008c72:	bf00      	nop
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	2000dac8 	.word	0x2000dac8

08008c80 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08a      	sub	sp, #40	; 0x28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d03f      	beq.n	8008d1a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	623b      	str	r3, [r7, #32]
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	685a      	ldr	r2, [r3, #4]
 8008ca4:	6a3b      	ldr	r3, [r7, #32]
 8008ca6:	605a      	str	r2, [r3, #4]
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	3308      	adds	r3, #8
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d104      	bne.n	8008cbe <prvListTasksWithinSingleList+0x3e>
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	6a3b      	ldr	r3, [r7, #32]
 8008cbc:	605a      	str	r2, [r3, #4]
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	61bb      	str	r3, [r7, #24]
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	605a      	str	r2, [r3, #4]
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	3308      	adds	r3, #8
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d104      	bne.n	8008cea <prvListTasksWithinSingleList+0x6a>
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	605a      	str	r2, [r3, #4]
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8008cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	4413      	add	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	1899      	adds	r1, r3, r2
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	2201      	movs	r2, #1
 8008d06:	6978      	ldr	r0, [r7, #20]
 8008d08:	f7ff ff54 	bl	8008bb4 <vTaskGetInfo>
				uxTask++;
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0e:	3301      	adds	r3, #1
 8008d10:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d1d5      	bne.n	8008cc6 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3728      	adds	r7, #40	; 0x28
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008d30:	e005      	b.n	8008d3e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	3301      	adds	r3, #1
 8008d36:	607b      	str	r3, [r7, #4]
			ulCount++;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	2ba5      	cmp	r3, #165	; 0xa5
 8008d44:	d0f5      	beq.n	8008d32 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	089b      	lsrs	r3, r3, #2
 8008d4a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	b29b      	uxth	r3, r3
	}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d108      	bne.n	8008d80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7f8 fd80 	bl	8001878 <vPortFree>
				vPortFree( pxTCB );
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7f8 fd7d 	bl	8001878 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d7e:	e018      	b.n	8008db2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d103      	bne.n	8008d92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7f8 fd74 	bl	8001878 <vPortFree>
	}
 8008d90:	e00f      	b.n	8008db2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d00a      	beq.n	8008db2 <prvDeleteTCB+0x56>
	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	60fb      	str	r3, [r7, #12]
}
 8008dae:	bf00      	nop
 8008db0:	e7fe      	b.n	8008db0 <prvDeleteTCB+0x54>
	}
 8008db2:	bf00      	nop
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
	...

08008dbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dc2:	4b0c      	ldr	r3, [pc, #48]	; (8008df4 <prvResetNextTaskUnblockTime+0x38>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d104      	bne.n	8008dd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008dcc:	4b0a      	ldr	r3, [pc, #40]	; (8008df8 <prvResetNextTaskUnblockTime+0x3c>)
 8008dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008dd4:	e008      	b.n	8008de8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dd6:	4b07      	ldr	r3, [pc, #28]	; (8008df4 <prvResetNextTaskUnblockTime+0x38>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	4a04      	ldr	r2, [pc, #16]	; (8008df8 <prvResetNextTaskUnblockTime+0x3c>)
 8008de6:	6013      	str	r3, [r2, #0]
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	2000df54 	.word	0x2000df54
 8008df8:	2000dfc0 	.word	0x2000dfc0

08008dfc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008e02:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <xTaskGetCurrentTaskHandle+0x1c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008e08:	687b      	ldr	r3, [r7, #4]
	}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	2000dac8 	.word	0x2000dac8

08008e1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e22:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <xTaskGetSchedulerState+0x34>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d102      	bne.n	8008e30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	607b      	str	r3, [r7, #4]
 8008e2e:	e008      	b.n	8008e42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e30:	4b08      	ldr	r3, [pc, #32]	; (8008e54 <xTaskGetSchedulerState+0x38>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d102      	bne.n	8008e3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e38:	2302      	movs	r3, #2
 8008e3a:	607b      	str	r3, [r7, #4]
 8008e3c:	e001      	b.n	8008e42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e42:	687b      	ldr	r3, [r7, #4]
	}
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	2000dfac 	.word	0x2000dfac
 8008e54:	2000dfc8 	.word	0x2000dfc8

08008e58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d051      	beq.n	8008f12 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e72:	4b2a      	ldr	r3, [pc, #168]	; (8008f1c <xTaskPriorityInherit+0xc4>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d241      	bcs.n	8008f00 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	db06      	blt.n	8008e92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e84:	4b25      	ldr	r3, [pc, #148]	; (8008f1c <xTaskPriorityInherit+0xc4>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	6959      	ldr	r1, [r3, #20]
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4a1f      	ldr	r2, [pc, #124]	; (8008f20 <xTaskPriorityInherit+0xc8>)
 8008ea4:	4413      	add	r3, r2
 8008ea6:	4299      	cmp	r1, r3
 8008ea8:	d122      	bne.n	8008ef0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	3304      	adds	r3, #4
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fd ff70 	bl	8006d94 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008eb4:	4b19      	ldr	r3, [pc, #100]	; (8008f1c <xTaskPriorityInherit+0xc4>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec2:	4b18      	ldr	r3, [pc, #96]	; (8008f24 <xTaskPriorityInherit+0xcc>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d903      	bls.n	8008ed2 <xTaskPriorityInherit+0x7a>
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ece:	4a15      	ldr	r2, [pc, #84]	; (8008f24 <xTaskPriorityInherit+0xcc>)
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4a10      	ldr	r2, [pc, #64]	; (8008f20 <xTaskPriorityInherit+0xc8>)
 8008ee0:	441a      	add	r2, r3
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4610      	mov	r0, r2
 8008eea:	f7fd fef6 	bl	8006cda <vListInsertEnd>
 8008eee:	e004      	b.n	8008efa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ef0:	4b0a      	ldr	r3, [pc, #40]	; (8008f1c <xTaskPriorityInherit+0xc4>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008efa:	2301      	movs	r3, #1
 8008efc:	60fb      	str	r3, [r7, #12]
 8008efe:	e008      	b.n	8008f12 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f04:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <xTaskPriorityInherit+0xc4>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d201      	bcs.n	8008f12 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f12:	68fb      	ldr	r3, [r7, #12]
	}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	2000dac8 	.word	0x2000dac8
 8008f20:	2000dacc 	.word	0x2000dacc
 8008f24:	2000dfa8 	.word	0x2000dfa8

08008f28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f34:	2300      	movs	r3, #0
 8008f36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d056      	beq.n	8008fec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f3e:	4b2e      	ldr	r3, [pc, #184]	; (8008ff8 <xTaskPriorityDisinherit+0xd0>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d00a      	beq.n	8008f5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4c:	f383 8811 	msr	BASEPRI, r3
 8008f50:	f3bf 8f6f 	isb	sy
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	60fb      	str	r3, [r7, #12]
}
 8008f5a:	bf00      	nop
 8008f5c:	e7fe      	b.n	8008f5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10a      	bne.n	8008f7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	60bb      	str	r3, [r7, #8]
}
 8008f78:	bf00      	nop
 8008f7a:	e7fe      	b.n	8008f7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f80:	1e5a      	subs	r2, r3, #1
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d02c      	beq.n	8008fec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d128      	bne.n	8008fec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fd fef8 	bl	8006d94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbc:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <xTaskPriorityDisinherit+0xd4>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d903      	bls.n	8008fcc <xTaskPriorityDisinherit+0xa4>
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc8:	4a0c      	ldr	r2, [pc, #48]	; (8008ffc <xTaskPriorityDisinherit+0xd4>)
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	4413      	add	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4a09      	ldr	r2, [pc, #36]	; (8009000 <xTaskPriorityDisinherit+0xd8>)
 8008fda:	441a      	add	r2, r3
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	3304      	adds	r3, #4
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	f7fd fe79 	bl	8006cda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fec:	697b      	ldr	r3, [r7, #20]
	}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	2000dac8 	.word	0x2000dac8
 8008ffc:	2000dfa8 	.word	0x2000dfa8
 8009000:	2000dacc 	.word	0x2000dacc

08009004 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009012:	2301      	movs	r3, #1
 8009014:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d06a      	beq.n	80090f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10a      	bne.n	800903a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	60fb      	str	r3, [r7, #12]
}
 8009036:	bf00      	nop
 8009038:	e7fe      	b.n	8009038 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	429a      	cmp	r2, r3
 8009042:	d902      	bls.n	800904a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	61fb      	str	r3, [r7, #28]
 8009048:	e002      	b.n	8009050 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800904e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009054:	69fa      	ldr	r2, [r7, #28]
 8009056:	429a      	cmp	r2, r3
 8009058:	d04b      	beq.n	80090f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	429a      	cmp	r2, r3
 8009062:	d146      	bne.n	80090f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009064:	4b25      	ldr	r3, [pc, #148]	; (80090fc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	429a      	cmp	r2, r3
 800906c:	d10a      	bne.n	8009084 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	60bb      	str	r3, [r7, #8]
}
 8009080:	bf00      	nop
 8009082:	e7fe      	b.n	8009082 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009088:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	69fa      	ldr	r2, [r7, #28]
 800908e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	2b00      	cmp	r3, #0
 8009096:	db04      	blt.n	80090a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	6959      	ldr	r1, [r3, #20]
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	4613      	mov	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4a13      	ldr	r2, [pc, #76]	; (8009100 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80090b2:	4413      	add	r3, r2
 80090b4:	4299      	cmp	r1, r3
 80090b6:	d11c      	bne.n	80090f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	3304      	adds	r3, #4
 80090bc:	4618      	mov	r0, r3
 80090be:	f7fd fe69 	bl	8006d94 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c6:	4b0f      	ldr	r3, [pc, #60]	; (8009104 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d903      	bls.n	80090d6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d2:	4a0c      	ldr	r2, [pc, #48]	; (8009104 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80090d4:	6013      	str	r3, [r2, #0]
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090da:	4613      	mov	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4413      	add	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4a07      	ldr	r2, [pc, #28]	; (8009100 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80090e4:	441a      	add	r2, r3
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	3304      	adds	r3, #4
 80090ea:	4619      	mov	r1, r3
 80090ec:	4610      	mov	r0, r2
 80090ee:	f7fd fdf4 	bl	8006cda <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090f2:	bf00      	nop
 80090f4:	3720      	adds	r7, #32
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	2000dac8 	.word	0x2000dac8
 8009100:	2000dacc 	.word	0x2000dacc
 8009104:	2000dfa8 	.word	0x2000dfa8

08009108 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f019 f849 	bl	80221ac <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7f7 f882 	bl	8000224 <strlen>
 8009120:	60f8      	str	r0, [r7, #12]
 8009122:	e007      	b.n	8009134 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	4413      	add	r3, r2
 800912a:	2220      	movs	r2, #32
 800912c:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3301      	adds	r3, #1
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2b0e      	cmp	r3, #14
 8009138:	d9f4      	bls.n	8009124 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4413      	add	r3, r2
 8009140:	2200      	movs	r2, #0
 8009142:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	4413      	add	r3, r2
	}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
	...

08009154 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8009154:	b590      	push	{r4, r7, lr}
 8009156:	b089      	sub	sp, #36	; 0x24
 8009158:	af02      	add	r7, sp, #8
 800915a:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8009162:	4b45      	ldr	r3, [pc, #276]	; (8009278 <vTaskList+0x124>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8009168:	4b43      	ldr	r3, [pc, #268]	; (8009278 <vTaskList+0x124>)
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	4613      	mov	r3, r2
 800916e:	00db      	lsls	r3, r3, #3
 8009170:	4413      	add	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4618      	mov	r0, r3
 8009176:	f7f8 fabb 	bl	80016f0 <pvPortMalloc>
 800917a:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d076      	beq.n	8009270 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8009182:	2200      	movs	r2, #0
 8009184:	68f9      	ldr	r1, [r7, #12]
 8009186:	68b8      	ldr	r0, [r7, #8]
 8009188:	f7ff f97e 	bl	8008488 <uxTaskGetSystemState>
 800918c:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800918e:	2300      	movs	r3, #0
 8009190:	617b      	str	r3, [r7, #20]
 8009192:	e066      	b.n	8009262 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	4613      	mov	r3, r2
 8009198:	00db      	lsls	r3, r3, #3
 800919a:	4413      	add	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	461a      	mov	r2, r3
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	4413      	add	r3, r2
 80091a4:	7b1b      	ldrb	r3, [r3, #12]
 80091a6:	2b04      	cmp	r3, #4
 80091a8:	d81b      	bhi.n	80091e2 <vTaskList+0x8e>
 80091aa:	a201      	add	r2, pc, #4	; (adr r2, 80091b0 <vTaskList+0x5c>)
 80091ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b0:	080091c5 	.word	0x080091c5
 80091b4:	080091cb 	.word	0x080091cb
 80091b8:	080091d1 	.word	0x080091d1
 80091bc:	080091d7 	.word	0x080091d7
 80091c0:	080091dd 	.word	0x080091dd
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 80091c4:	2358      	movs	r3, #88	; 0x58
 80091c6:	74fb      	strb	r3, [r7, #19]
										break;
 80091c8:	e00e      	b.n	80091e8 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 80091ca:	2352      	movs	r3, #82	; 0x52
 80091cc:	74fb      	strb	r3, [r7, #19]
										break;
 80091ce:	e00b      	b.n	80091e8 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80091d0:	2342      	movs	r3, #66	; 0x42
 80091d2:	74fb      	strb	r3, [r7, #19]
										break;
 80091d4:	e008      	b.n	80091e8 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80091d6:	2353      	movs	r3, #83	; 0x53
 80091d8:	74fb      	strb	r3, [r7, #19]
										break;
 80091da:	e005      	b.n	80091e8 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 80091dc:	2344      	movs	r3, #68	; 0x44
 80091de:	74fb      	strb	r3, [r7, #19]
										break;
 80091e0:	e002      	b.n	80091e8 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 80091e2:	2300      	movs	r3, #0
 80091e4:	74fb      	strb	r3, [r7, #19]
										break;
 80091e6:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	4613      	mov	r3, r2
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	461a      	mov	r2, r3
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	4413      	add	r3, r2
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7ff ff83 	bl	8009108 <prvWriteNameToBuffer>
 8009202:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8009204:	7cf9      	ldrb	r1, [r7, #19]
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	4613      	mov	r3, r2
 800920a:	00db      	lsls	r3, r3, #3
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	461a      	mov	r2, r3
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	4413      	add	r3, r2
 8009216:	6918      	ldr	r0, [r3, #16]
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	4613      	mov	r3, r2
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	4413      	add	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	461a      	mov	r2, r3
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	4413      	add	r3, r2
 8009228:	8c1b      	ldrh	r3, [r3, #32]
 800922a:	461c      	mov	r4, r3
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	4613      	mov	r3, r2
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	461a      	mov	r2, r3
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	4413      	add	r3, r2
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	9301      	str	r3, [sp, #4]
 8009240:	9400      	str	r4, [sp, #0]
 8009242:	4603      	mov	r3, r0
 8009244:	460a      	mov	r2, r1
 8009246:	490d      	ldr	r1, [pc, #52]	; (800927c <vTaskList+0x128>)
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f018 ff3f 	bl	80220cc <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7f6 ffe8 	bl	8000224 <strlen>
 8009254:	4602      	mov	r2, r0
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4413      	add	r3, r2
 800925a:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	3301      	adds	r3, #1
 8009260:	617b      	str	r3, [r7, #20]
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	429a      	cmp	r2, r3
 8009268:	d394      	bcc.n	8009194 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800926a:	68b8      	ldr	r0, [r7, #8]
 800926c:	f7f8 fb04 	bl	8001878 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009270:	bf00      	nop
 8009272:	371c      	adds	r7, #28
 8009274:	46bd      	mov	sp, r7
 8009276:	bd90      	pop	{r4, r7, pc}
 8009278:	2000dfa0 	.word	0x2000dfa0
 800927c:	08025880 	.word	0x08025880

08009280 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009280:	b480      	push	{r7}
 8009282:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009284:	4b07      	ldr	r3, [pc, #28]	; (80092a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d004      	beq.n	8009296 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800928c:	4b05      	ldr	r3, [pc, #20]	; (80092a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009292:	3201      	adds	r2, #1
 8009294:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009296:	4b03      	ldr	r3, [pc, #12]	; (80092a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009298:	681b      	ldr	r3, [r3, #0]
	}
 800929a:	4618      	mov	r0, r3
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	2000dac8 	.word	0x2000dac8

080092a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80092b2:	4b21      	ldr	r3, [pc, #132]	; (8009338 <prvAddCurrentTaskToDelayedList+0x90>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092b8:	4b20      	ldr	r3, [pc, #128]	; (800933c <prvAddCurrentTaskToDelayedList+0x94>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3304      	adds	r3, #4
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fd fd68 	bl	8006d94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092ca:	d10a      	bne.n	80092e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d007      	beq.n	80092e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092d2:	4b1a      	ldr	r3, [pc, #104]	; (800933c <prvAddCurrentTaskToDelayedList+0x94>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3304      	adds	r3, #4
 80092d8:	4619      	mov	r1, r3
 80092da:	4819      	ldr	r0, [pc, #100]	; (8009340 <prvAddCurrentTaskToDelayedList+0x98>)
 80092dc:	f7fd fcfd 	bl	8006cda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80092e0:	e026      	b.n	8009330 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4413      	add	r3, r2
 80092e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80092ea:	4b14      	ldr	r3, [pc, #80]	; (800933c <prvAddCurrentTaskToDelayedList+0x94>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d209      	bcs.n	800930e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092fa:	4b12      	ldr	r3, [pc, #72]	; (8009344 <prvAddCurrentTaskToDelayedList+0x9c>)
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	4b0f      	ldr	r3, [pc, #60]	; (800933c <prvAddCurrentTaskToDelayedList+0x94>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3304      	adds	r3, #4
 8009304:	4619      	mov	r1, r3
 8009306:	4610      	mov	r0, r2
 8009308:	f7fd fd0b 	bl	8006d22 <vListInsert>
}
 800930c:	e010      	b.n	8009330 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800930e:	4b0e      	ldr	r3, [pc, #56]	; (8009348 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	4b0a      	ldr	r3, [pc, #40]	; (800933c <prvAddCurrentTaskToDelayedList+0x94>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3304      	adds	r3, #4
 8009318:	4619      	mov	r1, r3
 800931a:	4610      	mov	r0, r2
 800931c:	f7fd fd01 	bl	8006d22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009320:	4b0a      	ldr	r3, [pc, #40]	; (800934c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	429a      	cmp	r2, r3
 8009328:	d202      	bcs.n	8009330 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800932a:	4a08      	ldr	r2, [pc, #32]	; (800934c <prvAddCurrentTaskToDelayedList+0xa4>)
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	6013      	str	r3, [r2, #0]
}
 8009330:	bf00      	nop
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	2000dfa4 	.word	0x2000dfa4
 800933c:	2000dac8 	.word	0x2000dac8
 8009340:	2000df88 	.word	0x2000df88
 8009344:	2000df58 	.word	0x2000df58
 8009348:	2000df54 	.word	0x2000df54
 800934c:	2000dfc0 	.word	0x2000dfc0

08009350 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b08a      	sub	sp, #40	; 0x28
 8009354:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009356:	2300      	movs	r3, #0
 8009358:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800935a:	f000 fb07 	bl	800996c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800935e:	4b1c      	ldr	r3, [pc, #112]	; (80093d0 <xTimerCreateTimerTask+0x80>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d021      	beq.n	80093aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009366:	2300      	movs	r3, #0
 8009368:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800936a:	2300      	movs	r3, #0
 800936c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800936e:	1d3a      	adds	r2, r7, #4
 8009370:	f107 0108 	add.w	r1, r7, #8
 8009374:	f107 030c 	add.w	r3, r7, #12
 8009378:	4618      	mov	r0, r3
 800937a:	f7fd fc67 	bl	8006c4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800937e:	6879      	ldr	r1, [r7, #4]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	9202      	str	r2, [sp, #8]
 8009386:	9301      	str	r3, [sp, #4]
 8009388:	2302      	movs	r3, #2
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	2300      	movs	r3, #0
 800938e:	460a      	mov	r2, r1
 8009390:	4910      	ldr	r1, [pc, #64]	; (80093d4 <xTimerCreateTimerTask+0x84>)
 8009392:	4811      	ldr	r0, [pc, #68]	; (80093d8 <xTimerCreateTimerTask+0x88>)
 8009394:	f7fe fbd2 	bl	8007b3c <xTaskCreateStatic>
 8009398:	4603      	mov	r3, r0
 800939a:	4a10      	ldr	r2, [pc, #64]	; (80093dc <xTimerCreateTimerTask+0x8c>)
 800939c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800939e:	4b0f      	ldr	r3, [pc, #60]	; (80093dc <xTimerCreateTimerTask+0x8c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80093a6:	2301      	movs	r3, #1
 80093a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10a      	bne.n	80093c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	613b      	str	r3, [r7, #16]
}
 80093c2:	bf00      	nop
 80093c4:	e7fe      	b.n	80093c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80093c6:	697b      	ldr	r3, [r7, #20]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	2000dffc 	.word	0x2000dffc
 80093d4:	08025890 	.word	0x08025890
 80093d8:	08009515 	.word	0x08009515
 80093dc:	2000e000 	.word	0x2000e000

080093e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b08a      	sub	sp, #40	; 0x28
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80093ee:	2300      	movs	r3, #0
 80093f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10a      	bne.n	800940e <xTimerGenericCommand+0x2e>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	623b      	str	r3, [r7, #32]
}
 800940a:	bf00      	nop
 800940c:	e7fe      	b.n	800940c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800940e:	4b1a      	ldr	r3, [pc, #104]	; (8009478 <xTimerGenericCommand+0x98>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d02a      	beq.n	800946c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	2b05      	cmp	r3, #5
 8009426:	dc18      	bgt.n	800945a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009428:	f7ff fcf8 	bl	8008e1c <xTaskGetSchedulerState>
 800942c:	4603      	mov	r3, r0
 800942e:	2b02      	cmp	r3, #2
 8009430:	d109      	bne.n	8009446 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009432:	4b11      	ldr	r3, [pc, #68]	; (8009478 <xTimerGenericCommand+0x98>)
 8009434:	6818      	ldr	r0, [r3, #0]
 8009436:	f107 0110 	add.w	r1, r7, #16
 800943a:	2300      	movs	r3, #0
 800943c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800943e:	f7fd fe75 	bl	800712c <xQueueGenericSend>
 8009442:	6278      	str	r0, [r7, #36]	; 0x24
 8009444:	e012      	b.n	800946c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009446:	4b0c      	ldr	r3, [pc, #48]	; (8009478 <xTimerGenericCommand+0x98>)
 8009448:	6818      	ldr	r0, [r3, #0]
 800944a:	f107 0110 	add.w	r1, r7, #16
 800944e:	2300      	movs	r3, #0
 8009450:	2200      	movs	r2, #0
 8009452:	f7fd fe6b 	bl	800712c <xQueueGenericSend>
 8009456:	6278      	str	r0, [r7, #36]	; 0x24
 8009458:	e008      	b.n	800946c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800945a:	4b07      	ldr	r3, [pc, #28]	; (8009478 <xTimerGenericCommand+0x98>)
 800945c:	6818      	ldr	r0, [r3, #0]
 800945e:	f107 0110 	add.w	r1, r7, #16
 8009462:	2300      	movs	r3, #0
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	f7fd ff5f 	bl	8007328 <xQueueGenericSendFromISR>
 800946a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800946c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800946e:	4618      	mov	r0, r3
 8009470:	3728      	adds	r7, #40	; 0x28
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	2000dffc 	.word	0x2000dffc

0800947c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b088      	sub	sp, #32
 8009480:	af02      	add	r7, sp, #8
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009486:	4b22      	ldr	r3, [pc, #136]	; (8009510 <prvProcessExpiredTimer+0x94>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	3304      	adds	r3, #4
 8009494:	4618      	mov	r0, r3
 8009496:	f7fd fc7d 	bl	8006d94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d022      	beq.n	80094ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	699a      	ldr	r2, [r3, #24]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	18d1      	adds	r1, r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	6978      	ldr	r0, [r7, #20]
 80094b6:	f000 f8d1 	bl	800965c <prvInsertTimerInActiveList>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d01f      	beq.n	8009500 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094c0:	2300      	movs	r3, #0
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	2300      	movs	r3, #0
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	2100      	movs	r1, #0
 80094ca:	6978      	ldr	r0, [r7, #20]
 80094cc:	f7ff ff88 	bl	80093e0 <xTimerGenericCommand>
 80094d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d113      	bne.n	8009500 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80094d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094dc:	f383 8811 	msr	BASEPRI, r3
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	60fb      	str	r3, [r7, #12]
}
 80094ea:	bf00      	nop
 80094ec:	e7fe      	b.n	80094ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094f4:	f023 0301 	bic.w	r3, r3, #1
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	6a1b      	ldr	r3, [r3, #32]
 8009504:	6978      	ldr	r0, [r7, #20]
 8009506:	4798      	blx	r3
}
 8009508:	bf00      	nop
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	2000dff4 	.word	0x2000dff4

08009514 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800951c:	f107 0308 	add.w	r3, r7, #8
 8009520:	4618      	mov	r0, r3
 8009522:	f000 f857 	bl	80095d4 <prvGetNextExpireTime>
 8009526:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	4619      	mov	r1, r3
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 f803 	bl	8009538 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009532:	f000 f8d5 	bl	80096e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009536:	e7f1      	b.n	800951c <prvTimerTask+0x8>

08009538 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009542:	f7fe fe11 	bl	8008168 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009546:	f107 0308 	add.w	r3, r7, #8
 800954a:	4618      	mov	r0, r3
 800954c:	f000 f866 	bl	800961c <prvSampleTimeNow>
 8009550:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d130      	bne.n	80095ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10a      	bne.n	8009574 <prvProcessTimerOrBlockTask+0x3c>
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	429a      	cmp	r2, r3
 8009564:	d806      	bhi.n	8009574 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009566:	f7fe fe0d 	bl	8008184 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800956a:	68f9      	ldr	r1, [r7, #12]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7ff ff85 	bl	800947c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009572:	e024      	b.n	80095be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d008      	beq.n	800958c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800957a:	4b13      	ldr	r3, [pc, #76]	; (80095c8 <prvProcessTimerOrBlockTask+0x90>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <prvProcessTimerOrBlockTask+0x50>
 8009584:	2301      	movs	r3, #1
 8009586:	e000      	b.n	800958a <prvProcessTimerOrBlockTask+0x52>
 8009588:	2300      	movs	r3, #0
 800958a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800958c:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <prvProcessTimerOrBlockTask+0x94>)
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	683a      	ldr	r2, [r7, #0]
 8009598:	4619      	mov	r1, r3
 800959a:	f7fe fa9b 	bl	8007ad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800959e:	f7fe fdf1 	bl	8008184 <xTaskResumeAll>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10a      	bne.n	80095be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80095a8:	4b09      	ldr	r3, [pc, #36]	; (80095d0 <prvProcessTimerOrBlockTask+0x98>)
 80095aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ae:	601a      	str	r2, [r3, #0]
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	f3bf 8f6f 	isb	sy
}
 80095b8:	e001      	b.n	80095be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80095ba:	f7fe fde3 	bl	8008184 <xTaskResumeAll>
}
 80095be:	bf00      	nop
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	2000dff8 	.word	0x2000dff8
 80095cc:	2000dffc 	.word	0x2000dffc
 80095d0:	e000ed04 	.word	0xe000ed04

080095d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80095dc:	4b0e      	ldr	r3, [pc, #56]	; (8009618 <prvGetNextExpireTime+0x44>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d101      	bne.n	80095ea <prvGetNextExpireTime+0x16>
 80095e6:	2201      	movs	r2, #1
 80095e8:	e000      	b.n	80095ec <prvGetNextExpireTime+0x18>
 80095ea:	2200      	movs	r2, #0
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d105      	bne.n	8009604 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095f8:	4b07      	ldr	r3, [pc, #28]	; (8009618 <prvGetNextExpireTime+0x44>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	60fb      	str	r3, [r7, #12]
 8009602:	e001      	b.n	8009608 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009604:	2300      	movs	r3, #0
 8009606:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009608:	68fb      	ldr	r3, [r7, #12]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	2000dff4 	.word	0x2000dff4

0800961c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009624:	f7fe fe4c 	bl	80082c0 <xTaskGetTickCount>
 8009628:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800962a:	4b0b      	ldr	r3, [pc, #44]	; (8009658 <prvSampleTimeNow+0x3c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	429a      	cmp	r2, r3
 8009632:	d205      	bcs.n	8009640 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009634:	f000 f936 	bl	80098a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	e002      	b.n	8009646 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009646:	4a04      	ldr	r2, [pc, #16]	; (8009658 <prvSampleTimeNow+0x3c>)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800964c:	68fb      	ldr	r3, [r7, #12]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	2000e004 	.word	0x2000e004

0800965c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
 8009668:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800966a:	2300      	movs	r3, #0
 800966c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	429a      	cmp	r2, r3
 8009680:	d812      	bhi.n	80096a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	1ad2      	subs	r2, r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	429a      	cmp	r2, r3
 800968e:	d302      	bcc.n	8009696 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009690:	2301      	movs	r3, #1
 8009692:	617b      	str	r3, [r7, #20]
 8009694:	e01b      	b.n	80096ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009696:	4b10      	ldr	r3, [pc, #64]	; (80096d8 <prvInsertTimerInActiveList+0x7c>)
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3304      	adds	r3, #4
 800969e:	4619      	mov	r1, r3
 80096a0:	4610      	mov	r0, r2
 80096a2:	f7fd fb3e 	bl	8006d22 <vListInsert>
 80096a6:	e012      	b.n	80096ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d206      	bcs.n	80096be <prvInsertTimerInActiveList+0x62>
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d302      	bcc.n	80096be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80096b8:	2301      	movs	r3, #1
 80096ba:	617b      	str	r3, [r7, #20]
 80096bc:	e007      	b.n	80096ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096be:	4b07      	ldr	r3, [pc, #28]	; (80096dc <prvInsertTimerInActiveList+0x80>)
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3304      	adds	r3, #4
 80096c6:	4619      	mov	r1, r3
 80096c8:	4610      	mov	r0, r2
 80096ca:	f7fd fb2a 	bl	8006d22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80096ce:	697b      	ldr	r3, [r7, #20]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3718      	adds	r7, #24
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	2000dff8 	.word	0x2000dff8
 80096dc:	2000dff4 	.word	0x2000dff4

080096e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b08e      	sub	sp, #56	; 0x38
 80096e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096e6:	e0ca      	b.n	800987e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	da18      	bge.n	8009720 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80096ee:	1d3b      	adds	r3, r7, #4
 80096f0:	3304      	adds	r3, #4
 80096f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80096f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10a      	bne.n	8009710 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	61fb      	str	r3, [r7, #28]
}
 800970c:	bf00      	nop
 800970e:	e7fe      	b.n	800970e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009716:	6850      	ldr	r0, [r2, #4]
 8009718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800971a:	6892      	ldr	r2, [r2, #8]
 800971c:	4611      	mov	r1, r2
 800971e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	f2c0 80aa 	blt.w	800987c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972e:	695b      	ldr	r3, [r3, #20]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d004      	beq.n	800973e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	3304      	adds	r3, #4
 8009738:	4618      	mov	r0, r3
 800973a:	f7fd fb2b 	bl	8006d94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800973e:	463b      	mov	r3, r7
 8009740:	4618      	mov	r0, r3
 8009742:	f7ff ff6b 	bl	800961c <prvSampleTimeNow>
 8009746:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b09      	cmp	r3, #9
 800974c:	f200 8097 	bhi.w	800987e <prvProcessReceivedCommands+0x19e>
 8009750:	a201      	add	r2, pc, #4	; (adr r2, 8009758 <prvProcessReceivedCommands+0x78>)
 8009752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009756:	bf00      	nop
 8009758:	08009781 	.word	0x08009781
 800975c:	08009781 	.word	0x08009781
 8009760:	08009781 	.word	0x08009781
 8009764:	080097f5 	.word	0x080097f5
 8009768:	08009809 	.word	0x08009809
 800976c:	08009853 	.word	0x08009853
 8009770:	08009781 	.word	0x08009781
 8009774:	08009781 	.word	0x08009781
 8009778:	080097f5 	.word	0x080097f5
 800977c:	08009809 	.word	0x08009809
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009786:	f043 0301 	orr.w	r3, r3, #1
 800978a:	b2da      	uxtb	r2, r3
 800978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	18d1      	adds	r1, r2, r3
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800979e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097a0:	f7ff ff5c 	bl	800965c <prvInsertTimerInActiveList>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d069      	beq.n	800987e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097b8:	f003 0304 	and.w	r3, r3, #4
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d05e      	beq.n	800987e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	441a      	add	r2, r3
 80097c8:	2300      	movs	r3, #0
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	2300      	movs	r3, #0
 80097ce:	2100      	movs	r1, #0
 80097d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097d2:	f7ff fe05 	bl	80093e0 <xTimerGenericCommand>
 80097d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80097d8:	6a3b      	ldr	r3, [r7, #32]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d14f      	bne.n	800987e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	61bb      	str	r3, [r7, #24]
}
 80097f0:	bf00      	nop
 80097f2:	e7fe      	b.n	80097f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097fa:	f023 0301 	bic.w	r3, r3, #1
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009806:	e03a      	b.n	800987e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800980e:	f043 0301 	orr.w	r3, r3, #1
 8009812:	b2da      	uxtb	r2, r3
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10a      	bne.n	800983e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	617b      	str	r3, [r7, #20]
}
 800983a:	bf00      	nop
 800983c:	e7fe      	b.n	800983c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800983e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009840:	699a      	ldr	r2, [r3, #24]
 8009842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009844:	18d1      	adds	r1, r2, r3
 8009846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800984a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800984c:	f7ff ff06 	bl	800965c <prvInsertTimerInActiveList>
					break;
 8009850:	e015      	b.n	800987e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009858:	f003 0302 	and.w	r3, r3, #2
 800985c:	2b00      	cmp	r3, #0
 800985e:	d103      	bne.n	8009868 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009862:	f7f8 f809 	bl	8001878 <vPortFree>
 8009866:	e00a      	b.n	800987e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800986e:	f023 0301 	bic.w	r3, r3, #1
 8009872:	b2da      	uxtb	r2, r3
 8009874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800987a:	e000      	b.n	800987e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800987c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800987e:	4b08      	ldr	r3, [pc, #32]	; (80098a0 <prvProcessReceivedCommands+0x1c0>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	1d39      	adds	r1, r7, #4
 8009884:	2200      	movs	r2, #0
 8009886:	4618      	mov	r0, r3
 8009888:	f7fd fde6 	bl	8007458 <xQueueReceive>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	f47f af2a 	bne.w	80096e8 <prvProcessReceivedCommands+0x8>
	}
}
 8009894:	bf00      	nop
 8009896:	bf00      	nop
 8009898:	3730      	adds	r7, #48	; 0x30
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	2000dffc 	.word	0x2000dffc

080098a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b088      	sub	sp, #32
 80098a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098aa:	e048      	b.n	800993e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098ac:	4b2d      	ldr	r3, [pc, #180]	; (8009964 <prvSwitchTimerLists+0xc0>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098b6:	4b2b      	ldr	r3, [pc, #172]	; (8009964 <prvSwitchTimerLists+0xc0>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	3304      	adds	r3, #4
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fd fa65 	bl	8006d94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098d8:	f003 0304 	and.w	r3, r3, #4
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d02e      	beq.n	800993e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	4413      	add	r3, r2
 80098e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d90e      	bls.n	8009910 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098fe:	4b19      	ldr	r3, [pc, #100]	; (8009964 <prvSwitchTimerLists+0xc0>)
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3304      	adds	r3, #4
 8009906:	4619      	mov	r1, r3
 8009908:	4610      	mov	r0, r2
 800990a:	f7fd fa0a 	bl	8006d22 <vListInsert>
 800990e:	e016      	b.n	800993e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009910:	2300      	movs	r3, #0
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	2300      	movs	r3, #0
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	2100      	movs	r1, #0
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f7ff fd60 	bl	80093e0 <xTimerGenericCommand>
 8009920:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10a      	bne.n	800993e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	603b      	str	r3, [r7, #0]
}
 800993a:	bf00      	nop
 800993c:	e7fe      	b.n	800993c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800993e:	4b09      	ldr	r3, [pc, #36]	; (8009964 <prvSwitchTimerLists+0xc0>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1b1      	bne.n	80098ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009948:	4b06      	ldr	r3, [pc, #24]	; (8009964 <prvSwitchTimerLists+0xc0>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800994e:	4b06      	ldr	r3, [pc, #24]	; (8009968 <prvSwitchTimerLists+0xc4>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a04      	ldr	r2, [pc, #16]	; (8009964 <prvSwitchTimerLists+0xc0>)
 8009954:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009956:	4a04      	ldr	r2, [pc, #16]	; (8009968 <prvSwitchTimerLists+0xc4>)
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	6013      	str	r3, [r2, #0]
}
 800995c:	bf00      	nop
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	2000dff4 	.word	0x2000dff4
 8009968:	2000dff8 	.word	0x2000dff8

0800996c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009972:	f000 f967 	bl	8009c44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009976:	4b15      	ldr	r3, [pc, #84]	; (80099cc <prvCheckForValidListAndQueue+0x60>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d120      	bne.n	80099c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800997e:	4814      	ldr	r0, [pc, #80]	; (80099d0 <prvCheckForValidListAndQueue+0x64>)
 8009980:	f7fd f97e 	bl	8006c80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009984:	4813      	ldr	r0, [pc, #76]	; (80099d4 <prvCheckForValidListAndQueue+0x68>)
 8009986:	f7fd f97b 	bl	8006c80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800998a:	4b13      	ldr	r3, [pc, #76]	; (80099d8 <prvCheckForValidListAndQueue+0x6c>)
 800998c:	4a10      	ldr	r2, [pc, #64]	; (80099d0 <prvCheckForValidListAndQueue+0x64>)
 800998e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009990:	4b12      	ldr	r3, [pc, #72]	; (80099dc <prvCheckForValidListAndQueue+0x70>)
 8009992:	4a10      	ldr	r2, [pc, #64]	; (80099d4 <prvCheckForValidListAndQueue+0x68>)
 8009994:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009996:	2300      	movs	r3, #0
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	4b11      	ldr	r3, [pc, #68]	; (80099e0 <prvCheckForValidListAndQueue+0x74>)
 800999c:	4a11      	ldr	r2, [pc, #68]	; (80099e4 <prvCheckForValidListAndQueue+0x78>)
 800999e:	2110      	movs	r1, #16
 80099a0:	200a      	movs	r0, #10
 80099a2:	f7fd fa89 	bl	8006eb8 <xQueueGenericCreateStatic>
 80099a6:	4603      	mov	r3, r0
 80099a8:	4a08      	ldr	r2, [pc, #32]	; (80099cc <prvCheckForValidListAndQueue+0x60>)
 80099aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80099ac:	4b07      	ldr	r3, [pc, #28]	; (80099cc <prvCheckForValidListAndQueue+0x60>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d005      	beq.n	80099c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80099b4:	4b05      	ldr	r3, [pc, #20]	; (80099cc <prvCheckForValidListAndQueue+0x60>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	490b      	ldr	r1, [pc, #44]	; (80099e8 <prvCheckForValidListAndQueue+0x7c>)
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fe f860 	bl	8007a80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099c0:	f000 f970 	bl	8009ca4 <vPortExitCritical>
}
 80099c4:	bf00      	nop
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	2000dffc 	.word	0x2000dffc
 80099d0:	2000dfcc 	.word	0x2000dfcc
 80099d4:	2000dfe0 	.word	0x2000dfe0
 80099d8:	2000dff4 	.word	0x2000dff4
 80099dc:	2000dff8 	.word	0x2000dff8
 80099e0:	2000e0a8 	.word	0x2000e0a8
 80099e4:	2000e008 	.word	0x2000e008
 80099e8:	08025898 	.word	0x08025898

080099ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	3b04      	subs	r3, #4
 80099fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3b04      	subs	r3, #4
 8009a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	f023 0201 	bic.w	r2, r3, #1
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	3b04      	subs	r3, #4
 8009a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a1c:	4a0c      	ldr	r2, [pc, #48]	; (8009a50 <pxPortInitialiseStack+0x64>)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3b14      	subs	r3, #20
 8009a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	3b04      	subs	r3, #4
 8009a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f06f 0202 	mvn.w	r2, #2
 8009a3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3b20      	subs	r3, #32
 8009a40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a42:	68fb      	ldr	r3, [r7, #12]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr
 8009a50:	08009a55 	.word	0x08009a55

08009a54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a5e:	4b12      	ldr	r3, [pc, #72]	; (8009aa8 <prvTaskExitError+0x54>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a66:	d00a      	beq.n	8009a7e <prvTaskExitError+0x2a>
	__asm volatile
 8009a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	60fb      	str	r3, [r7, #12]
}
 8009a7a:	bf00      	nop
 8009a7c:	e7fe      	b.n	8009a7c <prvTaskExitError+0x28>
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	60bb      	str	r3, [r7, #8]
}
 8009a90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a92:	bf00      	nop
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0fc      	beq.n	8009a94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a9a:	bf00      	nop
 8009a9c:	bf00      	nop
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	20000010 	.word	0x20000010
 8009aac:	00000000 	.word	0x00000000

08009ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ab0:	4b07      	ldr	r3, [pc, #28]	; (8009ad0 <pxCurrentTCBConst2>)
 8009ab2:	6819      	ldr	r1, [r3, #0]
 8009ab4:	6808      	ldr	r0, [r1, #0]
 8009ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aba:	f380 8809 	msr	PSP, r0
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f04f 0000 	mov.w	r0, #0
 8009ac6:	f380 8811 	msr	BASEPRI, r0
 8009aca:	4770      	bx	lr
 8009acc:	f3af 8000 	nop.w

08009ad0 <pxCurrentTCBConst2>:
 8009ad0:	2000dac8 	.word	0x2000dac8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ad4:	bf00      	nop
 8009ad6:	bf00      	nop

08009ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ad8:	4808      	ldr	r0, [pc, #32]	; (8009afc <prvPortStartFirstTask+0x24>)
 8009ada:	6800      	ldr	r0, [r0, #0]
 8009adc:	6800      	ldr	r0, [r0, #0]
 8009ade:	f380 8808 	msr	MSP, r0
 8009ae2:	f04f 0000 	mov.w	r0, #0
 8009ae6:	f380 8814 	msr	CONTROL, r0
 8009aea:	b662      	cpsie	i
 8009aec:	b661      	cpsie	f
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	df00      	svc	0
 8009af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009afa:	bf00      	nop
 8009afc:	e000ed08 	.word	0xe000ed08

08009b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b06:	4b46      	ldr	r3, [pc, #280]	; (8009c20 <xPortStartScheduler+0x120>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a46      	ldr	r2, [pc, #280]	; (8009c24 <xPortStartScheduler+0x124>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d10a      	bne.n	8009b26 <xPortStartScheduler+0x26>
	__asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	613b      	str	r3, [r7, #16]
}
 8009b22:	bf00      	nop
 8009b24:	e7fe      	b.n	8009b24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b26:	4b3e      	ldr	r3, [pc, #248]	; (8009c20 <xPortStartScheduler+0x120>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a3f      	ldr	r2, [pc, #252]	; (8009c28 <xPortStartScheduler+0x128>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d10a      	bne.n	8009b46 <xPortStartScheduler+0x46>
	__asm volatile
 8009b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	60fb      	str	r3, [r7, #12]
}
 8009b42:	bf00      	nop
 8009b44:	e7fe      	b.n	8009b44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b46:	4b39      	ldr	r3, [pc, #228]	; (8009c2c <xPortStartScheduler+0x12c>)
 8009b48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	22ff      	movs	r2, #255	; 0xff
 8009b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b60:	78fb      	ldrb	r3, [r7, #3]
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	4b31      	ldr	r3, [pc, #196]	; (8009c30 <xPortStartScheduler+0x130>)
 8009b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b6e:	4b31      	ldr	r3, [pc, #196]	; (8009c34 <xPortStartScheduler+0x134>)
 8009b70:	2207      	movs	r2, #7
 8009b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b74:	e009      	b.n	8009b8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009b76:	4b2f      	ldr	r3, [pc, #188]	; (8009c34 <xPortStartScheduler+0x134>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	4a2d      	ldr	r2, [pc, #180]	; (8009c34 <xPortStartScheduler+0x134>)
 8009b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b80:	78fb      	ldrb	r3, [r7, #3]
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	005b      	lsls	r3, r3, #1
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b8a:	78fb      	ldrb	r3, [r7, #3]
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b92:	2b80      	cmp	r3, #128	; 0x80
 8009b94:	d0ef      	beq.n	8009b76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b96:	4b27      	ldr	r3, [pc, #156]	; (8009c34 <xPortStartScheduler+0x134>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f1c3 0307 	rsb	r3, r3, #7
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	d00a      	beq.n	8009bb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	60bb      	str	r3, [r7, #8]
}
 8009bb4:	bf00      	nop
 8009bb6:	e7fe      	b.n	8009bb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009bb8:	4b1e      	ldr	r3, [pc, #120]	; (8009c34 <xPortStartScheduler+0x134>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	021b      	lsls	r3, r3, #8
 8009bbe:	4a1d      	ldr	r2, [pc, #116]	; (8009c34 <xPortStartScheduler+0x134>)
 8009bc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009bc2:	4b1c      	ldr	r3, [pc, #112]	; (8009c34 <xPortStartScheduler+0x134>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009bca:	4a1a      	ldr	r2, [pc, #104]	; (8009c34 <xPortStartScheduler+0x134>)
 8009bcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	b2da      	uxtb	r2, r3
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009bd6:	4b18      	ldr	r3, [pc, #96]	; (8009c38 <xPortStartScheduler+0x138>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a17      	ldr	r2, [pc, #92]	; (8009c38 <xPortStartScheduler+0x138>)
 8009bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009be2:	4b15      	ldr	r3, [pc, #84]	; (8009c38 <xPortStartScheduler+0x138>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a14      	ldr	r2, [pc, #80]	; (8009c38 <xPortStartScheduler+0x138>)
 8009be8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009bec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009bee:	f000 f8dd 	bl	8009dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009bf2:	4b12      	ldr	r3, [pc, #72]	; (8009c3c <xPortStartScheduler+0x13c>)
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009bf8:	f000 f8fc 	bl	8009df4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009bfc:	4b10      	ldr	r3, [pc, #64]	; (8009c40 <xPortStartScheduler+0x140>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a0f      	ldr	r2, [pc, #60]	; (8009c40 <xPortStartScheduler+0x140>)
 8009c02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c08:	f7ff ff66 	bl	8009ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c0c:	f7fe fd84 	bl	8008718 <vTaskSwitchContext>
	prvTaskExitError();
 8009c10:	f7ff ff20 	bl	8009a54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3718      	adds	r7, #24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	e000ed00 	.word	0xe000ed00
 8009c24:	410fc271 	.word	0x410fc271
 8009c28:	410fc270 	.word	0x410fc270
 8009c2c:	e000e400 	.word	0xe000e400
 8009c30:	2000e0f8 	.word	0x2000e0f8
 8009c34:	2000e0fc 	.word	0x2000e0fc
 8009c38:	e000ed20 	.word	0xe000ed20
 8009c3c:	20000010 	.word	0x20000010
 8009c40:	e000ef34 	.word	0xe000ef34

08009c44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
	__asm volatile
 8009c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	607b      	str	r3, [r7, #4]
}
 8009c5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c5e:	4b0f      	ldr	r3, [pc, #60]	; (8009c9c <vPortEnterCritical+0x58>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	3301      	adds	r3, #1
 8009c64:	4a0d      	ldr	r2, [pc, #52]	; (8009c9c <vPortEnterCritical+0x58>)
 8009c66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c68:	4b0c      	ldr	r3, [pc, #48]	; (8009c9c <vPortEnterCritical+0x58>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d10f      	bne.n	8009c90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c70:	4b0b      	ldr	r3, [pc, #44]	; (8009ca0 <vPortEnterCritical+0x5c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00a      	beq.n	8009c90 <vPortEnterCritical+0x4c>
	__asm volatile
 8009c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	603b      	str	r3, [r7, #0]
}
 8009c8c:	bf00      	nop
 8009c8e:	e7fe      	b.n	8009c8e <vPortEnterCritical+0x4a>
	}
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	20000010 	.word	0x20000010
 8009ca0:	e000ed04 	.word	0xe000ed04

08009ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009caa:	4b12      	ldr	r3, [pc, #72]	; (8009cf4 <vPortExitCritical+0x50>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10a      	bne.n	8009cc8 <vPortExitCritical+0x24>
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	607b      	str	r3, [r7, #4]
}
 8009cc4:	bf00      	nop
 8009cc6:	e7fe      	b.n	8009cc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009cc8:	4b0a      	ldr	r3, [pc, #40]	; (8009cf4 <vPortExitCritical+0x50>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	4a09      	ldr	r2, [pc, #36]	; (8009cf4 <vPortExitCritical+0x50>)
 8009cd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009cd2:	4b08      	ldr	r3, [pc, #32]	; (8009cf4 <vPortExitCritical+0x50>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d105      	bne.n	8009ce6 <vPortExitCritical+0x42>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	f383 8811 	msr	BASEPRI, r3
}
 8009ce4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ce6:	bf00      	nop
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	20000010 	.word	0x20000010
	...

08009d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d00:	f3ef 8009 	mrs	r0, PSP
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	4b15      	ldr	r3, [pc, #84]	; (8009d60 <pxCurrentTCBConst>)
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	f01e 0f10 	tst.w	lr, #16
 8009d10:	bf08      	it	eq
 8009d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1a:	6010      	str	r0, [r2, #0]
 8009d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d24:	f380 8811 	msr	BASEPRI, r0
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f7fe fcf2 	bl	8008718 <vTaskSwitchContext>
 8009d34:	f04f 0000 	mov.w	r0, #0
 8009d38:	f380 8811 	msr	BASEPRI, r0
 8009d3c:	bc09      	pop	{r0, r3}
 8009d3e:	6819      	ldr	r1, [r3, #0]
 8009d40:	6808      	ldr	r0, [r1, #0]
 8009d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d46:	f01e 0f10 	tst.w	lr, #16
 8009d4a:	bf08      	it	eq
 8009d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d50:	f380 8809 	msr	PSP, r0
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	f3af 8000 	nop.w

08009d60 <pxCurrentTCBConst>:
 8009d60:	2000dac8 	.word	0x2000dac8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop

08009d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	607b      	str	r3, [r7, #4]
}
 8009d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d82:	f7fe fc0f 	bl	80085a4 <xTaskIncrementTick>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d003      	beq.n	8009d94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d8c:	4b06      	ldr	r3, [pc, #24]	; (8009da8 <SysTick_Handler+0x40>)
 8009d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	2300      	movs	r3, #0
 8009d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	f383 8811 	msr	BASEPRI, r3
}
 8009d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009da0:	bf00      	nop
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	e000ed04 	.word	0xe000ed04

08009dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009dac:	b480      	push	{r7}
 8009dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009db0:	4b0b      	ldr	r3, [pc, #44]	; (8009de0 <vPortSetupTimerInterrupt+0x34>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009db6:	4b0b      	ldr	r3, [pc, #44]	; (8009de4 <vPortSetupTimerInterrupt+0x38>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009dbc:	4b0a      	ldr	r3, [pc, #40]	; (8009de8 <vPortSetupTimerInterrupt+0x3c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a0a      	ldr	r2, [pc, #40]	; (8009dec <vPortSetupTimerInterrupt+0x40>)
 8009dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc6:	099b      	lsrs	r3, r3, #6
 8009dc8:	4a09      	ldr	r2, [pc, #36]	; (8009df0 <vPortSetupTimerInterrupt+0x44>)
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009dce:	4b04      	ldr	r3, [pc, #16]	; (8009de0 <vPortSetupTimerInterrupt+0x34>)
 8009dd0:	2207      	movs	r2, #7
 8009dd2:	601a      	str	r2, [r3, #0]
}
 8009dd4:	bf00      	nop
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	e000e010 	.word	0xe000e010
 8009de4:	e000e018 	.word	0xe000e018
 8009de8:	20000004 	.word	0x20000004
 8009dec:	10624dd3 	.word	0x10624dd3
 8009df0:	e000e014 	.word	0xe000e014

08009df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009df4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e04 <vPortEnableVFP+0x10>
 8009df8:	6801      	ldr	r1, [r0, #0]
 8009dfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009dfe:	6001      	str	r1, [r0, #0]
 8009e00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e02:	bf00      	nop
 8009e04:	e000ed88 	.word	0xe000ed88

08009e08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e0e:	f3ef 8305 	mrs	r3, IPSR
 8009e12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b0f      	cmp	r3, #15
 8009e18:	d914      	bls.n	8009e44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e1a:	4a17      	ldr	r2, [pc, #92]	; (8009e78 <vPortValidateInterruptPriority+0x70>)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	4413      	add	r3, r2
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e24:	4b15      	ldr	r3, [pc, #84]	; (8009e7c <vPortValidateInterruptPriority+0x74>)
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	7afa      	ldrb	r2, [r7, #11]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d20a      	bcs.n	8009e44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	607b      	str	r3, [r7, #4]
}
 8009e40:	bf00      	nop
 8009e42:	e7fe      	b.n	8009e42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e44:	4b0e      	ldr	r3, [pc, #56]	; (8009e80 <vPortValidateInterruptPriority+0x78>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e4c:	4b0d      	ldr	r3, [pc, #52]	; (8009e84 <vPortValidateInterruptPriority+0x7c>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d90a      	bls.n	8009e6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	603b      	str	r3, [r7, #0]
}
 8009e66:	bf00      	nop
 8009e68:	e7fe      	b.n	8009e68 <vPortValidateInterruptPriority+0x60>
	}
 8009e6a:	bf00      	nop
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	e000e3f0 	.word	0xe000e3f0
 8009e7c:	2000e0f8 	.word	0x2000e0f8
 8009e80:	e000ed0c 	.word	0xe000ed0c
 8009e84:	2000e0fc 	.word	0x2000e0fc

08009e88 <clock_gettime>:

/*-----------------------------------------------------------*/

int clock_gettime( clockid_t clock_id,
                   struct timespec * tp )
{
 8009e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e8c:	b08e      	sub	sp, #56	; 0x38
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6278      	str	r0, [r7, #36]	; 0x24
 8009e92:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8009e94:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009e98:	2300      	movs	r3, #0
 8009e9a:	6013      	str	r3, [r2, #0]
 8009e9c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8009e9e:	f04f 0200 	mov.w	r2, #0
 8009ea2:	f04f 0300 	mov.w	r3, #0
 8009ea6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8009eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fe fd50 	bl	8008954 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8009eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb6:	17da      	asrs	r2, r3, #31
 8009eb8:	61bb      	str	r3, [r7, #24]
 8009eba:	61fa      	str	r2, [r7, #28]
 8009ebc:	f04f 0200 	mov.w	r2, #0
 8009ec0:	f04f 0300 	mov.w	r3, #0
 8009ec4:	69b9      	ldr	r1, [r7, #24]
 8009ec6:	000b      	movs	r3, r1
 8009ec8:	2200      	movs	r2, #0
 8009eca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8009ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	461c      	mov	r4, r3
 8009ed4:	4615      	mov	r5, r2
 8009ed6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009eda:	1911      	adds	r1, r2, r4
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	416b      	adcs	r3, r5
 8009ee0:	60fb      	str	r3, [r7, #12]
 8009ee2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009ee6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8009eea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8009eee:	4602      	mov	r2, r0
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	f04f 0400 	mov.w	r4, #0
 8009ef6:	f04f 0500 	mov.w	r5, #0
 8009efa:	015d      	lsls	r5, r3, #5
 8009efc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8009f00:	0154      	lsls	r4, r2, #5
 8009f02:	4622      	mov	r2, r4
 8009f04:	462b      	mov	r3, r5
 8009f06:	ebb2 0800 	subs.w	r8, r2, r0
 8009f0a:	eb63 0901 	sbc.w	r9, r3, r1
 8009f0e:	f04f 0200 	mov.w	r2, #0
 8009f12:	f04f 0300 	mov.w	r3, #0
 8009f16:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8009f1a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8009f1e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8009f22:	4690      	mov	r8, r2
 8009f24:	4699      	mov	r9, r3
 8009f26:	eb18 0a00 	adds.w	sl, r8, r0
 8009f2a:	eb49 0b01 	adc.w	fp, r9, r1
 8009f2e:	f04f 0200 	mov.w	r2, #0
 8009f32:	f04f 0300 	mov.w	r3, #0
 8009f36:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009f3a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009f3e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009f42:	ebb2 040a 	subs.w	r4, r2, sl
 8009f46:	603c      	str	r4, [r7, #0]
 8009f48:	eb63 030b 	sbc.w	r3, r3, fp
 8009f4c:	607b      	str	r3, [r7, #4]
 8009f4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009f52:	4623      	mov	r3, r4
 8009f54:	181b      	adds	r3, r3, r0
 8009f56:	613b      	str	r3, [r7, #16]
 8009f58:	462b      	mov	r3, r5
 8009f5a:	eb41 0303 	adc.w	r3, r1, r3
 8009f5e:	617b      	str	r3, [r7, #20]
 8009f60:	6a3a      	ldr	r2, [r7, #32]
 8009f62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009f66:	f000 f833 	bl	8009fd0 <UTILS_NanosecondsToTimespec>

    return 0;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3738      	adds	r7, #56	; 0x38
 8009f70:	46bd      	mov	sp, r7
 8009f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08009f78 <usleep>:
}

/*-----------------------------------------------------------*/

int usleep( useconds_t usec )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
    /* To avoid delaying for less than usec, always round up. */
    vTaskDelay( pdMS_TO_TICKS( usec / 1000 + ( usec % 1000 != 0 ) ) );
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a12      	ldr	r2, [pc, #72]	; (8009fcc <usleep+0x54>)
 8009f84:	fba2 2303 	umull	r2, r3, r2, r3
 8009f88:	0999      	lsrs	r1, r3, #6
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	4b0f      	ldr	r3, [pc, #60]	; (8009fcc <usleep+0x54>)
 8009f8e:	fba3 0302 	umull	r0, r3, r3, r2
 8009f92:	099b      	lsrs	r3, r3, #6
 8009f94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f98:	fb00 f303 	mul.w	r3, r0, r3
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	bf14      	ite	ne
 8009fa2:	2301      	movne	r3, #1
 8009fa4:	2300      	moveq	r3, #0
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	440b      	add	r3, r1
 8009faa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009fae:	fb02 f303 	mul.w	r3, r2, r3
 8009fb2:	4a06      	ldr	r2, [pc, #24]	; (8009fcc <usleep+0x54>)
 8009fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb8:	099b      	lsrs	r3, r3, #6
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fd ffd4 	bl	8007f68 <vTaskDelay>

    return 0;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	10624dd3 	.word	0x10624dd3

08009fd0 <UTILS_NanosecondsToTimespec>:

/*-----------------------------------------------------------*/

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8009fd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009fd4:	b086      	sub	sp, #24
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8009fdc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8009fe2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009fe6:	a320      	add	r3, pc, #128	; (adr r3, 800a068 <UTILS_NanosecondsToTimespec+0x98>)
 8009fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fec:	f7f6 fe7c 	bl	8000ce8 <__aeabi_ldivmod>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	6879      	ldr	r1, [r7, #4]
 8009ff6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8009ffa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ffe:	a31a      	add	r3, pc, #104	; (adr r3, 800a068 <UTILS_NanosecondsToTimespec+0x98>)
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	f7f6 fe70 	bl	8000ce8 <__aeabi_ldivmod>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	2b00      	cmp	r3, #0
 800a012:	da20      	bge.n	800a056 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	4a11      	ldr	r2, [pc, #68]	; (800a060 <UTILS_NanosecondsToTimespec+0x90>)
 800a01a:	fb82 1203 	smull	r1, r2, r2, r3
 800a01e:	1712      	asrs	r2, r2, #28
 800a020:	17db      	asrs	r3, r3, #31
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	3301      	adds	r3, #1
 800a026:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	6979      	ldr	r1, [r7, #20]
 800a030:	17c8      	asrs	r0, r1, #31
 800a032:	460c      	mov	r4, r1
 800a034:	4605      	mov	r5, r0
 800a036:	ebb2 0804 	subs.w	r8, r2, r4
 800a03a:	eb63 0905 	sbc.w	r9, r3, r5
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	689a      	ldr	r2, [r3, #8]
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	4906      	ldr	r1, [pc, #24]	; (800a064 <UTILS_NanosecondsToTimespec+0x94>)
 800a04c:	fb01 f303 	mul.w	r3, r1, r3
 800a050:	441a      	add	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	609a      	str	r2, [r3, #8]
    }
}
 800a056:	bf00      	nop
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a060:	44b82fa1 	.word	0x44b82fa1
 800a064:	3b9aca00 	.word	0x3b9aca00
 800a068:	3b9aca00 	.word	0x3b9aca00
 800a06c:	00000000 	.word	0x00000000

0800a070 <ucdr_check_buffer_available_for>:
// -------------------------------------------------------------------

bool ucdr_check_buffer_available_for(
        ucdrBuffer* ub,
        size_t bytes)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
    return !ub->error && (ub->iterator + bytes <= ub->final);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	7d9b      	ldrb	r3, [r3, #22]
 800a07e:	f083 0301 	eor.w	r3, r3, #1
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b00      	cmp	r3, #0
 800a086:	d009      	beq.n	800a09c <ucdr_check_buffer_available_for+0x2c>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	689a      	ldr	r2, [r3, #8]
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	441a      	add	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	429a      	cmp	r2, r3
 800a096:	d801      	bhi.n	800a09c <ucdr_check_buffer_available_for+0x2c>
 800a098:	2301      	movs	r3, #1
 800a09a:	e000      	b.n	800a09e <ucdr_check_buffer_available_for+0x2e>
 800a09c:	2300      	movs	r3, #0
 800a09e:	f003 0301 	and.w	r3, r3, #1
 800a0a2:	b2db      	uxtb	r3, r3
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <ucdr_check_final_buffer_behavior>:

bool ucdr_check_final_buffer_behavior(
        ucdrBuffer* ub,
        size_t data_size)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
    (void) data_size;

    if (!ub->error && ub->iterator >= ub->final)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	7d9b      	ldrb	r3, [r3, #22]
 800a0be:	f083 0301 	eor.w	r3, r3, #1
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d018      	beq.n	800a0fa <ucdr_check_final_buffer_behavior+0x4a>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	689a      	ldr	r2, [r3, #8]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d312      	bcc.n	800a0fa <ucdr_check_final_buffer_behavior+0x4a>
    {
        ub->error = (NULL != ub->on_full_buffer) ? ub->on_full_buffer(ub, ub->args) : true;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d009      	beq.n	800a0f0 <ucdr_check_final_buffer_behavior+0x40>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	69d2      	ldr	r2, [r2, #28]
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	4798      	blx	r3
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <ucdr_check_final_buffer_behavior+0x44>
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	e000      	b.n	800a0f6 <ucdr_check_final_buffer_behavior+0x46>
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	759a      	strb	r2, [r3, #22]
    }

    return !ub->error;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	7d9b      	ldrb	r3, [r3, #22]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bf14      	ite	ne
 800a102:	2301      	movne	r3, #1
 800a104:	2300      	moveq	r3, #0
 800a106:	b2db      	uxtb	r3, r3
 800a108:	f083 0301 	eor.w	r3, r3, #1
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	f003 0301 	and.w	r3, r3, #1
 800a112:	b2db      	uxtb	r3, r3
}
 800a114:	4618      	mov	r0, r3
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <ucdr_next_remaining_size>:

size_t ucdr_next_remaining_size(
        ucdrBuffer* ub,
        size_t bytes,
        size_t data_size)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
    (void) data_size;
    size_t remaining = ucdr_buffer_remaining(ub);
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f000 f96f 	bl	800a40c <ucdr_buffer_remaining>
 800a12e:	6178      	str	r0, [r7, #20]
    return (bytes <= remaining) ? bytes : remaining;
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	4293      	cmp	r3, r2
 800a136:	bf28      	it	cs
 800a138:	4613      	movcs	r3, r2
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <ucdr_check_final_buffer_behavior_array>:

size_t ucdr_check_final_buffer_behavior_array(
        ucdrBuffer* ub,
        size_t bytes,
        size_t data_size)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b084      	sub	sp, #16
 800a146:	af00      	add	r7, sp, #0
 800a148:	60f8      	str	r0, [r7, #12]
 800a14a:	60b9      	str	r1, [r7, #8]
 800a14c:	607a      	str	r2, [r7, #4]
    (void) data_size;

    if (!ub->error && ub->iterator >= ub->final && bytes > 0)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	7d9b      	ldrb	r3, [r3, #22]
 800a152:	f083 0301 	eor.w	r3, r3, #1
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d01b      	beq.n	800a194 <ucdr_check_final_buffer_behavior_array+0x52>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	689a      	ldr	r2, [r3, #8]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	429a      	cmp	r2, r3
 800a166:	d315      	bcc.n	800a194 <ucdr_check_final_buffer_behavior_array+0x52>
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d012      	beq.n	800a194 <ucdr_check_final_buffer_behavior_array+0x52>
    {
        ub->error = (NULL != ub->on_full_buffer) ? ub->on_full_buffer(ub, ub->args) : true;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d009      	beq.n	800a18a <ucdr_check_final_buffer_behavior_array+0x48>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	69d2      	ldr	r2, [r2, #28]
 800a17e:	4611      	mov	r1, r2
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	4798      	blx	r3
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d001      	beq.n	800a18e <ucdr_check_final_buffer_behavior_array+0x4c>
 800a18a:	2201      	movs	r2, #1
 800a18c:	e000      	b.n	800a190 <ucdr_check_final_buffer_behavior_array+0x4e>
 800a18e:	2200      	movs	r2, #0
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	759a      	strb	r2, [r3, #22]
    }

    return (!ub->error) ? ucdr_next_remaining_size(ub, bytes, data_size) : 0;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	7d9b      	ldrb	r3, [r3, #22]
 800a198:	f083 0301 	eor.w	r3, r3, #1
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d006      	beq.n	800a1b0 <ucdr_check_final_buffer_behavior_array+0x6e>
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	68b9      	ldr	r1, [r7, #8]
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f7ff ffb8 	bl	800a11c <ucdr_next_remaining_size>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	e000      	b.n	800a1b2 <ucdr_check_final_buffer_behavior_array+0x70>
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <ucdr_set_on_full_buffer_callback>:

void ucdr_set_on_full_buffer_callback(
        ucdrBuffer* ub,
        OnFullBuffer on_full_buffer,
        void* args)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b085      	sub	sp, #20
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	60f8      	str	r0, [r7, #12]
 800a1c2:	60b9      	str	r1, [r7, #8]
 800a1c4:	607a      	str	r2, [r7, #4]
    ub->on_full_buffer = on_full_buffer;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	619a      	str	r2, [r3, #24]
    ub->args = args;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	61da      	str	r2, [r3, #28]
}
 800a1d2:	bf00      	nop
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <ucdr_init_buffer>:
// -------------------------------------------------------------------
void ucdr_init_buffer(
        ucdrBuffer* ub,
        uint8_t* data,
        size_t size)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	60b9      	str	r1, [r7, #8]
 800a1e8:	607a      	str	r2, [r7, #4]
    ucdr_init_buffer_origin(ub, data, size, 0u);
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	68b9      	ldr	r1, [r7, #8]
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 f804 	bl	800a1fe <ucdr_init_buffer_origin>
}
 800a1f6:	bf00      	nop
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <ucdr_init_buffer_origin>:
void ucdr_init_buffer_origin(
        ucdrBuffer* ub,
        uint8_t* data,
        size_t size,
        size_t origin)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b086      	sub	sp, #24
 800a202:	af02      	add	r7, sp, #8
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	60b9      	str	r1, [r7, #8]
 800a208:	607a      	str	r2, [r7, #4]
 800a20a:	603b      	str	r3, [r7, #0]
    ucdr_init_buffer_origin_offset(ub, data, size, origin, 0u);
 800a20c:	2300      	movs	r3, #0
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	68b9      	ldr	r1, [r7, #8]
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f000 f804 	bl	800a224 <ucdr_init_buffer_origin_offset>
}
 800a21c:	bf00      	nop
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <ucdr_init_buffer_origin_offset>:
        ucdrBuffer* ub,
        uint8_t* data,
        size_t size,
        size_t origin,
        size_t offset)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af02      	add	r7, sp, #8
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
 800a230:	603b      	str	r3, [r7, #0]
    ucdr_init_buffer_origin_offset_endian(ub, data, size, origin, offset, UCDR_MACHINE_ENDIANNESS);
 800a232:	2301      	movs	r3, #1
 800a234:	9301      	str	r3, [sp, #4]
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	68b9      	ldr	r1, [r7, #8]
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f000 f804 	bl	800a24e <ucdr_init_buffer_origin_offset_endian>
}
 800a246:	bf00      	nop
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <ucdr_init_buffer_origin_offset_endian>:
        uint8_t* data,
        size_t size,
        size_t origin,
        size_t offset,
        ucdrEndianness endianness)
{
 800a24e:	b480      	push	{r7}
 800a250:	b085      	sub	sp, #20
 800a252:	af00      	add	r7, sp, #0
 800a254:	60f8      	str	r0, [r7, #12]
 800a256:	60b9      	str	r1, [r7, #8]
 800a258:	607a      	str	r2, [r7, #4]
 800a25a:	603b      	str	r3, [r7, #0]
    ub->init = data;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	601a      	str	r2, [r3, #0]
    ub->final = ub->init + size;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	441a      	add	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	605a      	str	r2, [r3, #4]
    ub->iterator = ub->init + offset;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	441a      	add	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	609a      	str	r2, [r3, #8]
    ub->origin = origin;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	60da      	str	r2, [r3, #12]
    ub->offset = origin + offset;
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	441a      	add	r2, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	611a      	str	r2, [r3, #16]
    ub->endianness = endianness;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	7f3a      	ldrb	r2, [r7, #28]
 800a28e:	751a      	strb	r2, [r3, #20]
    ub->last_data_size = 0u;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	755a      	strb	r2, [r3, #21]
    ub->error = false;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	759a      	strb	r2, [r3, #22]
    ub->on_full_buffer = NULL;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	619a      	str	r2, [r3, #24]
    ub->args = NULL;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	61da      	str	r2, [r3, #28]
}
 800a2a8:	bf00      	nop
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <ucdr_align_to>:
}

void ucdr_align_to(
        ucdrBuffer* ub,
        size_t size)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
    size_t alignment = ucdr_buffer_alignment(ub, size);
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 f837 	bl	800a334 <ucdr_buffer_alignment>
 800a2c6:	60f8      	str	r0, [r7, #12]
    ub->offset += alignment;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	691a      	ldr	r2, [r3, #16]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	441a      	add	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	611a      	str	r2, [r3, #16]

    // TODO (julibert): rethink.
    ub->iterator += alignment;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	689a      	ldr	r2, [r3, #8]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	441a      	add	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	609a      	str	r2, [r3, #8]
    if (ub->iterator > ub->final)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	689a      	ldr	r2, [r3, #8]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d903      	bls.n	800a2f4 <ucdr_align_to+0x40>
    {
        ub->iterator = ub->final;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	609a      	str	r2, [r3, #8]
    }
    ub->last_data_size = (uint8_t)size;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	755a      	strb	r2, [r3, #21]
}
 800a2fc:	bf00      	nop
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <ucdr_alignment>:

size_t ucdr_alignment(
        size_t current_alignment,
        size_t data_size)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
    return ((data_size - (current_alignment % data_size)) & (data_size - 1));
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	683a      	ldr	r2, [r7, #0]
 800a312:	fbb3 f2f2 	udiv	r2, r3, r2
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	fb01 f202 	mul.w	r2, r1, r2
 800a31c:	1a9b      	subs	r3, r3, r2
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	1ad2      	subs	r2, r2, r3
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	3b01      	subs	r3, #1
 800a326:	4013      	ands	r3, r2
}
 800a328:	4618      	mov	r0, r3
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <ucdr_buffer_alignment>:

size_t ucdr_buffer_alignment(
        const ucdrBuffer* ub,
        size_t data_size)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
    return (data_size > ub->last_data_size)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	7d5b      	ldrb	r3, [r3, #21]
 800a342:	461a      	mov	r2, r3
        ? (data_size - ((uint32_t)(ub->offset) % data_size)) & (data_size - 1)
        : 0;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	4293      	cmp	r3, r2
 800a348:	d90e      	bls.n	800a368 <ucdr_buffer_alignment+0x34>
        ? (data_size - ((uint32_t)(ub->offset) % data_size)) & (data_size - 1)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	fbb3 f2f2 	udiv	r2, r3, r2
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	fb01 f202 	mul.w	r2, r1, r2
 800a35a:	1a9b      	subs	r3, r3, r2
 800a35c:	683a      	ldr	r2, [r7, #0]
 800a35e:	1ad2      	subs	r2, r2, r3
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	3b01      	subs	r3, #1
        : 0;
 800a364:	4013      	ands	r3, r2
 800a366:	e000      	b.n	800a36a <ucdr_buffer_alignment+0x36>
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <ucdr_advance_buffer>:

void ucdr_advance_buffer(
        ucdrBuffer* ub,
        size_t size)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b084      	sub	sp, #16
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	6039      	str	r1, [r7, #0]
    if (ucdr_check_buffer_available_for(ub, size))
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f7ff fe74 	bl	800a070 <ucdr_check_buffer_available_for>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00c      	beq.n	800a3a8 <ucdr_advance_buffer+0x32>
    {
        ub->iterator += size;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	689a      	ldr	r2, [r3, #8]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	441a      	add	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	609a      	str	r2, [r3, #8]
        ub->offset += size;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	691a      	ldr	r2, [r3, #16]
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	441a      	add	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	611a      	str	r2, [r3, #16]
 800a3a6:	e01b      	b.n	800a3e0 <ucdr_advance_buffer+0x6a>
    }
    else
    {
        size_t remaining_size = size;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	60fb      	str	r3, [r7, #12]
        size_t serialization_size;
        while (0 < (serialization_size = ucdr_check_final_buffer_behavior_array(ub, remaining_size, 1)))
 800a3ac:	e00f      	b.n	800a3ce <ucdr_advance_buffer+0x58>
        {
            remaining_size -= serialization_size;
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	60fb      	str	r3, [r7, #12]
            ub->iterator += serialization_size;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	689a      	ldr	r2, [r3, #8]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	441a      	add	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	609a      	str	r2, [r3, #8]
            ub->offset += serialization_size;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	691a      	ldr	r2, [r3, #16]
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	441a      	add	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	611a      	str	r2, [r3, #16]
        while (0 < (serialization_size = ucdr_check_final_buffer_behavior_array(ub, remaining_size, 1)))
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	68f9      	ldr	r1, [r7, #12]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7ff feb5 	bl	800a142 <ucdr_check_final_buffer_behavior_array>
 800a3d8:	60b8      	str	r0, [r7, #8]
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1e6      	bne.n	800a3ae <ucdr_advance_buffer+0x38>
        }
    }
    ub->last_data_size = 1;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	755a      	strb	r2, [r3, #21]
}
 800a3e6:	bf00      	nop
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <ucdr_buffer_length>:
    return (size_t)(ub->final - ub->init);
}

size_t ucdr_buffer_length(
        const ucdrBuffer* ub)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b083      	sub	sp, #12
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
    return (size_t)(ub->iterator - ub->init);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	689a      	ldr	r2, [r3, #8]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	1ad3      	subs	r3, r2, r3
}
 800a400:	4618      	mov	r0, r3
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <ucdr_buffer_remaining>:

size_t ucdr_buffer_remaining(
        const ucdrBuffer* ub)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
    return (size_t)(ub->final - ub->iterator);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	685a      	ldr	r2, [r3, #4]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	1ad3      	subs	r3, r2, r3
}
 800a41e:	4618      	mov	r0, r3
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <ucdr_array_to_buffer>:
void ucdr_array_to_buffer(
        ucdrBuffer* ub,
        const uint8_t* array,
        size_t size,
        size_t data_size)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b086      	sub	sp, #24
 800a42e:	af00      	add	r7, sp, #0
 800a430:	60f8      	str	r0, [r7, #12]
 800a432:	60b9      	str	r1, [r7, #8]
 800a434:	607a      	str	r2, [r7, #4]
 800a436:	603b      	str	r3, [r7, #0]
    if (ucdr_check_buffer_available_for(ub, size))
 800a438:	6879      	ldr	r1, [r7, #4]
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f7ff fe18 	bl	800a070 <ucdr_check_buffer_available_for>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d013      	beq.n	800a46e <ucdr_array_to_buffer+0x44>
    {
        memcpy(ub->iterator, array, size);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	68b9      	ldr	r1, [r7, #8]
 800a44e:	4618      	mov	r0, r3
 800a450:	f016 fc36 	bl	8020cc0 <memcpy>
        ub->iterator += size;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	689a      	ldr	r2, [r3, #8]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	441a      	add	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	609a      	str	r2, [r3, #8]
        ub->offset += size;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	691a      	ldr	r2, [r3, #16]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	441a      	add	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	611a      	str	r2, [r3, #16]
 800a46c:	e026      	b.n	800a4bc <ucdr_array_to_buffer+0x92>
    }
    else
    {
        size_t remaining_size = size;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	617b      	str	r3, [r7, #20]
        size_t serialization_size;
        while (0 < (serialization_size = ucdr_check_final_buffer_behavior_array(ub, remaining_size, data_size)))
 800a472:	e01a      	b.n	800a4aa <ucdr_array_to_buffer+0x80>
        {
            memcpy(ub->iterator, array + (size - remaining_size), serialization_size);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6898      	ldr	r0, [r3, #8]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	4413      	add	r3, r2
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	4619      	mov	r1, r3
 800a486:	f016 fc1b 	bl	8020cc0 <memcpy>
            remaining_size -= serialization_size;
 800a48a:	697a      	ldr	r2, [r7, #20]
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	617b      	str	r3, [r7, #20]
            ub->iterator += serialization_size;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	689a      	ldr	r2, [r3, #8]
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	441a      	add	r2, r3
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	609a      	str	r2, [r3, #8]
            ub->offset += serialization_size;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	691a      	ldr	r2, [r3, #16]
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	441a      	add	r2, r3
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	611a      	str	r2, [r3, #16]
        while (0 < (serialization_size = ucdr_check_final_buffer_behavior_array(ub, remaining_size, data_size)))
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	6979      	ldr	r1, [r7, #20]
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f7ff fe47 	bl	800a142 <ucdr_check_final_buffer_behavior_array>
 800a4b4:	6138      	str	r0, [r7, #16]
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1db      	bne.n	800a474 <ucdr_array_to_buffer+0x4a>
        }
    }
    ub->last_data_size = (uint8_t)data_size;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	755a      	strb	r2, [r3, #21]
}
 800a4c4:	bf00      	nop
 800a4c6:	3718      	adds	r7, #24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <ucdr_buffer_to_array>:
void ucdr_buffer_to_array(
        ucdrBuffer* ub,
        uint8_t* array,
        size_t size,
        size_t data_size)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
 800a4d8:	603b      	str	r3, [r7, #0]
    if (ucdr_check_buffer_available_for(ub, size))
 800a4da:	6879      	ldr	r1, [r7, #4]
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	f7ff fdc7 	bl	800a070 <ucdr_check_buffer_available_for>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d013      	beq.n	800a510 <ucdr_buffer_to_array+0x44>
    {
        memcpy(array, ub->iterator, size);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	68b8      	ldr	r0, [r7, #8]
 800a4f2:	f016 fbe5 	bl	8020cc0 <memcpy>
        ub->iterator += size;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	689a      	ldr	r2, [r3, #8]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	441a      	add	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	609a      	str	r2, [r3, #8]
        ub->offset += size;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	691a      	ldr	r2, [r3, #16]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	441a      	add	r2, r3
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	611a      	str	r2, [r3, #16]
 800a50e:	e026      	b.n	800a55e <ucdr_buffer_to_array+0x92>
    }
    else
    {
        size_t remaining_size = size;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	617b      	str	r3, [r7, #20]
        size_t deserialization_size;
        while (0 < (deserialization_size = ucdr_check_final_buffer_behavior_array(ub, remaining_size, data_size)))
 800a514:	e01a      	b.n	800a54c <ucdr_buffer_to_array+0x80>
        {
            memcpy(array + (size - remaining_size), ub->iterator, deserialization_size);
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	68ba      	ldr	r2, [r7, #8]
 800a51e:	18d0      	adds	r0, r2, r3
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	4619      	mov	r1, r3
 800a528:	f016 fbca 	bl	8020cc0 <memcpy>
            remaining_size -= deserialization_size;
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	617b      	str	r3, [r7, #20]
            ub->iterator += deserialization_size;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	689a      	ldr	r2, [r3, #8]
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	441a      	add	r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	609a      	str	r2, [r3, #8]
            ub->offset += deserialization_size;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	691a      	ldr	r2, [r3, #16]
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	441a      	add	r2, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	611a      	str	r2, [r3, #16]
        while (0 < (deserialization_size = ucdr_check_final_buffer_behavior_array(ub, remaining_size, data_size)))
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	6979      	ldr	r1, [r7, #20]
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f7ff fdf6 	bl	800a142 <ucdr_check_final_buffer_behavior_array>
 800a556:	6138      	str	r0, [r7, #16]
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1db      	bne.n	800a516 <ucdr_buffer_to_array+0x4a>
        }
    }
    ub->last_data_size = (uint8_t)data_size;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	b2da      	uxtb	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	755a      	strb	r2, [r3, #21]
}
 800a566:	bf00      	nop
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <ucdr_serialize_endian_array_char>:
    UCDR_DESERIALIZE_ARRAY_DEFINITION(SUFFIX, TYPE, TYPE_SIZE) \

// -------------------------------------------------------------------
//              PUBLIC SERIALIZATION IMPLEMENTATIONS
// -------------------------------------------------------------------
UCDR_ARRAY_DEFINITIONS(_char, char, 1)
 800a56e:	b580      	push	{r7, lr}
 800a570:	b084      	sub	sp, #16
 800a572:	af00      	add	r7, sp, #0
 800a574:	60f8      	str	r0, [r7, #12]
 800a576:	607a      	str	r2, [r7, #4]
 800a578:	603b      	str	r3, [r7, #0]
 800a57a:	460b      	mov	r3, r1
 800a57c:	72fb      	strb	r3, [r7, #11]
 800a57e:	2301      	movs	r3, #1
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	6879      	ldr	r1, [r7, #4]
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f7ff ff50 	bl	800a42a <ucdr_array_to_buffer>
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	7d9b      	ldrb	r3, [r3, #22]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	bf14      	ite	ne
 800a592:	2301      	movne	r3, #1
 800a594:	2300      	moveq	r3, #0
 800a596:	b2db      	uxtb	r3, r3
 800a598:	f083 0301 	eor.w	r3, r3, #1
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <ucdr_deserialize_endian_array_char>:
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	607a      	str	r2, [r7, #4]
 800a5b6:	603b      	str	r3, [r7, #0]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	72fb      	strb	r3, [r7, #11]
 800a5bc:	2301      	movs	r3, #1
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	6879      	ldr	r1, [r7, #4]
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f7ff ff82 	bl	800a4cc <ucdr_buffer_to_array>
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	7d9b      	ldrb	r3, [r3, #22]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	bf14      	ite	ne
 800a5d0:	2301      	movne	r3, #1
 800a5d2:	2300      	moveq	r3, #0
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	f083 0301 	eor.w	r3, r3, #1
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	f003 0301 	and.w	r3, r3, #1
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <ucdr_serialize_array_uint8_t>:
UCDR_ARRAY_DEFINITIONS(_bool, bool, 1)
UCDR_ARRAY_DEFINITIONS(_uint8_t, uint8_t, 1)
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	607a      	str	r2, [r7, #4]
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	68b9      	ldr	r1, [r7, #8]
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f7ff ff14 	bl	800a42a <ucdr_array_to_buffer>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	7d9b      	ldrb	r3, [r3, #22]
 800a606:	2b00      	cmp	r3, #0
 800a608:	bf14      	ite	ne
 800a60a:	2301      	movne	r3, #1
 800a60c:	2300      	moveq	r3, #0
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	f083 0301 	eor.w	r3, r3, #1
 800a614:	b2db      	uxtb	r3, r3
 800a616:	f003 0301 	and.w	r3, r3, #1
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <ucdr_serialize_endian_array_uint8_t>:
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	607a      	str	r2, [r7, #4]
 800a62e:	603b      	str	r3, [r7, #0]
 800a630:	460b      	mov	r3, r1
 800a632:	72fb      	strb	r3, [r7, #11]
 800a634:	2301      	movs	r3, #1
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	6879      	ldr	r1, [r7, #4]
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f7ff fef5 	bl	800a42a <ucdr_array_to_buffer>
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	7d9b      	ldrb	r3, [r3, #22]
 800a644:	2b00      	cmp	r3, #0
 800a646:	bf14      	ite	ne
 800a648:	2301      	movne	r3, #1
 800a64a:	2300      	moveq	r3, #0
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	f083 0301 	eor.w	r3, r3, #1
 800a652:	b2db      	uxtb	r3, r3
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <ucdr_deserialize_array_uint8_t>:
 800a662:	b580      	push	{r7, lr}
 800a664:	b084      	sub	sp, #16
 800a666:	af00      	add	r7, sp, #0
 800a668:	60f8      	str	r0, [r7, #12]
 800a66a:	60b9      	str	r1, [r7, #8]
 800a66c:	607a      	str	r2, [r7, #4]
 800a66e:	2301      	movs	r3, #1
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	68b9      	ldr	r1, [r7, #8]
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f7ff ff29 	bl	800a4cc <ucdr_buffer_to_array>
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	7d9b      	ldrb	r3, [r3, #22]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	bf14      	ite	ne
 800a682:	2301      	movne	r3, #1
 800a684:	2300      	moveq	r3, #0
 800a686:	b2db      	uxtb	r3, r3
 800a688:	f083 0301 	eor.w	r3, r3, #1
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	b2db      	uxtb	r3, r3
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <ucdr_deserialize_endian_array_uint8_t>:
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	607a      	str	r2, [r7, #4]
 800a6a6:	603b      	str	r3, [r7, #0]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	72fb      	strb	r3, [r7, #11]
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	6879      	ldr	r1, [r7, #4]
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f7ff ff0a 	bl	800a4cc <ucdr_buffer_to_array>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	7d9b      	ldrb	r3, [r3, #22]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	bf14      	ite	ne
 800a6c0:	2301      	movne	r3, #1
 800a6c2:	2300      	moveq	r3, #0
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	f083 0301 	eor.w	r3, r3, #1
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	f003 0301 	and.w	r3, r3, #1
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <ucdr_serialize_bool>:

// -------------------------------------------------------------------
//              PUBLIC DE-SERIALIZATION IMPLEMENTATIONS
// -------------------------------------------------------------------
UCDR_BASIC_TYPE_DEFINITIONS(_char, char, 1)
UCDR_BASIC_TYPE_DEFINITIONS(_bool, bool, 1)
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b082      	sub	sp, #8
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	70fb      	strb	r3, [r7, #3]
 800a6e6:	2101      	movs	r1, #1
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7ff fce1 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d010      	beq.n	800a716 <ucdr_serialize_bool+0x3c>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	78fa      	ldrb	r2, [r7, #3]
 800a6fa:	701a      	strb	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	1c5a      	adds	r2, r3, #1
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	609a      	str	r2, [r3, #8]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	1c5a      	adds	r2, r3, #1
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	611a      	str	r2, [r3, #16]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	755a      	strb	r2, [r3, #21]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	7d9b      	ldrb	r3, [r3, #22]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bf14      	ite	ne
 800a71e:	2301      	movne	r3, #1
 800a720:	2300      	moveq	r3, #0
 800a722:	b2db      	uxtb	r3, r3
 800a724:	f083 0301 	eor.w	r3, r3, #1
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	f003 0301 	and.w	r3, r3, #1
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	4618      	mov	r0, r3
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <ucdr_deserialize_bool>:
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
 800a742:	2101      	movs	r1, #1
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff fcb3 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d016      	beq.n	800a77e <ucdr_deserialize_bool+0x46>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	bf14      	ite	ne
 800a75a:	2301      	movne	r3, #1
 800a75c:	2300      	moveq	r3, #0
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	701a      	strb	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	1c5a      	adds	r2, r3, #1
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	609a      	str	r2, [r3, #8]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	1c5a      	adds	r2, r3, #1
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	611a      	str	r2, [r3, #16]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	755a      	strb	r2, [r3, #21]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	7d9b      	ldrb	r3, [r3, #22]
 800a782:	2b00      	cmp	r3, #0
 800a784:	bf14      	ite	ne
 800a786:	2301      	movne	r3, #1
 800a788:	2300      	moveq	r3, #0
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	f083 0301 	eor.w	r3, r3, #1
 800a790:	b2db      	uxtb	r3, r3
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	b2db      	uxtb	r3, r3
 800a798:	4618      	mov	r0, r3
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <ucdr_serialize_uint8_t>:
UCDR_BASIC_TYPE_DEFINITIONS(_uint8_t, uint8_t, 1)
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	70fb      	strb	r3, [r7, #3]
 800a7ac:	2101      	movs	r1, #1
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f7ff fc7e 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d010      	beq.n	800a7dc <ucdr_serialize_uint8_t+0x3c>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	78fa      	ldrb	r2, [r7, #3]
 800a7c0:	701a      	strb	r2, [r3, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	1c5a      	adds	r2, r3, #1
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	609a      	str	r2, [r3, #8]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	1c5a      	adds	r2, r3, #1
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	611a      	str	r2, [r3, #16]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	755a      	strb	r2, [r3, #21]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	7d9b      	ldrb	r3, [r3, #22]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	bf14      	ite	ne
 800a7e4:	2301      	movne	r3, #1
 800a7e6:	2300      	moveq	r3, #0
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	f083 0301 	eor.w	r3, r3, #1
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	f003 0301 	and.w	r3, r3, #1
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <ucdr_deserialize_uint8_t>:
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b082      	sub	sp, #8
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	6039      	str	r1, [r7, #0]
 800a808:	2101      	movs	r1, #1
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7ff fc50 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d011      	beq.n	800a83a <ucdr_deserialize_uint8_t+0x3c>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	781a      	ldrb	r2, [r3, #0]
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	701a      	strb	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	1c5a      	adds	r2, r3, #1
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	609a      	str	r2, [r3, #8]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	1c5a      	adds	r2, r3, #1
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	611a      	str	r2, [r3, #16]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	755a      	strb	r2, [r3, #21]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	7d9b      	ldrb	r3, [r3, #22]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	bf14      	ite	ne
 800a842:	2301      	movne	r3, #1
 800a844:	2300      	moveq	r3, #0
 800a846:	b2db      	uxtb	r3, r3
 800a848:	f083 0301 	eor.w	r3, r3, #1
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	b2db      	uxtb	r3, r3
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <ucdr_serialize_uint16_t>:
UCDR_BASIC_TYPE_DEFINITIONS(_uint16_t, uint16_t, 2)
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08a      	sub	sp, #40	; 0x28
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	460b      	mov	r3, r1
 800a866:	807b      	strh	r3, [r7, #2]
 800a868:	2102      	movs	r1, #2
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7ff fd62 	bl	800a334 <ucdr_buffer_alignment>
 800a870:	61f8      	str	r0, [r7, #28]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	7d5b      	ldrb	r3, [r3, #21]
 800a876:	76fb      	strb	r3, [r7, #27]
 800a878:	69f9      	ldr	r1, [r7, #28]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7ff fd7b 	bl	800a376 <ucdr_advance_buffer>
 800a880:	2102      	movs	r1, #2
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7ff fbf4 	bl	800a070 <ucdr_check_buffer_available_for>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d023      	beq.n	800a8d6 <ucdr_serialize_uint16_t+0x7a>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	7d1b      	ldrb	r3, [r3, #20]
 800a892:	2b01      	cmp	r3, #1
 800a894:	d104      	bne.n	800a8a0 <ucdr_serialize_uint16_t+0x44>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	887a      	ldrh	r2, [r7, #2]
 800a89c:	801a      	strh	r2, [r3, #0]
 800a89e:	e00c      	b.n	800a8ba <ucdr_serialize_uint16_t+0x5e>
 800a8a0:	1cbb      	adds	r3, r7, #2
 800a8a2:	60bb      	str	r3, [r7, #8]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	7852      	ldrb	r2, [r2, #1]
 800a8ac:	701a      	strb	r2, [r3, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	7812      	ldrb	r2, [r2, #0]
 800a8b8:	701a      	strb	r2, [r3, #0]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	1c9a      	adds	r2, r3, #2
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	609a      	str	r2, [r3, #8]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	1c9a      	adds	r2, r3, #2
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	611a      	str	r2, [r3, #16]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2202      	movs	r2, #2
 800a8d2:	755a      	strb	r2, [r3, #21]
 800a8d4:	e0a5      	b.n	800aa22 <ucdr_serialize_uint16_t+0x1c6>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d975      	bls.n	800a9ce <ucdr_serialize_uint16_t+0x172>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	613b      	str	r3, [r7, #16]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685a      	ldr	r2, [r3, #4]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	60fb      	str	r3, [r7, #12]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	689a      	ldr	r2, [r3, #8]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	441a      	add	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	609a      	str	r2, [r3, #8]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	691a      	ldr	r2, [r3, #16]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	441a      	add	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	611a      	str	r2, [r3, #16]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f1c3 0302 	rsb	r3, r3, #2
 800a912:	4619      	mov	r1, r3
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f7ff fbcb 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d045      	beq.n	800a9ac <ucdr_serialize_uint16_t+0x150>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	7d1b      	ldrb	r3, [r3, #20]
 800a924:	2b01      	cmp	r3, #1
 800a926:	d111      	bne.n	800a94c <ucdr_serialize_uint16_t+0xf0>
 800a928:	1cbb      	adds	r3, r7, #2
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	4619      	mov	r1, r3
 800a92e:	6938      	ldr	r0, [r7, #16]
 800a930:	f016 f9c6 	bl	8020cc0 <memcpy>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6898      	ldr	r0, [r3, #8]
 800a938:	1cba      	adds	r2, r7, #2
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	18d1      	adds	r1, r2, r3
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f1c3 0302 	rsb	r3, r3, #2
 800a944:	461a      	mov	r2, r3
 800a946:	f016 f9bb 	bl	8020cc0 <memcpy>
 800a94a:	e01c      	b.n	800a986 <ucdr_serialize_uint16_t+0x12a>
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	627b      	str	r3, [r7, #36]	; 0x24
 800a950:	2300      	movs	r3, #0
 800a952:	623b      	str	r3, [r7, #32]
 800a954:	e014      	b.n	800a980 <ucdr_serialize_uint16_t+0x124>
 800a956:	6a3b      	ldr	r3, [r7, #32]
 800a958:	f1c3 0301 	rsb	r3, r3, #1
 800a95c:	1cba      	adds	r2, r7, #2
 800a95e:	4413      	add	r3, r2
 800a960:	781a      	ldrb	r2, [r3, #0]
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	701a      	strb	r2, [r3, #0]
 800a966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a968:	3301      	adds	r3, #1
 800a96a:	627b      	str	r3, [r7, #36]	; 0x24
 800a96c:	6a3a      	ldr	r2, [r7, #32]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	429a      	cmp	r2, r3
 800a972:	d302      	bcc.n	800a97a <ucdr_serialize_uint16_t+0x11e>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	627b      	str	r3, [r7, #36]	; 0x24
 800a97a:	6a3b      	ldr	r3, [r7, #32]
 800a97c:	3301      	adds	r3, #1
 800a97e:	623b      	str	r3, [r7, #32]
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	2b01      	cmp	r3, #1
 800a984:	d9e7      	bls.n	800a956 <ucdr_serialize_uint16_t+0xfa>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	689a      	ldr	r2, [r3, #8]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f1c3 0302 	rsb	r3, r3, #2
 800a990:	441a      	add	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	609a      	str	r2, [r3, #8]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	691a      	ldr	r2, [r3, #16]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	1ad3      	subs	r3, r2, r3
 800a99e:	1c9a      	adds	r2, r3, #2
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	611a      	str	r2, [r3, #16]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	755a      	strb	r2, [r3, #21]
 800a9aa:	e03a      	b.n	800aa22 <ucdr_serialize_uint16_t+0x1c6>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	689a      	ldr	r2, [r3, #8]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	425b      	negs	r3, r3
 800a9b4:	441a      	add	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	609a      	str	r2, [r3, #8]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	691a      	ldr	r2, [r3, #16]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	1ad2      	subs	r2, r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	611a      	str	r2, [r3, #16]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	7efa      	ldrb	r2, [r7, #27]
 800a9ca:	755a      	strb	r2, [r3, #21]
 800a9cc:	e029      	b.n	800aa22 <ucdr_serialize_uint16_t+0x1c6>
 800a9ce:	2102      	movs	r1, #2
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7ff fb6d 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d022      	beq.n	800aa22 <ucdr_serialize_uint16_t+0x1c6>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	7d1b      	ldrb	r3, [r3, #20]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d104      	bne.n	800a9ee <ucdr_serialize_uint16_t+0x192>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	887a      	ldrh	r2, [r7, #2]
 800a9ea:	801a      	strh	r2, [r3, #0]
 800a9ec:	e00c      	b.n	800aa08 <ucdr_serialize_uint16_t+0x1ac>
 800a9ee:	1cbb      	adds	r3, r7, #2
 800a9f0:	617b      	str	r3, [r7, #20]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	7852      	ldrb	r2, [r2, #1]
 800a9fa:	701a      	strb	r2, [r3, #0]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	3301      	adds	r3, #1
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	7812      	ldrb	r2, [r2, #0]
 800aa06:	701a      	strb	r2, [r3, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	1c9a      	adds	r2, r3, #2
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	609a      	str	r2, [r3, #8]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	1c9a      	adds	r2, r3, #2
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	611a      	str	r2, [r3, #16]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2202      	movs	r2, #2
 800aa20:	755a      	strb	r2, [r3, #21]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	7d9b      	ldrb	r3, [r3, #22]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	bf14      	ite	ne
 800aa2a:	2301      	movne	r3, #1
 800aa2c:	2300      	moveq	r3, #0
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	f083 0301 	eor.w	r3, r3, #1
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	f003 0301 	and.w	r3, r3, #1
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3728      	adds	r7, #40	; 0x28
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <ucdr_serialize_endian_uint16_t>:
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b08a      	sub	sp, #40	; 0x28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
 800aa50:	4613      	mov	r3, r2
 800aa52:	803b      	strh	r3, [r7, #0]
 800aa54:	2102      	movs	r1, #2
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7ff fc6c 	bl	800a334 <ucdr_buffer_alignment>
 800aa5c:	61f8      	str	r0, [r7, #28]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	7d5b      	ldrb	r3, [r3, #21]
 800aa62:	76fb      	strb	r3, [r7, #27]
 800aa64:	69f9      	ldr	r1, [r7, #28]
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7ff fc85 	bl	800a376 <ucdr_advance_buffer>
 800aa6c:	2102      	movs	r1, #2
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7ff fafe 	bl	800a070 <ucdr_check_buffer_available_for>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d022      	beq.n	800aac0 <ucdr_serialize_endian_uint16_t+0x7c>
 800aa7a:	78fb      	ldrb	r3, [r7, #3]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d104      	bne.n	800aa8a <ucdr_serialize_endian_uint16_t+0x46>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	883a      	ldrh	r2, [r7, #0]
 800aa86:	801a      	strh	r2, [r3, #0]
 800aa88:	e00c      	b.n	800aaa4 <ucdr_serialize_endian_uint16_t+0x60>
 800aa8a:	463b      	mov	r3, r7
 800aa8c:	60bb      	str	r3, [r7, #8]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	7852      	ldrb	r2, [r2, #1]
 800aa96:	701a      	strb	r2, [r3, #0]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	7812      	ldrb	r2, [r2, #0]
 800aaa2:	701a      	strb	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	1c9a      	adds	r2, r3, #2
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	609a      	str	r2, [r3, #8]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	1c9a      	adds	r2, r3, #2
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	611a      	str	r2, [r3, #16]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2202      	movs	r2, #2
 800aabc:	755a      	strb	r2, [r3, #21]
 800aabe:	e0a3      	b.n	800ac08 <ucdr_serialize_endian_uint16_t+0x1c4>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	685a      	ldr	r2, [r3, #4]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d974      	bls.n	800abb6 <ucdr_serialize_endian_uint16_t+0x172>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	613b      	str	r3, [r7, #16]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	685a      	ldr	r2, [r3, #4]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	1ad3      	subs	r3, r2, r3
 800aadc:	60fb      	str	r3, [r7, #12]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	689a      	ldr	r2, [r3, #8]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	441a      	add	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	609a      	str	r2, [r3, #8]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	691a      	ldr	r2, [r3, #16]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	441a      	add	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	611a      	str	r2, [r3, #16]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f1c3 0302 	rsb	r3, r3, #2
 800aafc:	4619      	mov	r1, r3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7ff fad6 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d044      	beq.n	800ab94 <ucdr_serialize_endian_uint16_t+0x150>
 800ab0a:	78fb      	ldrb	r3, [r7, #3]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d111      	bne.n	800ab34 <ucdr_serialize_endian_uint16_t+0xf0>
 800ab10:	463b      	mov	r3, r7
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	4619      	mov	r1, r3
 800ab16:	6938      	ldr	r0, [r7, #16]
 800ab18:	f016 f8d2 	bl	8020cc0 <memcpy>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6898      	ldr	r0, [r3, #8]
 800ab20:	463a      	mov	r2, r7
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	18d1      	adds	r1, r2, r3
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f1c3 0302 	rsb	r3, r3, #2
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	f016 f8c7 	bl	8020cc0 <memcpy>
 800ab32:	e01c      	b.n	800ab6e <ucdr_serialize_endian_uint16_t+0x12a>
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	627b      	str	r3, [r7, #36]	; 0x24
 800ab38:	2300      	movs	r3, #0
 800ab3a:	623b      	str	r3, [r7, #32]
 800ab3c:	e014      	b.n	800ab68 <ucdr_serialize_endian_uint16_t+0x124>
 800ab3e:	6a3b      	ldr	r3, [r7, #32]
 800ab40:	f1c3 0301 	rsb	r3, r3, #1
 800ab44:	463a      	mov	r2, r7
 800ab46:	4413      	add	r3, r2
 800ab48:	781a      	ldrb	r2, [r3, #0]
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	701a      	strb	r2, [r3, #0]
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	3301      	adds	r3, #1
 800ab52:	627b      	str	r3, [r7, #36]	; 0x24
 800ab54:	6a3a      	ldr	r2, [r7, #32]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d302      	bcc.n	800ab62 <ucdr_serialize_endian_uint16_t+0x11e>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	627b      	str	r3, [r7, #36]	; 0x24
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	3301      	adds	r3, #1
 800ab66:	623b      	str	r3, [r7, #32]
 800ab68:	6a3b      	ldr	r3, [r7, #32]
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d9e7      	bls.n	800ab3e <ucdr_serialize_endian_uint16_t+0xfa>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	689a      	ldr	r2, [r3, #8]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f1c3 0302 	rsb	r3, r3, #2
 800ab78:	441a      	add	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	609a      	str	r2, [r3, #8]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	691a      	ldr	r2, [r3, #16]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	1c9a      	adds	r2, r3, #2
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	611a      	str	r2, [r3, #16]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2202      	movs	r2, #2
 800ab90:	755a      	strb	r2, [r3, #21]
 800ab92:	e039      	b.n	800ac08 <ucdr_serialize_endian_uint16_t+0x1c4>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	689a      	ldr	r2, [r3, #8]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	425b      	negs	r3, r3
 800ab9c:	441a      	add	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	609a      	str	r2, [r3, #8]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	691a      	ldr	r2, [r3, #16]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	1ad2      	subs	r2, r2, r3
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	611a      	str	r2, [r3, #16]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	7efa      	ldrb	r2, [r7, #27]
 800abb2:	755a      	strb	r2, [r3, #21]
 800abb4:	e028      	b.n	800ac08 <ucdr_serialize_endian_uint16_t+0x1c4>
 800abb6:	2102      	movs	r1, #2
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7ff fa79 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d021      	beq.n	800ac08 <ucdr_serialize_endian_uint16_t+0x1c4>
 800abc4:	78fb      	ldrb	r3, [r7, #3]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d104      	bne.n	800abd4 <ucdr_serialize_endian_uint16_t+0x190>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	883a      	ldrh	r2, [r7, #0]
 800abd0:	801a      	strh	r2, [r3, #0]
 800abd2:	e00c      	b.n	800abee <ucdr_serialize_endian_uint16_t+0x1aa>
 800abd4:	463b      	mov	r3, r7
 800abd6:	617b      	str	r3, [r7, #20]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	697a      	ldr	r2, [r7, #20]
 800abde:	7852      	ldrb	r2, [r2, #1]
 800abe0:	701a      	strb	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	3301      	adds	r3, #1
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	7812      	ldrb	r2, [r2, #0]
 800abec:	701a      	strb	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	1c9a      	adds	r2, r3, #2
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	609a      	str	r2, [r3, #8]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	1c9a      	adds	r2, r3, #2
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	611a      	str	r2, [r3, #16]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2202      	movs	r2, #2
 800ac06:	755a      	strb	r2, [r3, #21]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	7d9b      	ldrb	r3, [r3, #22]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	bf14      	ite	ne
 800ac10:	2301      	movne	r3, #1
 800ac12:	2300      	moveq	r3, #0
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	f083 0301 	eor.w	r3, r3, #1
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	f003 0301 	and.w	r3, r3, #1
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	4618      	mov	r0, r3
 800ac24:	3728      	adds	r7, #40	; 0x28
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <ucdr_deserialize_uint16_t>:
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b08c      	sub	sp, #48	; 0x30
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	6039      	str	r1, [r7, #0]
 800ac34:	2102      	movs	r1, #2
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7ff fb7c 	bl	800a334 <ucdr_buffer_alignment>
 800ac3c:	6238      	str	r0, [r7, #32]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	7d5b      	ldrb	r3, [r3, #21]
 800ac42:	77fb      	strb	r3, [r7, #31]
 800ac44:	6a39      	ldr	r1, [r7, #32]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7ff fb95 	bl	800a376 <ucdr_advance_buffer>
 800ac4c:	2102      	movs	r1, #2
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f7ff fa0e 	bl	800a070 <ucdr_check_buffer_available_for>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d025      	beq.n	800aca6 <ucdr_deserialize_uint16_t+0x7c>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	7d1b      	ldrb	r3, [r3, #20]
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d106      	bne.n	800ac70 <ucdr_deserialize_uint16_t+0x46>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	881b      	ldrh	r3, [r3, #0]
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	801a      	strh	r2, [r3, #0]
 800ac6e:	e00c      	b.n	800ac8a <ucdr_deserialize_uint16_t+0x60>
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	60fb      	str	r3, [r7, #12]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	785a      	ldrb	r2, [r3, #1]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	701a      	strb	r2, [r3, #0]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	689a      	ldr	r2, [r3, #8]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	3301      	adds	r3, #1
 800ac86:	7812      	ldrb	r2, [r2, #0]
 800ac88:	701a      	strb	r2, [r3, #0]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	1c9a      	adds	r2, r3, #2
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	609a      	str	r2, [r3, #8]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	691b      	ldr	r3, [r3, #16]
 800ac98:	1c9a      	adds	r2, r3, #2
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	611a      	str	r2, [r3, #16]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2202      	movs	r2, #2
 800aca2:	755a      	strb	r2, [r3, #21]
 800aca4:	e0a8      	b.n	800adf8 <ucdr_deserialize_uint16_t+0x1ce>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d976      	bls.n	800ada0 <ucdr_deserialize_uint16_t+0x176>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	617b      	str	r3, [r7, #20]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	613b      	str	r3, [r7, #16]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	689a      	ldr	r2, [r3, #8]
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	441a      	add	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	609a      	str	r2, [r3, #8]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	691a      	ldr	r2, [r3, #16]
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	441a      	add	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	611a      	str	r2, [r3, #16]
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	f1c3 0302 	rsb	r3, r3, #2
 800ace2:	4619      	mov	r1, r3
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f7ff f9e3 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d046      	beq.n	800ad7e <ucdr_deserialize_uint16_t+0x154>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	7d1b      	ldrb	r3, [r3, #20]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d110      	bne.n	800ad1a <ucdr_deserialize_uint16_t+0xf0>
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	6979      	ldr	r1, [r7, #20]
 800acfc:	6838      	ldr	r0, [r7, #0]
 800acfe:	f015 ffdf 	bl	8020cc0 <memcpy>
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	18d0      	adds	r0, r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6899      	ldr	r1, [r3, #8]
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	f1c3 0302 	rsb	r3, r3, #2
 800ad12:	461a      	mov	r2, r3
 800ad14:	f015 ffd4 	bl	8020cc0 <memcpy>
 800ad18:	e01e      	b.n	800ad58 <ucdr_deserialize_uint16_t+0x12e>
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad22:	2300      	movs	r3, #0
 800ad24:	627b      	str	r3, [r7, #36]	; 0x24
 800ad26:	e014      	b.n	800ad52 <ucdr_deserialize_uint16_t+0x128>
 800ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2a:	f1c3 0301 	rsb	r3, r3, #1
 800ad2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad30:	4413      	add	r3, r2
 800ad32:	781a      	ldrb	r2, [r3, #0]
 800ad34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad36:	701a      	strb	r2, [r3, #0]
 800ad38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d302      	bcc.n	800ad4c <ucdr_deserialize_uint16_t+0x122>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4e:	3301      	adds	r3, #1
 800ad50:	627b      	str	r3, [r7, #36]	; 0x24
 800ad52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d9e7      	bls.n	800ad28 <ucdr_deserialize_uint16_t+0xfe>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	689a      	ldr	r2, [r3, #8]
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	f1c3 0302 	rsb	r3, r3, #2
 800ad62:	441a      	add	r2, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	609a      	str	r2, [r3, #8]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	691a      	ldr	r2, [r3, #16]
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	1c9a      	adds	r2, r3, #2
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	611a      	str	r2, [r3, #16]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2202      	movs	r2, #2
 800ad7a:	755a      	strb	r2, [r3, #21]
 800ad7c:	e03c      	b.n	800adf8 <ucdr_deserialize_uint16_t+0x1ce>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	689a      	ldr	r2, [r3, #8]
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	425b      	negs	r3, r3
 800ad86:	441a      	add	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	609a      	str	r2, [r3, #8]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	691a      	ldr	r2, [r3, #16]
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	1ad2      	subs	r2, r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	611a      	str	r2, [r3, #16]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	7ffa      	ldrb	r2, [r7, #31]
 800ad9c:	755a      	strb	r2, [r3, #21]
 800ad9e:	e02b      	b.n	800adf8 <ucdr_deserialize_uint16_t+0x1ce>
 800ada0:	2102      	movs	r1, #2
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f7ff f984 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d024      	beq.n	800adf8 <ucdr_deserialize_uint16_t+0x1ce>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	7d1b      	ldrb	r3, [r3, #20]
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d106      	bne.n	800adc4 <ucdr_deserialize_uint16_t+0x19a>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	881b      	ldrh	r3, [r3, #0]
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	801a      	strh	r2, [r3, #0]
 800adc2:	e00c      	b.n	800adde <ucdr_deserialize_uint16_t+0x1b4>
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	61bb      	str	r3, [r7, #24]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	785a      	ldrb	r2, [r3, #1]
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	701a      	strb	r2, [r3, #0]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	689a      	ldr	r2, [r3, #8]
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	3301      	adds	r3, #1
 800adda:	7812      	ldrb	r2, [r2, #0]
 800addc:	701a      	strb	r2, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	1c9a      	adds	r2, r3, #2
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	609a      	str	r2, [r3, #8]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	1c9a      	adds	r2, r3, #2
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	611a      	str	r2, [r3, #16]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2202      	movs	r2, #2
 800adf6:	755a      	strb	r2, [r3, #21]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	7d9b      	ldrb	r3, [r3, #22]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	bf14      	ite	ne
 800ae00:	2301      	movne	r3, #1
 800ae02:	2300      	moveq	r3, #0
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	f083 0301 	eor.w	r3, r3, #1
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	f003 0301 	and.w	r3, r3, #1
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	4618      	mov	r0, r3
 800ae14:	3730      	adds	r7, #48	; 0x30
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <ucdr_deserialize_endian_uint16_t>:
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b08e      	sub	sp, #56	; 0x38
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	60f8      	str	r0, [r7, #12]
 800ae22:	460b      	mov	r3, r1
 800ae24:	607a      	str	r2, [r7, #4]
 800ae26:	72fb      	strb	r3, [r7, #11]
 800ae28:	2102      	movs	r1, #2
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f7ff fa82 	bl	800a334 <ucdr_buffer_alignment>
 800ae30:	62b8      	str	r0, [r7, #40]	; 0x28
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	7d5b      	ldrb	r3, [r3, #21]
 800ae36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f7ff fa9a 	bl	800a376 <ucdr_advance_buffer>
 800ae42:	2102      	movs	r1, #2
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f7ff f913 	bl	800a070 <ucdr_check_buffer_available_for>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d024      	beq.n	800ae9a <ucdr_deserialize_endian_uint16_t+0x80>
 800ae50:	7afb      	ldrb	r3, [r7, #11]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d106      	bne.n	800ae64 <ucdr_deserialize_endian_uint16_t+0x4a>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	881b      	ldrh	r3, [r3, #0]
 800ae5c:	b29a      	uxth	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	801a      	strh	r2, [r3, #0]
 800ae62:	e00c      	b.n	800ae7e <ucdr_deserialize_endian_uint16_t+0x64>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	617b      	str	r3, [r7, #20]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	785a      	ldrb	r2, [r3, #1]
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	701a      	strb	r2, [r3, #0]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	689a      	ldr	r2, [r3, #8]
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	7812      	ldrb	r2, [r2, #0]
 800ae7c:	701a      	strb	r2, [r3, #0]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	1c9a      	adds	r2, r3, #2
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	609a      	str	r2, [r3, #8]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	1c9a      	adds	r2, r3, #2
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	611a      	str	r2, [r3, #16]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2202      	movs	r2, #2
 800ae96:	755a      	strb	r2, [r3, #21]
 800ae98:	e0a7      	b.n	800afea <ucdr_deserialize_endian_uint16_t+0x1d0>
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	685a      	ldr	r2, [r3, #4]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d976      	bls.n	800af94 <ucdr_deserialize_endian_uint16_t+0x17a>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	61fb      	str	r3, [r7, #28]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	685a      	ldr	r2, [r3, #4]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	1ad3      	subs	r3, r2, r3
 800aeb6:	61bb      	str	r3, [r7, #24]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	689a      	ldr	r2, [r3, #8]
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	441a      	add	r2, r3
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	609a      	str	r2, [r3, #8]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	691a      	ldr	r2, [r3, #16]
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	441a      	add	r2, r3
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	611a      	str	r2, [r3, #16]
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	f1c3 0302 	rsb	r3, r3, #2
 800aed6:	4619      	mov	r1, r3
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f7ff f8e9 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d045      	beq.n	800af70 <ucdr_deserialize_endian_uint16_t+0x156>
 800aee4:	7afb      	ldrb	r3, [r7, #11]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d110      	bne.n	800af0c <ucdr_deserialize_endian_uint16_t+0xf2>
 800aeea:	69ba      	ldr	r2, [r7, #24]
 800aeec:	69f9      	ldr	r1, [r7, #28]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f015 fee6 	bl	8020cc0 <memcpy>
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	18d0      	adds	r0, r2, r3
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6899      	ldr	r1, [r3, #8]
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	f1c3 0302 	rsb	r3, r3, #2
 800af04:	461a      	mov	r2, r3
 800af06:	f015 fedb 	bl	8020cc0 <memcpy>
 800af0a:	e01e      	b.n	800af4a <ucdr_deserialize_endian_uint16_t+0x130>
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	637b      	str	r3, [r7, #52]	; 0x34
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	633b      	str	r3, [r7, #48]	; 0x30
 800af14:	2300      	movs	r3, #0
 800af16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af18:	e014      	b.n	800af44 <ucdr_deserialize_endian_uint16_t+0x12a>
 800af1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1c:	f1c3 0301 	rsb	r3, r3, #1
 800af20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af22:	4413      	add	r3, r2
 800af24:	781a      	ldrb	r2, [r3, #0]
 800af26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af28:	701a      	strb	r2, [r3, #0]
 800af2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2c:	3301      	adds	r3, #1
 800af2e:	633b      	str	r3, [r7, #48]	; 0x30
 800af30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	429a      	cmp	r2, r3
 800af36:	d302      	bcc.n	800af3e <ucdr_deserialize_endian_uint16_t+0x124>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	637b      	str	r3, [r7, #52]	; 0x34
 800af3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af40:	3301      	adds	r3, #1
 800af42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af46:	2b01      	cmp	r3, #1
 800af48:	d9e7      	bls.n	800af1a <ucdr_deserialize_endian_uint16_t+0x100>
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	689a      	ldr	r2, [r3, #8]
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	f1c3 0302 	rsb	r3, r3, #2
 800af54:	441a      	add	r2, r3
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	609a      	str	r2, [r3, #8]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	691a      	ldr	r2, [r3, #16]
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	1c9a      	adds	r2, r3, #2
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	611a      	str	r2, [r3, #16]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2202      	movs	r2, #2
 800af6c:	755a      	strb	r2, [r3, #21]
 800af6e:	e03c      	b.n	800afea <ucdr_deserialize_endian_uint16_t+0x1d0>
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	689a      	ldr	r2, [r3, #8]
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	425b      	negs	r3, r3
 800af78:	441a      	add	r2, r3
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	609a      	str	r2, [r3, #8]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	691a      	ldr	r2, [r3, #16]
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	1ad2      	subs	r2, r2, r3
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	611a      	str	r2, [r3, #16]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800af90:	755a      	strb	r2, [r3, #21]
 800af92:	e02a      	b.n	800afea <ucdr_deserialize_endian_uint16_t+0x1d0>
 800af94:	2102      	movs	r1, #2
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	f7ff f88a 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d023      	beq.n	800afea <ucdr_deserialize_endian_uint16_t+0x1d0>
 800afa2:	7afb      	ldrb	r3, [r7, #11]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d106      	bne.n	800afb6 <ucdr_deserialize_endian_uint16_t+0x19c>
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	881b      	ldrh	r3, [r3, #0]
 800afae:	b29a      	uxth	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	801a      	strh	r2, [r3, #0]
 800afb4:	e00c      	b.n	800afd0 <ucdr_deserialize_endian_uint16_t+0x1b6>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	623b      	str	r3, [r7, #32]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	785a      	ldrb	r2, [r3, #1]
 800afc0:	6a3b      	ldr	r3, [r7, #32]
 800afc2:	701a      	strb	r2, [r3, #0]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	689a      	ldr	r2, [r3, #8]
 800afc8:	6a3b      	ldr	r3, [r7, #32]
 800afca:	3301      	adds	r3, #1
 800afcc:	7812      	ldrb	r2, [r2, #0]
 800afce:	701a      	strb	r2, [r3, #0]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	1c9a      	adds	r2, r3, #2
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	609a      	str	r2, [r3, #8]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	1c9a      	adds	r2, r3, #2
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	611a      	str	r2, [r3, #16]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2202      	movs	r2, #2
 800afe8:	755a      	strb	r2, [r3, #21]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	7d9b      	ldrb	r3, [r3, #22]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	bf14      	ite	ne
 800aff2:	2301      	movne	r3, #1
 800aff4:	2300      	moveq	r3, #0
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	f083 0301 	eor.w	r3, r3, #1
 800affc:	b2db      	uxtb	r3, r3
 800affe:	f003 0301 	and.w	r3, r3, #1
 800b002:	b2db      	uxtb	r3, r3
 800b004:	4618      	mov	r0, r3
 800b006:	3738      	adds	r7, #56	; 0x38
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <ucdr_serialize_uint32_t>:
UCDR_BASIC_TYPE_DEFINITIONS(_uint32_t, uint32_t, 4)
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b08a      	sub	sp, #40	; 0x28
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
 800b016:	2104      	movs	r1, #4
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f7ff f98b 	bl	800a334 <ucdr_buffer_alignment>
 800b01e:	61f8      	str	r0, [r7, #28]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	7d5b      	ldrb	r3, [r3, #21]
 800b024:	76fb      	strb	r3, [r7, #27]
 800b026:	69f9      	ldr	r1, [r7, #28]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7ff f9a4 	bl	800a376 <ucdr_advance_buffer>
 800b02e:	2104      	movs	r1, #4
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7ff f81d 	bl	800a070 <ucdr_check_buffer_available_for>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d02f      	beq.n	800b09c <ucdr_serialize_uint32_t+0x90>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	7d1b      	ldrb	r3, [r3, #20]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d104      	bne.n	800b04e <ucdr_serialize_uint32_t+0x42>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	601a      	str	r2, [r3, #0]
 800b04c:	e018      	b.n	800b080 <ucdr_serialize_uint32_t+0x74>
 800b04e:	463b      	mov	r3, r7
 800b050:	60bb      	str	r3, [r7, #8]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	68ba      	ldr	r2, [r7, #8]
 800b058:	78d2      	ldrb	r2, [r2, #3]
 800b05a:	701a      	strb	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	3301      	adds	r3, #1
 800b062:	68ba      	ldr	r2, [r7, #8]
 800b064:	7892      	ldrb	r2, [r2, #2]
 800b066:	701a      	strb	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	3302      	adds	r3, #2
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	7852      	ldrb	r2, [r2, #1]
 800b072:	701a      	strb	r2, [r3, #0]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	3303      	adds	r3, #3
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	7812      	ldrb	r2, [r2, #0]
 800b07e:	701a      	strb	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	1d1a      	adds	r2, r3, #4
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	609a      	str	r2, [r3, #8]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	1d1a      	adds	r2, r3, #4
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	611a      	str	r2, [r3, #16]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2204      	movs	r2, #4
 800b098:	755a      	strb	r2, [r3, #21]
 800b09a:	e0b1      	b.n	800b200 <ucdr_serialize_uint32_t+0x1f4>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	685a      	ldr	r2, [r3, #4]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d975      	bls.n	800b194 <ucdr_serialize_uint32_t+0x188>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	613b      	str	r3, [r7, #16]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685a      	ldr	r2, [r3, #4]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	60fb      	str	r3, [r7, #12]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	689a      	ldr	r2, [r3, #8]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	441a      	add	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	609a      	str	r2, [r3, #8]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	691a      	ldr	r2, [r3, #16]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	441a      	add	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	611a      	str	r2, [r3, #16]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f1c3 0304 	rsb	r3, r3, #4
 800b0d8:	4619      	mov	r1, r3
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7fe ffe8 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d045      	beq.n	800b172 <ucdr_serialize_uint32_t+0x166>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	7d1b      	ldrb	r3, [r3, #20]
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d111      	bne.n	800b112 <ucdr_serialize_uint32_t+0x106>
 800b0ee:	463b      	mov	r3, r7
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6938      	ldr	r0, [r7, #16]
 800b0f6:	f015 fde3 	bl	8020cc0 <memcpy>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6898      	ldr	r0, [r3, #8]
 800b0fe:	463a      	mov	r2, r7
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	18d1      	adds	r1, r2, r3
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f1c3 0304 	rsb	r3, r3, #4
 800b10a:	461a      	mov	r2, r3
 800b10c:	f015 fdd8 	bl	8020cc0 <memcpy>
 800b110:	e01c      	b.n	800b14c <ucdr_serialize_uint32_t+0x140>
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	627b      	str	r3, [r7, #36]	; 0x24
 800b116:	2300      	movs	r3, #0
 800b118:	623b      	str	r3, [r7, #32]
 800b11a:	e014      	b.n	800b146 <ucdr_serialize_uint32_t+0x13a>
 800b11c:	6a3b      	ldr	r3, [r7, #32]
 800b11e:	f1c3 0303 	rsb	r3, r3, #3
 800b122:	463a      	mov	r2, r7
 800b124:	4413      	add	r3, r2
 800b126:	781a      	ldrb	r2, [r3, #0]
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12a:	701a      	strb	r2, [r3, #0]
 800b12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12e:	3301      	adds	r3, #1
 800b130:	627b      	str	r3, [r7, #36]	; 0x24
 800b132:	6a3a      	ldr	r2, [r7, #32]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	429a      	cmp	r2, r3
 800b138:	d302      	bcc.n	800b140 <ucdr_serialize_uint32_t+0x134>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	627b      	str	r3, [r7, #36]	; 0x24
 800b140:	6a3b      	ldr	r3, [r7, #32]
 800b142:	3301      	adds	r3, #1
 800b144:	623b      	str	r3, [r7, #32]
 800b146:	6a3b      	ldr	r3, [r7, #32]
 800b148:	2b03      	cmp	r3, #3
 800b14a:	d9e7      	bls.n	800b11c <ucdr_serialize_uint32_t+0x110>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	689a      	ldr	r2, [r3, #8]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f1c3 0304 	rsb	r3, r3, #4
 800b156:	441a      	add	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	609a      	str	r2, [r3, #8]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	691a      	ldr	r2, [r3, #16]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	1d1a      	adds	r2, r3, #4
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	611a      	str	r2, [r3, #16]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2204      	movs	r2, #4
 800b16e:	755a      	strb	r2, [r3, #21]
 800b170:	e046      	b.n	800b200 <ucdr_serialize_uint32_t+0x1f4>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	689a      	ldr	r2, [r3, #8]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	425b      	negs	r3, r3
 800b17a:	441a      	add	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	609a      	str	r2, [r3, #8]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	691a      	ldr	r2, [r3, #16]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	1ad2      	subs	r2, r2, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	611a      	str	r2, [r3, #16]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	7efa      	ldrb	r2, [r7, #27]
 800b190:	755a      	strb	r2, [r3, #21]
 800b192:	e035      	b.n	800b200 <ucdr_serialize_uint32_t+0x1f4>
 800b194:	2104      	movs	r1, #4
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f7fe ff8a 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d02e      	beq.n	800b200 <ucdr_serialize_uint32_t+0x1f4>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	7d1b      	ldrb	r3, [r3, #20]
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d104      	bne.n	800b1b4 <ucdr_serialize_uint32_t+0x1a8>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	601a      	str	r2, [r3, #0]
 800b1b2:	e018      	b.n	800b1e6 <ucdr_serialize_uint32_t+0x1da>
 800b1b4:	463b      	mov	r3, r7
 800b1b6:	617b      	str	r3, [r7, #20]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	78d2      	ldrb	r2, [r2, #3]
 800b1c0:	701a      	strb	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	697a      	ldr	r2, [r7, #20]
 800b1ca:	7892      	ldrb	r2, [r2, #2]
 800b1cc:	701a      	strb	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	3302      	adds	r3, #2
 800b1d4:	697a      	ldr	r2, [r7, #20]
 800b1d6:	7852      	ldrb	r2, [r2, #1]
 800b1d8:	701a      	strb	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	3303      	adds	r3, #3
 800b1e0:	697a      	ldr	r2, [r7, #20]
 800b1e2:	7812      	ldrb	r2, [r2, #0]
 800b1e4:	701a      	strb	r2, [r3, #0]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	1d1a      	adds	r2, r3, #4
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	609a      	str	r2, [r3, #8]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	1d1a      	adds	r2, r3, #4
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	611a      	str	r2, [r3, #16]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2204      	movs	r2, #4
 800b1fe:	755a      	strb	r2, [r3, #21]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	7d9b      	ldrb	r3, [r3, #22]
 800b204:	2b00      	cmp	r3, #0
 800b206:	bf14      	ite	ne
 800b208:	2301      	movne	r3, #1
 800b20a:	2300      	moveq	r3, #0
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	f083 0301 	eor.w	r3, r3, #1
 800b212:	b2db      	uxtb	r3, r3
 800b214:	f003 0301 	and.w	r3, r3, #1
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	4618      	mov	r0, r3
 800b21c:	3728      	adds	r7, #40	; 0x28
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <ucdr_serialize_endian_uint32_t>:
 800b222:	b580      	push	{r7, lr}
 800b224:	b08c      	sub	sp, #48	; 0x30
 800b226:	af00      	add	r7, sp, #0
 800b228:	60f8      	str	r0, [r7, #12]
 800b22a:	460b      	mov	r3, r1
 800b22c:	607a      	str	r2, [r7, #4]
 800b22e:	72fb      	strb	r3, [r7, #11]
 800b230:	2104      	movs	r1, #4
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f7ff f87e 	bl	800a334 <ucdr_buffer_alignment>
 800b238:	6278      	str	r0, [r7, #36]	; 0x24
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	7d5b      	ldrb	r3, [r3, #21]
 800b23e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b242:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f7ff f896 	bl	800a376 <ucdr_advance_buffer>
 800b24a:	2104      	movs	r1, #4
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f7fe ff0f 	bl	800a070 <ucdr_check_buffer_available_for>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d02e      	beq.n	800b2b6 <ucdr_serialize_endian_uint32_t+0x94>
 800b258:	7afb      	ldrb	r3, [r7, #11]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d104      	bne.n	800b268 <ucdr_serialize_endian_uint32_t+0x46>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	601a      	str	r2, [r3, #0]
 800b266:	e018      	b.n	800b29a <ucdr_serialize_endian_uint32_t+0x78>
 800b268:	1d3b      	adds	r3, r7, #4
 800b26a:	613b      	str	r3, [r7, #16]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	693a      	ldr	r2, [r7, #16]
 800b272:	78d2      	ldrb	r2, [r2, #3]
 800b274:	701a      	strb	r2, [r3, #0]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	3301      	adds	r3, #1
 800b27c:	693a      	ldr	r2, [r7, #16]
 800b27e:	7892      	ldrb	r2, [r2, #2]
 800b280:	701a      	strb	r2, [r3, #0]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	3302      	adds	r3, #2
 800b288:	693a      	ldr	r2, [r7, #16]
 800b28a:	7852      	ldrb	r2, [r2, #1]
 800b28c:	701a      	strb	r2, [r3, #0]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	3303      	adds	r3, #3
 800b294:	693a      	ldr	r2, [r7, #16]
 800b296:	7812      	ldrb	r2, [r2, #0]
 800b298:	701a      	strb	r2, [r3, #0]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	1d1a      	adds	r2, r3, #4
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	609a      	str	r2, [r3, #8]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	691b      	ldr	r3, [r3, #16]
 800b2a8:	1d1a      	adds	r2, r3, #4
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	611a      	str	r2, [r3, #16]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2204      	movs	r2, #4
 800b2b2:	755a      	strb	r2, [r3, #21]
 800b2b4:	e0b0      	b.n	800b418 <ucdr_serialize_endian_uint32_t+0x1f6>
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	685a      	ldr	r2, [r3, #4]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d975      	bls.n	800b3ae <ucdr_serialize_endian_uint32_t+0x18c>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	61bb      	str	r3, [r7, #24]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	685a      	ldr	r2, [r3, #4]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	1ad3      	subs	r3, r2, r3
 800b2d2:	617b      	str	r3, [r7, #20]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	689a      	ldr	r2, [r3, #8]
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	441a      	add	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	609a      	str	r2, [r3, #8]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	691a      	ldr	r2, [r3, #16]
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	441a      	add	r2, r3
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	611a      	str	r2, [r3, #16]
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	f1c3 0304 	rsb	r3, r3, #4
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f7fe fedb 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d044      	beq.n	800b38a <ucdr_serialize_endian_uint32_t+0x168>
 800b300:	7afb      	ldrb	r3, [r7, #11]
 800b302:	2b01      	cmp	r3, #1
 800b304:	d111      	bne.n	800b32a <ucdr_serialize_endian_uint32_t+0x108>
 800b306:	1d3b      	adds	r3, r7, #4
 800b308:	697a      	ldr	r2, [r7, #20]
 800b30a:	4619      	mov	r1, r3
 800b30c:	69b8      	ldr	r0, [r7, #24]
 800b30e:	f015 fcd7 	bl	8020cc0 <memcpy>
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6898      	ldr	r0, [r3, #8]
 800b316:	1d3a      	adds	r2, r7, #4
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	18d1      	adds	r1, r2, r3
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	f1c3 0304 	rsb	r3, r3, #4
 800b322:	461a      	mov	r2, r3
 800b324:	f015 fccc 	bl	8020cc0 <memcpy>
 800b328:	e01c      	b.n	800b364 <ucdr_serialize_endian_uint32_t+0x142>
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b32e:	2300      	movs	r3, #0
 800b330:	62bb      	str	r3, [r7, #40]	; 0x28
 800b332:	e014      	b.n	800b35e <ucdr_serialize_endian_uint32_t+0x13c>
 800b334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b336:	f1c3 0303 	rsb	r3, r3, #3
 800b33a:	1d3a      	adds	r2, r7, #4
 800b33c:	4413      	add	r3, r2
 800b33e:	781a      	ldrb	r2, [r3, #0]
 800b340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b342:	701a      	strb	r2, [r3, #0]
 800b344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b346:	3301      	adds	r3, #1
 800b348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b34a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d302      	bcc.n	800b358 <ucdr_serialize_endian_uint32_t+0x136>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35a:	3301      	adds	r3, #1
 800b35c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b360:	2b03      	cmp	r3, #3
 800b362:	d9e7      	bls.n	800b334 <ucdr_serialize_endian_uint32_t+0x112>
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	689a      	ldr	r2, [r3, #8]
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	f1c3 0304 	rsb	r3, r3, #4
 800b36e:	441a      	add	r2, r3
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	609a      	str	r2, [r3, #8]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	691a      	ldr	r2, [r3, #16]
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	1d1a      	adds	r2, r3, #4
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	611a      	str	r2, [r3, #16]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2204      	movs	r2, #4
 800b386:	755a      	strb	r2, [r3, #21]
 800b388:	e046      	b.n	800b418 <ucdr_serialize_endian_uint32_t+0x1f6>
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	689a      	ldr	r2, [r3, #8]
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	425b      	negs	r3, r3
 800b392:	441a      	add	r2, r3
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	609a      	str	r2, [r3, #8]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	691a      	ldr	r2, [r3, #16]
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	1ad2      	subs	r2, r2, r3
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	611a      	str	r2, [r3, #16]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b3aa:	755a      	strb	r2, [r3, #21]
 800b3ac:	e034      	b.n	800b418 <ucdr_serialize_endian_uint32_t+0x1f6>
 800b3ae:	2104      	movs	r1, #4
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f7fe fe7d 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d02d      	beq.n	800b418 <ucdr_serialize_endian_uint32_t+0x1f6>
 800b3bc:	7afb      	ldrb	r3, [r7, #11]
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d104      	bne.n	800b3cc <ucdr_serialize_endian_uint32_t+0x1aa>
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	601a      	str	r2, [r3, #0]
 800b3ca:	e018      	b.n	800b3fe <ucdr_serialize_endian_uint32_t+0x1dc>
 800b3cc:	1d3b      	adds	r3, r7, #4
 800b3ce:	61fb      	str	r3, [r7, #28]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	69fa      	ldr	r2, [r7, #28]
 800b3d6:	78d2      	ldrb	r2, [r2, #3]
 800b3d8:	701a      	strb	r2, [r3, #0]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	69fa      	ldr	r2, [r7, #28]
 800b3e2:	7892      	ldrb	r2, [r2, #2]
 800b3e4:	701a      	strb	r2, [r3, #0]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	3302      	adds	r3, #2
 800b3ec:	69fa      	ldr	r2, [r7, #28]
 800b3ee:	7852      	ldrb	r2, [r2, #1]
 800b3f0:	701a      	strb	r2, [r3, #0]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	3303      	adds	r3, #3
 800b3f8:	69fa      	ldr	r2, [r7, #28]
 800b3fa:	7812      	ldrb	r2, [r2, #0]
 800b3fc:	701a      	strb	r2, [r3, #0]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	1d1a      	adds	r2, r3, #4
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	609a      	str	r2, [r3, #8]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	691b      	ldr	r3, [r3, #16]
 800b40c:	1d1a      	adds	r2, r3, #4
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	611a      	str	r2, [r3, #16]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2204      	movs	r2, #4
 800b416:	755a      	strb	r2, [r3, #21]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	7d9b      	ldrb	r3, [r3, #22]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	bf14      	ite	ne
 800b420:	2301      	movne	r3, #1
 800b422:	2300      	moveq	r3, #0
 800b424:	b2db      	uxtb	r3, r3
 800b426:	f083 0301 	eor.w	r3, r3, #1
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	f003 0301 	and.w	r3, r3, #1
 800b430:	b2db      	uxtb	r3, r3
 800b432:	4618      	mov	r0, r3
 800b434:	3730      	adds	r7, #48	; 0x30
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <ucdr_deserialize_uint32_t>:
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b08c      	sub	sp, #48	; 0x30
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	6039      	str	r1, [r7, #0]
 800b444:	2104      	movs	r1, #4
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7fe ff74 	bl	800a334 <ucdr_buffer_alignment>
 800b44c:	6238      	str	r0, [r7, #32]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	7d5b      	ldrb	r3, [r3, #21]
 800b452:	77fb      	strb	r3, [r7, #31]
 800b454:	6a39      	ldr	r1, [r7, #32]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f7fe ff8d 	bl	800a376 <ucdr_advance_buffer>
 800b45c:	2104      	movs	r1, #4
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f7fe fe06 	bl	800a070 <ucdr_check_buffer_available_for>
 800b464:	4603      	mov	r3, r0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d031      	beq.n	800b4ce <ucdr_deserialize_uint32_t+0x94>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	7d1b      	ldrb	r3, [r3, #20]
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d106      	bne.n	800b480 <ucdr_deserialize_uint32_t+0x46>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	461a      	mov	r2, r3
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	601a      	str	r2, [r3, #0]
 800b47e:	e018      	b.n	800b4b2 <ucdr_deserialize_uint32_t+0x78>
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	60fb      	str	r3, [r7, #12]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	78da      	ldrb	r2, [r3, #3]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	701a      	strb	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	689a      	ldr	r2, [r3, #8]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	3301      	adds	r3, #1
 800b496:	7892      	ldrb	r2, [r2, #2]
 800b498:	701a      	strb	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	689a      	ldr	r2, [r3, #8]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	3302      	adds	r3, #2
 800b4a2:	7852      	ldrb	r2, [r2, #1]
 800b4a4:	701a      	strb	r2, [r3, #0]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	689a      	ldr	r2, [r3, #8]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	3303      	adds	r3, #3
 800b4ae:	7812      	ldrb	r2, [r2, #0]
 800b4b0:	701a      	strb	r2, [r3, #0]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	1d1a      	adds	r2, r3, #4
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	609a      	str	r2, [r3, #8]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	1d1a      	adds	r2, r3, #4
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	611a      	str	r2, [r3, #16]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2204      	movs	r2, #4
 800b4ca:	755a      	strb	r2, [r3, #21]
 800b4cc:	e0b4      	b.n	800b638 <ucdr_deserialize_uint32_t+0x1fe>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	685a      	ldr	r2, [r3, #4]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d976      	bls.n	800b5c8 <ucdr_deserialize_uint32_t+0x18e>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	617b      	str	r3, [r7, #20]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	685a      	ldr	r2, [r3, #4]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	613b      	str	r3, [r7, #16]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	689a      	ldr	r2, [r3, #8]
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	441a      	add	r2, r3
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	609a      	str	r2, [r3, #8]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	691a      	ldr	r2, [r3, #16]
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	441a      	add	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	611a      	str	r2, [r3, #16]
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	f1c3 0304 	rsb	r3, r3, #4
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7fe fdcf 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d046      	beq.n	800b5a6 <ucdr_deserialize_uint32_t+0x16c>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	7d1b      	ldrb	r3, [r3, #20]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d110      	bne.n	800b542 <ucdr_deserialize_uint32_t+0x108>
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	6979      	ldr	r1, [r7, #20]
 800b524:	6838      	ldr	r0, [r7, #0]
 800b526:	f015 fbcb 	bl	8020cc0 <memcpy>
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	18d0      	adds	r0, r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6899      	ldr	r1, [r3, #8]
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	f1c3 0304 	rsb	r3, r3, #4
 800b53a:	461a      	mov	r2, r3
 800b53c:	f015 fbc0 	bl	8020cc0 <memcpy>
 800b540:	e01e      	b.n	800b580 <ucdr_deserialize_uint32_t+0x146>
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	62bb      	str	r3, [r7, #40]	; 0x28
 800b54a:	2300      	movs	r3, #0
 800b54c:	627b      	str	r3, [r7, #36]	; 0x24
 800b54e:	e014      	b.n	800b57a <ucdr_deserialize_uint32_t+0x140>
 800b550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b552:	f1c3 0303 	rsb	r3, r3, #3
 800b556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b558:	4413      	add	r3, r2
 800b55a:	781a      	ldrb	r2, [r3, #0]
 800b55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55e:	701a      	strb	r2, [r3, #0]
 800b560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b562:	3301      	adds	r3, #1
 800b564:	62bb      	str	r3, [r7, #40]	; 0x28
 800b566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d302      	bcc.n	800b574 <ucdr_deserialize_uint32_t+0x13a>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b576:	3301      	adds	r3, #1
 800b578:	627b      	str	r3, [r7, #36]	; 0x24
 800b57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57c:	2b03      	cmp	r3, #3
 800b57e:	d9e7      	bls.n	800b550 <ucdr_deserialize_uint32_t+0x116>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	689a      	ldr	r2, [r3, #8]
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	f1c3 0304 	rsb	r3, r3, #4
 800b58a:	441a      	add	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	609a      	str	r2, [r3, #8]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	691a      	ldr	r2, [r3, #16]
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	1d1a      	adds	r2, r3, #4
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	611a      	str	r2, [r3, #16]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2204      	movs	r2, #4
 800b5a2:	755a      	strb	r2, [r3, #21]
 800b5a4:	e048      	b.n	800b638 <ucdr_deserialize_uint32_t+0x1fe>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	689a      	ldr	r2, [r3, #8]
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	425b      	negs	r3, r3
 800b5ae:	441a      	add	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	609a      	str	r2, [r3, #8]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	691a      	ldr	r2, [r3, #16]
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	1ad2      	subs	r2, r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	611a      	str	r2, [r3, #16]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	7ffa      	ldrb	r2, [r7, #31]
 800b5c4:	755a      	strb	r2, [r3, #21]
 800b5c6:	e037      	b.n	800b638 <ucdr_deserialize_uint32_t+0x1fe>
 800b5c8:	2104      	movs	r1, #4
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f7fe fd70 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d030      	beq.n	800b638 <ucdr_deserialize_uint32_t+0x1fe>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	7d1b      	ldrb	r3, [r3, #20]
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d106      	bne.n	800b5ec <ucdr_deserialize_uint32_t+0x1b2>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	689b      	ldr	r3, [r3, #8]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	601a      	str	r2, [r3, #0]
 800b5ea:	e018      	b.n	800b61e <ucdr_deserialize_uint32_t+0x1e4>
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	61bb      	str	r3, [r7, #24]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	78da      	ldrb	r2, [r3, #3]
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	701a      	strb	r2, [r3, #0]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	689a      	ldr	r2, [r3, #8]
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	3301      	adds	r3, #1
 800b602:	7892      	ldrb	r2, [r2, #2]
 800b604:	701a      	strb	r2, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	689a      	ldr	r2, [r3, #8]
 800b60a:	69bb      	ldr	r3, [r7, #24]
 800b60c:	3302      	adds	r3, #2
 800b60e:	7852      	ldrb	r2, [r2, #1]
 800b610:	701a      	strb	r2, [r3, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	689a      	ldr	r2, [r3, #8]
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	3303      	adds	r3, #3
 800b61a:	7812      	ldrb	r2, [r2, #0]
 800b61c:	701a      	strb	r2, [r3, #0]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	1d1a      	adds	r2, r3, #4
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	609a      	str	r2, [r3, #8]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	1d1a      	adds	r2, r3, #4
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	611a      	str	r2, [r3, #16]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2204      	movs	r2, #4
 800b636:	755a      	strb	r2, [r3, #21]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	7d9b      	ldrb	r3, [r3, #22]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	bf14      	ite	ne
 800b640:	2301      	movne	r3, #1
 800b642:	2300      	moveq	r3, #0
 800b644:	b2db      	uxtb	r3, r3
 800b646:	f083 0301 	eor.w	r3, r3, #1
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	f003 0301 	and.w	r3, r3, #1
 800b650:	b2db      	uxtb	r3, r3
 800b652:	4618      	mov	r0, r3
 800b654:	3730      	adds	r7, #48	; 0x30
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <ucdr_deserialize_endian_uint32_t>:
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b08e      	sub	sp, #56	; 0x38
 800b65e:	af00      	add	r7, sp, #0
 800b660:	60f8      	str	r0, [r7, #12]
 800b662:	460b      	mov	r3, r1
 800b664:	607a      	str	r2, [r7, #4]
 800b666:	72fb      	strb	r3, [r7, #11]
 800b668:	2104      	movs	r1, #4
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f7fe fe62 	bl	800a334 <ucdr_buffer_alignment>
 800b670:	62b8      	str	r0, [r7, #40]	; 0x28
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	7d5b      	ldrb	r3, [r3, #21]
 800b676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b67a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f7fe fe7a 	bl	800a376 <ucdr_advance_buffer>
 800b682:	2104      	movs	r1, #4
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	f7fe fcf3 	bl	800a070 <ucdr_check_buffer_available_for>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d030      	beq.n	800b6f2 <ucdr_deserialize_endian_uint32_t+0x98>
 800b690:	7afb      	ldrb	r3, [r7, #11]
 800b692:	2b01      	cmp	r3, #1
 800b694:	d106      	bne.n	800b6a4 <ucdr_deserialize_endian_uint32_t+0x4a>
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	461a      	mov	r2, r3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	601a      	str	r2, [r3, #0]
 800b6a2:	e018      	b.n	800b6d6 <ucdr_deserialize_endian_uint32_t+0x7c>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	617b      	str	r3, [r7, #20]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	78da      	ldrb	r2, [r3, #3]
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	701a      	strb	r2, [r3, #0]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	689a      	ldr	r2, [r3, #8]
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	7892      	ldrb	r2, [r2, #2]
 800b6bc:	701a      	strb	r2, [r3, #0]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	689a      	ldr	r2, [r3, #8]
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	3302      	adds	r3, #2
 800b6c6:	7852      	ldrb	r2, [r2, #1]
 800b6c8:	701a      	strb	r2, [r3, #0]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	689a      	ldr	r2, [r3, #8]
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	3303      	adds	r3, #3
 800b6d2:	7812      	ldrb	r2, [r2, #0]
 800b6d4:	701a      	strb	r2, [r3, #0]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	1d1a      	adds	r2, r3, #4
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	609a      	str	r2, [r3, #8]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	691b      	ldr	r3, [r3, #16]
 800b6e4:	1d1a      	adds	r2, r3, #4
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	611a      	str	r2, [r3, #16]
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2204      	movs	r2, #4
 800b6ee:	755a      	strb	r2, [r3, #21]
 800b6f0:	e0b3      	b.n	800b85a <ucdr_deserialize_endian_uint32_t+0x200>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	685a      	ldr	r2, [r3, #4]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d976      	bls.n	800b7ec <ucdr_deserialize_endian_uint32_t+0x192>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	61fb      	str	r3, [r7, #28]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	1ad3      	subs	r3, r2, r3
 800b70e:	61bb      	str	r3, [r7, #24]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	689a      	ldr	r2, [r3, #8]
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	441a      	add	r2, r3
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	609a      	str	r2, [r3, #8]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	691a      	ldr	r2, [r3, #16]
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	441a      	add	r2, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	611a      	str	r2, [r3, #16]
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	f1c3 0304 	rsb	r3, r3, #4
 800b72e:	4619      	mov	r1, r3
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	f7fe fcbd 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d045      	beq.n	800b7c8 <ucdr_deserialize_endian_uint32_t+0x16e>
 800b73c:	7afb      	ldrb	r3, [r7, #11]
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d110      	bne.n	800b764 <ucdr_deserialize_endian_uint32_t+0x10a>
 800b742:	69ba      	ldr	r2, [r7, #24]
 800b744:	69f9      	ldr	r1, [r7, #28]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f015 faba 	bl	8020cc0 <memcpy>
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	18d0      	adds	r0, r2, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6899      	ldr	r1, [r3, #8]
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	f1c3 0304 	rsb	r3, r3, #4
 800b75c:	461a      	mov	r2, r3
 800b75e:	f015 faaf 	bl	8020cc0 <memcpy>
 800b762:	e01e      	b.n	800b7a2 <ucdr_deserialize_endian_uint32_t+0x148>
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	637b      	str	r3, [r7, #52]	; 0x34
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	633b      	str	r3, [r7, #48]	; 0x30
 800b76c:	2300      	movs	r3, #0
 800b76e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b770:	e014      	b.n	800b79c <ucdr_deserialize_endian_uint32_t+0x142>
 800b772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b774:	f1c3 0303 	rsb	r3, r3, #3
 800b778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b77a:	4413      	add	r3, r2
 800b77c:	781a      	ldrb	r2, [r3, #0]
 800b77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b780:	701a      	strb	r2, [r3, #0]
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	3301      	adds	r3, #1
 800b786:	633b      	str	r3, [r7, #48]	; 0x30
 800b788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d302      	bcc.n	800b796 <ucdr_deserialize_endian_uint32_t+0x13c>
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	637b      	str	r3, [r7, #52]	; 0x34
 800b796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b798:	3301      	adds	r3, #1
 800b79a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d9e7      	bls.n	800b772 <ucdr_deserialize_endian_uint32_t+0x118>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	689a      	ldr	r2, [r3, #8]
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	f1c3 0304 	rsb	r3, r3, #4
 800b7ac:	441a      	add	r2, r3
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	609a      	str	r2, [r3, #8]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	691a      	ldr	r2, [r3, #16]
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	1ad3      	subs	r3, r2, r3
 800b7ba:	1d1a      	adds	r2, r3, #4
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	611a      	str	r2, [r3, #16]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2204      	movs	r2, #4
 800b7c4:	755a      	strb	r2, [r3, #21]
 800b7c6:	e048      	b.n	800b85a <ucdr_deserialize_endian_uint32_t+0x200>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	689a      	ldr	r2, [r3, #8]
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	425b      	negs	r3, r3
 800b7d0:	441a      	add	r2, r3
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	609a      	str	r2, [r3, #8]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	691a      	ldr	r2, [r3, #16]
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	1ad2      	subs	r2, r2, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	611a      	str	r2, [r3, #16]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b7e8:	755a      	strb	r2, [r3, #21]
 800b7ea:	e036      	b.n	800b85a <ucdr_deserialize_endian_uint32_t+0x200>
 800b7ec:	2104      	movs	r1, #4
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f7fe fc5e 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d02f      	beq.n	800b85a <ucdr_deserialize_endian_uint32_t+0x200>
 800b7fa:	7afb      	ldrb	r3, [r7, #11]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d106      	bne.n	800b80e <ucdr_deserialize_endian_uint32_t+0x1b4>
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	461a      	mov	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	601a      	str	r2, [r3, #0]
 800b80c:	e018      	b.n	800b840 <ucdr_deserialize_endian_uint32_t+0x1e6>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	623b      	str	r3, [r7, #32]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	78da      	ldrb	r2, [r3, #3]
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	701a      	strb	r2, [r3, #0]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	689a      	ldr	r2, [r3, #8]
 800b820:	6a3b      	ldr	r3, [r7, #32]
 800b822:	3301      	adds	r3, #1
 800b824:	7892      	ldrb	r2, [r2, #2]
 800b826:	701a      	strb	r2, [r3, #0]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	689a      	ldr	r2, [r3, #8]
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	3302      	adds	r3, #2
 800b830:	7852      	ldrb	r2, [r2, #1]
 800b832:	701a      	strb	r2, [r3, #0]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	689a      	ldr	r2, [r3, #8]
 800b838:	6a3b      	ldr	r3, [r7, #32]
 800b83a:	3303      	adds	r3, #3
 800b83c:	7812      	ldrb	r2, [r2, #0]
 800b83e:	701a      	strb	r2, [r3, #0]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	1d1a      	adds	r2, r3, #4
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	609a      	str	r2, [r3, #8]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	1d1a      	adds	r2, r3, #4
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	611a      	str	r2, [r3, #16]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2204      	movs	r2, #4
 800b858:	755a      	strb	r2, [r3, #21]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	7d9b      	ldrb	r3, [r3, #22]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	bf14      	ite	ne
 800b862:	2301      	movne	r3, #1
 800b864:	2300      	moveq	r3, #0
 800b866:	b2db      	uxtb	r3, r3
 800b868:	f083 0301 	eor.w	r3, r3, #1
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	f003 0301 	and.w	r3, r3, #1
 800b872:	b2db      	uxtb	r3, r3
 800b874:	4618      	mov	r0, r3
 800b876:	3738      	adds	r7, #56	; 0x38
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <ucdr_serialize_uint64_t>:
UCDR_BASIC_TYPE_DEFINITIONS(_uint64_t, uint64_t, 8)
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b08c      	sub	sp, #48	; 0x30
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	e9c7 2300 	strd	r2, r3, [r7]
 800b888:	2108      	movs	r1, #8
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f7fe fd52 	bl	800a334 <ucdr_buffer_alignment>
 800b890:	6278      	str	r0, [r7, #36]	; 0x24
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	7d5b      	ldrb	r3, [r3, #21]
 800b896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b89a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f7fe fd6a 	bl	800a376 <ucdr_advance_buffer>
 800b8a2:	2108      	movs	r1, #8
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f7fe fbe3 	bl	800a070 <ucdr_check_buffer_available_for>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d04c      	beq.n	800b94a <ucdr_serialize_uint64_t+0xce>
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	7d1b      	ldrb	r3, [r3, #20]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d107      	bne.n	800b8c8 <ucdr_serialize_uint64_t+0x4c>
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	4639      	mov	r1, r7
 800b8be:	2208      	movs	r2, #8
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f015 f9fd 	bl	8020cc0 <memcpy>
 800b8c6:	e030      	b.n	800b92a <ucdr_serialize_uint64_t+0xae>
 800b8c8:	463b      	mov	r3, r7
 800b8ca:	613b      	str	r3, [r7, #16]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	693a      	ldr	r2, [r7, #16]
 800b8d2:	79d2      	ldrb	r2, [r2, #7]
 800b8d4:	701a      	strb	r2, [r3, #0]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	693a      	ldr	r2, [r7, #16]
 800b8de:	7992      	ldrb	r2, [r2, #6]
 800b8e0:	701a      	strb	r2, [r3, #0]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	3302      	adds	r3, #2
 800b8e8:	693a      	ldr	r2, [r7, #16]
 800b8ea:	7952      	ldrb	r2, [r2, #5]
 800b8ec:	701a      	strb	r2, [r3, #0]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	3303      	adds	r3, #3
 800b8f4:	693a      	ldr	r2, [r7, #16]
 800b8f6:	7912      	ldrb	r2, [r2, #4]
 800b8f8:	701a      	strb	r2, [r3, #0]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	3304      	adds	r3, #4
 800b900:	693a      	ldr	r2, [r7, #16]
 800b902:	78d2      	ldrb	r2, [r2, #3]
 800b904:	701a      	strb	r2, [r3, #0]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	3305      	adds	r3, #5
 800b90c:	693a      	ldr	r2, [r7, #16]
 800b90e:	7892      	ldrb	r2, [r2, #2]
 800b910:	701a      	strb	r2, [r3, #0]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	3306      	adds	r3, #6
 800b918:	693a      	ldr	r2, [r7, #16]
 800b91a:	7852      	ldrb	r2, [r2, #1]
 800b91c:	701a      	strb	r2, [r3, #0]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	3307      	adds	r3, #7
 800b924:	693a      	ldr	r2, [r7, #16]
 800b926:	7812      	ldrb	r2, [r2, #0]
 800b928:	701a      	strb	r2, [r3, #0]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	f103 0208 	add.w	r2, r3, #8
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	609a      	str	r2, [r3, #8]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	691b      	ldr	r3, [r3, #16]
 800b93a:	f103 0208 	add.w	r2, r3, #8
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	611a      	str	r2, [r3, #16]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2208      	movs	r2, #8
 800b946:	755a      	strb	r2, [r3, #21]
 800b948:	e0d0      	b.n	800baec <ucdr_serialize_uint64_t+0x270>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	685a      	ldr	r2, [r3, #4]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	429a      	cmp	r2, r3
 800b954:	d977      	bls.n	800ba46 <ucdr_serialize_uint64_t+0x1ca>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	61bb      	str	r3, [r7, #24]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	685a      	ldr	r2, [r3, #4]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	1ad3      	subs	r3, r2, r3
 800b966:	617b      	str	r3, [r7, #20]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	689a      	ldr	r2, [r3, #8]
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	441a      	add	r2, r3
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	609a      	str	r2, [r3, #8]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	691a      	ldr	r2, [r3, #16]
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	441a      	add	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	611a      	str	r2, [r3, #16]
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f1c3 0308 	rsb	r3, r3, #8
 800b986:	4619      	mov	r1, r3
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f7fe fb91 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d046      	beq.n	800ba22 <ucdr_serialize_uint64_t+0x1a6>
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	7d1b      	ldrb	r3, [r3, #20]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d111      	bne.n	800b9c0 <ucdr_serialize_uint64_t+0x144>
 800b99c:	463b      	mov	r3, r7
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	69b8      	ldr	r0, [r7, #24]
 800b9a4:	f015 f98c 	bl	8020cc0 <memcpy>
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6898      	ldr	r0, [r3, #8]
 800b9ac:	463a      	mov	r2, r7
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	18d1      	adds	r1, r2, r3
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	f1c3 0308 	rsb	r3, r3, #8
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	f015 f981 	bl	8020cc0 <memcpy>
 800b9be:	e01c      	b.n	800b9fa <ucdr_serialize_uint64_t+0x17e>
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9c8:	e014      	b.n	800b9f4 <ucdr_serialize_uint64_t+0x178>
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	f1c3 0307 	rsb	r3, r3, #7
 800b9d0:	463a      	mov	r2, r7
 800b9d2:	4413      	add	r3, r2
 800b9d4:	781a      	ldrb	r2, [r3, #0]
 800b9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d8:	701a      	strb	r2, [r3, #0]
 800b9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9dc:	3301      	adds	r3, #1
 800b9de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d302      	bcc.n	800b9ee <ucdr_serialize_uint64_t+0x172>
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f6:	2b07      	cmp	r3, #7
 800b9f8:	d9e7      	bls.n	800b9ca <ucdr_serialize_uint64_t+0x14e>
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	689a      	ldr	r2, [r3, #8]
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	f1c3 0308 	rsb	r3, r3, #8
 800ba04:	441a      	add	r2, r3
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	609a      	str	r2, [r3, #8]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	691a      	ldr	r2, [r3, #16]
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	f103 0208 	add.w	r2, r3, #8
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	611a      	str	r2, [r3, #16]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2208      	movs	r2, #8
 800ba1e:	755a      	strb	r2, [r3, #21]
 800ba20:	e064      	b.n	800baec <ucdr_serialize_uint64_t+0x270>
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	689a      	ldr	r2, [r3, #8]
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	425b      	negs	r3, r3
 800ba2a:	441a      	add	r2, r3
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	609a      	str	r2, [r3, #8]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	691a      	ldr	r2, [r3, #16]
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	1ad2      	subs	r2, r2, r3
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	611a      	str	r2, [r3, #16]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ba42:	755a      	strb	r2, [r3, #21]
 800ba44:	e052      	b.n	800baec <ucdr_serialize_uint64_t+0x270>
 800ba46:	2108      	movs	r1, #8
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f7fe fb31 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d04b      	beq.n	800baec <ucdr_serialize_uint64_t+0x270>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	7d1b      	ldrb	r3, [r3, #20]
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d107      	bne.n	800ba6c <ucdr_serialize_uint64_t+0x1f0>
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	4639      	mov	r1, r7
 800ba62:	2208      	movs	r2, #8
 800ba64:	4618      	mov	r0, r3
 800ba66:	f015 f92b 	bl	8020cc0 <memcpy>
 800ba6a:	e030      	b.n	800bace <ucdr_serialize_uint64_t+0x252>
 800ba6c:	463b      	mov	r3, r7
 800ba6e:	61fb      	str	r3, [r7, #28]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	69fa      	ldr	r2, [r7, #28]
 800ba76:	79d2      	ldrb	r2, [r2, #7]
 800ba78:	701a      	strb	r2, [r3, #0]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	69fa      	ldr	r2, [r7, #28]
 800ba82:	7992      	ldrb	r2, [r2, #6]
 800ba84:	701a      	strb	r2, [r3, #0]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	3302      	adds	r3, #2
 800ba8c:	69fa      	ldr	r2, [r7, #28]
 800ba8e:	7952      	ldrb	r2, [r2, #5]
 800ba90:	701a      	strb	r2, [r3, #0]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	3303      	adds	r3, #3
 800ba98:	69fa      	ldr	r2, [r7, #28]
 800ba9a:	7912      	ldrb	r2, [r2, #4]
 800ba9c:	701a      	strb	r2, [r3, #0]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	3304      	adds	r3, #4
 800baa4:	69fa      	ldr	r2, [r7, #28]
 800baa6:	78d2      	ldrb	r2, [r2, #3]
 800baa8:	701a      	strb	r2, [r3, #0]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	3305      	adds	r3, #5
 800bab0:	69fa      	ldr	r2, [r7, #28]
 800bab2:	7892      	ldrb	r2, [r2, #2]
 800bab4:	701a      	strb	r2, [r3, #0]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	3306      	adds	r3, #6
 800babc:	69fa      	ldr	r2, [r7, #28]
 800babe:	7852      	ldrb	r2, [r2, #1]
 800bac0:	701a      	strb	r2, [r3, #0]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	3307      	adds	r3, #7
 800bac8:	69fa      	ldr	r2, [r7, #28]
 800baca:	7812      	ldrb	r2, [r2, #0]
 800bacc:	701a      	strb	r2, [r3, #0]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	f103 0208 	add.w	r2, r3, #8
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	609a      	str	r2, [r3, #8]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	f103 0208 	add.w	r2, r3, #8
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	611a      	str	r2, [r3, #16]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2208      	movs	r2, #8
 800baea:	755a      	strb	r2, [r3, #21]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	7d9b      	ldrb	r3, [r3, #22]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	bf14      	ite	ne
 800baf4:	2301      	movne	r3, #1
 800baf6:	2300      	moveq	r3, #0
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	f083 0301 	eor.w	r3, r3, #1
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	f003 0301 	and.w	r3, r3, #1
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	4618      	mov	r0, r3
 800bb08:	3730      	adds	r7, #48	; 0x30
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <ucdr_serialize_int16_t>:
UCDR_BASIC_TYPE_DEFINITIONS(_int8_t, int8_t, 1)
UCDR_BASIC_TYPE_DEFINITIONS(_int16_t, int16_t, 2)
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b08a      	sub	sp, #40	; 0x28
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	460b      	mov	r3, r1
 800bb18:	807b      	strh	r3, [r7, #2]
 800bb1a:	2102      	movs	r1, #2
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7fe fc09 	bl	800a334 <ucdr_buffer_alignment>
 800bb22:	61f8      	str	r0, [r7, #28]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	7d5b      	ldrb	r3, [r3, #21]
 800bb28:	76fb      	strb	r3, [r7, #27]
 800bb2a:	69f9      	ldr	r1, [r7, #28]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f7fe fc22 	bl	800a376 <ucdr_advance_buffer>
 800bb32:	2102      	movs	r1, #2
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7fe fa9b 	bl	800a070 <ucdr_check_buffer_available_for>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d023      	beq.n	800bb88 <ucdr_serialize_int16_t+0x7a>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	7d1b      	ldrb	r3, [r3, #20]
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d104      	bne.n	800bb52 <ucdr_serialize_int16_t+0x44>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	887a      	ldrh	r2, [r7, #2]
 800bb4e:	801a      	strh	r2, [r3, #0]
 800bb50:	e00c      	b.n	800bb6c <ucdr_serialize_int16_t+0x5e>
 800bb52:	1cbb      	adds	r3, r7, #2
 800bb54:	60bb      	str	r3, [r7, #8]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	7852      	ldrb	r2, [r2, #1]
 800bb5e:	701a      	strb	r2, [r3, #0]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	3301      	adds	r3, #1
 800bb66:	68ba      	ldr	r2, [r7, #8]
 800bb68:	7812      	ldrb	r2, [r2, #0]
 800bb6a:	701a      	strb	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	1c9a      	adds	r2, r3, #2
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	609a      	str	r2, [r3, #8]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	1c9a      	adds	r2, r3, #2
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	611a      	str	r2, [r3, #16]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2202      	movs	r2, #2
 800bb84:	755a      	strb	r2, [r3, #21]
 800bb86:	e0a5      	b.n	800bcd4 <ucdr_serialize_int16_t+0x1c6>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d975      	bls.n	800bc80 <ucdr_serialize_int16_t+0x172>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	613b      	str	r3, [r7, #16]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	685a      	ldr	r2, [r3, #4]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	1ad3      	subs	r3, r2, r3
 800bba4:	60fb      	str	r3, [r7, #12]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	689a      	ldr	r2, [r3, #8]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	441a      	add	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	609a      	str	r2, [r3, #8]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	691a      	ldr	r2, [r3, #16]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	441a      	add	r2, r3
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	611a      	str	r2, [r3, #16]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f1c3 0302 	rsb	r3, r3, #2
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f7fe fa72 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d045      	beq.n	800bc5e <ucdr_serialize_int16_t+0x150>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	7d1b      	ldrb	r3, [r3, #20]
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d111      	bne.n	800bbfe <ucdr_serialize_int16_t+0xf0>
 800bbda:	1cbb      	adds	r3, r7, #2
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	4619      	mov	r1, r3
 800bbe0:	6938      	ldr	r0, [r7, #16]
 800bbe2:	f015 f86d 	bl	8020cc0 <memcpy>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6898      	ldr	r0, [r3, #8]
 800bbea:	1cba      	adds	r2, r7, #2
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	18d1      	adds	r1, r2, r3
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f1c3 0302 	rsb	r3, r3, #2
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	f015 f862 	bl	8020cc0 <memcpy>
 800bbfc:	e01c      	b.n	800bc38 <ucdr_serialize_int16_t+0x12a>
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	627b      	str	r3, [r7, #36]	; 0x24
 800bc02:	2300      	movs	r3, #0
 800bc04:	623b      	str	r3, [r7, #32]
 800bc06:	e014      	b.n	800bc32 <ucdr_serialize_int16_t+0x124>
 800bc08:	6a3b      	ldr	r3, [r7, #32]
 800bc0a:	f1c3 0301 	rsb	r3, r3, #1
 800bc0e:	1cba      	adds	r2, r7, #2
 800bc10:	4413      	add	r3, r2
 800bc12:	781a      	ldrb	r2, [r3, #0]
 800bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc16:	701a      	strb	r2, [r3, #0]
 800bc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	627b      	str	r3, [r7, #36]	; 0x24
 800bc1e:	6a3a      	ldr	r2, [r7, #32]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d302      	bcc.n	800bc2c <ucdr_serialize_int16_t+0x11e>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc2c:	6a3b      	ldr	r3, [r7, #32]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	623b      	str	r3, [r7, #32]
 800bc32:	6a3b      	ldr	r3, [r7, #32]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d9e7      	bls.n	800bc08 <ucdr_serialize_int16_t+0xfa>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	689a      	ldr	r2, [r3, #8]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f1c3 0302 	rsb	r3, r3, #2
 800bc42:	441a      	add	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	609a      	str	r2, [r3, #8]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	691a      	ldr	r2, [r3, #16]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	1c9a      	adds	r2, r3, #2
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	611a      	str	r2, [r3, #16]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2202      	movs	r2, #2
 800bc5a:	755a      	strb	r2, [r3, #21]
 800bc5c:	e03a      	b.n	800bcd4 <ucdr_serialize_int16_t+0x1c6>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	689a      	ldr	r2, [r3, #8]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	425b      	negs	r3, r3
 800bc66:	441a      	add	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	609a      	str	r2, [r3, #8]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	691a      	ldr	r2, [r3, #16]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	1ad2      	subs	r2, r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	611a      	str	r2, [r3, #16]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	7efa      	ldrb	r2, [r7, #27]
 800bc7c:	755a      	strb	r2, [r3, #21]
 800bc7e:	e029      	b.n	800bcd4 <ucdr_serialize_int16_t+0x1c6>
 800bc80:	2102      	movs	r1, #2
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f7fe fa14 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d022      	beq.n	800bcd4 <ucdr_serialize_int16_t+0x1c6>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	7d1b      	ldrb	r3, [r3, #20]
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d104      	bne.n	800bca0 <ucdr_serialize_int16_t+0x192>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	887a      	ldrh	r2, [r7, #2]
 800bc9c:	801a      	strh	r2, [r3, #0]
 800bc9e:	e00c      	b.n	800bcba <ucdr_serialize_int16_t+0x1ac>
 800bca0:	1cbb      	adds	r3, r7, #2
 800bca2:	617b      	str	r3, [r7, #20]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	697a      	ldr	r2, [r7, #20]
 800bcaa:	7852      	ldrb	r2, [r2, #1]
 800bcac:	701a      	strb	r2, [r3, #0]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	697a      	ldr	r2, [r7, #20]
 800bcb6:	7812      	ldrb	r2, [r2, #0]
 800bcb8:	701a      	strb	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	1c9a      	adds	r2, r3, #2
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	609a      	str	r2, [r3, #8]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	691b      	ldr	r3, [r3, #16]
 800bcc8:	1c9a      	adds	r2, r3, #2
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	611a      	str	r2, [r3, #16]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2202      	movs	r2, #2
 800bcd2:	755a      	strb	r2, [r3, #21]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	7d9b      	ldrb	r3, [r3, #22]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	bf14      	ite	ne
 800bcdc:	2301      	movne	r3, #1
 800bcde:	2300      	moveq	r3, #0
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	f083 0301 	eor.w	r3, r3, #1
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	f003 0301 	and.w	r3, r3, #1
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3728      	adds	r7, #40	; 0x28
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <ucdr_deserialize_int16_t>:
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b08c      	sub	sp, #48	; 0x30
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
 800bcfe:	6039      	str	r1, [r7, #0]
 800bd00:	2102      	movs	r1, #2
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7fe fb16 	bl	800a334 <ucdr_buffer_alignment>
 800bd08:	6238      	str	r0, [r7, #32]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	7d5b      	ldrb	r3, [r3, #21]
 800bd0e:	77fb      	strb	r3, [r7, #31]
 800bd10:	6a39      	ldr	r1, [r7, #32]
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f7fe fb2f 	bl	800a376 <ucdr_advance_buffer>
 800bd18:	2102      	movs	r1, #2
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7fe f9a8 	bl	800a070 <ucdr_check_buffer_available_for>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d025      	beq.n	800bd72 <ucdr_deserialize_int16_t+0x7c>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	7d1b      	ldrb	r3, [r3, #20]
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d106      	bne.n	800bd3c <ucdr_deserialize_int16_t+0x46>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	689b      	ldr	r3, [r3, #8]
 800bd32:	881b      	ldrh	r3, [r3, #0]
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	801a      	strh	r2, [r3, #0]
 800bd3a:	e00c      	b.n	800bd56 <ucdr_deserialize_int16_t+0x60>
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	60fb      	str	r3, [r7, #12]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	785a      	ldrb	r2, [r3, #1]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	701a      	strb	r2, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	689a      	ldr	r2, [r3, #8]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	3301      	adds	r3, #1
 800bd52:	7812      	ldrb	r2, [r2, #0]
 800bd54:	701a      	strb	r2, [r3, #0]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	1c9a      	adds	r2, r3, #2
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	609a      	str	r2, [r3, #8]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	1c9a      	adds	r2, r3, #2
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	611a      	str	r2, [r3, #16]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2202      	movs	r2, #2
 800bd6e:	755a      	strb	r2, [r3, #21]
 800bd70:	e0a8      	b.n	800bec4 <ucdr_deserialize_int16_t+0x1ce>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	685a      	ldr	r2, [r3, #4]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d976      	bls.n	800be6c <ucdr_deserialize_int16_t+0x176>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	617b      	str	r3, [r7, #20]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	685a      	ldr	r2, [r3, #4]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	613b      	str	r3, [r7, #16]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	689a      	ldr	r2, [r3, #8]
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	441a      	add	r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	609a      	str	r2, [r3, #8]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	691a      	ldr	r2, [r3, #16]
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	441a      	add	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	611a      	str	r2, [r3, #16]
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	f1c3 0302 	rsb	r3, r3, #2
 800bdae:	4619      	mov	r1, r3
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f7fe f97d 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d046      	beq.n	800be4a <ucdr_deserialize_int16_t+0x154>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	7d1b      	ldrb	r3, [r3, #20]
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d110      	bne.n	800bde6 <ucdr_deserialize_int16_t+0xf0>
 800bdc4:	693a      	ldr	r2, [r7, #16]
 800bdc6:	6979      	ldr	r1, [r7, #20]
 800bdc8:	6838      	ldr	r0, [r7, #0]
 800bdca:	f014 ff79 	bl	8020cc0 <memcpy>
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	18d0      	adds	r0, r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6899      	ldr	r1, [r3, #8]
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	f1c3 0302 	rsb	r3, r3, #2
 800bdde:	461a      	mov	r2, r3
 800bde0:	f014 ff6e 	bl	8020cc0 <memcpy>
 800bde4:	e01e      	b.n	800be24 <ucdr_deserialize_int16_t+0x12e>
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdee:	2300      	movs	r3, #0
 800bdf0:	627b      	str	r3, [r7, #36]	; 0x24
 800bdf2:	e014      	b.n	800be1e <ucdr_deserialize_int16_t+0x128>
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	f1c3 0301 	rsb	r3, r3, #1
 800bdfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdfc:	4413      	add	r3, r2
 800bdfe:	781a      	ldrb	r2, [r3, #0]
 800be00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be02:	701a      	strb	r2, [r3, #0]
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	3301      	adds	r3, #1
 800be08:	62bb      	str	r3, [r7, #40]	; 0x28
 800be0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d302      	bcc.n	800be18 <ucdr_deserialize_int16_t+0x122>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1a:	3301      	adds	r3, #1
 800be1c:	627b      	str	r3, [r7, #36]	; 0x24
 800be1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be20:	2b01      	cmp	r3, #1
 800be22:	d9e7      	bls.n	800bdf4 <ucdr_deserialize_int16_t+0xfe>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	689a      	ldr	r2, [r3, #8]
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	f1c3 0302 	rsb	r3, r3, #2
 800be2e:	441a      	add	r2, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	609a      	str	r2, [r3, #8]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	691a      	ldr	r2, [r3, #16]
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	1ad3      	subs	r3, r2, r3
 800be3c:	1c9a      	adds	r2, r3, #2
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	611a      	str	r2, [r3, #16]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2202      	movs	r2, #2
 800be46:	755a      	strb	r2, [r3, #21]
 800be48:	e03c      	b.n	800bec4 <ucdr_deserialize_int16_t+0x1ce>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	689a      	ldr	r2, [r3, #8]
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	425b      	negs	r3, r3
 800be52:	441a      	add	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	609a      	str	r2, [r3, #8]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	691a      	ldr	r2, [r3, #16]
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	1ad2      	subs	r2, r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	611a      	str	r2, [r3, #16]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	7ffa      	ldrb	r2, [r7, #31]
 800be68:	755a      	strb	r2, [r3, #21]
 800be6a:	e02b      	b.n	800bec4 <ucdr_deserialize_int16_t+0x1ce>
 800be6c:	2102      	movs	r1, #2
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f7fe f91e 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d024      	beq.n	800bec4 <ucdr_deserialize_int16_t+0x1ce>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	7d1b      	ldrb	r3, [r3, #20]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d106      	bne.n	800be90 <ucdr_deserialize_int16_t+0x19a>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	881b      	ldrh	r3, [r3, #0]
 800be88:	b29a      	uxth	r2, r3
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	801a      	strh	r2, [r3, #0]
 800be8e:	e00c      	b.n	800beaa <ucdr_deserialize_int16_t+0x1b4>
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	61bb      	str	r3, [r7, #24]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	785a      	ldrb	r2, [r3, #1]
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	701a      	strb	r2, [r3, #0]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	689a      	ldr	r2, [r3, #8]
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	3301      	adds	r3, #1
 800bea6:	7812      	ldrb	r2, [r2, #0]
 800bea8:	701a      	strb	r2, [r3, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	1c9a      	adds	r2, r3, #2
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	609a      	str	r2, [r3, #8]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	1c9a      	adds	r2, r3, #2
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	611a      	str	r2, [r3, #16]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2202      	movs	r2, #2
 800bec2:	755a      	strb	r2, [r3, #21]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	7d9b      	ldrb	r3, [r3, #22]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	bf14      	ite	ne
 800becc:	2301      	movne	r3, #1
 800bece:	2300      	moveq	r3, #0
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	f083 0301 	eor.w	r3, r3, #1
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	f003 0301 	and.w	r3, r3, #1
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	4618      	mov	r0, r3
 800bee0:	3730      	adds	r7, #48	; 0x30
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <ucdr_serialize_int32_t>:
UCDR_BASIC_TYPE_DEFINITIONS(_int32_t, int32_t, 4)
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b08a      	sub	sp, #40	; 0x28
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
 800beee:	6039      	str	r1, [r7, #0]
 800bef0:	2104      	movs	r1, #4
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f7fe fa1e 	bl	800a334 <ucdr_buffer_alignment>
 800bef8:	61f8      	str	r0, [r7, #28]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	7d5b      	ldrb	r3, [r3, #21]
 800befe:	76fb      	strb	r3, [r7, #27]
 800bf00:	69f9      	ldr	r1, [r7, #28]
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7fe fa37 	bl	800a376 <ucdr_advance_buffer>
 800bf08:	2104      	movs	r1, #4
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7fe f8b0 	bl	800a070 <ucdr_check_buffer_available_for>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d02f      	beq.n	800bf76 <ucdr_serialize_int32_t+0x90>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	7d1b      	ldrb	r3, [r3, #20]
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d104      	bne.n	800bf28 <ucdr_serialize_int32_t+0x42>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	683a      	ldr	r2, [r7, #0]
 800bf24:	601a      	str	r2, [r3, #0]
 800bf26:	e018      	b.n	800bf5a <ucdr_serialize_int32_t+0x74>
 800bf28:	463b      	mov	r3, r7
 800bf2a:	60bb      	str	r3, [r7, #8]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	68ba      	ldr	r2, [r7, #8]
 800bf32:	78d2      	ldrb	r2, [r2, #3]
 800bf34:	701a      	strb	r2, [r3, #0]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	7892      	ldrb	r2, [r2, #2]
 800bf40:	701a      	strb	r2, [r3, #0]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	3302      	adds	r3, #2
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	7852      	ldrb	r2, [r2, #1]
 800bf4c:	701a      	strb	r2, [r3, #0]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	3303      	adds	r3, #3
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	7812      	ldrb	r2, [r2, #0]
 800bf58:	701a      	strb	r2, [r3, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	1d1a      	adds	r2, r3, #4
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	609a      	str	r2, [r3, #8]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	691b      	ldr	r3, [r3, #16]
 800bf68:	1d1a      	adds	r2, r3, #4
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	611a      	str	r2, [r3, #16]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2204      	movs	r2, #4
 800bf72:	755a      	strb	r2, [r3, #21]
 800bf74:	e0b1      	b.n	800c0da <ucdr_serialize_int32_t+0x1f4>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	685a      	ldr	r2, [r3, #4]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d975      	bls.n	800c06e <ucdr_serialize_int32_t+0x188>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	613b      	str	r3, [r7, #16]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	685a      	ldr	r2, [r3, #4]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	1ad3      	subs	r3, r2, r3
 800bf92:	60fb      	str	r3, [r7, #12]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	689a      	ldr	r2, [r3, #8]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	441a      	add	r2, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	609a      	str	r2, [r3, #8]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	691a      	ldr	r2, [r3, #16]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	441a      	add	r2, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	611a      	str	r2, [r3, #16]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f1c3 0304 	rsb	r3, r3, #4
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f7fe f87b 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d045      	beq.n	800c04c <ucdr_serialize_int32_t+0x166>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	7d1b      	ldrb	r3, [r3, #20]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d111      	bne.n	800bfec <ucdr_serialize_int32_t+0x106>
 800bfc8:	463b      	mov	r3, r7
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	4619      	mov	r1, r3
 800bfce:	6938      	ldr	r0, [r7, #16]
 800bfd0:	f014 fe76 	bl	8020cc0 <memcpy>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6898      	ldr	r0, [r3, #8]
 800bfd8:	463a      	mov	r2, r7
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	18d1      	adds	r1, r2, r3
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f1c3 0304 	rsb	r3, r3, #4
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	f014 fe6b 	bl	8020cc0 <memcpy>
 800bfea:	e01c      	b.n	800c026 <ucdr_serialize_int32_t+0x140>
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	627b      	str	r3, [r7, #36]	; 0x24
 800bff0:	2300      	movs	r3, #0
 800bff2:	623b      	str	r3, [r7, #32]
 800bff4:	e014      	b.n	800c020 <ucdr_serialize_int32_t+0x13a>
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	f1c3 0303 	rsb	r3, r3, #3
 800bffc:	463a      	mov	r2, r7
 800bffe:	4413      	add	r3, r2
 800c000:	781a      	ldrb	r2, [r3, #0]
 800c002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c004:	701a      	strb	r2, [r3, #0]
 800c006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c008:	3301      	adds	r3, #1
 800c00a:	627b      	str	r3, [r7, #36]	; 0x24
 800c00c:	6a3a      	ldr	r2, [r7, #32]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	429a      	cmp	r2, r3
 800c012:	d302      	bcc.n	800c01a <ucdr_serialize_int32_t+0x134>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	627b      	str	r3, [r7, #36]	; 0x24
 800c01a:	6a3b      	ldr	r3, [r7, #32]
 800c01c:	3301      	adds	r3, #1
 800c01e:	623b      	str	r3, [r7, #32]
 800c020:	6a3b      	ldr	r3, [r7, #32]
 800c022:	2b03      	cmp	r3, #3
 800c024:	d9e7      	bls.n	800bff6 <ucdr_serialize_int32_t+0x110>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	689a      	ldr	r2, [r3, #8]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f1c3 0304 	rsb	r3, r3, #4
 800c030:	441a      	add	r2, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	609a      	str	r2, [r3, #8]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	691a      	ldr	r2, [r3, #16]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	1d1a      	adds	r2, r3, #4
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	611a      	str	r2, [r3, #16]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2204      	movs	r2, #4
 800c048:	755a      	strb	r2, [r3, #21]
 800c04a:	e046      	b.n	800c0da <ucdr_serialize_int32_t+0x1f4>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	689a      	ldr	r2, [r3, #8]
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	425b      	negs	r3, r3
 800c054:	441a      	add	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	609a      	str	r2, [r3, #8]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	691a      	ldr	r2, [r3, #16]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	1ad2      	subs	r2, r2, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	611a      	str	r2, [r3, #16]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	7efa      	ldrb	r2, [r7, #27]
 800c06a:	755a      	strb	r2, [r3, #21]
 800c06c:	e035      	b.n	800c0da <ucdr_serialize_int32_t+0x1f4>
 800c06e:	2104      	movs	r1, #4
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7fe f81d 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d02e      	beq.n	800c0da <ucdr_serialize_int32_t+0x1f4>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	7d1b      	ldrb	r3, [r3, #20]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d104      	bne.n	800c08e <ucdr_serialize_int32_t+0x1a8>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	683a      	ldr	r2, [r7, #0]
 800c08a:	601a      	str	r2, [r3, #0]
 800c08c:	e018      	b.n	800c0c0 <ucdr_serialize_int32_t+0x1da>
 800c08e:	463b      	mov	r3, r7
 800c090:	617b      	str	r3, [r7, #20]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	697a      	ldr	r2, [r7, #20]
 800c098:	78d2      	ldrb	r2, [r2, #3]
 800c09a:	701a      	strb	r2, [r3, #0]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	697a      	ldr	r2, [r7, #20]
 800c0a4:	7892      	ldrb	r2, [r2, #2]
 800c0a6:	701a      	strb	r2, [r3, #0]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	3302      	adds	r3, #2
 800c0ae:	697a      	ldr	r2, [r7, #20]
 800c0b0:	7852      	ldrb	r2, [r2, #1]
 800c0b2:	701a      	strb	r2, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	3303      	adds	r3, #3
 800c0ba:	697a      	ldr	r2, [r7, #20]
 800c0bc:	7812      	ldrb	r2, [r2, #0]
 800c0be:	701a      	strb	r2, [r3, #0]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	1d1a      	adds	r2, r3, #4
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	609a      	str	r2, [r3, #8]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	1d1a      	adds	r2, r3, #4
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	611a      	str	r2, [r3, #16]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2204      	movs	r2, #4
 800c0d8:	755a      	strb	r2, [r3, #21]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	7d9b      	ldrb	r3, [r3, #22]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	bf14      	ite	ne
 800c0e2:	2301      	movne	r3, #1
 800c0e4:	2300      	moveq	r3, #0
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	f083 0301 	eor.w	r3, r3, #1
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	f003 0301 	and.w	r3, r3, #1
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3728      	adds	r7, #40	; 0x28
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <ucdr_deserialize_int32_t>:
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b08c      	sub	sp, #48	; 0x30
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
 800c106:	2104      	movs	r1, #4
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7fe f913 	bl	800a334 <ucdr_buffer_alignment>
 800c10e:	6238      	str	r0, [r7, #32]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	7d5b      	ldrb	r3, [r3, #21]
 800c114:	77fb      	strb	r3, [r7, #31]
 800c116:	6a39      	ldr	r1, [r7, #32]
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f7fe f92c 	bl	800a376 <ucdr_advance_buffer>
 800c11e:	2104      	movs	r1, #4
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7fd ffa5 	bl	800a070 <ucdr_check_buffer_available_for>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d031      	beq.n	800c190 <ucdr_deserialize_int32_t+0x94>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	7d1b      	ldrb	r3, [r3, #20]
 800c130:	2b01      	cmp	r3, #1
 800c132:	d106      	bne.n	800c142 <ucdr_deserialize_int32_t+0x46>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	461a      	mov	r2, r3
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	601a      	str	r2, [r3, #0]
 800c140:	e018      	b.n	800c174 <ucdr_deserialize_int32_t+0x78>
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	60fb      	str	r3, [r7, #12]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	78da      	ldrb	r2, [r3, #3]
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	701a      	strb	r2, [r3, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	689a      	ldr	r2, [r3, #8]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	3301      	adds	r3, #1
 800c158:	7892      	ldrb	r2, [r2, #2]
 800c15a:	701a      	strb	r2, [r3, #0]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	689a      	ldr	r2, [r3, #8]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	3302      	adds	r3, #2
 800c164:	7852      	ldrb	r2, [r2, #1]
 800c166:	701a      	strb	r2, [r3, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	689a      	ldr	r2, [r3, #8]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	3303      	adds	r3, #3
 800c170:	7812      	ldrb	r2, [r2, #0]
 800c172:	701a      	strb	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	1d1a      	adds	r2, r3, #4
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	609a      	str	r2, [r3, #8]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	691b      	ldr	r3, [r3, #16]
 800c182:	1d1a      	adds	r2, r3, #4
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	611a      	str	r2, [r3, #16]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2204      	movs	r2, #4
 800c18c:	755a      	strb	r2, [r3, #21]
 800c18e:	e0b4      	b.n	800c2fa <ucdr_deserialize_int32_t+0x1fe>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	685a      	ldr	r2, [r3, #4]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d976      	bls.n	800c28a <ucdr_deserialize_int32_t+0x18e>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	617b      	str	r3, [r7, #20]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	685a      	ldr	r2, [r3, #4]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	1ad3      	subs	r3, r2, r3
 800c1ac:	613b      	str	r3, [r7, #16]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	689a      	ldr	r2, [r3, #8]
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	441a      	add	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	609a      	str	r2, [r3, #8]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	691a      	ldr	r2, [r3, #16]
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	441a      	add	r2, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	611a      	str	r2, [r3, #16]
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	f1c3 0304 	rsb	r3, r3, #4
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f7fd ff6e 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d046      	beq.n	800c268 <ucdr_deserialize_int32_t+0x16c>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	7d1b      	ldrb	r3, [r3, #20]
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d110      	bne.n	800c204 <ucdr_deserialize_int32_t+0x108>
 800c1e2:	693a      	ldr	r2, [r7, #16]
 800c1e4:	6979      	ldr	r1, [r7, #20]
 800c1e6:	6838      	ldr	r0, [r7, #0]
 800c1e8:	f014 fd6a 	bl	8020cc0 <memcpy>
 800c1ec:	683a      	ldr	r2, [r7, #0]
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	18d0      	adds	r0, r2, r3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6899      	ldr	r1, [r3, #8]
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	f1c3 0304 	rsb	r3, r3, #4
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	f014 fd5f 	bl	8020cc0 <memcpy>
 800c202:	e01e      	b.n	800c242 <ucdr_deserialize_int32_t+0x146>
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c20c:	2300      	movs	r3, #0
 800c20e:	627b      	str	r3, [r7, #36]	; 0x24
 800c210:	e014      	b.n	800c23c <ucdr_deserialize_int32_t+0x140>
 800c212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c214:	f1c3 0303 	rsb	r3, r3, #3
 800c218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c21a:	4413      	add	r3, r2
 800c21c:	781a      	ldrb	r2, [r3, #0]
 800c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c220:	701a      	strb	r2, [r3, #0]
 800c222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c224:	3301      	adds	r3, #1
 800c226:	62bb      	str	r3, [r7, #40]	; 0x28
 800c228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d302      	bcc.n	800c236 <ucdr_deserialize_int32_t+0x13a>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c238:	3301      	adds	r3, #1
 800c23a:	627b      	str	r3, [r7, #36]	; 0x24
 800c23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23e:	2b03      	cmp	r3, #3
 800c240:	d9e7      	bls.n	800c212 <ucdr_deserialize_int32_t+0x116>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	689a      	ldr	r2, [r3, #8]
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	f1c3 0304 	rsb	r3, r3, #4
 800c24c:	441a      	add	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	609a      	str	r2, [r3, #8]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	691a      	ldr	r2, [r3, #16]
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	1ad3      	subs	r3, r2, r3
 800c25a:	1d1a      	adds	r2, r3, #4
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	611a      	str	r2, [r3, #16]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2204      	movs	r2, #4
 800c264:	755a      	strb	r2, [r3, #21]
 800c266:	e048      	b.n	800c2fa <ucdr_deserialize_int32_t+0x1fe>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	689a      	ldr	r2, [r3, #8]
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	425b      	negs	r3, r3
 800c270:	441a      	add	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	609a      	str	r2, [r3, #8]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	691a      	ldr	r2, [r3, #16]
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	1ad2      	subs	r2, r2, r3
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	611a      	str	r2, [r3, #16]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	7ffa      	ldrb	r2, [r7, #31]
 800c286:	755a      	strb	r2, [r3, #21]
 800c288:	e037      	b.n	800c2fa <ucdr_deserialize_int32_t+0x1fe>
 800c28a:	2104      	movs	r1, #4
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f7fd ff0f 	bl	800a0b0 <ucdr_check_final_buffer_behavior>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d030      	beq.n	800c2fa <ucdr_deserialize_int32_t+0x1fe>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	7d1b      	ldrb	r3, [r3, #20]
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d106      	bne.n	800c2ae <ucdr_deserialize_int32_t+0x1b2>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	601a      	str	r2, [r3, #0]
 800c2ac:	e018      	b.n	800c2e0 <ucdr_deserialize_int32_t+0x1e4>
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	61bb      	str	r3, [r7, #24]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	78da      	ldrb	r2, [r3, #3]
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	701a      	strb	r2, [r3, #0]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	689a      	ldr	r2, [r3, #8]
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	7892      	ldrb	r2, [r2, #2]
 800c2c6:	701a      	strb	r2, [r3, #0]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	689a      	ldr	r2, [r3, #8]
 800c2cc:	69bb      	ldr	r3, [r7, #24]
 800c2ce:	3302      	adds	r3, #2
 800c2d0:	7852      	ldrb	r2, [r2, #1]
 800c2d2:	701a      	strb	r2, [r3, #0]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	689a      	ldr	r2, [r3, #8]
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	3303      	adds	r3, #3
 800c2dc:	7812      	ldrb	r2, [r2, #0]
 800c2de:	701a      	strb	r2, [r3, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	1d1a      	adds	r2, r3, #4
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	609a      	str	r2, [r3, #8]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	691b      	ldr	r3, [r3, #16]
 800c2ee:	1d1a      	adds	r2, r3, #4
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	611a      	str	r2, [r3, #16]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2204      	movs	r2, #4
 800c2f8:	755a      	strb	r2, [r3, #21]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	7d9b      	ldrb	r3, [r3, #22]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	bf14      	ite	ne
 800c302:	2301      	movne	r3, #1
 800c304:	2300      	moveq	r3, #0
 800c306:	b2db      	uxtb	r3, r3
 800c308:	f083 0301 	eor.w	r3, r3, #1
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	f003 0301 	and.w	r3, r3, #1
 800c312:	b2db      	uxtb	r3, r3
 800c314:	4618      	mov	r0, r3
 800c316:	3730      	adds	r7, #48	; 0x30
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <ucdr_deserialize_sequence_header>:
inline void ucdr_deserialize_sequence_header(
        ucdrBuffer* ub,
        ucdrEndianness endianness,
        size_t capacity,
        uint32_t* length)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	607a      	str	r2, [r7, #4]
 800c326:	603b      	str	r3, [r7, #0]
 800c328:	460b      	mov	r3, r1
 800c32a:	72fb      	strb	r3, [r7, #11]
    ucdr_deserialize_endian_uint32_t(ub, endianness, length);
 800c32c:	7afb      	ldrb	r3, [r7, #11]
 800c32e:	683a      	ldr	r2, [r7, #0]
 800c330:	4619      	mov	r1, r3
 800c332:	68f8      	ldr	r0, [r7, #12]
 800c334:	f7ff f991 	bl	800b65a <ucdr_deserialize_endian_uint32_t>
    if (*length > capacity)
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d202      	bcs.n	800c348 <ucdr_deserialize_sequence_header+0x2c>
    {
        ub->error = true;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2201      	movs	r2, #1
 800c346:	759a      	strb	r2, [r3, #22]
    }
}
 800c348:	bf00      	nop
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <ucdr_serialize_sequence_char>:
    UCDR_SEQUENCE_DESERIALIZE_DEFINITION(SUFFIX, TYPE, SIZE) \

// -------------------------------------------------------------------
//              PUBLIC DE-SERIALIZATION IMPLEMENTATIONS
// -------------------------------------------------------------------
UCDR_SEQUENCE_DEFINITIONS(_char, char, 1)
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	7d1b      	ldrb	r3, [r3, #20]
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	4619      	mov	r1, r3
 800c364:	68f8      	ldr	r0, [r7, #12]
 800c366:	f7fe ff5c 	bl	800b222 <ucdr_serialize_endian_uint32_t>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d009      	beq.n	800c384 <ucdr_serialize_sequence_char+0x34>
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	7d19      	ldrb	r1, [r3, #20]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	68ba      	ldr	r2, [r7, #8]
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f7fe f8f8 	bl	800a56e <ucdr_serialize_endian_array_char>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d001      	beq.n	800c388 <ucdr_serialize_sequence_char+0x38>
 800c384:	2301      	movs	r3, #1
 800c386:	e000      	b.n	800c38a <ucdr_serialize_sequence_char+0x3a>
 800c388:	2300      	movs	r3, #0
 800c38a:	f003 0301 	and.w	r3, r3, #1
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	4618      	mov	r0, r3
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <ucdr_deserialize_sequence_char>:
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
 800c3a4:	603b      	str	r3, [r7, #0]
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	7d19      	ldrb	r1, [r3, #20]
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	f7ff ffb4 	bl	800c31c <ucdr_deserialize_sequence_header>
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00a      	beq.n	800c3d2 <ucdr_deserialize_sequence_char+0x3a>
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	7d19      	ldrb	r1, [r3, #20]
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f7fe f8f0 	bl	800a5ac <ucdr_deserialize_endian_array_char>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d001      	beq.n	800c3d6 <ucdr_deserialize_sequence_char+0x3e>
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e000      	b.n	800c3d8 <ucdr_deserialize_sequence_char+0x40>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	f003 0301 	and.w	r3, r3, #1
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <ucdr_serialize_sequence_uint8_t>:
UCDR_SEQUENCE_DEFINITIONS(_bool, bool, 1)
UCDR_SEQUENCE_DEFINITIONS(_uint8_t, uint8_t, 1)
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	60f8      	str	r0, [r7, #12]
 800c3ee:	60b9      	str	r1, [r7, #8]
 800c3f0:	607a      	str	r2, [r7, #4]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	7d1b      	ldrb	r3, [r3, #20]
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f7fe ff11 	bl	800b222 <ucdr_serialize_endian_uint32_t>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d009      	beq.n	800c41a <ucdr_serialize_sequence_uint8_t+0x34>
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	7d19      	ldrb	r1, [r3, #20]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	68ba      	ldr	r2, [r7, #8]
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f7fe f908 	bl	800a624 <ucdr_serialize_endian_array_uint8_t>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d001      	beq.n	800c41e <ucdr_serialize_sequence_uint8_t+0x38>
 800c41a:	2301      	movs	r3, #1
 800c41c:	e000      	b.n	800c420 <ucdr_serialize_sequence_uint8_t+0x3a>
 800c41e:	2300      	movs	r3, #0
 800c420:	f003 0301 	and.w	r3, r3, #1
 800c424:	b2db      	uxtb	r3, r3
 800c426:	4618      	mov	r0, r3
 800c428:	3710      	adds	r7, #16
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <ucdr_deserialize_sequence_uint8_t>:
 800c42e:	b580      	push	{r7, lr}
 800c430:	b084      	sub	sp, #16
 800c432:	af00      	add	r7, sp, #0
 800c434:	60f8      	str	r0, [r7, #12]
 800c436:	60b9      	str	r1, [r7, #8]
 800c438:	607a      	str	r2, [r7, #4]
 800c43a:	603b      	str	r3, [r7, #0]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	7d19      	ldrb	r1, [r3, #20]
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f7ff ff69 	bl	800c31c <ucdr_deserialize_sequence_header>
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00a      	beq.n	800c468 <ucdr_deserialize_sequence_uint8_t+0x3a>
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	7d19      	ldrb	r1, [r3, #20]
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	68ba      	ldr	r2, [r7, #8]
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f7fe f91d 	bl	800a69c <ucdr_deserialize_endian_array_uint8_t>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d001      	beq.n	800c46c <ucdr_deserialize_sequence_uint8_t+0x3e>
 800c468:	2301      	movs	r3, #1
 800c46a:	e000      	b.n	800c46e <ucdr_deserialize_sequence_uint8_t+0x40>
 800c46c:	2300      	movs	r3, #0
 800c46e:	f003 0301 	and.w	r3, r3, #1
 800c472:	b2db      	uxtb	r3, r3
 800c474:	4618      	mov	r0, r3
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <ucdr_serialize_string>:
// -------------------------------------------------------------------

bool ucdr_serialize_string(
        ucdrBuffer* ub,
        const char* string)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
    return ucdr_serialize_sequence_char(ub, string, (uint32_t)strlen(string) + 1);
 800c486:	6838      	ldr	r0, [r7, #0]
 800c488:	f7f3 fecc 	bl	8000224 <strlen>
 800c48c:	4603      	mov	r3, r0
 800c48e:	3301      	adds	r3, #1
 800c490:	461a      	mov	r2, r3
 800c492:	6839      	ldr	r1, [r7, #0]
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f7ff ff5b 	bl	800c350 <ucdr_serialize_sequence_char>
 800c49a:	4603      	mov	r3, r0
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <ucdr_deserialize_string>:

bool ucdr_deserialize_string(
        ucdrBuffer* ub,
        char* string,
        size_t string_capacity)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
    uint32_t length;
    return ucdr_deserialize_sequence_char(ub, string, string_capacity, &length);
 800c4b0:	f107 0314 	add.w	r3, r7, #20
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	68b9      	ldr	r1, [r7, #8]
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	f7ff ff6d 	bl	800c398 <ucdr_deserialize_sequence_char>
 800c4be:	4603      	mov	r3, r0
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3718      	adds	r7, #24
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <uxr_serialize_message_header>:
        ucdrBuffer* ub,
        uint8_t session_id,
        uint8_t stream_id,
        uint16_t seq_num,
        const uint8_t* key)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	4608      	mov	r0, r1
 800c4d2:	4611      	mov	r1, r2
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	70fb      	strb	r3, [r7, #3]
 800c4da:	460b      	mov	r3, r1
 800c4dc:	70bb      	strb	r3, [r7, #2]
 800c4de:	4613      	mov	r3, r2
 800c4e0:	803b      	strh	r3, [r7, #0]
    (void) ucdr_serialize_uint8_t(ub, session_id);
 800c4e2:	78fb      	ldrb	r3, [r7, #3]
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f7fe f95a 	bl	800a7a0 <ucdr_serialize_uint8_t>
    (void) ucdr_serialize_uint8_t(ub, stream_id);
 800c4ec:	78bb      	ldrb	r3, [r7, #2]
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f7fe f955 	bl	800a7a0 <ucdr_serialize_uint8_t>
    (void) ucdr_serialize_endian_uint16_t(ub, UCDR_LITTLE_ENDIANNESS, seq_num);
 800c4f6:	883b      	ldrh	r3, [r7, #0]
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	2101      	movs	r1, #1
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f7fe faa1 	bl	800aa44 <ucdr_serialize_endian_uint16_t>
    if (SESSION_ID_WITHOUT_CLIENT_KEY > session_id)
 800c502:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c506:	2b00      	cmp	r3, #0
 800c508:	db04      	blt.n	800c514 <uxr_serialize_message_header+0x4c>
    {
        (void) ucdr_serialize_array_uint8_t(ub, key, CLIENT_KEY_SIZE);
 800c50a:	2204      	movs	r2, #4
 800c50c:	6939      	ldr	r1, [r7, #16]
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f7fe f86b 	bl	800a5ea <ucdr_serialize_array_uint8_t>
    }
}
 800c514:	bf00      	nop
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <uxr_deserialize_message_header>:
        ucdrBuffer* ub,
        uint8_t* session_id,
        uint8_t* stream_id,
        uint16_t* seq_num,
        uint8_t* key)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	607a      	str	r2, [r7, #4]
 800c528:	603b      	str	r3, [r7, #0]
    (void) ucdr_deserialize_uint8_t(ub, session_id);
 800c52a:	68b9      	ldr	r1, [r7, #8]
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	f7fe f966 	bl	800a7fe <ucdr_deserialize_uint8_t>
    (void) ucdr_deserialize_uint8_t(ub, stream_id);
 800c532:	6879      	ldr	r1, [r7, #4]
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f7fe f962 	bl	800a7fe <ucdr_deserialize_uint8_t>
    (void) ucdr_deserialize_endian_uint16_t(ub, UCDR_LITTLE_ENDIANNESS, seq_num);
 800c53a:	683a      	ldr	r2, [r7, #0]
 800c53c:	2101      	movs	r1, #1
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	f7fe fc6b 	bl	800ae1a <ucdr_deserialize_endian_uint16_t>
    if (SESSION_ID_WITHOUT_CLIENT_KEY > *session_id)
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	b25b      	sxtb	r3, r3
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	db04      	blt.n	800c558 <uxr_deserialize_message_header+0x3c>
    {
        (void) ucdr_deserialize_array_uint8_t(ub, key, CLIENT_KEY_SIZE);
 800c54e:	2204      	movs	r2, #4
 800c550:	69b9      	ldr	r1, [r7, #24]
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f7fe f885 	bl	800a662 <ucdr_deserialize_array_uint8_t>
    }
}
 800c558:	bf00      	nop
 800c55a:	3710      	adds	r7, #16
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <uxr_serialize_submessage_header>:
void uxr_serialize_submessage_header(
        ucdrBuffer* ub,
        uint8_t id,
        uint8_t flags,
        uint16_t length)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	4608      	mov	r0, r1
 800c56a:	4611      	mov	r1, r2
 800c56c:	461a      	mov	r2, r3
 800c56e:	4603      	mov	r3, r0
 800c570:	70fb      	strb	r3, [r7, #3]
 800c572:	460b      	mov	r3, r1
 800c574:	70bb      	strb	r3, [r7, #2]
 800c576:	4613      	mov	r3, r2
 800c578:	803b      	strh	r3, [r7, #0]
    (void) ucdr_serialize_uint8_t(ub, id);
 800c57a:	78fb      	ldrb	r3, [r7, #3]
 800c57c:	4619      	mov	r1, r3
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7fe f90e 	bl	800a7a0 <ucdr_serialize_uint8_t>
    (void) ucdr_serialize_uint8_t(ub, flags);
 800c584:	78bb      	ldrb	r3, [r7, #2]
 800c586:	4619      	mov	r1, r3
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f7fe f909 	bl	800a7a0 <ucdr_serialize_uint8_t>
    (void) ucdr_serialize_endian_uint16_t(ub, UCDR_LITTLE_ENDIANNESS, length);
 800c58e:	883b      	ldrh	r3, [r7, #0]
 800c590:	461a      	mov	r2, r3
 800c592:	2101      	movs	r1, #1
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7fe fa55 	bl	800aa44 <ucdr_serialize_endian_uint16_t>
}
 800c59a:	bf00      	nop
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <uxr_deserialize_submessage_header>:
void uxr_deserialize_submessage_header(
        ucdrBuffer* ub,
        uint8_t* id,
        uint8_t* flags,
        uint16_t* length)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b084      	sub	sp, #16
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	60f8      	str	r0, [r7, #12]
 800c5aa:	60b9      	str	r1, [r7, #8]
 800c5ac:	607a      	str	r2, [r7, #4]
 800c5ae:	603b      	str	r3, [r7, #0]
    (void) ucdr_deserialize_uint8_t(ub, id);
 800c5b0:	68b9      	ldr	r1, [r7, #8]
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f7fe f923 	bl	800a7fe <ucdr_deserialize_uint8_t>
    (void) ucdr_deserialize_uint8_t(ub, flags);
 800c5b8:	6879      	ldr	r1, [r7, #4]
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f7fe f91f 	bl	800a7fe <ucdr_deserialize_uint8_t>
    (void) ucdr_deserialize_endian_uint16_t(ub, UCDR_LITTLE_ENDIANNESS, length);
 800c5c0:	683a      	ldr	r2, [r7, #0]
 800c5c2:	2101      	movs	r1, #1
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f7fe fc28 	bl	800ae1a <ucdr_deserialize_endian_uint16_t>
}
 800c5ca:	bf00      	nop
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <uxr_deserialize_Time_t>:
}

bool uxr_deserialize_Time_t(
        ucdrBuffer* buffer,
        Time_t* output)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b084      	sub	sp, #16
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_int32_t(buffer, &output->seconds);
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f7ff fd89 	bl	800c0fc <ucdr_deserialize_int32_t>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	7bfb      	ldrb	r3, [r7, #15]
 800c5f0:	4013      	ands	r3, r2
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	bf14      	ite	ne
 800c5f6:	2301      	movne	r3, #1
 800c5f8:	2300      	moveq	r3, #0
 800c5fa:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_uint32_t(buffer, &output->nanoseconds);
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	3304      	adds	r3, #4
 800c600:	4619      	mov	r1, r3
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7fe ff19 	bl	800b43a <ucdr_deserialize_uint32_t>
 800c608:	4603      	mov	r3, r0
 800c60a:	461a      	mov	r2, r3
 800c60c:	7bfb      	ldrb	r3, [r7, #15]
 800c60e:	4013      	ands	r3, r2
 800c610:	2b00      	cmp	r3, #0
 800c612:	bf14      	ite	ne
 800c614:	2301      	movne	r3, #1
 800c616:	2300      	moveq	r3, #0
 800c618:	73fb      	strb	r3, [r7, #15]
    return ret;
 800c61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <uxr_serialize_BinarySequence_t>:

bool uxr_serialize_BinarySequence_t(
        ucdrBuffer* buffer,
        const BinarySequence_t* input)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
    return ucdr_serialize_sequence_uint8_t(buffer, input->data, input->size);
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	1d19      	adds	r1, r3, #4
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	461a      	mov	r2, r3
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f7ff fed4 	bl	800c3e6 <ucdr_serialize_sequence_uint8_t>
 800c63e:	4603      	mov	r3, r0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <uxr_deserialize_BinarySequence_t>:

bool uxr_deserialize_BinarySequence_t(
        ucdrBuffer* buffer,
        BinarySequence_t* output)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
    return ucdr_deserialize_sequence_uint8_t(buffer, output->data, UXR_BINARY_SEQUENCE_MAX, &output->size);
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	1d19      	adds	r1, r3, #4
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f7ff fee6 	bl	800c42e <ucdr_deserialize_sequence_uint8_t>
 800c662:	4603      	mov	r3, r0
}
 800c664:	4618      	mov	r0, r3
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <uxr_serialize_StringSequence_t>:

bool uxr_serialize_StringSequence_t(
        ucdrBuffer* buffer,
        const StringSequence_t* input)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
    bool ret = ucdr_serialize_uint32_t(buffer, input->size);
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4619      	mov	r1, r3
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f7fe fcc5 	bl	800b00c <ucdr_serialize_uint32_t>
 800c682:	4603      	mov	r3, r0
 800c684:	73fb      	strb	r3, [r7, #15]
    for (uint32_t i = 0; i < input->size && ret; i++)
 800c686:	2300      	movs	r3, #0
 800c688:	60bb      	str	r3, [r7, #8]
 800c68a:	e00d      	b.n	800c6a8 <uxr_serialize_StringSequence_t+0x3c>
    {
        ret = ucdr_serialize_string(buffer, input->data[i]);
 800c68c:	683a      	ldr	r2, [r7, #0]
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4413      	add	r3, r2
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	4619      	mov	r1, r3
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f7ff feef 	bl	800c47c <ucdr_serialize_string>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	73fb      	strb	r3, [r7, #15]
    for (uint32_t i = 0; i < input->size && ret; i++)
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	60bb      	str	r3, [r7, #8]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	68ba      	ldr	r2, [r7, #8]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d202      	bcs.n	800c6b8 <uxr_serialize_StringSequence_t+0x4c>
 800c6b2:	7bfb      	ldrb	r3, [r7, #15]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1e9      	bne.n	800c68c <uxr_serialize_StringSequence_t+0x20>
    }
    return ret;
 800c6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <uxr_serialize_ClientKey>:
}

bool uxr_serialize_ClientKey(
        ucdrBuffer* buffer,
        const ClientKey* input)
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b084      	sub	sp, #16
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_array_uint8_t(buffer, input->data, 4);
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	2204      	movs	r2, #4
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f7fd ff87 	bl	800a5ea <ucdr_serialize_array_uint8_t>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	461a      	mov	r2, r3
 800c6e0:	7bfb      	ldrb	r3, [r7, #15]
 800c6e2:	4013      	ands	r3, r2
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	bf14      	ite	ne
 800c6e8:	2301      	movne	r3, #1
 800c6ea:	2300      	moveq	r3, #0
 800c6ec:	73fb      	strb	r3, [r7, #15]
    return ret;
 800c6ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <uxr_deserialize_ClientKey>:

bool uxr_deserialize_ClientKey(
        ucdrBuffer* buffer,
        ClientKey* output)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800c702:	2301      	movs	r3, #1
 800c704:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->data, 4);
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	2204      	movs	r2, #4
 800c70a:	4619      	mov	r1, r3
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7fd ffa8 	bl	800a662 <ucdr_deserialize_array_uint8_t>
 800c712:	4603      	mov	r3, r0
 800c714:	461a      	mov	r2, r3
 800c716:	7bfb      	ldrb	r3, [r7, #15]
 800c718:	4013      	ands	r3, r2
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	bf14      	ite	ne
 800c71e:	2301      	movne	r3, #1
 800c720:	2300      	moveq	r3, #0
 800c722:	73fb      	strb	r3, [r7, #15]
    return ret;
 800c724:	7bfb      	ldrb	r3, [r7, #15]
}
 800c726:	4618      	mov	r0, r3
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <uxr_serialize_ObjectId>:

bool uxr_serialize_ObjectId(
        ucdrBuffer* buffer,
        const ObjectId* input)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b084      	sub	sp, #16
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800c738:	2301      	movs	r3, #1
 800c73a:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_array_uint8_t(buffer, input->data, 2);
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	2202      	movs	r2, #2
 800c740:	4619      	mov	r1, r3
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7fd ff51 	bl	800a5ea <ucdr_serialize_array_uint8_t>
 800c748:	4603      	mov	r3, r0
 800c74a:	461a      	mov	r2, r3
 800c74c:	7bfb      	ldrb	r3, [r7, #15]
 800c74e:	4013      	ands	r3, r2
 800c750:	2b00      	cmp	r3, #0
 800c752:	bf14      	ite	ne
 800c754:	2301      	movne	r3, #1
 800c756:	2300      	moveq	r3, #0
 800c758:	73fb      	strb	r3, [r7, #15]
    return ret;
 800c75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3710      	adds	r7, #16
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <uxr_deserialize_ObjectId>:

bool uxr_deserialize_ObjectId(
        ucdrBuffer* buffer,
        ObjectId* output)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800c76e:	2301      	movs	r3, #1
 800c770:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->data, 2);
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	2202      	movs	r2, #2
 800c776:	4619      	mov	r1, r3
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f7fd ff72 	bl	800a662 <ucdr_deserialize_array_uint8_t>
 800c77e:	4603      	mov	r3, r0
 800c780:	461a      	mov	r2, r3
 800c782:	7bfb      	ldrb	r3, [r7, #15]
 800c784:	4013      	ands	r3, r2
 800c786:	2b00      	cmp	r3, #0
 800c788:	bf14      	ite	ne
 800c78a:	2301      	movne	r3, #1
 800c78c:	2300      	moveq	r3, #0
 800c78e:	73fb      	strb	r3, [r7, #15]
    return ret;
 800c790:	7bfb      	ldrb	r3, [r7, #15]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <uxr_serialize_XrceCookie>:
}

bool uxr_serialize_XrceCookie(
        ucdrBuffer* buffer,
        const XrceCookie* input)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b084      	sub	sp, #16
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
 800c7a2:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_array_uint8_t(buffer, input->data, 4);
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	2204      	movs	r2, #4
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f7fd ff1b 	bl	800a5ea <ucdr_serialize_array_uint8_t>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ba:	4013      	ands	r3, r2
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	bf14      	ite	ne
 800c7c0:	2301      	movne	r3, #1
 800c7c2:	2300      	moveq	r3, #0
 800c7c4:	73fb      	strb	r3, [r7, #15]
    return ret;
 800c7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <uxr_deserialize_XrceCookie>:

bool uxr_deserialize_XrceCookie(
        ucdrBuffer* buffer,
        XrceCookie* output)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->data, 4);
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	2204      	movs	r2, #4
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f7fd ff3c 	bl	800a662 <ucdr_deserialize_array_uint8_t>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	7bfb      	ldrb	r3, [r7, #15]
 800c7f0:	4013      	ands	r3, r2
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	bf14      	ite	ne
 800c7f6:	2301      	movne	r3, #1
 800c7f8:	2300      	moveq	r3, #0
 800c7fa:	73fb      	strb	r3, [r7, #15]
    return ret;
 800c7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3710      	adds	r7, #16
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <uxr_serialize_XrceVersion>:

bool uxr_serialize_XrceVersion(
        ucdrBuffer* buffer,
        const XrceVersion* input)
{
 800c806:	b580      	push	{r7, lr}
 800c808:	b084      	sub	sp, #16
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
 800c80e:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800c810:	2301      	movs	r3, #1
 800c812:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_array_uint8_t(buffer, input->data, 2);
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	2202      	movs	r2, #2
 800c818:	4619      	mov	r1, r3
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7fd fee5 	bl	800a5ea <ucdr_serialize_array_uint8_t>
 800c820:	4603      	mov	r3, r0
 800c822:	461a      	mov	r2, r3
 800c824:	7bfb      	ldrb	r3, [r7, #15]
 800c826:	4013      	ands	r3, r2
 800c828:	2b00      	cmp	r3, #0
 800c82a:	bf14      	ite	ne
 800c82c:	2301      	movne	r3, #1
 800c82e:	2300      	moveq	r3, #0
 800c830:	73fb      	strb	r3, [r7, #15]
    return ret;
 800c832:	7bfb      	ldrb	r3, [r7, #15]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <uxr_deserialize_XrceVersion>:

bool uxr_deserialize_XrceVersion(
        ucdrBuffer* buffer,
        XrceVersion* output)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800c846:	2301      	movs	r3, #1
 800c848:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->data, 2);
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	2202      	movs	r2, #2
 800c84e:	4619      	mov	r1, r3
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7fd ff06 	bl	800a662 <ucdr_deserialize_array_uint8_t>
 800c856:	4603      	mov	r3, r0
 800c858:	461a      	mov	r2, r3
 800c85a:	7bfb      	ldrb	r3, [r7, #15]
 800c85c:	4013      	ands	r3, r2
 800c85e:	2b00      	cmp	r3, #0
 800c860:	bf14      	ite	ne
 800c862:	2301      	movne	r3, #1
 800c864:	2300      	moveq	r3, #0
 800c866:	73fb      	strb	r3, [r7, #15]
    return ret;
 800c868:	7bfb      	ldrb	r3, [r7, #15]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <uxr_serialize_XrceVendorId>:

bool uxr_serialize_XrceVendorId(
        ucdrBuffer* buffer,
        const XrceVendorId* input)
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b084      	sub	sp, #16
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
 800c87a:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800c87c:	2301      	movs	r3, #1
 800c87e:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_array_uint8_t(buffer, input->data, 2);
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	2202      	movs	r2, #2
 800c884:	4619      	mov	r1, r3
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f7fd feaf 	bl	800a5ea <ucdr_serialize_array_uint8_t>
 800c88c:	4603      	mov	r3, r0
 800c88e:	461a      	mov	r2, r3
 800c890:	7bfb      	ldrb	r3, [r7, #15]
 800c892:	4013      	ands	r3, r2
 800c894:	2b00      	cmp	r3, #0
 800c896:	bf14      	ite	ne
 800c898:	2301      	movne	r3, #1
 800c89a:	2300      	moveq	r3, #0
 800c89c:	73fb      	strb	r3, [r7, #15]
    return ret;
 800c89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <uxr_deserialize_XrceVendorId>:

bool uxr_deserialize_XrceVendorId(
        ucdrBuffer* buffer,
        XrceVendorId* output)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->data, 2);
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	2202      	movs	r2, #2
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f7fd fed0 	bl	800a662 <ucdr_deserialize_array_uint8_t>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	7bfb      	ldrb	r3, [r7, #15]
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	bf14      	ite	ne
 800c8ce:	2301      	movne	r3, #1
 800c8d0:	2300      	moveq	r3, #0
 800c8d2:	73fb      	strb	r3, [r7, #15]
    return ret;
 800c8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <uxr_serialize_Property>:
}

bool uxr_serialize_Property(
        ucdrBuffer* buffer,
        const Property* input)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b084      	sub	sp, #16
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_string(buffer, input->name);
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f7ff fdc2 	bl	800c47c <ucdr_serialize_string>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	7bfb      	ldrb	r3, [r7, #15]
 800c8fe:	4013      	ands	r3, r2
 800c900:	2b00      	cmp	r3, #0
 800c902:	bf14      	ite	ne
 800c904:	2301      	movne	r3, #1
 800c906:	2300      	moveq	r3, #0
 800c908:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_string(buffer, input->value);
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	4619      	mov	r1, r3
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f7ff fdb3 	bl	800c47c <ucdr_serialize_string>
 800c916:	4603      	mov	r3, r0
 800c918:	461a      	mov	r2, r3
 800c91a:	7bfb      	ldrb	r3, [r7, #15]
 800c91c:	4013      	ands	r3, r2
 800c91e:	2b00      	cmp	r3, #0
 800c920:	bf14      	ite	ne
 800c922:	2301      	movne	r3, #1
 800c924:	2300      	moveq	r3, #0
 800c926:	73fb      	strb	r3, [r7, #15]
    return ret;
 800c928:	7bfb      	ldrb	r3, [r7, #15]
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <uxr_deserialize_Property>:

bool uxr_deserialize_Property(
        ucdrBuffer* buffer,
        Property* output)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b084      	sub	sp, #16
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800c93c:	2301      	movs	r3, #1
 800c93e:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_string(buffer, output->name, UXR_STRING_SIZE_MAX);
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c948:	4619      	mov	r1, r3
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f7ff fdaa 	bl	800c4a4 <ucdr_deserialize_string>
 800c950:	4603      	mov	r3, r0
 800c952:	461a      	mov	r2, r3
 800c954:	7bfb      	ldrb	r3, [r7, #15]
 800c956:	4013      	ands	r3, r2
 800c958:	2b00      	cmp	r3, #0
 800c95a:	bf14      	ite	ne
 800c95c:	2301      	movne	r3, #1
 800c95e:	2300      	moveq	r3, #0
 800c960:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_string(buffer, output->value, UXR_STRING_SIZE_MAX);
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c96a:	4619      	mov	r1, r3
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f7ff fd99 	bl	800c4a4 <ucdr_deserialize_string>
 800c972:	4603      	mov	r3, r0
 800c974:	461a      	mov	r2, r3
 800c976:	7bfb      	ldrb	r3, [r7, #15]
 800c978:	4013      	ands	r3, r2
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	bf14      	ite	ne
 800c97e:	2301      	movne	r3, #1
 800c980:	2300      	moveq	r3, #0
 800c982:	73fb      	strb	r3, [r7, #15]
    return ret;
 800c984:	7bfb      	ldrb	r3, [r7, #15]
}
 800c986:	4618      	mov	r0, r3
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <uxr_serialize_PropertySeq>:

bool uxr_serialize_PropertySeq(
        ucdrBuffer* buffer,
        const PropertySeq* input)
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b084      	sub	sp, #16
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	6039      	str	r1, [r7, #0]
    bool ret = ucdr_serialize_uint32_t(buffer, input->size);
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4619      	mov	r1, r3
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f7fe fb34 	bl	800b00c <ucdr_serialize_uint32_t>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	73fb      	strb	r3, [r7, #15]
    for (uint32_t i = 0; i < input->size && ret; i++)
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	60bb      	str	r3, [r7, #8]
 800c9ac:	e00d      	b.n	800c9ca <uxr_serialize_PropertySeq+0x3c>
    {
        ret = uxr_serialize_Property(buffer, input->data + i);
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	1d1a      	adds	r2, r3, #4
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	00db      	lsls	r3, r3, #3
 800c9b6:	4413      	add	r3, r2
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f7ff ff8f 	bl	800c8de <uxr_serialize_Property>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	73fb      	strb	r3, [r7, #15]
    for (uint32_t i = 0; i < input->size && ret; i++)
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	60bb      	str	r3, [r7, #8]
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d202      	bcs.n	800c9da <uxr_serialize_PropertySeq+0x4c>
 800c9d4:	7bfb      	ldrb	r3, [r7, #15]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1e9      	bne.n	800c9ae <uxr_serialize_PropertySeq+0x20>
    }
    return ret;
 800c9da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3710      	adds	r7, #16
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <uxr_deserialize_PropertySeq>:

bool uxr_deserialize_PropertySeq(
        ucdrBuffer* buffer,
        PropertySeq* output)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
    bool ret = ucdr_deserialize_uint32_t(buffer, &output->size);
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f7fe fd21 	bl	800b43a <ucdr_deserialize_uint32_t>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	73fb      	strb	r3, [r7, #15]

    if (output->size > UXR_PROPERTY_SEQUENCE_MAX)
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d905      	bls.n	800ca10 <uxr_deserialize_PropertySeq+0x2c>
    {
        buffer->error = true;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2201      	movs	r2, #1
 800ca08:	759a      	strb	r2, [r3, #22]
        ret = false;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	73fb      	strb	r3, [r7, #15]
 800ca0e:	e018      	b.n	800ca42 <uxr_deserialize_PropertySeq+0x5e>
    }
    else
    {
        for (uint32_t i = 0; i < output->size && ret; i++)
 800ca10:	2300      	movs	r3, #0
 800ca12:	60bb      	str	r3, [r7, #8]
 800ca14:	e00d      	b.n	800ca32 <uxr_deserialize_PropertySeq+0x4e>
        {
            ret = uxr_deserialize_Property(buffer, &output->data[i]);
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	00db      	lsls	r3, r3, #3
 800ca1a:	683a      	ldr	r2, [r7, #0]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	3304      	adds	r3, #4
 800ca20:	4619      	mov	r1, r3
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f7ff ff85 	bl	800c932 <uxr_deserialize_Property>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < output->size && ret; i++)
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	60bb      	str	r3, [r7, #8]
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	68ba      	ldr	r2, [r7, #8]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d202      	bcs.n	800ca42 <uxr_deserialize_PropertySeq+0x5e>
 800ca3c:	7bfb      	ldrb	r3, [r7, #15]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1e9      	bne.n	800ca16 <uxr_deserialize_PropertySeq+0x32>
        }
    }
    return ret;
 800ca42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3710      	adds	r7, #16
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <uxr_serialize_CLIENT_Representation>:

bool uxr_serialize_CLIENT_Representation(
        ucdrBuffer* buffer,
        const CLIENT_Representation* input)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800ca56:	2301      	movs	r3, #1
 800ca58:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_XrceCookie(buffer, &input->xrce_cookie);
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7ff fe9b 	bl	800c79a <uxr_serialize_XrceCookie>
 800ca64:	4603      	mov	r3, r0
 800ca66:	461a      	mov	r2, r3
 800ca68:	7bfb      	ldrb	r3, [r7, #15]
 800ca6a:	4013      	ands	r3, r2
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	bf14      	ite	ne
 800ca70:	2301      	movne	r3, #1
 800ca72:	2300      	moveq	r3, #0
 800ca74:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_XrceVersion(buffer, &input->xrce_version);
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	3304      	adds	r3, #4
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f7ff fec2 	bl	800c806 <uxr_serialize_XrceVersion>
 800ca82:	4603      	mov	r3, r0
 800ca84:	461a      	mov	r2, r3
 800ca86:	7bfb      	ldrb	r3, [r7, #15]
 800ca88:	4013      	ands	r3, r2
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	bf14      	ite	ne
 800ca8e:	2301      	movne	r3, #1
 800ca90:	2300      	moveq	r3, #0
 800ca92:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_XrceVendorId(buffer, &input->xrce_vendor_id);
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	3306      	adds	r3, #6
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f7ff fee9 	bl	800c872 <uxr_serialize_XrceVendorId>
 800caa0:	4603      	mov	r3, r0
 800caa2:	461a      	mov	r2, r3
 800caa4:	7bfb      	ldrb	r3, [r7, #15]
 800caa6:	4013      	ands	r3, r2
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	bf14      	ite	ne
 800caac:	2301      	movne	r3, #1
 800caae:	2300      	moveq	r3, #0
 800cab0:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_ClientKey(buffer, &input->client_key);
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	3308      	adds	r3, #8
 800cab6:	4619      	mov	r1, r3
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f7ff fe02 	bl	800c6c2 <uxr_serialize_ClientKey>
 800cabe:	4603      	mov	r3, r0
 800cac0:	461a      	mov	r2, r3
 800cac2:	7bfb      	ldrb	r3, [r7, #15]
 800cac4:	4013      	ands	r3, r2
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	bf14      	ite	ne
 800caca:	2301      	movne	r3, #1
 800cacc:	2300      	moveq	r3, #0
 800cace:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint8_t(buffer, input->session_id);
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	7b1b      	ldrb	r3, [r3, #12]
 800cad4:	4619      	mov	r1, r3
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f7fd fe62 	bl	800a7a0 <ucdr_serialize_uint8_t>
 800cadc:	4603      	mov	r3, r0
 800cade:	461a      	mov	r2, r3
 800cae0:	7bfb      	ldrb	r3, [r7, #15]
 800cae2:	4013      	ands	r3, r2
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	bf14      	ite	ne
 800cae8:	2301      	movne	r3, #1
 800caea:	2300      	moveq	r3, #0
 800caec:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_bool(buffer, input->optional_properties);
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	7b5b      	ldrb	r3, [r3, #13]
 800caf2:	4619      	mov	r1, r3
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f7fd fdf0 	bl	800a6da <ucdr_serialize_bool>
 800cafa:	4603      	mov	r3, r0
 800cafc:	461a      	mov	r2, r3
 800cafe:	7bfb      	ldrb	r3, [r7, #15]
 800cb00:	4013      	ands	r3, r2
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	bf14      	ite	ne
 800cb06:	2301      	movne	r3, #1
 800cb08:	2300      	moveq	r3, #0
 800cb0a:	73fb      	strb	r3, [r7, #15]
    if (input->optional_properties == true)
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	7b5b      	ldrb	r3, [r3, #13]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d00e      	beq.n	800cb32 <uxr_serialize_CLIENT_Representation+0xe6>
    {
        ret &= uxr_serialize_PropertySeq(buffer, &input->properties);
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	3310      	adds	r3, #16
 800cb18:	4619      	mov	r1, r3
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7ff ff37 	bl	800c98e <uxr_serialize_PropertySeq>
 800cb20:	4603      	mov	r3, r0
 800cb22:	461a      	mov	r2, r3
 800cb24:	7bfb      	ldrb	r3, [r7, #15]
 800cb26:	4013      	ands	r3, r2
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	bf14      	ite	ne
 800cb2c:	2301      	movne	r3, #1
 800cb2e:	2300      	moveq	r3, #0
 800cb30:	73fb      	strb	r3, [r7, #15]
    }
    ret &= ucdr_serialize_uint16_t(buffer, input->mtu);
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	8b9b      	ldrh	r3, [r3, #28]
 800cb36:	4619      	mov	r1, r3
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f7fd fe8f 	bl	800a85c <ucdr_serialize_uint16_t>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	461a      	mov	r2, r3
 800cb42:	7bfb      	ldrb	r3, [r7, #15]
 800cb44:	4013      	ands	r3, r2
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	bf14      	ite	ne
 800cb4a:	2301      	movne	r3, #1
 800cb4c:	2300      	moveq	r3, #0
 800cb4e:	73fb      	strb	r3, [r7, #15]

    return ret;
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <uxr_deserialize_CLIENT_Representation>:

bool uxr_deserialize_CLIENT_Representation(
        ucdrBuffer* buffer,
        CLIENT_Representation* output)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b084      	sub	sp, #16
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
 800cb62:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800cb64:	2301      	movs	r3, #1
 800cb66:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_XrceCookie(buffer, &output->xrce_cookie);
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f7ff fe2f 	bl	800c7d0 <uxr_deserialize_XrceCookie>
 800cb72:	4603      	mov	r3, r0
 800cb74:	461a      	mov	r2, r3
 800cb76:	7bfb      	ldrb	r3, [r7, #15]
 800cb78:	4013      	ands	r3, r2
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	bf14      	ite	ne
 800cb7e:	2301      	movne	r3, #1
 800cb80:	2300      	moveq	r3, #0
 800cb82:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_XrceVersion(buffer, &output->xrce_version);
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	3304      	adds	r3, #4
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff fe56 	bl	800c83c <uxr_deserialize_XrceVersion>
 800cb90:	4603      	mov	r3, r0
 800cb92:	461a      	mov	r2, r3
 800cb94:	7bfb      	ldrb	r3, [r7, #15]
 800cb96:	4013      	ands	r3, r2
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	bf14      	ite	ne
 800cb9c:	2301      	movne	r3, #1
 800cb9e:	2300      	moveq	r3, #0
 800cba0:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_XrceVendorId(buffer, &output->xrce_vendor_id);
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	3306      	adds	r3, #6
 800cba6:	4619      	mov	r1, r3
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f7ff fe7d 	bl	800c8a8 <uxr_deserialize_XrceVendorId>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	7bfb      	ldrb	r3, [r7, #15]
 800cbb4:	4013      	ands	r3, r2
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	bf14      	ite	ne
 800cbba:	2301      	movne	r3, #1
 800cbbc:	2300      	moveq	r3, #0
 800cbbe:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_ClientKey(buffer, &output->client_key);
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	3308      	adds	r3, #8
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f7ff fd96 	bl	800c6f8 <uxr_deserialize_ClientKey>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	461a      	mov	r2, r3
 800cbd0:	7bfb      	ldrb	r3, [r7, #15]
 800cbd2:	4013      	ands	r3, r2
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	bf14      	ite	ne
 800cbd8:	2301      	movne	r3, #1
 800cbda:	2300      	moveq	r3, #0
 800cbdc:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_uint8_t(buffer, &output->session_id);
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	330c      	adds	r3, #12
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f7fd fe0a 	bl	800a7fe <ucdr_deserialize_uint8_t>
 800cbea:	4603      	mov	r3, r0
 800cbec:	461a      	mov	r2, r3
 800cbee:	7bfb      	ldrb	r3, [r7, #15]
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	bf14      	ite	ne
 800cbf6:	2301      	movne	r3, #1
 800cbf8:	2300      	moveq	r3, #0
 800cbfa:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_bool(buffer, &output->optional_properties);
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	330d      	adds	r3, #13
 800cc00:	4619      	mov	r1, r3
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f7fd fd98 	bl	800a738 <ucdr_deserialize_bool>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	7bfb      	ldrb	r3, [r7, #15]
 800cc0e:	4013      	ands	r3, r2
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	bf14      	ite	ne
 800cc14:	2301      	movne	r3, #1
 800cc16:	2300      	moveq	r3, #0
 800cc18:	73fb      	strb	r3, [r7, #15]
    if (output->optional_properties == true)
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	7b5b      	ldrb	r3, [r3, #13]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d00e      	beq.n	800cc40 <uxr_deserialize_CLIENT_Representation+0xe6>
    {
        ret &= uxr_deserialize_PropertySeq(buffer, &output->properties);
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	3310      	adds	r3, #16
 800cc26:	4619      	mov	r1, r3
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f7ff fedb 	bl	800c9e4 <uxr_deserialize_PropertySeq>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	461a      	mov	r2, r3
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
 800cc34:	4013      	ands	r3, r2
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	bf14      	ite	ne
 800cc3a:	2301      	movne	r3, #1
 800cc3c:	2300      	moveq	r3, #0
 800cc3e:	73fb      	strb	r3, [r7, #15]
    }
    ret &= ucdr_deserialize_uint16_t(buffer, &output->mtu);
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	331c      	adds	r3, #28
 800cc44:	4619      	mov	r1, r3
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f7fd ffef 	bl	800ac2a <ucdr_deserialize_uint16_t>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	461a      	mov	r2, r3
 800cc50:	7bfb      	ldrb	r3, [r7, #15]
 800cc52:	4013      	ands	r3, r2
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	bf14      	ite	ne
 800cc58:	2301      	movne	r3, #1
 800cc5a:	2300      	moveq	r3, #0
 800cc5c:	73fb      	strb	r3, [r7, #15]

    return ret;
 800cc5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <uxr_serialize_AGENT_Representation>:

bool uxr_serialize_AGENT_Representation(
        ucdrBuffer* buffer,
        const AGENT_Representation* input)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800cc72:	2301      	movs	r3, #1
 800cc74:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_XrceCookie(buffer, &input->xrce_cookie);
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	4619      	mov	r1, r3
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f7ff fd8d 	bl	800c79a <uxr_serialize_XrceCookie>
 800cc80:	4603      	mov	r3, r0
 800cc82:	461a      	mov	r2, r3
 800cc84:	7bfb      	ldrb	r3, [r7, #15]
 800cc86:	4013      	ands	r3, r2
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	bf14      	ite	ne
 800cc8c:	2301      	movne	r3, #1
 800cc8e:	2300      	moveq	r3, #0
 800cc90:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_XrceVersion(buffer, &input->xrce_version);
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	3304      	adds	r3, #4
 800cc96:	4619      	mov	r1, r3
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f7ff fdb4 	bl	800c806 <uxr_serialize_XrceVersion>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	461a      	mov	r2, r3
 800cca2:	7bfb      	ldrb	r3, [r7, #15]
 800cca4:	4013      	ands	r3, r2
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	bf14      	ite	ne
 800ccaa:	2301      	movne	r3, #1
 800ccac:	2300      	moveq	r3, #0
 800ccae:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_XrceVendorId(buffer, &input->xrce_vendor_id);
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	3306      	adds	r3, #6
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff fddb 	bl	800c872 <uxr_serialize_XrceVendorId>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
 800ccc2:	4013      	ands	r3, r2
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	bf14      	ite	ne
 800ccc8:	2301      	movne	r3, #1
 800ccca:	2300      	moveq	r3, #0
 800cccc:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_bool(buffer, input->optional_properties);
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	7a1b      	ldrb	r3, [r3, #8]
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f7fd fd00 	bl	800a6da <ucdr_serialize_bool>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	461a      	mov	r2, r3
 800ccde:	7bfb      	ldrb	r3, [r7, #15]
 800cce0:	4013      	ands	r3, r2
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	bf14      	ite	ne
 800cce6:	2301      	movne	r3, #1
 800cce8:	2300      	moveq	r3, #0
 800ccea:	73fb      	strb	r3, [r7, #15]
    if (input->optional_properties == true)
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	7a1b      	ldrb	r3, [r3, #8]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00e      	beq.n	800cd12 <uxr_serialize_AGENT_Representation+0xaa>
    {
        ret &= uxr_serialize_PropertySeq(buffer, &input->properties);
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	330c      	adds	r3, #12
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f7ff fe47 	bl	800c98e <uxr_serialize_PropertySeq>
 800cd00:	4603      	mov	r3, r0
 800cd02:	461a      	mov	r2, r3
 800cd04:	7bfb      	ldrb	r3, [r7, #15]
 800cd06:	4013      	ands	r3, r2
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	bf14      	ite	ne
 800cd0c:	2301      	movne	r3, #1
 800cd0e:	2300      	moveq	r3, #0
 800cd10:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800cd12:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3710      	adds	r7, #16
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <uxr_deserialize_AGENT_Representation>:

bool uxr_deserialize_AGENT_Representation(
        ucdrBuffer* buffer,
        AGENT_Representation* output)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800cd26:	2301      	movs	r3, #1
 800cd28:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_XrceCookie(buffer, &output->xrce_cookie);
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7ff fd4e 	bl	800c7d0 <uxr_deserialize_XrceCookie>
 800cd34:	4603      	mov	r3, r0
 800cd36:	461a      	mov	r2, r3
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
 800cd3a:	4013      	ands	r3, r2
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	bf14      	ite	ne
 800cd40:	2301      	movne	r3, #1
 800cd42:	2300      	moveq	r3, #0
 800cd44:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_XrceVersion(buffer, &output->xrce_version);
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	3304      	adds	r3, #4
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f7ff fd75 	bl	800c83c <uxr_deserialize_XrceVersion>
 800cd52:	4603      	mov	r3, r0
 800cd54:	461a      	mov	r2, r3
 800cd56:	7bfb      	ldrb	r3, [r7, #15]
 800cd58:	4013      	ands	r3, r2
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	bf14      	ite	ne
 800cd5e:	2301      	movne	r3, #1
 800cd60:	2300      	moveq	r3, #0
 800cd62:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_XrceVendorId(buffer, &output->xrce_vendor_id);
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	3306      	adds	r3, #6
 800cd68:	4619      	mov	r1, r3
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f7ff fd9c 	bl	800c8a8 <uxr_deserialize_XrceVendorId>
 800cd70:	4603      	mov	r3, r0
 800cd72:	461a      	mov	r2, r3
 800cd74:	7bfb      	ldrb	r3, [r7, #15]
 800cd76:	4013      	ands	r3, r2
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	bf14      	ite	ne
 800cd7c:	2301      	movne	r3, #1
 800cd7e:	2300      	moveq	r3, #0
 800cd80:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_bool(buffer, &output->optional_properties);
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	3308      	adds	r3, #8
 800cd86:	4619      	mov	r1, r3
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7fd fcd5 	bl	800a738 <ucdr_deserialize_bool>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	461a      	mov	r2, r3
 800cd92:	7bfb      	ldrb	r3, [r7, #15]
 800cd94:	4013      	ands	r3, r2
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	bf14      	ite	ne
 800cd9a:	2301      	movne	r3, #1
 800cd9c:	2300      	moveq	r3, #0
 800cd9e:	73fb      	strb	r3, [r7, #15]
    //if(output->optional_properties == true)
    //{
    //        ret &= uxr_deserialize_PropertySeq(buffer, &output->properties);
    //}

    return ret;
 800cda0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <uxr_serialize_OBJK_Representation3Formats>:

bool uxr_serialize_OBJK_Representation3Formats(
        ucdrBuffer* buffer,
        const OBJK_Representation3Formats* input)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b084      	sub	sp, #16
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
 800cdb2:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint8_t(buffer, input->format);
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7fd fcee 	bl	800a7a0 <ucdr_serialize_uint8_t>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	7bfb      	ldrb	r3, [r7, #15]
 800cdca:	4013      	ands	r3, r2
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	bf14      	ite	ne
 800cdd0:	2301      	movne	r3, #1
 800cdd2:	2300      	moveq	r3, #0
 800cdd4:	73fb      	strb	r3, [r7, #15]
    if (ret)
 800cdd6:	7bfb      	ldrb	r3, [r7, #15]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d03a      	beq.n	800ce52 <uxr_serialize_OBJK_Representation3Formats+0xa8>
    {
        switch (input->format)
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	2b03      	cmp	r3, #3
 800cde2:	d026      	beq.n	800ce32 <uxr_serialize_OBJK_Representation3Formats+0x88>
 800cde4:	2b03      	cmp	r3, #3
 800cde6:	dc36      	bgt.n	800ce56 <uxr_serialize_OBJK_Representation3Formats+0xac>
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d002      	beq.n	800cdf2 <uxr_serialize_OBJK_Representation3Formats+0x48>
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d010      	beq.n	800ce12 <uxr_serialize_OBJK_Representation3Formats+0x68>
                break;
            case DDS_XRCE_REPRESENTATION_IN_BINARY:
                ret &= uxr_serialize_BinarySequence_t(buffer, &input->_.binary_representation);
                break;
            default:
                break;
 800cdf0:	e031      	b.n	800ce56 <uxr_serialize_OBJK_Representation3Formats+0xac>
                ret &= ucdr_serialize_string(buffer, input->_.object_reference);
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f7ff fb3f 	bl	800c47c <ucdr_serialize_string>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	461a      	mov	r2, r3
 800ce02:	7bfb      	ldrb	r3, [r7, #15]
 800ce04:	4013      	ands	r3, r2
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	bf14      	ite	ne
 800ce0a:	2301      	movne	r3, #1
 800ce0c:	2300      	moveq	r3, #0
 800ce0e:	73fb      	strb	r3, [r7, #15]
                break;
 800ce10:	e022      	b.n	800ce58 <uxr_serialize_OBJK_Representation3Formats+0xae>
                ret &= ucdr_serialize_string(buffer, input->_.xml_string_represenatation);
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	4619      	mov	r1, r3
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7ff fb2f 	bl	800c47c <ucdr_serialize_string>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	461a      	mov	r2, r3
 800ce22:	7bfb      	ldrb	r3, [r7, #15]
 800ce24:	4013      	ands	r3, r2
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	bf14      	ite	ne
 800ce2a:	2301      	movne	r3, #1
 800ce2c:	2300      	moveq	r3, #0
 800ce2e:	73fb      	strb	r3, [r7, #15]
                break;
 800ce30:	e012      	b.n	800ce58 <uxr_serialize_OBJK_Representation3Formats+0xae>
                ret &= uxr_serialize_BinarySequence_t(buffer, &input->_.binary_representation);
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	3304      	adds	r3, #4
 800ce36:	4619      	mov	r1, r3
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f7ff fbf3 	bl	800c624 <uxr_serialize_BinarySequence_t>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	461a      	mov	r2, r3
 800ce42:	7bfb      	ldrb	r3, [r7, #15]
 800ce44:	4013      	ands	r3, r2
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	bf14      	ite	ne
 800ce4a:	2301      	movne	r3, #1
 800ce4c:	2300      	moveq	r3, #0
 800ce4e:	73fb      	strb	r3, [r7, #15]
                break;
 800ce50:	e002      	b.n	800ce58 <uxr_serialize_OBJK_Representation3Formats+0xae>
        }
    }
 800ce52:	bf00      	nop
 800ce54:	e000      	b.n	800ce58 <uxr_serialize_OBJK_Representation3Formats+0xae>
                break;
 800ce56:	bf00      	nop
    return ret;
 800ce58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <uxr_deserialize_OBJK_Representation3Formats>:

bool uxr_deserialize_OBJK_Representation3Formats(
        ucdrBuffer* buffer,
        OBJK_Representation3Formats* output)
{
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b084      	sub	sp, #16
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_uint8_t(buffer, &output->format);
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	4619      	mov	r1, r3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f7fd fcc2 	bl	800a7fe <ucdr_deserialize_uint8_t>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	7bfb      	ldrb	r3, [r7, #15]
 800ce80:	4013      	ands	r3, r2
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	bf14      	ite	ne
 800ce86:	2301      	movne	r3, #1
 800ce88:	2300      	moveq	r3, #0
 800ce8a:	73fb      	strb	r3, [r7, #15]
    if (ret)
 800ce8c:	7bfb      	ldrb	r3, [r7, #15]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d03e      	beq.n	800cf10 <uxr_deserialize_OBJK_Representation3Formats+0xae>
    {
        switch (output->format)
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	2b03      	cmp	r3, #3
 800ce98:	d02a      	beq.n	800cef0 <uxr_deserialize_OBJK_Representation3Formats+0x8e>
 800ce9a:	2b03      	cmp	r3, #3
 800ce9c:	dc3a      	bgt.n	800cf14 <uxr_deserialize_OBJK_Representation3Formats+0xb2>
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d002      	beq.n	800cea8 <uxr_deserialize_OBJK_Representation3Formats+0x46>
 800cea2:	2b02      	cmp	r3, #2
 800cea4:	d012      	beq.n	800cecc <uxr_deserialize_OBJK_Representation3Formats+0x6a>
                break;
            case DDS_XRCE_REPRESENTATION_IN_BINARY:
                ret &= uxr_deserialize_BinarySequence_t(buffer, &output->_.binary_representation);
                break;
            default:
                break;
 800cea6:	e035      	b.n	800cf14 <uxr_deserialize_OBJK_Representation3Formats+0xb2>
                ret &= ucdr_deserialize_string(buffer, output->_.object_reference, UXR_STRING_SIZE_MAX);
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f7ff faf6 	bl	800c4a4 <ucdr_deserialize_string>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	461a      	mov	r2, r3
 800cebc:	7bfb      	ldrb	r3, [r7, #15]
 800cebe:	4013      	ands	r3, r2
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	bf14      	ite	ne
 800cec4:	2301      	movne	r3, #1
 800cec6:	2300      	moveq	r3, #0
 800cec8:	73fb      	strb	r3, [r7, #15]
                break;
 800ceca:	e024      	b.n	800cf16 <uxr_deserialize_OBJK_Representation3Formats+0xb4>
                ret &= ucdr_deserialize_string(buffer, output->_.xml_string_represenatation, UXR_STRING_SIZE_MAX);
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ced4:	4619      	mov	r1, r3
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7ff fae4 	bl	800c4a4 <ucdr_deserialize_string>
 800cedc:	4603      	mov	r3, r0
 800cede:	461a      	mov	r2, r3
 800cee0:	7bfb      	ldrb	r3, [r7, #15]
 800cee2:	4013      	ands	r3, r2
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	bf14      	ite	ne
 800cee8:	2301      	movne	r3, #1
 800ceea:	2300      	moveq	r3, #0
 800ceec:	73fb      	strb	r3, [r7, #15]
                break;
 800ceee:	e012      	b.n	800cf16 <uxr_deserialize_OBJK_Representation3Formats+0xb4>
                ret &= uxr_deserialize_BinarySequence_t(buffer, &output->_.binary_representation);
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	3304      	adds	r3, #4
 800cef4:	4619      	mov	r1, r3
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7ff fba6 	bl	800c648 <uxr_deserialize_BinarySequence_t>
 800cefc:	4603      	mov	r3, r0
 800cefe:	461a      	mov	r2, r3
 800cf00:	7bfb      	ldrb	r3, [r7, #15]
 800cf02:	4013      	ands	r3, r2
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	bf14      	ite	ne
 800cf08:	2301      	movne	r3, #1
 800cf0a:	2300      	moveq	r3, #0
 800cf0c:	73fb      	strb	r3, [r7, #15]
                break;
 800cf0e:	e002      	b.n	800cf16 <uxr_deserialize_OBJK_Representation3Formats+0xb4>
        }
    }
 800cf10:	bf00      	nop
 800cf12:	e000      	b.n	800cf16 <uxr_deserialize_OBJK_Representation3Formats+0xb4>
                break;
 800cf14:	bf00      	nop
    return ret;
 800cf16:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3710      	adds	r7, #16
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <uxr_serialize_OBJK_RepresentationRefAndXMLFormats>:

bool uxr_serialize_OBJK_RepresentationRefAndXMLFormats(
        ucdrBuffer* buffer,
        const OBJK_RepresentationRefAndXMLFormats* input)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint8_t(buffer, input->format);
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	4619      	mov	r1, r3
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7fd fc33 	bl	800a7a0 <ucdr_serialize_uint8_t>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	7bfb      	ldrb	r3, [r7, #15]
 800cf40:	4013      	ands	r3, r2
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	bf14      	ite	ne
 800cf46:	2301      	movne	r3, #1
 800cf48:	2300      	moveq	r3, #0
 800cf4a:	73fb      	strb	r3, [r7, #15]
    if (ret)
 800cf4c:	7bfb      	ldrb	r3, [r7, #15]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d026      	beq.n	800cfa0 <uxr_serialize_OBJK_RepresentationRefAndXMLFormats+0x80>
    {
        switch (input->format)
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d002      	beq.n	800cf60 <uxr_serialize_OBJK_RepresentationRefAndXMLFormats+0x40>
 800cf5a:	2b02      	cmp	r3, #2
 800cf5c:	d010      	beq.n	800cf80 <uxr_serialize_OBJK_RepresentationRefAndXMLFormats+0x60>
                break;
            case DDS_XRCE_REPRESENTATION_AS_XML_STRING:
                ret &= ucdr_serialize_string(buffer, input->_.xml_string_represenatation);
                break;
            default:
                break;
 800cf5e:	e020      	b.n	800cfa2 <uxr_serialize_OBJK_RepresentationRefAndXMLFormats+0x82>
                ret &= ucdr_serialize_string(buffer, input->_.object_name);
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	4619      	mov	r1, r3
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f7ff fa88 	bl	800c47c <ucdr_serialize_string>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	461a      	mov	r2, r3
 800cf70:	7bfb      	ldrb	r3, [r7, #15]
 800cf72:	4013      	ands	r3, r2
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	bf14      	ite	ne
 800cf78:	2301      	movne	r3, #1
 800cf7a:	2300      	moveq	r3, #0
 800cf7c:	73fb      	strb	r3, [r7, #15]
                break;
 800cf7e:	e010      	b.n	800cfa2 <uxr_serialize_OBJK_RepresentationRefAndXMLFormats+0x82>
                ret &= ucdr_serialize_string(buffer, input->_.xml_string_represenatation);
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	4619      	mov	r1, r3
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f7ff fa78 	bl	800c47c <ucdr_serialize_string>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	461a      	mov	r2, r3
 800cf90:	7bfb      	ldrb	r3, [r7, #15]
 800cf92:	4013      	ands	r3, r2
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	bf14      	ite	ne
 800cf98:	2301      	movne	r3, #1
 800cf9a:	2300      	moveq	r3, #0
 800cf9c:	73fb      	strb	r3, [r7, #15]
                break;
 800cf9e:	e000      	b.n	800cfa2 <uxr_serialize_OBJK_RepresentationRefAndXMLFormats+0x82>
        }
    }
 800cfa0:	bf00      	nop
    return ret;
 800cfa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3710      	adds	r7, #16
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <uxr_deserialize_OBJK_RepresentationRefAndXMLFormats>:

bool uxr_deserialize_OBJK_RepresentationRefAndXMLFormats(
        ucdrBuffer* buffer,
        OBJK_RepresentationRefAndXMLFormats* output)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_uint8_t(buffer, &output->format);
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f7fd fc1d 	bl	800a7fe <ucdr_deserialize_uint8_t>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	7bfb      	ldrb	r3, [r7, #15]
 800cfca:	4013      	ands	r3, r2
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	bf14      	ite	ne
 800cfd0:	2301      	movne	r3, #1
 800cfd2:	2300      	moveq	r3, #0
 800cfd4:	73fb      	strb	r3, [r7, #15]
    if (ret)
 800cfd6:	7bfb      	ldrb	r3, [r7, #15]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d02a      	beq.n	800d032 <uxr_deserialize_OBJK_RepresentationRefAndXMLFormats+0x86>
    {
        switch (output->format)
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d002      	beq.n	800cfea <uxr_deserialize_OBJK_RepresentationRefAndXMLFormats+0x3e>
 800cfe4:	2b02      	cmp	r3, #2
 800cfe6:	d012      	beq.n	800d00e <uxr_deserialize_OBJK_RepresentationRefAndXMLFormats+0x62>
                break;
            case DDS_XRCE_REPRESENTATION_AS_XML_STRING:
                ret &= ucdr_deserialize_string(buffer, output->_.xml_string_represenatation, UXR_STRING_SIZE_MAX);
                break;
            default:
                break;
 800cfe8:	e024      	b.n	800d034 <uxr_deserialize_OBJK_RepresentationRefAndXMLFormats+0x88>
                ret &= ucdr_deserialize_string(buffer, output->_.object_name, UXR_STRING_SIZE_MAX);
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cff2:	4619      	mov	r1, r3
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f7ff fa55 	bl	800c4a4 <ucdr_deserialize_string>
 800cffa:	4603      	mov	r3, r0
 800cffc:	461a      	mov	r2, r3
 800cffe:	7bfb      	ldrb	r3, [r7, #15]
 800d000:	4013      	ands	r3, r2
 800d002:	2b00      	cmp	r3, #0
 800d004:	bf14      	ite	ne
 800d006:	2301      	movne	r3, #1
 800d008:	2300      	moveq	r3, #0
 800d00a:	73fb      	strb	r3, [r7, #15]
                break;
 800d00c:	e012      	b.n	800d034 <uxr_deserialize_OBJK_RepresentationRefAndXMLFormats+0x88>
                ret &= ucdr_deserialize_string(buffer, output->_.xml_string_represenatation, UXR_STRING_SIZE_MAX);
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d016:	4619      	mov	r1, r3
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f7ff fa43 	bl	800c4a4 <ucdr_deserialize_string>
 800d01e:	4603      	mov	r3, r0
 800d020:	461a      	mov	r2, r3
 800d022:	7bfb      	ldrb	r3, [r7, #15]
 800d024:	4013      	ands	r3, r2
 800d026:	2b00      	cmp	r3, #0
 800d028:	bf14      	ite	ne
 800d02a:	2301      	movne	r3, #1
 800d02c:	2300      	moveq	r3, #0
 800d02e:	73fb      	strb	r3, [r7, #15]
                break;
 800d030:	e000      	b.n	800d034 <uxr_deserialize_OBJK_RepresentationRefAndXMLFormats+0x88>
        }
    }
 800d032:	bf00      	nop
    return ret;
 800d034:	7bfb      	ldrb	r3, [r7, #15]
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <uxr_serialize_OBJK_RepresentationBinAndXMLFormats>:

bool uxr_serialize_OBJK_RepresentationBinAndXMLFormats(
        ucdrBuffer* buffer,
        const OBJK_RepresentationBinAndXMLFormats* input)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b084      	sub	sp, #16
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
 800d046:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d048:	2301      	movs	r3, #1
 800d04a:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint8_t(buffer, input->format);
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	4619      	mov	r1, r3
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f7fd fba4 	bl	800a7a0 <ucdr_serialize_uint8_t>
 800d058:	4603      	mov	r3, r0
 800d05a:	461a      	mov	r2, r3
 800d05c:	7bfb      	ldrb	r3, [r7, #15]
 800d05e:	4013      	ands	r3, r2
 800d060:	2b00      	cmp	r3, #0
 800d062:	bf14      	ite	ne
 800d064:	2301      	movne	r3, #1
 800d066:	2300      	moveq	r3, #0
 800d068:	73fb      	strb	r3, [r7, #15]
    if (ret)
 800d06a:	7bfb      	ldrb	r3, [r7, #15]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d025      	beq.n	800d0bc <uxr_serialize_OBJK_RepresentationBinAndXMLFormats+0x7e>
    {
        switch (input->format)
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	2b02      	cmp	r3, #2
 800d076:	d011      	beq.n	800d09c <uxr_serialize_OBJK_RepresentationBinAndXMLFormats+0x5e>
 800d078:	2b03      	cmp	r3, #3
 800d07a:	d121      	bne.n	800d0c0 <uxr_serialize_OBJK_RepresentationBinAndXMLFormats+0x82>
        {
            case DDS_XRCE_REPRESENTATION_IN_BINARY:
                ret &= uxr_serialize_BinarySequence_t(buffer, &input->_.binary_representation);
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	3304      	adds	r3, #4
 800d080:	4619      	mov	r1, r3
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f7ff face 	bl	800c624 <uxr_serialize_BinarySequence_t>
 800d088:	4603      	mov	r3, r0
 800d08a:	461a      	mov	r2, r3
 800d08c:	7bfb      	ldrb	r3, [r7, #15]
 800d08e:	4013      	ands	r3, r2
 800d090:	2b00      	cmp	r3, #0
 800d092:	bf14      	ite	ne
 800d094:	2301      	movne	r3, #1
 800d096:	2300      	moveq	r3, #0
 800d098:	73fb      	strb	r3, [r7, #15]
                break;
 800d09a:	e012      	b.n	800d0c2 <uxr_serialize_OBJK_RepresentationBinAndXMLFormats+0x84>
            case DDS_XRCE_REPRESENTATION_AS_XML_STRING:
                ret &= ucdr_serialize_string(buffer, input->_.string_represenatation);
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f7ff f9ea 	bl	800c47c <ucdr_serialize_string>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	7bfb      	ldrb	r3, [r7, #15]
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	bf14      	ite	ne
 800d0b4:	2301      	movne	r3, #1
 800d0b6:	2300      	moveq	r3, #0
 800d0b8:	73fb      	strb	r3, [r7, #15]
                break;
 800d0ba:	e002      	b.n	800d0c2 <uxr_serialize_OBJK_RepresentationBinAndXMLFormats+0x84>
            default:
                break;
        }
    }
 800d0bc:	bf00      	nop
 800d0be:	e000      	b.n	800d0c2 <uxr_serialize_OBJK_RepresentationBinAndXMLFormats+0x84>
                break;
 800d0c0:	bf00      	nop
    return ret;
 800d0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3710      	adds	r7, #16
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <uxr_deserialize_OBJK_RepresentationBinAndXMLFormats>:

bool uxr_deserialize_OBJK_RepresentationBinAndXMLFormats(
        ucdrBuffer* buffer,
        OBJK_RepresentationBinAndXMLFormats* output)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_uint8_t(buffer, &output->format);
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	4619      	mov	r1, r3
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f7fd fb8d 	bl	800a7fe <ucdr_deserialize_uint8_t>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ea:	4013      	ands	r3, r2
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	bf14      	ite	ne
 800d0f0:	2301      	movne	r3, #1
 800d0f2:	2300      	moveq	r3, #0
 800d0f4:	73fb      	strb	r3, [r7, #15]
    if (ret)
 800d0f6:	7bfb      	ldrb	r3, [r7, #15]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d027      	beq.n	800d14c <uxr_deserialize_OBJK_RepresentationBinAndXMLFormats+0x80>
    {
        switch (output->format)
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	2b02      	cmp	r3, #2
 800d102:	d011      	beq.n	800d128 <uxr_deserialize_OBJK_RepresentationBinAndXMLFormats+0x5c>
 800d104:	2b03      	cmp	r3, #3
 800d106:	d123      	bne.n	800d150 <uxr_deserialize_OBJK_RepresentationBinAndXMLFormats+0x84>
        {
            case DDS_XRCE_REPRESENTATION_IN_BINARY:
                ret &= uxr_deserialize_BinarySequence_t(buffer, &output->_.binary_representation);
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	3304      	adds	r3, #4
 800d10c:	4619      	mov	r1, r3
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f7ff fa9a 	bl	800c648 <uxr_deserialize_BinarySequence_t>
 800d114:	4603      	mov	r3, r0
 800d116:	461a      	mov	r2, r3
 800d118:	7bfb      	ldrb	r3, [r7, #15]
 800d11a:	4013      	ands	r3, r2
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	bf14      	ite	ne
 800d120:	2301      	movne	r3, #1
 800d122:	2300      	moveq	r3, #0
 800d124:	73fb      	strb	r3, [r7, #15]
                break;
 800d126:	e014      	b.n	800d152 <uxr_deserialize_OBJK_RepresentationBinAndXMLFormats+0x86>
            case DDS_XRCE_REPRESENTATION_AS_XML_STRING:
                ret &= ucdr_deserialize_string(buffer, output->_.string_represenatation, UXR_STRING_SIZE_MAX);
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d130:	4619      	mov	r1, r3
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f7ff f9b6 	bl	800c4a4 <ucdr_deserialize_string>
 800d138:	4603      	mov	r3, r0
 800d13a:	461a      	mov	r2, r3
 800d13c:	7bfb      	ldrb	r3, [r7, #15]
 800d13e:	4013      	ands	r3, r2
 800d140:	2b00      	cmp	r3, #0
 800d142:	bf14      	ite	ne
 800d144:	2301      	movne	r3, #1
 800d146:	2300      	moveq	r3, #0
 800d148:	73fb      	strb	r3, [r7, #15]
                break;
 800d14a:	e002      	b.n	800d152 <uxr_deserialize_OBJK_RepresentationBinAndXMLFormats+0x86>
            default:
                break;
        }
    }
 800d14c:	bf00      	nop
 800d14e:	e000      	b.n	800d152 <uxr_deserialize_OBJK_RepresentationBinAndXMLFormats+0x86>
                break;
 800d150:	bf00      	nop
    return ret;
 800d152:	7bfb      	ldrb	r3, [r7, #15]
}
 800d154:	4618      	mov	r0, r3
 800d156:	3710      	adds	r7, #16
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <uxr_serialize_OBJK_RepresentationRefAndXML_Base>:

bool uxr_serialize_OBJK_RepresentationRefAndXML_Base(
        ucdrBuffer* buffer,
        const OBJK_RepresentationRefAndXML_Base* input)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d166:	2301      	movs	r3, #1
 800d168:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_OBJK_RepresentationRefAndXMLFormats(buffer, &input->representation);
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	4619      	mov	r1, r3
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7ff fed6 	bl	800cf20 <uxr_serialize_OBJK_RepresentationRefAndXMLFormats>
 800d174:	4603      	mov	r3, r0
 800d176:	461a      	mov	r2, r3
 800d178:	7bfb      	ldrb	r3, [r7, #15]
 800d17a:	4013      	ands	r3, r2
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	bf14      	ite	ne
 800d180:	2301      	movne	r3, #1
 800d182:	2300      	moveq	r3, #0
 800d184:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d186:	7bfb      	ldrb	r3, [r7, #15]
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3710      	adds	r7, #16
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <uxr_deserialize_OBJK_RepresentationRefAndXML_Base>:

bool uxr_deserialize_OBJK_RepresentationRefAndXML_Base(
        ucdrBuffer* buffer,
        OBJK_RepresentationRefAndXML_Base* output)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d19a:	2301      	movs	r3, #1
 800d19c:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_OBJK_RepresentationRefAndXMLFormats(buffer, &output->representation);
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f7ff ff02 	bl	800cfac <uxr_deserialize_OBJK_RepresentationRefAndXMLFormats>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	7bfb      	ldrb	r3, [r7, #15]
 800d1ae:	4013      	ands	r3, r2
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	bf14      	ite	ne
 800d1b4:	2301      	movne	r3, #1
 800d1b6:	2300      	moveq	r3, #0
 800d1b8:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3710      	adds	r7, #16
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <uxr_serialize_OBJK_RepresentationBinAndXML_Base>:

bool uxr_serialize_OBJK_RepresentationBinAndXML_Base(
        ucdrBuffer* buffer,
        const OBJK_RepresentationBinAndXML_Base* input)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_OBJK_RepresentationBinAndXMLFormats(buffer, &input->representation);
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7ff ff31 	bl	800d03e <uxr_serialize_OBJK_RepresentationBinAndXMLFormats>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	461a      	mov	r2, r3
 800d1e0:	7bfb      	ldrb	r3, [r7, #15]
 800d1e2:	4013      	ands	r3, r2
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	bf14      	ite	ne
 800d1e8:	2301      	movne	r3, #1
 800d1ea:	2300      	moveq	r3, #0
 800d1ec:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3710      	adds	r7, #16
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <uxr_deserialize_OBJK_RepresentationBinAndXML_Base>:

bool uxr_deserialize_OBJK_RepresentationBinAndXML_Base(
        ucdrBuffer* buffer,
        OBJK_RepresentationBinAndXML_Base* output)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b084      	sub	sp, #16
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d202:	2301      	movs	r3, #1
 800d204:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_OBJK_RepresentationBinAndXMLFormats(buffer, &output->representation);
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	4619      	mov	r1, r3
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7ff ff5e 	bl	800d0cc <uxr_deserialize_OBJK_RepresentationBinAndXMLFormats>
 800d210:	4603      	mov	r3, r0
 800d212:	461a      	mov	r2, r3
 800d214:	7bfb      	ldrb	r3, [r7, #15]
 800d216:	4013      	ands	r3, r2
 800d218:	2b00      	cmp	r3, #0
 800d21a:	bf14      	ite	ne
 800d21c:	2301      	movne	r3, #1
 800d21e:	2300      	moveq	r3, #0
 800d220:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d222:	7bfb      	ldrb	r3, [r7, #15]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3710      	adds	r7, #16
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <uxr_serialize_OBJK_Representation3_Base>:

bool uxr_serialize_OBJK_Representation3_Base(
        ucdrBuffer* buffer,
        const OBJK_Representation3_Base* input)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d236:	2301      	movs	r3, #1
 800d238:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_OBJK_Representation3Formats(buffer, &input->representation);
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	4619      	mov	r1, r3
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7ff fdb3 	bl	800cdaa <uxr_serialize_OBJK_Representation3Formats>
 800d244:	4603      	mov	r3, r0
 800d246:	461a      	mov	r2, r3
 800d248:	7bfb      	ldrb	r3, [r7, #15]
 800d24a:	4013      	ands	r3, r2
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	bf14      	ite	ne
 800d250:	2301      	movne	r3, #1
 800d252:	2300      	moveq	r3, #0
 800d254:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d256:	7bfb      	ldrb	r3, [r7, #15]
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <uxr_deserialize_OBJK_Representation3_Base>:

bool uxr_deserialize_OBJK_Representation3_Base(
        ucdrBuffer* buffer,
        OBJK_Representation3_Base* output)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d26a:	2301      	movs	r3, #1
 800d26c:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_OBJK_Representation3Formats(buffer, &output->representation);
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	4619      	mov	r1, r3
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f7ff fdf5 	bl	800ce62 <uxr_deserialize_OBJK_Representation3Formats>
 800d278:	4603      	mov	r3, r0
 800d27a:	461a      	mov	r2, r3
 800d27c:	7bfb      	ldrb	r3, [r7, #15]
 800d27e:	4013      	ands	r3, r2
 800d280:	2b00      	cmp	r3, #0
 800d282:	bf14      	ite	ne
 800d284:	2301      	movne	r3, #1
 800d286:	2300      	moveq	r3, #0
 800d288:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <uxr_serialize_OBJK_QOSPROFILE_Representation>:

bool uxr_serialize_OBJK_QOSPROFILE_Representation(
        ucdrBuffer* buffer,
        const OBJK_QOSPROFILE_Representation* input)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_OBJK_RepresentationRefAndXML_Base(buffer, &input->base);
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f7ff ff58 	bl	800d15c <uxr_serialize_OBJK_RepresentationRefAndXML_Base>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	7bfb      	ldrb	r3, [r7, #15]
 800d2b2:	4013      	ands	r3, r2
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	bf14      	ite	ne
 800d2b8:	2301      	movne	r3, #1
 800d2ba:	2300      	moveq	r3, #0
 800d2bc:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3710      	adds	r7, #16
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <uxr_deserialize_OBJK_QOSPROFILE_Representation>:

bool uxr_deserialize_OBJK_QOSPROFILE_Representation(
        ucdrBuffer* buffer,
        OBJK_QOSPROFILE_Representation* output)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_OBJK_RepresentationRefAndXML_Base(buffer, &output->base);
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	4619      	mov	r1, r3
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f7ff ff58 	bl	800d190 <uxr_deserialize_OBJK_RepresentationRefAndXML_Base>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	7bfb      	ldrb	r3, [r7, #15]
 800d2e6:	4013      	ands	r3, r2
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	bf14      	ite	ne
 800d2ec:	2301      	movne	r3, #1
 800d2ee:	2300      	moveq	r3, #0
 800d2f0:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3710      	adds	r7, #16
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <uxr_serialize_OBJK_TYPE_Representation>:

bool uxr_serialize_OBJK_TYPE_Representation(
        ucdrBuffer* buffer,
        const OBJK_TYPE_Representation* input)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d306:	2301      	movs	r3, #1
 800d308:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_OBJK_RepresentationRefAndXML_Base(buffer, &input->base);
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	4619      	mov	r1, r3
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f7ff ff24 	bl	800d15c <uxr_serialize_OBJK_RepresentationRefAndXML_Base>
 800d314:	4603      	mov	r3, r0
 800d316:	461a      	mov	r2, r3
 800d318:	7bfb      	ldrb	r3, [r7, #15]
 800d31a:	4013      	ands	r3, r2
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	bf14      	ite	ne
 800d320:	2301      	movne	r3, #1
 800d322:	2300      	moveq	r3, #0
 800d324:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d326:	7bfb      	ldrb	r3, [r7, #15]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3710      	adds	r7, #16
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <uxr_deserialize_OBJK_TYPE_Representation>:

bool uxr_deserialize_OBJK_TYPE_Representation(
        ucdrBuffer* buffer,
        OBJK_TYPE_Representation* output)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d33a:	2301      	movs	r3, #1
 800d33c:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_OBJK_RepresentationRefAndXML_Base(buffer, &output->base);
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	4619      	mov	r1, r3
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f7ff ff24 	bl	800d190 <uxr_deserialize_OBJK_RepresentationRefAndXML_Base>
 800d348:	4603      	mov	r3, r0
 800d34a:	461a      	mov	r2, r3
 800d34c:	7bfb      	ldrb	r3, [r7, #15]
 800d34e:	4013      	ands	r3, r2
 800d350:	2b00      	cmp	r3, #0
 800d352:	bf14      	ite	ne
 800d354:	2301      	movne	r3, #1
 800d356:	2300      	moveq	r3, #0
 800d358:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <uxr_serialize_OBJK_APPLICATION_Representation>:
}

bool uxr_serialize_OBJK_APPLICATION_Representation(
        ucdrBuffer* buffer,
        const OBJK_APPLICATION_Representation* input)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d36e:	2301      	movs	r3, #1
 800d370:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_OBJK_RepresentationRefAndXML_Base(buffer, &input->base);
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	4619      	mov	r1, r3
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f7ff fef0 	bl	800d15c <uxr_serialize_OBJK_RepresentationRefAndXML_Base>
 800d37c:	4603      	mov	r3, r0
 800d37e:	461a      	mov	r2, r3
 800d380:	7bfb      	ldrb	r3, [r7, #15]
 800d382:	4013      	ands	r3, r2
 800d384:	2b00      	cmp	r3, #0
 800d386:	bf14      	ite	ne
 800d388:	2301      	movne	r3, #1
 800d38a:	2300      	moveq	r3, #0
 800d38c:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d38e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d390:	4618      	mov	r0, r3
 800d392:	3710      	adds	r7, #16
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <uxr_deserialize_OBJK_APPLICATION_Representation>:

bool uxr_deserialize_OBJK_APPLICATION_Representation(
        ucdrBuffer* buffer,
        OBJK_APPLICATION_Representation* output)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_OBJK_RepresentationRefAndXML_Base(buffer, &output->base);
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f7ff fef0 	bl	800d190 <uxr_deserialize_OBJK_RepresentationRefAndXML_Base>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	7bfb      	ldrb	r3, [r7, #15]
 800d3b6:	4013      	ands	r3, r2
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	bf14      	ite	ne
 800d3bc:	2301      	movne	r3, #1
 800d3be:	2300      	moveq	r3, #0
 800d3c0:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3710      	adds	r7, #16
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <uxr_serialize_OBJK_PUBLISHER_Representation>:

bool uxr_serialize_OBJK_PUBLISHER_Representation(
        ucdrBuffer* buffer,
        const OBJK_PUBLISHER_Representation* input)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_OBJK_RepresentationBinAndXML_Base(buffer, &input->base);
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	4619      	mov	r1, r3
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f7ff fef0 	bl	800d1c4 <uxr_serialize_OBJK_RepresentationBinAndXML_Base>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ea:	4013      	ands	r3, r2
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	bf14      	ite	ne
 800d3f0:	2301      	movne	r3, #1
 800d3f2:	2300      	moveq	r3, #0
 800d3f4:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_ObjectId(buffer, &input->participant_id);
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f7ff f995 	bl	800c72e <uxr_serialize_ObjectId>
 800d404:	4603      	mov	r3, r0
 800d406:	461a      	mov	r2, r3
 800d408:	7bfb      	ldrb	r3, [r7, #15]
 800d40a:	4013      	ands	r3, r2
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	bf14      	ite	ne
 800d410:	2301      	movne	r3, #1
 800d412:	2300      	moveq	r3, #0
 800d414:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d416:	7bfb      	ldrb	r3, [r7, #15]
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <uxr_deserialize_OBJK_PUBLISHER_Representation>:

bool uxr_deserialize_OBJK_PUBLISHER_Representation(
        ucdrBuffer* buffer,
        OBJK_PUBLISHER_Representation* output)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d42a:	2301      	movs	r3, #1
 800d42c:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_OBJK_RepresentationBinAndXML_Base(buffer, &output->base);
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	4619      	mov	r1, r3
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f7ff fee0 	bl	800d1f8 <uxr_deserialize_OBJK_RepresentationBinAndXML_Base>
 800d438:	4603      	mov	r3, r0
 800d43a:	461a      	mov	r2, r3
 800d43c:	7bfb      	ldrb	r3, [r7, #15]
 800d43e:	4013      	ands	r3, r2
 800d440:	2b00      	cmp	r3, #0
 800d442:	bf14      	ite	ne
 800d444:	2301      	movne	r3, #1
 800d446:	2300      	moveq	r3, #0
 800d448:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_ObjectId(buffer, &output->participant_id);
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d450:	4619      	mov	r1, r3
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f7ff f986 	bl	800c764 <uxr_deserialize_ObjectId>
 800d458:	4603      	mov	r3, r0
 800d45a:	461a      	mov	r2, r3
 800d45c:	7bfb      	ldrb	r3, [r7, #15]
 800d45e:	4013      	ands	r3, r2
 800d460:	2b00      	cmp	r3, #0
 800d462:	bf14      	ite	ne
 800d464:	2301      	movne	r3, #1
 800d466:	2300      	moveq	r3, #0
 800d468:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <uxr_serialize_OBJK_SUBSCRIBER_Representation>:

bool uxr_serialize_OBJK_SUBSCRIBER_Representation(
        ucdrBuffer* buffer,
        const OBJK_SUBSCRIBER_Representation* input)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d47e:	2301      	movs	r3, #1
 800d480:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_OBJK_RepresentationBinAndXML_Base(buffer, &input->base);
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	4619      	mov	r1, r3
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f7ff fe9c 	bl	800d1c4 <uxr_serialize_OBJK_RepresentationBinAndXML_Base>
 800d48c:	4603      	mov	r3, r0
 800d48e:	461a      	mov	r2, r3
 800d490:	7bfb      	ldrb	r3, [r7, #15]
 800d492:	4013      	ands	r3, r2
 800d494:	2b00      	cmp	r3, #0
 800d496:	bf14      	ite	ne
 800d498:	2301      	movne	r3, #1
 800d49a:	2300      	moveq	r3, #0
 800d49c:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_ObjectId(buffer, &input->participant_id);
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f7ff f941 	bl	800c72e <uxr_serialize_ObjectId>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	7bfb      	ldrb	r3, [r7, #15]
 800d4b2:	4013      	ands	r3, r2
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	bf14      	ite	ne
 800d4b8:	2301      	movne	r3, #1
 800d4ba:	2300      	moveq	r3, #0
 800d4bc:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d4be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3710      	adds	r7, #16
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <uxr_deserialize_OBJK_SUBSCRIBER_Representation>:

bool uxr_deserialize_OBJK_SUBSCRIBER_Representation(
        ucdrBuffer* buffer,
        OBJK_SUBSCRIBER_Representation* output)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_OBJK_RepresentationBinAndXML_Base(buffer, &output->base);
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	4619      	mov	r1, r3
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7ff fe8c 	bl	800d1f8 <uxr_deserialize_OBJK_RepresentationBinAndXML_Base>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	7bfb      	ldrb	r3, [r7, #15]
 800d4e6:	4013      	ands	r3, r2
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	bf14      	ite	ne
 800d4ec:	2301      	movne	r3, #1
 800d4ee:	2300      	moveq	r3, #0
 800d4f0:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_ObjectId(buffer, &output->participant_id);
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f7ff f932 	bl	800c764 <uxr_deserialize_ObjectId>
 800d500:	4603      	mov	r3, r0
 800d502:	461a      	mov	r2, r3
 800d504:	7bfb      	ldrb	r3, [r7, #15]
 800d506:	4013      	ands	r3, r2
 800d508:	2b00      	cmp	r3, #0
 800d50a:	bf14      	ite	ne
 800d50c:	2301      	movne	r3, #1
 800d50e:	2300      	moveq	r3, #0
 800d510:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d512:	7bfb      	ldrb	r3, [r7, #15]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <uxr_serialize_DATAWRITER_Representation>:

bool uxr_serialize_DATAWRITER_Representation(
        ucdrBuffer* buffer,
        const DATAWRITER_Representation* input)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d526:	2301      	movs	r3, #1
 800d528:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_OBJK_Representation3_Base(buffer, &input->base);
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	4619      	mov	r1, r3
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f7ff fe7c 	bl	800d22c <uxr_serialize_OBJK_Representation3_Base>
 800d534:	4603      	mov	r3, r0
 800d536:	461a      	mov	r2, r3
 800d538:	7bfb      	ldrb	r3, [r7, #15]
 800d53a:	4013      	ands	r3, r2
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	bf14      	ite	ne
 800d540:	2301      	movne	r3, #1
 800d542:	2300      	moveq	r3, #0
 800d544:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_ObjectId(buffer, &input->publisher_id);
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d54c:	4619      	mov	r1, r3
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f7ff f8ed 	bl	800c72e <uxr_serialize_ObjectId>
 800d554:	4603      	mov	r3, r0
 800d556:	461a      	mov	r2, r3
 800d558:	7bfb      	ldrb	r3, [r7, #15]
 800d55a:	4013      	ands	r3, r2
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	bf14      	ite	ne
 800d560:	2301      	movne	r3, #1
 800d562:	2300      	moveq	r3, #0
 800d564:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d566:	7bfb      	ldrb	r3, [r7, #15]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3710      	adds	r7, #16
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <uxr_deserialize_DATAWRITER_Representation>:

bool uxr_deserialize_DATAWRITER_Representation(
        ucdrBuffer* buffer,
        DATAWRITER_Representation* output)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d57a:	2301      	movs	r3, #1
 800d57c:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_OBJK_Representation3_Base(buffer, &output->base);
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	4619      	mov	r1, r3
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f7ff fe6c 	bl	800d260 <uxr_deserialize_OBJK_Representation3_Base>
 800d588:	4603      	mov	r3, r0
 800d58a:	461a      	mov	r2, r3
 800d58c:	7bfb      	ldrb	r3, [r7, #15]
 800d58e:	4013      	ands	r3, r2
 800d590:	2b00      	cmp	r3, #0
 800d592:	bf14      	ite	ne
 800d594:	2301      	movne	r3, #1
 800d596:	2300      	moveq	r3, #0
 800d598:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_ObjectId(buffer, &output->publisher_id);
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f7ff f8de 	bl	800c764 <uxr_deserialize_ObjectId>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	7bfb      	ldrb	r3, [r7, #15]
 800d5ae:	4013      	ands	r3, r2
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	bf14      	ite	ne
 800d5b4:	2301      	movne	r3, #1
 800d5b6:	2300      	moveq	r3, #0
 800d5b8:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d5ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3710      	adds	r7, #16
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <uxr_serialize_DATAREADER_Representation>:

bool uxr_serialize_DATAREADER_Representation(
        ucdrBuffer* buffer,
        const DATAREADER_Representation* input)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_OBJK_Representation3_Base(buffer, &input->base);
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f7ff fe28 	bl	800d22c <uxr_serialize_OBJK_Representation3_Base>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	461a      	mov	r2, r3
 800d5e0:	7bfb      	ldrb	r3, [r7, #15]
 800d5e2:	4013      	ands	r3, r2
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	bf14      	ite	ne
 800d5e8:	2301      	movne	r3, #1
 800d5ea:	2300      	moveq	r3, #0
 800d5ec:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_ObjectId(buffer, &input->subscriber_id);
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7ff f899 	bl	800c72e <uxr_serialize_ObjectId>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	461a      	mov	r2, r3
 800d600:	7bfb      	ldrb	r3, [r7, #15]
 800d602:	4013      	ands	r3, r2
 800d604:	2b00      	cmp	r3, #0
 800d606:	bf14      	ite	ne
 800d608:	2301      	movne	r3, #1
 800d60a:	2300      	moveq	r3, #0
 800d60c:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3710      	adds	r7, #16
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <uxr_deserialize_DATAREADER_Representation>:

bool uxr_deserialize_DATAREADER_Representation(
        ucdrBuffer* buffer,
        DATAREADER_Representation* output)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d622:	2301      	movs	r3, #1
 800d624:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_OBJK_Representation3_Base(buffer, &output->base);
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	4619      	mov	r1, r3
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7ff fe18 	bl	800d260 <uxr_deserialize_OBJK_Representation3_Base>
 800d630:	4603      	mov	r3, r0
 800d632:	461a      	mov	r2, r3
 800d634:	7bfb      	ldrb	r3, [r7, #15]
 800d636:	4013      	ands	r3, r2
 800d638:	2b00      	cmp	r3, #0
 800d63a:	bf14      	ite	ne
 800d63c:	2301      	movne	r3, #1
 800d63e:	2300      	moveq	r3, #0
 800d640:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_ObjectId(buffer, &output->subscriber_id);
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d648:	4619      	mov	r1, r3
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f7ff f88a 	bl	800c764 <uxr_deserialize_ObjectId>
 800d650:	4603      	mov	r3, r0
 800d652:	461a      	mov	r2, r3
 800d654:	7bfb      	ldrb	r3, [r7, #15]
 800d656:	4013      	ands	r3, r2
 800d658:	2b00      	cmp	r3, #0
 800d65a:	bf14      	ite	ne
 800d65c:	2301      	movne	r3, #1
 800d65e:	2300      	moveq	r3, #0
 800d660:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d662:	7bfb      	ldrb	r3, [r7, #15]
}
 800d664:	4618      	mov	r0, r3
 800d666:	3710      	adds	r7, #16
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <uxr_serialize_OBJK_PARTICIPANT_Representation>:

bool uxr_serialize_OBJK_PARTICIPANT_Representation(
        ucdrBuffer* buffer,
        const OBJK_PARTICIPANT_Representation* input)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d676:	2301      	movs	r3, #1
 800d678:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_OBJK_Representation3_Base(buffer, &input->base);
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	4619      	mov	r1, r3
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f7ff fdd4 	bl	800d22c <uxr_serialize_OBJK_Representation3_Base>
 800d684:	4603      	mov	r3, r0
 800d686:	461a      	mov	r2, r3
 800d688:	7bfb      	ldrb	r3, [r7, #15]
 800d68a:	4013      	ands	r3, r2
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	bf14      	ite	ne
 800d690:	2301      	movne	r3, #1
 800d692:	2300      	moveq	r3, #0
 800d694:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_int16_t(buffer, input->domain_id);
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 800d69c:	4619      	mov	r1, r3
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f7fe fa35 	bl	800bb0e <ucdr_serialize_int16_t>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	7bfb      	ldrb	r3, [r7, #15]
 800d6aa:	4013      	ands	r3, r2
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	bf14      	ite	ne
 800d6b0:	2301      	movne	r3, #1
 800d6b2:	2300      	moveq	r3, #0
 800d6b4:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3710      	adds	r7, #16
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <uxr_deserialize_OBJK_PARTICIPANT_Representation>:

bool uxr_deserialize_OBJK_PARTICIPANT_Representation(
        ucdrBuffer* buffer,
        OBJK_PARTICIPANT_Representation* output)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_OBJK_Representation3_Base(buffer, &output->base);
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f7ff fdc4 	bl	800d260 <uxr_deserialize_OBJK_Representation3_Base>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	461a      	mov	r2, r3
 800d6dc:	7bfb      	ldrb	r3, [r7, #15]
 800d6de:	4013      	ands	r3, r2
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	bf14      	ite	ne
 800d6e4:	2301      	movne	r3, #1
 800d6e6:	2300      	moveq	r3, #0
 800d6e8:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_int16_t(buffer, &output->domain_id);
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7fe faff 	bl	800bcf6 <ucdr_deserialize_int16_t>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	7bfb      	ldrb	r3, [r7, #15]
 800d6fe:	4013      	ands	r3, r2
 800d700:	2b00      	cmp	r3, #0
 800d702:	bf14      	ite	ne
 800d704:	2301      	movne	r3, #1
 800d706:	2300      	moveq	r3, #0
 800d708:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <uxr_serialize_OBJK_TOPIC_Representation>:

bool uxr_serialize_OBJK_TOPIC_Representation(
        ucdrBuffer* buffer,
        const OBJK_TOPIC_Representation* input)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d71e:	2301      	movs	r3, #1
 800d720:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_OBJK_Representation3_Base(buffer, &input->base);
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	4619      	mov	r1, r3
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f7ff fd80 	bl	800d22c <uxr_serialize_OBJK_Representation3_Base>
 800d72c:	4603      	mov	r3, r0
 800d72e:	461a      	mov	r2, r3
 800d730:	7bfb      	ldrb	r3, [r7, #15]
 800d732:	4013      	ands	r3, r2
 800d734:	2b00      	cmp	r3, #0
 800d736:	bf14      	ite	ne
 800d738:	2301      	movne	r3, #1
 800d73a:	2300      	moveq	r3, #0
 800d73c:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_ObjectId(buffer, &input->participant_id);
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d744:	4619      	mov	r1, r3
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7fe fff1 	bl	800c72e <uxr_serialize_ObjectId>
 800d74c:	4603      	mov	r3, r0
 800d74e:	461a      	mov	r2, r3
 800d750:	7bfb      	ldrb	r3, [r7, #15]
 800d752:	4013      	ands	r3, r2
 800d754:	2b00      	cmp	r3, #0
 800d756:	bf14      	ite	ne
 800d758:	2301      	movne	r3, #1
 800d75a:	2300      	moveq	r3, #0
 800d75c:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d760:	4618      	mov	r0, r3
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <uxr_deserialize_OBJK_TOPIC_Representation>:

bool uxr_deserialize_OBJK_TOPIC_Representation(
        ucdrBuffer* buffer,
        OBJK_TOPIC_Representation* output)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d772:	2301      	movs	r3, #1
 800d774:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_OBJK_Representation3_Base(buffer, &output->base);
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	4619      	mov	r1, r3
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f7ff fd70 	bl	800d260 <uxr_deserialize_OBJK_Representation3_Base>
 800d780:	4603      	mov	r3, r0
 800d782:	461a      	mov	r2, r3
 800d784:	7bfb      	ldrb	r3, [r7, #15]
 800d786:	4013      	ands	r3, r2
 800d788:	2b00      	cmp	r3, #0
 800d78a:	bf14      	ite	ne
 800d78c:	2301      	movne	r3, #1
 800d78e:	2300      	moveq	r3, #0
 800d790:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_ObjectId(buffer, &output->participant_id);
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d798:	4619      	mov	r1, r3
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7fe ffe2 	bl	800c764 <uxr_deserialize_ObjectId>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	7bfb      	ldrb	r3, [r7, #15]
 800d7a6:	4013      	ands	r3, r2
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	bf14      	ite	ne
 800d7ac:	2301      	movne	r3, #1
 800d7ae:	2300      	moveq	r3, #0
 800d7b0:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3710      	adds	r7, #16
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <uxr_serialize_OBJK_REQUESTER_Representation>:

bool uxr_serialize_OBJK_REQUESTER_Representation(
        ucdrBuffer* buffer,
        const OBJK_REQUESTER_Representation* input)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b084      	sub	sp, #16
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_OBJK_Representation3_Base(buffer, &input->base);
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f7ff fd2c 	bl	800d22c <uxr_serialize_OBJK_Representation3_Base>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
 800d7da:	4013      	ands	r3, r2
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	bf14      	ite	ne
 800d7e0:	2301      	movne	r3, #1
 800d7e2:	2300      	moveq	r3, #0
 800d7e4:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_ObjectId(buffer, &input->participant_id);
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7fe ff9d 	bl	800c72e <uxr_serialize_ObjectId>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	7bfb      	ldrb	r3, [r7, #15]
 800d7fa:	4013      	ands	r3, r2
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	bf14      	ite	ne
 800d800:	2301      	movne	r3, #1
 800d802:	2300      	moveq	r3, #0
 800d804:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d806:	7bfb      	ldrb	r3, [r7, #15]
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <uxr_deserialize_OBJK_REQUESTER_Representation>:

bool uxr_deserialize_OBJK_REQUESTER_Representation(
        ucdrBuffer* buffer,
        OBJK_REQUESTER_Representation* output)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d81a:	2301      	movs	r3, #1
 800d81c:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_OBJK_Representation3_Base(buffer, &output->base);
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	4619      	mov	r1, r3
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7ff fd1c 	bl	800d260 <uxr_deserialize_OBJK_Representation3_Base>
 800d828:	4603      	mov	r3, r0
 800d82a:	461a      	mov	r2, r3
 800d82c:	7bfb      	ldrb	r3, [r7, #15]
 800d82e:	4013      	ands	r3, r2
 800d830:	2b00      	cmp	r3, #0
 800d832:	bf14      	ite	ne
 800d834:	2301      	movne	r3, #1
 800d836:	2300      	moveq	r3, #0
 800d838:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_ObjectId(buffer, &output->participant_id);
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d840:	4619      	mov	r1, r3
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f7fe ff8e 	bl	800c764 <uxr_deserialize_ObjectId>
 800d848:	4603      	mov	r3, r0
 800d84a:	461a      	mov	r2, r3
 800d84c:	7bfb      	ldrb	r3, [r7, #15]
 800d84e:	4013      	ands	r3, r2
 800d850:	2b00      	cmp	r3, #0
 800d852:	bf14      	ite	ne
 800d854:	2301      	movne	r3, #1
 800d856:	2300      	moveq	r3, #0
 800d858:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3710      	adds	r7, #16
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}

0800d864 <uxr_serialize_OBJK_REPLIER_Representation>:

bool uxr_serialize_OBJK_REPLIER_Representation(
        ucdrBuffer* buffer,
        const OBJK_REPLIER_Representation* input)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d86e:	2301      	movs	r3, #1
 800d870:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_OBJK_Representation3_Base(buffer, &input->base);
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	4619      	mov	r1, r3
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7ff fcd8 	bl	800d22c <uxr_serialize_OBJK_Representation3_Base>
 800d87c:	4603      	mov	r3, r0
 800d87e:	461a      	mov	r2, r3
 800d880:	7bfb      	ldrb	r3, [r7, #15]
 800d882:	4013      	ands	r3, r2
 800d884:	2b00      	cmp	r3, #0
 800d886:	bf14      	ite	ne
 800d888:	2301      	movne	r3, #1
 800d88a:	2300      	moveq	r3, #0
 800d88c:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_ObjectId(buffer, &input->participant_id);
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d894:	4619      	mov	r1, r3
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f7fe ff49 	bl	800c72e <uxr_serialize_ObjectId>
 800d89c:	4603      	mov	r3, r0
 800d89e:	461a      	mov	r2, r3
 800d8a0:	7bfb      	ldrb	r3, [r7, #15]
 800d8a2:	4013      	ands	r3, r2
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	bf14      	ite	ne
 800d8a8:	2301      	movne	r3, #1
 800d8aa:	2300      	moveq	r3, #0
 800d8ac:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <uxr_deserialize_OBJK_REPLIER_Representation>:

bool uxr_deserialize_OBJK_REPLIER_Representation(
        ucdrBuffer* buffer,
        OBJK_REPLIER_Representation* output)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_OBJK_Representation3_Base(buffer, &output->base);
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f7ff fcc8 	bl	800d260 <uxr_deserialize_OBJK_Representation3_Base>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
 800d8d6:	4013      	ands	r3, r2
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	bf14      	ite	ne
 800d8dc:	2301      	movne	r3, #1
 800d8de:	2300      	moveq	r3, #0
 800d8e0:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_ObjectId(buffer, &output->participant_id);
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f7fe ff3a 	bl	800c764 <uxr_deserialize_ObjectId>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
 800d8f6:	4013      	ands	r3, r2
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	bf14      	ite	ne
 800d8fc:	2301      	movne	r3, #1
 800d8fe:	2300      	moveq	r3, #0
 800d900:	73fb      	strb	r3, [r7, #15]
    return ret;
 800d902:	7bfb      	ldrb	r3, [r7, #15]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3710      	adds	r7, #16
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <uxr_serialize_OBJK_DomainParticipant_Binary>:

bool uxr_serialize_OBJK_DomainParticipant_Binary(
        ucdrBuffer* buffer,
        const OBJK_DomainParticipant_Binary* input)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d916:	2301      	movs	r3, #1
 800d918:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_bool(buffer, input->optional_domain_reference);
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	4619      	mov	r1, r3
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f7fc feda 	bl	800a6da <ucdr_serialize_bool>
 800d926:	4603      	mov	r3, r0
 800d928:	461a      	mov	r2, r3
 800d92a:	7bfb      	ldrb	r3, [r7, #15]
 800d92c:	4013      	ands	r3, r2
 800d92e:	2b00      	cmp	r3, #0
 800d930:	bf14      	ite	ne
 800d932:	2301      	movne	r3, #1
 800d934:	2300      	moveq	r3, #0
 800d936:	73fb      	strb	r3, [r7, #15]
    if (input->optional_domain_reference == true)
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d00e      	beq.n	800d95e <uxr_serialize_OBJK_DomainParticipant_Binary+0x52>
    {
        ret &= ucdr_serialize_string(buffer, input->domain_reference);
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	4619      	mov	r1, r3
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f7fe fd98 	bl	800c47c <ucdr_serialize_string>
 800d94c:	4603      	mov	r3, r0
 800d94e:	461a      	mov	r2, r3
 800d950:	7bfb      	ldrb	r3, [r7, #15]
 800d952:	4013      	ands	r3, r2
 800d954:	2b00      	cmp	r3, #0
 800d956:	bf14      	ite	ne
 800d958:	2301      	movne	r3, #1
 800d95a:	2300      	moveq	r3, #0
 800d95c:	73fb      	strb	r3, [r7, #15]
    }

    ret &= ucdr_serialize_bool(buffer, input->optional_qos_profile_reference);
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	7a1b      	ldrb	r3, [r3, #8]
 800d962:	4619      	mov	r1, r3
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f7fc feb8 	bl	800a6da <ucdr_serialize_bool>
 800d96a:	4603      	mov	r3, r0
 800d96c:	461a      	mov	r2, r3
 800d96e:	7bfb      	ldrb	r3, [r7, #15]
 800d970:	4013      	ands	r3, r2
 800d972:	2b00      	cmp	r3, #0
 800d974:	bf14      	ite	ne
 800d976:	2301      	movne	r3, #1
 800d978:	2300      	moveq	r3, #0
 800d97a:	73fb      	strb	r3, [r7, #15]
    if (input->optional_qos_profile_reference == true)
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	7a1b      	ldrb	r3, [r3, #8]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d00e      	beq.n	800d9a2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x96>
    {
        ret &= ucdr_serialize_string(buffer, input->qos_profile_reference);
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	4619      	mov	r1, r3
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f7fe fd76 	bl	800c47c <ucdr_serialize_string>
 800d990:	4603      	mov	r3, r0
 800d992:	461a      	mov	r2, r3
 800d994:	7bfb      	ldrb	r3, [r7, #15]
 800d996:	4013      	ands	r3, r2
 800d998:	2b00      	cmp	r3, #0
 800d99a:	bf14      	ite	ne
 800d99c:	2301      	movne	r3, #1
 800d99e:	2300      	moveq	r3, #0
 800d9a0:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800d9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3710      	adds	r7, #16
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <uxr_serialize_OBJK_Topic_Binary>:
}

bool uxr_serialize_OBJK_Topic_Binary(
        ucdrBuffer* buffer,
        const OBJK_Topic_Binary* input)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_string(buffer, input->topic_name);
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4619      	mov	r1, r3
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7fe fd5b 	bl	800c47c <ucdr_serialize_string>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	7bfb      	ldrb	r3, [r7, #15]
 800d9cc:	4013      	ands	r3, r2
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	bf14      	ite	ne
 800d9d2:	2301      	movne	r3, #1
 800d9d4:	2300      	moveq	r3, #0
 800d9d6:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_bool(buffer, input->optional_type_reference);
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	791b      	ldrb	r3, [r3, #4]
 800d9dc:	4619      	mov	r1, r3
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f7fc fe7b 	bl	800a6da <ucdr_serialize_bool>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ea:	4013      	ands	r3, r2
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	bf14      	ite	ne
 800d9f0:	2301      	movne	r3, #1
 800d9f2:	2300      	moveq	r3, #0
 800d9f4:	73fb      	strb	r3, [r7, #15]
    if (input->optional_type_reference == true)
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	791b      	ldrb	r3, [r3, #4]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00e      	beq.n	800da1c <uxr_serialize_OBJK_Topic_Binary+0x70>
    {
        ret &= ucdr_serialize_string(buffer, input->type_reference);
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	4619      	mov	r1, r3
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f7fe fd39 	bl	800c47c <ucdr_serialize_string>
 800da0a:	4603      	mov	r3, r0
 800da0c:	461a      	mov	r2, r3
 800da0e:	7bfb      	ldrb	r3, [r7, #15]
 800da10:	4013      	ands	r3, r2
 800da12:	2b00      	cmp	r3, #0
 800da14:	bf14      	ite	ne
 800da16:	2301      	movne	r3, #1
 800da18:	2300      	moveq	r3, #0
 800da1a:	73fb      	strb	r3, [r7, #15]
    }

    ret &= ucdr_serialize_bool(buffer, input->optional_type_name);
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	7b1b      	ldrb	r3, [r3, #12]
 800da20:	4619      	mov	r1, r3
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f7fc fe59 	bl	800a6da <ucdr_serialize_bool>
 800da28:	4603      	mov	r3, r0
 800da2a:	461a      	mov	r2, r3
 800da2c:	7bfb      	ldrb	r3, [r7, #15]
 800da2e:	4013      	ands	r3, r2
 800da30:	2b00      	cmp	r3, #0
 800da32:	bf14      	ite	ne
 800da34:	2301      	movne	r3, #1
 800da36:	2300      	moveq	r3, #0
 800da38:	73fb      	strb	r3, [r7, #15]
    if (input->optional_type_name == true)
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	7b1b      	ldrb	r3, [r3, #12]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00e      	beq.n	800da60 <uxr_serialize_OBJK_Topic_Binary+0xb4>
    {
        ret &= ucdr_serialize_string(buffer, input->type_name);
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	691b      	ldr	r3, [r3, #16]
 800da46:	4619      	mov	r1, r3
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7fe fd17 	bl	800c47c <ucdr_serialize_string>
 800da4e:	4603      	mov	r3, r0
 800da50:	461a      	mov	r2, r3
 800da52:	7bfb      	ldrb	r3, [r7, #15]
 800da54:	4013      	ands	r3, r2
 800da56:	2b00      	cmp	r3, #0
 800da58:	bf14      	ite	ne
 800da5a:	2301      	movne	r3, #1
 800da5c:	2300      	moveq	r3, #0
 800da5e:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800da60:	7bfb      	ldrb	r3, [r7, #15]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3710      	adds	r7, #16
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <uxr_serialize_OBJK_Publisher_Binary_Qos>:
}

bool uxr_serialize_OBJK_Publisher_Binary_Qos(
        ucdrBuffer* buffer,
        const OBJK_Publisher_Binary_Qos* input)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b084      	sub	sp, #16
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
 800da72:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800da74:	2301      	movs	r3, #1
 800da76:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_bool(buffer, input->optional_partitions);
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	4619      	mov	r1, r3
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7fc fe2b 	bl	800a6da <ucdr_serialize_bool>
 800da84:	4603      	mov	r3, r0
 800da86:	461a      	mov	r2, r3
 800da88:	7bfb      	ldrb	r3, [r7, #15]
 800da8a:	4013      	ands	r3, r2
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	bf14      	ite	ne
 800da90:	2301      	movne	r3, #1
 800da92:	2300      	moveq	r3, #0
 800da94:	73fb      	strb	r3, [r7, #15]
    if (input->optional_partitions == true)
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00e      	beq.n	800dabc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x52>
    {
        ret &= uxr_serialize_StringSequence_t(buffer, &input->partitions);
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	3304      	adds	r3, #4
 800daa2:	4619      	mov	r1, r3
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7fe fde1 	bl	800c66c <uxr_serialize_StringSequence_t>
 800daaa:	4603      	mov	r3, r0
 800daac:	461a      	mov	r2, r3
 800daae:	7bfb      	ldrb	r3, [r7, #15]
 800dab0:	4013      	ands	r3, r2
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	bf14      	ite	ne
 800dab6:	2301      	movne	r3, #1
 800dab8:	2300      	moveq	r3, #0
 800daba:	73fb      	strb	r3, [r7, #15]
    }

    ret &= ucdr_serialize_bool(buffer, input->optional_group_data);
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dac2:	4619      	mov	r1, r3
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f7fc fe08 	bl	800a6da <ucdr_serialize_bool>
 800daca:	4603      	mov	r3, r0
 800dacc:	461a      	mov	r2, r3
 800dace:	7bfb      	ldrb	r3, [r7, #15]
 800dad0:	4013      	ands	r3, r2
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	bf14      	ite	ne
 800dad6:	2301      	movne	r3, #1
 800dad8:	2300      	moveq	r3, #0
 800dada:	73fb      	strb	r3, [r7, #15]
    if (input->optional_group_data == true)
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00e      	beq.n	800db04 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x9a>
    {
        ret &= uxr_serialize_BinarySequence_t(buffer, &input->group_data);
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	332c      	adds	r3, #44	; 0x2c
 800daea:	4619      	mov	r1, r3
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f7fe fd99 	bl	800c624 <uxr_serialize_BinarySequence_t>
 800daf2:	4603      	mov	r3, r0
 800daf4:	461a      	mov	r2, r3
 800daf6:	7bfb      	ldrb	r3, [r7, #15]
 800daf8:	4013      	ands	r3, r2
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	bf14      	ite	ne
 800dafe:	2301      	movne	r3, #1
 800db00:	2300      	moveq	r3, #0
 800db02:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800db04:	7bfb      	ldrb	r3, [r7, #15]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <uxr_serialize_OBJK_Publisher_Binary>:
}

bool uxr_serialize_OBJK_Publisher_Binary(
        ucdrBuffer* buffer,
        const OBJK_Publisher_Binary* input)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b084      	sub	sp, #16
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
 800db16:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800db18:	2301      	movs	r3, #1
 800db1a:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_bool(buffer, input->optional_publisher_name);
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	4619      	mov	r1, r3
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f7fc fdd9 	bl	800a6da <ucdr_serialize_bool>
 800db28:	4603      	mov	r3, r0
 800db2a:	461a      	mov	r2, r3
 800db2c:	7bfb      	ldrb	r3, [r7, #15]
 800db2e:	4013      	ands	r3, r2
 800db30:	2b00      	cmp	r3, #0
 800db32:	bf14      	ite	ne
 800db34:	2301      	movne	r3, #1
 800db36:	2300      	moveq	r3, #0
 800db38:	73fb      	strb	r3, [r7, #15]
    if (input->optional_publisher_name == true)
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d00e      	beq.n	800db60 <uxr_serialize_OBJK_Publisher_Binary+0x52>
    {
        ret &= ucdr_serialize_string(buffer, input->publisher_name);
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	4619      	mov	r1, r3
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7fe fc97 	bl	800c47c <ucdr_serialize_string>
 800db4e:	4603      	mov	r3, r0
 800db50:	461a      	mov	r2, r3
 800db52:	7bfb      	ldrb	r3, [r7, #15]
 800db54:	4013      	ands	r3, r2
 800db56:	2b00      	cmp	r3, #0
 800db58:	bf14      	ite	ne
 800db5a:	2301      	movne	r3, #1
 800db5c:	2300      	moveq	r3, #0
 800db5e:	73fb      	strb	r3, [r7, #15]
    }

    ret &= ucdr_serialize_bool(buffer, input->optional_qos);
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	7a1b      	ldrb	r3, [r3, #8]
 800db64:	4619      	mov	r1, r3
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f7fc fdb7 	bl	800a6da <ucdr_serialize_bool>
 800db6c:	4603      	mov	r3, r0
 800db6e:	461a      	mov	r2, r3
 800db70:	7bfb      	ldrb	r3, [r7, #15]
 800db72:	4013      	ands	r3, r2
 800db74:	2b00      	cmp	r3, #0
 800db76:	bf14      	ite	ne
 800db78:	2301      	movne	r3, #1
 800db7a:	2300      	moveq	r3, #0
 800db7c:	73fb      	strb	r3, [r7, #15]
    if (input->optional_qos == true)
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	7a1b      	ldrb	r3, [r3, #8]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d00e      	beq.n	800dba4 <uxr_serialize_OBJK_Publisher_Binary+0x96>
    {
        ret &= uxr_serialize_OBJK_Publisher_Binary_Qos(buffer, &input->qos);
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	330c      	adds	r3, #12
 800db8a:	4619      	mov	r1, r3
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f7ff ff6c 	bl	800da6a <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800db92:	4603      	mov	r3, r0
 800db94:	461a      	mov	r2, r3
 800db96:	7bfb      	ldrb	r3, [r7, #15]
 800db98:	4013      	ands	r3, r2
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	bf14      	ite	ne
 800db9e:	2301      	movne	r3, #1
 800dba0:	2300      	moveq	r3, #0
 800dba2:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800dba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3710      	adds	r7, #16
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}

0800dbae <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
}

bool uxr_serialize_OBJK_Subscriber_Binary_Qos(
        ucdrBuffer* buffer,
        const OBJK_Subscriber_Binary_Qos* input)
{
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b084      	sub	sp, #16
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
 800dbb6:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_bool(buffer, input->optional_partitions);
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f7fc fd89 	bl	800a6da <ucdr_serialize_bool>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	461a      	mov	r2, r3
 800dbcc:	7bfb      	ldrb	r3, [r7, #15]
 800dbce:	4013      	ands	r3, r2
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	bf14      	ite	ne
 800dbd4:	2301      	movne	r3, #1
 800dbd6:	2300      	moveq	r3, #0
 800dbd8:	73fb      	strb	r3, [r7, #15]
    if (input->optional_partitions == true)
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d00e      	beq.n	800dc00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x52>
    {
        ret &= uxr_serialize_StringSequence_t(buffer, &input->partitions);
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	3304      	adds	r3, #4
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f7fe fd3f 	bl	800c66c <uxr_serialize_StringSequence_t>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	7bfb      	ldrb	r3, [r7, #15]
 800dbf4:	4013      	ands	r3, r2
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	bf14      	ite	ne
 800dbfa:	2301      	movne	r3, #1
 800dbfc:	2300      	moveq	r3, #0
 800dbfe:	73fb      	strb	r3, [r7, #15]
    }

    ret &= ucdr_serialize_bool(buffer, input->optional_group_data);
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc06:	4619      	mov	r1, r3
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f7fc fd66 	bl	800a6da <ucdr_serialize_bool>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	461a      	mov	r2, r3
 800dc12:	7bfb      	ldrb	r3, [r7, #15]
 800dc14:	4013      	ands	r3, r2
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	bf14      	ite	ne
 800dc1a:	2301      	movne	r3, #1
 800dc1c:	2300      	moveq	r3, #0
 800dc1e:	73fb      	strb	r3, [r7, #15]
    if (input->optional_group_data == true)
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00e      	beq.n	800dc48 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x9a>
    {
        ret &= uxr_serialize_BinarySequence_t(buffer, &input->group_data);
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	332c      	adds	r3, #44	; 0x2c
 800dc2e:	4619      	mov	r1, r3
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f7fe fcf7 	bl	800c624 <uxr_serialize_BinarySequence_t>
 800dc36:	4603      	mov	r3, r0
 800dc38:	461a      	mov	r2, r3
 800dc3a:	7bfb      	ldrb	r3, [r7, #15]
 800dc3c:	4013      	ands	r3, r2
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	bf14      	ite	ne
 800dc42:	2301      	movne	r3, #1
 800dc44:	2300      	moveq	r3, #0
 800dc46:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800dc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3710      	adds	r7, #16
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <uxr_serialize_OBJK_Subscriber_Binary>:
}

bool uxr_serialize_OBJK_Subscriber_Binary(
        ucdrBuffer* buffer,
        const OBJK_Subscriber_Binary* input)
{
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b084      	sub	sp, #16
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_bool(buffer, input->optional_subscriber_name);
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	4619      	mov	r1, r3
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f7fc fd37 	bl	800a6da <ucdr_serialize_bool>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	461a      	mov	r2, r3
 800dc70:	7bfb      	ldrb	r3, [r7, #15]
 800dc72:	4013      	ands	r3, r2
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	bf14      	ite	ne
 800dc78:	2301      	movne	r3, #1
 800dc7a:	2300      	moveq	r3, #0
 800dc7c:	73fb      	strb	r3, [r7, #15]
    if (input->optional_subscriber_name == true)
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d00e      	beq.n	800dca4 <uxr_serialize_OBJK_Subscriber_Binary+0x52>
    {
        ret &= ucdr_serialize_string(buffer, input->subscriber_name);
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f7fe fbf5 	bl	800c47c <ucdr_serialize_string>
 800dc92:	4603      	mov	r3, r0
 800dc94:	461a      	mov	r2, r3
 800dc96:	7bfb      	ldrb	r3, [r7, #15]
 800dc98:	4013      	ands	r3, r2
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	bf14      	ite	ne
 800dc9e:	2301      	movne	r3, #1
 800dca0:	2300      	moveq	r3, #0
 800dca2:	73fb      	strb	r3, [r7, #15]
    }

    ret &= ucdr_serialize_bool(buffer, input->optional_qos);
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	7a1b      	ldrb	r3, [r3, #8]
 800dca8:	4619      	mov	r1, r3
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f7fc fd15 	bl	800a6da <ucdr_serialize_bool>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	7bfb      	ldrb	r3, [r7, #15]
 800dcb6:	4013      	ands	r3, r2
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	bf14      	ite	ne
 800dcbc:	2301      	movne	r3, #1
 800dcbe:	2300      	moveq	r3, #0
 800dcc0:	73fb      	strb	r3, [r7, #15]
    if (input->optional_qos == true)
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	7a1b      	ldrb	r3, [r3, #8]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d00e      	beq.n	800dce8 <uxr_serialize_OBJK_Subscriber_Binary+0x96>
    {
        ret &= uxr_serialize_OBJK_Subscriber_Binary_Qos(buffer, &input->qos);
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	330c      	adds	r3, #12
 800dcce:	4619      	mov	r1, r3
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7ff ff6c 	bl	800dbae <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	461a      	mov	r2, r3
 800dcda:	7bfb      	ldrb	r3, [r7, #15]
 800dcdc:	4013      	ands	r3, r2
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	bf14      	ite	ne
 800dce2:	2301      	movne	r3, #1
 800dce4:	2300      	moveq	r3, #0
 800dce6:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800dce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3710      	adds	r7, #16
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}

0800dcf2 <uxr_serialize_OBJK_Endpoint_QosBinary>:
}

bool uxr_serialize_OBJK_Endpoint_QosBinary(
        ucdrBuffer* buffer,
        const OBJK_Endpoint_QosBinary* input)
{
 800dcf2:	b580      	push	{r7, lr}
 800dcf4:	b084      	sub	sp, #16
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
 800dcfa:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint16_t(buffer, input->qos_flags);
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	881b      	ldrh	r3, [r3, #0]
 800dd04:	4619      	mov	r1, r3
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f7fc fda8 	bl	800a85c <ucdr_serialize_uint16_t>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	461a      	mov	r2, r3
 800dd10:	7bfb      	ldrb	r3, [r7, #15]
 800dd12:	4013      	ands	r3, r2
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	bf14      	ite	ne
 800dd18:	2301      	movne	r3, #1
 800dd1a:	2300      	moveq	r3, #0
 800dd1c:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_bool(buffer, input->optional_history_depth);
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	789b      	ldrb	r3, [r3, #2]
 800dd22:	4619      	mov	r1, r3
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f7fc fcd8 	bl	800a6da <ucdr_serialize_bool>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	7bfb      	ldrb	r3, [r7, #15]
 800dd30:	4013      	ands	r3, r2
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	bf14      	ite	ne
 800dd36:	2301      	movne	r3, #1
 800dd38:	2300      	moveq	r3, #0
 800dd3a:	73fb      	strb	r3, [r7, #15]
    if (input->optional_history_depth == true)
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	789b      	ldrb	r3, [r3, #2]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d00e      	beq.n	800dd62 <uxr_serialize_OBJK_Endpoint_QosBinary+0x70>
    {
        ret &= ucdr_serialize_uint16_t(buffer, input->history_depth);
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	889b      	ldrh	r3, [r3, #4]
 800dd48:	4619      	mov	r1, r3
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f7fc fd86 	bl	800a85c <ucdr_serialize_uint16_t>
 800dd50:	4603      	mov	r3, r0
 800dd52:	461a      	mov	r2, r3
 800dd54:	7bfb      	ldrb	r3, [r7, #15]
 800dd56:	4013      	ands	r3, r2
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	bf14      	ite	ne
 800dd5c:	2301      	movne	r3, #1
 800dd5e:	2300      	moveq	r3, #0
 800dd60:	73fb      	strb	r3, [r7, #15]
    }

    ret &= ucdr_serialize_bool(buffer, input->optional_deadline_msec);
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	799b      	ldrb	r3, [r3, #6]
 800dd66:	4619      	mov	r1, r3
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f7fc fcb6 	bl	800a6da <ucdr_serialize_bool>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	461a      	mov	r2, r3
 800dd72:	7bfb      	ldrb	r3, [r7, #15]
 800dd74:	4013      	ands	r3, r2
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	bf14      	ite	ne
 800dd7a:	2301      	movne	r3, #1
 800dd7c:	2300      	moveq	r3, #0
 800dd7e:	73fb      	strb	r3, [r7, #15]
    if (input->optional_deadline_msec == true)
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	799b      	ldrb	r3, [r3, #6]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d00e      	beq.n	800dda6 <uxr_serialize_OBJK_Endpoint_QosBinary+0xb4>
    {
        ret &= ucdr_serialize_uint32_t(buffer, input->deadline_msec);
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	689b      	ldr	r3, [r3, #8]
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f7fd f93c 	bl	800b00c <ucdr_serialize_uint32_t>
 800dd94:	4603      	mov	r3, r0
 800dd96:	461a      	mov	r2, r3
 800dd98:	7bfb      	ldrb	r3, [r7, #15]
 800dd9a:	4013      	ands	r3, r2
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	bf14      	ite	ne
 800dda0:	2301      	movne	r3, #1
 800dda2:	2300      	moveq	r3, #0
 800dda4:	73fb      	strb	r3, [r7, #15]
    }

    ret &= ucdr_serialize_bool(buffer, input->optional_lifespan_msec);
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	7b1b      	ldrb	r3, [r3, #12]
 800ddaa:	4619      	mov	r1, r3
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7fc fc94 	bl	800a6da <ucdr_serialize_bool>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	7bfb      	ldrb	r3, [r7, #15]
 800ddb8:	4013      	ands	r3, r2
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	bf14      	ite	ne
 800ddbe:	2301      	movne	r3, #1
 800ddc0:	2300      	moveq	r3, #0
 800ddc2:	73fb      	strb	r3, [r7, #15]
    if (input->optional_lifespan_msec == true)
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	7b1b      	ldrb	r3, [r3, #12]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d00e      	beq.n	800ddea <uxr_serialize_OBJK_Endpoint_QosBinary+0xf8>
    {
        ret &= ucdr_serialize_uint32_t(buffer, input->lifespan_msec);
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	691b      	ldr	r3, [r3, #16]
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f7fd f91a 	bl	800b00c <ucdr_serialize_uint32_t>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	461a      	mov	r2, r3
 800dddc:	7bfb      	ldrb	r3, [r7, #15]
 800ddde:	4013      	ands	r3, r2
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	bf14      	ite	ne
 800dde4:	2301      	movne	r3, #1
 800dde6:	2300      	moveq	r3, #0
 800dde8:	73fb      	strb	r3, [r7, #15]
    }

    ret &= ucdr_serialize_bool(buffer, input->optional_user_data);
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	7d1b      	ldrb	r3, [r3, #20]
 800ddee:	4619      	mov	r1, r3
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f7fc fc72 	bl	800a6da <ucdr_serialize_bool>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	7bfb      	ldrb	r3, [r7, #15]
 800ddfc:	4013      	ands	r3, r2
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	bf14      	ite	ne
 800de02:	2301      	movne	r3, #1
 800de04:	2300      	moveq	r3, #0
 800de06:	73fb      	strb	r3, [r7, #15]
    if (input->optional_user_data == true)
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	7d1b      	ldrb	r3, [r3, #20]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d00e      	beq.n	800de2e <uxr_serialize_OBJK_Endpoint_QosBinary+0x13c>
    {
        ret &= uxr_serialize_BinarySequence_t(buffer, (BinarySequence_t*) &input->user_data);
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	3318      	adds	r3, #24
 800de14:	4619      	mov	r1, r3
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f7fe fc04 	bl	800c624 <uxr_serialize_BinarySequence_t>
 800de1c:	4603      	mov	r3, r0
 800de1e:	461a      	mov	r2, r3
 800de20:	7bfb      	ldrb	r3, [r7, #15]
 800de22:	4013      	ands	r3, r2
 800de24:	2b00      	cmp	r3, #0
 800de26:	bf14      	ite	ne
 800de28:	2301      	movne	r3, #1
 800de2a:	2300      	moveq	r3, #0
 800de2c:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800de2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3710      	adds	r7, #16
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <uxr_serialize_OBJK_DataWriter_Binary_Qos>:
}

bool uxr_serialize_OBJK_DataWriter_Binary_Qos(
        ucdrBuffer* buffer,
        const OBJK_DataWriter_Binary_Qos* input)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800de42:	2301      	movs	r3, #1
 800de44:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_OBJK_Endpoint_QosBinary(buffer, &input->base);
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	4619      	mov	r1, r3
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f7ff ff51 	bl	800dcf2 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800de50:	4603      	mov	r3, r0
 800de52:	461a      	mov	r2, r3
 800de54:	7bfb      	ldrb	r3, [r7, #15]
 800de56:	4013      	ands	r3, r2
 800de58:	2b00      	cmp	r3, #0
 800de5a:	bf14      	ite	ne
 800de5c:	2301      	movne	r3, #1
 800de5e:	2300      	moveq	r3, #0
 800de60:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_bool(buffer, input->optional_ownership_strength);
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800de68:	4619      	mov	r1, r3
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f7fc fc35 	bl	800a6da <ucdr_serialize_bool>
 800de70:	4603      	mov	r3, r0
 800de72:	461a      	mov	r2, r3
 800de74:	7bfb      	ldrb	r3, [r7, #15]
 800de76:	4013      	ands	r3, r2
 800de78:	2b00      	cmp	r3, #0
 800de7a:	bf14      	ite	ne
 800de7c:	2301      	movne	r3, #1
 800de7e:	2300      	moveq	r3, #0
 800de80:	73fb      	strb	r3, [r7, #15]
    if (input->optional_ownership_strength == true)
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d00e      	beq.n	800deaa <uxr_serialize_OBJK_DataWriter_Binary_Qos+0x72>
    {
        ret &= ucdr_serialize_uint64_t(buffer, input->ownership_strength);
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f7fd fcf2 	bl	800b87c <ucdr_serialize_uint64_t>
 800de98:	4603      	mov	r3, r0
 800de9a:	461a      	mov	r2, r3
 800de9c:	7bfb      	ldrb	r3, [r7, #15]
 800de9e:	4013      	ands	r3, r2
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	bf14      	ite	ne
 800dea4:	2301      	movne	r3, #1
 800dea6:	2300      	moveq	r3, #0
 800dea8:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800deaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800deac:	4618      	mov	r0, r3
 800deae:	3710      	adds	r7, #16
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <uxr_serialize_OBJK_DataReader_Binary_Qos>:
}

bool uxr_serialize_OBJK_DataReader_Binary_Qos(
        ucdrBuffer* buffer,
        const OBJK_DataReader_Binary_Qos* input)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800debe:	2301      	movs	r3, #1
 800dec0:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_OBJK_Endpoint_QosBinary(buffer, &input->base);
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	4619      	mov	r1, r3
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f7ff ff13 	bl	800dcf2 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800decc:	4603      	mov	r3, r0
 800dece:	461a      	mov	r2, r3
 800ded0:	7bfb      	ldrb	r3, [r7, #15]
 800ded2:	4013      	ands	r3, r2
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	bf14      	ite	ne
 800ded8:	2301      	movne	r3, #1
 800deda:	2300      	moveq	r3, #0
 800dedc:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_bool(buffer, input->optional_timebasedfilter_msec);
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dee4:	4619      	mov	r1, r3
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f7fc fbf7 	bl	800a6da <ucdr_serialize_bool>
 800deec:	4603      	mov	r3, r0
 800deee:	461a      	mov	r2, r3
 800def0:	7bfb      	ldrb	r3, [r7, #15]
 800def2:	4013      	ands	r3, r2
 800def4:	2b00      	cmp	r3, #0
 800def6:	bf14      	ite	ne
 800def8:	2301      	movne	r3, #1
 800defa:	2300      	moveq	r3, #0
 800defc:	73fb      	strb	r3, [r7, #15]
    if (input->optional_timebasedfilter_msec == true)
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df04:	2b00      	cmp	r3, #0
 800df06:	d00e      	beq.n	800df26 <uxr_serialize_OBJK_DataReader_Binary_Qos+0x72>
    {
        ret &= ucdr_serialize_uint64_t(buffer, input->timebasedfilter_msec);
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f7fd fcb4 	bl	800b87c <ucdr_serialize_uint64_t>
 800df14:	4603      	mov	r3, r0
 800df16:	461a      	mov	r2, r3
 800df18:	7bfb      	ldrb	r3, [r7, #15]
 800df1a:	4013      	ands	r3, r2
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	bf14      	ite	ne
 800df20:	2301      	movne	r3, #1
 800df22:	2300      	moveq	r3, #0
 800df24:	73fb      	strb	r3, [r7, #15]
    }

    ret &= ucdr_serialize_bool(buffer, input->optional_contentbased_filter);
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df2c:	4619      	mov	r1, r3
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7fc fbd3 	bl	800a6da <ucdr_serialize_bool>
 800df34:	4603      	mov	r3, r0
 800df36:	461a      	mov	r2, r3
 800df38:	7bfb      	ldrb	r3, [r7, #15]
 800df3a:	4013      	ands	r3, r2
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	bf14      	ite	ne
 800df40:	2301      	movne	r3, #1
 800df42:	2300      	moveq	r3, #0
 800df44:	73fb      	strb	r3, [r7, #15]
    if (input->optional_contentbased_filter == true)
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d00e      	beq.n	800df6e <uxr_serialize_OBJK_DataReader_Binary_Qos+0xba>
    {
        ret &= ucdr_serialize_string(buffer, input->contentbased_filter);
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df54:	4619      	mov	r1, r3
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f7fe fa90 	bl	800c47c <ucdr_serialize_string>
 800df5c:	4603      	mov	r3, r0
 800df5e:	461a      	mov	r2, r3
 800df60:	7bfb      	ldrb	r3, [r7, #15]
 800df62:	4013      	ands	r3, r2
 800df64:	2b00      	cmp	r3, #0
 800df66:	bf14      	ite	ne
 800df68:	2301      	movne	r3, #1
 800df6a:	2300      	moveq	r3, #0
 800df6c:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800df6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df70:	4618      	mov	r0, r3
 800df72:	3710      	adds	r7, #16
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <uxr_serialize_OBJK_DataReader_Binary>:
}

bool uxr_serialize_OBJK_DataReader_Binary(
        ucdrBuffer* buffer,
        const OBJK_DataReader_Binary* input)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b084      	sub	sp, #16
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800df82:	2301      	movs	r3, #1
 800df84:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_ObjectId(buffer, &input->topic_id);
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	4619      	mov	r1, r3
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f7fe fbcf 	bl	800c72e <uxr_serialize_ObjectId>
 800df90:	4603      	mov	r3, r0
 800df92:	461a      	mov	r2, r3
 800df94:	7bfb      	ldrb	r3, [r7, #15]
 800df96:	4013      	ands	r3, r2
 800df98:	2b00      	cmp	r3, #0
 800df9a:	bf14      	ite	ne
 800df9c:	2301      	movne	r3, #1
 800df9e:	2300      	moveq	r3, #0
 800dfa0:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_bool(buffer, input->optional_qos);
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	789b      	ldrb	r3, [r3, #2]
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f7fc fb96 	bl	800a6da <ucdr_serialize_bool>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	7bfb      	ldrb	r3, [r7, #15]
 800dfb4:	4013      	ands	r3, r2
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	bf14      	ite	ne
 800dfba:	2301      	movne	r3, #1
 800dfbc:	2300      	moveq	r3, #0
 800dfbe:	73fb      	strb	r3, [r7, #15]
    if (input->optional_qos == true)
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	789b      	ldrb	r3, [r3, #2]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d00e      	beq.n	800dfe6 <uxr_serialize_OBJK_DataReader_Binary+0x6e>
    {
        ret &= uxr_serialize_OBJK_DataReader_Binary_Qos(buffer, &input->qos);
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	3308      	adds	r3, #8
 800dfcc:	4619      	mov	r1, r3
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7ff ff70 	bl	800deb4 <uxr_serialize_OBJK_DataReader_Binary_Qos>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	7bfb      	ldrb	r3, [r7, #15]
 800dfda:	4013      	ands	r3, r2
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	bf14      	ite	ne
 800dfe0:	2301      	movne	r3, #1
 800dfe2:	2300      	moveq	r3, #0
 800dfe4:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800dfe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3710      	adds	r7, #16
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <uxr_serialize_OBJK_DataWriter_Binary>:
}

bool uxr_serialize_OBJK_DataWriter_Binary(
        ucdrBuffer* buffer,
        const OBJK_DataWriter_Binary* input)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800dffa:	2301      	movs	r3, #1
 800dffc:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_ObjectId(buffer, &input->topic_id);
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	4619      	mov	r1, r3
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f7fe fb93 	bl	800c72e <uxr_serialize_ObjectId>
 800e008:	4603      	mov	r3, r0
 800e00a:	461a      	mov	r2, r3
 800e00c:	7bfb      	ldrb	r3, [r7, #15]
 800e00e:	4013      	ands	r3, r2
 800e010:	2b00      	cmp	r3, #0
 800e012:	bf14      	ite	ne
 800e014:	2301      	movne	r3, #1
 800e016:	2300      	moveq	r3, #0
 800e018:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_bool(buffer, input->optional_qos);
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	789b      	ldrb	r3, [r3, #2]
 800e01e:	4619      	mov	r1, r3
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f7fc fb5a 	bl	800a6da <ucdr_serialize_bool>
 800e026:	4603      	mov	r3, r0
 800e028:	461a      	mov	r2, r3
 800e02a:	7bfb      	ldrb	r3, [r7, #15]
 800e02c:	4013      	ands	r3, r2
 800e02e:	2b00      	cmp	r3, #0
 800e030:	bf14      	ite	ne
 800e032:	2301      	movne	r3, #1
 800e034:	2300      	moveq	r3, #0
 800e036:	73fb      	strb	r3, [r7, #15]
    if (input->optional_qos == true)
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	789b      	ldrb	r3, [r3, #2]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00e      	beq.n	800e05e <uxr_serialize_OBJK_DataWriter_Binary+0x6e>
    {
        ret &= uxr_serialize_OBJK_DataWriter_Binary_Qos(buffer, &input->qos);
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	3308      	adds	r3, #8
 800e044:	4619      	mov	r1, r3
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f7ff fef6 	bl	800de38 <uxr_serialize_OBJK_DataWriter_Binary_Qos>
 800e04c:	4603      	mov	r3, r0
 800e04e:	461a      	mov	r2, r3
 800e050:	7bfb      	ldrb	r3, [r7, #15]
 800e052:	4013      	ands	r3, r2
 800e054:	2b00      	cmp	r3, #0
 800e056:	bf14      	ite	ne
 800e058:	2301      	movne	r3, #1
 800e05a:	2300      	moveq	r3, #0
 800e05c:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800e05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e060:	4618      	mov	r0, r3
 800e062:	3710      	adds	r7, #16
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <uxr_serialize_ObjectVariant>:
}

bool uxr_serialize_ObjectVariant(
        ucdrBuffer* buffer,
        const ObjectVariant* input)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b084      	sub	sp, #16
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e072:	2301      	movs	r3, #1
 800e074:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint8_t(buffer, input->kind);
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	4619      	mov	r1, r3
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f7fc fb8f 	bl	800a7a0 <ucdr_serialize_uint8_t>
 800e082:	4603      	mov	r3, r0
 800e084:	461a      	mov	r2, r3
 800e086:	7bfb      	ldrb	r3, [r7, #15]
 800e088:	4013      	ands	r3, r2
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	bf14      	ite	ne
 800e08e:	2301      	movne	r3, #1
 800e090:	2300      	moveq	r3, #0
 800e092:	73fb      	strb	r3, [r7, #15]
    if (ret)
 800e094:	7bfb      	ldrb	r3, [r7, #15]
 800e096:	2b00      	cmp	r3, #0
 800e098:	f000 80f6 	beq.w	800e288 <uxr_serialize_ObjectVariant+0x220>
    {
        switch (input->kind)
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	2b0d      	cmp	r3, #13
 800e0a4:	f200 80f2 	bhi.w	800e28c <uxr_serialize_ObjectVariant+0x224>
 800e0a8:	a201      	add	r2, pc, #4	; (adr r2, 800e0b0 <uxr_serialize_ObjectVariant+0x48>)
 800e0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ae:	bf00      	nop
 800e0b0:	0800e149 	.word	0x0800e149
 800e0b4:	0800e1a9 	.word	0x0800e1a9
 800e0b8:	0800e1c9 	.word	0x0800e1c9
 800e0bc:	0800e1e9 	.word	0x0800e1e9
 800e0c0:	0800e209 	.word	0x0800e209
 800e0c4:	0800e229 	.word	0x0800e229
 800e0c8:	0800e249 	.word	0x0800e249
 800e0cc:	0800e269 	.word	0x0800e269
 800e0d0:	0800e28d 	.word	0x0800e28d
 800e0d4:	0800e189 	.word	0x0800e189
 800e0d8:	0800e169 	.word	0x0800e169
 800e0dc:	0800e129 	.word	0x0800e129
 800e0e0:	0800e0e9 	.word	0x0800e0e9
 800e0e4:	0800e109 	.word	0x0800e109
        {
            case DDS_XRCE_OBJK_AGENT:
                ret &= uxr_serialize_AGENT_Representation(buffer, &input->_.agent);
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	3304      	adds	r3, #4
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f7fe fdba 	bl	800cc68 <uxr_serialize_AGENT_Representation>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	7bfb      	ldrb	r3, [r7, #15]
 800e0fa:	4013      	ands	r3, r2
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	bf14      	ite	ne
 800e100:	2301      	movne	r3, #1
 800e102:	2300      	moveq	r3, #0
 800e104:	73fb      	strb	r3, [r7, #15]
                break;
 800e106:	e0c2      	b.n	800e28e <uxr_serialize_ObjectVariant+0x226>
            case DDS_XRCE_OBJK_CLIENT:
                ret &= uxr_serialize_CLIENT_Representation(buffer, &input->_.client);
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	3304      	adds	r3, #4
 800e10c:	4619      	mov	r1, r3
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f7fe fc9c 	bl	800ca4c <uxr_serialize_CLIENT_Representation>
 800e114:	4603      	mov	r3, r0
 800e116:	461a      	mov	r2, r3
 800e118:	7bfb      	ldrb	r3, [r7, #15]
 800e11a:	4013      	ands	r3, r2
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	bf14      	ite	ne
 800e120:	2301      	movne	r3, #1
 800e122:	2300      	moveq	r3, #0
 800e124:	73fb      	strb	r3, [r7, #15]
                break;
 800e126:	e0b2      	b.n	800e28e <uxr_serialize_ObjectVariant+0x226>
            case DDS_XRCE_OBJK_APPLICATION:
                ret &= uxr_serialize_OBJK_APPLICATION_Representation(buffer, &input->_.application);
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	3304      	adds	r3, #4
 800e12c:	4619      	mov	r1, r3
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f7ff f918 	bl	800d364 <uxr_serialize_OBJK_APPLICATION_Representation>
 800e134:	4603      	mov	r3, r0
 800e136:	461a      	mov	r2, r3
 800e138:	7bfb      	ldrb	r3, [r7, #15]
 800e13a:	4013      	ands	r3, r2
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	bf14      	ite	ne
 800e140:	2301      	movne	r3, #1
 800e142:	2300      	moveq	r3, #0
 800e144:	73fb      	strb	r3, [r7, #15]
                break;
 800e146:	e0a2      	b.n	800e28e <uxr_serialize_ObjectVariant+0x226>
            case DDS_XRCE_OBJK_PARTICIPANT:
                ret &= uxr_serialize_OBJK_PARTICIPANT_Representation(buffer, &input->_.participant);
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	3304      	adds	r3, #4
 800e14c:	4619      	mov	r1, r3
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f7ff fa8c 	bl	800d66c <uxr_serialize_OBJK_PARTICIPANT_Representation>
 800e154:	4603      	mov	r3, r0
 800e156:	461a      	mov	r2, r3
 800e158:	7bfb      	ldrb	r3, [r7, #15]
 800e15a:	4013      	ands	r3, r2
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	bf14      	ite	ne
 800e160:	2301      	movne	r3, #1
 800e162:	2300      	moveq	r3, #0
 800e164:	73fb      	strb	r3, [r7, #15]
                break;
 800e166:	e092      	b.n	800e28e <uxr_serialize_ObjectVariant+0x226>
            case DDS_XRCE_OBJK_QOSPROFILE:
                ret &= uxr_serialize_OBJK_QOSPROFILE_Representation(buffer, &input->_.qos_profile);
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	3304      	adds	r3, #4
 800e16c:	4619      	mov	r1, r3
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f7ff f890 	bl	800d294 <uxr_serialize_OBJK_QOSPROFILE_Representation>
 800e174:	4603      	mov	r3, r0
 800e176:	461a      	mov	r2, r3
 800e178:	7bfb      	ldrb	r3, [r7, #15]
 800e17a:	4013      	ands	r3, r2
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	bf14      	ite	ne
 800e180:	2301      	movne	r3, #1
 800e182:	2300      	moveq	r3, #0
 800e184:	73fb      	strb	r3, [r7, #15]
                break;
 800e186:	e082      	b.n	800e28e <uxr_serialize_ObjectVariant+0x226>
            case DDS_XRCE_OBJK_TYPE:
                ret &= uxr_serialize_OBJK_TYPE_Representation(buffer, &input->_.type);
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	3304      	adds	r3, #4
 800e18c:	4619      	mov	r1, r3
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f7ff f8b4 	bl	800d2fc <uxr_serialize_OBJK_TYPE_Representation>
 800e194:	4603      	mov	r3, r0
 800e196:	461a      	mov	r2, r3
 800e198:	7bfb      	ldrb	r3, [r7, #15]
 800e19a:	4013      	ands	r3, r2
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	bf14      	ite	ne
 800e1a0:	2301      	movne	r3, #1
 800e1a2:	2300      	moveq	r3, #0
 800e1a4:	73fb      	strb	r3, [r7, #15]
                break;
 800e1a6:	e072      	b.n	800e28e <uxr_serialize_ObjectVariant+0x226>
            case DDS_XRCE_OBJK_TOPIC:
                ret &= uxr_serialize_OBJK_TOPIC_Representation(buffer, &input->_.topic);
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	3304      	adds	r3, #4
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f7ff fab0 	bl	800d714 <uxr_serialize_OBJK_TOPIC_Representation>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ba:	4013      	ands	r3, r2
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	bf14      	ite	ne
 800e1c0:	2301      	movne	r3, #1
 800e1c2:	2300      	moveq	r3, #0
 800e1c4:	73fb      	strb	r3, [r7, #15]
                break;
 800e1c6:	e062      	b.n	800e28e <uxr_serialize_ObjectVariant+0x226>
            case DDS_XRCE_OBJK_PUBLISHER:
                ret &= uxr_serialize_OBJK_PUBLISHER_Representation(buffer, &input->_.publisher);
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	3304      	adds	r3, #4
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f7ff f8fc 	bl	800d3cc <uxr_serialize_OBJK_PUBLISHER_Representation>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	7bfb      	ldrb	r3, [r7, #15]
 800e1da:	4013      	ands	r3, r2
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	bf14      	ite	ne
 800e1e0:	2301      	movne	r3, #1
 800e1e2:	2300      	moveq	r3, #0
 800e1e4:	73fb      	strb	r3, [r7, #15]
                break;
 800e1e6:	e052      	b.n	800e28e <uxr_serialize_ObjectVariant+0x226>
            case DDS_XRCE_OBJK_SUBSCRIBER:
                ret &= uxr_serialize_OBJK_SUBSCRIBER_Representation(buffer, &input->_.subscriber);
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	3304      	adds	r3, #4
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f7ff f940 	bl	800d474 <uxr_serialize_OBJK_SUBSCRIBER_Representation>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	7bfb      	ldrb	r3, [r7, #15]
 800e1fa:	4013      	ands	r3, r2
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	bf14      	ite	ne
 800e200:	2301      	movne	r3, #1
 800e202:	2300      	moveq	r3, #0
 800e204:	73fb      	strb	r3, [r7, #15]
                break;
 800e206:	e042      	b.n	800e28e <uxr_serialize_ObjectVariant+0x226>
            case DDS_XRCE_OBJK_DATAWRITER:
                ret &= uxr_serialize_DATAWRITER_Representation(buffer, &input->_.data_writer);
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	3304      	adds	r3, #4
 800e20c:	4619      	mov	r1, r3
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7ff f984 	bl	800d51c <uxr_serialize_DATAWRITER_Representation>
 800e214:	4603      	mov	r3, r0
 800e216:	461a      	mov	r2, r3
 800e218:	7bfb      	ldrb	r3, [r7, #15]
 800e21a:	4013      	ands	r3, r2
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	bf14      	ite	ne
 800e220:	2301      	movne	r3, #1
 800e222:	2300      	moveq	r3, #0
 800e224:	73fb      	strb	r3, [r7, #15]
                break;
 800e226:	e032      	b.n	800e28e <uxr_serialize_ObjectVariant+0x226>
            case DDS_XRCE_OBJK_DATAREADER:
                ret &= uxr_serialize_DATAREADER_Representation(buffer, &input->_.data_reader);
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	3304      	adds	r3, #4
 800e22c:	4619      	mov	r1, r3
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f7ff f9c8 	bl	800d5c4 <uxr_serialize_DATAREADER_Representation>
 800e234:	4603      	mov	r3, r0
 800e236:	461a      	mov	r2, r3
 800e238:	7bfb      	ldrb	r3, [r7, #15]
 800e23a:	4013      	ands	r3, r2
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	bf14      	ite	ne
 800e240:	2301      	movne	r3, #1
 800e242:	2300      	moveq	r3, #0
 800e244:	73fb      	strb	r3, [r7, #15]
                break;
 800e246:	e022      	b.n	800e28e <uxr_serialize_ObjectVariant+0x226>
            case DDS_XRCE_OBJK_REQUESTER:
                ret &= uxr_serialize_OBJK_REQUESTER_Representation(buffer, &input->_.requester);
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	3304      	adds	r3, #4
 800e24c:	4619      	mov	r1, r3
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f7ff fab4 	bl	800d7bc <uxr_serialize_OBJK_REQUESTER_Representation>
 800e254:	4603      	mov	r3, r0
 800e256:	461a      	mov	r2, r3
 800e258:	7bfb      	ldrb	r3, [r7, #15]
 800e25a:	4013      	ands	r3, r2
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	bf14      	ite	ne
 800e260:	2301      	movne	r3, #1
 800e262:	2300      	moveq	r3, #0
 800e264:	73fb      	strb	r3, [r7, #15]
                break;
 800e266:	e012      	b.n	800e28e <uxr_serialize_ObjectVariant+0x226>
            case DDS_XRCE_OBJK_REPLIER:
                ret &= uxr_serialize_OBJK_REPLIER_Representation(buffer, &input->_.replier);
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	3304      	adds	r3, #4
 800e26c:	4619      	mov	r1, r3
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f7ff faf8 	bl	800d864 <uxr_serialize_OBJK_REPLIER_Representation>
 800e274:	4603      	mov	r3, r0
 800e276:	461a      	mov	r2, r3
 800e278:	7bfb      	ldrb	r3, [r7, #15]
 800e27a:	4013      	ands	r3, r2
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	bf14      	ite	ne
 800e280:	2301      	movne	r3, #1
 800e282:	2300      	moveq	r3, #0
 800e284:	73fb      	strb	r3, [r7, #15]
                break;
 800e286:	e002      	b.n	800e28e <uxr_serialize_ObjectVariant+0x226>
            default:
                break;
        }
    }
 800e288:	bf00      	nop
 800e28a:	e000      	b.n	800e28e <uxr_serialize_ObjectVariant+0x226>
                break;
 800e28c:	bf00      	nop
    return ret;
 800e28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3710      	adds	r7, #16
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <uxr_deserialize_ObjectVariant>:

bool uxr_deserialize_ObjectVariant(
        ucdrBuffer* buffer,
        ObjectVariant* output)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b084      	sub	sp, #16
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_uint8_t(buffer, &output->kind);
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f7fc faa7 	bl	800a7fe <ucdr_deserialize_uint8_t>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	7bfb      	ldrb	r3, [r7, #15]
 800e2b6:	4013      	ands	r3, r2
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	bf14      	ite	ne
 800e2bc:	2301      	movne	r3, #1
 800e2be:	2300      	moveq	r3, #0
 800e2c0:	73fb      	strb	r3, [r7, #15]
    if (ret)
 800e2c2:	7bfb      	ldrb	r3, [r7, #15]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	f000 80f5 	beq.w	800e4b4 <uxr_deserialize_ObjectVariant+0x21c>
    {
        switch (output->kind)
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	3b01      	subs	r3, #1
 800e2d0:	2b0d      	cmp	r3, #13
 800e2d2:	f200 80f1 	bhi.w	800e4b8 <uxr_deserialize_ObjectVariant+0x220>
 800e2d6:	a201      	add	r2, pc, #4	; (adr r2, 800e2dc <uxr_deserialize_ObjectVariant+0x44>)
 800e2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2dc:	0800e375 	.word	0x0800e375
 800e2e0:	0800e3d5 	.word	0x0800e3d5
 800e2e4:	0800e3f5 	.word	0x0800e3f5
 800e2e8:	0800e415 	.word	0x0800e415
 800e2ec:	0800e435 	.word	0x0800e435
 800e2f0:	0800e455 	.word	0x0800e455
 800e2f4:	0800e475 	.word	0x0800e475
 800e2f8:	0800e495 	.word	0x0800e495
 800e2fc:	0800e4b9 	.word	0x0800e4b9
 800e300:	0800e3b5 	.word	0x0800e3b5
 800e304:	0800e395 	.word	0x0800e395
 800e308:	0800e355 	.word	0x0800e355
 800e30c:	0800e315 	.word	0x0800e315
 800e310:	0800e335 	.word	0x0800e335
        {
            case DDS_XRCE_OBJK_AGENT:
                ret &= uxr_deserialize_AGENT_Representation(buffer, &output->_.agent);
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	3304      	adds	r3, #4
 800e318:	4619      	mov	r1, r3
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7fe fcfe 	bl	800cd1c <uxr_deserialize_AGENT_Representation>
 800e320:	4603      	mov	r3, r0
 800e322:	461a      	mov	r2, r3
 800e324:	7bfb      	ldrb	r3, [r7, #15]
 800e326:	4013      	ands	r3, r2
 800e328:	2b00      	cmp	r3, #0
 800e32a:	bf14      	ite	ne
 800e32c:	2301      	movne	r3, #1
 800e32e:	2300      	moveq	r3, #0
 800e330:	73fb      	strb	r3, [r7, #15]
                break;
 800e332:	e0c2      	b.n	800e4ba <uxr_deserialize_ObjectVariant+0x222>
            case DDS_XRCE_OBJK_CLIENT:
                ret &= uxr_deserialize_CLIENT_Representation(buffer, &output->_.client);
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	3304      	adds	r3, #4
 800e338:	4619      	mov	r1, r3
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f7fe fc0d 	bl	800cb5a <uxr_deserialize_CLIENT_Representation>
 800e340:	4603      	mov	r3, r0
 800e342:	461a      	mov	r2, r3
 800e344:	7bfb      	ldrb	r3, [r7, #15]
 800e346:	4013      	ands	r3, r2
 800e348:	2b00      	cmp	r3, #0
 800e34a:	bf14      	ite	ne
 800e34c:	2301      	movne	r3, #1
 800e34e:	2300      	moveq	r3, #0
 800e350:	73fb      	strb	r3, [r7, #15]
                break;
 800e352:	e0b2      	b.n	800e4ba <uxr_deserialize_ObjectVariant+0x222>
            case DDS_XRCE_OBJK_APPLICATION:
                ret &= uxr_deserialize_OBJK_APPLICATION_Representation(buffer, &output->_.application);
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	3304      	adds	r3, #4
 800e358:	4619      	mov	r1, r3
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f7ff f81c 	bl	800d398 <uxr_deserialize_OBJK_APPLICATION_Representation>
 800e360:	4603      	mov	r3, r0
 800e362:	461a      	mov	r2, r3
 800e364:	7bfb      	ldrb	r3, [r7, #15]
 800e366:	4013      	ands	r3, r2
 800e368:	2b00      	cmp	r3, #0
 800e36a:	bf14      	ite	ne
 800e36c:	2301      	movne	r3, #1
 800e36e:	2300      	moveq	r3, #0
 800e370:	73fb      	strb	r3, [r7, #15]
                break;
 800e372:	e0a2      	b.n	800e4ba <uxr_deserialize_ObjectVariant+0x222>
            case DDS_XRCE_OBJK_PARTICIPANT:
                ret &= uxr_deserialize_OBJK_PARTICIPANT_Representation(buffer, &output->_.participant);
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	3304      	adds	r3, #4
 800e378:	4619      	mov	r1, r3
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f7ff f9a0 	bl	800d6c0 <uxr_deserialize_OBJK_PARTICIPANT_Representation>
 800e380:	4603      	mov	r3, r0
 800e382:	461a      	mov	r2, r3
 800e384:	7bfb      	ldrb	r3, [r7, #15]
 800e386:	4013      	ands	r3, r2
 800e388:	2b00      	cmp	r3, #0
 800e38a:	bf14      	ite	ne
 800e38c:	2301      	movne	r3, #1
 800e38e:	2300      	moveq	r3, #0
 800e390:	73fb      	strb	r3, [r7, #15]
                break;
 800e392:	e092      	b.n	800e4ba <uxr_deserialize_ObjectVariant+0x222>
            case DDS_XRCE_OBJK_QOSPROFILE:
                ret &= uxr_deserialize_OBJK_QOSPROFILE_Representation(buffer, &output->_.qos_profile);
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	3304      	adds	r3, #4
 800e398:	4619      	mov	r1, r3
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f7fe ff94 	bl	800d2c8 <uxr_deserialize_OBJK_QOSPROFILE_Representation>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	7bfb      	ldrb	r3, [r7, #15]
 800e3a6:	4013      	ands	r3, r2
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	bf14      	ite	ne
 800e3ac:	2301      	movne	r3, #1
 800e3ae:	2300      	moveq	r3, #0
 800e3b0:	73fb      	strb	r3, [r7, #15]
                break;
 800e3b2:	e082      	b.n	800e4ba <uxr_deserialize_ObjectVariant+0x222>
            case DDS_XRCE_OBJK_TYPE:
                ret &= uxr_deserialize_OBJK_TYPE_Representation(buffer, &output->_.type);
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	3304      	adds	r3, #4
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f7fe ffb8 	bl	800d330 <uxr_deserialize_OBJK_TYPE_Representation>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	7bfb      	ldrb	r3, [r7, #15]
 800e3c6:	4013      	ands	r3, r2
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	bf14      	ite	ne
 800e3cc:	2301      	movne	r3, #1
 800e3ce:	2300      	moveq	r3, #0
 800e3d0:	73fb      	strb	r3, [r7, #15]
                break;
 800e3d2:	e072      	b.n	800e4ba <uxr_deserialize_ObjectVariant+0x222>
            case DDS_XRCE_OBJK_TOPIC:
                ret &= uxr_deserialize_OBJK_TOPIC_Representation(buffer, &output->_.topic);
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	3304      	adds	r3, #4
 800e3d8:	4619      	mov	r1, r3
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f7ff f9c4 	bl	800d768 <uxr_deserialize_OBJK_TOPIC_Representation>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	7bfb      	ldrb	r3, [r7, #15]
 800e3e6:	4013      	ands	r3, r2
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	bf14      	ite	ne
 800e3ec:	2301      	movne	r3, #1
 800e3ee:	2300      	moveq	r3, #0
 800e3f0:	73fb      	strb	r3, [r7, #15]
                break;
 800e3f2:	e062      	b.n	800e4ba <uxr_deserialize_ObjectVariant+0x222>
            case DDS_XRCE_OBJK_PUBLISHER:
                ret &= uxr_deserialize_OBJK_PUBLISHER_Representation(buffer, &output->_.publisher);
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	3304      	adds	r3, #4
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f7ff f810 	bl	800d420 <uxr_deserialize_OBJK_PUBLISHER_Representation>
 800e400:	4603      	mov	r3, r0
 800e402:	461a      	mov	r2, r3
 800e404:	7bfb      	ldrb	r3, [r7, #15]
 800e406:	4013      	ands	r3, r2
 800e408:	2b00      	cmp	r3, #0
 800e40a:	bf14      	ite	ne
 800e40c:	2301      	movne	r3, #1
 800e40e:	2300      	moveq	r3, #0
 800e410:	73fb      	strb	r3, [r7, #15]
                break;
 800e412:	e052      	b.n	800e4ba <uxr_deserialize_ObjectVariant+0x222>
            case DDS_XRCE_OBJK_SUBSCRIBER:
                ret &= uxr_deserialize_OBJK_SUBSCRIBER_Representation(buffer, &output->_.subscriber);
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	3304      	adds	r3, #4
 800e418:	4619      	mov	r1, r3
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7ff f854 	bl	800d4c8 <uxr_deserialize_OBJK_SUBSCRIBER_Representation>
 800e420:	4603      	mov	r3, r0
 800e422:	461a      	mov	r2, r3
 800e424:	7bfb      	ldrb	r3, [r7, #15]
 800e426:	4013      	ands	r3, r2
 800e428:	2b00      	cmp	r3, #0
 800e42a:	bf14      	ite	ne
 800e42c:	2301      	movne	r3, #1
 800e42e:	2300      	moveq	r3, #0
 800e430:	73fb      	strb	r3, [r7, #15]
                break;
 800e432:	e042      	b.n	800e4ba <uxr_deserialize_ObjectVariant+0x222>
            case DDS_XRCE_OBJK_DATAWRITER:
                ret &= uxr_deserialize_DATAWRITER_Representation(buffer, &output->_.data_writer);
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	3304      	adds	r3, #4
 800e438:	4619      	mov	r1, r3
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f7ff f898 	bl	800d570 <uxr_deserialize_DATAWRITER_Representation>
 800e440:	4603      	mov	r3, r0
 800e442:	461a      	mov	r2, r3
 800e444:	7bfb      	ldrb	r3, [r7, #15]
 800e446:	4013      	ands	r3, r2
 800e448:	2b00      	cmp	r3, #0
 800e44a:	bf14      	ite	ne
 800e44c:	2301      	movne	r3, #1
 800e44e:	2300      	moveq	r3, #0
 800e450:	73fb      	strb	r3, [r7, #15]
                break;
 800e452:	e032      	b.n	800e4ba <uxr_deserialize_ObjectVariant+0x222>
            case DDS_XRCE_OBJK_DATAREADER:
                ret &= uxr_deserialize_DATAREADER_Representation(buffer, &output->_.data_reader);
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	3304      	adds	r3, #4
 800e458:	4619      	mov	r1, r3
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f7ff f8dc 	bl	800d618 <uxr_deserialize_DATAREADER_Representation>
 800e460:	4603      	mov	r3, r0
 800e462:	461a      	mov	r2, r3
 800e464:	7bfb      	ldrb	r3, [r7, #15]
 800e466:	4013      	ands	r3, r2
 800e468:	2b00      	cmp	r3, #0
 800e46a:	bf14      	ite	ne
 800e46c:	2301      	movne	r3, #1
 800e46e:	2300      	moveq	r3, #0
 800e470:	73fb      	strb	r3, [r7, #15]
                break;
 800e472:	e022      	b.n	800e4ba <uxr_deserialize_ObjectVariant+0x222>
            case DDS_XRCE_OBJK_REQUESTER:
                ret &= uxr_deserialize_OBJK_REQUESTER_Representation(buffer, &output->_.requester);
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	3304      	adds	r3, #4
 800e478:	4619      	mov	r1, r3
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f7ff f9c8 	bl	800d810 <uxr_deserialize_OBJK_REQUESTER_Representation>
 800e480:	4603      	mov	r3, r0
 800e482:	461a      	mov	r2, r3
 800e484:	7bfb      	ldrb	r3, [r7, #15]
 800e486:	4013      	ands	r3, r2
 800e488:	2b00      	cmp	r3, #0
 800e48a:	bf14      	ite	ne
 800e48c:	2301      	movne	r3, #1
 800e48e:	2300      	moveq	r3, #0
 800e490:	73fb      	strb	r3, [r7, #15]
                break;
 800e492:	e012      	b.n	800e4ba <uxr_deserialize_ObjectVariant+0x222>
            case DDS_XRCE_OBJK_REPLIER:
                ret &= uxr_deserialize_OBJK_REPLIER_Representation(buffer, &output->_.replier);
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	3304      	adds	r3, #4
 800e498:	4619      	mov	r1, r3
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f7ff fa0c 	bl	800d8b8 <uxr_deserialize_OBJK_REPLIER_Representation>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	7bfb      	ldrb	r3, [r7, #15]
 800e4a6:	4013      	ands	r3, r2
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	bf14      	ite	ne
 800e4ac:	2301      	movne	r3, #1
 800e4ae:	2300      	moveq	r3, #0
 800e4b0:	73fb      	strb	r3, [r7, #15]
                break;
 800e4b2:	e002      	b.n	800e4ba <uxr_deserialize_ObjectVariant+0x222>
            default:
                break;
        }
    }
 800e4b4:	bf00      	nop
 800e4b6:	e000      	b.n	800e4ba <uxr_deserialize_ObjectVariant+0x222>
                break;
 800e4b8:	bf00      	nop
    return ret;
 800e4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3710      	adds	r7, #16
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <uxr_serialize_RequestId>:
}

bool uxr_serialize_RequestId(
        ucdrBuffer* buffer,
        const RequestId* input)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_array_uint8_t(buffer, input->data, 2);
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	2202      	movs	r2, #2
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f7fc f886 	bl	800a5ea <ucdr_serialize_array_uint8_t>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	7bfb      	ldrb	r3, [r7, #15]
 800e4e4:	4013      	ands	r3, r2
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	bf14      	ite	ne
 800e4ea:	2301      	movne	r3, #1
 800e4ec:	2300      	moveq	r3, #0
 800e4ee:	73fb      	strb	r3, [r7, #15]
    return ret;
 800e4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3710      	adds	r7, #16
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}

0800e4fa <uxr_deserialize_RequestId>:

bool uxr_deserialize_RequestId(
        ucdrBuffer* buffer,
        RequestId* output)
{
 800e4fa:	b580      	push	{r7, lr}
 800e4fc:	b084      	sub	sp, #16
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
 800e502:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e504:	2301      	movs	r3, #1
 800e506:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->data, 2);
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	2202      	movs	r2, #2
 800e50c:	4619      	mov	r1, r3
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f7fc f8a7 	bl	800a662 <ucdr_deserialize_array_uint8_t>
 800e514:	4603      	mov	r3, r0
 800e516:	461a      	mov	r2, r3
 800e518:	7bfb      	ldrb	r3, [r7, #15]
 800e51a:	4013      	ands	r3, r2
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	bf14      	ite	ne
 800e520:	2301      	movne	r3, #1
 800e522:	2300      	moveq	r3, #0
 800e524:	73fb      	strb	r3, [r7, #15]
    return ret;
 800e526:	7bfb      	ldrb	r3, [r7, #15]
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3710      	adds	r7, #16
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <uxr_deserialize_ResultStatus>:
}

bool uxr_deserialize_ResultStatus(
        ucdrBuffer* buffer,
        ResultStatus* output)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e53a:	2301      	movs	r3, #1
 800e53c:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_uint8_t(buffer, &output->status);
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	4619      	mov	r1, r3
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f7fc f95b 	bl	800a7fe <ucdr_deserialize_uint8_t>
 800e548:	4603      	mov	r3, r0
 800e54a:	461a      	mov	r2, r3
 800e54c:	7bfb      	ldrb	r3, [r7, #15]
 800e54e:	4013      	ands	r3, r2
 800e550:	2b00      	cmp	r3, #0
 800e552:	bf14      	ite	ne
 800e554:	2301      	movne	r3, #1
 800e556:	2300      	moveq	r3, #0
 800e558:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_uint8_t(buffer, &output->implementation_status);
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	3301      	adds	r3, #1
 800e55e:	4619      	mov	r1, r3
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f7fc f94c 	bl	800a7fe <ucdr_deserialize_uint8_t>
 800e566:	4603      	mov	r3, r0
 800e568:	461a      	mov	r2, r3
 800e56a:	7bfb      	ldrb	r3, [r7, #15]
 800e56c:	4013      	ands	r3, r2
 800e56e:	2b00      	cmp	r3, #0
 800e570:	bf14      	ite	ne
 800e572:	2301      	movne	r3, #1
 800e574:	2300      	moveq	r3, #0
 800e576:	73fb      	strb	r3, [r7, #15]
    return ret;
 800e578:	7bfb      	ldrb	r3, [r7, #15]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}

0800e582 <uxr_serialize_BaseObjectRequest>:

bool uxr_serialize_BaseObjectRequest(
        ucdrBuffer* buffer,
        const BaseObjectRequest* input)
{
 800e582:	b580      	push	{r7, lr}
 800e584:	b084      	sub	sp, #16
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
 800e58a:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e58c:	2301      	movs	r3, #1
 800e58e:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_RequestId(buffer, &input->request_id);
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	4619      	mov	r1, r3
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f7ff ff95 	bl	800e4c4 <uxr_serialize_RequestId>
 800e59a:	4603      	mov	r3, r0
 800e59c:	461a      	mov	r2, r3
 800e59e:	7bfb      	ldrb	r3, [r7, #15]
 800e5a0:	4013      	ands	r3, r2
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	bf14      	ite	ne
 800e5a6:	2301      	movne	r3, #1
 800e5a8:	2300      	moveq	r3, #0
 800e5aa:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_ObjectId(buffer, &input->object_id);
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	3302      	adds	r3, #2
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f7fe f8bb 	bl	800c72e <uxr_serialize_ObjectId>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	7bfb      	ldrb	r3, [r7, #15]
 800e5be:	4013      	ands	r3, r2
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	bf14      	ite	ne
 800e5c4:	2301      	movne	r3, #1
 800e5c6:	2300      	moveq	r3, #0
 800e5c8:	73fb      	strb	r3, [r7, #15]
    return ret;
 800e5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3710      	adds	r7, #16
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}

0800e5d4 <uxr_deserialize_BaseObjectRequest>:

bool uxr_deserialize_BaseObjectRequest(
        ucdrBuffer* buffer,
        BaseObjectRequest* output)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b084      	sub	sp, #16
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_RequestId(buffer, &output->request_id);
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f7ff ff87 	bl	800e4fa <uxr_deserialize_RequestId>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	7bfb      	ldrb	r3, [r7, #15]
 800e5f2:	4013      	ands	r3, r2
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	bf14      	ite	ne
 800e5f8:	2301      	movne	r3, #1
 800e5fa:	2300      	moveq	r3, #0
 800e5fc:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_ObjectId(buffer, &output->object_id);
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	3302      	adds	r3, #2
 800e602:	4619      	mov	r1, r3
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f7fe f8ad 	bl	800c764 <uxr_deserialize_ObjectId>
 800e60a:	4603      	mov	r3, r0
 800e60c:	461a      	mov	r2, r3
 800e60e:	7bfb      	ldrb	r3, [r7, #15]
 800e610:	4013      	ands	r3, r2
 800e612:	2b00      	cmp	r3, #0
 800e614:	bf14      	ite	ne
 800e616:	2301      	movne	r3, #1
 800e618:	2300      	moveq	r3, #0
 800e61a:	73fb      	strb	r3, [r7, #15]
    return ret;
 800e61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3710      	adds	r7, #16
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}

0800e626 <uxr_deserialize_BaseObjectReply>:
}

bool uxr_deserialize_BaseObjectReply(
        ucdrBuffer* buffer,
        BaseObjectReply* output)
{
 800e626:	b580      	push	{r7, lr}
 800e628:	b084      	sub	sp, #16
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
 800e62e:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e630:	2301      	movs	r3, #1
 800e632:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_BaseObjectRequest(buffer, &output->related_request);
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	4619      	mov	r1, r3
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f7ff ffcb 	bl	800e5d4 <uxr_deserialize_BaseObjectRequest>
 800e63e:	4603      	mov	r3, r0
 800e640:	461a      	mov	r2, r3
 800e642:	7bfb      	ldrb	r3, [r7, #15]
 800e644:	4013      	ands	r3, r2
 800e646:	2b00      	cmp	r3, #0
 800e648:	bf14      	ite	ne
 800e64a:	2301      	movne	r3, #1
 800e64c:	2300      	moveq	r3, #0
 800e64e:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_ResultStatus(buffer, &output->result);
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	3304      	adds	r3, #4
 800e654:	4619      	mov	r1, r3
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7ff ff6a 	bl	800e530 <uxr_deserialize_ResultStatus>
 800e65c:	4603      	mov	r3, r0
 800e65e:	461a      	mov	r2, r3
 800e660:	7bfb      	ldrb	r3, [r7, #15]
 800e662:	4013      	ands	r3, r2
 800e664:	2b00      	cmp	r3, #0
 800e666:	bf14      	ite	ne
 800e668:	2301      	movne	r3, #1
 800e66a:	2300      	moveq	r3, #0
 800e66c:	73fb      	strb	r3, [r7, #15]
    return ret;
 800e66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3710      	adds	r7, #16
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <uxr_serialize_DataDeliveryControl>:

bool uxr_serialize_DataDeliveryControl(
        ucdrBuffer* buffer,
        const DataDeliveryControl* input)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e682:	2301      	movs	r3, #1
 800e684:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint16_t(buffer, input->max_samples);
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	881b      	ldrh	r3, [r3, #0]
 800e68a:	4619      	mov	r1, r3
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f7fc f8e5 	bl	800a85c <ucdr_serialize_uint16_t>
 800e692:	4603      	mov	r3, r0
 800e694:	461a      	mov	r2, r3
 800e696:	7bfb      	ldrb	r3, [r7, #15]
 800e698:	4013      	ands	r3, r2
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	bf14      	ite	ne
 800e69e:	2301      	movne	r3, #1
 800e6a0:	2300      	moveq	r3, #0
 800e6a2:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint16_t(buffer, input->max_elapsed_time);
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	885b      	ldrh	r3, [r3, #2]
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f7fc f8d6 	bl	800a85c <ucdr_serialize_uint16_t>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	7bfb      	ldrb	r3, [r7, #15]
 800e6b6:	4013      	ands	r3, r2
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	bf14      	ite	ne
 800e6bc:	2301      	movne	r3, #1
 800e6be:	2300      	moveq	r3, #0
 800e6c0:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint16_t(buffer, input->max_bytes_per_seconds);
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	889b      	ldrh	r3, [r3, #4]
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f7fc f8c7 	bl	800a85c <ucdr_serialize_uint16_t>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	7bfb      	ldrb	r3, [r7, #15]
 800e6d4:	4013      	ands	r3, r2
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	bf14      	ite	ne
 800e6da:	2301      	movne	r3, #1
 800e6dc:	2300      	moveq	r3, #0
 800e6de:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint16_t(buffer, input->min_pace_period);
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	88db      	ldrh	r3, [r3, #6]
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f7fc f8b8 	bl	800a85c <ucdr_serialize_uint16_t>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	7bfb      	ldrb	r3, [r7, #15]
 800e6f2:	4013      	ands	r3, r2
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	bf14      	ite	ne
 800e6f8:	2301      	movne	r3, #1
 800e6fa:	2300      	moveq	r3, #0
 800e6fc:	73fb      	strb	r3, [r7, #15]
    return ret;
 800e6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e700:	4618      	mov	r0, r3
 800e702:	3710      	adds	r7, #16
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <uxr_serialize_ReadSpecification>:
}

bool uxr_serialize_ReadSpecification(
        ucdrBuffer* buffer,
        const ReadSpecification* input)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b084      	sub	sp, #16
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e712:	2301      	movs	r3, #1
 800e714:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint8_t(buffer, input->preferred_stream_id);
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	4619      	mov	r1, r3
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f7fc f83f 	bl	800a7a0 <ucdr_serialize_uint8_t>
 800e722:	4603      	mov	r3, r0
 800e724:	461a      	mov	r2, r3
 800e726:	7bfb      	ldrb	r3, [r7, #15]
 800e728:	4013      	ands	r3, r2
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	bf14      	ite	ne
 800e72e:	2301      	movne	r3, #1
 800e730:	2300      	moveq	r3, #0
 800e732:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint8_t(buffer, input->data_format);
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	785b      	ldrb	r3, [r3, #1]
 800e738:	4619      	mov	r1, r3
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f7fc f830 	bl	800a7a0 <ucdr_serialize_uint8_t>
 800e740:	4603      	mov	r3, r0
 800e742:	461a      	mov	r2, r3
 800e744:	7bfb      	ldrb	r3, [r7, #15]
 800e746:	4013      	ands	r3, r2
 800e748:	2b00      	cmp	r3, #0
 800e74a:	bf14      	ite	ne
 800e74c:	2301      	movne	r3, #1
 800e74e:	2300      	moveq	r3, #0
 800e750:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_bool(buffer, input->optional_content_filter_expression);
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	789b      	ldrb	r3, [r3, #2]
 800e756:	4619      	mov	r1, r3
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f7fb ffbe 	bl	800a6da <ucdr_serialize_bool>
 800e75e:	4603      	mov	r3, r0
 800e760:	461a      	mov	r2, r3
 800e762:	7bfb      	ldrb	r3, [r7, #15]
 800e764:	4013      	ands	r3, r2
 800e766:	2b00      	cmp	r3, #0
 800e768:	bf14      	ite	ne
 800e76a:	2301      	movne	r3, #1
 800e76c:	2300      	moveq	r3, #0
 800e76e:	73fb      	strb	r3, [r7, #15]
    if (input->optional_content_filter_expression == true)
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	789b      	ldrb	r3, [r3, #2]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d00e      	beq.n	800e796 <uxr_serialize_ReadSpecification+0x8e>
    {
        ret &= ucdr_serialize_string(buffer, input->content_filter_expression);
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	4619      	mov	r1, r3
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f7fd fe7c 	bl	800c47c <ucdr_serialize_string>
 800e784:	4603      	mov	r3, r0
 800e786:	461a      	mov	r2, r3
 800e788:	7bfb      	ldrb	r3, [r7, #15]
 800e78a:	4013      	ands	r3, r2
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	bf14      	ite	ne
 800e790:	2301      	movne	r3, #1
 800e792:	2300      	moveq	r3, #0
 800e794:	73fb      	strb	r3, [r7, #15]
    }

    ret &= ucdr_serialize_bool(buffer, input->optional_delivery_control);
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	7a1b      	ldrb	r3, [r3, #8]
 800e79a:	4619      	mov	r1, r3
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f7fb ff9c 	bl	800a6da <ucdr_serialize_bool>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	7bfb      	ldrb	r3, [r7, #15]
 800e7a8:	4013      	ands	r3, r2
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	bf14      	ite	ne
 800e7ae:	2301      	movne	r3, #1
 800e7b0:	2300      	moveq	r3, #0
 800e7b2:	73fb      	strb	r3, [r7, #15]
    if (input->optional_delivery_control == true)
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	7a1b      	ldrb	r3, [r3, #8]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d00e      	beq.n	800e7da <uxr_serialize_ReadSpecification+0xd2>
    {
        ret &= uxr_serialize_DataDeliveryControl(buffer, &input->delivery_control);
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	330a      	adds	r3, #10
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f7ff ff58 	bl	800e678 <uxr_serialize_DataDeliveryControl>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	7bfb      	ldrb	r3, [r7, #15]
 800e7ce:	4013      	ands	r3, r2
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	bf14      	ite	ne
 800e7d4:	2301      	movne	r3, #1
 800e7d6:	2300      	moveq	r3, #0
 800e7d8:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800e7da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3710      	adds	r7, #16
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <uxr_serialize_CREATE_CLIENT_Payload>:
}

bool uxr_serialize_CREATE_CLIENT_Payload(
        ucdrBuffer* buffer,
        const CREATE_CLIENT_Payload* input)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_CLIENT_Representation(buffer, &input->client_representation);
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f7fe f928 	bl	800ca4c <uxr_serialize_CLIENT_Representation>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	461a      	mov	r2, r3
 800e800:	7bfb      	ldrb	r3, [r7, #15]
 800e802:	4013      	ands	r3, r2
 800e804:	2b00      	cmp	r3, #0
 800e806:	bf14      	ite	ne
 800e808:	2301      	movne	r3, #1
 800e80a:	2300      	moveq	r3, #0
 800e80c:	73fb      	strb	r3, [r7, #15]
    return ret;
 800e80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e810:	4618      	mov	r0, r3
 800e812:	3710      	adds	r7, #16
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <uxr_serialize_CREATE_Payload>:
}

bool uxr_serialize_CREATE_Payload(
        ucdrBuffer* buffer,
        const CREATE_Payload* input)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e822:	2301      	movs	r3, #1
 800e824:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_BaseObjectRequest(buffer, &input->base);
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	4619      	mov	r1, r3
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7ff fea9 	bl	800e582 <uxr_serialize_BaseObjectRequest>
 800e830:	4603      	mov	r3, r0
 800e832:	461a      	mov	r2, r3
 800e834:	7bfb      	ldrb	r3, [r7, #15]
 800e836:	4013      	ands	r3, r2
 800e838:	2b00      	cmp	r3, #0
 800e83a:	bf14      	ite	ne
 800e83c:	2301      	movne	r3, #1
 800e83e:	2300      	moveq	r3, #0
 800e840:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_ObjectVariant(buffer, &input->object_representation);
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	3304      	adds	r3, #4
 800e846:	4619      	mov	r1, r3
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f7ff fc0d 	bl	800e068 <uxr_serialize_ObjectVariant>
 800e84e:	4603      	mov	r3, r0
 800e850:	461a      	mov	r2, r3
 800e852:	7bfb      	ldrb	r3, [r7, #15]
 800e854:	4013      	ands	r3, r2
 800e856:	2b00      	cmp	r3, #0
 800e858:	bf14      	ite	ne
 800e85a:	2301      	movne	r3, #1
 800e85c:	2300      	moveq	r3, #0
 800e85e:	73fb      	strb	r3, [r7, #15]
    return ret;
 800e860:	7bfb      	ldrb	r3, [r7, #15]
}
 800e862:	4618      	mov	r0, r3
 800e864:	3710      	adds	r7, #16
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}

0800e86a <uxr_serialize_DELETE_Payload>:
}

bool uxr_serialize_DELETE_Payload(
        ucdrBuffer* buffer,
        const DELETE_Payload* input)
{
 800e86a:	b580      	push	{r7, lr}
 800e86c:	b084      	sub	sp, #16
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
 800e872:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e874:	2301      	movs	r3, #1
 800e876:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_BaseObjectRequest(buffer, &input->base);
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	4619      	mov	r1, r3
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f7ff fe80 	bl	800e582 <uxr_serialize_BaseObjectRequest>
 800e882:	4603      	mov	r3, r0
 800e884:	461a      	mov	r2, r3
 800e886:	7bfb      	ldrb	r3, [r7, #15]
 800e888:	4013      	ands	r3, r2
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	bf14      	ite	ne
 800e88e:	2301      	movne	r3, #1
 800e890:	2300      	moveq	r3, #0
 800e892:	73fb      	strb	r3, [r7, #15]
    return ret;
 800e894:	7bfb      	ldrb	r3, [r7, #15]
}
 800e896:	4618      	mov	r0, r3
 800e898:	3710      	adds	r7, #16
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}

0800e89e <uxr_deserialize_STATUS_AGENT_Payload>:
}

bool uxr_deserialize_STATUS_AGENT_Payload(
        ucdrBuffer* buffer,
        STATUS_AGENT_Payload* output)
{
 800e89e:	b580      	push	{r7, lr}
 800e8a0:	b084      	sub	sp, #16
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]
 800e8a6:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_ResultStatus(buffer, &output->result);
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f7ff fe3d 	bl	800e530 <uxr_deserialize_ResultStatus>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	7bfb      	ldrb	r3, [r7, #15]
 800e8bc:	4013      	ands	r3, r2
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	bf14      	ite	ne
 800e8c2:	2301      	movne	r3, #1
 800e8c4:	2300      	moveq	r3, #0
 800e8c6:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_AGENT_Representation(buffer, &output->agent_info);
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	3304      	adds	r3, #4
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f7fe fa24 	bl	800cd1c <uxr_deserialize_AGENT_Representation>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	7bfb      	ldrb	r3, [r7, #15]
 800e8da:	4013      	ands	r3, r2
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	bf14      	ite	ne
 800e8e0:	2301      	movne	r3, #1
 800e8e2:	2300      	moveq	r3, #0
 800e8e4:	73fb      	strb	r3, [r7, #15]
    return ret;
 800e8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3710      	adds	r7, #16
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}

0800e8f0 <uxr_deserialize_STATUS_Payload>:
}

bool uxr_deserialize_STATUS_Payload(
        ucdrBuffer* buffer,
        STATUS_Payload* output)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b084      	sub	sp, #16
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_BaseObjectReply(buffer, &output->base);
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	4619      	mov	r1, r3
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f7ff fe8f 	bl	800e626 <uxr_deserialize_BaseObjectReply>
 800e908:	4603      	mov	r3, r0
 800e90a:	461a      	mov	r2, r3
 800e90c:	7bfb      	ldrb	r3, [r7, #15]
 800e90e:	4013      	ands	r3, r2
 800e910:	2b00      	cmp	r3, #0
 800e912:	bf14      	ite	ne
 800e914:	2301      	movne	r3, #1
 800e916:	2300      	moveq	r3, #0
 800e918:	73fb      	strb	r3, [r7, #15]
    return ret;
 800e91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3710      	adds	r7, #16
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <uxr_serialize_READ_DATA_Payload>:
}

bool uxr_serialize_READ_DATA_Payload(
        ucdrBuffer* buffer,
        const READ_DATA_Payload* input)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e92e:	2301      	movs	r3, #1
 800e930:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_BaseObjectRequest(buffer, &input->base);
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	4619      	mov	r1, r3
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f7ff fe23 	bl	800e582 <uxr_serialize_BaseObjectRequest>
 800e93c:	4603      	mov	r3, r0
 800e93e:	461a      	mov	r2, r3
 800e940:	7bfb      	ldrb	r3, [r7, #15]
 800e942:	4013      	ands	r3, r2
 800e944:	2b00      	cmp	r3, #0
 800e946:	bf14      	ite	ne
 800e948:	2301      	movne	r3, #1
 800e94a:	2300      	moveq	r3, #0
 800e94c:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_ReadSpecification(buffer, &input->read_specification);
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	3304      	adds	r3, #4
 800e952:	4619      	mov	r1, r3
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f7ff fed7 	bl	800e708 <uxr_serialize_ReadSpecification>
 800e95a:	4603      	mov	r3, r0
 800e95c:	461a      	mov	r2, r3
 800e95e:	7bfb      	ldrb	r3, [r7, #15]
 800e960:	4013      	ands	r3, r2
 800e962:	2b00      	cmp	r3, #0
 800e964:	bf14      	ite	ne
 800e966:	2301      	movne	r3, #1
 800e968:	2300      	moveq	r3, #0
 800e96a:	73fb      	strb	r3, [r7, #15]
    return ret;
 800e96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <uxr_serialize_WRITE_DATA_Payload_Data>:
}

bool uxr_serialize_WRITE_DATA_Payload_Data(
        ucdrBuffer* buffer,
        const WRITE_DATA_Payload_Data* input)
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b084      	sub	sp, #16
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
 800e97e:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e980:	2301      	movs	r3, #1
 800e982:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_BaseObjectRequest(buffer, &input->base);
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	4619      	mov	r1, r3
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f7ff fdfa 	bl	800e582 <uxr_serialize_BaseObjectRequest>
 800e98e:	4603      	mov	r3, r0
 800e990:	461a      	mov	r2, r3
 800e992:	7bfb      	ldrb	r3, [r7, #15]
 800e994:	4013      	ands	r3, r2
 800e996:	2b00      	cmp	r3, #0
 800e998:	bf14      	ite	ne
 800e99a:	2301      	movne	r3, #1
 800e99c:	2300      	moveq	r3, #0
 800e99e:	73fb      	strb	r3, [r7, #15]
    return ret;
 800e9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3710      	adds	r7, #16
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <uxr_serialize_ACKNACK_Payload>:
}

bool uxr_serialize_ACKNACK_Payload(
        ucdrBuffer* buffer,
        const ACKNACK_Payload* input)
{
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b084      	sub	sp, #16
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
 800e9b2:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint16_t(buffer, input->first_unacked_seq_num);
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	881b      	ldrh	r3, [r3, #0]
 800e9bc:	4619      	mov	r1, r3
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f7fb ff4c 	bl	800a85c <ucdr_serialize_uint16_t>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	7bfb      	ldrb	r3, [r7, #15]
 800e9ca:	4013      	ands	r3, r2
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	bf14      	ite	ne
 800e9d0:	2301      	movne	r3, #1
 800e9d2:	2300      	moveq	r3, #0
 800e9d4:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_array_uint8_t(buffer, input->nack_bitmap, 2);
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	3302      	adds	r3, #2
 800e9da:	2202      	movs	r2, #2
 800e9dc:	4619      	mov	r1, r3
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f7fb fe03 	bl	800a5ea <ucdr_serialize_array_uint8_t>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	7bfb      	ldrb	r3, [r7, #15]
 800e9ea:	4013      	ands	r3, r2
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	bf14      	ite	ne
 800e9f0:	2301      	movne	r3, #1
 800e9f2:	2300      	moveq	r3, #0
 800e9f4:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint8_t(buffer, input->stream_id);
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	791b      	ldrb	r3, [r3, #4]
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f7fb fecf 	bl	800a7a0 <ucdr_serialize_uint8_t>
 800ea02:	4603      	mov	r3, r0
 800ea04:	461a      	mov	r2, r3
 800ea06:	7bfb      	ldrb	r3, [r7, #15]
 800ea08:	4013      	ands	r3, r2
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	bf14      	ite	ne
 800ea0e:	2301      	movne	r3, #1
 800ea10:	2300      	moveq	r3, #0
 800ea12:	73fb      	strb	r3, [r7, #15]
    return ret;
 800ea14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	3710      	adds	r7, #16
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}

0800ea1e <uxr_deserialize_ACKNACK_Payload>:

bool uxr_deserialize_ACKNACK_Payload(
        ucdrBuffer* buffer,
        ACKNACK_Payload* output)
{
 800ea1e:	b580      	push	{r7, lr}
 800ea20:	b084      	sub	sp, #16
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
 800ea26:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800ea28:	2301      	movs	r3, #1
 800ea2a:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_uint16_t(buffer, &output->first_unacked_seq_num);
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	4619      	mov	r1, r3
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7fc f8fa 	bl	800ac2a <ucdr_deserialize_uint16_t>
 800ea36:	4603      	mov	r3, r0
 800ea38:	461a      	mov	r2, r3
 800ea3a:	7bfb      	ldrb	r3, [r7, #15]
 800ea3c:	4013      	ands	r3, r2
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	bf14      	ite	ne
 800ea42:	2301      	movne	r3, #1
 800ea44:	2300      	moveq	r3, #0
 800ea46:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->nack_bitmap, 2);
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	3302      	adds	r3, #2
 800ea4c:	2202      	movs	r2, #2
 800ea4e:	4619      	mov	r1, r3
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f7fb fe06 	bl	800a662 <ucdr_deserialize_array_uint8_t>
 800ea56:	4603      	mov	r3, r0
 800ea58:	461a      	mov	r2, r3
 800ea5a:	7bfb      	ldrb	r3, [r7, #15]
 800ea5c:	4013      	ands	r3, r2
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	bf14      	ite	ne
 800ea62:	2301      	movne	r3, #1
 800ea64:	2300      	moveq	r3, #0
 800ea66:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_uint8_t(buffer, &output->stream_id);
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	3304      	adds	r3, #4
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f7fb fec5 	bl	800a7fe <ucdr_deserialize_uint8_t>
 800ea74:	4603      	mov	r3, r0
 800ea76:	461a      	mov	r2, r3
 800ea78:	7bfb      	ldrb	r3, [r7, #15]
 800ea7a:	4013      	ands	r3, r2
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	bf14      	ite	ne
 800ea80:	2301      	movne	r3, #1
 800ea82:	2300      	moveq	r3, #0
 800ea84:	73fb      	strb	r3, [r7, #15]
    return ret;
 800ea86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3710      	adds	r7, #16
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <uxr_serialize_HEARTBEAT_Payload>:

bool uxr_serialize_HEARTBEAT_Payload(
        ucdrBuffer* buffer,
        const HEARTBEAT_Payload* input)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint16_t(buffer, input->first_unacked_seq_nr);
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	881b      	ldrh	r3, [r3, #0]
 800eaa2:	4619      	mov	r1, r3
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f7fb fed9 	bl	800a85c <ucdr_serialize_uint16_t>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	461a      	mov	r2, r3
 800eaae:	7bfb      	ldrb	r3, [r7, #15]
 800eab0:	4013      	ands	r3, r2
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	bf14      	ite	ne
 800eab6:	2301      	movne	r3, #1
 800eab8:	2300      	moveq	r3, #0
 800eaba:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint16_t(buffer, input->last_unacked_seq_nr);
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	885b      	ldrh	r3, [r3, #2]
 800eac0:	4619      	mov	r1, r3
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f7fb feca 	bl	800a85c <ucdr_serialize_uint16_t>
 800eac8:	4603      	mov	r3, r0
 800eaca:	461a      	mov	r2, r3
 800eacc:	7bfb      	ldrb	r3, [r7, #15]
 800eace:	4013      	ands	r3, r2
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	bf14      	ite	ne
 800ead4:	2301      	movne	r3, #1
 800ead6:	2300      	moveq	r3, #0
 800ead8:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint8_t(buffer, input->stream_id);
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	791b      	ldrb	r3, [r3, #4]
 800eade:	4619      	mov	r1, r3
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f7fb fe5d 	bl	800a7a0 <ucdr_serialize_uint8_t>
 800eae6:	4603      	mov	r3, r0
 800eae8:	461a      	mov	r2, r3
 800eaea:	7bfb      	ldrb	r3, [r7, #15]
 800eaec:	4013      	ands	r3, r2
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	bf14      	ite	ne
 800eaf2:	2301      	movne	r3, #1
 800eaf4:	2300      	moveq	r3, #0
 800eaf6:	73fb      	strb	r3, [r7, #15]
    return ret;
 800eaf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3710      	adds	r7, #16
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}

0800eb02 <uxr_deserialize_HEARTBEAT_Payload>:

bool uxr_deserialize_HEARTBEAT_Payload(
        ucdrBuffer* buffer,
        HEARTBEAT_Payload* output)
{
 800eb02:	b580      	push	{r7, lr}
 800eb04:	b084      	sub	sp, #16
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
 800eb0a:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_uint16_t(buffer, &output->first_unacked_seq_nr);
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	4619      	mov	r1, r3
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f7fc f888 	bl	800ac2a <ucdr_deserialize_uint16_t>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	7bfb      	ldrb	r3, [r7, #15]
 800eb20:	4013      	ands	r3, r2
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	bf14      	ite	ne
 800eb26:	2301      	movne	r3, #1
 800eb28:	2300      	moveq	r3, #0
 800eb2a:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_uint16_t(buffer, &output->last_unacked_seq_nr);
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	3302      	adds	r3, #2
 800eb30:	4619      	mov	r1, r3
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f7fc f879 	bl	800ac2a <ucdr_deserialize_uint16_t>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	7bfb      	ldrb	r3, [r7, #15]
 800eb3e:	4013      	ands	r3, r2
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	bf14      	ite	ne
 800eb44:	2301      	movne	r3, #1
 800eb46:	2300      	moveq	r3, #0
 800eb48:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_uint8_t(buffer, &output->stream_id);
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	3304      	adds	r3, #4
 800eb4e:	4619      	mov	r1, r3
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f7fb fe54 	bl	800a7fe <ucdr_deserialize_uint8_t>
 800eb56:	4603      	mov	r3, r0
 800eb58:	461a      	mov	r2, r3
 800eb5a:	7bfb      	ldrb	r3, [r7, #15]
 800eb5c:	4013      	ands	r3, r2
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	bf14      	ite	ne
 800eb62:	2301      	movne	r3, #1
 800eb64:	2300      	moveq	r3, #0
 800eb66:	73fb      	strb	r3, [r7, #15]
    return ret;
 800eb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3710      	adds	r7, #16
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}

0800eb72 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
}

bool uxr_deserialize_TIMESTAMP_REPLY_Payload(
        ucdrBuffer* buffer,
        TIMESTAMP_REPLY_Payload* output)
{
 800eb72:	b580      	push	{r7, lr}
 800eb74:	b084      	sub	sp, #16
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
 800eb7a:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_Time_t(buffer, &output->transmit_timestamp);
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	4619      	mov	r1, r3
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f7fd fd24 	bl	800c5d2 <uxr_deserialize_Time_t>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	7bfb      	ldrb	r3, [r7, #15]
 800eb90:	4013      	ands	r3, r2
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	bf14      	ite	ne
 800eb96:	2301      	movne	r3, #1
 800eb98:	2300      	moveq	r3, #0
 800eb9a:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_Time_t(buffer, &output->receive_timestamp);
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	3308      	adds	r3, #8
 800eba0:	4619      	mov	r1, r3
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f7fd fd15 	bl	800c5d2 <uxr_deserialize_Time_t>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	461a      	mov	r2, r3
 800ebac:	7bfb      	ldrb	r3, [r7, #15]
 800ebae:	4013      	ands	r3, r2
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	bf14      	ite	ne
 800ebb4:	2301      	movne	r3, #1
 800ebb6:	2300      	moveq	r3, #0
 800ebb8:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_Time_t(buffer, &output->originate_timestamp);
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	3310      	adds	r3, #16
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f7fd fd06 	bl	800c5d2 <uxr_deserialize_Time_t>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	461a      	mov	r2, r3
 800ebca:	7bfb      	ldrb	r3, [r7, #15]
 800ebcc:	4013      	ands	r3, r2
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	bf14      	ite	ne
 800ebd2:	2301      	movne	r3, #1
 800ebd4:	2300      	moveq	r3, #0
 800ebd6:	73fb      	strb	r3, [r7, #15]
    return ret;
 800ebd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3710      	adds	r7, #16
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <uxr_serialize_GuidPrefix_t>:

bool uxr_serialize_GuidPrefix_t(
        ucdrBuffer* buffer,
        const GuidPrefix_t* input)
{
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b084      	sub	sp, #16
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
 800ebea:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800ebec:	2301      	movs	r3, #1
 800ebee:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_array_uint8_t(buffer, input->data, sizeof(GuidPrefix_t));
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	220c      	movs	r2, #12
 800ebf4:	4619      	mov	r1, r3
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f7fb fcf7 	bl	800a5ea <ucdr_serialize_array_uint8_t>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	461a      	mov	r2, r3
 800ec00:	7bfb      	ldrb	r3, [r7, #15]
 800ec02:	4013      	ands	r3, r2
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	bf14      	ite	ne
 800ec08:	2301      	movne	r3, #1
 800ec0a:	2300      	moveq	r3, #0
 800ec0c:	73fb      	strb	r3, [r7, #15]
    return ret;
 800ec0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3710      	adds	r7, #16
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <uxr_deserialize_GuidPrefix_t>:

bool uxr_deserialize_GuidPrefix_t(
        ucdrBuffer* buffer,
        GuidPrefix_t* output)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800ec22:	2301      	movs	r3, #1
 800ec24:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->data, sizeof(GuidPrefix_t));
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	220c      	movs	r2, #12
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f7fb fd18 	bl	800a662 <ucdr_deserialize_array_uint8_t>
 800ec32:	4603      	mov	r3, r0
 800ec34:	461a      	mov	r2, r3
 800ec36:	7bfb      	ldrb	r3, [r7, #15]
 800ec38:	4013      	ands	r3, r2
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	bf14      	ite	ne
 800ec3e:	2301      	movne	r3, #1
 800ec40:	2300      	moveq	r3, #0
 800ec42:	73fb      	strb	r3, [r7, #15]
    return ret;
 800ec44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3710      	adds	r7, #16
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <uxr_serialize_EntityId_t>:

bool uxr_serialize_EntityId_t(
        ucdrBuffer* buffer,
        const EntityId_t* input)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b084      	sub	sp, #16
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	6078      	str	r0, [r7, #4]
 800ec56:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800ec58:	2301      	movs	r3, #1
 800ec5a:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_array_uint8_t(buffer, input->entityKey, sizeof(((EntityId_t*)0)->entityKey));
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	2203      	movs	r2, #3
 800ec60:	4619      	mov	r1, r3
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f7fb fcc1 	bl	800a5ea <ucdr_serialize_array_uint8_t>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	7bfb      	ldrb	r3, [r7, #15]
 800ec6e:	4013      	ands	r3, r2
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	bf14      	ite	ne
 800ec74:	2301      	movne	r3, #1
 800ec76:	2300      	moveq	r3, #0
 800ec78:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint8_t(buffer, input->entityKind);
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	78db      	ldrb	r3, [r3, #3]
 800ec7e:	4619      	mov	r1, r3
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7fb fd8d 	bl	800a7a0 <ucdr_serialize_uint8_t>
 800ec86:	4603      	mov	r3, r0
 800ec88:	461a      	mov	r2, r3
 800ec8a:	7bfb      	ldrb	r3, [r7, #15]
 800ec8c:	4013      	ands	r3, r2
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	bf14      	ite	ne
 800ec92:	2301      	movne	r3, #1
 800ec94:	2300      	moveq	r3, #0
 800ec96:	73fb      	strb	r3, [r7, #15]
    return ret;
 800ec98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}

0800eca2 <uxr_deserialize_EntityId_t>:

bool uxr_deserialize_EntityId_t(
        ucdrBuffer* buffer,
        EntityId_t* output)
{
 800eca2:	b580      	push	{r7, lr}
 800eca4:	b084      	sub	sp, #16
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
 800ecaa:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800ecac:	2301      	movs	r3, #1
 800ecae:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->entityKey, sizeof(((EntityId_t*)0)->entityKey));
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	2203      	movs	r2, #3
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f7fb fcd3 	bl	800a662 <ucdr_deserialize_array_uint8_t>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	7bfb      	ldrb	r3, [r7, #15]
 800ecc2:	4013      	ands	r3, r2
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	bf14      	ite	ne
 800ecc8:	2301      	movne	r3, #1
 800ecca:	2300      	moveq	r3, #0
 800eccc:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_uint8_t(buffer, &output->entityKind);
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	3303      	adds	r3, #3
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f7fb fd92 	bl	800a7fe <ucdr_deserialize_uint8_t>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	461a      	mov	r2, r3
 800ecde:	7bfb      	ldrb	r3, [r7, #15]
 800ece0:	4013      	ands	r3, r2
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	bf14      	ite	ne
 800ece6:	2301      	movne	r3, #1
 800ece8:	2300      	moveq	r3, #0
 800ecea:	73fb      	strb	r3, [r7, #15]
    return ret;
 800ecec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3710      	adds	r7, #16
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}

0800ecf6 <uxr_serialize_GUID_t>:

bool uxr_serialize_GUID_t(
        ucdrBuffer* buffer,
        const GUID_t* input)
{
 800ecf6:	b580      	push	{r7, lr}
 800ecf8:	b084      	sub	sp, #16
 800ecfa:	af00      	add	r7, sp, #0
 800ecfc:	6078      	str	r0, [r7, #4]
 800ecfe:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800ed00:	2301      	movs	r3, #1
 800ed02:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_GuidPrefix_t(buffer, &input->guidPrefix);
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	4619      	mov	r1, r3
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f7ff ff6a 	bl	800ebe2 <uxr_serialize_GuidPrefix_t>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	461a      	mov	r2, r3
 800ed12:	7bfb      	ldrb	r3, [r7, #15]
 800ed14:	4013      	ands	r3, r2
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	bf14      	ite	ne
 800ed1a:	2301      	movne	r3, #1
 800ed1c:	2300      	moveq	r3, #0
 800ed1e:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_EntityId_t(buffer, &input->entityId);
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	330c      	adds	r3, #12
 800ed24:	4619      	mov	r1, r3
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f7ff ff91 	bl	800ec4e <uxr_serialize_EntityId_t>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	461a      	mov	r2, r3
 800ed30:	7bfb      	ldrb	r3, [r7, #15]
 800ed32:	4013      	ands	r3, r2
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	bf14      	ite	ne
 800ed38:	2301      	movne	r3, #1
 800ed3a:	2300      	moveq	r3, #0
 800ed3c:	73fb      	strb	r3, [r7, #15]
    return ret;
 800ed3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3710      	adds	r7, #16
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <uxr_deserialize_GUID_t>:

bool uxr_deserialize_GUID_t(
        ucdrBuffer* buffer,
        GUID_t* output)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800ed52:	2301      	movs	r3, #1
 800ed54:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_GuidPrefix_t(buffer, &output->guidPrefix);
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	4619      	mov	r1, r3
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f7ff ff5c 	bl	800ec18 <uxr_deserialize_GuidPrefix_t>
 800ed60:	4603      	mov	r3, r0
 800ed62:	461a      	mov	r2, r3
 800ed64:	7bfb      	ldrb	r3, [r7, #15]
 800ed66:	4013      	ands	r3, r2
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	bf14      	ite	ne
 800ed6c:	2301      	movne	r3, #1
 800ed6e:	2300      	moveq	r3, #0
 800ed70:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_EntityId_t(buffer, &output->entityId);
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	330c      	adds	r3, #12
 800ed76:	4619      	mov	r1, r3
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f7ff ff92 	bl	800eca2 <uxr_deserialize_EntityId_t>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	461a      	mov	r2, r3
 800ed82:	7bfb      	ldrb	r3, [r7, #15]
 800ed84:	4013      	ands	r3, r2
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	bf14      	ite	ne
 800ed8a:	2301      	movne	r3, #1
 800ed8c:	2300      	moveq	r3, #0
 800ed8e:	73fb      	strb	r3, [r7, #15]
    return ret;
 800ed90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3710      	adds	r7, #16
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <uxr_serialize_SequenceNumber_t>:

bool uxr_serialize_SequenceNumber_t(
        ucdrBuffer* buffer,
        const SequenceNumber_t* input)
{
 800ed9a:	b580      	push	{r7, lr}
 800ed9c:	b084      	sub	sp, #16
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
 800eda2:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800eda4:	2301      	movs	r3, #1
 800eda6:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_int32_t(buffer, input->high);
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4619      	mov	r1, r3
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f7fd f899 	bl	800bee6 <ucdr_serialize_int32_t>
 800edb4:	4603      	mov	r3, r0
 800edb6:	461a      	mov	r2, r3
 800edb8:	7bfb      	ldrb	r3, [r7, #15]
 800edba:	4013      	ands	r3, r2
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	bf14      	ite	ne
 800edc0:	2301      	movne	r3, #1
 800edc2:	2300      	moveq	r3, #0
 800edc4:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_serialize_uint32_t(buffer, input->low);
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	685b      	ldr	r3, [r3, #4]
 800edca:	4619      	mov	r1, r3
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f7fc f91d 	bl	800b00c <ucdr_serialize_uint32_t>
 800edd2:	4603      	mov	r3, r0
 800edd4:	461a      	mov	r2, r3
 800edd6:	7bfb      	ldrb	r3, [r7, #15]
 800edd8:	4013      	ands	r3, r2
 800edda:	2b00      	cmp	r3, #0
 800eddc:	bf14      	ite	ne
 800edde:	2301      	movne	r3, #1
 800ede0:	2300      	moveq	r3, #0
 800ede2:	73fb      	strb	r3, [r7, #15]
    return ret;
 800ede4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3710      	adds	r7, #16
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <uxr_deserialize_SequenceNumber_t>:

bool uxr_deserialize_SequenceNumber_t(
        ucdrBuffer* buffer,
        SequenceNumber_t* output)
{
 800edee:	b580      	push	{r7, lr}
 800edf0:	b084      	sub	sp, #16
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
 800edf6:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800edf8:	2301      	movs	r3, #1
 800edfa:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_int32_t(buffer, &output->high);
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	4619      	mov	r1, r3
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f7fd f97b 	bl	800c0fc <ucdr_deserialize_int32_t>
 800ee06:	4603      	mov	r3, r0
 800ee08:	461a      	mov	r2, r3
 800ee0a:	7bfb      	ldrb	r3, [r7, #15]
 800ee0c:	4013      	ands	r3, r2
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	bf14      	ite	ne
 800ee12:	2301      	movne	r3, #1
 800ee14:	2300      	moveq	r3, #0
 800ee16:	73fb      	strb	r3, [r7, #15]
    ret &= ucdr_deserialize_uint32_t(buffer, &output->low);
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	3304      	adds	r3, #4
 800ee1c:	4619      	mov	r1, r3
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f7fc fb0b 	bl	800b43a <ucdr_deserialize_uint32_t>
 800ee24:	4603      	mov	r3, r0
 800ee26:	461a      	mov	r2, r3
 800ee28:	7bfb      	ldrb	r3, [r7, #15]
 800ee2a:	4013      	ands	r3, r2
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	bf14      	ite	ne
 800ee30:	2301      	movne	r3, #1
 800ee32:	2300      	moveq	r3, #0
 800ee34:	73fb      	strb	r3, [r7, #15]
    return ret;
 800ee36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3710      	adds	r7, #16
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <uxr_serialize_SampleIdentity>:

bool uxr_serialize_SampleIdentity(
        ucdrBuffer* buffer,
        const SampleIdentity* input)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_GUID_t(buffer, &input->writer_guid);
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	4619      	mov	r1, r3
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f7ff ff4f 	bl	800ecf6 <uxr_serialize_GUID_t>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	7bfb      	ldrb	r3, [r7, #15]
 800ee5e:	4013      	ands	r3, r2
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	bf14      	ite	ne
 800ee64:	2301      	movne	r3, #1
 800ee66:	2300      	moveq	r3, #0
 800ee68:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_serialize_SequenceNumber_t(buffer, &input->sequence_number);
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	3310      	adds	r3, #16
 800ee6e:	4619      	mov	r1, r3
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f7ff ff92 	bl	800ed9a <uxr_serialize_SequenceNumber_t>
 800ee76:	4603      	mov	r3, r0
 800ee78:	461a      	mov	r2, r3
 800ee7a:	7bfb      	ldrb	r3, [r7, #15]
 800ee7c:	4013      	ands	r3, r2
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	bf14      	ite	ne
 800ee82:	2301      	movne	r3, #1
 800ee84:	2300      	moveq	r3, #0
 800ee86:	73fb      	strb	r3, [r7, #15]
    return ret;
 800ee88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <uxr_deserialize_SampleIdentity>:

bool uxr_deserialize_SampleIdentity(
        ucdrBuffer* buffer,
        SampleIdentity* output)
{
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b084      	sub	sp, #16
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
 800ee9a:	6039      	str	r1, [r7, #0]
    bool ret = true;
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_GUID_t(buffer, &output->writer_guid);
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	4619      	mov	r1, r3
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f7ff ff4f 	bl	800ed48 <uxr_deserialize_GUID_t>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	461a      	mov	r2, r3
 800eeae:	7bfb      	ldrb	r3, [r7, #15]
 800eeb0:	4013      	ands	r3, r2
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	bf14      	ite	ne
 800eeb6:	2301      	movne	r3, #1
 800eeb8:	2300      	moveq	r3, #0
 800eeba:	73fb      	strb	r3, [r7, #15]
    ret &= uxr_deserialize_SequenceNumber_t(buffer, &output->sequence_number);
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	3310      	adds	r3, #16
 800eec0:	4619      	mov	r1, r3
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f7ff ff93 	bl	800edee <uxr_deserialize_SequenceNumber_t>
 800eec8:	4603      	mov	r3, r0
 800eeca:	461a      	mov	r2, r3
 800eecc:	7bfb      	ldrb	r3, [r7, #15]
 800eece:	4013      	ands	r3, r2
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	bf14      	ite	ne
 800eed4:	2301      	movne	r3, #1
 800eed6:	2300      	moveq	r3, #0
 800eed8:	73fb      	strb	r3, [r7, #15]
    return ret;
 800eeda:	7bfb      	ldrb	r3, [r7, #15]
}
 800eedc:	4618      	mov	r0, r3
 800eede:	3710      	adds	r7, #16
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}

0800eee4 <uxr_buffer_delete_entity>:
//==================================================================
uint16_t uxr_buffer_delete_entity(
        uxrSession* session,
        uxrStreamId stream_id,
        uxrObjectId object_id)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b094      	sub	sp, #80	; 0x50
 800eee8:	af02      	add	r7, sp, #8
 800eeea:	60f8      	str	r0, [r7, #12]
 800eeec:	60b9      	str	r1, [r7, #8]
 800eeee:	607a      	str	r2, [r7, #4]
    uint16_t request_id = UXR_INVALID_REQUEST_ID;
 800eef0:	2300      	movs	r3, #0
 800eef2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    DELETE_Payload payload;

    // Change this when microcdr supports size_of function.
    size_t payload_length = 0; //DELETE_Payload_size(&payload);
 800eef6:	2300      	movs	r3, #0
 800eef8:	643b      	str	r3, [r7, #64]	; 0x40
    payload_length = (uint16_t)(payload_length + 4); // delete payload (request id + object_id), no padding.
 800eefa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	3304      	adds	r3, #4
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	643b      	str	r3, [r7, #64]	; 0x40

    ucdrBuffer ub;

    UXR_LOCK_STREAM_ID(session, stream_id);
 800ef04:	68b9      	ldr	r1, [r7, #8]
 800ef06:	68f8      	ldr	r0, [r7, #12]
 800ef08:	f004 fead 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 800ef0c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ef0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d002      	beq.n	800ef1a <uxr_buffer_delete_entity+0x36>
 800ef14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ef16:	f004 fe8a 	bl	8013c2e <uxr_lock>

    if (uxr_prepare_stream_to_write_submessage(session, stream_id, payload_length, &ub, SUBMESSAGE_ID_DELETE, 0))
 800ef1a:	f107 0314 	add.w	r3, r7, #20
 800ef1e:	2200      	movs	r2, #0
 800ef20:	9201      	str	r2, [sp, #4]
 800ef22:	2203      	movs	r2, #3
 800ef24:	9200      	str	r2, [sp, #0]
 800ef26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef28:	68b9      	ldr	r1, [r7, #8]
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	f002 faf0 	bl	8011510 <uxr_prepare_stream_to_write_submessage>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d011      	beq.n	800ef5a <uxr_buffer_delete_entity+0x76>
    {
        request_id = uxr_init_base_object_request(&session->info, object_id, &payload.base);
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ef3c:	6879      	ldr	r1, [r7, #4]
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f002 fcd4 	bl	80118ec <uxr_init_base_object_request>
 800ef44:	4603      	mov	r3, r0
 800ef46:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        (void) uxr_serialize_DELETE_Payload(&ub, &payload);
 800ef4a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ef4e:	f107 0314 	add.w	r3, r7, #20
 800ef52:	4611      	mov	r1, r2
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7ff fc88 	bl	800e86a <uxr_serialize_DELETE_Payload>
    }

    UXR_UNLOCK_STREAM_ID(session, stream_id);
 800ef5a:	68b9      	ldr	r1, [r7, #8]
 800ef5c:	68f8      	ldr	r0, [r7, #12]
 800ef5e:	f004 fe82 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 800ef62:	63b8      	str	r0, [r7, #56]	; 0x38
 800ef64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d002      	beq.n	800ef70 <uxr_buffer_delete_entity+0x8c>
 800ef6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef6c:	f004 fe6e 	bl	8013c4c <uxr_unlock>

    return request_id;
 800ef70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3748      	adds	r7, #72	; 0x48
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}

0800ef7c <uxr_common_create_entity>:
        uxrStreamId stream_id,
        uxrObjectId object_id,
        uint16_t xml_ref_bin_size,
        uint8_t mode,
        CREATE_Payload* payload)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b092      	sub	sp, #72	; 0x48
 800ef80:	af02      	add	r7, sp, #8
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	60b9      	str	r1, [r7, #8]
 800ef86:	607a      	str	r2, [r7, #4]
 800ef88:	807b      	strh	r3, [r7, #2]
    uint16_t request_id = UXR_INVALID_REQUEST_ID;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Change this when microcdr supports size_of function. Currently, DOMAIN_ID is not supported.
    size_t payload_length = 0; //CREATE_Payload_size(&payload);
 800ef8e:	2300      	movs	r3, #0
 800ef90:	63bb      	str	r3, [r7, #56]	; 0x38
    payload_length = (uint16_t)(payload_length + 4); // base
 800ef92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef94:	b29b      	uxth	r3, r3
 800ef96:	3304      	adds	r3, #4
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	63bb      	str	r3, [r7, #56]	; 0x38
    payload_length = (uint16_t)(payload_length + 1); // objk type
 800ef9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	3301      	adds	r3, #1
 800efa2:	b29b      	uxth	r3, r3
 800efa4:	63bb      	str	r3, [r7, #56]	; 0x38
    payload_length = (uint16_t)(payload_length + 1); // base3 type => xml
 800efa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	3301      	adds	r3, #1
 800efac:	b29b      	uxth	r3, r3
 800efae:	63bb      	str	r3, [r7, #56]	; 0x38
    payload_length = (uint16_t)(payload_length + 2); // padding
 800efb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	3302      	adds	r3, #2
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	63bb      	str	r3, [r7, #56]	; 0x38
    payload_length = (uint16_t)(payload_length + 4); // xml length
 800efba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efbc:	b29b      	uxth	r3, r3
 800efbe:	3304      	adds	r3, #4
 800efc0:	b29b      	uxth	r3, r3
 800efc2:	63bb      	str	r3, [r7, #56]	; 0x38
    payload_length = (uint16_t)(payload_length + xml_ref_bin_size); // xml data (note: compiler executes strlen one time this function)
 800efc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc6:	b29a      	uxth	r2, r3
 800efc8:	887b      	ldrh	r3, [r7, #2]
 800efca:	4413      	add	r3, r2
 800efcc:	b29b      	uxth	r3, r3
 800efce:	63bb      	str	r3, [r7, #56]	; 0x38
    payload_length =
            (uint16_t)(payload_length +
 800efd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd2:	b29b      	uxth	r3, r3
            ((object_id.type == DDS_XRCE_OBJK_PARTICIPANT && payload_length % 2 != 0) ? 1 : 0));                                      // necessary padding
 800efd4:	79ba      	ldrb	r2, [r7, #6]
            (uint16_t)(payload_length +
 800efd6:	2a01      	cmp	r2, #1
 800efd8:	d106      	bne.n	800efe8 <uxr_common_create_entity+0x6c>
            ((object_id.type == DDS_XRCE_OBJK_PARTICIPANT && payload_length % 2 != 0) ? 1 : 0));                                      // necessary padding
 800efda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efdc:	f002 0201 	and.w	r2, r2, #1
 800efe0:	2a00      	cmp	r2, #0
 800efe2:	d001      	beq.n	800efe8 <uxr_common_create_entity+0x6c>
            (uint16_t)(payload_length +
 800efe4:	2201      	movs	r2, #1
 800efe6:	e000      	b.n	800efea <uxr_common_create_entity+0x6e>
 800efe8:	2200      	movs	r2, #0
 800efea:	4413      	add	r3, r2
 800efec:	b29b      	uxth	r3, r3
    payload_length =
 800efee:	63bb      	str	r3, [r7, #56]	; 0x38
    payload_length = (uint16_t)(payload_length + 2); //object id ref
 800eff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff2:	b29b      	uxth	r3, r3
 800eff4:	3302      	adds	r3, #2
 800eff6:	b29b      	uxth	r3, r3
 800eff8:	63bb      	str	r3, [r7, #56]	; 0x38

    ucdrBuffer ub;

    UXR_LOCK_STREAM_ID(session, stream_id);
 800effa:	68b9      	ldr	r1, [r7, #8]
 800effc:	68f8      	ldr	r0, [r7, #12]
 800effe:	f004 fe32 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 800f002:	6378      	str	r0, [r7, #52]	; 0x34
 800f004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f006:	2b00      	cmp	r3, #0
 800f008:	d002      	beq.n	800f010 <uxr_common_create_entity+0x94>
 800f00a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f00c:	f004 fe0f 	bl	8013c2e <uxr_lock>

    if (uxr_prepare_stream_to_write_submessage(session, stream_id, payload_length, &ub, SUBMESSAGE_ID_CREATE, mode))
 800f010:	f107 0210 	add.w	r2, r7, #16
 800f014:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800f018:	9301      	str	r3, [sp, #4]
 800f01a:	2301      	movs	r3, #1
 800f01c:	9300      	str	r3, [sp, #0]
 800f01e:	4613      	mov	r3, r2
 800f020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f022:	68b9      	ldr	r1, [r7, #8]
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f002 fa73 	bl	8011510 <uxr_prepare_stream_to_write_submessage>
 800f02a:	4603      	mov	r3, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d00d      	beq.n	800f04c <uxr_common_create_entity+0xd0>
    {
        request_id = uxr_init_base_object_request(&session->info, object_id, &payload->base);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f034:	6879      	ldr	r1, [r7, #4]
 800f036:	4618      	mov	r0, r3
 800f038:	f002 fc58 	bl	80118ec <uxr_init_base_object_request>
 800f03c:	4603      	mov	r3, r0
 800f03e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        (void) uxr_serialize_CREATE_Payload(&ub, payload);
 800f040:	f107 0310 	add.w	r3, r7, #16
 800f044:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f046:	4618      	mov	r0, r3
 800f048:	f7ff fbe6 	bl	800e818 <uxr_serialize_CREATE_Payload>
    }

    UXR_UNLOCK_STREAM_ID(session, stream_id);
 800f04c:	68b9      	ldr	r1, [r7, #8]
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f004 fe09 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 800f054:	6338      	str	r0, [r7, #48]	; 0x30
 800f056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d002      	beq.n	800f062 <uxr_common_create_entity+0xe6>
 800f05c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f05e:	f004 fdf5 	bl	8013c4c <uxr_unlock>

    return request_id;
 800f062:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
}
 800f064:	4618      	mov	r0, r3
 800f066:	3740      	adds	r7, #64	; 0x40
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <uxr_buffer_create_participant_bin>:
        uxrStreamId stream_id,
        uxrObjectId object_id,
        uint16_t domain_id,
        const char* participant_name,
        uint8_t mode)
{
 800f06c:	b590      	push	{r4, r7, lr}
 800f06e:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f072:	af02      	add	r7, sp, #8
 800f074:	f507 7416 	add.w	r4, r7, #600	; 0x258
 800f078:	f5a4 7413 	sub.w	r4, r4, #588	; 0x24c
 800f07c:	6020      	str	r0, [r4, #0]
 800f07e:	f507 7016 	add.w	r0, r7, #600	; 0x258
 800f082:	f5a0 7014 	sub.w	r0, r0, #592	; 0x250
 800f086:	6001      	str	r1, [r0, #0]
 800f088:	f507 7116 	add.w	r1, r7, #600	; 0x258
 800f08c:	f5a1 7115 	sub.w	r1, r1, #596	; 0x254
 800f090:	600a      	str	r2, [r1, #0]
 800f092:	461a      	mov	r2, r3
 800f094:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f098:	f2a3 2356 	subw	r3, r3, #598	; 0x256
 800f09c:	801a      	strh	r2, [r3, #0]
    CREATE_Payload payload;
    payload.object_representation.kind = DDS_XRCE_OBJK_PARTICIPANT;
 800f09e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f0a2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	711a      	strb	r2, [r3, #4]
    payload.object_representation._.participant.domain_id = (int16_t)domain_id;
 800f0aa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f0ae:	f2a3 2356 	subw	r3, r3, #598	; 0x256
 800f0b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f0b6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f0ba:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f0be:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
    payload.object_representation._.participant.base.representation.format = DDS_XRCE_REPRESENTATION_IN_BINARY;
 800f0c2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f0c6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f0ca:	2203      	movs	r2, #3
 800f0cc:	721a      	strb	r2, [r3, #8]

    OBJK_DomainParticipant_Binary participant;
    participant.optional_domain_reference = false;
 800f0ce:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f0d2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	701a      	strb	r2, [r3, #0]
    participant.optional_qos_profile_reference = false;
 800f0da:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f0de:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	721a      	strb	r2, [r3, #8]

    if (participant_name != NULL)
 800f0e6:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00c      	beq.n	800f108 <uxr_buffer_create_participant_bin+0x9c>
    {
        participant.optional_qos_profile_reference = true;
 800f0ee:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f0f2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	721a      	strb	r2, [r3, #8]
        participant.qos_profile_reference = (char*) participant_name;
 800f0fa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f0fe:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800f102:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 800f106:	60da      	str	r2, [r3, #12]
    }

    ucdrBuffer ub;
    ucdr_init_buffer(&ub, payload.object_representation._.participant.base.representation._.binary_representation.data,
 800f108:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f10c:	f103 0110 	add.w	r1, r3, #16
 800f110:	f107 0314 	add.w	r3, r7, #20
 800f114:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f118:	4618      	mov	r0, r3
 800f11a:	f7fb f860 	bl	800a1de <ucdr_init_buffer>
            UXR_BINARY_SEQUENCE_MAX);
    uxr_serialize_OBJK_DomainParticipant_Binary(&ub, &participant);
 800f11e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f122:	f107 0314 	add.w	r3, r7, #20
 800f126:	4611      	mov	r1, r2
 800f128:	4618      	mov	r0, r3
 800f12a:	f7fe fbef 	bl	800d90c <uxr_serialize_OBJK_DomainParticipant_Binary>
    payload.object_representation._.participant.base.representation._.binary_representation.size = (uint32_t) ub.offset;
 800f12e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f132:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800f136:	691a      	ldr	r2, [r3, #16]
 800f138:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f13c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f140:	60da      	str	r2, [r3, #12]

    return uxr_common_create_entity(session, stream_id, object_id, (uint16_t) ub.offset, mode, &payload);
 800f142:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f146:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800f14a:	691b      	ldr	r3, [r3, #16]
 800f14c:	b29c      	uxth	r4, r3
 800f14e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f152:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 800f156:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f15a:	f5a3 7114 	sub.w	r1, r3, #592	; 0x250
 800f15e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f162:	f5a3 7013 	sub.w	r0, r3, #588	; 0x24c
 800f166:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f16a:	9301      	str	r3, [sp, #4]
 800f16c:	f897 326c 	ldrb.w	r3, [r7, #620]	; 0x26c
 800f170:	9300      	str	r3, [sp, #0]
 800f172:	4623      	mov	r3, r4
 800f174:	6812      	ldr	r2, [r2, #0]
 800f176:	6809      	ldr	r1, [r1, #0]
 800f178:	6800      	ldr	r0, [r0, #0]
 800f17a:	f7ff feff 	bl	800ef7c <uxr_common_create_entity>
 800f17e:	4603      	mov	r3, r0
}
 800f180:	4618      	mov	r0, r3
 800f182:	f507 7717 	add.w	r7, r7, #604	; 0x25c
 800f186:	46bd      	mov	sp, r7
 800f188:	bd90      	pop	{r4, r7, pc}

0800f18a <uxr_buffer_create_topic_bin>:
        uxrObjectId object_id,
        uxrObjectId participant_id,
        const char* topic_name,
        const char* type_name,
        uint8_t mode)
{
 800f18a:	b590      	push	{r4, r7, lr}
 800f18c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f190:	af02      	add	r7, sp, #8
 800f192:	f507 7416 	add.w	r4, r7, #600	; 0x258
 800f196:	f5a4 7413 	sub.w	r4, r4, #588	; 0x24c
 800f19a:	6020      	str	r0, [r4, #0]
 800f19c:	f507 7016 	add.w	r0, r7, #600	; 0x258
 800f1a0:	f5a0 7014 	sub.w	r0, r0, #592	; 0x250
 800f1a4:	6001      	str	r1, [r0, #0]
 800f1a6:	f507 7116 	add.w	r1, r7, #600	; 0x258
 800f1aa:	f5a1 7115 	sub.w	r1, r1, #596	; 0x254
 800f1ae:	600a      	str	r2, [r1, #0]
 800f1b0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800f1b4:	f5a2 7216 	sub.w	r2, r2, #600	; 0x258
 800f1b8:	6013      	str	r3, [r2, #0]
    CREATE_Payload payload;
    payload.object_representation.kind = DDS_XRCE_OBJK_TOPIC;
 800f1ba:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f1be:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f1c2:	2202      	movs	r2, #2
 800f1c4:	711a      	strb	r2, [r3, #4]
    uxr_object_id_to_raw(participant_id, payload.object_representation._.topic.participant_id.data);
 800f1c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f1ca:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800f1ce:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f1d2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f1d6:	4611      	mov	r1, r2
 800f1d8:	6818      	ldr	r0, [r3, #0]
 800f1da:	f000 fcf4 	bl	800fbc6 <uxr_object_id_to_raw>
    payload.object_representation._.topic.base.representation.format = DDS_XRCE_REPRESENTATION_IN_BINARY;
 800f1de:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f1e2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f1e6:	2203      	movs	r2, #3
 800f1e8:	721a      	strb	r2, [r3, #8]

    OBJK_Topic_Binary topic;
    topic.topic_name = (char*) topic_name;
 800f1ea:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f1ee:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800f1f2:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 800f1f6:	601a      	str	r2, [r3, #0]
    topic.optional_type_name = true;
 800f1f8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f1fc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800f200:	2201      	movs	r2, #1
 800f202:	731a      	strb	r2, [r3, #12]
    topic.type_name = (char*) type_name;
 800f204:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f208:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800f20c:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800f210:	611a      	str	r2, [r3, #16]
    topic.optional_type_reference = false;
 800f212:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f216:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800f21a:	2200      	movs	r2, #0
 800f21c:	711a      	strb	r2, [r3, #4]

    ucdrBuffer ub;
    ucdr_init_buffer(&ub, payload.object_representation._.topic.base.representation._.binary_representation.data,
 800f21e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f222:	f103 0110 	add.w	r1, r3, #16
 800f226:	f107 0310 	add.w	r3, r7, #16
 800f22a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f22e:	4618      	mov	r0, r3
 800f230:	f7fa ffd5 	bl	800a1de <ucdr_init_buffer>
            UXR_BINARY_SEQUENCE_MAX);
    uxr_serialize_OBJK_Topic_Binary(&ub, &topic);
 800f234:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f238:	f107 0310 	add.w	r3, r7, #16
 800f23c:	4611      	mov	r1, r2
 800f23e:	4618      	mov	r0, r3
 800f240:	f7fe fbb4 	bl	800d9ac <uxr_serialize_OBJK_Topic_Binary>
    payload.object_representation._.topic.base.representation._.binary_representation.size = (uint32_t) ub.offset;
 800f244:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f248:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800f24c:	691a      	ldr	r2, [r3, #16]
 800f24e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f252:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f256:	60da      	str	r2, [r3, #12]

    UXR_ADD_SHARED_MEMORY_ENTITY_BIN(session, object_id, &topic);
 800f258:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f25c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f260:	f5a3 7115 	sub.w	r1, r3, #596	; 0x254
 800f264:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f268:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800f26c:	6809      	ldr	r1, [r1, #0]
 800f26e:	6818      	ldr	r0, [r3, #0]
 800f270:	f005 fa64 	bl	801473c <uxr_add_shared_memory_entity_bin>

    return uxr_common_create_entity(session, stream_id, object_id, (uint16_t) ub.offset, mode, &payload);
 800f274:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f278:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800f27c:	691b      	ldr	r3, [r3, #16]
 800f27e:	b29c      	uxth	r4, r3
 800f280:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f284:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 800f288:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f28c:	f5a3 7114 	sub.w	r1, r3, #592	; 0x250
 800f290:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f294:	f5a3 7013 	sub.w	r0, r3, #588	; 0x24c
 800f298:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f29c:	9301      	str	r3, [sp, #4]
 800f29e:	f897 3270 	ldrb.w	r3, [r7, #624]	; 0x270
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	4623      	mov	r3, r4
 800f2a6:	6812      	ldr	r2, [r2, #0]
 800f2a8:	6809      	ldr	r1, [r1, #0]
 800f2aa:	6800      	ldr	r0, [r0, #0]
 800f2ac:	f7ff fe66 	bl	800ef7c <uxr_common_create_entity>
 800f2b0:	4603      	mov	r3, r0
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f507 7717 	add.w	r7, r7, #604	; 0x25c
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd90      	pop	{r4, r7, pc}

0800f2bc <uxr_buffer_create_publisher_bin>:
        uxrSession* session,
        uxrStreamId stream_id,
        uxrObjectId object_id,
        uxrObjectId participant_id,
        uint8_t mode)
{
 800f2bc:	b590      	push	{r4, r7, lr}
 800f2be:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800f2c2:	af02      	add	r7, sp, #8
 800f2c4:	f507 6490 	add.w	r4, r7, #1152	; 0x480
 800f2c8:	f2a4 4474 	subw	r4, r4, #1140	; 0x474
 800f2cc:	6020      	str	r0, [r4, #0]
 800f2ce:	f507 6090 	add.w	r0, r7, #1152	; 0x480
 800f2d2:	f5a0 608f 	sub.w	r0, r0, #1144	; 0x478
 800f2d6:	6001      	str	r1, [r0, #0]
 800f2d8:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 800f2dc:	f2a1 417c 	subw	r1, r1, #1148	; 0x47c
 800f2e0:	600a      	str	r2, [r1, #0]
 800f2e2:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 800f2e6:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 800f2ea:	6013      	str	r3, [r2, #0]
    CREATE_Payload payload;
    payload.object_representation.kind = DDS_XRCE_OBJK_PUBLISHER;
 800f2ec:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f2f0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f2f4:	2203      	movs	r2, #3
 800f2f6:	711a      	strb	r2, [r3, #4]
    uxr_object_id_to_raw(participant_id, payload.object_representation._.publisher.participant_id.data);
 800f2f8:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800f2fc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800f300:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f304:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800f308:	4611      	mov	r1, r2
 800f30a:	6818      	ldr	r0, [r3, #0]
 800f30c:	f000 fc5b 	bl	800fbc6 <uxr_object_id_to_raw>
    payload.object_representation._.publisher.base.representation.format = DDS_XRCE_REPRESENTATION_IN_BINARY;
 800f310:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f314:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f318:	2203      	movs	r2, #3
 800f31a:	721a      	strb	r2, [r3, #8]

    OBJK_Publisher_Binary publisher;
    publisher.optional_publisher_name = false;
 800f31c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f320:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800f324:	2200      	movs	r2, #0
 800f326:	701a      	strb	r2, [r3, #0]
    publisher.optional_qos = false;
 800f328:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f32c:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800f330:	2200      	movs	r2, #0
 800f332:	721a      	strb	r2, [r3, #8]

    ucdrBuffer ub;
    ucdr_init_buffer(&ub, payload.object_representation._.publisher.base.representation._.binary_representation.data,
 800f334:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800f338:	f103 0110 	add.w	r1, r3, #16
 800f33c:	f107 0310 	add.w	r3, r7, #16
 800f340:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f344:	4618      	mov	r0, r3
 800f346:	f7fa ff4a 	bl	800a1de <ucdr_init_buffer>
            UXR_BINARY_SEQUENCE_MAX);
    uxr_serialize_OBJK_Publisher_Binary(&ub, &publisher);
 800f34a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f34e:	f107 0310 	add.w	r3, r7, #16
 800f352:	4611      	mov	r1, r2
 800f354:	4618      	mov	r0, r3
 800f356:	f7fe fbda 	bl	800db0e <uxr_serialize_OBJK_Publisher_Binary>
    payload.object_representation._.publisher.base.representation._.binary_representation.size = (uint32_t) ub.offset;
 800f35a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f35e:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800f362:	691a      	ldr	r2, [r3, #16]
 800f364:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f368:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f36c:	60da      	str	r2, [r3, #12]

    return uxr_common_create_entity(session, stream_id, object_id, (uint16_t) ub.offset, mode, &payload);
 800f36e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f372:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800f376:	691b      	ldr	r3, [r3, #16]
 800f378:	b29c      	uxth	r4, r3
 800f37a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f37e:	f2a3 427c 	subw	r2, r3, #1148	; 0x47c
 800f382:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f386:	f5a3 618f 	sub.w	r1, r3, #1144	; 0x478
 800f38a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f38e:	f2a3 4074 	subw	r0, r3, #1140	; 0x474
 800f392:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800f396:	9301      	str	r3, [sp, #4]
 800f398:	f897 3490 	ldrb.w	r3, [r7, #1168]	; 0x490
 800f39c:	9300      	str	r3, [sp, #0]
 800f39e:	4623      	mov	r3, r4
 800f3a0:	6812      	ldr	r2, [r2, #0]
 800f3a2:	6809      	ldr	r1, [r1, #0]
 800f3a4:	6800      	ldr	r0, [r0, #0]
 800f3a6:	f7ff fde9 	bl	800ef7c <uxr_common_create_entity>
 800f3aa:	4603      	mov	r3, r0
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f207 4784 	addw	r7, r7, #1156	; 0x484
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd90      	pop	{r4, r7, pc}

0800f3b6 <uxr_buffer_create_subscriber_bin>:
        uxrSession* session,
        uxrStreamId stream_id,
        uxrObjectId object_id,
        uxrObjectId participant_id,
        uint8_t mode)
{
 800f3b6:	b590      	push	{r4, r7, lr}
 800f3b8:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800f3bc:	af02      	add	r7, sp, #8
 800f3be:	f507 6490 	add.w	r4, r7, #1152	; 0x480
 800f3c2:	f2a4 4474 	subw	r4, r4, #1140	; 0x474
 800f3c6:	6020      	str	r0, [r4, #0]
 800f3c8:	f507 6090 	add.w	r0, r7, #1152	; 0x480
 800f3cc:	f5a0 608f 	sub.w	r0, r0, #1144	; 0x478
 800f3d0:	6001      	str	r1, [r0, #0]
 800f3d2:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 800f3d6:	f2a1 417c 	subw	r1, r1, #1148	; 0x47c
 800f3da:	600a      	str	r2, [r1, #0]
 800f3dc:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 800f3e0:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 800f3e4:	6013      	str	r3, [r2, #0]
    CREATE_Payload payload;
    payload.object_representation.kind = UXR_SUBSCRIBER_ID;
 800f3e6:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f3ea:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f3ee:	2204      	movs	r2, #4
 800f3f0:	711a      	strb	r2, [r3, #4]
    uxr_object_id_to_raw(participant_id, payload.object_representation._.subscriber.participant_id.data);
 800f3f2:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800f3f6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800f3fa:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f3fe:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800f402:	4611      	mov	r1, r2
 800f404:	6818      	ldr	r0, [r3, #0]
 800f406:	f000 fbde 	bl	800fbc6 <uxr_object_id_to_raw>
    payload.object_representation._.subscriber.base.representation.format = DDS_XRCE_REPRESENTATION_IN_BINARY;
 800f40a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f40e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f412:	2203      	movs	r2, #3
 800f414:	721a      	strb	r2, [r3, #8]

    OBJK_Subscriber_Binary subscriber;
    subscriber.optional_subscriber_name = false;
 800f416:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f41a:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800f41e:	2200      	movs	r2, #0
 800f420:	701a      	strb	r2, [r3, #0]
    subscriber.optional_qos = false;
 800f422:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f426:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800f42a:	2200      	movs	r2, #0
 800f42c:	721a      	strb	r2, [r3, #8]

    ucdrBuffer ub;
    ucdr_init_buffer(&ub, payload.object_representation._.subscriber.base.representation._.binary_representation.data,
 800f42e:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800f432:	f103 0110 	add.w	r1, r3, #16
 800f436:	f107 0310 	add.w	r3, r7, #16
 800f43a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fa fecd 	bl	800a1de <ucdr_init_buffer>
            UXR_BINARY_SEQUENCE_MAX);
    uxr_serialize_OBJK_Subscriber_Binary(&ub, &subscriber);
 800f444:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f448:	f107 0310 	add.w	r3, r7, #16
 800f44c:	4611      	mov	r1, r2
 800f44e:	4618      	mov	r0, r3
 800f450:	f7fe fbff 	bl	800dc52 <uxr_serialize_OBJK_Subscriber_Binary>
    payload.object_representation._.subscriber.base.representation._.binary_representation.size = (uint32_t) ub.offset;
 800f454:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f458:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800f45c:	691a      	ldr	r2, [r3, #16]
 800f45e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f462:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f466:	60da      	str	r2, [r3, #12]

    return uxr_common_create_entity(session, stream_id, object_id, (uint16_t) ub.offset, mode, &payload);
 800f468:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f46c:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800f470:	691b      	ldr	r3, [r3, #16]
 800f472:	b29c      	uxth	r4, r3
 800f474:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f478:	f2a3 427c 	subw	r2, r3, #1148	; 0x47c
 800f47c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f480:	f5a3 618f 	sub.w	r1, r3, #1144	; 0x478
 800f484:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f488:	f2a3 4074 	subw	r0, r3, #1140	; 0x474
 800f48c:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800f490:	9301      	str	r3, [sp, #4]
 800f492:	f897 3490 	ldrb.w	r3, [r7, #1168]	; 0x490
 800f496:	9300      	str	r3, [sp, #0]
 800f498:	4623      	mov	r3, r4
 800f49a:	6812      	ldr	r2, [r2, #0]
 800f49c:	6809      	ldr	r1, [r1, #0]
 800f49e:	6800      	ldr	r0, [r0, #0]
 800f4a0:	f7ff fd6c 	bl	800ef7c <uxr_common_create_entity>
 800f4a4:	4603      	mov	r3, r0
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f207 4784 	addw	r7, r7, #1156	; 0x484
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd90      	pop	{r4, r7, pc}

0800f4b0 <uxr_buffer_create_datawriter_bin>:
        uxrObjectId object_id,
        uxrObjectId publisher_id,
        uxrObjectId topic_id,
        uxrQoS_t qos,
        uint8_t mode)
{
 800f4b0:	b590      	push	{r4, r7, lr}
 800f4b2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800f4b6:	af02      	add	r7, sp, #8
 800f4b8:	f507 7420 	add.w	r4, r7, #640	; 0x280
 800f4bc:	f5a4 741d 	sub.w	r4, r4, #628	; 0x274
 800f4c0:	6020      	str	r0, [r4, #0]
 800f4c2:	f507 7020 	add.w	r0, r7, #640	; 0x280
 800f4c6:	f5a0 701e 	sub.w	r0, r0, #632	; 0x278
 800f4ca:	6001      	str	r1, [r0, #0]
 800f4cc:	f507 7120 	add.w	r1, r7, #640	; 0x280
 800f4d0:	f5a1 711f 	sub.w	r1, r1, #636	; 0x27c
 800f4d4:	600a      	str	r2, [r1, #0]
 800f4d6:	f507 7220 	add.w	r2, r7, #640	; 0x280
 800f4da:	f5a2 7220 	sub.w	r2, r2, #640	; 0x280
 800f4de:	6013      	str	r3, [r2, #0]
    CREATE_Payload payload;
    payload.object_representation.kind = UXR_DATAWRITER_ID;
 800f4e0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f4e4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f4e8:	2205      	movs	r2, #5
 800f4ea:	711a      	strb	r2, [r3, #4]
    uxr_object_id_to_raw(publisher_id, payload.object_representation._.data_writer.publisher_id.data);
 800f4ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f4f0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800f4f4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f4f8:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800f4fc:	4611      	mov	r1, r2
 800f4fe:	6818      	ldr	r0, [r3, #0]
 800f500:	f000 fb61 	bl	800fbc6 <uxr_object_id_to_raw>
    payload.object_representation._.data_writer.base.representation.format = DDS_XRCE_REPRESENTATION_IN_BINARY;
 800f504:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f508:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f50c:	2203      	movs	r2, #3
 800f50e:	721a      	strb	r2, [r3, #8]

    OBJK_DataWriter_Binary datawriter;
    uxr_object_id_to_raw(topic_id, datawriter.topic_id.data);
 800f510:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f514:	4619      	mov	r1, r3
 800f516:	f8d7 0290 	ldr.w	r0, [r7, #656]	; 0x290
 800f51a:	f000 fb54 	bl	800fbc6 <uxr_object_id_to_raw>
    datawriter.optional_qos = true;
 800f51e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f522:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f526:	2201      	movs	r2, #1
 800f528:	709a      	strb	r2, [r3, #2]
    datawriter.qos.optional_ownership_strength = false;
 800f52a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f52e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f532:	2200      	movs	r2, #0
 800f534:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    datawriter.qos.base.optional_deadline_msec = false;
 800f538:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f53c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f540:	2200      	movs	r2, #0
 800f542:	739a      	strb	r2, [r3, #14]
    datawriter.qos.base.optional_lifespan_msec = false;
 800f544:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f548:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f54c:	2200      	movs	r2, #0
 800f54e:	751a      	strb	r2, [r3, #20]
    datawriter.qos.base.optional_user_data = false;
 800f550:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f554:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f558:	2200      	movs	r2, #0
 800f55a:	771a      	strb	r2, [r3, #28]

    datawriter.qos.base.optional_history_depth = qos.depth == 0 ? false : true;
 800f55c:	f8b7 3298 	ldrh.w	r3, [r7, #664]	; 0x298
 800f560:	2b00      	cmp	r3, #0
 800f562:	bf14      	ite	ne
 800f564:	2301      	movne	r3, #1
 800f566:	2300      	moveq	r3, #0
 800f568:	b2da      	uxtb	r2, r3
 800f56a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f56e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f572:	729a      	strb	r2, [r3, #10]
    datawriter.qos.base.history_depth = qos.depth;
 800f574:	f8b7 2298 	ldrh.w	r2, [r7, #664]	; 0x298
 800f578:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f57c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f580:	819a      	strh	r2, [r3, #12]

    datawriter.qos.base.qos_flags = 0;
 800f582:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f586:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f58a:	2200      	movs	r2, #0
 800f58c:	811a      	strh	r2, [r3, #8]
    if (qos.reliability == UXR_RELIABILITY_RELIABLE)
 800f58e:	f897 3295 	ldrb.w	r3, [r7, #661]	; 0x295
 800f592:	2b00      	cmp	r3, #0
 800f594:	d10c      	bne.n	800f5b0 <uxr_buffer_create_datawriter_bin+0x100>
    {
        datawriter.qos.base.qos_flags |= is_reliable;
 800f596:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f59a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f59e:	891b      	ldrh	r3, [r3, #8]
 800f5a0:	f043 0301 	orr.w	r3, r3, #1
 800f5a4:	b29a      	uxth	r2, r3
 800f5a6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f5aa:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f5ae:	811a      	strh	r2, [r3, #8]
    }
    if (qos.history == UXR_HISTORY_KEEP_LAST)
 800f5b0:	f897 3296 	ldrb.w	r3, [r7, #662]	; 0x296
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d10c      	bne.n	800f5d2 <uxr_buffer_create_datawriter_bin+0x122>
    {
        datawriter.qos.base.qos_flags |= is_history_keep_last;
 800f5b8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f5bc:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f5c0:	891b      	ldrh	r3, [r3, #8]
 800f5c2:	f043 0302 	orr.w	r3, r3, #2
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f5cc:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f5d0:	811a      	strh	r2, [r3, #8]
    }

    switch (qos.durability)
 800f5d2:	f897 3294 	ldrb.w	r3, [r7, #660]	; 0x294
 800f5d6:	2b03      	cmp	r3, #3
 800f5d8:	d834      	bhi.n	800f644 <uxr_buffer_create_datawriter_bin+0x194>
 800f5da:	a201      	add	r2, pc, #4	; (adr r2, 800f5e0 <uxr_buffer_create_datawriter_bin+0x130>)
 800f5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5e0:	0800f5f1 	.word	0x0800f5f1
 800f5e4:	0800f60d 	.word	0x0800f60d
 800f5e8:	0800f645 	.word	0x0800f645
 800f5ec:	0800f629 	.word	0x0800f629
    {
        case UXR_DURABILITY_VOLATILE:
            // datawriter.qos.base.qos_flags all flags zeroed
            break;
        case UXR_DURABILITY_TRANSIENT_LOCAL:
            datawriter.qos.base.qos_flags |= is_durability_transient_local;
 800f5f0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f5f4:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f5f8:	891b      	ldrh	r3, [r3, #8]
 800f5fa:	f043 0308 	orr.w	r3, r3, #8
 800f5fe:	b29a      	uxth	r2, r3
 800f600:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f604:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f608:	811a      	strh	r2, [r3, #8]
            break;
 800f60a:	e01c      	b.n	800f646 <uxr_buffer_create_datawriter_bin+0x196>
        case UXR_DURABILITY_TRANSIENT:
            datawriter.qos.base.qos_flags |= is_durability_transient;
 800f60c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f610:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f614:	891b      	ldrh	r3, [r3, #8]
 800f616:	f043 0310 	orr.w	r3, r3, #16
 800f61a:	b29a      	uxth	r2, r3
 800f61c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f620:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f624:	811a      	strh	r2, [r3, #8]
            break;
 800f626:	e00e      	b.n	800f646 <uxr_buffer_create_datawriter_bin+0x196>
        case UXR_DURABILITY_PERSISTENT:
            datawriter.qos.base.qos_flags |= is_durability_persistent;
 800f628:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f62c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f630:	891b      	ldrh	r3, [r3, #8]
 800f632:	f043 0320 	orr.w	r3, r3, #32
 800f636:	b29a      	uxth	r2, r3
 800f638:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f63c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f640:	811a      	strh	r2, [r3, #8]
            break;
 800f642:	e000      	b.n	800f646 <uxr_buffer_create_datawriter_bin+0x196>
        default:
            break;
 800f644:	bf00      	nop
    }

    UXR_ADD_SHARED_MEMORY_ENTITY_BIN(session, object_id, &datawriter);
 800f646:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f64a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f64e:	f5a3 711f 	sub.w	r1, r3, #636	; 0x27c
 800f652:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f656:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800f65a:	6809      	ldr	r1, [r1, #0]
 800f65c:	6818      	ldr	r0, [r3, #0]
 800f65e:	f005 f86d 	bl	801473c <uxr_add_shared_memory_entity_bin>

    ucdrBuffer ub;
    ucdr_init_buffer(&ub, payload.object_representation._.data_writer.base.representation._.binary_representation.data,
 800f662:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f666:	f103 0110 	add.w	r1, r3, #16
 800f66a:	f107 0310 	add.w	r3, r7, #16
 800f66e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f672:	4618      	mov	r0, r3
 800f674:	f7fa fdb3 	bl	800a1de <ucdr_init_buffer>
            UXR_BINARY_SEQUENCE_MAX);
    uxr_serialize_OBJK_DataWriter_Binary(&ub, &datawriter);
 800f678:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f67c:	f107 0310 	add.w	r3, r7, #16
 800f680:	4611      	mov	r1, r2
 800f682:	4618      	mov	r0, r3
 800f684:	f7fe fcb4 	bl	800dff0 <uxr_serialize_OBJK_DataWriter_Binary>
    payload.object_representation._.data_writer.base.representation._.binary_representation.size = (uint32_t) ub.offset;
 800f688:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f68c:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800f690:	691a      	ldr	r2, [r3, #16]
 800f692:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f696:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f69a:	60da      	str	r2, [r3, #12]

    return uxr_common_create_entity(session, stream_id, object_id, (uint16_t) ub.offset, mode, &payload);
 800f69c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f6a0:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800f6a4:	691b      	ldr	r3, [r3, #16]
 800f6a6:	b29c      	uxth	r4, r3
 800f6a8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f6ac:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 800f6b0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f6b4:	f5a3 711e 	sub.w	r1, r3, #632	; 0x278
 800f6b8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f6bc:	f5a3 701d 	sub.w	r0, r3, #628	; 0x274
 800f6c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f6c4:	9301      	str	r3, [sp, #4]
 800f6c6:	f897 329c 	ldrb.w	r3, [r7, #668]	; 0x29c
 800f6ca:	9300      	str	r3, [sp, #0]
 800f6cc:	4623      	mov	r3, r4
 800f6ce:	6812      	ldr	r2, [r2, #0]
 800f6d0:	6809      	ldr	r1, [r1, #0]
 800f6d2:	6800      	ldr	r0, [r0, #0]
 800f6d4:	f7ff fc52 	bl	800ef7c <uxr_common_create_entity>
 800f6d8:	4603      	mov	r3, r0
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f507 7721 	add.w	r7, r7, #644	; 0x284
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd90      	pop	{r4, r7, pc}

0800f6e4 <uxr_buffer_create_datareader_bin>:
        uxrObjectId object_id,
        uxrObjectId subscriber_id,
        uxrObjectId topic_id,
        uxrQoS_t qos,
        uint8_t mode)
{
 800f6e4:	b590      	push	{r4, r7, lr}
 800f6e6:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800f6ea:	af02      	add	r7, sp, #8
 800f6ec:	f507 7422 	add.w	r4, r7, #648	; 0x288
 800f6f0:	f5a4 741f 	sub.w	r4, r4, #636	; 0x27c
 800f6f4:	6020      	str	r0, [r4, #0]
 800f6f6:	f507 7022 	add.w	r0, r7, #648	; 0x288
 800f6fa:	f5a0 7020 	sub.w	r0, r0, #640	; 0x280
 800f6fe:	6001      	str	r1, [r0, #0]
 800f700:	f507 7122 	add.w	r1, r7, #648	; 0x288
 800f704:	f5a1 7121 	sub.w	r1, r1, #644	; 0x284
 800f708:	600a      	str	r2, [r1, #0]
 800f70a:	f507 7222 	add.w	r2, r7, #648	; 0x288
 800f70e:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 800f712:	6013      	str	r3, [r2, #0]
    CREATE_Payload payload;
    payload.object_representation.kind = UXR_DATAREADER_ID;
 800f714:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f718:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f71c:	2206      	movs	r2, #6
 800f71e:	711a      	strb	r2, [r3, #4]
    uxr_object_id_to_raw(subscriber_id, payload.object_representation._.data_reader.subscriber_id.data);
 800f720:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f724:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800f728:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f72c:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800f730:	4611      	mov	r1, r2
 800f732:	6818      	ldr	r0, [r3, #0]
 800f734:	f000 fa47 	bl	800fbc6 <uxr_object_id_to_raw>
    payload.object_representation._.data_reader.base.representation.format = DDS_XRCE_REPRESENTATION_IN_BINARY;
 800f738:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f73c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f740:	2203      	movs	r2, #3
 800f742:	721a      	strb	r2, [r3, #8]

    OBJK_DataReader_Binary datareader;
    uxr_object_id_to_raw(topic_id, datareader.topic_id.data);
 800f744:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f748:	4619      	mov	r1, r3
 800f74a:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 800f74e:	f000 fa3a 	bl	800fbc6 <uxr_object_id_to_raw>
    datareader.optional_qos = true;
 800f752:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f756:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f75a:	2201      	movs	r2, #1
 800f75c:	709a      	strb	r2, [r3, #2]
    datareader.qos.optional_contentbased_filter = false;
 800f75e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f762:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f766:	2200      	movs	r2, #0
 800f768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    datareader.qos.optional_timebasedfilter_msec = false;
 800f76c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f770:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f774:	2200      	movs	r2, #0
 800f776:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    datareader.qos.base.optional_deadline_msec = false;
 800f77a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f77e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f782:	2200      	movs	r2, #0
 800f784:	739a      	strb	r2, [r3, #14]
    datareader.qos.base.optional_lifespan_msec = false;
 800f786:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f78a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f78e:	2200      	movs	r2, #0
 800f790:	751a      	strb	r2, [r3, #20]
    datareader.qos.base.optional_user_data = false;
 800f792:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f796:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f79a:	2200      	movs	r2, #0
 800f79c:	771a      	strb	r2, [r3, #28]

    datareader.qos.base.optional_history_depth = qos.depth == 0 ? false : true;
 800f79e:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	; 0x2a0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	bf14      	ite	ne
 800f7a6:	2301      	movne	r3, #1
 800f7a8:	2300      	moveq	r3, #0
 800f7aa:	b2da      	uxtb	r2, r3
 800f7ac:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f7b0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f7b4:	729a      	strb	r2, [r3, #10]
    datareader.qos.base.history_depth = qos.depth;
 800f7b6:	f8b7 22a0 	ldrh.w	r2, [r7, #672]	; 0x2a0
 800f7ba:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f7be:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f7c2:	819a      	strh	r2, [r3, #12]

    datareader.qos.base.qos_flags = 0;
 800f7c4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f7c8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	811a      	strh	r2, [r3, #8]
    if (qos.reliability == UXR_RELIABILITY_RELIABLE)
 800f7d0:	f897 329d 	ldrb.w	r3, [r7, #669]	; 0x29d
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d10c      	bne.n	800f7f2 <uxr_buffer_create_datareader_bin+0x10e>
    {
        datareader.qos.base.qos_flags |= is_reliable;
 800f7d8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f7dc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f7e0:	891b      	ldrh	r3, [r3, #8]
 800f7e2:	f043 0301 	orr.w	r3, r3, #1
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f7ec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f7f0:	811a      	strh	r2, [r3, #8]
    }
    if (qos.history == UXR_HISTORY_KEEP_LAST)
 800f7f2:	f897 329e 	ldrb.w	r3, [r7, #670]	; 0x29e
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d10c      	bne.n	800f814 <uxr_buffer_create_datareader_bin+0x130>
    {
        datareader.qos.base.qos_flags |= is_history_keep_last;
 800f7fa:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f7fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f802:	891b      	ldrh	r3, [r3, #8]
 800f804:	f043 0302 	orr.w	r3, r3, #2
 800f808:	b29a      	uxth	r2, r3
 800f80a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f80e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f812:	811a      	strh	r2, [r3, #8]
    }

    switch (qos.durability)
 800f814:	f897 329c 	ldrb.w	r3, [r7, #668]	; 0x29c
 800f818:	2b03      	cmp	r3, #3
 800f81a:	d835      	bhi.n	800f888 <uxr_buffer_create_datareader_bin+0x1a4>
 800f81c:	a201      	add	r2, pc, #4	; (adr r2, 800f824 <uxr_buffer_create_datareader_bin+0x140>)
 800f81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f822:	bf00      	nop
 800f824:	0800f835 	.word	0x0800f835
 800f828:	0800f851 	.word	0x0800f851
 800f82c:	0800f889 	.word	0x0800f889
 800f830:	0800f86d 	.word	0x0800f86d
    {
        case UXR_DURABILITY_VOLATILE:
            // datawriter.qos.base.qos_flags all flags zeroed
            break;
        case UXR_DURABILITY_TRANSIENT_LOCAL:
            datareader.qos.base.qos_flags |= is_durability_transient_local;
 800f834:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f838:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f83c:	891b      	ldrh	r3, [r3, #8]
 800f83e:	f043 0308 	orr.w	r3, r3, #8
 800f842:	b29a      	uxth	r2, r3
 800f844:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f848:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f84c:	811a      	strh	r2, [r3, #8]
            break;
 800f84e:	e01c      	b.n	800f88a <uxr_buffer_create_datareader_bin+0x1a6>
        case UXR_DURABILITY_TRANSIENT:
            datareader.qos.base.qos_flags |= is_durability_transient;
 800f850:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f854:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f858:	891b      	ldrh	r3, [r3, #8]
 800f85a:	f043 0310 	orr.w	r3, r3, #16
 800f85e:	b29a      	uxth	r2, r3
 800f860:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f864:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f868:	811a      	strh	r2, [r3, #8]
            break;
 800f86a:	e00e      	b.n	800f88a <uxr_buffer_create_datareader_bin+0x1a6>
        case UXR_DURABILITY_PERSISTENT:
            datareader.qos.base.qos_flags |= is_durability_persistent;
 800f86c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f870:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f874:	891b      	ldrh	r3, [r3, #8]
 800f876:	f043 0320 	orr.w	r3, r3, #32
 800f87a:	b29a      	uxth	r2, r3
 800f87c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f880:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800f884:	811a      	strh	r2, [r3, #8]
            break;
 800f886:	e000      	b.n	800f88a <uxr_buffer_create_datareader_bin+0x1a6>
        default:
            break;
 800f888:	bf00      	nop
    }

    UXR_ADD_SHARED_MEMORY_ENTITY_BIN(session, object_id, &datareader);
 800f88a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f88e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f892:	f5a3 7121 	sub.w	r1, r3, #644	; 0x284
 800f896:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f89a:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800f89e:	6809      	ldr	r1, [r1, #0]
 800f8a0:	6818      	ldr	r0, [r3, #0]
 800f8a2:	f004 ff4b 	bl	801473c <uxr_add_shared_memory_entity_bin>

    ucdrBuffer ub;
    ucdr_init_buffer(&ub, payload.object_representation._.data_reader.base.representation._.binary_representation.data,
 800f8a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f8aa:	f103 0110 	add.w	r1, r3, #16
 800f8ae:	f107 0310 	add.w	r3, r7, #16
 800f8b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fa fc91 	bl	800a1de <ucdr_init_buffer>
            UXR_BINARY_SEQUENCE_MAX);
    uxr_serialize_OBJK_DataReader_Binary(&ub, &datareader);
 800f8bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f8c0:	f107 0310 	add.w	r3, r7, #16
 800f8c4:	4611      	mov	r1, r2
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7fe fb56 	bl	800df78 <uxr_serialize_OBJK_DataReader_Binary>
    payload.object_representation._.data_reader.base.representation._.binary_representation.size = (uint32_t) ub.offset;
 800f8cc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f8d0:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800f8d4:	691a      	ldr	r2, [r3, #16]
 800f8d6:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f8da:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f8de:	60da      	str	r2, [r3, #12]

    return uxr_common_create_entity(session, stream_id, object_id, (uint16_t) ub.offset, mode, &payload);
 800f8e0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f8e4:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800f8e8:	691b      	ldr	r3, [r3, #16]
 800f8ea:	b29c      	uxth	r4, r3
 800f8ec:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f8f0:	f5a3 7221 	sub.w	r2, r3, #644	; 0x284
 800f8f4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f8f8:	f5a3 7120 	sub.w	r1, r3, #640	; 0x280
 800f8fc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f900:	f5a3 701f 	sub.w	r0, r3, #636	; 0x27c
 800f904:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f908:	9301      	str	r3, [sp, #4]
 800f90a:	f897 32a4 	ldrb.w	r3, [r7, #676]	; 0x2a4
 800f90e:	9300      	str	r3, [sp, #0]
 800f910:	4623      	mov	r3, r4
 800f912:	6812      	ldr	r2, [r2, #0]
 800f914:	6809      	ldr	r1, [r1, #0]
 800f916:	6800      	ldr	r0, [r0, #0]
 800f918:	f7ff fb30 	bl	800ef7c <uxr_common_create_entity>
 800f91c:	4603      	mov	r3, r0
}
 800f91e:	4618      	mov	r0, r3
 800f920:	f507 7723 	add.w	r7, r7, #652	; 0x28c
 800f924:	46bd      	mov	sp, r7
 800f926:	bd90      	pop	{r4, r7, pc}

0800f928 <uxr_buffer_create_topic_xml>:
        uxrStreamId stream_id,
        uxrObjectId object_id,
        uxrObjectId participant_id,
        const char* xml,
        uint8_t mode)
{
 800f928:	b590      	push	{r4, r7, lr}
 800f92a:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 800f92e:	af02      	add	r7, sp, #8
 800f930:	f507 740a 	add.w	r4, r7, #552	; 0x228
 800f934:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 800f938:	6020      	str	r0, [r4, #0]
 800f93a:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800f93e:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 800f942:	6001      	str	r1, [r0, #0]
 800f944:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800f948:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 800f94c:	600a      	str	r2, [r1, #0]
 800f94e:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800f952:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800f956:	6013      	str	r3, [r2, #0]
    //assert with the object_id type

    CREATE_Payload payload;
    payload.object_representation.kind = DDS_XRCE_OBJK_TOPIC;
 800f958:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800f95c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f960:	2202      	movs	r2, #2
 800f962:	711a      	strb	r2, [r3, #4]
    uxr_object_id_to_raw(participant_id, payload.object_representation._.topic.participant_id.data);
 800f964:	f107 0314 	add.w	r3, r7, #20
 800f968:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800f96c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800f970:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800f974:	4611      	mov	r1, r2
 800f976:	6818      	ldr	r0, [r3, #0]
 800f978:	f000 f925 	bl	800fbc6 <uxr_object_id_to_raw>

    return create_entity_xml(session, stream_id, object_id, xml, mode, &payload);
 800f97c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800f980:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 800f984:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800f988:	f5a3 7108 	sub.w	r1, r3, #544	; 0x220
 800f98c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800f990:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 800f994:	f107 0314 	add.w	r3, r7, #20
 800f998:	9301      	str	r3, [sp, #4]
 800f99a:	f897 323c 	ldrb.w	r3, [r7, #572]	; 0x23c
 800f99e:	9300      	str	r3, [sp, #0]
 800f9a0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800f9a4:	6812      	ldr	r2, [r2, #0]
 800f9a6:	6809      	ldr	r1, [r1, #0]
 800f9a8:	6800      	ldr	r0, [r0, #0]
 800f9aa:	f000 f8a6 	bl	800fafa <create_entity_xml>
 800f9ae:	4603      	mov	r3, r0
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd90      	pop	{r4, r7, pc}

0800f9ba <uxr_buffer_create_subscriber_xml>:
        uxrStreamId stream_id,
        uxrObjectId object_id,
        uxrObjectId participant_id,
        const char* xml,
        uint8_t mode)
{
 800f9ba:	b590      	push	{r4, r7, lr}
 800f9bc:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 800f9c0:	af02      	add	r7, sp, #8
 800f9c2:	f507 740a 	add.w	r4, r7, #552	; 0x228
 800f9c6:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 800f9ca:	6020      	str	r0, [r4, #0]
 800f9cc:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800f9d0:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 800f9d4:	6001      	str	r1, [r0, #0]
 800f9d6:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800f9da:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 800f9de:	600a      	str	r2, [r1, #0]
 800f9e0:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800f9e4:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800f9e8:	6013      	str	r3, [r2, #0]
    //assert with the object_id type

    CREATE_Payload payload;
    payload.object_representation.kind = DDS_XRCE_OBJK_SUBSCRIBER;
 800f9ea:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800f9ee:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f9f2:	2204      	movs	r2, #4
 800f9f4:	711a      	strb	r2, [r3, #4]
    uxr_object_id_to_raw(participant_id, payload.object_representation._.subscriber.participant_id.data);
 800f9f6:	f107 0314 	add.w	r3, r7, #20
 800f9fa:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800f9fe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800fa02:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800fa06:	4611      	mov	r1, r2
 800fa08:	6818      	ldr	r0, [r3, #0]
 800fa0a:	f000 f8dc 	bl	800fbc6 <uxr_object_id_to_raw>

    return create_entity_xml(session, stream_id, object_id, xml, mode, &payload);
 800fa0e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800fa12:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 800fa16:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800fa1a:	f5a3 7108 	sub.w	r1, r3, #544	; 0x220
 800fa1e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800fa22:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 800fa26:	f107 0314 	add.w	r3, r7, #20
 800fa2a:	9301      	str	r3, [sp, #4]
 800fa2c:	f897 323c 	ldrb.w	r3, [r7, #572]	; 0x23c
 800fa30:	9300      	str	r3, [sp, #0]
 800fa32:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800fa36:	6812      	ldr	r2, [r2, #0]
 800fa38:	6809      	ldr	r1, [r1, #0]
 800fa3a:	6800      	ldr	r0, [r0, #0]
 800fa3c:	f000 f85d 	bl	800fafa <create_entity_xml>
 800fa40:	4603      	mov	r3, r0
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd90      	pop	{r4, r7, pc}

0800fa4c <uxr_buffer_create_datareader_xml>:
        uxrStreamId stream_id,
        uxrObjectId object_id,
        uxrObjectId subscriber_id,
        const char* xml,
        uint8_t mode)
{
 800fa4c:	b590      	push	{r4, r7, lr}
 800fa4e:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 800fa52:	af02      	add	r7, sp, #8
 800fa54:	f507 740a 	add.w	r4, r7, #552	; 0x228
 800fa58:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 800fa5c:	6020      	str	r0, [r4, #0]
 800fa5e:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800fa62:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 800fa66:	6001      	str	r1, [r0, #0]
 800fa68:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800fa6c:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 800fa70:	600a      	str	r2, [r1, #0]
 800fa72:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800fa76:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800fa7a:	6013      	str	r3, [r2, #0]
    //assert with the object_id type

    UXR_ADD_SHARED_MEMORY_ENTITY_XML(session, object_id, xml);
 800fa7c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800fa80:	f5a3 7109 	sub.w	r1, r3, #548	; 0x224
 800fa84:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800fa88:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800fa8c:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800fa90:	6809      	ldr	r1, [r1, #0]
 800fa92:	6818      	ldr	r0, [r3, #0]
 800fa94:	f004 fdf8 	bl	8014688 <uxr_add_shared_memory_entity_xml>

    CREATE_Payload payload;
    payload.object_representation.kind = DDS_XRCE_OBJK_DATAREADER;
 800fa98:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800fa9c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800faa0:	2206      	movs	r2, #6
 800faa2:	711a      	strb	r2, [r3, #4]
    uxr_object_id_to_raw(subscriber_id, payload.object_representation._.data_reader.subscriber_id.data);
 800faa4:	f107 0314 	add.w	r3, r7, #20
 800faa8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800faac:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800fab0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800fab4:	4611      	mov	r1, r2
 800fab6:	6818      	ldr	r0, [r3, #0]
 800fab8:	f000 f885 	bl	800fbc6 <uxr_object_id_to_raw>

    return create_entity_xml(session, stream_id, object_id, xml, mode, &payload);
 800fabc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800fac0:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 800fac4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800fac8:	f5a3 7108 	sub.w	r1, r3, #544	; 0x220
 800facc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800fad0:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 800fad4:	f107 0314 	add.w	r3, r7, #20
 800fad8:	9301      	str	r3, [sp, #4]
 800fada:	f897 323c 	ldrb.w	r3, [r7, #572]	; 0x23c
 800fade:	9300      	str	r3, [sp, #0]
 800fae0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800fae4:	6812      	ldr	r2, [r2, #0]
 800fae6:	6809      	ldr	r1, [r1, #0]
 800fae8:	6800      	ldr	r0, [r0, #0]
 800faea:	f000 f806 	bl	800fafa <create_entity_xml>
 800faee:	4603      	mov	r3, r0
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd90      	pop	{r4, r7, pc}

0800fafa <create_entity_xml>:
        uxrStreamId stream_id,
        uxrObjectId object_id,
        const char* xml,
        uint8_t mode,
        CREATE_Payload* payload)
{
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b086      	sub	sp, #24
 800fafe:	af02      	add	r7, sp, #8
 800fb00:	60f8      	str	r0, [r7, #12]
 800fb02:	60b9      	str	r1, [r7, #8]
 800fb04:	607a      	str	r2, [r7, #4]
 800fb06:	603b      	str	r3, [r7, #0]
    // Use participant access to access to the xml base of any object variant. //Future elegant change?
    payload->object_representation._.participant.base.representation.format = DDS_XRCE_REPRESENTATION_AS_XML_STRING;
 800fb08:	69fb      	ldr	r3, [r7, #28]
 800fb0a:	2202      	movs	r2, #2
 800fb0c:	721a      	strb	r2, [r3, #8]
    payload->object_representation._.participant.base.representation._.xml_string_represenatation = (char*)xml;
 800fb0e:	69fb      	ldr	r3, [r7, #28]
 800fb10:	683a      	ldr	r2, [r7, #0]
 800fb12:	60da      	str	r2, [r3, #12]

    return uxr_common_create_entity(session, stream_id, object_id, (uint16_t)(strlen(xml) + 1), mode, payload);
 800fb14:	6838      	ldr	r0, [r7, #0]
 800fb16:	f7f0 fb85 	bl	8000224 <strlen>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	b29b      	uxth	r3, r3
 800fb1e:	3301      	adds	r3, #1
 800fb20:	b29a      	uxth	r2, r3
 800fb22:	69fb      	ldr	r3, [r7, #28]
 800fb24:	9301      	str	r3, [sp, #4]
 800fb26:	7e3b      	ldrb	r3, [r7, #24]
 800fb28:	9300      	str	r3, [sp, #0]
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	687a      	ldr	r2, [r7, #4]
 800fb2e:	68b9      	ldr	r1, [r7, #8]
 800fb30:	68f8      	ldr	r0, [r7, #12]
 800fb32:	f7ff fa23 	bl	800ef7c <uxr_common_create_entity>
 800fb36:	4603      	mov	r3, r0
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3710      	adds	r7, #16
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <uxr_object_id>:
//                             PUBLIC
//==================================================================
uxrObjectId uxr_object_id(
        uint16_t id,
        uint8_t type)
{
 800fb40:	b480      	push	{r7}
 800fb42:	b085      	sub	sp, #20
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	4603      	mov	r3, r0
 800fb48:	460a      	mov	r2, r1
 800fb4a:	80fb      	strh	r3, [r7, #6]
 800fb4c:	4613      	mov	r3, r2
 800fb4e:	717b      	strb	r3, [r7, #5]
    uxrObjectId object_id;
    object_id.id = id;
 800fb50:	88fb      	ldrh	r3, [r7, #6]
 800fb52:	813b      	strh	r3, [r7, #8]
    object_id.type = type;
 800fb54:	797b      	ldrb	r3, [r7, #5]
 800fb56:	72bb      	strb	r3, [r7, #10]
    return object_id;
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	60fb      	str	r3, [r7, #12]
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	89ba      	ldrh	r2, [r7, #12]
 800fb60:	f362 030f 	bfi	r3, r2, #0, #16
 800fb64:	89fa      	ldrh	r2, [r7, #14]
 800fb66:	f362 431f 	bfi	r3, r2, #16, #16
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	3714      	adds	r7, #20
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb74:	4770      	bx	lr

0800fb76 <uxr_object_id_from_raw>:

uxrObjectId uxr_object_id_from_raw(
        const uint8_t* raw)
{
 800fb76:	b480      	push	{r7}
 800fb78:	b085      	sub	sp, #20
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
    uxrObjectId object_id;
    object_id.id = (uint16_t)((((uint16_t)raw[0]) << 4) + (raw[1] >> 4));
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	011b      	lsls	r3, r3, #4
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	781b      	ldrb	r3, [r3, #0]
 800fb8e:	091b      	lsrs	r3, r3, #4
 800fb90:	b2db      	uxtb	r3, r3
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	4413      	add	r3, r2
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	813b      	strh	r3, [r7, #8]
    object_id.type = raw[1] & 0x0F;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	3301      	adds	r3, #1
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	f003 030f 	and.w	r3, r3, #15
 800fba4:	b2db      	uxtb	r3, r3
 800fba6:	72bb      	strb	r3, [r7, #10]
    return object_id;
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	60fb      	str	r3, [r7, #12]
 800fbac:	2300      	movs	r3, #0
 800fbae:	89ba      	ldrh	r2, [r7, #12]
 800fbb0:	f362 030f 	bfi	r3, r2, #0, #16
 800fbb4:	89fa      	ldrh	r2, [r7, #14]
 800fbb6:	f362 431f 	bfi	r3, r2, #16, #16
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3714      	adds	r7, #20
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr

0800fbc6 <uxr_object_id_to_raw>:

void uxr_object_id_to_raw(
        uxrObjectId object_id,
        uint8_t* raw)
{
 800fbc6:	b480      	push	{r7}
 800fbc8:	b083      	sub	sp, #12
 800fbca:	af00      	add	r7, sp, #0
 800fbcc:	6078      	str	r0, [r7, #4]
 800fbce:	6039      	str	r1, [r7, #0]
    raw[0] = (uint8_t) (object_id.id >> 4);
 800fbd0:	88bb      	ldrh	r3, [r7, #4]
 800fbd2:	091b      	lsrs	r3, r3, #4
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	b2da      	uxtb	r2, r3
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	701a      	strb	r2, [r3, #0]
    raw[1] = (uint8_t)((((uint8_t) (object_id.id)) << 4) + (object_id.type & 0x0F));
 800fbdc:	88bb      	ldrh	r3, [r7, #4]
 800fbde:	b2db      	uxtb	r3, r3
 800fbe0:	011b      	lsls	r3, r3, #4
 800fbe2:	b2d9      	uxtb	r1, r3
 800fbe4:	79bb      	ldrb	r3, [r7, #6]
 800fbe6:	f003 030f 	and.w	r3, r3, #15
 800fbea:	b2da      	uxtb	r2, r3
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	3301      	adds	r3, #1
 800fbf0:	440a      	add	r2, r1
 800fbf2:	b2d2      	uxtb	r2, r2
 800fbf4:	701a      	strb	r2, [r3, #0]
}
 800fbf6:	bf00      	nop
 800fbf8:	370c      	adds	r7, #12
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr

0800fc02 <uxr_buffer_request_data>:
        uxrSession* session,
        uxrStreamId stream_id,
        uxrObjectId datareader_id,
        uxrStreamId data_stream_id,
        const uxrDeliveryControl* const control)
{
 800fc02:	b580      	push	{r7, lr}
 800fc04:	b098      	sub	sp, #96	; 0x60
 800fc06:	af02      	add	r7, sp, #8
 800fc08:	60f8      	str	r0, [r7, #12]
 800fc0a:	60b9      	str	r1, [r7, #8]
 800fc0c:	607a      	str	r2, [r7, #4]
 800fc0e:	603b      	str	r3, [r7, #0]
    uint16_t request_id = UXR_INVALID_REQUEST_ID;
 800fc10:	2300      	movs	r3, #0
 800fc12:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    READ_DATA_Payload payload;
    payload.read_specification.preferred_stream_id = data_stream_id.raw;
 800fc16:	783b      	ldrb	r3, [r7, #0]
 800fc18:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    payload.read_specification.data_format = FORMAT_DATA;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    payload.read_specification.optional_content_filter_expression = false; //not supported yet
 800fc22:	2300      	movs	r3, #0
 800fc24:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    payload.read_specification.optional_delivery_control = (control != NULL);
 800fc28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	bf14      	ite	ne
 800fc2e:	2301      	movne	r3, #1
 800fc30:	2300      	moveq	r3, #0
 800fc32:	b2db      	uxtb	r3, r3
 800fc34:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    if (control != NULL)
 800fc38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d00e      	beq.n	800fc5c <uxr_buffer_request_data+0x5a>
    {
        payload.read_specification.delivery_control.max_bytes_per_seconds = control->max_bytes_per_second;
 800fc3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc40:	889b      	ldrh	r3, [r3, #4]
 800fc42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        payload.read_specification.delivery_control.max_elapsed_time = control->max_elapsed_time;
 800fc46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc48:	885b      	ldrh	r3, [r3, #2]
 800fc4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        payload.read_specification.delivery_control.max_samples = control->max_samples;
 800fc4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc50:	881b      	ldrh	r3, [r3, #0]
 800fc52:	87fb      	strh	r3, [r7, #62]	; 0x3e
        payload.read_specification.delivery_control.min_pace_period = control->min_pace_period;
 800fc54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc56:	88db      	ldrh	r3, [r3, #6]
 800fc58:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    }

    // Change this when microcdr supports size_of function.
    size_t payload_length = 0; //READ_DATA_Payload_size(&payload);
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	653b      	str	r3, [r7, #80]	; 0x50
    payload_length += 4; // (request id + object_id), no padding.
 800fc60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc62:	3304      	adds	r3, #4
 800fc64:	653b      	str	r3, [r7, #80]	; 0x50
    payload_length += 4; // stream, format, and two optionals.
 800fc66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc68:	3304      	adds	r3, #4
 800fc6a:	653b      	str	r3, [r7, #80]	; 0x50
    payload_length += (control != NULL) ? 8 : 0; // delivery control
 800fc6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d001      	beq.n	800fc76 <uxr_buffer_request_data+0x74>
 800fc72:	2308      	movs	r3, #8
 800fc74:	e000      	b.n	800fc78 <uxr_buffer_request_data+0x76>
 800fc76:	2300      	movs	r3, #0
 800fc78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc7a:	4413      	add	r3, r2
 800fc7c:	653b      	str	r3, [r7, #80]	; 0x50

    ucdrBuffer ub;

    UXR_LOCK_STREAM_ID(session, stream_id);
 800fc7e:	68b9      	ldr	r1, [r7, #8]
 800fc80:	68f8      	ldr	r0, [r7, #12]
 800fc82:	f003 fff0 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 800fc86:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fc88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d002      	beq.n	800fc94 <uxr_buffer_request_data+0x92>
 800fc8e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fc90:	f003 ffcd 	bl	8013c2e <uxr_lock>

    if (uxr_prepare_stream_to_write_submessage(session, stream_id, payload_length, &ub, SUBMESSAGE_ID_READ_DATA, 0))
 800fc94:	f107 0310 	add.w	r3, r7, #16
 800fc98:	2200      	movs	r2, #0
 800fc9a:	9201      	str	r2, [sp, #4]
 800fc9c:	2208      	movs	r2, #8
 800fc9e:	9200      	str	r2, [sp, #0]
 800fca0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fca2:	68b9      	ldr	r1, [r7, #8]
 800fca4:	68f8      	ldr	r0, [r7, #12]
 800fca6:	f001 fc33 	bl	8011510 <uxr_prepare_stream_to_write_submessage>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d011      	beq.n	800fcd4 <uxr_buffer_request_data+0xd2>
    {
        request_id = uxr_init_base_object_request(&session->info, datareader_id, &payload.base);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fcb6:	6879      	ldr	r1, [r7, #4]
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f001 fe17 	bl	80118ec <uxr_init_base_object_request>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        (void) uxr_serialize_READ_DATA_Payload(&ub, &payload);
 800fcc4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fcc8:	f107 0310 	add.w	r3, r7, #16
 800fccc:	4611      	mov	r1, r2
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7fe fe28 	bl	800e924 <uxr_serialize_READ_DATA_Payload>
    }

    UXR_UNLOCK_STREAM_ID(session, stream_id);
 800fcd4:	68b9      	ldr	r1, [r7, #8]
 800fcd6:	68f8      	ldr	r0, [r7, #12]
 800fcd8:	f003 ffc5 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 800fcdc:	64b8      	str	r0, [r7, #72]	; 0x48
 800fcde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d002      	beq.n	800fcea <uxr_buffer_request_data+0xe8>
 800fce4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fce6:	f003 ffb1 	bl	8013c4c <uxr_unlock>

    return request_id;
 800fcea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3758      	adds	r7, #88	; 0x58
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
	...

0800fcf8 <read_submessage_format>:
        uint16_t length,
        uint8_t format,
        uxrStreamId stream_id,
        uxrObjectId object_id,
        uint16_t request_id)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b086      	sub	sp, #24
 800fcfc:	af02      	add	r7, sp, #8
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	4611      	mov	r1, r2
 800fd04:	461a      	mov	r2, r3
 800fd06:	460b      	mov	r3, r1
 800fd08:	80fb      	strh	r3, [r7, #6]
 800fd0a:	4613      	mov	r3, r2
 800fd0c:	717b      	strb	r3, [r7, #5]
    switch (format)
 800fd0e:	797b      	ldrb	r3, [r7, #5]
 800fd10:	2b0e      	cmp	r3, #14
 800fd12:	d858      	bhi.n	800fdc6 <read_submessage_format+0xce>
 800fd14:	a201      	add	r2, pc, #4	; (adr r2, 800fd1c <read_submessage_format+0x24>)
 800fd16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd1a:	bf00      	nop
 800fd1c:	0800fd59 	.word	0x0800fd59
 800fd20:	0800fdc7 	.word	0x0800fdc7
 800fd24:	0800fd6f 	.word	0x0800fd6f
 800fd28:	0800fdc7 	.word	0x0800fdc7
 800fd2c:	0800fdc7 	.word	0x0800fdc7
 800fd30:	0800fdc7 	.word	0x0800fdc7
 800fd34:	0800fdc7 	.word	0x0800fdc7
 800fd38:	0800fdc7 	.word	0x0800fdc7
 800fd3c:	0800fd85 	.word	0x0800fd85
 800fd40:	0800fdc7 	.word	0x0800fdc7
 800fd44:	0800fd9b 	.word	0x0800fd9b
 800fd48:	0800fdc7 	.word	0x0800fdc7
 800fd4c:	0800fdc7 	.word	0x0800fdc7
 800fd50:	0800fdc7 	.word	0x0800fdc7
 800fd54:	0800fdb1 	.word	0x0800fdb1
    {
        case FORMAT_DATA:
            read_format_data(session, data, length, stream_id, object_id, request_id);
 800fd58:	88fa      	ldrh	r2, [r7, #6]
 800fd5a:	8c3b      	ldrh	r3, [r7, #32]
 800fd5c:	9301      	str	r3, [sp, #4]
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	9300      	str	r3, [sp, #0]
 800fd62:	69bb      	ldr	r3, [r7, #24]
 800fd64:	68b9      	ldr	r1, [r7, #8]
 800fd66:	68f8      	ldr	r0, [r7, #12]
 800fd68:	f000 f832 	bl	800fdd0 <read_format_data>
            break;
 800fd6c:	e02c      	b.n	800fdc8 <read_submessage_format+0xd0>

        case FORMAT_SAMPLE:
            read_format_sample(session, data, length, stream_id, object_id, request_id);
 800fd6e:	88fa      	ldrh	r2, [r7, #6]
 800fd70:	8c3b      	ldrh	r3, [r7, #32]
 800fd72:	9301      	str	r3, [sp, #4]
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	9300      	str	r3, [sp, #0]
 800fd78:	69bb      	ldr	r3, [r7, #24]
 800fd7a:	68b9      	ldr	r1, [r7, #8]
 800fd7c:	68f8      	ldr	r0, [r7, #12]
 800fd7e:	f000 f930 	bl	800ffe2 <read_format_sample>
            break;
 800fd82:	e021      	b.n	800fdc8 <read_submessage_format+0xd0>

        case FORMAT_DATA_SEQ:
            read_format_data_seq(session, data, length, stream_id, object_id, request_id);
 800fd84:	88fa      	ldrh	r2, [r7, #6]
 800fd86:	8c3b      	ldrh	r3, [r7, #32]
 800fd88:	9301      	str	r3, [sp, #4]
 800fd8a:	69fb      	ldr	r3, [r7, #28]
 800fd8c:	9300      	str	r3, [sp, #0]
 800fd8e:	69bb      	ldr	r3, [r7, #24]
 800fd90:	68b9      	ldr	r1, [r7, #8]
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f000 f933 	bl	800fffe <read_format_data_seq>
            break;
 800fd98:	e016      	b.n	800fdc8 <read_submessage_format+0xd0>

        case FORMAT_SAMPLE_SEQ:
            read_format_sample_seq(session, data, length, stream_id, object_id, request_id);
 800fd9a:	88fa      	ldrh	r2, [r7, #6]
 800fd9c:	8c3b      	ldrh	r3, [r7, #32]
 800fd9e:	9301      	str	r3, [sp, #4]
 800fda0:	69fb      	ldr	r3, [r7, #28]
 800fda2:	9300      	str	r3, [sp, #0]
 800fda4:	69bb      	ldr	r3, [r7, #24]
 800fda6:	68b9      	ldr	r1, [r7, #8]
 800fda8:	68f8      	ldr	r0, [r7, #12]
 800fdaa:	f000 f936 	bl	801001a <read_format_sample_seq>
            break;
 800fdae:	e00b      	b.n	800fdc8 <read_submessage_format+0xd0>

        case FORMAT_PACKED_SAMPLES:
            read_format_packed_samples(session, data, length, stream_id, object_id, request_id);
 800fdb0:	88fa      	ldrh	r2, [r7, #6]
 800fdb2:	8c3b      	ldrh	r3, [r7, #32]
 800fdb4:	9301      	str	r3, [sp, #4]
 800fdb6:	69fb      	ldr	r3, [r7, #28]
 800fdb8:	9300      	str	r3, [sp, #0]
 800fdba:	69bb      	ldr	r3, [r7, #24]
 800fdbc:	68b9      	ldr	r1, [r7, #8]
 800fdbe:	68f8      	ldr	r0, [r7, #12]
 800fdc0:	f000 f939 	bl	8010036 <read_format_packed_samples>
            break;
 800fdc4:	e000      	b.n	800fdc8 <read_submessage_format+0xd0>

        default:
            break;
 800fdc6:	bf00      	nop
    }
}
 800fdc8:	bf00      	nop
 800fdca:	3710      	adds	r7, #16
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <read_format_data>:
        ucdrBuffer* ub,
        const uint16_t length,
        uxrStreamId stream_id,
        uxrObjectId object_id,
        uint16_t request_id)
{
 800fdd0:	b590      	push	{r4, r7, lr}
 800fdd2:	b09f      	sub	sp, #124	; 0x7c
 800fdd4:	af04      	add	r7, sp, #16
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	60b9      	str	r1, [r7, #8]
 800fdda:	603b      	str	r3, [r7, #0]
 800fddc:	4613      	mov	r3, r2
 800fdde:	80fb      	strh	r3, [r7, #6]
    ucdrBuffer temp_buffer;
    ucdr_init_buffer(&temp_buffer, ub->iterator, (size_t)(ub->final - ub->iterator));
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	6899      	ldr	r1, [r3, #8]
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	685a      	ldr	r2, [r3, #4]
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	689b      	ldr	r3, [r3, #8]
 800fdec:	1ad3      	subs	r3, r2, r3
 800fdee:	461a      	mov	r2, r3
 800fdf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7fa f9f2 	bl	800a1de <ucdr_init_buffer>
    ucdr_set_on_full_buffer_callback(&temp_buffer, ub->on_full_buffer, ub->args);
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	6999      	ldr	r1, [r3, #24]
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	69da      	ldr	r2, [r3, #28]
 800fe02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7fa f9d7 	bl	800a1ba <ucdr_set_on_full_buffer_callback>
    if (ub->args)
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	69db      	ldr	r3, [r3, #28]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d005      	beq.n	800fe20 <read_format_data+0x50>
    {
        uxrInputReliableStream* stream = (uxrInputReliableStream*) ub->args;
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	69db      	ldr	r3, [r3, #28]
 800fe18:	667b      	str	r3, [r7, #100]	; 0x64
        stream->cleanup_flag = false;
 800fe1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	751a      	strb	r2, [r3, #20]
    }

    switch (object_id.type)
 800fe20:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800fe24:	2b08      	cmp	r3, #8
 800fe26:	d024      	beq.n	800fe72 <read_format_data+0xa2>
 800fe28:	2b08      	cmp	r3, #8
 800fe2a:	f300 80c2 	bgt.w	800ffb2 <read_format_data+0x1e2>
 800fe2e:	2b06      	cmp	r3, #6
 800fe30:	d002      	beq.n	800fe38 <read_format_data+0x68>
 800fe32:	2b07      	cmp	r3, #7
 800fe34:	d068      	beq.n	800ff08 <read_format_data+0x138>
            }
            ub->iterator += length;
            break;
        }
        default:
            break;
 800fe36:	e0bc      	b.n	800ffb2 <read_format_data+0x1e2>
            if (NULL != session->on_topic)
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	f000 80b9 	beq.w	800ffb6 <read_format_data+0x1e6>
                session->on_topic(session, object_id, request_id, stream_id, &temp_buffer, length,
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f8d3 41d0 	ldr.w	r4, [r3, #464]	; 0x1d0
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800fe50:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800fe54:	9302      	str	r3, [sp, #8]
 800fe56:	88fb      	ldrh	r3, [r7, #6]
 800fe58:	9301      	str	r3, [sp, #4]
 800fe5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fe5e:	9300      	str	r3, [sp, #0]
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fe64:	68f8      	ldr	r0, [r7, #12]
 800fe66:	47a0      	blx	r4
                session->on_data_flag = true;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
            break;
 800fe70:	e0a1      	b.n	800ffb6 <read_format_data+0x1e6>
            if (NULL != session->on_request)
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	f000 809e 	beq.w	800ffba <read_format_data+0x1ea>
                size_t offset = temp_buffer.offset;
 800fe7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe80:	663b      	str	r3, [r7, #96]	; 0x60
                if (uxr_deserialize_SampleIdentity(&temp_buffer, &sample_id))
 800fe82:	f107 0218 	add.w	r2, r7, #24
 800fe86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fe8a:	4611      	mov	r1, r2
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7ff f800 	bl	800ee92 <uxr_deserialize_SampleIdentity>
 800fe92:	4603      	mov	r3, r0
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	f000 8090 	beq.w	800ffba <read_format_data+0x1ea>
                    uint16_t request_length = (uint16_t)(length - (temp_buffer.offset - offset));
 800fe9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe9c:	b29a      	uxth	r2, r3
 800fe9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fea0:	b29b      	uxth	r3, r3
 800fea2:	1ad3      	subs	r3, r2, r3
 800fea4:	b29a      	uxth	r2, r3
 800fea6:	88fb      	ldrh	r3, [r7, #6]
 800fea8:	4413      	add	r3, r2
 800feaa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                    ucdr_init_buffer(&temp_buffer, temp_buffer.iterator,
 800feae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
                            (size_t)(temp_buffer.final - temp_buffer.iterator));
 800feb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800feb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb4:	1ad3      	subs	r3, r2, r3
                    ucdr_init_buffer(&temp_buffer, temp_buffer.iterator,
 800feb6:	461a      	mov	r2, r3
 800feb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800febc:	4618      	mov	r0, r3
 800febe:	f7fa f98e 	bl	800a1de <ucdr_init_buffer>
                    ucdr_set_on_full_buffer_callback(&temp_buffer, ub->on_full_buffer, ub->args);
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	6999      	ldr	r1, [r3, #24]
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	69da      	ldr	r2, [r3, #28]
 800feca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fece:	4618      	mov	r0, r3
 800fed0:	f7fa f973 	bl	800a1ba <ucdr_set_on_full_buffer_callback>
                    session->on_request(
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f8d3 41ec 	ldr.w	r4, [r3, #492]	; 0x1ec
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800fee0:	f107 0118 	add.w	r1, r7, #24
 800fee4:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800fee8:	9302      	str	r3, [sp, #8]
 800feea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800feee:	9301      	str	r3, [sp, #4]
 800fef0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fef4:	9300      	str	r3, [sp, #0]
 800fef6:	460b      	mov	r3, r1
 800fef8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fefa:	68f8      	ldr	r0, [r7, #12]
 800fefc:	47a0      	blx	r4
                    session->on_data_flag = true;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	2201      	movs	r2, #1
 800ff02:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
            break;
 800ff06:	e058      	b.n	800ffba <read_format_data+0x1ea>
            if (NULL != session->on_reply)
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d048      	beq.n	800ffa4 <read_format_data+0x1d4>
                size_t offset = temp_buffer.offset;
 800ff12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff14:	65bb      	str	r3, [r7, #88]	; 0x58
                if (uxr_deserialize_BaseObjectRequest(&temp_buffer, &request))
 800ff16:	f107 0214 	add.w	r2, r7, #20
 800ff1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff1e:	4611      	mov	r1, r2
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7fe fb57 	bl	800e5d4 <uxr_deserialize_BaseObjectRequest>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d03b      	beq.n	800ffa4 <read_format_data+0x1d4>
                    uint16_t reply_length = (uint16_t)(length - (temp_buffer.offset - offset));
 800ff2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff2e:	b29a      	uxth	r2, r3
 800ff30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	1ad3      	subs	r3, r2, r3
 800ff36:	b29a      	uxth	r2, r3
 800ff38:	88fb      	ldrh	r3, [r7, #6]
 800ff3a:	4413      	add	r3, r2
 800ff3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    ucdr_init_buffer(&temp_buffer, temp_buffer.iterator,
 800ff40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
                            (size_t)(temp_buffer.final - temp_buffer.iterator));
 800ff42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff46:	1ad3      	subs	r3, r2, r3
                    ucdr_init_buffer(&temp_buffer, temp_buffer.iterator,
 800ff48:	461a      	mov	r2, r3
 800ff4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7fa f945 	bl	800a1de <ucdr_init_buffer>
                    ucdr_set_on_full_buffer_callback(&temp_buffer, ub->on_full_buffer, ub->args);
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	6999      	ldr	r1, [r3, #24]
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	69da      	ldr	r2, [r3, #28]
 800ff5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7fa f92a 	bl	800a1ba <ucdr_set_on_full_buffer_callback>
                    session->on_reply(
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	f8d3 41f4 	ldr.w	r4, [r3, #500]	; 0x1f4
                        (uint16_t)((request.request_id.data[0] << 8) + request.request_id.data[1]),
 800ff6c:	7d3b      	ldrb	r3, [r7, #20]
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	021b      	lsls	r3, r3, #8
 800ff72:	b29a      	uxth	r2, r3
 800ff74:	7d7b      	ldrb	r3, [r7, #21]
 800ff76:	b29b      	uxth	r3, r3
                    session->on_reply(
 800ff78:	4413      	add	r3, r2
 800ff7a:	b299      	uxth	r1, r3
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800ff82:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800ff86:	9302      	str	r3, [sp, #8]
 800ff88:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ff8c:	9301      	str	r3, [sp, #4]
 800ff8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff92:	9300      	str	r3, [sp, #0]
 800ff94:	460b      	mov	r3, r1
 800ff96:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ff98:	68f8      	ldr	r0, [r7, #12]
 800ff9a:	47a0      	blx	r4
                    session->on_data_flag = true;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
            ub->iterator += length;
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	689a      	ldr	r2, [r3, #8]
 800ffa8:	88fb      	ldrh	r3, [r7, #6]
 800ffaa:	441a      	add	r2, r3
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	609a      	str	r2, [r3, #8]
            break;
 800ffb0:	e004      	b.n	800ffbc <read_format_data+0x1ec>
            break;
 800ffb2:	bf00      	nop
 800ffb4:	e002      	b.n	800ffbc <read_format_data+0x1ec>
            break;
 800ffb6:	bf00      	nop
 800ffb8:	e000      	b.n	800ffbc <read_format_data+0x1ec>
            break;
 800ffba:	bf00      	nop
    }

    if (ub->args)
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	69db      	ldr	r3, [r3, #28]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d005      	beq.n	800ffd0 <read_format_data+0x200>
    {
        uxrInputReliableStream* stream = (uxrInputReliableStream*) ub->args;
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	69db      	ldr	r3, [r3, #28]
 800ffc8:	653b      	str	r3, [r7, #80]	; 0x50
        stream->cleanup_flag = true;
 800ffca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffcc:	2201      	movs	r2, #1
 800ffce:	751a      	strb	r2, [r3, #20]
    }
    ucdr_advance_buffer(ub, length);
 800ffd0:	88fb      	ldrh	r3, [r7, #6]
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	68b8      	ldr	r0, [r7, #8]
 800ffd6:	f7fa f9ce 	bl	800a376 <ucdr_advance_buffer>
}
 800ffda:	bf00      	nop
 800ffdc:	376c      	adds	r7, #108	; 0x6c
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd90      	pop	{r4, r7, pc}

0800ffe2 <read_format_sample>:
        ucdrBuffer* payload,
        uint16_t length,
        uxrStreamId stream_id,
        uxrObjectId object_id,
        uint16_t request_id)
{
 800ffe2:	b480      	push	{r7}
 800ffe4:	b085      	sub	sp, #20
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	60f8      	str	r0, [r7, #12]
 800ffea:	60b9      	str	r1, [r7, #8]
 800ffec:	603b      	str	r3, [r7, #0]
 800ffee:	4613      	mov	r3, r2
 800fff0:	80fb      	strh	r3, [r7, #6]
    (void) session; (void) payload; (void) length; (void) stream_id; (void) object_id; (void) request_id;
    //TODO
}
 800fff2:	bf00      	nop
 800fff4:	3714      	adds	r7, #20
 800fff6:	46bd      	mov	sp, r7
 800fff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffc:	4770      	bx	lr

0800fffe <read_format_data_seq>:
        ucdrBuffer* payload,
        uint16_t length,
        uxrStreamId stream_id,
        uxrObjectId object_id,
        uint16_t request_id)
{
 800fffe:	b480      	push	{r7}
 8010000:	b085      	sub	sp, #20
 8010002:	af00      	add	r7, sp, #0
 8010004:	60f8      	str	r0, [r7, #12]
 8010006:	60b9      	str	r1, [r7, #8]
 8010008:	603b      	str	r3, [r7, #0]
 801000a:	4613      	mov	r3, r2
 801000c:	80fb      	strh	r3, [r7, #6]
    (void) session; (void) payload; (void) length; (void) stream_id; (void) object_id; (void) request_id;
    //TODO
}
 801000e:	bf00      	nop
 8010010:	3714      	adds	r7, #20
 8010012:	46bd      	mov	sp, r7
 8010014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010018:	4770      	bx	lr

0801001a <read_format_sample_seq>:
        ucdrBuffer* payload,
        uint16_t length,
        uxrStreamId stream_id,
        uxrObjectId object_id,
        uint16_t request_id)
{
 801001a:	b480      	push	{r7}
 801001c:	b085      	sub	sp, #20
 801001e:	af00      	add	r7, sp, #0
 8010020:	60f8      	str	r0, [r7, #12]
 8010022:	60b9      	str	r1, [r7, #8]
 8010024:	603b      	str	r3, [r7, #0]
 8010026:	4613      	mov	r3, r2
 8010028:	80fb      	strh	r3, [r7, #6]
    (void) session; (void) payload; (void) length; (void) stream_id; (void) object_id; (void) request_id;
    //TODO
}
 801002a:	bf00      	nop
 801002c:	3714      	adds	r7, #20
 801002e:	46bd      	mov	sp, r7
 8010030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010034:	4770      	bx	lr

08010036 <read_format_packed_samples>:
        ucdrBuffer* payload,
        uint16_t length,
        uxrStreamId stream_id,
        uxrObjectId object_id,
        uint16_t request_id)
{
 8010036:	b480      	push	{r7}
 8010038:	b085      	sub	sp, #20
 801003a:	af00      	add	r7, sp, #0
 801003c:	60f8      	str	r0, [r7, #12]
 801003e:	60b9      	str	r1, [r7, #8]
 8010040:	603b      	str	r3, [r7, #0]
 8010042:	4613      	mov	r3, r2
 8010044:	80fb      	strh	r3, [r7, #6]
    (void) session; (void) payload; (void) length; (void) stream_id; (void) object_id; (void) request_id;
    //TODO
}
 8010046:	bf00      	nop
 8010048:	3714      	adds	r7, #20
 801004a:	46bd      	mov	sp, r7
 801004c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010050:	4770      	bx	lr
	...

08010054 <uxr_convert_to_nanos>:
#include <stdint.h>

static inline int64_t uxr_convert_to_nanos(
        int32_t sec,
        uint32_t nsec)
{
 8010054:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8010058:	b083      	sub	sp, #12
 801005a:	af00      	add	r7, sp, #0
 801005c:	6078      	str	r0, [r7, #4]
 801005e:	6039      	str	r1, [r7, #0]
    return ((int64_t)sec * 1000000000) + nsec;
 8010060:	6879      	ldr	r1, [r7, #4]
 8010062:	17c8      	asrs	r0, r1, #31
 8010064:	460c      	mov	r4, r1
 8010066:	4605      	mov	r5, r0
 8010068:	490e      	ldr	r1, [pc, #56]	; (80100a4 <uxr_convert_to_nanos+0x50>)
 801006a:	fb01 f005 	mul.w	r0, r1, r5
 801006e:	2100      	movs	r1, #0
 8010070:	fb04 f101 	mul.w	r1, r4, r1
 8010074:	4401      	add	r1, r0
 8010076:	480b      	ldr	r0, [pc, #44]	; (80100a4 <uxr_convert_to_nanos+0x50>)
 8010078:	fba4 2300 	umull	r2, r3, r4, r0
 801007c:	4419      	add	r1, r3
 801007e:	460b      	mov	r3, r1
 8010080:	6839      	ldr	r1, [r7, #0]
 8010082:	2000      	movs	r0, #0
 8010084:	4688      	mov	r8, r1
 8010086:	4681      	mov	r9, r0
 8010088:	eb12 0a08 	adds.w	sl, r2, r8
 801008c:	eb43 0b09 	adc.w	fp, r3, r9
 8010090:	4652      	mov	r2, sl
 8010092:	465b      	mov	r3, fp
}
 8010094:	4610      	mov	r0, r2
 8010096:	4619      	mov	r1, r3
 8010098:	370c      	adds	r7, #12
 801009a:	46bd      	mov	sp, r7
 801009c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80100a0:	4770      	bx	lr
 80100a2:	bf00      	nop
 80100a4:	3b9aca00 	.word	0x3b9aca00

080100a8 <uxr_init_session>:

void uxr_init_session(
        uxrSession* session,
        uxrCommunication* comm,
        uint32_t key)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	60f8      	str	r0, [r7, #12]
 80100b0:	60b9      	str	r1, [r7, #8]
 80100b2:	607a      	str	r2, [r7, #4]
    UXR_INIT_LOCK(&session->mutex);
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80100ba:	4618      	mov	r0, r3
 80100bc:	f003 fda6 	bl	8013c0c <uxr_init_lock>

    session->comm = comm;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	68ba      	ldr	r2, [r7, #8]
 80100c4:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

    session->request_list = NULL;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	2200      	movs	r2, #0
 80100cc:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    session->status_list = NULL;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2200      	movs	r2, #0
 80100d4:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    session->request_status_list_size = 0;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	2200      	movs	r2, #0
 80100dc:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

    session->on_status = NULL;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	2200      	movs	r2, #0
 80100e4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    session->on_status_args = NULL;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	2200      	movs	r2, #0
 80100ec:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
    session->on_topic = NULL;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	2200      	movs	r2, #0
 80100f4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
    session->on_topic_args = NULL;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	2200      	movs	r2, #0
 80100fc:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

    session->on_time = NULL;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	2200      	movs	r2, #0
 8010104:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
    session->on_time_args = NULL;
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	2200      	movs	r2, #0
 801010c:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
    session->time_offset = 0;
 8010110:	68f9      	ldr	r1, [r7, #12]
 8010112:	f04f 0200 	mov.w	r2, #0
 8010116:	f04f 0300 	mov.w	r3, #0
 801011a:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
    session->synchronized = false;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	2200      	movs	r2, #0
 8010122:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8

    uxr_init_session_info(&session->info, 0x81, key);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	687a      	ldr	r2, [r7, #4]
 801012a:	2181      	movs	r1, #129	; 0x81
 801012c:	4618      	mov	r0, r3
 801012e:	f001 fa7c 	bl	801162a <uxr_init_session_info>
    uxr_init_stream_storage(&session->streams);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	3308      	adds	r3, #8
 8010136:	4618      	mov	r0, r3
 8010138:	f003 f876 	bl	8013228 <uxr_init_stream_storage>
}
 801013c:	bf00      	nop
 801013e:	3710      	adds	r7, #16
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <uxr_set_status_callback>:

void uxr_set_status_callback(
        uxrSession* session,
        uxrOnStatusFunc on_status_func,
        void* args)
{
 8010144:	b480      	push	{r7}
 8010146:	b085      	sub	sp, #20
 8010148:	af00      	add	r7, sp, #0
 801014a:	60f8      	str	r0, [r7, #12]
 801014c:	60b9      	str	r1, [r7, #8]
 801014e:	607a      	str	r2, [r7, #4]
    session->on_status = on_status_func;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	68ba      	ldr	r2, [r7, #8]
 8010154:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    session->on_status_args = args;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
}
 8010160:	bf00      	nop
 8010162:	3714      	adds	r7, #20
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr

0801016c <uxr_set_topic_callback>:

void uxr_set_topic_callback(
        uxrSession* session,
        uxrOnTopicFunc on_topic_func,
        void* args)
{
 801016c:	b480      	push	{r7}
 801016e:	b085      	sub	sp, #20
 8010170:	af00      	add	r7, sp, #0
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	607a      	str	r2, [r7, #4]
    session->on_topic = on_topic_func;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	68ba      	ldr	r2, [r7, #8]
 801017c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
    session->on_topic_args = args;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	687a      	ldr	r2, [r7, #4]
 8010184:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
}
 8010188:	bf00      	nop
 801018a:	3714      	adds	r7, #20
 801018c:	46bd      	mov	sp, r7
 801018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010192:	4770      	bx	lr

08010194 <uxr_set_request_callback>:

void uxr_set_request_callback(
        uxrSession* session,
        uxrOnRequestFunc on_request_func,
        void* args)
{
 8010194:	b480      	push	{r7}
 8010196:	b085      	sub	sp, #20
 8010198:	af00      	add	r7, sp, #0
 801019a:	60f8      	str	r0, [r7, #12]
 801019c:	60b9      	str	r1, [r7, #8]
 801019e:	607a      	str	r2, [r7, #4]
    session->on_request = on_request_func;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	68ba      	ldr	r2, [r7, #8]
 80101a4:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
    session->on_request_args = args;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	687a      	ldr	r2, [r7, #4]
 80101ac:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 80101b0:	bf00      	nop
 80101b2:	3714      	adds	r7, #20
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr

080101bc <uxr_set_reply_callback>:

void uxr_set_reply_callback(
        uxrSession* session,
        uxrOnReplyFunc on_reply_func,
        void* args)
{
 80101bc:	b480      	push	{r7}
 80101be:	b085      	sub	sp, #20
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	60f8      	str	r0, [r7, #12]
 80101c4:	60b9      	str	r1, [r7, #8]
 80101c6:	607a      	str	r2, [r7, #4]
    session->on_reply = on_reply_func;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	68ba      	ldr	r2, [r7, #8]
 80101cc:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
    session->on_reply_args = args;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	687a      	ldr	r2, [r7, #4]
 80101d4:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
}
 80101d8:	bf00      	nop
 80101da:	3714      	adds	r7, #20
 80101dc:	46bd      	mov	sp, r7
 80101de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e2:	4770      	bx	lr

080101e4 <uxr_create_session_retries>:
#endif /* ifdef PERFORMANCE_TESTING */

bool uxr_create_session_retries(
        uxrSession* session,
        size_t retries)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b09a      	sub	sp, #104	; 0x68
 80101e8:	af02      	add	r7, sp, #8
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6039      	str	r1, [r7, #0]
    uxr_reset_stream_storage(&session->streams);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	3308      	adds	r3, #8
 80101f2:	4618      	mov	r0, r3
 80101f4:	f003 f832 	bl	801325c <uxr_reset_stream_storage>

    uint8_t create_session_buffer[CREATE_SESSION_MAX_MSG_SIZE];
    ucdrBuffer ub;
    ucdr_init_buffer_origin_offset(&ub, create_session_buffer, CREATE_SESSION_MAX_MSG_SIZE, 0u, uxr_session_header_offset(
                &session->info));
 80101f8:	687b      	ldr	r3, [r7, #4]
    ucdr_init_buffer_origin_offset(&ub, create_session_buffer, CREATE_SESSION_MAX_MSG_SIZE, 0u, uxr_session_header_offset(
 80101fa:	4618      	mov	r0, r3
 80101fc:	f001 fb64 	bl	80118c8 <uxr_session_header_offset>
 8010200:	4603      	mov	r3, r0
 8010202:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010206:	f107 000c 	add.w	r0, r7, #12
 801020a:	9300      	str	r3, [sp, #0]
 801020c:	2300      	movs	r3, #0
 801020e:	2231      	movs	r2, #49	; 0x31
 8010210:	f7fa f808 	bl	800a224 <ucdr_init_buffer_origin_offset>

    uxr_buffer_create_session(&session->info, &ub, (uint16_t)(session->comm->mtu - INTERNAL_RELIABLE_BUFFER_OFFSET));
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 801021c:	8a1b      	ldrh	r3, [r3, #16]
 801021e:	3b04      	subs	r3, #4
 8010220:	b29a      	uxth	r2, r3
 8010222:	f107 030c 	add.w	r3, r7, #12
 8010226:	4619      	mov	r1, r3
 8010228:	f001 fa2a 	bl	8011680 <uxr_buffer_create_session>
    uxr_stamp_create_session_header(&session->info, ub.init);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	68fa      	ldr	r2, [r7, #12]
 8010230:	4611      	mov	r1, r2
 8010232:	4618      	mov	r0, r3
 8010234:	f001 faca 	bl	80117cc <uxr_stamp_create_session_header>

    bool received = wait_session_status(session, create_session_buffer, ucdr_buffer_length(&ub), (size_t) retries);
 8010238:	f107 030c 	add.w	r3, r7, #12
 801023c:	4618      	mov	r0, r3
 801023e:	f7fa f8d6 	bl	800a3ee <ucdr_buffer_length>
 8010242:	4602      	mov	r2, r0
 8010244:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f000 fd54 	bl	8010cf8 <wait_session_status>
 8010250:	4603      	mov	r3, r0
 8010252:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    bool created = received && UXR_STATUS_OK == session->info.last_requested_status;
 8010256:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801025a:	2b00      	cmp	r3, #0
 801025c:	d005      	beq.n	801026a <uxr_create_session_retries+0x86>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	795b      	ldrb	r3, [r3, #5]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d101      	bne.n	801026a <uxr_create_session_retries+0x86>
 8010266:	2301      	movs	r3, #1
 8010268:	e000      	b.n	801026c <uxr_create_session_retries+0x88>
 801026a:	2300      	movs	r3, #0
 801026c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8010270:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8010274:	f003 0301 	and.w	r3, r3, #1
 8010278:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

    if (created)
 801027c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8010280:	2b00      	cmp	r3, #0
 8010282:	d004      	beq.n	801028e <uxr_create_session_retries+0xaa>
    {
        uxr_reset_stream_storage(&session->streams);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	3308      	adds	r3, #8
 8010288:	4618      	mov	r0, r3
 801028a:	f002 ffe7 	bl	801325c <uxr_reset_stream_storage>
    }

    return created;
 801028e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
}
 8010292:	4618      	mov	r0, r3
 8010294:	3760      	adds	r7, #96	; 0x60
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}

0801029a <uxr_create_session>:

bool uxr_create_session(
        uxrSession* session)
{
 801029a:	b580      	push	{r7, lr}
 801029c:	b082      	sub	sp, #8
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
    return uxr_create_session_retries(session, UXR_CONFIG_MAX_SESSION_CONNECTION_ATTEMPTS);
 80102a2:	210a      	movs	r1, #10
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f7ff ff9d 	bl	80101e4 <uxr_create_session_retries>
 80102aa:	4603      	mov	r3, r0
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	3708      	adds	r7, #8
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}

080102b4 <uxr_delete_session_retries>:

bool uxr_delete_session_retries(
        uxrSession* session,
        size_t retries)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b092      	sub	sp, #72	; 0x48
 80102b8:	af02      	add	r7, sp, #8
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	6039      	str	r1, [r7, #0]
    UXR_CLEAN_SHARED_MEMORY();
 80102be:	f003 fd91 	bl	8013de4 <uxr_clean_shared_memory>

    uint8_t delete_session_buffer[DELETE_SESSION_MAX_MSG_SIZE];
    ucdrBuffer ub;
    ucdr_init_buffer_origin_offset(&ub, delete_session_buffer, DELETE_SESSION_MAX_MSG_SIZE, 0u, uxr_session_header_offset(
                &session->info));
 80102c2:	687b      	ldr	r3, [r7, #4]
    ucdr_init_buffer_origin_offset(&ub, delete_session_buffer, DELETE_SESSION_MAX_MSG_SIZE, 0u, uxr_session_header_offset(
 80102c4:	4618      	mov	r0, r3
 80102c6:	f001 faff 	bl	80118c8 <uxr_session_header_offset>
 80102ca:	4603      	mov	r3, r0
 80102cc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80102d0:	f107 000c 	add.w	r0, r7, #12
 80102d4:	9300      	str	r3, [sp, #0]
 80102d6:	2300      	movs	r3, #0
 80102d8:	2210      	movs	r2, #16
 80102da:	f7f9 ffa3 	bl	800a224 <ucdr_init_buffer_origin_offset>

    uxr_buffer_delete_session(&session->info, &ub);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f107 020c 	add.w	r2, r7, #12
 80102e4:	4611      	mov	r1, r2
 80102e6:	4618      	mov	r0, r3
 80102e8:	f001 fa1a 	bl	8011720 <uxr_buffer_delete_session>
    uxr_stamp_session_header(&session->info, 0, 0, ub.init);
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2200      	movs	r2, #0
 80102f2:	2100      	movs	r1, #0
 80102f4:	f001 fa88 	bl	8011808 <uxr_stamp_session_header>

    bool received = wait_session_status(session, delete_session_buffer, ucdr_buffer_length(&ub), retries);
 80102f8:	f107 030c 	add.w	r3, r7, #12
 80102fc:	4618      	mov	r0, r3
 80102fe:	f7fa f876 	bl	800a3ee <ucdr_buffer_length>
 8010302:	4602      	mov	r2, r0
 8010304:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f000 fcf4 	bl	8010cf8 <wait_session_status>
 8010310:	4603      	mov	r3, r0
 8010312:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    return received && UXR_STATUS_OK == session->info.last_requested_status;
 8010316:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801031a:	2b00      	cmp	r3, #0
 801031c:	d005      	beq.n	801032a <uxr_delete_session_retries+0x76>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	795b      	ldrb	r3, [r3, #5]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d101      	bne.n	801032a <uxr_delete_session_retries+0x76>
 8010326:	2301      	movs	r3, #1
 8010328:	e000      	b.n	801032c <uxr_delete_session_retries+0x78>
 801032a:	2300      	movs	r3, #0
 801032c:	f003 0301 	and.w	r3, r3, #1
 8010330:	b2db      	uxtb	r3, r3
}
 8010332:	4618      	mov	r0, r3
 8010334:	3740      	adds	r7, #64	; 0x40
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}

0801033a <uxr_delete_session>:

bool uxr_delete_session(
        uxrSession* session)
{
 801033a:	b580      	push	{r7, lr}
 801033c:	b082      	sub	sp, #8
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
    return uxr_delete_session_retries(session, UXR_CONFIG_MAX_SESSION_CONNECTION_ATTEMPTS);
 8010342:	210a      	movs	r1, #10
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f7ff ffb5 	bl	80102b4 <uxr_delete_session_retries>
 801034a:	4603      	mov	r3, r0
}
 801034c:	4618      	mov	r0, r3
 801034e:	3708      	adds	r7, #8
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <uxr_create_output_best_effort_stream>:

uxrStreamId uxr_create_output_best_effort_stream(
        uxrSession* session,
        uint8_t* buffer,
        size_t size)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b086      	sub	sp, #24
 8010358:	af00      	add	r7, sp, #0
 801035a:	60f8      	str	r0, [r7, #12]
 801035c:	60b9      	str	r1, [r7, #8]
 801035e:	607a      	str	r2, [r7, #4]
    uint8_t header_offset = uxr_session_header_offset(&session->info);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	4618      	mov	r0, r3
 8010364:	f001 fab0 	bl	80118c8 <uxr_session_header_offset>
 8010368:	4603      	mov	r3, r0
 801036a:	75fb      	strb	r3, [r7, #23]
    return uxr_add_output_best_effort_buffer(&session->streams, buffer, size, header_offset);
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f103 0008 	add.w	r0, r3, #8
 8010372:	7dfb      	ldrb	r3, [r7, #23]
 8010374:	687a      	ldr	r2, [r7, #4]
 8010376:	68b9      	ldr	r1, [r7, #8]
 8010378:	f002 ffd7 	bl	801332a <uxr_add_output_best_effort_buffer>
 801037c:	4603      	mov	r3, r0
 801037e:	613b      	str	r3, [r7, #16]
 8010380:	2300      	movs	r3, #0
 8010382:	7c3a      	ldrb	r2, [r7, #16]
 8010384:	f362 0307 	bfi	r3, r2, #0, #8
 8010388:	7c7a      	ldrb	r2, [r7, #17]
 801038a:	f362 230f 	bfi	r3, r2, #8, #8
 801038e:	7cba      	ldrb	r2, [r7, #18]
 8010390:	f362 4317 	bfi	r3, r2, #16, #8
 8010394:	7cfa      	ldrb	r2, [r7, #19]
 8010396:	f362 631f 	bfi	r3, r2, #24, #8
}
 801039a:	4618      	mov	r0, r3
 801039c:	3718      	adds	r7, #24
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}

080103a2 <uxr_create_output_reliable_stream>:
uxrStreamId uxr_create_output_reliable_stream(
        uxrSession* session,
        uint8_t* buffer,
        size_t size,
        uint16_t history)
{
 80103a2:	b580      	push	{r7, lr}
 80103a4:	b088      	sub	sp, #32
 80103a6:	af02      	add	r7, sp, #8
 80103a8:	60f8      	str	r0, [r7, #12]
 80103aa:	60b9      	str	r1, [r7, #8]
 80103ac:	607a      	str	r2, [r7, #4]
 80103ae:	807b      	strh	r3, [r7, #2]
    uint8_t header_offset = uxr_session_header_offset(&session->info);
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	4618      	mov	r0, r3
 80103b4:	f001 fa88 	bl	80118c8 <uxr_session_header_offset>
 80103b8:	4603      	mov	r3, r0
 80103ba:	75fb      	strb	r3, [r7, #23]
    return uxr_add_output_reliable_buffer(&session->streams, buffer, size, history, header_offset);
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	f103 0008 	add.w	r0, r3, #8
 80103c2:	887a      	ldrh	r2, [r7, #2]
 80103c4:	7dfb      	ldrb	r3, [r7, #23]
 80103c6:	9300      	str	r3, [sp, #0]
 80103c8:	4613      	mov	r3, r2
 80103ca:	687a      	ldr	r2, [r7, #4]
 80103cc:	68b9      	ldr	r1, [r7, #8]
 80103ce:	f002 ffe2 	bl	8013396 <uxr_add_output_reliable_buffer>
 80103d2:	4603      	mov	r3, r0
 80103d4:	613b      	str	r3, [r7, #16]
 80103d6:	2300      	movs	r3, #0
 80103d8:	7c3a      	ldrb	r2, [r7, #16]
 80103da:	f362 0307 	bfi	r3, r2, #0, #8
 80103de:	7c7a      	ldrb	r2, [r7, #17]
 80103e0:	f362 230f 	bfi	r3, r2, #8, #8
 80103e4:	7cba      	ldrb	r2, [r7, #18]
 80103e6:	f362 4317 	bfi	r3, r2, #16, #8
 80103ea:	7cfa      	ldrb	r2, [r7, #19]
 80103ec:	f362 631f 	bfi	r3, r2, #24, #8
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3718      	adds	r7, #24
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <uxr_create_input_best_effort_stream>:

uxrStreamId uxr_create_input_best_effort_stream(
        uxrSession* session)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b084      	sub	sp, #16
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
    return uxr_add_input_best_effort_buffer(&session->streams);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	3308      	adds	r3, #8
 8010404:	4618      	mov	r0, r3
 8010406:	f003 f802 	bl	801340e <uxr_add_input_best_effort_buffer>
 801040a:	4603      	mov	r3, r0
 801040c:	60fb      	str	r3, [r7, #12]
 801040e:	2300      	movs	r3, #0
 8010410:	7b3a      	ldrb	r2, [r7, #12]
 8010412:	f362 0307 	bfi	r3, r2, #0, #8
 8010416:	7b7a      	ldrb	r2, [r7, #13]
 8010418:	f362 230f 	bfi	r3, r2, #8, #8
 801041c:	7bba      	ldrb	r2, [r7, #14]
 801041e:	f362 4317 	bfi	r3, r2, #16, #8
 8010422:	7bfa      	ldrb	r2, [r7, #15]
 8010424:	f362 631f 	bfi	r3, r2, #24, #8
}
 8010428:	4618      	mov	r0, r3
 801042a:	3710      	adds	r7, #16
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}

08010430 <uxr_create_input_reliable_stream>:
uxrStreamId uxr_create_input_reliable_stream(
        uxrSession* session,
        uint8_t* buffer,
        size_t size,
        uint16_t history)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b088      	sub	sp, #32
 8010434:	af02      	add	r7, sp, #8
 8010436:	60f8      	str	r0, [r7, #12]
 8010438:	60b9      	str	r1, [r7, #8]
 801043a:	607a      	str	r2, [r7, #4]
 801043c:	807b      	strh	r3, [r7, #2]
    return uxr_add_input_reliable_buffer(&session->streams, buffer, size, history, on_get_fragmentation_info);
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	f103 0008 	add.w	r0, r3, #8
 8010444:	887b      	ldrh	r3, [r7, #2]
 8010446:	4a0c      	ldr	r2, [pc, #48]	; (8010478 <uxr_create_input_reliable_stream+0x48>)
 8010448:	9200      	str	r2, [sp, #0]
 801044a:	687a      	ldr	r2, [r7, #4]
 801044c:	68b9      	ldr	r1, [r7, #8]
 801044e:	f003 f810 	bl	8013472 <uxr_add_input_reliable_buffer>
 8010452:	4603      	mov	r3, r0
 8010454:	617b      	str	r3, [r7, #20]
 8010456:	2300      	movs	r3, #0
 8010458:	7d3a      	ldrb	r2, [r7, #20]
 801045a:	f362 0307 	bfi	r3, r2, #0, #8
 801045e:	7d7a      	ldrb	r2, [r7, #21]
 8010460:	f362 230f 	bfi	r3, r2, #8, #8
 8010464:	7dba      	ldrb	r2, [r7, #22]
 8010466:	f362 4317 	bfi	r3, r2, #16, #8
 801046a:	7dfa      	ldrb	r2, [r7, #23]
 801046c:	f362 631f 	bfi	r3, r2, #24, #8
}
 8010470:	4618      	mov	r0, r3
 8010472:	3718      	adds	r7, #24
 8010474:	46bd      	mov	sp, r7
 8010476:	bd80      	pop	{r7, pc}
 8010478:	080115d1 	.word	0x080115d1

0801047c <uxr_run_session_until_data>:
}

bool uxr_run_session_until_data(
        uxrSession* session,
        int timeout_ms)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b088      	sub	sp, #32
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	6039      	str	r1, [r7, #0]
    UXR_LOCK_SESSION(session);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801048c:	4618      	mov	r0, r3
 801048e:	f003 fbce 	bl	8013c2e <uxr_lock>

    int64_t start_timestamp = uxr_millis();
 8010492:	f005 f8bb 	bl	801560c <uxr_millis>
 8010496:	e9c7 0104 	strd	r0, r1, [r7, #16]
    int remaining_time = timeout_ms;
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	61fb      	str	r3, [r7, #28]

    uxr_flash_output_streams(session);
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	f000 f928 	bl	80106f4 <uxr_flash_output_streams>

    session->on_data_flag = false;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    do
    {
        listen_message_reliably(session, remaining_time);
 80104ac:	69f9      	ldr	r1, [r7, #28]
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f000 fb78 	bl	8010ba4 <listen_message_reliably>
        if (session->on_data_flag)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d10d      	bne.n	80104da <uxr_run_session_until_data+0x5e>
        {
            break;
        }
        remaining_time = timeout_ms - (int)(uxr_millis() - start_timestamp);
 80104be:	f005 f8a5 	bl	801560c <uxr_millis>
 80104c2:	4602      	mov	r2, r0
 80104c4:	460b      	mov	r3, r1
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	1ad3      	subs	r3, r2, r3
 80104ca:	461a      	mov	r2, r3
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	1a9b      	subs	r3, r3, r2
 80104d0:	61fb      	str	r3, [r7, #28]
    }
    while (remaining_time > 0);
 80104d2:	69fb      	ldr	r3, [r7, #28]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	dce9      	bgt.n	80104ac <uxr_run_session_until_data+0x30>
 80104d8:	e000      	b.n	80104dc <uxr_run_session_until_data+0x60>
            break;
 80104da:	bf00      	nop

    bool ret = session->on_data_flag;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80104e2:	73fb      	strb	r3, [r7, #15]

    UXR_UNLOCK_SESSION(session);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80104ea:	4618      	mov	r0, r3
 80104ec:	f003 fbae 	bl	8013c4c <uxr_unlock>
    return ret;
 80104f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3720      	adds	r7, #32
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}

080104fa <uxr_run_session_until_confirm_delivery>:
}

bool uxr_run_session_until_confirm_delivery(
        uxrSession* session,
        int timeout_ms)
{
 80104fa:	b580      	push	{r7, lr}
 80104fc:	b088      	sub	sp, #32
 80104fe:	af00      	add	r7, sp, #0
 8010500:	6078      	str	r0, [r7, #4]
 8010502:	6039      	str	r1, [r7, #0]
    UXR_LOCK_SESSION(session);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801050a:	4618      	mov	r0, r3
 801050c:	f003 fb8f 	bl	8013c2e <uxr_lock>

    int64_t start_timestamp = uxr_millis();
 8010510:	f005 f87c 	bl	801560c <uxr_millis>
 8010514:	e9c7 0104 	strd	r0, r1, [r7, #16]
    int remaining_time = timeout_ms;
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	61fb      	str	r3, [r7, #28]

    uxr_flash_output_streams(session);
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f000 f8e9 	bl	80106f4 <uxr_flash_output_streams>

    while (remaining_time >= 0 && !uxr_output_streams_confirmed(&session->streams))
 8010522:	e00d      	b.n	8010540 <uxr_run_session_until_confirm_delivery+0x46>
    {
        listen_message_reliably(session, remaining_time);
 8010524:	69f9      	ldr	r1, [r7, #28]
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 fb3c 	bl	8010ba4 <listen_message_reliably>

        remaining_time = timeout_ms - (int)(uxr_millis() - start_timestamp);
 801052c:	f005 f86e 	bl	801560c <uxr_millis>
 8010530:	4602      	mov	r2, r0
 8010532:	460b      	mov	r3, r1
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	1ad3      	subs	r3, r2, r3
 8010538:	461a      	mov	r2, r3
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	1a9b      	subs	r3, r3, r2
 801053e:	61fb      	str	r3, [r7, #28]
    while (remaining_time >= 0 && !uxr_output_streams_confirmed(&session->streams))
 8010540:	69fb      	ldr	r3, [r7, #28]
 8010542:	2b00      	cmp	r3, #0
 8010544:	db0a      	blt.n	801055c <uxr_run_session_until_confirm_delivery+0x62>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	3308      	adds	r3, #8
 801054a:	4618      	mov	r0, r3
 801054c:	f003 f83a 	bl	80135c4 <uxr_output_streams_confirmed>
 8010550:	4603      	mov	r3, r0
 8010552:	f083 0301 	eor.w	r3, r3, #1
 8010556:	b2db      	uxtb	r3, r3
 8010558:	2b00      	cmp	r3, #0
 801055a:	d1e3      	bne.n	8010524 <uxr_run_session_until_confirm_delivery+0x2a>
    }

    bool ret = uxr_output_streams_confirmed(&session->streams);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	3308      	adds	r3, #8
 8010560:	4618      	mov	r0, r3
 8010562:	f003 f82f 	bl	80135c4 <uxr_output_streams_confirmed>
 8010566:	4603      	mov	r3, r0
 8010568:	73fb      	strb	r3, [r7, #15]

    UXR_UNLOCK_SESSION(session);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010570:	4618      	mov	r0, r3
 8010572:	f003 fb6b 	bl	8013c4c <uxr_unlock>
    return ret;
 8010576:	7bfb      	ldrb	r3, [r7, #15]
}
 8010578:	4618      	mov	r0, r3
 801057a:	3720      	adds	r7, #32
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <uxr_run_session_until_all_status>:
        uxrSession* session,
        int timeout_ms,
        const uint16_t* request_list,
        uint8_t* status_list,
        size_t list_size)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b08c      	sub	sp, #48	; 0x30
 8010584:	af00      	add	r7, sp, #0
 8010586:	60f8      	str	r0, [r7, #12]
 8010588:	60b9      	str	r1, [r7, #8]
 801058a:	607a      	str	r2, [r7, #4]
 801058c:	603b      	str	r3, [r7, #0]
    UXR_LOCK_SESSION(session);
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010594:	4618      	mov	r0, r3
 8010596:	f003 fb4a 	bl	8013c2e <uxr_lock>

    uxr_flash_output_streams(session);
 801059a:	68f8      	ldr	r0, [r7, #12]
 801059c:	f000 f8aa 	bl	80106f4 <uxr_flash_output_streams>

    for (unsigned i = 0; i < list_size; ++i)
 80105a0:	2300      	movs	r3, #0
 80105a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105a4:	e007      	b.n	80105b6 <uxr_run_session_until_all_status+0x36>
    {
        status_list[i] = UXR_STATUS_NONE;
 80105a6:	683a      	ldr	r2, [r7, #0]
 80105a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105aa:	4413      	add	r3, r2
 80105ac:	22ff      	movs	r2, #255	; 0xff
 80105ae:	701a      	strb	r2, [r3, #0]
    for (unsigned i = 0; i < list_size; ++i)
 80105b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b2:	3301      	adds	r3, #1
 80105b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ba:	429a      	cmp	r2, r3
 80105bc:	d3f3      	bcc.n	80105a6 <uxr_run_session_until_all_status+0x26>
    }


    session->request_list = request_list;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	687a      	ldr	r2, [r7, #4]
 80105c2:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    session->status_list = status_list;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	683a      	ldr	r2, [r7, #0]
 80105ca:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    session->request_status_list_size = list_size;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105d2:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

    bool status_confirmed = false;
 80105d6:	2300      	movs	r3, #0
 80105d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    int64_t start_timestamp = uxr_millis();
 80105dc:	f005 f816 	bl	801560c <uxr_millis>
 80105e0:	e9c7 0104 	strd	r0, r1, [r7, #16]
    int remaining_time = timeout_ms;
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	627b      	str	r3, [r7, #36]	; 0x24

    do
    {
        listen_message_reliably(session, remaining_time);
 80105e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80105ea:	68f8      	ldr	r0, [r7, #12]
 80105ec:	f000 fada 	bl	8010ba4 <listen_message_reliably>
        status_confirmed = true;
 80105f0:	2301      	movs	r3, #1
 80105f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        remaining_time = timeout_ms - (int)(uxr_millis() - start_timestamp);
 80105f6:	f005 f809 	bl	801560c <uxr_millis>
 80105fa:	4602      	mov	r2, r0
 80105fc:	460b      	mov	r3, r1
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	461a      	mov	r2, r3
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	1a9b      	subs	r3, r3, r2
 8010608:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = 0; i < list_size && status_confirmed; ++i)
 801060a:	2300      	movs	r3, #0
 801060c:	623b      	str	r3, [r7, #32]
 801060e:	e01a      	b.n	8010646 <uxr_run_session_until_all_status+0xc6>
        {
            status_confirmed = status_list[i] != UXR_STATUS_NONE
 8010610:	683a      	ldr	r2, [r7, #0]
 8010612:	6a3b      	ldr	r3, [r7, #32]
 8010614:	4413      	add	r3, r2
 8010616:	781b      	ldrb	r3, [r3, #0]
                    || request_list[i] == UXR_INVALID_REQUEST_ID;         //CHECK: better give an error? an assert?
 8010618:	2bff      	cmp	r3, #255	; 0xff
 801061a:	d106      	bne.n	801062a <uxr_run_session_until_all_status+0xaa>
 801061c:	6a3b      	ldr	r3, [r7, #32]
 801061e:	005b      	lsls	r3, r3, #1
 8010620:	687a      	ldr	r2, [r7, #4]
 8010622:	4413      	add	r3, r2
 8010624:	881b      	ldrh	r3, [r3, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d101      	bne.n	801062e <uxr_run_session_until_all_status+0xae>
 801062a:	2301      	movs	r3, #1
 801062c:	e000      	b.n	8010630 <uxr_run_session_until_all_status+0xb0>
 801062e:	2300      	movs	r3, #0
            status_confirmed = status_list[i] != UXR_STATUS_NONE
 8010630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010634:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010638:	f003 0301 	and.w	r3, r3, #1
 801063c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        for (size_t i = 0; i < list_size && status_confirmed; ++i)
 8010640:	6a3b      	ldr	r3, [r7, #32]
 8010642:	3301      	adds	r3, #1
 8010644:	623b      	str	r3, [r7, #32]
 8010646:	6a3a      	ldr	r2, [r7, #32]
 8010648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801064a:	429a      	cmp	r2, r3
 801064c:	d203      	bcs.n	8010656 <uxr_run_session_until_all_status+0xd6>
 801064e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010652:	2b00      	cmp	r3, #0
 8010654:	d1dc      	bne.n	8010610 <uxr_run_session_until_all_status+0x90>
        }
    }
    while (remaining_time > 0 && !status_confirmed);
 8010656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010658:	2b00      	cmp	r3, #0
 801065a:	dd06      	ble.n	801066a <uxr_run_session_until_all_status+0xea>
 801065c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010660:	f083 0301 	eor.w	r3, r3, #1
 8010664:	b2db      	uxtb	r3, r3
 8010666:	2b00      	cmp	r3, #0
 8010668:	d1be      	bne.n	80105e8 <uxr_run_session_until_all_status+0x68>

    session->request_status_list_size = 0;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2200      	movs	r2, #0
 801066e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

    bool status_ok = true;
 8010672:	2301      	movs	r3, #1
 8010674:	77fb      	strb	r3, [r7, #31]
    for (size_t i = 0; i < list_size && status_ok; ++i)
 8010676:	2300      	movs	r3, #0
 8010678:	61bb      	str	r3, [r7, #24]
 801067a:	e016      	b.n	80106aa <uxr_run_session_until_all_status+0x12a>
    {
        status_ok = status_list[i] == UXR_STATUS_OK || status_list[i] == UXR_STATUS_OK_MATCHED;
 801067c:	683a      	ldr	r2, [r7, #0]
 801067e:	69bb      	ldr	r3, [r7, #24]
 8010680:	4413      	add	r3, r2
 8010682:	781b      	ldrb	r3, [r3, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d005      	beq.n	8010694 <uxr_run_session_until_all_status+0x114>
 8010688:	683a      	ldr	r2, [r7, #0]
 801068a:	69bb      	ldr	r3, [r7, #24]
 801068c:	4413      	add	r3, r2
 801068e:	781b      	ldrb	r3, [r3, #0]
 8010690:	2b01      	cmp	r3, #1
 8010692:	d101      	bne.n	8010698 <uxr_run_session_until_all_status+0x118>
 8010694:	2301      	movs	r3, #1
 8010696:	e000      	b.n	801069a <uxr_run_session_until_all_status+0x11a>
 8010698:	2300      	movs	r3, #0
 801069a:	77fb      	strb	r3, [r7, #31]
 801069c:	7ffb      	ldrb	r3, [r7, #31]
 801069e:	f003 0301 	and.w	r3, r3, #1
 80106a2:	77fb      	strb	r3, [r7, #31]
    for (size_t i = 0; i < list_size && status_ok; ++i)
 80106a4:	69bb      	ldr	r3, [r7, #24]
 80106a6:	3301      	adds	r3, #1
 80106a8:	61bb      	str	r3, [r7, #24]
 80106aa:	69ba      	ldr	r2, [r7, #24]
 80106ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ae:	429a      	cmp	r2, r3
 80106b0:	d202      	bcs.n	80106b8 <uxr_run_session_until_all_status+0x138>
 80106b2:	7ffb      	ldrb	r3, [r7, #31]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d1e1      	bne.n	801067c <uxr_run_session_until_all_status+0xfc>
    }

    UXR_UNLOCK_SESSION(session);
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80106be:	4618      	mov	r0, r3
 80106c0:	f003 fac4 	bl	8013c4c <uxr_unlock>

    return status_ok;
 80106c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3730      	adds	r7, #48	; 0x30
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}

080106ce <uxr_epoch_nanos>:
    return uxr_epoch_nanos(session) / 1000000;
}

int64_t uxr_epoch_nanos(
        uxrSession* session)
{
 80106ce:	b5b0      	push	{r4, r5, r7, lr}
 80106d0:	b082      	sub	sp, #8
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	6078      	str	r0, [r7, #4]
    return uxr_nanos() - session->time_offset;
 80106d6:	f004 ffa9 	bl	801562c <uxr_nanos>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	e9d3 2378 	ldrd	r2, r3, [r3, #480]	; 0x1e0
 80106e0:	1a84      	subs	r4, r0, r2
 80106e2:	eb61 0503 	sbc.w	r5, r1, r3
 80106e6:	4622      	mov	r2, r4
 80106e8:	462b      	mov	r3, r5
}
 80106ea:	4610      	mov	r0, r2
 80106ec:	4619      	mov	r1, r3
 80106ee:	3708      	adds	r7, #8
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bdb0      	pop	{r4, r5, r7, pc}

080106f4 <uxr_flash_output_streams>:

#endif /* ifdef PERFORMANCE_TESTING */

void uxr_flash_output_streams(
        uxrSession* session)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b092      	sub	sp, #72	; 0x48
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
    UXR_HANDLE_SHARED_MEMORY();
 80106fc:	f003 fc9e 	bl	801403c <uxr_handle_shared_memory>

    for (uint8_t i = 0; i < session->streams.output_best_effort_size; ++i)
 8010700:	2300      	movs	r3, #0
 8010702:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010706:	e045      	b.n	8010794 <uxr_flash_output_streams+0xa0>
    {
        uxrOutputBestEffortStream* stream = &session->streams.output_best_effort[i];
 8010708:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801070c:	2264      	movs	r2, #100	; 0x64
 801070e:	fb02 f303 	mul.w	r3, r2, r3
 8010712:	3308      	adds	r3, #8
 8010714:	687a      	ldr	r2, [r7, #4]
 8010716:	4413      	add	r3, r2
 8010718:	637b      	str	r3, [r7, #52]	; 0x34
        uxrStreamId id = uxr_stream_id(i, UXR_BEST_EFFORT_STREAM, UXR_OUTPUT_STREAM);
 801071a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801071e:	2201      	movs	r2, #1
 8010720:	2101      	movs	r1, #1
 8010722:	4618      	mov	r0, r3
 8010724:	f002 fd0a 	bl	801313c <uxr_stream_id>
 8010728:	4603      	mov	r3, r0
 801072a:	62bb      	str	r3, [r7, #40]	; 0x28

        uint8_t* buffer; size_t length; uxrSeqNum seq_num;

        UXR_LOCK_STREAM_ID(session, id);
 801072c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f003 fa99 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 8010734:	6338      	str	r0, [r7, #48]	; 0x30
 8010736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010738:	2b00      	cmp	r3, #0
 801073a:	d002      	beq.n	8010742 <uxr_flash_output_streams+0x4e>
 801073c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801073e:	f003 fa76 	bl	8013c2e <uxr_lock>

        if (uxr_prepare_best_effort_buffer_to_send(stream, &buffer, &length, &seq_num))
 8010742:	f107 031e 	add.w	r3, r7, #30
 8010746:	f107 0220 	add.w	r2, r7, #32
 801074a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801074e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010750:	f002 f80a 	bl	8012768 <uxr_prepare_best_effort_buffer_to_send>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d00c      	beq.n	8010774 <uxr_flash_output_streams+0x80>
        {
            uxr_stamp_session_header(&session->info, id.raw, seq_num, buffer);
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8010760:	8bfa      	ldrh	r2, [r7, #30]
 8010762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010764:	f001 f850 	bl	8011808 <uxr_stamp_session_header>
            send_message(session, buffer, length);
 8010768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076a:	6a3a      	ldr	r2, [r7, #32]
 801076c:	4619      	mov	r1, r3
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 faf9 	bl	8010d66 <send_message>
        }

        UXR_UNLOCK_STREAM_ID(session, id);
 8010774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f003 fa75 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 801077c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010780:	2b00      	cmp	r3, #0
 8010782:	d002      	beq.n	801078a <uxr_flash_output_streams+0x96>
 8010784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010786:	f003 fa61 	bl	8013c4c <uxr_unlock>
    for (uint8_t i = 0; i < session->streams.output_best_effort_size; ++i)
 801078a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801078e:	3301      	adds	r3, #1
 8010790:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801079a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801079e:	429a      	cmp	r2, r3
 80107a0:	d3b2      	bcc.n	8010708 <uxr_flash_output_streams+0x14>
    }

    for (uint8_t i = 0; i < session->streams.output_reliable_size; ++i)
 80107a2:	2300      	movs	r3, #0
 80107a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80107a8:	e046      	b.n	8010838 <uxr_flash_output_streams+0x144>
    {
        uxrOutputReliableStream* stream = &session->streams.output_reliable[i];
 80107aa:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80107ae:	4613      	mov	r3, r2
 80107b0:	011b      	lsls	r3, r3, #4
 80107b2:	1a9b      	subs	r3, r3, r2
 80107b4:	00db      	lsls	r3, r3, #3
 80107b6:	3370      	adds	r3, #112	; 0x70
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	4413      	add	r3, r2
 80107bc:	643b      	str	r3, [r7, #64]	; 0x40
        uxrStreamId id = uxr_stream_id(i, UXR_RELIABLE_STREAM, UXR_OUTPUT_STREAM);
 80107be:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80107c2:	2201      	movs	r2, #1
 80107c4:	2102      	movs	r1, #2
 80107c6:	4618      	mov	r0, r3
 80107c8:	f002 fcb8 	bl	801313c <uxr_stream_id>
 80107cc:	4603      	mov	r3, r0
 80107ce:	61bb      	str	r3, [r7, #24]

        uint8_t* buffer; size_t length; uxrSeqNum seq_num;

        UXR_LOCK_STREAM_ID(session, id);
 80107d0:	69b9      	ldr	r1, [r7, #24]
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f003 fa47 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 80107d8:	63f8      	str	r0, [r7, #60]	; 0x3c
 80107da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d00f      	beq.n	8010800 <uxr_flash_output_streams+0x10c>
 80107e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107e2:	f003 fa24 	bl	8013c2e <uxr_lock>

        while (uxr_prepare_next_reliable_buffer_to_send(stream, &buffer, &length, &seq_num))
 80107e6:	e00b      	b.n	8010800 <uxr_flash_output_streams+0x10c>
        {
            uxr_stamp_session_header(&session->info, id.raw, seq_num, buffer);
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	7e39      	ldrb	r1, [r7, #24]
 80107ec:	89fa      	ldrh	r2, [r7, #14]
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	f001 f80a 	bl	8011808 <uxr_stamp_session_header>
            send_message(session, buffer, length);
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	693a      	ldr	r2, [r7, #16]
 80107f8:	4619      	mov	r1, r3
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f000 fab3 	bl	8010d66 <send_message>
        while (uxr_prepare_next_reliable_buffer_to_send(stream, &buffer, &length, &seq_num))
 8010800:	f107 030e 	add.w	r3, r7, #14
 8010804:	f107 0210 	add.w	r2, r7, #16
 8010808:	f107 0114 	add.w	r1, r7, #20
 801080c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801080e:	f002 fa6b 	bl	8012ce8 <uxr_prepare_next_reliable_buffer_to_send>
 8010812:	4603      	mov	r3, r0
 8010814:	2b00      	cmp	r3, #0
 8010816:	d1e7      	bne.n	80107e8 <uxr_flash_output_streams+0xf4>
        }

        UXR_UNLOCK_STREAM_ID(session, id);
 8010818:	69b9      	ldr	r1, [r7, #24]
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f003 fa23 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 8010820:	63b8      	str	r0, [r7, #56]	; 0x38
 8010822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010824:	2b00      	cmp	r3, #0
 8010826:	d002      	beq.n	801082e <uxr_flash_output_streams+0x13a>
 8010828:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801082a:	f003 fa0f 	bl	8013c4c <uxr_unlock>
    for (uint8_t i = 0; i < session->streams.output_reliable_size; ++i)
 801082e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8010832:	3301      	adds	r3, #1
 8010834:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 801083e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8010842:	429a      	cmp	r2, r3
 8010844:	d3b1      	bcc.n	80107aa <uxr_flash_output_streams+0xb6>
    }
}
 8010846:	bf00      	nop
 8010848:	bf00      	nop
 801084a:	3748      	adds	r7, #72	; 0x48
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <uxr_acknack_pong>:
//==================================================================
//                             PRIVATE
//==================================================================
bool uxr_acknack_pong(
        ucdrBuffer* buffer)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 8010856:	af00      	add	r7, sp, #0
 8010858:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801085c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8010860:	6018      	str	r0, [r3, #0]
    bool success = false;
 8010862:	2300      	movs	r3, #0
 8010864:	f887 329f 	strb.w	r3, [r7, #671]	; 0x29f
    bool ret = false;
 8010868:	2300      	movs	r3, #0
 801086a:	f887 329e 	strb.w	r3, [r7, #670]	; 0x29e
    bool must_be_read = ucdr_buffer_remaining(buffer) > SUBHEADER_SIZE;
 801086e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8010872:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8010876:	6818      	ldr	r0, [r3, #0]
 8010878:	f7f9 fdc8 	bl	800a40c <ucdr_buffer_remaining>
 801087c:	4603      	mov	r3, r0
 801087e:	2b04      	cmp	r3, #4
 8010880:	bf8c      	ite	hi
 8010882:	2301      	movhi	r3, #1
 8010884:	2300      	movls	r3, #0
 8010886:	f887 329d 	strb.w	r3, [r7, #669]	; 0x29d

    if (must_be_read)
 801088a:	f897 329d 	ldrb.w	r3, [r7, #669]	; 0x29d
 801088e:	2b00      	cmp	r3, #0
 8010890:	f000 80ea 	beq.w	8010a68 <uxr_acknack_pong+0x218>
    {
        uint8_t id = 0;
 8010894:	2300      	movs	r3, #0
 8010896:	f887 329c 	strb.w	r3, [r7, #668]	; 0x29c
        uint8_t flags = 0;
 801089a:	2300      	movs	r3, #0
 801089c:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
        uint16_t length = 0;
 80108a0:	2300      	movs	r3, #0
 80108a2:	f8a7 3298 	strh.w	r3, [r7, #664]	; 0x298
        uxr_deserialize_submessage_header(buffer, &id, &flags, &length);
 80108a6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80108aa:	f207 229b 	addw	r2, r7, #667	; 0x29b
 80108ae:	f507 7127 	add.w	r1, r7, #668	; 0x29c
 80108b2:	f507 7028 	add.w	r0, r7, #672	; 0x2a0
 80108b6:	f5a0 7027 	sub.w	r0, r0, #668	; 0x29c
 80108ba:	6800      	ldr	r0, [r0, #0]
 80108bc:	f7fb fe71 	bl	800c5a2 <uxr_deserialize_submessage_header>
        success = ucdr_buffer_remaining(buffer) >= length;
 80108c0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80108c4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80108c8:	6818      	ldr	r0, [r3, #0]
 80108ca:	f7f9 fd9f 	bl	800a40c <ucdr_buffer_remaining>
 80108ce:	4603      	mov	r3, r0
 80108d0:	f8b7 2298 	ldrh.w	r2, [r7, #664]	; 0x298
 80108d4:	4293      	cmp	r3, r2
 80108d6:	bf2c      	ite	cs
 80108d8:	2301      	movcs	r3, #1
 80108da:	2300      	movcc	r3, #0
 80108dc:	f887 329f 	strb.w	r3, [r7, #671]	; 0x29f

        if (success && id == SUBMESSAGE_ID_INFO)
 80108e0:	f897 329f 	ldrb.w	r3, [r7, #671]	; 0x29f
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	f000 80bf 	beq.w	8010a68 <uxr_acknack_pong+0x218>
 80108ea:	f897 329c 	ldrb.w	r3, [r7, #668]	; 0x29c
 80108ee:	2b06      	cmp	r3, #6
 80108f0:	f040 80ba 	bne.w	8010a68 <uxr_acknack_pong+0x218>
        {
            INFO_Payload info_payload;

            success &= uxr_deserialize_BaseObjectReply(buffer, &info_payload.base);
 80108f4:	f107 0208 	add.w	r2, r7, #8
 80108f8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80108fc:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8010900:	4611      	mov	r1, r2
 8010902:	6818      	ldr	r0, [r3, #0]
 8010904:	f7fd fe8f 	bl	800e626 <uxr_deserialize_BaseObjectReply>
 8010908:	4603      	mov	r3, r0
 801090a:	461a      	mov	r2, r3
 801090c:	f897 329f 	ldrb.w	r3, [r7, #671]	; 0x29f
 8010910:	4013      	ands	r3, r2
 8010912:	2b00      	cmp	r3, #0
 8010914:	bf14      	ite	ne
 8010916:	2301      	movne	r3, #1
 8010918:	2300      	moveq	r3, #0
 801091a:	f887 329f 	strb.w	r3, [r7, #671]	; 0x29f
            success &= ucdr_deserialize_bool(buffer, &info_payload.object_info.optional_config);
 801091e:	f107 0308 	add.w	r3, r7, #8
 8010922:	f103 0208 	add.w	r2, r3, #8
 8010926:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801092a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801092e:	4611      	mov	r1, r2
 8010930:	6818      	ldr	r0, [r3, #0]
 8010932:	f7f9 ff01 	bl	800a738 <ucdr_deserialize_bool>
 8010936:	4603      	mov	r3, r0
 8010938:	461a      	mov	r2, r3
 801093a:	f897 329f 	ldrb.w	r3, [r7, #671]	; 0x29f
 801093e:	4013      	ands	r3, r2
 8010940:	2b00      	cmp	r3, #0
 8010942:	bf14      	ite	ne
 8010944:	2301      	movne	r3, #1
 8010946:	2300      	moveq	r3, #0
 8010948:	f887 329f 	strb.w	r3, [r7, #671]	; 0x29f

            if (info_payload.object_info.optional_config)
 801094c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8010950:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8010954:	7a1b      	ldrb	r3, [r3, #8]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d016      	beq.n	8010988 <uxr_acknack_pong+0x138>
            {
                success &= uxr_deserialize_ObjectVariant(buffer, &info_payload.object_info.config);
 801095a:	f107 0308 	add.w	r3, r7, #8
 801095e:	f103 020c 	add.w	r2, r3, #12
 8010962:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8010966:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801096a:	4611      	mov	r1, r2
 801096c:	6818      	ldr	r0, [r3, #0]
 801096e:	f7fd fc93 	bl	800e298 <uxr_deserialize_ObjectVariant>
 8010972:	4603      	mov	r3, r0
 8010974:	461a      	mov	r2, r3
 8010976:	f897 329f 	ldrb.w	r3, [r7, #671]	; 0x29f
 801097a:	4013      	ands	r3, r2
 801097c:	2b00      	cmp	r3, #0
 801097e:	bf14      	ite	ne
 8010980:	2301      	movne	r3, #1
 8010982:	2300      	moveq	r3, #0
 8010984:	f887 329f 	strb.w	r3, [r7, #671]	; 0x29f
            }

            success &= ucdr_deserialize_bool(buffer, &info_payload.object_info.optional_activity);
 8010988:	f107 0308 	add.w	r3, r7, #8
 801098c:	f503 7207 	add.w	r2, r3, #540	; 0x21c
 8010990:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8010994:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8010998:	4611      	mov	r1, r2
 801099a:	6818      	ldr	r0, [r3, #0]
 801099c:	f7f9 fecc 	bl	800a738 <ucdr_deserialize_bool>
 80109a0:	4603      	mov	r3, r0
 80109a2:	461a      	mov	r2, r3
 80109a4:	f897 329f 	ldrb.w	r3, [r7, #671]	; 0x29f
 80109a8:	4013      	ands	r3, r2
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	bf14      	ite	ne
 80109ae:	2301      	movne	r3, #1
 80109b0:	2300      	moveq	r3, #0
 80109b2:	f887 329f 	strb.w	r3, [r7, #671]	; 0x29f
            if (info_payload.object_info.optional_activity)
 80109b6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80109ba:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80109be:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d050      	beq.n	8010a68 <uxr_acknack_pong+0x218>
            {
                success &= ucdr_deserialize_uint8_t(buffer, &info_payload.object_info.activity.kind);
 80109c6:	f107 0308 	add.w	r3, r7, #8
 80109ca:	f503 7208 	add.w	r2, r3, #544	; 0x220
 80109ce:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80109d2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80109d6:	4611      	mov	r1, r2
 80109d8:	6818      	ldr	r0, [r3, #0]
 80109da:	f7f9 ff10 	bl	800a7fe <ucdr_deserialize_uint8_t>
 80109de:	4603      	mov	r3, r0
 80109e0:	461a      	mov	r2, r3
 80109e2:	f897 329f 	ldrb.w	r3, [r7, #671]	; 0x29f
 80109e6:	4013      	ands	r3, r2
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	bf14      	ite	ne
 80109ec:	2301      	movne	r3, #1
 80109ee:	2300      	moveq	r3, #0
 80109f0:	f887 329f 	strb.w	r3, [r7, #671]	; 0x29f
                if (success && DDS_XRCE_OBJK_AGENT == info_payload.object_info.activity.kind)
 80109f4:	f897 329f 	ldrb.w	r3, [r7, #671]	; 0x29f
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d035      	beq.n	8010a68 <uxr_acknack_pong+0x218>
 80109fc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8010a00:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8010a04:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8010a08:	2b0d      	cmp	r3, #13
 8010a0a:	d12d      	bne.n	8010a68 <uxr_acknack_pong+0x218>
                {
                    success &= ucdr_deserialize_int16_t(buffer,
 8010a0c:	f107 0308 	add.w	r3, r7, #8
 8010a10:	f503 720a 	add.w	r2, r3, #552	; 0x228
 8010a14:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8010a18:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8010a1c:	4611      	mov	r1, r2
 8010a1e:	6818      	ldr	r0, [r3, #0]
 8010a20:	f7fb f969 	bl	800bcf6 <ucdr_deserialize_int16_t>
 8010a24:	4603      	mov	r3, r0
 8010a26:	461a      	mov	r2, r3
 8010a28:	f897 329f 	ldrb.w	r3, [r7, #671]	; 0x29f
 8010a2c:	4013      	ands	r3, r2
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	bf14      	ite	ne
 8010a32:	2301      	movne	r3, #1
 8010a34:	2300      	moveq	r3, #0
 8010a36:	f887 329f 	strb.w	r3, [r7, #671]	; 0x29f
                                    &info_payload.object_info.activity._.agent.availability);
                    ret = success && (info_payload.object_info.activity._.agent.availability > 0);
 8010a3a:	f897 329f 	ldrb.w	r3, [r7, #671]	; 0x29f
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d009      	beq.n	8010a56 <uxr_acknack_pong+0x206>
 8010a42:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8010a46:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8010a4a:	f9b3 3228 	ldrsh.w	r3, [r3, #552]	; 0x228
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	dd01      	ble.n	8010a56 <uxr_acknack_pong+0x206>
 8010a52:	2301      	movs	r3, #1
 8010a54:	e000      	b.n	8010a58 <uxr_acknack_pong+0x208>
 8010a56:	2300      	movs	r3, #0
 8010a58:	f887 329e 	strb.w	r3, [r7, #670]	; 0x29e
 8010a5c:	f897 329e 	ldrb.w	r3, [r7, #670]	; 0x29e
 8010a60:	f003 0301 	and.w	r3, r3, #1
 8010a64:	f887 329e 	strb.w	r3, [r7, #670]	; 0x29e
                }
            }
        }
    }

    return ret;
 8010a68:	f897 329e 	ldrb.w	r3, [r7, #670]	; 0x29e
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f507 7728 	add.w	r7, r7, #672	; 0x2a0
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <listen_message>:
}

bool listen_message(
        uxrSession* session,
        int poll_ms)
{
 8010a76:	b580      	push	{r7, lr}
 8010a78:	b08e      	sub	sp, #56	; 0x38
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
 8010a7e:	6039      	str	r1, [r7, #0]
    uint8_t* data; size_t length;

    UXR_LOCK_ALL_INPUT_STREAMS(session);
 8010a80:	2300      	movs	r3, #0
 8010a82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010a86:	e010      	b.n	8010aaa <listen_message+0x34>
 8010a88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a8c:	2258      	movs	r2, #88	; 0x58
 8010a8e:	fb02 f303 	mul.w	r3, r2, r3
 8010a92:	33e8      	adds	r3, #232	; 0xe8
 8010a94:	687a      	ldr	r2, [r7, #4]
 8010a96:	4413      	add	r3, r2
 8010a98:	3308      	adds	r3, #8
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f003 f8c7 	bl	8013c2e <uxr_lock>
 8010aa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8010ab0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d3e7      	bcc.n	8010a88 <listen_message+0x12>
 8010ab8:	2300      	movs	r3, #0
 8010aba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8010abe:	e010      	b.n	8010ae2 <listen_message+0x6c>
 8010ac0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010ac4:	226c      	movs	r2, #108	; 0x6c
 8010ac6:	fb02 f303 	mul.w	r3, r2, r3
 8010aca:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8010ace:	687a      	ldr	r2, [r7, #4]
 8010ad0:	4413      	add	r3, r2
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f003 f8ab 	bl	8013c2e <uxr_lock>
 8010ad8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010adc:	3301      	adds	r3, #1
 8010ade:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8010ae8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d3e7      	bcc.n	8010ac0 <listen_message+0x4a>
    bool must_be_read = recv_message(session, &data, &length, poll_ms);
 8010af0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010af4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 f94b 	bl	8010d96 <recv_message>
 8010b00:	4603      	mov	r3, r0
 8010b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (must_be_read)
 8010b06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d00c      	beq.n	8010b28 <listen_message+0xb2>
    {
        ucdrBuffer ub;
        ucdr_init_buffer(&ub, data, (uint32_t)length);
 8010b0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b12:	f107 0308 	add.w	r3, r7, #8
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7f9 fb61 	bl	800a1de <ucdr_init_buffer>
        read_message(session, &ub);
 8010b1c:	f107 0308 	add.w	r3, r7, #8
 8010b20:	4619      	mov	r1, r3
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 f9f9 	bl	8010f1a <read_message>
    }
    UXR_UNLOCK_ALL_INPUT_STREAMS(session);
 8010b28:	2300      	movs	r3, #0
 8010b2a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8010b2e:	e010      	b.n	8010b52 <listen_message+0xdc>
 8010b30:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8010b34:	2258      	movs	r2, #88	; 0x58
 8010b36:	fb02 f303 	mul.w	r3, r2, r3
 8010b3a:	33e8      	adds	r3, #232	; 0xe8
 8010b3c:	687a      	ldr	r2, [r7, #4]
 8010b3e:	4413      	add	r3, r2
 8010b40:	3308      	adds	r3, #8
 8010b42:	4618      	mov	r0, r3
 8010b44:	f003 f882 	bl	8013c4c <uxr_unlock>
 8010b48:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8010b58:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d3e7      	bcc.n	8010b30 <listen_message+0xba>
 8010b60:	2300      	movs	r3, #0
 8010b62:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8010b66:	e010      	b.n	8010b8a <listen_message+0x114>
 8010b68:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010b6c:	226c      	movs	r2, #108	; 0x6c
 8010b6e:	fb02 f303 	mul.w	r3, r2, r3
 8010b72:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8010b76:	687a      	ldr	r2, [r7, #4]
 8010b78:	4413      	add	r3, r2
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f003 f866 	bl	8013c4c <uxr_unlock>
 8010b80:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010b84:	3301      	adds	r3, #1
 8010b86:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8010b90:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d3e7      	bcc.n	8010b68 <listen_message+0xf2>

    return must_be_read;
 8010b98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3738      	adds	r7, #56	; 0x38
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <listen_message_reliably>:

bool listen_message_reliably(
        uxrSession* session,
        int poll_ms)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b092      	sub	sp, #72	; 0x48
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
 8010bac:	6039      	str	r1, [r7, #0]
    bool received = false;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int32_t poll = (poll_ms >= 0) ? poll_ms : INT32_MAX;
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	db01      	blt.n	8010bbe <listen_message_reliably+0x1a>
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	e001      	b.n	8010bc2 <listen_message_reliably+0x1e>
 8010bbe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010bc2:	647b      	str	r3, [r7, #68]	; 0x44
    do
    {
        int64_t next_heartbeat_timestamp = INT64_MAX;
 8010bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010bc8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010bcc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        int64_t timestamp = uxr_millis();
 8010bd0:	f004 fd1c 	bl	801560c <uxr_millis>
 8010bd4:	e9c7 0108 	strd	r0, r1, [r7, #32]
        for (uint8_t i = 0; i < session->streams.output_reliable_size; ++i)
 8010bd8:	2300      	movs	r3, #0
 8010bda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010bde:	e047      	b.n	8010c70 <listen_message_reliably+0xcc>
        {
            uxrOutputReliableStream* stream = &session->streams.output_reliable[i];
 8010be0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010be4:	4613      	mov	r3, r2
 8010be6:	011b      	lsls	r3, r3, #4
 8010be8:	1a9b      	subs	r3, r3, r2
 8010bea:	00db      	lsls	r3, r3, #3
 8010bec:	3370      	adds	r3, #112	; 0x70
 8010bee:	687a      	ldr	r2, [r7, #4]
 8010bf0:	4413      	add	r3, r2
 8010bf2:	61bb      	str	r3, [r7, #24]
            uxrStreamId id = uxr_stream_id(i, UXR_RELIABLE_STREAM, UXR_OUTPUT_STREAM);
 8010bf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bf8:	2201      	movs	r2, #1
 8010bfa:	2102      	movs	r1, #2
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f002 fa9d 	bl	801313c <uxr_stream_id>
 8010c02:	4603      	mov	r3, r0
 8010c04:	60fb      	str	r3, [r7, #12]

            UXR_LOCK_STREAM_ID(session, id);
 8010c06:	68f9      	ldr	r1, [r7, #12]
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f003 f82c 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 8010c0e:	6178      	str	r0, [r7, #20]
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d002      	beq.n	8010c1c <listen_message_reliably+0x78>
 8010c16:	6978      	ldr	r0, [r7, #20]
 8010c18:	f003 f809 	bl	8013c2e <uxr_lock>
            if (uxr_update_output_stream_heartbeat_timestamp(stream, timestamp))
 8010c1c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010c20:	69b8      	ldr	r0, [r7, #24]
 8010c22:	f002 f8c9 	bl	8012db8 <uxr_update_output_stream_heartbeat_timestamp>
 8010c26:	4603      	mov	r3, r0
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d003      	beq.n	8010c34 <listen_message_reliably+0x90>
            {
                write_submessage_heartbeat(session, id);
 8010c2c:	68f9      	ldr	r1, [r7, #12]
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f000 f8cb 	bl	8010dca <write_submessage_heartbeat>
            }

            if (stream->next_heartbeat_timestamp < next_heartbeat_timestamp)
 8010c34:	69bb      	ldr	r3, [r7, #24]
 8010c36:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8010c3a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010c3e:	4290      	cmp	r0, r2
 8010c40:	eb71 0303 	sbcs.w	r3, r1, r3
 8010c44:	da04      	bge.n	8010c50 <listen_message_reliably+0xac>
            {
                next_heartbeat_timestamp = stream->next_heartbeat_timestamp;
 8010c46:	69bb      	ldr	r3, [r7, #24]
 8010c48:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8010c4c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
            }
            UXR_UNLOCK_STREAM_ID(session, id);
 8010c50:	68f9      	ldr	r1, [r7, #12]
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f003 f807 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 8010c58:	6138      	str	r0, [r7, #16]
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d002      	beq.n	8010c66 <listen_message_reliably+0xc2>
 8010c60:	6938      	ldr	r0, [r7, #16]
 8010c62:	f002 fff3 	bl	8013c4c <uxr_unlock>
        for (uint8_t i = 0; i < session->streams.output_reliable_size; ++i)
 8010c66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8010c76:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d3b0      	bcc.n	8010be0 <listen_message_reliably+0x3c>
        }

        int32_t poll_to_next_heartbeat =
                (next_heartbeat_timestamp != INT64_MAX) ? (int32_t)(next_heartbeat_timestamp - timestamp) : poll;
 8010c7e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010c82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010c86:	428b      	cmp	r3, r1
 8010c88:	bf08      	it	eq
 8010c8a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8010c8e:	d003      	beq.n	8010c98 <listen_message_reliably+0xf4>
 8010c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c92:	6a3b      	ldr	r3, [r7, #32]
 8010c94:	1ad3      	subs	r3, r2, r3
 8010c96:	e000      	b.n	8010c9a <listen_message_reliably+0xf6>
 8010c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        int32_t poll_to_next_heartbeat =
 8010c9a:	633b      	str	r3, [r7, #48]	; 0x30
        if (0 == poll_to_next_heartbeat)
 8010c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d101      	bne.n	8010ca6 <listen_message_reliably+0x102>
        {
            poll_to_next_heartbeat = 1;
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	633b      	str	r3, [r7, #48]	; 0x30
        }

        int poll_chosen = (poll_to_next_heartbeat < poll) ? poll_to_next_heartbeat : poll;
 8010ca6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010caa:	4293      	cmp	r3, r2
 8010cac:	bfa8      	it	ge
 8010cae:	4613      	movge	r3, r2
 8010cb0:	61fb      	str	r3, [r7, #28]
        received = listen_message(session, poll_chosen);
 8010cb2:	69f9      	ldr	r1, [r7, #28]
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f7ff fede 	bl	8010a76 <listen_message>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (!received)
 8010cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cc4:	f083 0301 	eor.w	r3, r3, #1
 8010cc8:	b2db      	uxtb	r3, r3
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d003      	beq.n	8010cd6 <listen_message_reliably+0x132>
        {
            poll -= poll_chosen;
 8010cce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cd0:	69fb      	ldr	r3, [r7, #28]
 8010cd2:	1ad3      	subs	r3, r2, r3
 8010cd4:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }
    while (!received && poll > 0);
 8010cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cda:	f083 0301 	eor.w	r3, r3, #1
 8010cde:	b2db      	uxtb	r3, r3
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d003      	beq.n	8010cec <listen_message_reliably+0x148>
 8010ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	f73f af6c 	bgt.w	8010bc4 <listen_message_reliably+0x20>

    return received;
 8010cec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3748      	adds	r7, #72	; 0x48
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}

08010cf8 <wait_session_status>:
bool wait_session_status(
        uxrSession* session,
        uint8_t* buffer,
        size_t length,
        size_t attempts)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b086      	sub	sp, #24
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	60f8      	str	r0, [r7, #12]
 8010d00:	60b9      	str	r1, [r7, #8]
 8010d02:	607a      	str	r2, [r7, #4]
 8010d04:	603b      	str	r3, [r7, #0]
    session->info.last_requested_status = UXR_STATUS_NONE;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	22ff      	movs	r2, #255	; 0xff
 8010d0a:	715a      	strb	r2, [r3, #5]

    if (0 == attempts)
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d106      	bne.n	8010d20 <wait_session_status+0x28>
    {
        send_message(session, buffer, length);
 8010d12:	687a      	ldr	r2, [r7, #4]
 8010d14:	68b9      	ldr	r1, [r7, #8]
 8010d16:	68f8      	ldr	r0, [r7, #12]
 8010d18:	f000 f825 	bl	8010d66 <send_message>
        return true;
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	e01e      	b.n	8010d5e <wait_session_status+0x66>
    }

    for (size_t i = 0; i < attempts && session->info.last_requested_status == UXR_STATUS_NONE; ++i)
 8010d20:	2300      	movs	r3, #0
 8010d22:	617b      	str	r3, [r7, #20]
 8010d24:	e00c      	b.n	8010d40 <wait_session_status+0x48>
    {
        send_message(session, buffer, length);
 8010d26:	687a      	ldr	r2, [r7, #4]
 8010d28:	68b9      	ldr	r1, [r7, #8]
 8010d2a:	68f8      	ldr	r0, [r7, #12]
 8010d2c:	f000 f81b 	bl	8010d66 <send_message>
        listen_message(session, UXR_CONFIG_MIN_SESSION_CONNECTION_INTERVAL);
 8010d30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f7ff fe9e 	bl	8010a76 <listen_message>
    for (size_t i = 0; i < attempts && session->info.last_requested_status == UXR_STATUS_NONE; ++i)
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	3301      	adds	r3, #1
 8010d3e:	617b      	str	r3, [r7, #20]
 8010d40:	697a      	ldr	r2, [r7, #20]
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	429a      	cmp	r2, r3
 8010d46:	d203      	bcs.n	8010d50 <wait_session_status+0x58>
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	795b      	ldrb	r3, [r3, #5]
 8010d4c:	2bff      	cmp	r3, #255	; 0xff
 8010d4e:	d0ea      	beq.n	8010d26 <wait_session_status+0x2e>
    }

    return session->info.last_requested_status != UXR_STATUS_NONE;
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	795b      	ldrb	r3, [r3, #5]
 8010d54:	2bff      	cmp	r3, #255	; 0xff
 8010d56:	bf14      	ite	ne
 8010d58:	2301      	movne	r3, #1
 8010d5a:	2300      	moveq	r3, #0
 8010d5c:	b2db      	uxtb	r3, r3
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3718      	adds	r7, #24
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}

08010d66 <send_message>:

inline bool send_message(
        const uxrSession* session,
        uint8_t* buffer,
        size_t length)
{
 8010d66:	b580      	push	{r7, lr}
 8010d68:	b086      	sub	sp, #24
 8010d6a:	af00      	add	r7, sp, #0
 8010d6c:	60f8      	str	r0, [r7, #12]
 8010d6e:	60b9      	str	r1, [r7, #8]
 8010d70:	607a      	str	r2, [r7, #4]
    bool sent = session->comm->send_msg(session->comm->instance, buffer, length);
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	68fa      	ldr	r2, [r7, #12]
 8010d7c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8010d80:	6810      	ldr	r0, [r2, #0]
 8010d82:	687a      	ldr	r2, [r7, #4]
 8010d84:	68b9      	ldr	r1, [r7, #8]
 8010d86:	4798      	blx	r3
 8010d88:	4603      	mov	r3, r0
 8010d8a:	75fb      	strb	r3, [r7, #23]

    UXR_DEBUG_PRINT_MESSAGE((sent) ? UXR_SEND : UXR_ERROR_SEND, buffer, length, session->info.key);
    return sent;
 8010d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3718      	adds	r7, #24
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}

08010d96 <recv_message>:
inline bool recv_message(
        const uxrSession* session,
        uint8_t** buffer,
        size_t* length,
        int poll_ms)
{
 8010d96:	b590      	push	{r4, r7, lr}
 8010d98:	b087      	sub	sp, #28
 8010d9a:	af00      	add	r7, sp, #0
 8010d9c:	60f8      	str	r0, [r7, #12]
 8010d9e:	60b9      	str	r1, [r7, #8]
 8010da0:	607a      	str	r2, [r7, #4]
 8010da2:	603b      	str	r3, [r7, #0]
    bool received = session->comm->recv_msg(session->comm->instance, buffer, length, poll_ms);
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8010daa:	689c      	ldr	r4, [r3, #8]
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8010db2:	6818      	ldr	r0, [r3, #0]
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	687a      	ldr	r2, [r7, #4]
 8010db8:	68b9      	ldr	r1, [r7, #8]
 8010dba:	47a0      	blx	r4
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	75fb      	strb	r3, [r7, #23]

    if (received)
    {
        UXR_DEBUG_PRINT_MESSAGE(UXR_RECV, *buffer, *length, session->info.key);
    }
    return received;
 8010dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	371c      	adds	r7, #28
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd90      	pop	{r4, r7, pc}

08010dca <write_submessage_heartbeat>:

void write_submessage_heartbeat(
        const uxrSession* session,
        uxrStreamId id)
{
 8010dca:	b580      	push	{r7, lr}
 8010dcc:	b094      	sub	sp, #80	; 0x50
 8010dce:	af02      	add	r7, sp, #8
 8010dd0:	6078      	str	r0, [r7, #4]
 8010dd2:	6039      	str	r1, [r7, #0]
    uint8_t heartbeat_buffer[HEARTBEAT_MAX_MSG_SIZE];
    ucdrBuffer ub;
    ucdr_init_buffer_origin_offset(&ub, heartbeat_buffer, HEARTBEAT_MAX_MSG_SIZE, 0u,
            uxr_session_header_offset(&session->info));
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f000 fd76 	bl	80118c8 <uxr_session_header_offset>
 8010ddc:	4603      	mov	r3, r0
    ucdr_init_buffer_origin_offset(&ub, heartbeat_buffer, HEARTBEAT_MAX_MSG_SIZE, 0u,
 8010dde:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010de2:	f107 0010 	add.w	r0, r7, #16
 8010de6:	9300      	str	r3, [sp, #0]
 8010de8:	2300      	movs	r3, #0
 8010dea:	2211      	movs	r2, #17
 8010dec:	f7f9 fa1a 	bl	800a224 <ucdr_init_buffer_origin_offset>

    const uxrOutputReliableStream* stream = &session->streams.output_reliable[id.index];
 8010df0:	787b      	ldrb	r3, [r7, #1]
 8010df2:	461a      	mov	r2, r3
 8010df4:	4613      	mov	r3, r2
 8010df6:	011b      	lsls	r3, r3, #4
 8010df8:	1a9b      	subs	r3, r3, r2
 8010dfa:	00db      	lsls	r3, r3, #3
 8010dfc:	3370      	adds	r3, #112	; 0x70
 8010dfe:	687a      	ldr	r2, [r7, #4]
 8010e00:	4413      	add	r3, r2
 8010e02:	647b      	str	r3, [r7, #68]	; 0x44

    /* Buffer submessage header. */
    uxr_buffer_submessage_header(&ub, SUBMESSAGE_ID_HEARTBEAT, HEARTBEAT_PAYLOAD_SIZE, 0);
 8010e04:	f107 0010 	add.w	r0, r7, #16
 8010e08:	2300      	movs	r3, #0
 8010e0a:	2205      	movs	r2, #5
 8010e0c:	210b      	movs	r1, #11
 8010e0e:	f000 fdef 	bl	80119f0 <uxr_buffer_submessage_header>

    /* Buffer HEARTBEAT. */
    HEARTBEAT_Payload payload;
    payload.first_unacked_seq_nr = uxr_seq_num_add(stream->last_acknown, 1);
 8010e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e14:	8a5b      	ldrh	r3, [r3, #18]
 8010e16:	2101      	movs	r1, #1
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f002 f93b 	bl	8013094 <uxr_seq_num_add>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	813b      	strh	r3, [r7, #8]
    payload.last_unacked_seq_nr = stream->last_sent;
 8010e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e24:	8a1b      	ldrh	r3, [r3, #16]
 8010e26:	817b      	strh	r3, [r7, #10]
    payload.stream_id = id.raw;
 8010e28:	783b      	ldrb	r3, [r7, #0]
 8010e2a:	733b      	strb	r3, [r7, #12]
    (void) uxr_serialize_HEARTBEAT_Payload(&ub, &payload);
 8010e2c:	f107 0208 	add.w	r2, r7, #8
 8010e30:	f107 0310 	add.w	r3, r7, #16
 8010e34:	4611      	mov	r1, r2
 8010e36:	4618      	mov	r0, r3
 8010e38:	f7fd fe2a 	bl	800ea90 <uxr_serialize_HEARTBEAT_Payload>

    /* Stamp message header. */
    uxr_stamp_session_header(&session->info, 0, 0, ub.init);
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	2200      	movs	r2, #0
 8010e42:	2100      	movs	r1, #0
 8010e44:	f000 fce0 	bl	8011808 <uxr_stamp_session_header>
    send_message(session, heartbeat_buffer, ucdr_buffer_length(&ub));
 8010e48:	f107 0310 	add.w	r3, r7, #16
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7f9 face 	bl	800a3ee <ucdr_buffer_length>
 8010e52:	4602      	mov	r2, r0
 8010e54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010e58:	4619      	mov	r1, r3
 8010e5a:	6878      	ldr	r0, [r7, #4]
 8010e5c:	f7ff ff83 	bl	8010d66 <send_message>
}
 8010e60:	bf00      	nop
 8010e62:	3748      	adds	r7, #72	; 0x48
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <write_submessage_acknack>:

void write_submessage_acknack(
        const uxrSession* session,
        uxrStreamId id)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b094      	sub	sp, #80	; 0x50
 8010e6c:	af02      	add	r7, sp, #8
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	6039      	str	r1, [r7, #0]
    uint8_t acknack_buffer[ACKNACK_MAX_MSG_SIZE];
    ucdrBuffer ub;
    ucdr_init_buffer_origin_offset(&ub, acknack_buffer, ACKNACK_MAX_MSG_SIZE, 0u,
            uxr_session_header_offset(&session->info));
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	4618      	mov	r0, r3
 8010e76:	f000 fd27 	bl	80118c8 <uxr_session_header_offset>
 8010e7a:	4603      	mov	r3, r0
    ucdr_init_buffer_origin_offset(&ub, acknack_buffer, ACKNACK_MAX_MSG_SIZE, 0u,
 8010e7c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010e80:	f107 0010 	add.w	r0, r7, #16
 8010e84:	9300      	str	r3, [sp, #0]
 8010e86:	2300      	movs	r3, #0
 8010e88:	2211      	movs	r2, #17
 8010e8a:	f7f9 f9cb 	bl	800a224 <ucdr_init_buffer_origin_offset>

    const uxrInputReliableStream* stream = &session->streams.input_reliable[id.index];
 8010e8e:	787b      	ldrb	r3, [r7, #1]
 8010e90:	461a      	mov	r2, r3
 8010e92:	236c      	movs	r3, #108	; 0x6c
 8010e94:	fb02 f303 	mul.w	r3, r2, r3
 8010e98:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8010e9c:	687a      	ldr	r2, [r7, #4]
 8010e9e:	4413      	add	r3, r2
 8010ea0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Buffer submessage header. */
    uxr_buffer_submessage_header(&ub, SUBMESSAGE_ID_ACKNACK, ACKNACK_PAYLOAD_SIZE, 0);
 8010ea2:	f107 0010 	add.w	r0, r7, #16
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	2205      	movs	r2, #5
 8010eaa:	210a      	movs	r1, #10
 8010eac:	f000 fda0 	bl	80119f0 <uxr_buffer_submessage_header>

    /* Buffer ACKNACK. */
    ACKNACK_Payload payload;
    uint16_t nack_bitmap = uxr_compute_acknack(stream, &payload.first_unacked_seq_num);
 8010eb0:	f107 0308 	add.w	r3, r7, #8
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010eb8:	f001 faf1 	bl	801249e <uxr_compute_acknack>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    payload.nack_bitmap[0] = (uint8_t)(nack_bitmap >> 8);
 8010ec2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ec6:	0a1b      	lsrs	r3, r3, #8
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	b2db      	uxtb	r3, r3
 8010ecc:	72bb      	strb	r3, [r7, #10]
    payload.nack_bitmap[1] = (uint8_t)((nack_bitmap << 8) >> 8);
 8010ece:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ed2:	021b      	lsls	r3, r3, #8
 8010ed4:	121b      	asrs	r3, r3, #8
 8010ed6:	b2db      	uxtb	r3, r3
 8010ed8:	72fb      	strb	r3, [r7, #11]
    payload.stream_id = id.raw;
 8010eda:	783b      	ldrb	r3, [r7, #0]
 8010edc:	733b      	strb	r3, [r7, #12]
    (void) uxr_serialize_ACKNACK_Payload(&ub, &payload);
 8010ede:	f107 0208 	add.w	r2, r7, #8
 8010ee2:	f107 0310 	add.w	r3, r7, #16
 8010ee6:	4611      	mov	r1, r2
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7fd fd5e 	bl	800e9aa <uxr_serialize_ACKNACK_Payload>

    /* Stamp message header. */
    uxr_stamp_session_header(&session->info, 0, 0, ub.init);
 8010eee:	6878      	ldr	r0, [r7, #4]
 8010ef0:	693b      	ldr	r3, [r7, #16]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	2100      	movs	r1, #0
 8010ef6:	f000 fc87 	bl	8011808 <uxr_stamp_session_header>
    send_message(session, acknack_buffer, ucdr_buffer_length(&ub));
 8010efa:	f107 0310 	add.w	r3, r7, #16
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7f9 fa75 	bl	800a3ee <ucdr_buffer_length>
 8010f04:	4602      	mov	r2, r0
 8010f06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f7ff ff2a 	bl	8010d66 <send_message>
}
 8010f12:	bf00      	nop
 8010f14:	3748      	adds	r7, #72	; 0x48
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}

08010f1a <read_message>:

void read_message(
        uxrSession* session,
        ucdrBuffer* ub)
{
 8010f1a:	b580      	push	{r7, lr}
 8010f1c:	b084      	sub	sp, #16
 8010f1e:	af00      	add	r7, sp, #0
 8010f20:	6078      	str	r0, [r7, #4]
 8010f22:	6039      	str	r1, [r7, #0]
    uint8_t stream_id_raw = 0;
 8010f24:	2300      	movs	r3, #0
 8010f26:	73fb      	strb	r3, [r7, #15]
    uxrSeqNum seq_num;
    if (uxr_read_session_header(&session->info, ub, &stream_id_raw, &seq_num))
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f107 030c 	add.w	r3, r7, #12
 8010f2e:	f107 020f 	add.w	r2, r7, #15
 8010f32:	6839      	ldr	r1, [r7, #0]
 8010f34:	f000 fc88 	bl	8011848 <uxr_read_session_header>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d00d      	beq.n	8010f5a <read_message+0x40>
    {
        uxrStreamId id = uxr_stream_id_from_raw(stream_id_raw, UXR_INPUT_STREAM);
 8010f3e:	7bfb      	ldrb	r3, [r7, #15]
 8010f40:	2100      	movs	r1, #0
 8010f42:	4618      	mov	r0, r3
 8010f44:	f002 f936 	bl	80131b4 <uxr_stream_id_from_raw>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	60bb      	str	r3, [r7, #8]
        read_stream(session, ub, id, seq_num);
 8010f4c:	89bb      	ldrh	r3, [r7, #12]
 8010f4e:	68ba      	ldr	r2, [r7, #8]
 8010f50:	6839      	ldr	r1, [r7, #0]
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f000 f80f 	bl	8010f76 <read_stream>
    }
    else if (uxr_acknack_pong(ub))
    {
        session->on_pong_flag = true;
    }
}
 8010f58:	e009      	b.n	8010f6e <read_message+0x54>
    else if (uxr_acknack_pong(ub))
 8010f5a:	6838      	ldr	r0, [r7, #0]
 8010f5c:	f7ff fc78 	bl	8010850 <uxr_acknack_pong>
 8010f60:	4603      	mov	r3, r0
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d003      	beq.n	8010f6e <read_message+0x54>
        session->on_pong_flag = true;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2201      	movs	r2, #1
 8010f6a:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
}
 8010f6e:	bf00      	nop
 8010f70:	3710      	adds	r7, #16
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}

08010f76 <read_stream>:
void read_stream(
        uxrSession* session,
        ucdrBuffer* ub,
        uxrStreamId stream_id,
        uxrSeqNum seq_num)
{
 8010f76:	b590      	push	{r4, r7, lr}
 8010f78:	b093      	sub	sp, #76	; 0x4c
 8010f7a:	af02      	add	r7, sp, #8
 8010f7c:	60f8      	str	r0, [r7, #12]
 8010f7e:	60b9      	str	r1, [r7, #8]
 8010f80:	607a      	str	r2, [r7, #4]
 8010f82:	807b      	strh	r3, [r7, #2]
    switch (stream_id.type)
 8010f84:	79bb      	ldrb	r3, [r7, #6]
 8010f86:	2b02      	cmp	r3, #2
 8010f88:	d02b      	beq.n	8010fe2 <read_stream+0x6c>
 8010f8a:	2b02      	cmp	r3, #2
 8010f8c:	dc69      	bgt.n	8011062 <read_stream+0xec>
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d002      	beq.n	8010f98 <read_stream+0x22>
 8010f92:	2b01      	cmp	r3, #1
 8010f94:	d00c      	beq.n	8010fb0 <read_stream+0x3a>
            }
            write_submessage_acknack(session, stream_id);
            break;
        }
        default:
            break;
 8010f96:	e064      	b.n	8011062 <read_stream+0xec>
            stream_id = uxr_stream_id_from_raw(0x00, UXR_INPUT_STREAM);
 8010f98:	2100      	movs	r1, #0
 8010f9a:	2000      	movs	r0, #0
 8010f9c:	f002 f90a 	bl	80131b4 <uxr_stream_id_from_raw>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	607b      	str	r3, [r7, #4]
            read_submessage_list(session, ub, stream_id);
 8010fa4:	687a      	ldr	r2, [r7, #4]
 8010fa6:	68b9      	ldr	r1, [r7, #8]
 8010fa8:	68f8      	ldr	r0, [r7, #12]
 8010faa:	f000 f861 	bl	8011070 <read_submessage_list>
            break;
 8010fae:	e05b      	b.n	8011068 <read_stream+0xf2>
            uxrInputBestEffortStream* stream = uxr_get_input_best_effort_stream(&session->streams, stream_id.index);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	3308      	adds	r3, #8
 8010fb4:	797a      	ldrb	r2, [r7, #5]
 8010fb6:	4611      	mov	r1, r2
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f002 facb 	bl	8013554 <uxr_get_input_best_effort_stream>
 8010fbe:	63b8      	str	r0, [r7, #56]	; 0x38
            if (stream && uxr_receive_best_effort_message(stream, seq_num))
 8010fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d04f      	beq.n	8011066 <read_stream+0xf0>
 8010fc6:	887b      	ldrh	r3, [r7, #2]
 8010fc8:	4619      	mov	r1, r3
 8010fca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010fcc:	f001 f88f 	bl	80120ee <uxr_receive_best_effort_message>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d047      	beq.n	8011066 <read_stream+0xf0>
                read_submessage_list(session, ub, stream_id);
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	68b9      	ldr	r1, [r7, #8]
 8010fda:	68f8      	ldr	r0, [r7, #12]
 8010fdc:	f000 f848 	bl	8011070 <read_submessage_list>
            break;
 8010fe0:	e041      	b.n	8011066 <read_stream+0xf0>
            uxrInputReliableStream* stream = uxr_get_input_reliable_stream(&session->streams, stream_id.index);
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	3308      	adds	r3, #8
 8010fe6:	797a      	ldrb	r2, [r7, #5]
 8010fe8:	4611      	mov	r1, r2
 8010fea:	4618      	mov	r0, r3
 8010fec:	f002 face 	bl	801358c <uxr_get_input_reliable_stream>
 8010ff0:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (stream &&
 8010ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d02f      	beq.n	8011058 <read_stream+0xe2>
                    uxr_receive_reliable_message(stream, seq_num, ub->iterator, ucdr_buffer_remaining(
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	689c      	ldr	r4, [r3, #8]
 8010ffc:	68b8      	ldr	r0, [r7, #8]
 8010ffe:	f7f9 fa05 	bl	800a40c <ucdr_buffer_remaining>
 8011002:	4602      	mov	r2, r0
 8011004:	8879      	ldrh	r1, [r7, #2]
 8011006:	f107 0337 	add.w	r3, r7, #55	; 0x37
 801100a:	9300      	str	r3, [sp, #0]
 801100c:	4613      	mov	r3, r2
 801100e:	4622      	mov	r2, r4
 8011010:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011012:	f001 f93f 	bl	8012294 <uxr_receive_reliable_message>
 8011016:	4603      	mov	r3, r0
            if (stream &&
 8011018:	2b00      	cmp	r3, #0
 801101a:	d01d      	beq.n	8011058 <read_stream+0xe2>
                if (!input_buffer_used)
 801101c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011020:	f083 0301 	eor.w	r3, r3, #1
 8011024:	b2db      	uxtb	r3, r3
 8011026:	2b00      	cmp	r3, #0
 8011028:	d00c      	beq.n	8011044 <read_stream+0xce>
                    read_submessage_list(session, ub, stream_id);
 801102a:	687a      	ldr	r2, [r7, #4]
 801102c:	68b9      	ldr	r1, [r7, #8]
 801102e:	68f8      	ldr	r0, [r7, #12]
 8011030:	f000 f81e 	bl	8011070 <read_submessage_list>
                while (uxr_next_input_reliable_buffer_available(stream, &next_mb, SUBHEADER_SIZE))
 8011034:	e006      	b.n	8011044 <read_stream+0xce>
                    read_submessage_list(session, &next_mb, stream_id);
 8011036:	f107 0314 	add.w	r3, r7, #20
 801103a:	687a      	ldr	r2, [r7, #4]
 801103c:	4619      	mov	r1, r3
 801103e:	68f8      	ldr	r0, [r7, #12]
 8011040:	f000 f816 	bl	8011070 <read_submessage_list>
                while (uxr_next_input_reliable_buffer_available(stream, &next_mb, SUBHEADER_SIZE))
 8011044:	f107 0314 	add.w	r3, r7, #20
 8011048:	2204      	movs	r2, #4
 801104a:	4619      	mov	r1, r3
 801104c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801104e:	f001 f9a5 	bl	801239c <uxr_next_input_reliable_buffer_available>
 8011052:	4603      	mov	r3, r0
 8011054:	2b00      	cmp	r3, #0
 8011056:	d1ee      	bne.n	8011036 <read_stream+0xc0>
            write_submessage_acknack(session, stream_id);
 8011058:	6879      	ldr	r1, [r7, #4]
 801105a:	68f8      	ldr	r0, [r7, #12]
 801105c:	f7ff ff04 	bl	8010e68 <write_submessage_acknack>
            break;
 8011060:	e002      	b.n	8011068 <read_stream+0xf2>
            break;
 8011062:	bf00      	nop
 8011064:	e000      	b.n	8011068 <read_stream+0xf2>
            break;
 8011066:	bf00      	nop
    }
}
 8011068:	bf00      	nop
 801106a:	3744      	adds	r7, #68	; 0x44
 801106c:	46bd      	mov	sp, r7
 801106e:	bd90      	pop	{r4, r7, pc}

08011070 <read_submessage_list>:

void read_submessage_list(
        uxrSession* session,
        ucdrBuffer* submessages,
        uxrStreamId stream_id)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b088      	sub	sp, #32
 8011074:	af02      	add	r7, sp, #8
 8011076:	60f8      	str	r0, [r7, #12]
 8011078:	60b9      	str	r1, [r7, #8]
 801107a:	607a      	str	r2, [r7, #4]
    uint8_t id; uint16_t length; uint8_t flags;
    while (uxr_read_submessage_header(submessages, &id, &length, &flags))
 801107c:	e00a      	b.n	8011094 <read_submessage_list+0x24>
    {
        read_submessage(session, submessages, id, stream_id, length, flags);
 801107e:	7df9      	ldrb	r1, [r7, #23]
 8011080:	8abb      	ldrh	r3, [r7, #20]
 8011082:	7cfa      	ldrb	r2, [r7, #19]
 8011084:	9201      	str	r2, [sp, #4]
 8011086:	9300      	str	r3, [sp, #0]
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	460a      	mov	r2, r1
 801108c:	68b9      	ldr	r1, [r7, #8]
 801108e:	68f8      	ldr	r0, [r7, #12]
 8011090:	f000 f812 	bl	80110b8 <read_submessage>
    while (uxr_read_submessage_header(submessages, &id, &length, &flags))
 8011094:	f107 0313 	add.w	r3, r7, #19
 8011098:	f107 0214 	add.w	r2, r7, #20
 801109c:	f107 0117 	add.w	r1, r7, #23
 80110a0:	68b8      	ldr	r0, [r7, #8]
 80110a2:	f000 fcd2 	bl	8011a4a <uxr_read_submessage_header>
 80110a6:	4603      	mov	r3, r0
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d1e8      	bne.n	801107e <read_submessage_list+0xe>
    }
}
 80110ac:	bf00      	nop
 80110ae:	bf00      	nop
 80110b0:	3718      	adds	r7, #24
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}
	...

080110b8 <read_submessage>:
        ucdrBuffer* submessage,
        uint8_t submessage_id,
        uxrStreamId stream_id,
        uint16_t length,
        uint8_t flags)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b086      	sub	sp, #24
 80110bc:	af02      	add	r7, sp, #8
 80110be:	60f8      	str	r0, [r7, #12]
 80110c0:	60b9      	str	r1, [r7, #8]
 80110c2:	603b      	str	r3, [r7, #0]
 80110c4:	4613      	mov	r3, r2
 80110c6:	71fb      	strb	r3, [r7, #7]
    switch (submessage_id)
 80110c8:	79fb      	ldrb	r3, [r7, #7]
 80110ca:	3b04      	subs	r3, #4
 80110cc:	2b0b      	cmp	r3, #11
 80110ce:	d84d      	bhi.n	801116c <read_submessage+0xb4>
 80110d0:	a201      	add	r2, pc, #4	; (adr r2, 80110d8 <read_submessage+0x20>)
 80110d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110d6:	bf00      	nop
 80110d8:	08011109 	.word	0x08011109
 80110dc:	0801111b 	.word	0x0801111b
 80110e0:	0801116d 	.word	0x0801116d
 80110e4:	0801116d 	.word	0x0801116d
 80110e8:	0801116d 	.word	0x0801116d
 80110ec:	08011137 	.word	0x08011137
 80110f0:	08011159 	.word	0x08011159
 80110f4:	0801114f 	.word	0x0801114f
 80110f8:	0801116d 	.word	0x0801116d
 80110fc:	0801116d 	.word	0x0801116d
 8011100:	0801116d 	.word	0x0801116d
 8011104:	08011163 	.word	0x08011163
    {
        case SUBMESSAGE_ID_STATUS_AGENT:
            if (stream_id.type == UXR_NONE_STREAM)
 8011108:	78bb      	ldrb	r3, [r7, #2]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d130      	bne.n	8011170 <read_submessage+0xb8>
            {
                uxr_read_create_session_status(&session->info, submessage);
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	68b9      	ldr	r1, [r7, #8]
 8011112:	4618      	mov	r0, r3
 8011114:	f000 fb26 	bl	8011764 <uxr_read_create_session_status>
            }
            break;
 8011118:	e02a      	b.n	8011170 <read_submessage+0xb8>

        case SUBMESSAGE_ID_STATUS:
            if (stream_id.type == UXR_NONE_STREAM)
 801111a:	78bb      	ldrb	r3, [r7, #2]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d105      	bne.n	801112c <read_submessage+0x74>
            {
                uxr_read_delete_session_status(&session->info, submessage);
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	68b9      	ldr	r1, [r7, #8]
 8011124:	4618      	mov	r0, r3
 8011126:	f000 fb2f 	bl	8011788 <uxr_read_delete_session_status>
            }
            else
            {
                read_submessage_status(session, submessage);
            }
            break;
 801112a:	e022      	b.n	8011172 <read_submessage+0xba>
                read_submessage_status(session, submessage);
 801112c:	68b9      	ldr	r1, [r7, #8]
 801112e:	68f8      	ldr	r0, [r7, #12]
 8011130:	f000 f824 	bl	801117c <read_submessage_status>
            break;
 8011134:	e01d      	b.n	8011172 <read_submessage+0xba>

        case SUBMESSAGE_ID_DATA:
            read_submessage_data(session, submessage, length, stream_id, flags & FORMAT_MASK);
 8011136:	7f3b      	ldrb	r3, [r7, #28]
 8011138:	f003 030e 	and.w	r3, r3, #14
 801113c:	b2db      	uxtb	r3, r3
 801113e:	8b3a      	ldrh	r2, [r7, #24]
 8011140:	9300      	str	r3, [sp, #0]
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	68b9      	ldr	r1, [r7, #8]
 8011146:	68f8      	ldr	r0, [r7, #12]
 8011148:	f000 f838 	bl	80111bc <read_submessage_data>
            break;
 801114c:	e011      	b.n	8011172 <read_submessage+0xba>

        case SUBMESSAGE_ID_HEARTBEAT:
            read_submessage_heartbeat(session, submessage);
 801114e:	68b9      	ldr	r1, [r7, #8]
 8011150:	68f8      	ldr	r0, [r7, #12]
 8011152:	f000 f865 	bl	8011220 <read_submessage_heartbeat>
            break;
 8011156:	e00c      	b.n	8011172 <read_submessage+0xba>

        case SUBMESSAGE_ID_ACKNACK:
            read_submessage_acknack(session, submessage);
 8011158:	68b9      	ldr	r1, [r7, #8]
 801115a:	68f8      	ldr	r0, [r7, #12]
 801115c:	f000 f88b 	bl	8011276 <read_submessage_acknack>
            break;
 8011160:	e007      	b.n	8011172 <read_submessage+0xba>

        case SUBMESSAGE_ID_TIMESTAMP_REPLY:
            read_submessage_timestamp_reply(session, submessage);
 8011162:	68b9      	ldr	r1, [r7, #8]
 8011164:	68f8      	ldr	r0, [r7, #12]
 8011166:	f000 f8e3 	bl	8011330 <read_submessage_timestamp_reply>
            break;
 801116a:	e002      	b.n	8011172 <read_submessage+0xba>
            read_submessage_performance(session, submessage, length);
            break;
#endif /* ifdef PERFORMANCE_TESTING */

        default:
            break;
 801116c:	bf00      	nop
 801116e:	e000      	b.n	8011172 <read_submessage+0xba>
            break;
 8011170:	bf00      	nop
    }
}
 8011172:	bf00      	nop
 8011174:	3710      	adds	r7, #16
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
 801117a:	bf00      	nop

0801117c <read_submessage_status>:

void read_submessage_status(
        uxrSession* session,
        ucdrBuffer* submessage)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b086      	sub	sp, #24
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6039      	str	r1, [r7, #0]
    STATUS_Payload payload;
    uxr_deserialize_STATUS_Payload(submessage, &payload);
 8011186:	f107 0310 	add.w	r3, r7, #16
 801118a:	4619      	mov	r1, r3
 801118c:	6838      	ldr	r0, [r7, #0]
 801118e:	f7fd fbaf 	bl	800e8f0 <uxr_deserialize_STATUS_Payload>

    uxrObjectId object_id; uint16_t request_id;
    uxr_parse_base_object_request(&payload.base.related_request, &object_id, &request_id);
 8011192:	f107 020a 	add.w	r2, r7, #10
 8011196:	f107 010c 	add.w	r1, r7, #12
 801119a:	f107 0310 	add.w	r3, r7, #16
 801119e:	4618      	mov	r0, r3
 80111a0:	f000 fbc4 	bl	801192c <uxr_parse_base_object_request>

    uint8_t status = payload.base.result.status;
 80111a4:	7d3b      	ldrb	r3, [r7, #20]
 80111a6:	75fb      	strb	r3, [r7, #23]
    process_status(session, object_id, request_id, status);
 80111a8:	897a      	ldrh	r2, [r7, #10]
 80111aa:	7dfb      	ldrb	r3, [r7, #23]
 80111ac:	68f9      	ldr	r1, [r7, #12]
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f000 f8d3 	bl	801135a <process_status>
}
 80111b4:	bf00      	nop
 80111b6:	3718      	adds	r7, #24
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}

080111bc <read_submessage_data>:
        uxrSession* session,
        ucdrBuffer* submessage,
        uint16_t length,
        uxrStreamId stream_id,
        uint8_t format)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b08c      	sub	sp, #48	; 0x30
 80111c0:	af04      	add	r7, sp, #16
 80111c2:	60f8      	str	r0, [r7, #12]
 80111c4:	60b9      	str	r1, [r7, #8]
 80111c6:	603b      	str	r3, [r7, #0]
 80111c8:	4613      	mov	r3, r2
 80111ca:	80fb      	strh	r3, [r7, #6]
    BaseObjectRequest base;
    uxr_deserialize_BaseObjectRequest(submessage, &base);
 80111cc:	f107 031c 	add.w	r3, r7, #28
 80111d0:	4619      	mov	r1, r3
 80111d2:	68b8      	ldr	r0, [r7, #8]
 80111d4:	f7fd f9fe 	bl	800e5d4 <uxr_deserialize_BaseObjectRequest>
    length = (uint16_t)(length - 4); //CHANGE: by a future size_of_BaseObjectRequest
 80111d8:	88fb      	ldrh	r3, [r7, #6]
 80111da:	3b04      	subs	r3, #4
 80111dc:	80fb      	strh	r3, [r7, #6]

    uxrObjectId object_id;
    uint16_t request_id;
    uxr_parse_base_object_request(&base, &object_id, &request_id);
 80111de:	f107 0216 	add.w	r2, r7, #22
 80111e2:	f107 0118 	add.w	r1, r7, #24
 80111e6:	f107 031c 	add.w	r3, r7, #28
 80111ea:	4618      	mov	r0, r3
 80111ec:	f000 fb9e 	bl	801192c <uxr_parse_base_object_request>

    process_status(session, object_id, request_id, UXR_STATUS_OK);
 80111f0:	8afa      	ldrh	r2, [r7, #22]
 80111f2:	2300      	movs	r3, #0
 80111f4:	69b9      	ldr	r1, [r7, #24]
 80111f6:	68f8      	ldr	r0, [r7, #12]
 80111f8:	f000 f8af 	bl	801135a <process_status>
    read_submessage_format(session, submessage, length, format, stream_id, object_id, request_id);
 80111fc:	8afb      	ldrh	r3, [r7, #22]
 80111fe:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8011202:	88fa      	ldrh	r2, [r7, #6]
 8011204:	9302      	str	r3, [sp, #8]
 8011206:	69bb      	ldr	r3, [r7, #24]
 8011208:	9301      	str	r3, [sp, #4]
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	9300      	str	r3, [sp, #0]
 801120e:	460b      	mov	r3, r1
 8011210:	68b9      	ldr	r1, [r7, #8]
 8011212:	68f8      	ldr	r0, [r7, #12]
 8011214:	f7fe fd70 	bl	800fcf8 <read_submessage_format>
}
 8011218:	bf00      	nop
 801121a:	3720      	adds	r7, #32
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}

08011220 <read_submessage_heartbeat>:

void read_submessage_heartbeat(
        uxrSession* session,
        ucdrBuffer* submessage)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b086      	sub	sp, #24
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	6039      	str	r1, [r7, #0]
    HEARTBEAT_Payload heartbeat;
    uxr_deserialize_HEARTBEAT_Payload(submessage, &heartbeat);
 801122a:	f107 030c 	add.w	r3, r7, #12
 801122e:	4619      	mov	r1, r3
 8011230:	6838      	ldr	r0, [r7, #0]
 8011232:	f7fd fc66 	bl	800eb02 <uxr_deserialize_HEARTBEAT_Payload>
    uxrStreamId id = uxr_stream_id_from_raw(heartbeat.stream_id, UXR_INPUT_STREAM);
 8011236:	7c3b      	ldrb	r3, [r7, #16]
 8011238:	2100      	movs	r1, #0
 801123a:	4618      	mov	r0, r3
 801123c:	f001 ffba 	bl	80131b4 <uxr_stream_id_from_raw>
 8011240:	4603      	mov	r3, r0
 8011242:	60bb      	str	r3, [r7, #8]

    uxrInputReliableStream* stream = uxr_get_input_reliable_stream(&session->streams, id.index);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	3308      	adds	r3, #8
 8011248:	7a7a      	ldrb	r2, [r7, #9]
 801124a:	4611      	mov	r1, r2
 801124c:	4618      	mov	r0, r3
 801124e:	f002 f99d 	bl	801358c <uxr_get_input_reliable_stream>
 8011252:	6178      	str	r0, [r7, #20]
    if (stream)
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d009      	beq.n	801126e <read_submessage_heartbeat+0x4e>
    {
        uxr_process_heartbeat(stream, heartbeat.first_unacked_seq_nr, heartbeat.last_unacked_seq_nr);
 801125a:	89bb      	ldrh	r3, [r7, #12]
 801125c:	89fa      	ldrh	r2, [r7, #14]
 801125e:	4619      	mov	r1, r3
 8011260:	6978      	ldr	r0, [r7, #20]
 8011262:	f001 f903 	bl	801246c <uxr_process_heartbeat>
        write_submessage_acknack(session, id);
 8011266:	68b9      	ldr	r1, [r7, #8]
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f7ff fdfd 	bl	8010e68 <write_submessage_acknack>
    }
}
 801126e:	bf00      	nop
 8011270:	3718      	adds	r7, #24
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}

08011276 <read_submessage_acknack>:

void read_submessage_acknack(
        uxrSession* session,
        ucdrBuffer* submessage)
{
 8011276:	b580      	push	{r7, lr}
 8011278:	b08c      	sub	sp, #48	; 0x30
 801127a:	af00      	add	r7, sp, #0
 801127c:	6078      	str	r0, [r7, #4]
 801127e:	6039      	str	r1, [r7, #0]
    ACKNACK_Payload acknack;
    uxr_deserialize_ACKNACK_Payload(submessage, &acknack);
 8011280:	f107 0318 	add.w	r3, r7, #24
 8011284:	4619      	mov	r1, r3
 8011286:	6838      	ldr	r0, [r7, #0]
 8011288:	f7fd fbc9 	bl	800ea1e <uxr_deserialize_ACKNACK_Payload>
    uxrStreamId id = uxr_stream_id_from_raw(acknack.stream_id, UXR_INPUT_STREAM);
 801128c:	7f3b      	ldrb	r3, [r7, #28]
 801128e:	2100      	movs	r1, #0
 8011290:	4618      	mov	r0, r3
 8011292:	f001 ff8f 	bl	80131b4 <uxr_stream_id_from_raw>
 8011296:	4603      	mov	r3, r0
 8011298:	617b      	str	r3, [r7, #20]

    uxrOutputReliableStream* stream = uxr_get_output_reliable_stream(&session->streams, id.index);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	3308      	adds	r3, #8
 801129e:	7d7a      	ldrb	r2, [r7, #21]
 80112a0:	4611      	mov	r1, r2
 80112a2:	4618      	mov	r0, r3
 80112a4:	f002 f93a 	bl	801351c <uxr_get_output_reliable_stream>
 80112a8:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (stream)
 80112aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d03b      	beq.n	8011328 <read_submessage_acknack+0xb2>
    {
        UXR_LOCK_STREAM_ID(session, id);
 80112b0:	6979      	ldr	r1, [r7, #20]
 80112b2:	6878      	ldr	r0, [r7, #4]
 80112b4:	f002 fcd7 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 80112b8:	62b8      	str	r0, [r7, #40]	; 0x28
 80112ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d002      	beq.n	80112c6 <read_submessage_acknack+0x50>
 80112c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112c2:	f002 fcb4 	bl	8013c2e <uxr_lock>

        uint16_t nack_bitmap = (uint16_t)(((uint16_t)acknack.nack_bitmap[0] << 8) + acknack.nack_bitmap[1]);
 80112c6:	7ebb      	ldrb	r3, [r7, #26]
 80112c8:	b29b      	uxth	r3, r3
 80112ca:	021b      	lsls	r3, r3, #8
 80112cc:	b29a      	uxth	r2, r3
 80112ce:	7efb      	ldrb	r3, [r7, #27]
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	4413      	add	r3, r2
 80112d4:	84fb      	strh	r3, [r7, #38]	; 0x26
        uxr_process_acknack(stream, nack_bitmap, acknack.first_unacked_seq_num);
 80112d6:	8b3a      	ldrh	r2, [r7, #24]
 80112d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80112da:	4619      	mov	r1, r3
 80112dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112de:	f001 fe1e 	bl	8012f1e <uxr_process_acknack>

        uint8_t* buffer; size_t length;
        uxrSeqNum seq_num_it = uxr_begin_output_nack_buffer_it(stream);
 80112e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112e4:	f001 fdae 	bl	8012e44 <uxr_begin_output_nack_buffer_it>
 80112e8:	4603      	mov	r3, r0
 80112ea:	817b      	strh	r3, [r7, #10]
        while (uxr_next_reliable_nack_buffer_to_send(stream, &buffer, &length, &seq_num_it))
 80112ec:	e005      	b.n	80112fa <read_submessage_acknack+0x84>
        {
            send_message(session, buffer, length);
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	68fa      	ldr	r2, [r7, #12]
 80112f2:	4619      	mov	r1, r3
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	f7ff fd36 	bl	8010d66 <send_message>
        while (uxr_next_reliable_nack_buffer_to_send(stream, &buffer, &length, &seq_num_it))
 80112fa:	f107 030a 	add.w	r3, r7, #10
 80112fe:	f107 020c 	add.w	r2, r7, #12
 8011302:	f107 0110 	add.w	r1, r7, #16
 8011306:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011308:	f001 fda8 	bl	8012e5c <uxr_next_reliable_nack_buffer_to_send>
 801130c:	4603      	mov	r3, r0
 801130e:	2b00      	cmp	r3, #0
 8011310:	d1ed      	bne.n	80112ee <read_submessage_acknack+0x78>
        }

        UXR_UNLOCK_STREAM_ID(session, id);
 8011312:	6979      	ldr	r1, [r7, #20]
 8011314:	6878      	ldr	r0, [r7, #4]
 8011316:	f002 fca6 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 801131a:	6238      	str	r0, [r7, #32]
 801131c:	6a3b      	ldr	r3, [r7, #32]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d002      	beq.n	8011328 <read_submessage_acknack+0xb2>
 8011322:	6a38      	ldr	r0, [r7, #32]
 8011324:	f002 fc92 	bl	8013c4c <uxr_unlock>
    }
}
 8011328:	bf00      	nop
 801132a:	3730      	adds	r7, #48	; 0x30
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}

08011330 <read_submessage_timestamp_reply>:

void read_submessage_timestamp_reply(
        uxrSession* session,
        ucdrBuffer* submessage)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b088      	sub	sp, #32
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
 8011338:	6039      	str	r1, [r7, #0]
    TIMESTAMP_REPLY_Payload timestamp_reply;
    uxr_deserialize_TIMESTAMP_REPLY_Payload(submessage, &timestamp_reply);
 801133a:	f107 0308 	add.w	r3, r7, #8
 801133e:	4619      	mov	r1, r3
 8011340:	6838      	ldr	r0, [r7, #0]
 8011342:	f7fd fc16 	bl	800eb72 <uxr_deserialize_TIMESTAMP_REPLY_Payload>

    process_timestamp_reply(session, &timestamp_reply);
 8011346:	f107 0308 	add.w	r3, r7, #8
 801134a:	4619      	mov	r1, r3
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f000 f844 	bl	80113da <process_timestamp_reply>
}
 8011352:	bf00      	nop
 8011354:	3720      	adds	r7, #32
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}

0801135a <process_status>:
void process_status(
        uxrSession* session,
        uxrObjectId object_id,
        uint16_t request_id,
        uint8_t status)
{
 801135a:	b590      	push	{r4, r7, lr}
 801135c:	b089      	sub	sp, #36	; 0x24
 801135e:	af02      	add	r7, sp, #8
 8011360:	60f8      	str	r0, [r7, #12]
 8011362:	60b9      	str	r1, [r7, #8]
 8011364:	4611      	mov	r1, r2
 8011366:	461a      	mov	r2, r3
 8011368:	460b      	mov	r3, r1
 801136a:	80fb      	strh	r3, [r7, #6]
 801136c:	4613      	mov	r3, r2
 801136e:	717b      	strb	r3, [r7, #5]
    if (session->on_status != NULL)
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8011376:	2b00      	cmp	r3, #0
 8011378:	d00c      	beq.n	8011394 <process_status+0x3a>
    {
        session->on_status(session, object_id, request_id, status, session->on_status_args);
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	f8d3 41c8 	ldr.w	r4, [r3, #456]	; 0x1c8
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8011386:	7979      	ldrb	r1, [r7, #5]
 8011388:	88fa      	ldrh	r2, [r7, #6]
 801138a:	9300      	str	r3, [sp, #0]
 801138c:	460b      	mov	r3, r1
 801138e:	68b9      	ldr	r1, [r7, #8]
 8011390:	68f8      	ldr	r0, [r7, #12]
 8011392:	47a0      	blx	r4
    }

    for (unsigned i = 0; i < session->request_status_list_size; ++i)
 8011394:	2300      	movs	r3, #0
 8011396:	617b      	str	r3, [r7, #20]
 8011398:	e014      	b.n	80113c4 <process_status+0x6a>
    {
        if (request_id == session->request_list[i])
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	005b      	lsls	r3, r3, #1
 80113a4:	4413      	add	r3, r2
 80113a6:	881b      	ldrh	r3, [r3, #0]
 80113a8:	88fa      	ldrh	r2, [r7, #6]
 80113aa:	429a      	cmp	r2, r3
 80113ac:	d107      	bne.n	80113be <process_status+0x64>
        {
            session->status_list[i] = status;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 80113b4:	697b      	ldr	r3, [r7, #20]
 80113b6:	4413      	add	r3, r2
 80113b8:	797a      	ldrb	r2, [r7, #5]
 80113ba:	701a      	strb	r2, [r3, #0]
            break;
 80113bc:	e009      	b.n	80113d2 <process_status+0x78>
    for (unsigned i = 0; i < session->request_status_list_size; ++i)
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	3301      	adds	r3, #1
 80113c2:	617b      	str	r3, [r7, #20]
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80113ca:	697a      	ldr	r2, [r7, #20]
 80113cc:	429a      	cmp	r2, r3
 80113ce:	d3e4      	bcc.n	801139a <process_status+0x40>
        }
    }
}
 80113d0:	bf00      	nop
 80113d2:	bf00      	nop
 80113d4:	371c      	adds	r7, #28
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd90      	pop	{r4, r7, pc}

080113da <process_timestamp_reply>:

void process_timestamp_reply(
        uxrSession* session,
        TIMESTAMP_REPLY_Payload* timestamp)
{
 80113da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113de:	b097      	sub	sp, #92	; 0x5c
 80113e0:	af08      	add	r7, sp, #32
 80113e2:	6178      	str	r0, [r7, #20]
 80113e4:	6139      	str	r1, [r7, #16]
    if (session->on_time != NULL)
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d033      	beq.n	8011458 <process_timestamp_reply+0x7e>
    {
        session->on_time(session,
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	f8d3 61d8 	ldr.w	r6, [r3, #472]	; 0x1d8
 80113f6:	f004 f919 	bl	801562c <uxr_nanos>
 80113fa:	4682      	mov	sl, r0
 80113fc:	468b      	mov	fp, r1
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	689a      	ldr	r2, [r3, #8]
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	68db      	ldr	r3, [r3, #12]
 8011406:	4619      	mov	r1, r3
 8011408:	4610      	mov	r0, r2
 801140a:	f7fe fe23 	bl	8010054 <uxr_convert_to_nanos>
 801140e:	4604      	mov	r4, r0
 8011410:	460d      	mov	r5, r1
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	681a      	ldr	r2, [r3, #0]
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	685b      	ldr	r3, [r3, #4]
 801141a:	4619      	mov	r1, r3
 801141c:	4610      	mov	r0, r2
 801141e:	f7fe fe19 	bl	8010054 <uxr_convert_to_nanos>
 8011422:	4680      	mov	r8, r0
 8011424:	4689      	mov	r9, r1
 8011426:	693b      	ldr	r3, [r7, #16]
 8011428:	691a      	ldr	r2, [r3, #16]
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	695b      	ldr	r3, [r3, #20]
 801142e:	4619      	mov	r1, r3
 8011430:	4610      	mov	r0, r2
 8011432:	f7fe fe0f 	bl	8010054 <uxr_convert_to_nanos>
 8011436:	4602      	mov	r2, r0
 8011438:	460b      	mov	r3, r1
 801143a:	6979      	ldr	r1, [r7, #20]
 801143c:	f8d1 11dc 	ldr.w	r1, [r1, #476]	; 0x1dc
 8011440:	9106      	str	r1, [sp, #24]
 8011442:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011446:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801144a:	e9cd 4500 	strd	r4, r5, [sp]
 801144e:	4652      	mov	r2, sl
 8011450:	465b      	mov	r3, fp
 8011452:	6978      	ldr	r0, [r7, #20]
 8011454:	47b0      	blx	r6
 8011456:	e052      	b.n	80114fe <process_timestamp_reply+0x124>
                timestamp->originate_timestamp.nanoseconds),
                session->on_time_args);
    }
    else
    {
        int64_t t3 = uxr_nanos();
 8011458:	f004 f8e8 	bl	801562c <uxr_nanos>
 801145c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
        int64_t t0 = uxr_convert_to_nanos(timestamp->originate_timestamp.seconds,
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	691a      	ldr	r2, [r3, #16]
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	695b      	ldr	r3, [r3, #20]
 8011468:	4619      	mov	r1, r3
 801146a:	4610      	mov	r0, r2
 801146c:	f7fe fdf2 	bl	8010054 <uxr_convert_to_nanos>
 8011470:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
                        timestamp->originate_timestamp.nanoseconds);
        int64_t t1 = uxr_convert_to_nanos(timestamp->receive_timestamp.seconds,
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	689a      	ldr	r2, [r3, #8]
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	68db      	ldr	r3, [r3, #12]
 801147c:	4619      	mov	r1, r3
 801147e:	4610      	mov	r0, r2
 8011480:	f7fe fde8 	bl	8010054 <uxr_convert_to_nanos>
 8011484:	e9c7 0108 	strd	r0, r1, [r7, #32]
                        timestamp->receive_timestamp.nanoseconds);
        int64_t t2 = uxr_convert_to_nanos(timestamp->transmit_timestamp.seconds,
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	4619      	mov	r1, r3
 8011492:	4610      	mov	r0, r2
 8011494:	f7fe fdde 	bl	8010054 <uxr_convert_to_nanos>
 8011498:	e9c7 0106 	strd	r0, r1, [r7, #24]
                        timestamp->transmit_timestamp.nanoseconds);
        session->time_offset = ((t0 + t3) - (t1 + t2)) / 2;
 801149c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80114a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80114a4:	1886      	adds	r6, r0, r2
 80114a6:	60be      	str	r6, [r7, #8]
 80114a8:	eb41 0303 	adc.w	r3, r1, r3
 80114ac:	60fb      	str	r3, [r7, #12]
 80114ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80114b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80114b6:	eb10 0a02 	adds.w	sl, r0, r2
 80114ba:	eb41 0b03 	adc.w	fp, r1, r3
 80114be:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80114c2:	460b      	mov	r3, r1
 80114c4:	ebb3 080a 	subs.w	r8, r3, sl
 80114c8:	4613      	mov	r3, r2
 80114ca:	eb63 090b 	sbc.w	r9, r3, fp
 80114ce:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80114d2:	2200      	movs	r2, #0
 80114d4:	603b      	str	r3, [r7, #0]
 80114d6:	607a      	str	r2, [r7, #4]
 80114d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80114dc:	460b      	mov	r3, r1
 80114de:	eb13 0408 	adds.w	r4, r3, r8
 80114e2:	4613      	mov	r3, r2
 80114e4:	eb43 0509 	adc.w	r5, r3, r9
 80114e8:	f04f 0200 	mov.w	r2, #0
 80114ec:	f04f 0300 	mov.w	r3, #0
 80114f0:	0862      	lsrs	r2, r4, #1
 80114f2:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 80114f6:	106b      	asrs	r3, r5, #1
 80114f8:	6979      	ldr	r1, [r7, #20]
 80114fa:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
    }
    session->synchronized = true;
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	2201      	movs	r2, #1
 8011502:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
}
 8011506:	bf00      	nop
 8011508:	373c      	adds	r7, #60	; 0x3c
 801150a:	46bd      	mov	sp, r7
 801150c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011510 <uxr_prepare_stream_to_write_submessage>:
        uxrStreamId stream_id,
        size_t payload_size,
        ucdrBuffer* ub,
        uint8_t submessage_id,
        uint8_t mode)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b088      	sub	sp, #32
 8011514:	af00      	add	r7, sp, #0
 8011516:	60f8      	str	r0, [r7, #12]
 8011518:	60b9      	str	r1, [r7, #8]
 801151a:	607a      	str	r2, [r7, #4]
 801151c:	603b      	str	r3, [r7, #0]
    bool available = false;
 801151e:	2300      	movs	r3, #0
 8011520:	77fb      	strb	r3, [r7, #31]
    size_t submessage_size = SUBHEADER_SIZE + payload_size + uxr_submessage_padding(payload_size);
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f000 facd 	bl	8011ac2 <uxr_submessage_padding>
 8011528:	4602      	mov	r2, r0
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	4413      	add	r3, r2
 801152e:	3304      	adds	r3, #4
 8011530:	61bb      	str	r3, [r7, #24]

    switch (stream_id.type)
 8011532:	7abb      	ldrb	r3, [r7, #10]
 8011534:	2b01      	cmp	r3, #1
 8011536:	d002      	beq.n	801153e <uxr_prepare_stream_to_write_submessage+0x2e>
 8011538:	2b02      	cmp	r3, #2
 801153a:	d01c      	beq.n	8011576 <uxr_prepare_stream_to_write_submessage+0x66>
            uxrOutputReliableStream* stream = uxr_get_output_reliable_stream(&session->streams, stream_id.index);
            available = stream && uxr_prepare_reliable_buffer_to_write(stream, submessage_size, ub);
            break;
        }
        default:
            break;
 801153c:	e037      	b.n	80115ae <uxr_prepare_stream_to_write_submessage+0x9e>
            uxrOutputBestEffortStream* stream = uxr_get_output_best_effort_stream(&session->streams, stream_id.index);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	3308      	adds	r3, #8
 8011542:	7a7a      	ldrb	r2, [r7, #9]
 8011544:	4611      	mov	r1, r2
 8011546:	4618      	mov	r0, r3
 8011548:	f001 ffce 	bl	80134e8 <uxr_get_output_best_effort_stream>
 801154c:	6138      	str	r0, [r7, #16]
            available = stream && uxr_prepare_best_effort_buffer_to_write(stream, submessage_size, ub);
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d009      	beq.n	8011568 <uxr_prepare_stream_to_write_submessage+0x58>
 8011554:	683a      	ldr	r2, [r7, #0]
 8011556:	69b9      	ldr	r1, [r7, #24]
 8011558:	6938      	ldr	r0, [r7, #16]
 801155a:	f001 f8d0 	bl	80126fe <uxr_prepare_best_effort_buffer_to_write>
 801155e:	4603      	mov	r3, r0
 8011560:	2b00      	cmp	r3, #0
 8011562:	d001      	beq.n	8011568 <uxr_prepare_stream_to_write_submessage+0x58>
 8011564:	2301      	movs	r3, #1
 8011566:	e000      	b.n	801156a <uxr_prepare_stream_to_write_submessage+0x5a>
 8011568:	2300      	movs	r3, #0
 801156a:	77fb      	strb	r3, [r7, #31]
 801156c:	7ffb      	ldrb	r3, [r7, #31]
 801156e:	f003 0301 	and.w	r3, r3, #1
 8011572:	77fb      	strb	r3, [r7, #31]
            break;
 8011574:	e01b      	b.n	80115ae <uxr_prepare_stream_to_write_submessage+0x9e>
            uxrOutputReliableStream* stream = uxr_get_output_reliable_stream(&session->streams, stream_id.index);
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	3308      	adds	r3, #8
 801157a:	7a7a      	ldrb	r2, [r7, #9]
 801157c:	4611      	mov	r1, r2
 801157e:	4618      	mov	r0, r3
 8011580:	f001 ffcc 	bl	801351c <uxr_get_output_reliable_stream>
 8011584:	6178      	str	r0, [r7, #20]
            available = stream && uxr_prepare_reliable_buffer_to_write(stream, submessage_size, ub);
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d009      	beq.n	80115a0 <uxr_prepare_stream_to_write_submessage+0x90>
 801158c:	683a      	ldr	r2, [r7, #0]
 801158e:	69b9      	ldr	r1, [r7, #24]
 8011590:	6978      	ldr	r0, [r7, #20]
 8011592:	f001 f9f7 	bl	8012984 <uxr_prepare_reliable_buffer_to_write>
 8011596:	4603      	mov	r3, r0
 8011598:	2b00      	cmp	r3, #0
 801159a:	d001      	beq.n	80115a0 <uxr_prepare_stream_to_write_submessage+0x90>
 801159c:	2301      	movs	r3, #1
 801159e:	e000      	b.n	80115a2 <uxr_prepare_stream_to_write_submessage+0x92>
 80115a0:	2300      	movs	r3, #0
 80115a2:	77fb      	strb	r3, [r7, #31]
 80115a4:	7ffb      	ldrb	r3, [r7, #31]
 80115a6:	f003 0301 	and.w	r3, r3, #1
 80115aa:	77fb      	strb	r3, [r7, #31]
            break;
 80115ac:	bf00      	nop
    }

    if (available)
 80115ae:	7ffb      	ldrb	r3, [r7, #31]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d008      	beq.n	80115c6 <uxr_prepare_stream_to_write_submessage+0xb6>
    {
        (void) uxr_buffer_submessage_header(ub, submessage_id, (uint16_t)payload_size, mode);
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	b29a      	uxth	r2, r3
 80115b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80115bc:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80115c0:	6838      	ldr	r0, [r7, #0]
 80115c2:	f000 fa15 	bl	80119f0 <uxr_buffer_submessage_header>
    }

    return available;
 80115c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80115c8:	4618      	mov	r0, r3
 80115ca:	3720      	adds	r7, #32
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}

080115d0 <on_get_fragmentation_info>:

FragmentationInfo on_get_fragmentation_info(
        uint8_t* submessage_header)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b08e      	sub	sp, #56	; 0x38
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
    ucdrBuffer ub;
    ucdr_init_buffer(&ub, submessage_header, SUBHEADER_SIZE);
 80115d8:	f107 0314 	add.w	r3, r7, #20
 80115dc:	2204      	movs	r2, #4
 80115de:	6879      	ldr	r1, [r7, #4]
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7f8 fdfc 	bl	800a1de <ucdr_init_buffer>

    uint8_t id; uint16_t length; uint8_t flags;
    uxr_read_submessage_header(&ub, &id, &length, &flags);
 80115e6:	f107 030f 	add.w	r3, r7, #15
 80115ea:	f107 0210 	add.w	r2, r7, #16
 80115ee:	f107 0113 	add.w	r1, r7, #19
 80115f2:	f107 0014 	add.w	r0, r7, #20
 80115f6:	f000 fa28 	bl	8011a4a <uxr_read_submessage_header>

    FragmentationInfo fragmentation_info;
    if (SUBMESSAGE_ID_FRAGMENT == id)
 80115fa:	7cfb      	ldrb	r3, [r7, #19]
 80115fc:	2b0d      	cmp	r3, #13
 80115fe:	d10b      	bne.n	8011618 <on_get_fragmentation_info+0x48>
    {
        fragmentation_info = FLAG_LAST_FRAGMENT & flags ? LAST_FRAGMENT : INTERMEDIATE_FRAGMENT;
 8011600:	7bfb      	ldrb	r3, [r7, #15]
 8011602:	f003 0302 	and.w	r3, r3, #2
 8011606:	b2db      	uxtb	r3, r3
 8011608:	2b00      	cmp	r3, #0
 801160a:	d001      	beq.n	8011610 <on_get_fragmentation_info+0x40>
 801160c:	2302      	movs	r3, #2
 801160e:	e000      	b.n	8011612 <on_get_fragmentation_info+0x42>
 8011610:	2301      	movs	r3, #1
 8011612:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011616:	e002      	b.n	801161e <on_get_fragmentation_info+0x4e>
    }
    else
    {
        fragmentation_info = NO_FRAGMENTED;
 8011618:	2300      	movs	r3, #0
 801161a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
    return fragmentation_info;
 801161e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8011622:	4618      	mov	r0, r3
 8011624:	3738      	adds	r7, #56	; 0x38
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}

0801162a <uxr_init_session_info>:

void uxr_init_session_info(
        uxrSessionInfo* info,
        uint8_t id,
        uint32_t key)
{
 801162a:	b480      	push	{r7}
 801162c:	b085      	sub	sp, #20
 801162e:	af00      	add	r7, sp, #0
 8011630:	60f8      	str	r0, [r7, #12]
 8011632:	460b      	mov	r3, r1
 8011634:	607a      	str	r2, [r7, #4]
 8011636:	72fb      	strb	r3, [r7, #11]
    info->id = id;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	7afa      	ldrb	r2, [r7, #11]
 801163c:	701a      	strb	r2, [r3, #0]
    info->key[0] = (uint8_t)(key >> 24);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	0e1b      	lsrs	r3, r3, #24
 8011642:	b2da      	uxtb	r2, r3
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	705a      	strb	r2, [r3, #1]
    info->key[1] = (uint8_t)((key << 8) >> 24);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	021b      	lsls	r3, r3, #8
 801164c:	0e1b      	lsrs	r3, r3, #24
 801164e:	b2da      	uxtb	r2, r3
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	709a      	strb	r2, [r3, #2]
    info->key[2] = (uint8_t)((key << 16) >> 24);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	041b      	lsls	r3, r3, #16
 8011658:	0e1b      	lsrs	r3, r3, #24
 801165a:	b2da      	uxtb	r2, r3
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	70da      	strb	r2, [r3, #3]
    info->key[3] = (uint8_t)((key << 24) >> 24);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	b2da      	uxtb	r2, r3
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	711a      	strb	r2, [r3, #4]
    info->last_request_id = RESERVED_REQUESTS_ID;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	2209      	movs	r2, #9
 801166c:	80da      	strh	r2, [r3, #6]
    info->last_requested_status = UXR_STATUS_NONE;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	22ff      	movs	r2, #255	; 0xff
 8011672:	715a      	strb	r2, [r3, #5]
}
 8011674:	bf00      	nop
 8011676:	3714      	adds	r7, #20
 8011678:	46bd      	mov	sp, r7
 801167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167e:	4770      	bx	lr

08011680 <uxr_buffer_create_session>:

void uxr_buffer_create_session(
        uxrSessionInfo* info,
        ucdrBuffer* ub,
        uint16_t mtu)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b090      	sub	sp, #64	; 0x40
 8011684:	af00      	add	r7, sp, #0
 8011686:	60f8      	str	r0, [r7, #12]
 8011688:	60b9      	str	r1, [r7, #8]
 801168a:	4613      	mov	r3, r2
 801168c:	80fb      	strh	r3, [r7, #6]
    CREATE_CLIENT_Payload payload;
    payload.client_representation.xrce_cookie = DDS_XRCE_XRCE_COOKIE;
 801168e:	4b20      	ldr	r3, [pc, #128]	; (8011710 <uxr_buffer_create_session+0x90>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	623b      	str	r3, [r7, #32]
    payload.client_representation.xrce_version = DDS_XRCE_XRCE_VERSION;
 8011694:	2301      	movs	r3, #1
 8011696:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801169a:	2300      	movs	r3, #0
 801169c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    payload.client_representation.xrce_vendor_id = VENDOR_ID_EPROSIMA;
 80116a0:	4b1c      	ldr	r3, [pc, #112]	; (8011714 <uxr_buffer_create_session+0x94>)
 80116a2:	881b      	ldrh	r3, [r3, #0]
 80116a4:	84fb      	strh	r3, [r7, #38]	; 0x26
    payload.client_representation.client_key.data[0] = info->key[0];
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	785b      	ldrb	r3, [r3, #1]
 80116aa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    payload.client_representation.client_key.data[1] = info->key[1];
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	789b      	ldrb	r3, [r3, #2]
 80116b2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    payload.client_representation.client_key.data[2] = info->key[2];
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	78db      	ldrb	r3, [r3, #3]
 80116ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    payload.client_representation.client_key.data[3] = info->key[3];
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	791b      	ldrb	r3, [r3, #4]
 80116c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    payload.client_representation.session_id = info->id;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    payload.client_representation.optional_properties = false;
 80116ce:	2300      	movs	r3, #0
 80116d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
#ifdef UCLIENT_PROFILE_SHARED_MEMORY
    payload.client_representation.optional_properties = true;
 80116d4:	2301      	movs	r3, #1
 80116d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    payload.client_representation.properties.size = 1;
 80116da:	2301      	movs	r3, #1
 80116dc:	633b      	str	r3, [r7, #48]	; 0x30
    payload.client_representation.properties.data[0].name = "uxr_sm";
 80116de:	4b0e      	ldr	r3, [pc, #56]	; (8011718 <uxr_buffer_create_session+0x98>)
 80116e0:	637b      	str	r3, [r7, #52]	; 0x34
    payload.client_representation.properties.data[0].value = "1";
 80116e2:	4b0e      	ldr	r3, [pc, #56]	; (801171c <uxr_buffer_create_session+0x9c>)
 80116e4:	63bb      	str	r3, [r7, #56]	; 0x38
#endif /* ifdef UCLIENT_PROFILE_SHARED_MEMORY */
    payload.client_representation.mtu = mtu;
 80116e6:	88fb      	ldrh	r3, [r7, #6]
 80116e8:	87bb      	strh	r3, [r7, #60]	; 0x3c

    info->last_request_id = UXR_REQUEST_LOGIN;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	2201      	movs	r2, #1
 80116ee:	80da      	strh	r2, [r3, #6]

    (void) uxr_buffer_submessage_header(ub, SUBMESSAGE_ID_CREATE_CLIENT, CREATE_CLIENT_PAYLOAD_SIZE, 0);
 80116f0:	2300      	movs	r3, #0
 80116f2:	2210      	movs	r2, #16
 80116f4:	2100      	movs	r1, #0
 80116f6:	68b8      	ldr	r0, [r7, #8]
 80116f8:	f000 f97a 	bl	80119f0 <uxr_buffer_submessage_header>
    (void) uxr_serialize_CREATE_CLIENT_Payload(ub, &payload);
 80116fc:	f107 0320 	add.w	r3, r7, #32
 8011700:	4619      	mov	r1, r3
 8011702:	68b8      	ldr	r0, [r7, #8]
 8011704:	f7fd f86e 	bl	800e7e4 <uxr_serialize_CREATE_CLIENT_Payload>
}
 8011708:	bf00      	nop
 801170a:	3740      	adds	r7, #64	; 0x40
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}
 8011710:	080258ac 	.word	0x080258ac
 8011714:	080258b0 	.word	0x080258b0
 8011718:	080258a0 	.word	0x080258a0
 801171c:	080258a8 	.word	0x080258a8

08011720 <uxr_buffer_delete_session>:

void uxr_buffer_delete_session(
        uxrSessionInfo* info,
        ucdrBuffer* ub)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b086      	sub	sp, #24
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	6039      	str	r1, [r7, #0]
    DELETE_Payload payload;
    payload.base.request_id = COMPOUND_LITERAL(RequestId){
 801172a:	2300      	movs	r3, #0
 801172c:	753b      	strb	r3, [r7, #20]
 801172e:	2302      	movs	r3, #2
 8011730:	757b      	strb	r3, [r7, #21]
        {
            0x00, UXR_REQUEST_LOGOUT
        }
    };
    payload.base.object_id = DDS_XRCE_OBJECTID_CLIENT;
 8011732:	4b0b      	ldr	r3, [pc, #44]	; (8011760 <uxr_buffer_delete_session+0x40>)
 8011734:	881b      	ldrh	r3, [r3, #0]
 8011736:	82fb      	strh	r3, [r7, #22]

    info->last_request_id = UXR_REQUEST_LOGOUT;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2202      	movs	r2, #2
 801173c:	80da      	strh	r2, [r3, #6]

    (void) uxr_buffer_submessage_header(ub, SUBMESSAGE_ID_DELETE, DELETE_CLIENT_PAYLOAD_SIZE, 0);
 801173e:	2300      	movs	r3, #0
 8011740:	2204      	movs	r2, #4
 8011742:	2103      	movs	r1, #3
 8011744:	6838      	ldr	r0, [r7, #0]
 8011746:	f000 f953 	bl	80119f0 <uxr_buffer_submessage_header>
    (void) uxr_serialize_DELETE_Payload(ub, &payload);
 801174a:	f107 0314 	add.w	r3, r7, #20
 801174e:	4619      	mov	r1, r3
 8011750:	6838      	ldr	r0, [r7, #0]
 8011752:	f7fd f88a 	bl	800e86a <uxr_serialize_DELETE_Payload>
}
 8011756:	bf00      	nop
 8011758:	3718      	adds	r7, #24
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	080258b4 	.word	0x080258b4

08011764 <uxr_read_create_session_status>:

void uxr_read_create_session_status(
        uxrSessionInfo* info,
        ucdrBuffer* ub)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b08a      	sub	sp, #40	; 0x28
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
    STATUS_AGENT_Payload payload;
    (void) uxr_deserialize_STATUS_AGENT_Payload(ub, &payload);
 801176e:	f107 030c 	add.w	r3, r7, #12
 8011772:	4619      	mov	r1, r3
 8011774:	6838      	ldr	r0, [r7, #0]
 8011776:	f7fd f892 	bl	800e89e <uxr_deserialize_STATUS_AGENT_Payload>
    info->last_requested_status = payload.result.status;
 801177a:	7b3a      	ldrb	r2, [r7, #12]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	715a      	strb	r2, [r3, #5]
}
 8011780:	bf00      	nop
 8011782:	3728      	adds	r7, #40	; 0x28
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <uxr_read_delete_session_status>:

void uxr_read_delete_session_status(
        uxrSessionInfo* info,
        ucdrBuffer* ub)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b086      	sub	sp, #24
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	6039      	str	r1, [r7, #0]
    STATUS_Payload payload;
    (void) uxr_deserialize_STATUS_Payload(ub, &payload);
 8011792:	f107 0310 	add.w	r3, r7, #16
 8011796:	4619      	mov	r1, r3
 8011798:	6838      	ldr	r0, [r7, #0]
 801179a:	f7fd f8a9 	bl	800e8f0 <uxr_deserialize_STATUS_Payload>

    if (UXR_REQUEST_LOGOUT == info->last_request_id)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	88db      	ldrh	r3, [r3, #6]
 80117a2:	2b02      	cmp	r3, #2
 80117a4:	d10e      	bne.n	80117c4 <uxr_read_delete_session_status+0x3c>
    {
        uxrObjectId object_id; uint16_t request_id;
        uxr_parse_base_object_request(&payload.base.related_request, &object_id, &request_id);
 80117a6:	f107 020a 	add.w	r2, r7, #10
 80117aa:	f107 010c 	add.w	r1, r7, #12
 80117ae:	f107 0310 	add.w	r3, r7, #16
 80117b2:	4618      	mov	r0, r3
 80117b4:	f000 f8ba 	bl	801192c <uxr_parse_base_object_request>
        process_delete_session_status(info, payload.base.result.status, request_id);
 80117b8:	7d3b      	ldrb	r3, [r7, #20]
 80117ba:	897a      	ldrh	r2, [r7, #10]
 80117bc:	4619      	mov	r1, r3
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f000 f902 	bl	80119c8 <process_delete_session_status>
    }
}
 80117c4:	bf00      	nop
 80117c6:	3718      	adds	r7, #24
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}

080117cc <uxr_stamp_create_session_header>:

void uxr_stamp_create_session_header(
        const uxrSessionInfo* info,
        uint8_t* buffer)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b08c      	sub	sp, #48	; 0x30
 80117d0:	af02      	add	r7, sp, #8
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]
    ucdrBuffer ub;
    ucdr_init_buffer(&ub, buffer, MAX_HEADER_SIZE);
 80117d6:	f107 0308 	add.w	r3, r7, #8
 80117da:	2208      	movs	r2, #8
 80117dc:	6839      	ldr	r1, [r7, #0]
 80117de:	4618      	mov	r0, r3
 80117e0:	f7f8 fcfd 	bl	800a1de <ucdr_init_buffer>

    uxr_serialize_message_header(&ub, info->id & SESSION_ID_WITHOUT_CLIENT_KEY, 0, 0, info->key);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	781b      	ldrb	r3, [r3, #0]
 80117e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80117ec:	b2d9      	uxtb	r1, r3
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	3301      	adds	r3, #1
 80117f2:	f107 0008 	add.w	r0, r7, #8
 80117f6:	9300      	str	r3, [sp, #0]
 80117f8:	2300      	movs	r3, #0
 80117fa:	2200      	movs	r2, #0
 80117fc:	f7fa fe64 	bl	800c4c8 <uxr_serialize_message_header>
}
 8011800:	bf00      	nop
 8011802:	3728      	adds	r7, #40	; 0x28
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}

08011808 <uxr_stamp_session_header>:
void uxr_stamp_session_header(
        const uxrSessionInfo* info,
        uint8_t stream_id_raw,
        uxrSeqNum seq_num,
        uint8_t* buffer)
{
 8011808:	b590      	push	{r4, r7, lr}
 801180a:	b08f      	sub	sp, #60	; 0x3c
 801180c:	af02      	add	r7, sp, #8
 801180e:	60f8      	str	r0, [r7, #12]
 8011810:	607b      	str	r3, [r7, #4]
 8011812:	460b      	mov	r3, r1
 8011814:	72fb      	strb	r3, [r7, #11]
 8011816:	4613      	mov	r3, r2
 8011818:	813b      	strh	r3, [r7, #8]
    ucdrBuffer ub;
    ucdr_init_buffer(&ub, buffer, MAX_HEADER_SIZE);
 801181a:	f107 0310 	add.w	r3, r7, #16
 801181e:	2208      	movs	r2, #8
 8011820:	6879      	ldr	r1, [r7, #4]
 8011822:	4618      	mov	r0, r3
 8011824:	f7f8 fcdb 	bl	800a1de <ucdr_init_buffer>

    uxr_serialize_message_header(&ub, info->id, stream_id_raw, seq_num, info->key);
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	7819      	ldrb	r1, [r3, #0]
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	3301      	adds	r3, #1
 8011830:	893c      	ldrh	r4, [r7, #8]
 8011832:	7afa      	ldrb	r2, [r7, #11]
 8011834:	f107 0010 	add.w	r0, r7, #16
 8011838:	9300      	str	r3, [sp, #0]
 801183a:	4623      	mov	r3, r4
 801183c:	f7fa fe44 	bl	800c4c8 <uxr_serialize_message_header>
}
 8011840:	bf00      	nop
 8011842:	3734      	adds	r7, #52	; 0x34
 8011844:	46bd      	mov	sp, r7
 8011846:	bd90      	pop	{r4, r7, pc}

08011848 <uxr_read_session_header>:
bool uxr_read_session_header(
        const uxrSessionInfo* info,
        ucdrBuffer* ub,
        uint8_t* stream_id_raw,
        uxrSeqNum* seq_num)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b088      	sub	sp, #32
 801184c:	af02      	add	r7, sp, #8
 801184e:	60f8      	str	r0, [r7, #12]
 8011850:	60b9      	str	r1, [r7, #8]
 8011852:	607a      	str	r2, [r7, #4]
 8011854:	603b      	str	r3, [r7, #0]
    bool must_be_read = ucdr_buffer_remaining(ub) > MAX_HEADER_SIZE;
 8011856:	68b8      	ldr	r0, [r7, #8]
 8011858:	f7f8 fdd8 	bl	800a40c <ucdr_buffer_remaining>
 801185c:	4603      	mov	r3, r0
 801185e:	2b08      	cmp	r3, #8
 8011860:	bf8c      	ite	hi
 8011862:	2301      	movhi	r3, #1
 8011864:	2300      	movls	r3, #0
 8011866:	75fb      	strb	r3, [r7, #23]
    if (must_be_read)
 8011868:	7dfb      	ldrb	r3, [r7, #23]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d027      	beq.n	80118be <uxr_read_session_header+0x76>
    {
        uint8_t session_id; uint8_t key[CLIENT_KEY_SIZE];
        uxr_deserialize_message_header(ub, &session_id, stream_id_raw, seq_num, key);
 801186e:	f107 0116 	add.w	r1, r7, #22
 8011872:	f107 0310 	add.w	r3, r7, #16
 8011876:	9300      	str	r3, [sp, #0]
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	687a      	ldr	r2, [r7, #4]
 801187c:	68b8      	ldr	r0, [r7, #8]
 801187e:	f7fa fe4d 	bl	800c51c <uxr_deserialize_message_header>

        must_be_read = session_id == info->id;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	781a      	ldrb	r2, [r3, #0]
 8011886:	7dbb      	ldrb	r3, [r7, #22]
 8011888:	429a      	cmp	r2, r3
 801188a:	bf0c      	ite	eq
 801188c:	2301      	moveq	r3, #1
 801188e:	2300      	movne	r3, #0
 8011890:	75fb      	strb	r3, [r7, #23]
        if (must_be_read)
 8011892:	7dfb      	ldrb	r3, [r7, #23]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d012      	beq.n	80118be <uxr_read_session_header+0x76>
        {
            if (SESSION_ID_WITHOUT_CLIENT_KEY > info->id)
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	781b      	ldrb	r3, [r3, #0]
 801189c:	b25b      	sxtb	r3, r3
 801189e:	2b00      	cmp	r3, #0
 80118a0:	db0d      	blt.n	80118be <uxr_read_session_header+0x76>
            {
                must_be_read = (0 == memcmp(key, info->key, CLIENT_KEY_SIZE));
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	1c59      	adds	r1, r3, #1
 80118a6:	f107 0310 	add.w	r3, r7, #16
 80118aa:	2204      	movs	r2, #4
 80118ac:	4618      	mov	r0, r3
 80118ae:	f00f f9f7 	bl	8020ca0 <memcmp>
 80118b2:	4603      	mov	r3, r0
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	bf0c      	ite	eq
 80118b8:	2301      	moveq	r3, #1
 80118ba:	2300      	movne	r3, #0
 80118bc:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return must_be_read;
 80118be:	7dfb      	ldrb	r3, [r7, #23]
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3718      	adds	r7, #24
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}

080118c8 <uxr_session_header_offset>:

uint8_t uxr_session_header_offset(
        const uxrSessionInfo* info)
{
 80118c8:	b480      	push	{r7}
 80118ca:	b083      	sub	sp, #12
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
    return (SESSION_ID_WITHOUT_CLIENT_KEY > info->id) ? MAX_HEADER_SIZE : MIN_HEADER_SIZE;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	b25b      	sxtb	r3, r3
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	db01      	blt.n	80118de <uxr_session_header_offset+0x16>
 80118da:	2308      	movs	r3, #8
 80118dc:	e000      	b.n	80118e0 <uxr_session_header_offset+0x18>
 80118de:	2304      	movs	r3, #4
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	370c      	adds	r7, #12
 80118e4:	46bd      	mov	sp, r7
 80118e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ea:	4770      	bx	lr

080118ec <uxr_init_base_object_request>:

uint16_t uxr_init_base_object_request(
        uxrSessionInfo* info,
        uxrObjectId object_id,
        BaseObjectRequest* base)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b086      	sub	sp, #24
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	60f8      	str	r0, [r7, #12]
 80118f4:	60b9      	str	r1, [r7, #8]
 80118f6:	607a      	str	r2, [r7, #4]
    uint16_t request_id = generate_request_id(info);
 80118f8:	68f8      	ldr	r0, [r7, #12]
 80118fa:	f000 f839 	bl	8011970 <generate_request_id>
 80118fe:	4603      	mov	r3, r0
 8011900:	82fb      	strh	r3, [r7, #22]

    base->request_id.data[0] = (uint8_t) (request_id >> 8);
 8011902:	8afb      	ldrh	r3, [r7, #22]
 8011904:	0a1b      	lsrs	r3, r3, #8
 8011906:	b29b      	uxth	r3, r3
 8011908:	b2da      	uxtb	r2, r3
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	701a      	strb	r2, [r3, #0]
    base->request_id.data[1] = (uint8_t) request_id;
 801190e:	8afb      	ldrh	r3, [r7, #22]
 8011910:	b2da      	uxtb	r2, r3
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	705a      	strb	r2, [r3, #1]
    uxr_object_id_to_raw(object_id, base->object_id.data);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	3302      	adds	r3, #2
 801191a:	4619      	mov	r1, r3
 801191c:	68b8      	ldr	r0, [r7, #8]
 801191e:	f7fe f952 	bl	800fbc6 <uxr_object_id_to_raw>

    return request_id;
 8011922:	8afb      	ldrh	r3, [r7, #22]
}
 8011924:	4618      	mov	r0, r3
 8011926:	3718      	adds	r7, #24
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}

0801192c <uxr_parse_base_object_request>:

void uxr_parse_base_object_request(
        const BaseObjectRequest* base,
        uxrObjectId* object_id,
        uint16_t* request_id)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b084      	sub	sp, #16
 8011930:	af00      	add	r7, sp, #0
 8011932:	60f8      	str	r0, [r7, #12]
 8011934:	60b9      	str	r1, [r7, #8]
 8011936:	607a      	str	r2, [r7, #4]
    *object_id = uxr_object_id_from_raw(base->object_id.data);
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	3302      	adds	r3, #2
 801193c:	4618      	mov	r0, r3
 801193e:	f7fe f91a 	bl	800fb76 <uxr_object_id_from_raw>
 8011942:	4602      	mov	r2, r0
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	4611      	mov	r1, r2
 8011948:	8019      	strh	r1, [r3, #0]
 801194a:	f3c2 420f 	ubfx	r2, r2, #16, #16
 801194e:	805a      	strh	r2, [r3, #2]
    *request_id = (uint16_t)((((uint16_t) base->request_id.data[0]) << 8)
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	b29b      	uxth	r3, r3
 8011956:	021b      	lsls	r3, r3, #8
 8011958:	b29a      	uxth	r2, r3
            + base->request_id.data[1]);
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	785b      	ldrb	r3, [r3, #1]
 801195e:	b29b      	uxth	r3, r3
    *request_id = (uint16_t)((((uint16_t) base->request_id.data[0]) << 8)
 8011960:	4413      	add	r3, r2
 8011962:	b29a      	uxth	r2, r3
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	801a      	strh	r2, [r3, #0]
}
 8011968:	bf00      	nop
 801196a:	3710      	adds	r7, #16
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <generate_request_id>:
//==================================================================
//                            PRIVATE
//==================================================================
inline uint16_t generate_request_id(
        uxrSessionInfo* session)
{
 8011970:	b480      	push	{r7}
 8011972:	b085      	sub	sp, #20
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
    bool out_of_bounds = (UINT16_MAX == session->last_request_id || RESERVED_REQUESTS_ID >= session->last_request_id);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	88db      	ldrh	r3, [r3, #6]
 801197c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011980:	4293      	cmp	r3, r2
 8011982:	d003      	beq.n	801198c <generate_request_id+0x1c>
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	88db      	ldrh	r3, [r3, #6]
 8011988:	2b09      	cmp	r3, #9
 801198a:	d801      	bhi.n	8011990 <generate_request_id+0x20>
 801198c:	2301      	movs	r3, #1
 801198e:	e000      	b.n	8011992 <generate_request_id+0x22>
 8011990:	2300      	movs	r3, #0
 8011992:	73fb      	strb	r3, [r7, #15]
 8011994:	7bfb      	ldrb	r3, [r7, #15]
 8011996:	f003 0301 	and.w	r3, r3, #1
 801199a:	73fb      	strb	r3, [r7, #15]
    session->last_request_id = (uint16_t)((out_of_bounds ? RESERVED_REQUESTS_ID : session->last_request_id) + 1);
 801199c:	7bfb      	ldrb	r3, [r7, #15]
 801199e:	f083 0301 	eor.w	r3, r3, #1
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d004      	beq.n	80119b2 <generate_request_id+0x42>
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	88db      	ldrh	r3, [r3, #6]
 80119ac:	3301      	adds	r3, #1
 80119ae:	b29a      	uxth	r2, r3
 80119b0:	e000      	b.n	80119b4 <generate_request_id+0x44>
 80119b2:	220a      	movs	r2, #10
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	80da      	strh	r2, [r3, #6]

    return session->last_request_id;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	88db      	ldrh	r3, [r3, #6]
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3714      	adds	r7, #20
 80119c0:	46bd      	mov	sp, r7
 80119c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c6:	4770      	bx	lr

080119c8 <process_delete_session_status>:

inline void process_delete_session_status(
        uxrSessionInfo* info,
        uint8_t status,
        uint16_t request_id)
{
 80119c8:	b480      	push	{r7}
 80119ca:	b083      	sub	sp, #12
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
 80119d0:	460b      	mov	r3, r1
 80119d2:	70fb      	strb	r3, [r7, #3]
 80119d4:	4613      	mov	r3, r2
 80119d6:	803b      	strh	r3, [r7, #0]
    if (UXR_REQUEST_LOGOUT == request_id)
 80119d8:	883b      	ldrh	r3, [r7, #0]
 80119da:	2b02      	cmp	r3, #2
 80119dc:	d102      	bne.n	80119e4 <process_delete_session_status+0x1c>
    {
        info->last_requested_status = status;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	78fa      	ldrb	r2, [r7, #3]
 80119e2:	715a      	strb	r2, [r3, #5]
    }
}
 80119e4:	bf00      	nop
 80119e6:	370c      	adds	r7, #12
 80119e8:	46bd      	mov	sp, r7
 80119ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ee:	4770      	bx	lr

080119f0 <uxr_buffer_submessage_header>:
bool uxr_buffer_submessage_header(
        ucdrBuffer* ub,
        uint8_t submessage_id,
        uint16_t length,
        uint8_t flags)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b082      	sub	sp, #8
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	4608      	mov	r0, r1
 80119fa:	4611      	mov	r1, r2
 80119fc:	461a      	mov	r2, r3
 80119fe:	4603      	mov	r3, r0
 8011a00:	70fb      	strb	r3, [r7, #3]
 8011a02:	460b      	mov	r3, r1
 8011a04:	803b      	strh	r3, [r7, #0]
 8011a06:	4613      	mov	r3, r2
 8011a08:	70bb      	strb	r3, [r7, #2]
    ucdr_align_to(ub, 4);
 8011a0a:	2104      	movs	r1, #4
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f7f8 fc51 	bl	800a2b4 <ucdr_align_to>
    ub->endianness = UCDR_MACHINE_ENDIANNESS;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	2201      	movs	r2, #1
 8011a16:	751a      	strb	r2, [r3, #20]
    flags = (uint8_t)(flags | ub->endianness);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	7d1a      	ldrb	r2, [r3, #20]
 8011a1c:	78bb      	ldrb	r3, [r7, #2]
 8011a1e:	4313      	orrs	r3, r2
 8011a20:	70bb      	strb	r3, [r7, #2]
    uxr_serialize_submessage_header(ub, submessage_id, flags, length);
 8011a22:	883b      	ldrh	r3, [r7, #0]
 8011a24:	78ba      	ldrb	r2, [r7, #2]
 8011a26:	78f9      	ldrb	r1, [r7, #3]
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f7fa fd99 	bl	800c560 <uxr_serialize_submessage_header>

    return ucdr_buffer_remaining(ub) >= length;
 8011a2e:	6878      	ldr	r0, [r7, #4]
 8011a30:	f7f8 fcec 	bl	800a40c <ucdr_buffer_remaining>
 8011a34:	4602      	mov	r2, r0
 8011a36:	883b      	ldrh	r3, [r7, #0]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	bf2c      	ite	cs
 8011a3c:	2301      	movcs	r3, #1
 8011a3e:	2300      	movcc	r3, #0
 8011a40:	b2db      	uxtb	r3, r3
}
 8011a42:	4618      	mov	r0, r3
 8011a44:	3708      	adds	r7, #8
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}

08011a4a <uxr_read_submessage_header>:
bool uxr_read_submessage_header(
        ucdrBuffer* ub,
        uint8_t* submessage_id,
        uint16_t* length,
        uint8_t* flags)
{
 8011a4a:	b580      	push	{r7, lr}
 8011a4c:	b086      	sub	sp, #24
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	60f8      	str	r0, [r7, #12]
 8011a52:	60b9      	str	r1, [r7, #8]
 8011a54:	607a      	str	r2, [r7, #4]
 8011a56:	603b      	str	r3, [r7, #0]
    ucdr_align_to(ub, 4);
 8011a58:	2104      	movs	r1, #4
 8011a5a:	68f8      	ldr	r0, [r7, #12]
 8011a5c:	f7f8 fc2a 	bl	800a2b4 <ucdr_align_to>
    bool ready_to_read = ucdr_buffer_remaining(ub) >= SUBHEADER_SIZE;
 8011a60:	68f8      	ldr	r0, [r7, #12]
 8011a62:	f7f8 fcd3 	bl	800a40c <ucdr_buffer_remaining>
 8011a66:	4603      	mov	r3, r0
 8011a68:	2b03      	cmp	r3, #3
 8011a6a:	bf8c      	ite	hi
 8011a6c:	2301      	movhi	r3, #1
 8011a6e:	2300      	movls	r3, #0
 8011a70:	75fb      	strb	r3, [r7, #23]
    if (ready_to_read)
 8011a72:	7dfb      	ldrb	r3, [r7, #23]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d01f      	beq.n	8011ab8 <uxr_read_submessage_header+0x6e>
    {
        uxr_deserialize_submessage_header(ub, submessage_id, flags, length);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	683a      	ldr	r2, [r7, #0]
 8011a7c:	68b9      	ldr	r1, [r7, #8]
 8011a7e:	68f8      	ldr	r0, [r7, #12]
 8011a80:	f7fa fd8f 	bl	800c5a2 <uxr_deserialize_submessage_header>

        uint8_t endiannes_flag = *flags & FLAG_ENDIANNESS;
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	781b      	ldrb	r3, [r3, #0]
 8011a88:	f003 0301 	and.w	r3, r3, #1
 8011a8c:	75bb      	strb	r3, [r7, #22]
        *flags = (uint8_t)(*flags & ~endiannes_flag);
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	781b      	ldrb	r3, [r3, #0]
 8011a92:	b25a      	sxtb	r2, r3
 8011a94:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8011a98:	43db      	mvns	r3, r3
 8011a9a:	b25b      	sxtb	r3, r3
 8011a9c:	4013      	ands	r3, r2
 8011a9e:	b25b      	sxtb	r3, r3
 8011aa0:	b2da      	uxtb	r2, r3
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	701a      	strb	r2, [r3, #0]
        ub->endianness = endiannes_flag ? UCDR_LITTLE_ENDIANNESS : UCDR_BIG_ENDIANNESS;
 8011aa6:	7dbb      	ldrb	r3, [r7, #22]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	bf14      	ite	ne
 8011aac:	2301      	movne	r3, #1
 8011aae:	2300      	moveq	r3, #0
 8011ab0:	b2db      	uxtb	r3, r3
 8011ab2:	461a      	mov	r2, r3
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	751a      	strb	r2, [r3, #20]
    }

    return ready_to_read;
 8011ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011aba:	4618      	mov	r0, r3
 8011abc:	3718      	adds	r7, #24
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}

08011ac2 <uxr_submessage_padding>:

size_t uxr_submessage_padding(
        size_t length)
{
 8011ac2:	b480      	push	{r7}
 8011ac4:	b083      	sub	sp, #12
 8011ac6:	af00      	add	r7, sp, #0
 8011ac8:	6078      	str	r0, [r7, #4]
    return (length % SUBHEADER_SIZE != 0) ? SUBHEADER_SIZE - (length % SUBHEADER_SIZE) : 0;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f003 0303 	and.w	r3, r3, #3
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d005      	beq.n	8011ae0 <uxr_submessage_padding+0x1e>
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f003 0303 	and.w	r3, r3, #3
 8011ada:	f1c3 0304 	rsb	r3, r3, #4
 8011ade:	e000      	b.n	8011ae2 <uxr_submessage_padding+0x20>
 8011ae0:	2300      	movs	r3, #0
}
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	370c      	adds	r7, #12
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aec:	4770      	bx	lr

08011aee <uxr_get_reliable_buffer>:
#define INTERNAL_RELIABLE_BUFFER_OFFSET sizeof(length_t)

static inline uint8_t* uxr_get_reliable_buffer(
        uxrReliableStream const* stream,
        uint16_t seq_num)
{
 8011aee:	b480      	push	{r7}
 8011af0:	b083      	sub	sp, #12
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	6078      	str	r0, [r7, #4]
 8011af6:	460b      	mov	r3, r1
 8011af8:	807b      	strh	r3, [r7, #2]
    return stream->buffer
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6819      	ldr	r1, [r3, #0]
           + ((seq_num % stream->history) * (stream->size / stream->history))
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	891a      	ldrh	r2, [r3, #8]
 8011b02:	887b      	ldrh	r3, [r7, #2]
 8011b04:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b08:	fb00 f202 	mul.w	r2, r0, r2
 8011b0c:	1a9b      	subs	r3, r3, r2
 8011b0e:	b29b      	uxth	r3, r3
 8011b10:	4618      	mov	r0, r3
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	687a      	ldr	r2, [r7, #4]
 8011b18:	8912      	ldrh	r2, [r2, #8]
 8011b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b1e:	fb00 f303 	mul.w	r3, r0, r3
           + INTERNAL_RELIABLE_BUFFER_OFFSET;
 8011b22:	3304      	adds	r3, #4
 8011b24:	440b      	add	r3, r1
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	370c      	adds	r7, #12
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b30:	4770      	bx	lr

08011b32 <uxr_get_reliable_buffer_capacity>:

static inline size_t uxr_get_reliable_buffer_capacity(
        uxrReliableStream const* stream)
{
 8011b32:	b480      	push	{r7}
 8011b34:	b083      	sub	sp, #12
 8011b36:	af00      	add	r7, sp, #0
 8011b38:	6078      	str	r0, [r7, #4]
    return stream->size / stream->history - INTERNAL_RELIABLE_BUFFER_OFFSET;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	685b      	ldr	r3, [r3, #4]
 8011b3e:	687a      	ldr	r2, [r7, #4]
 8011b40:	8912      	ldrh	r2, [r2, #8]
 8011b42:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b46:	3b04      	subs	r3, #4
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	370c      	adds	r7, #12
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b52:	4770      	bx	lr

08011b54 <uxr_get_reliable_buffer_size>:
}

static inline size_t uxr_get_reliable_buffer_size(
        uxrReliableStream const* stream,
        uint16_t seq_num)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b084      	sub	sp, #16
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
 8011b5c:	460b      	mov	r3, r1
 8011b5e:	807b      	strh	r3, [r7, #2]
    length_t length;
    memcpy(
        &length,
        uxr_get_reliable_buffer(stream, (seq_num % stream->history)) - INTERNAL_RELIABLE_BUFFER_OFFSET,
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	891a      	ldrh	r2, [r3, #8]
 8011b64:	887b      	ldrh	r3, [r7, #2]
 8011b66:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b6a:	fb01 f202 	mul.w	r2, r1, r2
 8011b6e:	1a9b      	subs	r3, r3, r2
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	4619      	mov	r1, r3
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f7ff ffba 	bl	8011aee <uxr_get_reliable_buffer>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	3b04      	subs	r3, #4
 8011b7e:	681b      	ldr	r3, [r3, #0]
    memcpy(
 8011b80:	60fb      	str	r3, [r7, #12]
        sizeof(length_t));
    return (size_t)length;
 8011b82:	68fb      	ldr	r3, [r7, #12]
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	3710      	adds	r7, #16
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}

08011b8c <uxr_set_reliable_buffer_size>:

static inline void uxr_set_reliable_buffer_size(
        uxrReliableStream const* stream,
        uint16_t seq_num,
        size_t length)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b086      	sub	sp, #24
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	60f8      	str	r0, [r7, #12]
 8011b94:	460b      	mov	r3, r1
 8011b96:	607a      	str	r2, [r7, #4]
 8011b98:	817b      	strh	r3, [r7, #10]
    length_t temp_length = (length_t)length;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	617b      	str	r3, [r7, #20]
    memcpy(
        uxr_get_reliable_buffer(stream, (seq_num % stream->history)) - INTERNAL_RELIABLE_BUFFER_OFFSET,
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	891a      	ldrh	r2, [r3, #8]
 8011ba2:	897b      	ldrh	r3, [r7, #10]
 8011ba4:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ba8:	fb01 f202 	mul.w	r2, r1, r2
 8011bac:	1a9b      	subs	r3, r3, r2
 8011bae:	b29b      	uxth	r3, r3
 8011bb0:	4619      	mov	r1, r3
 8011bb2:	68f8      	ldr	r0, [r7, #12]
 8011bb4:	f7ff ff9b 	bl	8011aee <uxr_get_reliable_buffer>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	3b04      	subs	r3, #4
 8011bbc:	697a      	ldr	r2, [r7, #20]
    memcpy(
 8011bbe:	601a      	str	r2, [r3, #0]
        &temp_length,
        INTERNAL_RELIABLE_BUFFER_OFFSET);
}
 8011bc0:	bf00      	nop
 8011bc2:	3718      	adds	r7, #24
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}

08011bc8 <uxr_prepare_output_stream>:
        uxrSession* session,
        uxrStreamId stream_id,
        uxrObjectId entity_id,
        ucdrBuffer* ub,
        uint32_t len)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b08e      	sub	sp, #56	; 0x38
 8011bcc:	af02      	add	r7, sp, #8
 8011bce:	60f8      	str	r0, [r7, #12]
 8011bd0:	60b9      	str	r1, [r7, #8]
 8011bd2:	607a      	str	r2, [r7, #4]
 8011bd4:	603b      	str	r3, [r7, #0]
    uint16_t rv = UXR_INVALID_REQUEST_ID;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    UXR_LOCK_STREAM_ID(session, stream_id);
 8011bda:	68b9      	ldr	r1, [r7, #8]
 8011bdc:	68f8      	ldr	r0, [r7, #12]
 8011bde:	f002 f842 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 8011be2:	62b8      	str	r0, [r7, #40]	; 0x28
 8011be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d002      	beq.n	8011bf0 <uxr_prepare_output_stream+0x28>
 8011bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011bec:	f002 f81f 	bl	8013c2e <uxr_lock>

    size_t payload_size = WRITE_DATA_PAYLOAD_SIZE + len;
 8011bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf2:	3304      	adds	r3, #4
 8011bf4:	627b      	str	r3, [r7, #36]	; 0x24

    ub->error = !uxr_prepare_stream_to_write_submessage(session, stream_id, payload_size, ub, SUBMESSAGE_ID_WRITE_DATA,
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	9301      	str	r3, [sp, #4]
 8011bfa:	2307      	movs	r3, #7
 8011bfc:	9300      	str	r3, [sp, #0]
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c02:	68b9      	ldr	r1, [r7, #8]
 8011c04:	68f8      	ldr	r0, [r7, #12]
 8011c06:	f7ff fc83 	bl	8011510 <uxr_prepare_stream_to_write_submessage>
 8011c0a:	4603      	mov	r3, r0
                    FORMAT_DATA);
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	bf14      	ite	ne
 8011c10:	2301      	movne	r3, #1
 8011c12:	2300      	moveq	r3, #0
 8011c14:	b2db      	uxtb	r3, r3
 8011c16:	f083 0301 	eor.w	r3, r3, #1
 8011c1a:	b2db      	uxtb	r3, r3
    ub->error = !uxr_prepare_stream_to_write_submessage(session, stream_id, payload_size, ub, SUBMESSAGE_ID_WRITE_DATA,
 8011c1c:	f003 0301 	and.w	r3, r3, #1
 8011c20:	b2da      	uxtb	r2, r3
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	759a      	strb	r2, [r3, #22]
    if (!ub->error)
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	7d9b      	ldrb	r3, [r3, #22]
 8011c2a:	f083 0301 	eor.w	r3, r3, #1
 8011c2e:	b2db      	uxtb	r3, r3
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d02f      	beq.n	8011c94 <uxr_prepare_output_stream+0xcc>
    {
        WRITE_DATA_Payload_Data payload;
        rv = uxr_init_base_object_request(&session->info, entity_id, &payload.base);
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	f107 0214 	add.w	r2, r7, #20
 8011c3a:	6879      	ldr	r1, [r7, #4]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7ff fe55 	bl	80118ec <uxr_init_base_object_request>
 8011c42:	4603      	mov	r3, r0
 8011c44:	85fb      	strh	r3, [r7, #46]	; 0x2e
        (void) uxr_serialize_WRITE_DATA_Payload_Data(ub, &payload);
 8011c46:	f107 0314 	add.w	r3, r7, #20
 8011c4a:	4619      	mov	r1, r3
 8011c4c:	6838      	ldr	r0, [r7, #0]
 8011c4e:	f7fc fe92 	bl	800e976 <uxr_serialize_WRITE_DATA_Payload_Data>

        OnFullBuffer on_full_buffer = ub->on_full_buffer;
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	699b      	ldr	r3, [r3, #24]
 8011c56:	61fb      	str	r3, [r7, #28]
        void* args = ub->args;
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	69db      	ldr	r3, [r3, #28]
 8011c5c:	61bb      	str	r3, [r7, #24]
        ucdr_init_buffer(ub, ub->iterator, (size_t)(ub->final - ub->iterator));
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	6899      	ldr	r1, [r3, #8]
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	685a      	ldr	r2, [r3, #4]
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	689b      	ldr	r3, [r3, #8]
 8011c6a:	1ad3      	subs	r3, r2, r3
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	6838      	ldr	r0, [r7, #0]
 8011c70:	f7f8 fab5 	bl	800a1de <ucdr_init_buffer>
        ucdr_set_on_full_buffer_callback(ub, on_full_buffer, args);
 8011c74:	69ba      	ldr	r2, [r7, #24]
 8011c76:	69f9      	ldr	r1, [r7, #28]
 8011c78:	6838      	ldr	r0, [r7, #0]
 8011c7a:	f7f8 fa9e 	bl	800a1ba <ucdr_set_on_full_buffer_callback>

        UXR_PREPARE_SHARED_MEMORY(session, entity_id, ub, (uint16_t) len, rv);
 8011c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c80:	b29a      	uxth	r2, r3
 8011c82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011c84:	9300      	str	r3, [sp, #0]
 8011c86:	4613      	mov	r3, r2
 8011c88:	683a      	ldr	r2, [r7, #0]
 8011c8a:	6879      	ldr	r1, [r7, #4]
 8011c8c:	68f8      	ldr	r0, [r7, #12]
 8011c8e:	f002 f96b 	bl	8013f68 <uxr_prepare_shared_memory>
 8011c92:	e00a      	b.n	8011caa <uxr_prepare_output_stream+0xe2>
    }
    else
    {
        UXR_UNLOCK_STREAM_ID(session, stream_id);
 8011c94:	68b9      	ldr	r1, [r7, #8]
 8011c96:	68f8      	ldr	r0, [r7, #12]
 8011c98:	f001 ffe5 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 8011c9c:	6238      	str	r0, [r7, #32]
 8011c9e:	6a3b      	ldr	r3, [r7, #32]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d002      	beq.n	8011caa <uxr_prepare_output_stream+0xe2>
 8011ca4:	6a38      	ldr	r0, [r7, #32]
 8011ca6:	f001 ffd1 	bl	8013c4c <uxr_unlock>
    }

    return rv;
 8011caa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3730      	adds	r7, #48	; 0x30
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <on_full_output_buffer_fragmented>:
// Continuous fragment mode

bool on_full_output_buffer_fragmented(
        ucdrBuffer* ub,
        void* args)
{
 8011cb4:	b590      	push	{r4, r7, lr}
 8011cb6:	b093      	sub	sp, #76	; 0x4c
 8011cb8:	af02      	add	r7, sp, #8
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	6039      	str	r1, [r7, #0]
    uxrSession* session = (uxrSession*) args;
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    uxrContinuousArgs* local_args = &session->continuous_args;
 8011cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cc4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8011cc8:	63bb      	str	r3, [r7, #56]	; 0x38

    uxrOutputReliableStream* stream = uxr_get_output_reliable_stream(&session->streams, local_args->stream_id.index);
 8011cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ccc:	f103 0208 	add.w	r2, r3, #8
 8011cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd2:	7a5b      	ldrb	r3, [r3, #9]
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	4610      	mov	r0, r2
 8011cd8:	f001 fc20 	bl	801351c <uxr_get_output_reliable_stream>
 8011cdc:	6378      	str	r0, [r7, #52]	; 0x34

    size_t remaining_blocks = get_available_free_slots(stream);
 8011cde:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011ce0:	f001 f9b4 	bl	801304c <get_available_free_slots>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	633b      	str	r3, [r7, #48]	; 0x30

    if (0 == remaining_blocks)
 8011ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d116      	bne.n	8011d1c <on_full_output_buffer_fragmented+0x68>
    {
        if (!local_args->flush_callback(session, local_args->flush_callback_args) ||
 8011cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011cf4:	6852      	ldr	r2, [r2, #4]
 8011cf6:	4611      	mov	r1, r2
 8011cf8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011cfa:	4798      	blx	r3
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	f083 0301 	eor.w	r3, r3, #1
 8011d02:	b2db      	uxtb	r3, r3
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d107      	bne.n	8011d18 <on_full_output_buffer_fragmented+0x64>
                0 == (remaining_blocks = get_available_free_slots(stream)))
 8011d08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011d0a:	f001 f99f 	bl	801304c <get_available_free_slots>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	633b      	str	r3, [r7, #48]	; 0x30
        if (!local_args->flush_callback(session, local_args->flush_callback_args) ||
 8011d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d101      	bne.n	8011d1c <on_full_output_buffer_fragmented+0x68>
        {
            return true;
 8011d18:	2301      	movs	r3, #1
 8011d1a:	e06a      	b.n	8011df2 <on_full_output_buffer_fragmented+0x13e>
        }
    }

    size_t buffer_capacity = uxr_get_reliable_buffer_capacity(&stream->base);
 8011d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7ff ff07 	bl	8011b32 <uxr_get_reliable_buffer_capacity>
 8011d24:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint16_t available_block_size = (uint16_t)(buffer_capacity - (uint16_t)(stream->offset + SUBHEADER_SIZE));
 8011d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d28:	b29a      	uxth	r2, r3
 8011d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d2c:	7b1b      	ldrb	r3, [r3, #12]
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	1ad3      	subs	r3, r2, r3
 8011d32:	b29b      	uxth	r3, r3
 8011d34:	3b04      	subs	r3, #4
 8011d36:	857b      	strh	r3, [r7, #42]	; 0x2a
    local_args->data_size = local_args->data_size - (size_t) available_block_size;
 8011d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3a:	68da      	ldr	r2, [r3, #12]
 8011d3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011d3e:	1ad2      	subs	r2, r2, r3
 8011d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d42:	60da      	str	r2, [r3, #12]

    ucdrBuffer temp_ub;
    ucdr_init_buffer_origin_offset(
        &temp_ub,
        uxr_get_reliable_buffer(&stream->base, stream->last_written),
 8011d44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ucdr_init_buffer_origin_offset(
 8011d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d48:	89db      	ldrh	r3, [r3, #14]
 8011d4a:	4619      	mov	r1, r3
 8011d4c:	4610      	mov	r0, r2
 8011d4e:	f7ff fece 	bl	8011aee <uxr_get_reliable_buffer>
 8011d52:	4604      	mov	r4, r0
        buffer_capacity,
        0u,
        uxr_get_reliable_buffer_size(&stream->base, stream->last_written));
 8011d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ucdr_init_buffer_origin_offset(
 8011d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d58:	89db      	ldrh	r3, [r3, #14]
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	4610      	mov	r0, r2
 8011d5e:	f7ff fef9 	bl	8011b54 <uxr_get_reliable_buffer_size>
 8011d62:	4603      	mov	r3, r0
 8011d64:	f107 0008 	add.w	r0, r7, #8
 8011d68:	9300      	str	r3, [sp, #0]
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d6e:	4621      	mov	r1, r4
 8011d70:	f7f8 fa58 	bl	800a224 <ucdr_init_buffer_origin_offset>

    if ((local_args->data_size + SUBHEADER_SIZE + WRITE_DATA_PAYLOAD_SIZE) <= buffer_capacity)
 8011d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d76:	68db      	ldr	r3, [r3, #12]
 8011d78:	3308      	adds	r3, #8
 8011d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d312      	bcc.n	8011da6 <on_full_output_buffer_fragmented+0xf2>
    {
        uxr_buffer_submessage_header(&temp_ub, SUBMESSAGE_ID_FRAGMENT, (uint16_t) local_args->data_size,
 8011d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	b29a      	uxth	r2, r3
 8011d86:	f107 0008 	add.w	r0, r7, #8
 8011d8a:	2302      	movs	r3, #2
 8011d8c:	210d      	movs	r1, #13
 8011d8e:	f7ff fe2f 	bl	80119f0 <uxr_buffer_submessage_header>
                FLAG_LAST_FRAGMENT);
        uxr_set_reliable_buffer_size(&stream->base, stream->last_written,
 8011d92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d96:	89d9      	ldrh	r1, [r3, #14]
                local_args->data_size + SUBHEADER_SIZE + WRITE_DATA_PAYLOAD_SIZE);
 8011d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9a:	68db      	ldr	r3, [r3, #12]
        uxr_set_reliable_buffer_size(&stream->base, stream->last_written,
 8011d9c:	3308      	adds	r3, #8
 8011d9e:	461a      	mov	r2, r3
 8011da0:	f7ff fef4 	bl	8011b8c <uxr_set_reliable_buffer_size>
 8011da4:	e00d      	b.n	8011dc2 <on_full_output_buffer_fragmented+0x10e>
    }
    else
    {
        uxr_buffer_submessage_header(&temp_ub, SUBMESSAGE_ID_FRAGMENT, available_block_size, 0);
 8011da6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8011da8:	f107 0008 	add.w	r0, r7, #8
 8011dac:	2300      	movs	r3, #0
 8011dae:	210d      	movs	r1, #13
 8011db0:	f7ff fe1e 	bl	80119f0 <uxr_buffer_submessage_header>
        uxr_set_reliable_buffer_size(&stream->base, stream->last_written, buffer_capacity);
 8011db4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011db8:	89db      	ldrh	r3, [r3, #14]
 8011dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011dbc:	4619      	mov	r1, r3
 8011dbe:	f7ff fee5 	bl	8011b8c <uxr_set_reliable_buffer_size>
    }

    stream->last_written = uxr_seq_num_add(stream->last_written, 1);
 8011dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dc4:	89db      	ldrh	r3, [r3, #14]
 8011dc6:	2101      	movs	r1, #1
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f001 f963 	bl	8013094 <uxr_seq_num_add>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	461a      	mov	r2, r3
 8011dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dd4:	81da      	strh	r2, [r3, #14]

    // Preparing the buffer for the user
    ucdr_init_buffer(
 8011dd6:	6939      	ldr	r1, [r7, #16]
        ub,
        temp_ub.iterator,
        (size_t)(temp_ub.final - temp_ub.iterator));
 8011dd8:	68fa      	ldr	r2, [r7, #12]
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	1ad3      	subs	r3, r2, r3
    ucdr_init_buffer(
 8011dde:	461a      	mov	r2, r3
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f7f8 f9fc 	bl	800a1de <ucdr_init_buffer>
    ucdr_set_on_full_buffer_callback(ub, on_full_output_buffer_fragmented, args);
 8011de6:	683a      	ldr	r2, [r7, #0]
 8011de8:	4904      	ldr	r1, [pc, #16]	; (8011dfc <on_full_output_buffer_fragmented+0x148>)
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f7f8 f9e5 	bl	800a1ba <ucdr_set_on_full_buffer_callback>

    return false;
 8011df0:	2300      	movs	r3, #0
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3744      	adds	r7, #68	; 0x44
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd90      	pop	{r4, r7, pc}
 8011dfa:	bf00      	nop
 8011dfc:	08011cb5 	.word	0x08011cb5

08011e00 <uxr_prepare_output_stream_fragmented>:
        uxrObjectId entity_id,
        ucdrBuffer* ub,
        size_t data_size,
        uxrOnBuffersFull flush_callback,
        void* flush_callback_args)
{
 8011e00:	b590      	push	{r4, r7, lr}
 8011e02:	b0a1      	sub	sp, #132	; 0x84
 8011e04:	af02      	add	r7, sp, #8
 8011e06:	60f8      	str	r0, [r7, #12]
 8011e08:	60b9      	str	r1, [r7, #8]
 8011e0a:	607a      	str	r2, [r7, #4]
 8011e0c:	603b      	str	r3, [r7, #0]
    uint16_t rv = UXR_INVALID_REQUEST_ID;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    UXR_LOCK_STREAM_ID(session, stream_id);
 8011e14:	68b9      	ldr	r1, [r7, #8]
 8011e16:	68f8      	ldr	r0, [r7, #12]
 8011e18:	f001 ff25 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 8011e1c:	6638      	str	r0, [r7, #96]	; 0x60
 8011e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d002      	beq.n	8011e2a <uxr_prepare_output_stream_fragmented+0x2a>
 8011e24:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011e26:	f001 ff02 	bl	8013c2e <uxr_lock>

    size_t user_required_space = data_size + SUBHEADER_SIZE + WRITE_DATA_PAYLOAD_SIZE;
 8011e2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011e2e:	3308      	adds	r3, #8
 8011e30:	65fb      	str	r3, [r7, #92]	; 0x5c

    uxrOutputReliableStream* stream = uxr_get_output_reliable_stream(&session->streams, stream_id.index);
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	3308      	adds	r3, #8
 8011e36:	7a7a      	ldrb	r2, [r7, #9]
 8011e38:	4611      	mov	r1, r2
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f001 fb6e 	bl	801351c <uxr_get_output_reliable_stream>
 8011e40:	65b8      	str	r0, [r7, #88]	; 0x58

    if (stream_id.type == UXR_BEST_EFFORT_STREAM || stream == NULL)
 8011e42:	7abb      	ldrb	r3, [r7, #10]
 8011e44:	2b01      	cmp	r3, #1
 8011e46:	d002      	beq.n	8011e4e <uxr_prepare_output_stream_fragmented+0x4e>
 8011e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d10c      	bne.n	8011e68 <uxr_prepare_output_stream_fragmented+0x68>
    {
        UXR_UNLOCK_STREAM_ID(session, stream_id);
 8011e4e:	68b9      	ldr	r1, [r7, #8]
 8011e50:	68f8      	ldr	r0, [r7, #12]
 8011e52:	f001 ff08 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 8011e56:	63b8      	str	r0, [r7, #56]	; 0x38
 8011e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d002      	beq.n	8011e64 <uxr_prepare_output_stream_fragmented+0x64>
 8011e5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011e60:	f001 fef4 	bl	8013c4c <uxr_unlock>
        return UXR_INVALID_REQUEST_ID;
 8011e64:	2300      	movs	r3, #0
 8011e66:	e11d      	b.n	80120a4 <uxr_prepare_output_stream_fragmented+0x2a4>
    }

    size_t remaining_blocks = get_available_free_slots(stream);
 8011e68:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011e6a:	f001 f8ef 	bl	801304c <get_available_free_slots>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	657b      	str	r3, [r7, #84]	; 0x54

    if (0 == remaining_blocks)
 8011e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d138      	bne.n	8011eea <uxr_prepare_output_stream_fragmented+0xea>
    {
        UXR_UNLOCK_STREAM_ID(session, stream_id);
 8011e78:	68b9      	ldr	r1, [r7, #8]
 8011e7a:	68f8      	ldr	r0, [r7, #12]
 8011e7c:	f001 fef3 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 8011e80:	6538      	str	r0, [r7, #80]	; 0x50
 8011e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d002      	beq.n	8011e8e <uxr_prepare_output_stream_fragmented+0x8e>
 8011e88:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011e8a:	f001 fedf 	bl	8013c4c <uxr_unlock>
        if (!flush_callback(session, flush_callback_args))
 8011e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011e96:	68f8      	ldr	r0, [r7, #12]
 8011e98:	4798      	blx	r3
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	f083 0301 	eor.w	r3, r3, #1
 8011ea0:	b2db      	uxtb	r3, r3
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d001      	beq.n	8011eaa <uxr_prepare_output_stream_fragmented+0xaa>
        {
            return UXR_INVALID_REQUEST_ID;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	e0fc      	b.n	80120a4 <uxr_prepare_output_stream_fragmented+0x2a4>
        }
        UXR_LOCK_STREAM_ID(session, stream_id);
 8011eaa:	68b9      	ldr	r1, [r7, #8]
 8011eac:	68f8      	ldr	r0, [r7, #12]
 8011eae:	f001 feda 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 8011eb2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d002      	beq.n	8011ec0 <uxr_prepare_output_stream_fragmented+0xc0>
 8011eba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011ebc:	f001 feb7 	bl	8013c2e <uxr_lock>
        remaining_blocks = get_available_free_slots(stream);
 8011ec0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011ec2:	f001 f8c3 	bl	801304c <get_available_free_slots>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	657b      	str	r3, [r7, #84]	; 0x54
        if (0 == remaining_blocks)
 8011eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d10c      	bne.n	8011eea <uxr_prepare_output_stream_fragmented+0xea>
        {
            UXR_UNLOCK_STREAM_ID(session, stream_id);
 8011ed0:	68b9      	ldr	r1, [r7, #8]
 8011ed2:	68f8      	ldr	r0, [r7, #12]
 8011ed4:	f001 fec7 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 8011ed8:	64b8      	str	r0, [r7, #72]	; 0x48
 8011eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d002      	beq.n	8011ee6 <uxr_prepare_output_stream_fragmented+0xe6>
 8011ee0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011ee2:	f001 feb3 	bl	8013c4c <uxr_unlock>
            return UXR_INVALID_REQUEST_ID;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	e0dc      	b.n	80120a4 <uxr_prepare_output_stream_fragmented+0x2a4>
        }
    }

    uxrSeqNum seq_num = stream->last_written;
 8011eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011eec:	89db      	ldrh	r3, [r3, #14]
 8011eee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    uint8_t* buffer = uxr_get_reliable_buffer(&stream->base, seq_num);
 8011ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ef4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011ef8:	4611      	mov	r1, r2
 8011efa:	4618      	mov	r0, r3
 8011efc:	f7ff fdf7 	bl	8011aee <uxr_get_reliable_buffer>
 8011f00:	6738      	str	r0, [r7, #112]	; 0x70
    size_t buffer_size = uxr_get_reliable_buffer_size(&stream->base, seq_num);
 8011f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011f08:	4611      	mov	r1, r2
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7ff fe22 	bl	8011b54 <uxr_get_reliable_buffer_size>
 8011f10:	66f8      	str	r0, [r7, #108]	; 0x6c
    size_t buffer_capacity = uxr_get_reliable_buffer_capacity(&stream->base);
 8011f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7ff fe0c 	bl	8011b32 <uxr_get_reliable_buffer_capacity>
 8011f1a:	6478      	str	r0, [r7, #68]	; 0x44

    // Always start in a fresh buffer to avoid handling first fragment size
    if (buffer_size > (size_t)stream->offset)
 8011f1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f1e:	7b1b      	ldrb	r3, [r3, #12]
 8011f20:	461a      	mov	r2, r3
 8011f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f24:	4293      	cmp	r3, r2
 8011f26:	d918      	bls.n	8011f5a <uxr_prepare_output_stream_fragmented+0x15a>
    {
        seq_num = uxr_seq_num_add(seq_num, 1);
 8011f28:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8011f2c:	2101      	movs	r1, #1
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f001 f8b0 	bl	8013094 <uxr_seq_num_add>
 8011f34:	4603      	mov	r3, r0
 8011f36:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        buffer = uxr_get_reliable_buffer(&stream->base, seq_num);
 8011f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011f40:	4611      	mov	r1, r2
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7ff fdd3 	bl	8011aee <uxr_get_reliable_buffer>
 8011f48:	6738      	str	r0, [r7, #112]	; 0x70
        buffer_size = uxr_get_reliable_buffer_size(&stream->base, seq_num);
 8011f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011f50:	4611      	mov	r1, r2
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7ff fdfe 	bl	8011b54 <uxr_get_reliable_buffer_size>
 8011f58:	66f8      	str	r0, [r7, #108]	; 0x6c
    }

    uint16_t available_block_size = (uint16_t)(buffer_capacity - (uint16_t)(stream->offset + SUBHEADER_SIZE));
 8011f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f5c:	b29a      	uxth	r2, r3
 8011f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f60:	7b1b      	ldrb	r3, [r3, #12]
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	1ad3      	subs	r3, r2, r3
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	3b04      	subs	r3, #4
 8011f6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    ucdrBuffer temp_ub;
    ucdr_init_buffer_origin_offset(
        &temp_ub,
        uxr_get_reliable_buffer(&stream->base, seq_num),
 8011f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    ucdr_init_buffer_origin_offset(
 8011f70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011f74:	4611      	mov	r1, r2
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7ff fdb9 	bl	8011aee <uxr_get_reliable_buffer>
 8011f7c:	4604      	mov	r4, r0
        buffer_capacity,
        0u,
        uxr_get_reliable_buffer_size(&stream->base, seq_num));
 8011f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    ucdr_init_buffer_origin_offset(
 8011f80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011f84:	4611      	mov	r1, r2
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7ff fde4 	bl	8011b54 <uxr_get_reliable_buffer_size>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	f107 0018 	add.w	r0, r7, #24
 8011f92:	9300      	str	r3, [sp, #0]
 8011f94:	2300      	movs	r3, #0
 8011f96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f98:	4621      	mov	r1, r4
 8011f9a:	f7f8 f943 	bl	800a224 <ucdr_init_buffer_origin_offset>
    uxr_buffer_submessage_header(&temp_ub, SUBMESSAGE_ID_FRAGMENT, available_block_size,
 8011f9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fa2:	429a      	cmp	r2, r3
 8011fa4:	d201      	bcs.n	8011faa <uxr_prepare_output_stream_fragmented+0x1aa>
 8011fa6:	2302      	movs	r3, #2
 8011fa8:	e000      	b.n	8011fac <uxr_prepare_output_stream_fragmented+0x1ac>
 8011faa:	2300      	movs	r3, #0
 8011fac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011fb0:	f107 0018 	add.w	r0, r7, #24
 8011fb4:	210d      	movs	r1, #13
 8011fb6:	f7ff fd1b 	bl	80119f0 <uxr_buffer_submessage_header>
            (user_required_space < buffer_capacity) ? FLAG_LAST_FRAGMENT : 0);
    uxr_set_reliable_buffer_size(&stream->base, seq_num, buffer_capacity);
 8011fba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011fbc:	f8b7 1076 	ldrh.w	r1, [r7, #118]	; 0x76
 8011fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f7ff fde2 	bl	8011b8c <uxr_set_reliable_buffer_size>
    seq_num = uxr_seq_num_add(seq_num, 1);
 8011fc8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8011fcc:	2101      	movs	r1, #1
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f001 f860 	bl	8013094 <uxr_seq_num_add>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

    // Preparing the buffer for the user
    ucdr_init_buffer(
        ub,
        buffer + buffer_size + SUBHEADER_SIZE,
 8011fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fdc:	3304      	adds	r3, #4
    ucdr_init_buffer(
 8011fde:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011fe0:	18d1      	adds	r1, r2, r3
        (uint32_t)(buffer_capacity - buffer_size - SUBHEADER_SIZE));
 8011fe2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fe6:	1ad3      	subs	r3, r2, r3
    ucdr_init_buffer(
 8011fe8:	3b04      	subs	r3, #4
 8011fea:	461a      	mov	r2, r3
 8011fec:	6838      	ldr	r0, [r7, #0]
 8011fee:	f7f8 f8f6 	bl	800a1de <ucdr_init_buffer>

    stream->last_written = seq_num;
 8011ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ff4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011ff8:	81da      	strh	r2, [r3, #14]

    // Fill the SUBMESSAGE_ID_WRITE_DATA
    size_t payload_size = WRITE_DATA_PAYLOAD_SIZE + data_size;
 8011ffa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011ffe:	3304      	adds	r3, #4
 8012000:	66bb      	str	r3, [r7, #104]	; 0x68

#ifdef UCLIENT_TWEAK_XRCE_WRITE_LIMIT
    if (payload_size > MAX_WRITE_DATA_PAYLOAD_SIZE)
 8012002:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012008:	d301      	bcc.n	801200e <uxr_prepare_output_stream_fragmented+0x20e>
    {
        payload_size = 0;
 801200a:	2300      	movs	r3, #0
 801200c:	66bb      	str	r3, [r7, #104]	; 0x68
    }
#endif  // UCLIENT_TWEAK_XRCE_WRITE_LIMIT

    (void) uxr_buffer_submessage_header(ub, SUBMESSAGE_ID_WRITE_DATA, (uint16_t)payload_size, FORMAT_DATA);
 801200e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012010:	b29a      	uxth	r2, r3
 8012012:	2300      	movs	r3, #0
 8012014:	2107      	movs	r1, #7
 8012016:	6838      	ldr	r0, [r7, #0]
 8012018:	f7ff fcea 	bl	80119f0 <uxr_buffer_submessage_header>

    WRITE_DATA_Payload_Data payload;
    rv = uxr_init_base_object_request(&session->info, entity_id, &payload.base);
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	f107 0214 	add.w	r2, r7, #20
 8012022:	6879      	ldr	r1, [r7, #4]
 8012024:	4618      	mov	r0, r3
 8012026:	f7ff fc61 	bl	80118ec <uxr_init_base_object_request>
 801202a:	4603      	mov	r3, r0
 801202c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    if (rv == UXR_INVALID_REQUEST_ID)
 8012030:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8012034:	2b00      	cmp	r3, #0
 8012036:	d10b      	bne.n	8012050 <uxr_prepare_output_stream_fragmented+0x250>
    {
        UXR_UNLOCK_STREAM_ID(session, stream_id);
 8012038:	68b9      	ldr	r1, [r7, #8]
 801203a:	68f8      	ldr	r0, [r7, #12]
 801203c:	f001 fe13 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 8012040:	63f8      	str	r0, [r7, #60]	; 0x3c
 8012042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012044:	2b00      	cmp	r3, #0
 8012046:	d02b      	beq.n	80120a0 <uxr_prepare_output_stream_fragmented+0x2a0>
 8012048:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801204a:	f001 fdff 	bl	8013c4c <uxr_unlock>
 801204e:	e027      	b.n	80120a0 <uxr_prepare_output_stream_fragmented+0x2a0>
    }
    else
    {
        (void) uxr_serialize_WRITE_DATA_Payload_Data(ub, &payload);
 8012050:	f107 0314 	add.w	r3, r7, #20
 8012054:	4619      	mov	r1, r3
 8012056:	6838      	ldr	r0, [r7, #0]
 8012058:	f7fc fc8d 	bl	800e976 <uxr_serialize_WRITE_DATA_Payload_Data>

        ucdr_init_buffer(ub, ub->iterator, (size_t)(ub->final - ub->iterator));
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	6899      	ldr	r1, [r3, #8]
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	685a      	ldr	r2, [r3, #4]
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	689b      	ldr	r3, [r3, #8]
 8012068:	1ad3      	subs	r3, r2, r3
 801206a:	461a      	mov	r2, r3
 801206c:	6838      	ldr	r0, [r7, #0]
 801206e:	f7f8 f8b6 	bl	800a1de <ucdr_init_buffer>

        session->continuous_args.stream_id = stream_id;
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	68ba      	ldr	r2, [r7, #8]
 8012076:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        session->continuous_args.data_size = user_required_space;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801207e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        session->continuous_args.flush_callback = flush_callback;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012088:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        session->continuous_args.flush_callback_args = flush_callback_args;
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012092:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        ucdr_set_on_full_buffer_callback(ub, on_full_output_buffer_fragmented, session);
 8012096:	68fa      	ldr	r2, [r7, #12]
 8012098:	4904      	ldr	r1, [pc, #16]	; (80120ac <uxr_prepare_output_stream_fragmented+0x2ac>)
 801209a:	6838      	ldr	r0, [r7, #0]
 801209c:	f7f8 f88d 	bl	800a1ba <ucdr_set_on_full_buffer_callback>
    }

    return rv;
 80120a0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	377c      	adds	r7, #124	; 0x7c
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd90      	pop	{r4, r7, pc}
 80120ac:	08011cb5 	.word	0x08011cb5

080120b0 <uxr_init_input_best_effort_stream>:
//==================================================================
//                             PUBLIC
//==================================================================
void uxr_init_input_best_effort_stream(
        uxrInputBestEffortStream* stream)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
    stream->last_handled = SEQ_NUM_MAX;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120be:	801a      	strh	r2, [r3, #0]

    UXR_INIT_LOCK(&stream->mutex);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	3304      	adds	r3, #4
 80120c4:	4618      	mov	r0, r3
 80120c6:	f001 fda1 	bl	8013c0c <uxr_init_lock>
}
 80120ca:	bf00      	nop
 80120cc:	3708      	adds	r7, #8
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}

080120d2 <uxr_reset_input_best_effort_stream>:

void uxr_reset_input_best_effort_stream(
        uxrInputBestEffortStream* stream)
{
 80120d2:	b480      	push	{r7}
 80120d4:	b083      	sub	sp, #12
 80120d6:	af00      	add	r7, sp, #0
 80120d8:	6078      	str	r0, [r7, #4]
    stream->last_handled = SEQ_NUM_MAX;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120e0:	801a      	strh	r2, [r3, #0]
}
 80120e2:	bf00      	nop
 80120e4:	370c      	adds	r7, #12
 80120e6:	46bd      	mov	sp, r7
 80120e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ec:	4770      	bx	lr

080120ee <uxr_receive_best_effort_message>:

bool uxr_receive_best_effort_message(
        uxrInputBestEffortStream* stream,
        uxrSeqNum seq_num)
{
 80120ee:	b580      	push	{r7, lr}
 80120f0:	b084      	sub	sp, #16
 80120f2:	af00      	add	r7, sp, #0
 80120f4:	6078      	str	r0, [r7, #4]
 80120f6:	460b      	mov	r3, r1
 80120f8:	807b      	strh	r3, [r7, #2]
    bool available_to_read = (0 > uxr_seq_num_cmp(stream->last_handled, seq_num));
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	881b      	ldrh	r3, [r3, #0]
 80120fe:	887a      	ldrh	r2, [r7, #2]
 8012100:	4611      	mov	r1, r2
 8012102:	4618      	mov	r0, r3
 8012104:	f000 ffea 	bl	80130dc <uxr_seq_num_cmp>
 8012108:	4603      	mov	r3, r0
 801210a:	0fdb      	lsrs	r3, r3, #31
 801210c:	73fb      	strb	r3, [r7, #15]
    if (available_to_read)
 801210e:	7bfb      	ldrb	r3, [r7, #15]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d002      	beq.n	801211a <uxr_receive_best_effort_message+0x2c>
    {
        stream->last_handled = seq_num;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	887a      	ldrh	r2, [r7, #2]
 8012118:	801a      	strh	r2, [r3, #0]
    }

    return available_to_read;
 801211a:	7bfb      	ldrb	r3, [r7, #15]
}
 801211c:	4618      	mov	r0, r3
 801211e:	3710      	adds	r7, #16
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}

08012124 <uxr_get_reliable_buffer>:
#define INTERNAL_RELIABLE_BUFFER_OFFSET sizeof(length_t)

static inline uint8_t* uxr_get_reliable_buffer(
        uxrReliableStream const* stream,
        uint16_t seq_num)
{
 8012124:	b480      	push	{r7}
 8012126:	b083      	sub	sp, #12
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	460b      	mov	r3, r1
 801212e:	807b      	strh	r3, [r7, #2]
    return stream->buffer
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	6819      	ldr	r1, [r3, #0]
           + ((seq_num % stream->history) * (stream->size / stream->history))
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	891a      	ldrh	r2, [r3, #8]
 8012138:	887b      	ldrh	r3, [r7, #2]
 801213a:	fbb3 f0f2 	udiv	r0, r3, r2
 801213e:	fb00 f202 	mul.w	r2, r0, r2
 8012142:	1a9b      	subs	r3, r3, r2
 8012144:	b29b      	uxth	r3, r3
 8012146:	4618      	mov	r0, r3
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	685b      	ldr	r3, [r3, #4]
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	8912      	ldrh	r2, [r2, #8]
 8012150:	fbb3 f3f2 	udiv	r3, r3, r2
 8012154:	fb00 f303 	mul.w	r3, r0, r3
           + INTERNAL_RELIABLE_BUFFER_OFFSET;
 8012158:	3304      	adds	r3, #4
 801215a:	440b      	add	r3, r1
}
 801215c:	4618      	mov	r0, r3
 801215e:	370c      	adds	r7, #12
 8012160:	46bd      	mov	sp, r7
 8012162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012166:	4770      	bx	lr

08012168 <uxr_get_reliable_buffer_history_position>:
}

static inline uint16_t uxr_get_reliable_buffer_history_position(
        uxrReliableStream const* stream,
        uint8_t const* current_position)
{
 8012168:	b480      	push	{r7}
 801216a:	b083      	sub	sp, #12
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
    return (uint16_t)((size_t)(current_position - stream->buffer) / (stream->size / stream->history));
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	683a      	ldr	r2, [r7, #0]
 8012178:	1ad3      	subs	r3, r2, r3
 801217a:	4619      	mov	r1, r3
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	685b      	ldr	r3, [r3, #4]
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	8912      	ldrh	r2, [r2, #8]
 8012184:	fbb3 f3f2 	udiv	r3, r3, r2
 8012188:	fbb1 f3f3 	udiv	r3, r1, r3
 801218c:	b29b      	uxth	r3, r3
}
 801218e:	4618      	mov	r0, r3
 8012190:	370c      	adds	r7, #12
 8012192:	46bd      	mov	sp, r7
 8012194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012198:	4770      	bx	lr

0801219a <uxr_get_reliable_buffer_size>:

static inline size_t uxr_get_reliable_buffer_size(
        uxrReliableStream const* stream,
        uint16_t seq_num)
{
 801219a:	b580      	push	{r7, lr}
 801219c:	b084      	sub	sp, #16
 801219e:	af00      	add	r7, sp, #0
 80121a0:	6078      	str	r0, [r7, #4]
 80121a2:	460b      	mov	r3, r1
 80121a4:	807b      	strh	r3, [r7, #2]
    length_t length;
    memcpy(
        &length,
        uxr_get_reliable_buffer(stream, (seq_num % stream->history)) - INTERNAL_RELIABLE_BUFFER_OFFSET,
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	891a      	ldrh	r2, [r3, #8]
 80121aa:	887b      	ldrh	r3, [r7, #2]
 80121ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80121b0:	fb01 f202 	mul.w	r2, r1, r2
 80121b4:	1a9b      	subs	r3, r3, r2
 80121b6:	b29b      	uxth	r3, r3
 80121b8:	4619      	mov	r1, r3
 80121ba:	6878      	ldr	r0, [r7, #4]
 80121bc:	f7ff ffb2 	bl	8012124 <uxr_get_reliable_buffer>
 80121c0:	4603      	mov	r3, r0
 80121c2:	3b04      	subs	r3, #4
 80121c4:	681b      	ldr	r3, [r3, #0]
    memcpy(
 80121c6:	60fb      	str	r3, [r7, #12]
        sizeof(length_t));
    return (size_t)length;
 80121c8:	68fb      	ldr	r3, [r7, #12]
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3710      	adds	r7, #16
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}

080121d2 <uxr_set_reliable_buffer_size>:

static inline void uxr_set_reliable_buffer_size(
        uxrReliableStream const* stream,
        uint16_t seq_num,
        size_t length)
{
 80121d2:	b580      	push	{r7, lr}
 80121d4:	b086      	sub	sp, #24
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	60f8      	str	r0, [r7, #12]
 80121da:	460b      	mov	r3, r1
 80121dc:	607a      	str	r2, [r7, #4]
 80121de:	817b      	strh	r3, [r7, #10]
    length_t temp_length = (length_t)length;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	617b      	str	r3, [r7, #20]
    memcpy(
        uxr_get_reliable_buffer(stream, (seq_num % stream->history)) - INTERNAL_RELIABLE_BUFFER_OFFSET,
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	891a      	ldrh	r2, [r3, #8]
 80121e8:	897b      	ldrh	r3, [r7, #10]
 80121ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80121ee:	fb01 f202 	mul.w	r2, r1, r2
 80121f2:	1a9b      	subs	r3, r3, r2
 80121f4:	b29b      	uxth	r3, r3
 80121f6:	4619      	mov	r1, r3
 80121f8:	68f8      	ldr	r0, [r7, #12]
 80121fa:	f7ff ff93 	bl	8012124 <uxr_get_reliable_buffer>
 80121fe:	4603      	mov	r3, r0
 8012200:	3b04      	subs	r3, #4
 8012202:	697a      	ldr	r2, [r7, #20]
    memcpy(
 8012204:	601a      	str	r2, [r3, #0]
        &temp_length,
        INTERNAL_RELIABLE_BUFFER_OFFSET);
}
 8012206:	bf00      	nop
 8012208:	3718      	adds	r7, #24
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}

0801220e <uxr_init_input_reliable_stream>:
        uxrInputReliableStream* stream,
        uint8_t* buffer,
        size_t size,
        uint16_t history,
        OnGetFragmentationInfo on_get_fragmentation_info)
{
 801220e:	b580      	push	{r7, lr}
 8012210:	b084      	sub	sp, #16
 8012212:	af00      	add	r7, sp, #0
 8012214:	60f8      	str	r0, [r7, #12]
 8012216:	60b9      	str	r1, [r7, #8]
 8012218:	607a      	str	r2, [r7, #4]
 801221a:	807b      	strh	r3, [r7, #2]
    // assert for history (must be 2^)
    stream->base.buffer = buffer;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	68ba      	ldr	r2, [r7, #8]
 8012220:	601a      	str	r2, [r3, #0]
    stream->base.size = size;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	687a      	ldr	r2, [r7, #4]
 8012226:	605a      	str	r2, [r3, #4]
    stream->base.history = history;
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	887a      	ldrh	r2, [r7, #2]
 801222c:	811a      	strh	r2, [r3, #8]
    stream->on_get_fragmentation_info = on_get_fragmentation_info;
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	69ba      	ldr	r2, [r7, #24]
 8012232:	611a      	str	r2, [r3, #16]
    stream->cleanup_flag = false;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2200      	movs	r2, #0
 8012238:	751a      	strb	r2, [r3, #20]

    UXR_INIT_LOCK(&stream->mutex);
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	3318      	adds	r3, #24
 801223e:	4618      	mov	r0, r3
 8012240:	f001 fce4 	bl	8013c0c <uxr_init_lock>

    uxr_reset_input_reliable_stream(stream);
 8012244:	68f8      	ldr	r0, [r7, #12]
 8012246:	f000 f804 	bl	8012252 <uxr_reset_input_reliable_stream>
}
 801224a:	bf00      	nop
 801224c:	3710      	adds	r7, #16
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}

08012252 <uxr_reset_input_reliable_stream>:

void uxr_reset_input_reliable_stream(
        uxrInputReliableStream* stream)
{
 8012252:	b580      	push	{r7, lr}
 8012254:	b084      	sub	sp, #16
 8012256:	af00      	add	r7, sp, #0
 8012258:	6078      	str	r0, [r7, #4]
    for (uint16_t i = 0; i < stream->base.history; ++i)
 801225a:	2300      	movs	r3, #0
 801225c:	81fb      	strh	r3, [r7, #14]
 801225e:	e008      	b.n	8012272 <uxr_reset_input_reliable_stream+0x20>
    {
        uxr_set_reliable_buffer_size(&stream->base, i, 0);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	89f9      	ldrh	r1, [r7, #14]
 8012264:	2200      	movs	r2, #0
 8012266:	4618      	mov	r0, r3
 8012268:	f7ff ffb3 	bl	80121d2 <uxr_set_reliable_buffer_size>
    for (uint16_t i = 0; i < stream->base.history; ++i)
 801226c:	89fb      	ldrh	r3, [r7, #14]
 801226e:	3301      	adds	r3, #1
 8012270:	81fb      	strh	r3, [r7, #14]
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	891b      	ldrh	r3, [r3, #8]
 8012276:	89fa      	ldrh	r2, [r7, #14]
 8012278:	429a      	cmp	r2, r3
 801227a:	d3f1      	bcc.n	8012260 <uxr_reset_input_reliable_stream+0xe>
    }

    stream->last_handled = SEQ_NUM_MAX;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012282:	819a      	strh	r2, [r3, #12]
    stream->last_announced = SEQ_NUM_MAX;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801228a:	81da      	strh	r2, [r3, #14]
}
 801228c:	bf00      	nop
 801228e:	3710      	adds	r7, #16
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}

08012294 <uxr_receive_reliable_message>:
        uxrInputReliableStream* stream,
        uint16_t seq_num,
        uint8_t* buffer,
        size_t length,
        bool* message_stored)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b088      	sub	sp, #32
 8012298:	af00      	add	r7, sp, #0
 801229a:	60f8      	str	r0, [r7, #12]
 801229c:	607a      	str	r2, [r7, #4]
 801229e:	603b      	str	r3, [r7, #0]
 80122a0:	460b      	mov	r3, r1
 80122a2:	817b      	strh	r3, [r7, #10]
    bool ready_to_read = false;
 80122a4:	2300      	movs	r3, #0
 80122a6:	77fb      	strb	r3, [r7, #31]

    /* Check if the seq_num is valid for the stream state */
    uxrSeqNum last_history = uxr_seq_num_add(stream->last_handled, stream->base.history);
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	899a      	ldrh	r2, [r3, #12]
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	891b      	ldrh	r3, [r3, #8]
 80122b0:	4619      	mov	r1, r3
 80122b2:	4610      	mov	r0, r2
 80122b4:	f000 feee 	bl	8013094 <uxr_seq_num_add>
 80122b8:	4603      	mov	r3, r0
 80122ba:	83bb      	strh	r3, [r7, #28]
    if (0 > uxr_seq_num_cmp(stream->last_handled, seq_num) && 0 <= uxr_seq_num_cmp(last_history, seq_num))
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	899b      	ldrh	r3, [r3, #12]
 80122c0:	897a      	ldrh	r2, [r7, #10]
 80122c2:	4611      	mov	r1, r2
 80122c4:	4618      	mov	r0, r3
 80122c6:	f000 ff09 	bl	80130dc <uxr_seq_num_cmp>
 80122ca:	4603      	mov	r3, r0
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	da52      	bge.n	8012376 <uxr_receive_reliable_message+0xe2>
 80122d0:	897a      	ldrh	r2, [r7, #10]
 80122d2:	8bbb      	ldrh	r3, [r7, #28]
 80122d4:	4611      	mov	r1, r2
 80122d6:	4618      	mov	r0, r3
 80122d8:	f000 ff00 	bl	80130dc <uxr_seq_num_cmp>
 80122dc:	4603      	mov	r3, r0
 80122de:	2b00      	cmp	r3, #0
 80122e0:	db49      	blt.n	8012376 <uxr_receive_reliable_message+0xe2>
    {
        /* Process the message */
        FragmentationInfo fragmentation_info = stream->on_get_fragmentation_info(buffer);
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	691b      	ldr	r3, [r3, #16]
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	4798      	blx	r3
 80122ea:	4603      	mov	r3, r0
 80122ec:	76fb      	strb	r3, [r7, #27]
        uxrSeqNum next = uxr_seq_num_add(stream->last_handled, 1);
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	899b      	ldrh	r3, [r3, #12]
 80122f2:	2101      	movs	r1, #1
 80122f4:	4618      	mov	r0, r3
 80122f6:	f000 fecd 	bl	8013094 <uxr_seq_num_add>
 80122fa:	4603      	mov	r3, r0
 80122fc:	833b      	strh	r3, [r7, #24]

        if ((NO_FRAGMENTED == fragmentation_info) && (seq_num == next))
 80122fe:	7efb      	ldrb	r3, [r7, #27]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d10c      	bne.n	801231e <uxr_receive_reliable_message+0x8a>
 8012304:	897a      	ldrh	r2, [r7, #10]
 8012306:	8b3b      	ldrh	r3, [r7, #24]
 8012308:	429a      	cmp	r2, r3
 801230a:	d108      	bne.n	801231e <uxr_receive_reliable_message+0x8a>
        {
            stream->last_handled = next;
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	8b3a      	ldrh	r2, [r7, #24]
 8012310:	819a      	strh	r2, [r3, #12]
            ready_to_read = true;
 8012312:	2301      	movs	r3, #1
 8012314:	77fb      	strb	r3, [r7, #31]
            *message_stored = false;
 8012316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012318:	2200      	movs	r2, #0
 801231a:	701a      	strb	r2, [r3, #0]
 801231c:	e02b      	b.n	8012376 <uxr_receive_reliable_message+0xe2>
        }
        else
        {
            /* Check if the message received is not already received */
            uint8_t* internal_buffer = uxr_get_reliable_buffer(&stream->base, seq_num);
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	897a      	ldrh	r2, [r7, #10]
 8012322:	4611      	mov	r1, r2
 8012324:	4618      	mov	r0, r3
 8012326:	f7ff fefd 	bl	8012124 <uxr_get_reliable_buffer>
 801232a:	6178      	str	r0, [r7, #20]
            if (0 == uxr_get_reliable_buffer_size(&stream->base, seq_num))
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	897a      	ldrh	r2, [r7, #10]
 8012330:	4611      	mov	r1, r2
 8012332:	4618      	mov	r0, r3
 8012334:	f7ff ff31 	bl	801219a <uxr_get_reliable_buffer_size>
 8012338:	4603      	mov	r3, r0
 801233a:	2b00      	cmp	r3, #0
 801233c:	d11b      	bne.n	8012376 <uxr_receive_reliable_message+0xe2>
            {
                memcpy(internal_buffer, buffer, length);
 801233e:	683a      	ldr	r2, [r7, #0]
 8012340:	6879      	ldr	r1, [r7, #4]
 8012342:	6978      	ldr	r0, [r7, #20]
 8012344:	f00e fcbc 	bl	8020cc0 <memcpy>
                uxr_set_reliable_buffer_size(&stream->base, seq_num, length);
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	8979      	ldrh	r1, [r7, #10]
 801234c:	683a      	ldr	r2, [r7, #0]
 801234e:	4618      	mov	r0, r3
 8012350:	f7ff ff3f 	bl	80121d2 <uxr_set_reliable_buffer_size>
                *message_stored = true;
 8012354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012356:	2201      	movs	r2, #1
 8012358:	701a      	strb	r2, [r3, #0]

                if (NO_FRAGMENTED != fragmentation_info)
 801235a:	7efb      	ldrb	r3, [r7, #27]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d00a      	beq.n	8012376 <uxr_receive_reliable_message+0xe2>
                {
                    uxrSeqNum last;
                    if (check_last_fragment(stream, &last))
 8012360:	f107 0312 	add.w	r3, r7, #18
 8012364:	4619      	mov	r1, r3
 8012366:	68f8      	ldr	r0, [r7, #12]
 8012368:	f000 f8e2 	bl	8012530 <check_last_fragment>
 801236c:	4603      	mov	r3, r0
 801236e:	2b00      	cmp	r3, #0
 8012370:	d001      	beq.n	8012376 <uxr_receive_reliable_message+0xe2>
                    {
                        ready_to_read = true;
 8012372:	2301      	movs	r3, #1
 8012374:	77fb      	strb	r3, [r7, #31]
                }
            }
        }
    }

    if (0 > uxr_seq_num_cmp(stream->last_announced, seq_num))
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	89db      	ldrh	r3, [r3, #14]
 801237a:	897a      	ldrh	r2, [r7, #10]
 801237c:	4611      	mov	r1, r2
 801237e:	4618      	mov	r0, r3
 8012380:	f000 feac 	bl	80130dc <uxr_seq_num_cmp>
 8012384:	4603      	mov	r3, r0
 8012386:	2b00      	cmp	r3, #0
 8012388:	da02      	bge.n	8012390 <uxr_receive_reliable_message+0xfc>
    {
        stream->last_announced = seq_num;
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	897a      	ldrh	r2, [r7, #10]
 801238e:	81da      	strh	r2, [r3, #14]
    }

    return ready_to_read;
 8012390:	7ffb      	ldrb	r3, [r7, #31]
}
 8012392:	4618      	mov	r0, r3
 8012394:	3720      	adds	r7, #32
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
	...

0801239c <uxr_next_input_reliable_buffer_available>:

bool uxr_next_input_reliable_buffer_available(
        uxrInputReliableStream* stream,
        ucdrBuffer* ub,
        size_t fragment_offset)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b088      	sub	sp, #32
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	60f8      	str	r0, [r7, #12]
 80123a4:	60b9      	str	r1, [r7, #8]
 80123a6:	607a      	str	r2, [r7, #4]
    uxrSeqNum next = uxr_seq_num_add(stream->last_handled, 1);
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	899b      	ldrh	r3, [r3, #12]
 80123ac:	2101      	movs	r1, #1
 80123ae:	4618      	mov	r0, r3
 80123b0:	f000 fe70 	bl	8013094 <uxr_seq_num_add>
 80123b4:	4603      	mov	r3, r0
 80123b6:	83bb      	strh	r3, [r7, #28]
    uint8_t* internal_buffer = uxr_get_reliable_buffer(&stream->base, next);
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	8bba      	ldrh	r2, [r7, #28]
 80123bc:	4611      	mov	r1, r2
 80123be:	4618      	mov	r0, r3
 80123c0:	f7ff feb0 	bl	8012124 <uxr_get_reliable_buffer>
 80123c4:	61b8      	str	r0, [r7, #24]
    size_t length = uxr_get_reliable_buffer_size(&stream->base, next);
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	8bba      	ldrh	r2, [r7, #28]
 80123ca:	4611      	mov	r1, r2
 80123cc:	4618      	mov	r0, r3
 80123ce:	f7ff fee4 	bl	801219a <uxr_get_reliable_buffer_size>
 80123d2:	6178      	str	r0, [r7, #20]
    bool available_to_read = (0 != length);
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	bf14      	ite	ne
 80123da:	2301      	movne	r3, #1
 80123dc:	2300      	moveq	r3, #0
 80123de:	77fb      	strb	r3, [r7, #31]
    if (available_to_read)
 80123e0:	7ffb      	ldrb	r3, [r7, #31]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d03a      	beq.n	801245c <uxr_next_input_reliable_buffer_available+0xc0>
    {
        FragmentationInfo fragmentation_info = stream->on_get_fragmentation_info(internal_buffer);
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	691b      	ldr	r3, [r3, #16]
 80123ea:	69b8      	ldr	r0, [r7, #24]
 80123ec:	4798      	blx	r3
 80123ee:	4603      	mov	r3, r0
 80123f0:	74fb      	strb	r3, [r7, #19]
        if (NO_FRAGMENTED == fragmentation_info)
 80123f2:	7cfb      	ldrb	r3, [r7, #19]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d10e      	bne.n	8012416 <uxr_next_input_reliable_buffer_available+0x7a>
        {
            ucdr_init_buffer(ub, internal_buffer, (uint32_t)length);
 80123f8:	697a      	ldr	r2, [r7, #20]
 80123fa:	69b9      	ldr	r1, [r7, #24]
 80123fc:	68b8      	ldr	r0, [r7, #8]
 80123fe:	f7f7 feee 	bl	800a1de <ucdr_init_buffer>
            uxr_set_reliable_buffer_size(&stream->base, next, 0);
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	8bb9      	ldrh	r1, [r7, #28]
 8012406:	2200      	movs	r2, #0
 8012408:	4618      	mov	r0, r3
 801240a:	f7ff fee2 	bl	80121d2 <uxr_set_reliable_buffer_size>
            stream->last_handled = next;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	8bba      	ldrh	r2, [r7, #28]
 8012412:	819a      	strh	r2, [r3, #12]
 8012414:	e022      	b.n	801245c <uxr_next_input_reliable_buffer_available+0xc0>
        }
        else
        {
            uxrSeqNum last;
            available_to_read = check_last_fragment(stream, &last);
 8012416:	f107 0310 	add.w	r3, r7, #16
 801241a:	4619      	mov	r1, r3
 801241c:	68f8      	ldr	r0, [r7, #12]
 801241e:	f000 f887 	bl	8012530 <check_last_fragment>
 8012422:	4603      	mov	r3, r0
 8012424:	77fb      	strb	r3, [r7, #31]
            if (available_to_read)
 8012426:	7ffb      	ldrb	r3, [r7, #31]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d017      	beq.n	801245c <uxr_next_input_reliable_buffer_available+0xc0>
            {
                uxr_set_reliable_buffer_size(&stream->base, next, 0);
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	8bb9      	ldrh	r1, [r7, #28]
 8012430:	2200      	movs	r2, #0
 8012432:	4618      	mov	r0, r3
 8012434:	f7ff fecd 	bl	80121d2 <uxr_set_reliable_buffer_size>
                ucdr_init_buffer(ub, internal_buffer + fragment_offset, (uint32_t)(length - fragment_offset));
 8012438:	69ba      	ldr	r2, [r7, #24]
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	18d1      	adds	r1, r2, r3
 801243e:	697a      	ldr	r2, [r7, #20]
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	1ad3      	subs	r3, r2, r3
 8012444:	461a      	mov	r2, r3
 8012446:	68b8      	ldr	r0, [r7, #8]
 8012448:	f7f7 fec9 	bl	800a1de <ucdr_init_buffer>
                ucdr_set_on_full_buffer_callback(ub, on_full_input_buffer, stream);
 801244c:	68fa      	ldr	r2, [r7, #12]
 801244e:	4906      	ldr	r1, [pc, #24]	; (8012468 <uxr_next_input_reliable_buffer_available+0xcc>)
 8012450:	68b8      	ldr	r0, [r7, #8]
 8012452:	f7f7 feb2 	bl	800a1ba <ucdr_set_on_full_buffer_callback>
                stream->last_handled = last;
 8012456:	8a3a      	ldrh	r2, [r7, #16]
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	819a      	strh	r2, [r3, #12]
            }
        }
    }

    return available_to_read;
 801245c:	7ffb      	ldrb	r3, [r7, #31]
}
 801245e:	4618      	mov	r0, r3
 8012460:	3720      	adds	r7, #32
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}
 8012466:	bf00      	nop
 8012468:	08012619 	.word	0x08012619

0801246c <uxr_process_heartbeat>:

void uxr_process_heartbeat(
        uxrInputReliableStream* stream,
        uxrSeqNum first_seq_num,
        uxrSeqNum last_seq_num)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	460b      	mov	r3, r1
 8012476:	807b      	strh	r3, [r7, #2]
 8012478:	4613      	mov	r3, r2
 801247a:	803b      	strh	r3, [r7, #0]
    (void)first_seq_num;
    //TODO: Checks the first_seq_num to avoid hacks.

    if (0 > uxr_seq_num_cmp(stream->last_announced, last_seq_num))
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	89db      	ldrh	r3, [r3, #14]
 8012480:	883a      	ldrh	r2, [r7, #0]
 8012482:	4611      	mov	r1, r2
 8012484:	4618      	mov	r0, r3
 8012486:	f000 fe29 	bl	80130dc <uxr_seq_num_cmp>
 801248a:	4603      	mov	r3, r0
 801248c:	2b00      	cmp	r3, #0
 801248e:	da02      	bge.n	8012496 <uxr_process_heartbeat+0x2a>
    {
        stream->last_announced = last_seq_num;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	883a      	ldrh	r2, [r7, #0]
 8012494:	81da      	strh	r2, [r3, #14]
    }
}
 8012496:	bf00      	nop
 8012498:	3708      	adds	r7, #8
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}

0801249e <uxr_compute_acknack>:
}

uint16_t uxr_compute_acknack(
        const uxrInputReliableStream* stream,
        uxrSeqNum* from)
{
 801249e:	b590      	push	{r4, r7, lr}
 80124a0:	b087      	sub	sp, #28
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	6078      	str	r0, [r7, #4]
 80124a6:	6039      	str	r1, [r7, #0]
    *from = uxr_get_first_unacked(stream);
 80124a8:	6878      	ldr	r0, [r7, #4]
 80124aa:	f000 f885 	bl	80125b8 <uxr_get_first_unacked>
 80124ae:	4603      	mov	r3, r0
 80124b0:	461a      	mov	r2, r3
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	801a      	strh	r2, [r3, #0]
    uint16_t buffers_to_ack = uxr_seq_num_sub(stream->last_announced, uxr_seq_num_sub(*from, 1));
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	89dc      	ldrh	r4, [r3, #14]
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	881b      	ldrh	r3, [r3, #0]
 80124be:	2101      	movs	r1, #1
 80124c0:	4618      	mov	r0, r3
 80124c2:	f000 fdf9 	bl	80130b8 <uxr_seq_num_sub>
 80124c6:	4603      	mov	r3, r0
 80124c8:	4619      	mov	r1, r3
 80124ca:	4620      	mov	r0, r4
 80124cc:	f000 fdf4 	bl	80130b8 <uxr_seq_num_sub>
 80124d0:	4603      	mov	r3, r0
 80124d2:	81fb      	strh	r3, [r7, #14]
    uint16_t nack_bitmap = 0;
 80124d4:	2300      	movs	r3, #0
 80124d6:	82fb      	strh	r3, [r7, #22]

    for (size_t i = 0; i < buffers_to_ack; ++i)
 80124d8:	2300      	movs	r3, #0
 80124da:	613b      	str	r3, [r7, #16]
 80124dc:	e01f      	b.n	801251e <uxr_compute_acknack+0x80>
    {
        uxrSeqNum seq_num = uxr_seq_num_add(*from, (uxrSeqNum)i);
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	881b      	ldrh	r3, [r3, #0]
 80124e2:	693a      	ldr	r2, [r7, #16]
 80124e4:	b292      	uxth	r2, r2
 80124e6:	4611      	mov	r1, r2
 80124e8:	4618      	mov	r0, r3
 80124ea:	f000 fdd3 	bl	8013094 <uxr_seq_num_add>
 80124ee:	4603      	mov	r3, r0
 80124f0:	81bb      	strh	r3, [r7, #12]
        if (0 == uxr_get_reliable_buffer_size(&stream->base, seq_num))
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	89ba      	ldrh	r2, [r7, #12]
 80124f6:	4611      	mov	r1, r2
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7ff fe4e 	bl	801219a <uxr_get_reliable_buffer_size>
 80124fe:	4603      	mov	r3, r0
 8012500:	2b00      	cmp	r3, #0
 8012502:	d109      	bne.n	8012518 <uxr_compute_acknack+0x7a>
        {
            nack_bitmap = (uint16_t)(nack_bitmap | (1 << i));
 8012504:	2201      	movs	r2, #1
 8012506:	693b      	ldr	r3, [r7, #16]
 8012508:	fa02 f303 	lsl.w	r3, r2, r3
 801250c:	b21a      	sxth	r2, r3
 801250e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012512:	4313      	orrs	r3, r2
 8012514:	b21b      	sxth	r3, r3
 8012516:	82fb      	strh	r3, [r7, #22]
    for (size_t i = 0; i < buffers_to_ack; ++i)
 8012518:	693b      	ldr	r3, [r7, #16]
 801251a:	3301      	adds	r3, #1
 801251c:	613b      	str	r3, [r7, #16]
 801251e:	89fb      	ldrh	r3, [r7, #14]
 8012520:	693a      	ldr	r2, [r7, #16]
 8012522:	429a      	cmp	r2, r3
 8012524:	d3db      	bcc.n	80124de <uxr_compute_acknack+0x40>
        }
    }

    return nack_bitmap;
 8012526:	8afb      	ldrh	r3, [r7, #22]
}
 8012528:	4618      	mov	r0, r3
 801252a:	371c      	adds	r7, #28
 801252c:	46bd      	mov	sp, r7
 801252e:	bd90      	pop	{r4, r7, pc}

08012530 <check_last_fragment>:
//                             PRIVATE
//==================================================================
bool check_last_fragment(
        uxrInputReliableStream* stream,
        uxrSeqNum* last_fragment)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b086      	sub	sp, #24
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	6039      	str	r1, [r7, #0]
    uxrSeqNum next = stream->last_handled;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	899b      	ldrh	r3, [r3, #12]
 801253e:	82fb      	strh	r3, [r7, #22]
    bool more_messages;
    bool found = false;
 8012540:	2300      	movs	r3, #0
 8012542:	753b      	strb	r3, [r7, #20]
    do
    {
        next = uxr_seq_num_add(next, 1);
 8012544:	8afb      	ldrh	r3, [r7, #22]
 8012546:	2101      	movs	r1, #1
 8012548:	4618      	mov	r0, r3
 801254a:	f000 fda3 	bl	8013094 <uxr_seq_num_add>
 801254e:	4603      	mov	r3, r0
 8012550:	82fb      	strh	r3, [r7, #22]
        uint8_t* next_buffer = uxr_get_reliable_buffer(&stream->base, next);
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	8afa      	ldrh	r2, [r7, #22]
 8012556:	4611      	mov	r1, r2
 8012558:	4618      	mov	r0, r3
 801255a:	f7ff fde3 	bl	8012124 <uxr_get_reliable_buffer>
 801255e:	6138      	str	r0, [r7, #16]
        more_messages = (0 != uxr_get_reliable_buffer_size(&stream->base, next));
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	8afa      	ldrh	r2, [r7, #22]
 8012564:	4611      	mov	r1, r2
 8012566:	4618      	mov	r0, r3
 8012568:	f7ff fe17 	bl	801219a <uxr_get_reliable_buffer_size>
 801256c:	4603      	mov	r3, r0
 801256e:	2b00      	cmp	r3, #0
 8012570:	bf14      	ite	ne
 8012572:	2301      	movne	r3, #1
 8012574:	2300      	moveq	r3, #0
 8012576:	757b      	strb	r3, [r7, #21]
        if (more_messages)
 8012578:	7d7b      	ldrb	r3, [r7, #21]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d011      	beq.n	80125a2 <check_last_fragment+0x72>
        {
            FragmentationInfo next_fragmentation_info = stream->on_get_fragmentation_info(next_buffer);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	691b      	ldr	r3, [r3, #16]
 8012582:	6938      	ldr	r0, [r7, #16]
 8012584:	4798      	blx	r3
 8012586:	4603      	mov	r3, r0
 8012588:	73fb      	strb	r3, [r7, #15]
            more_messages = INTERMEDIATE_FRAGMENT == next_fragmentation_info;
 801258a:	7bfb      	ldrb	r3, [r7, #15]
 801258c:	2b01      	cmp	r3, #1
 801258e:	bf0c      	ite	eq
 8012590:	2301      	moveq	r3, #1
 8012592:	2300      	movne	r3, #0
 8012594:	757b      	strb	r3, [r7, #21]
            if (LAST_FRAGMENT == next_fragmentation_info)
 8012596:	7bfb      	ldrb	r3, [r7, #15]
 8012598:	2b02      	cmp	r3, #2
 801259a:	d102      	bne.n	80125a2 <check_last_fragment+0x72>
            {
                found = true;
 801259c:	2301      	movs	r3, #1
 801259e:	753b      	strb	r3, [r7, #20]
                break;
 80125a0:	e002      	b.n	80125a8 <check_last_fragment+0x78>
            }
        }
    }
    while (more_messages);
 80125a2:	7d7b      	ldrb	r3, [r7, #21]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d1cd      	bne.n	8012544 <check_last_fragment+0x14>

    *last_fragment = next;
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	8afa      	ldrh	r2, [r7, #22]
 80125ac:	801a      	strh	r2, [r3, #0]
    return found;
 80125ae:	7d3b      	ldrb	r3, [r7, #20]
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	3718      	adds	r7, #24
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}

080125b8 <uxr_get_first_unacked>:

uxrSeqNum uxr_get_first_unacked(
        const uxrInputReliableStream* stream)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b086      	sub	sp, #24
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
    uxrSeqNum first_unknown = stream->last_handled;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	899b      	ldrh	r3, [r3, #12]
 80125c4:	82fb      	strh	r3, [r7, #22]
    for (size_t i = 0; i < stream->base.history; ++i)
 80125c6:	2300      	movs	r3, #0
 80125c8:	613b      	str	r3, [r7, #16]
 80125ca:	e01a      	b.n	8012602 <uxr_get_first_unacked+0x4a>
    {
        uxrSeqNum seq_num = uxr_seq_num_add(stream->last_handled, (uint16_t)(i + 1));
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	899a      	ldrh	r2, [r3, #12]
 80125d0:	693b      	ldr	r3, [r7, #16]
 80125d2:	b29b      	uxth	r3, r3
 80125d4:	3301      	adds	r3, #1
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	4619      	mov	r1, r3
 80125da:	4610      	mov	r0, r2
 80125dc:	f000 fd5a 	bl	8013094 <uxr_seq_num_add>
 80125e0:	4603      	mov	r3, r0
 80125e2:	81fb      	strh	r3, [r7, #14]
        if (0 == uxr_get_reliable_buffer_size(&stream->base, seq_num))
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	89fa      	ldrh	r2, [r7, #14]
 80125e8:	4611      	mov	r1, r2
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7ff fdd5 	bl	801219a <uxr_get_reliable_buffer_size>
 80125f0:	4603      	mov	r3, r0
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d102      	bne.n	80125fc <uxr_get_first_unacked+0x44>
        {
            first_unknown = seq_num;
 80125f6:	89fb      	ldrh	r3, [r7, #14]
 80125f8:	82fb      	strh	r3, [r7, #22]
            break;
 80125fa:	e008      	b.n	801260e <uxr_get_first_unacked+0x56>
    for (size_t i = 0; i < stream->base.history; ++i)
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	3301      	adds	r3, #1
 8012600:	613b      	str	r3, [r7, #16]
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	891b      	ldrh	r3, [r3, #8]
 8012606:	461a      	mov	r2, r3
 8012608:	693b      	ldr	r3, [r7, #16]
 801260a:	4293      	cmp	r3, r2
 801260c:	d3de      	bcc.n	80125cc <uxr_get_first_unacked+0x14>
        }
    }

    return first_unknown;
 801260e:	8afb      	ldrh	r3, [r7, #22]
}
 8012610:	4618      	mov	r0, r3
 8012612:	3718      	adds	r7, #24
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <on_full_input_buffer>:

bool on_full_input_buffer(
        ucdrBuffer* ub,
        void* args)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b086      	sub	sp, #24
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
 8012620:	6039      	str	r1, [r7, #0]
    uxrInputReliableStream* stream = (uxrInputReliableStream*) args;
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	617b      	str	r3, [r7, #20]

    uint16_t history_position = (uint16_t)(1 + uxr_get_reliable_buffer_history_position(&stream->base, ub->init));
 8012626:	697a      	ldr	r2, [r7, #20]
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	4619      	mov	r1, r3
 801262e:	4610      	mov	r0, r2
 8012630:	f7ff fd9a 	bl	8012168 <uxr_get_reliable_buffer_history_position>
 8012634:	4603      	mov	r3, r0
 8012636:	3301      	adds	r3, #1
 8012638:	827b      	strh	r3, [r7, #18]
    uint8_t* buffer = uxr_get_reliable_buffer(&stream->base, history_position);
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	8a7a      	ldrh	r2, [r7, #18]
 801263e:	4611      	mov	r1, r2
 8012640:	4618      	mov	r0, r3
 8012642:	f7ff fd6f 	bl	8012124 <uxr_get_reliable_buffer>
 8012646:	60f8      	str	r0, [r7, #12]
    size_t buffer_size = uxr_get_reliable_buffer_size(&stream->base, history_position);
 8012648:	697b      	ldr	r3, [r7, #20]
 801264a:	8a7a      	ldrh	r2, [r7, #18]
 801264c:	4611      	mov	r1, r2
 801264e:	4618      	mov	r0, r3
 8012650:	f7ff fda3 	bl	801219a <uxr_get_reliable_buffer_size>
 8012654:	60b8      	str	r0, [r7, #8]

    if (stream->cleanup_flag)
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	7d1b      	ldrb	r3, [r3, #20]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d005      	beq.n	801266a <on_full_input_buffer+0x52>
    {
        uxr_set_reliable_buffer_size(&stream->base, history_position, 0);
 801265e:	697b      	ldr	r3, [r7, #20]
 8012660:	8a79      	ldrh	r1, [r7, #18]
 8012662:	2200      	movs	r2, #0
 8012664:	4618      	mov	r0, r3
 8012666:	f7ff fdb4 	bl	80121d2 <uxr_set_reliable_buffer_size>
    }

    // IMPORTANT: This situation only happens when stream->base.history is not power of two.
    if (buffer_size < SUBHEADER_SIZE)
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	2b03      	cmp	r3, #3
 801266e:	d801      	bhi.n	8012674 <on_full_input_buffer+0x5c>
    {
        return true;
 8012670:	2301      	movs	r3, #1
 8012672:	e00e      	b.n	8012692 <on_full_input_buffer+0x7a>
    }

    ucdr_init_buffer_origin(
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	1d19      	adds	r1, r3, #4
 8012678:	68bb      	ldr	r3, [r7, #8]
 801267a:	1f1a      	subs	r2, r3, #4
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	691b      	ldr	r3, [r3, #16]
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f7f7 fdbc 	bl	800a1fe <ucdr_init_buffer_origin>
        ub,
        buffer + SUBHEADER_SIZE,
        (uint32_t)(buffer_size - SUBHEADER_SIZE),
        ub->offset);
    ucdr_set_on_full_buffer_callback(ub, on_full_input_buffer, stream);
 8012686:	697a      	ldr	r2, [r7, #20]
 8012688:	4904      	ldr	r1, [pc, #16]	; (801269c <on_full_input_buffer+0x84>)
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f7f7 fd95 	bl	800a1ba <ucdr_set_on_full_buffer_callback>

    return false;
 8012690:	2300      	movs	r3, #0
}
 8012692:	4618      	mov	r0, r3
 8012694:	3718      	adds	r7, #24
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}
 801269a:	bf00      	nop
 801269c:	08012619 	.word	0x08012619

080126a0 <uxr_init_output_best_effort_stream>:
void uxr_init_output_best_effort_stream(
        uxrOutputBestEffortStream* stream,
        uint8_t* buffer,
        size_t size,
        uint8_t offset)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b084      	sub	sp, #16
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	60f8      	str	r0, [r7, #12]
 80126a8:	60b9      	str	r1, [r7, #8]
 80126aa:	607a      	str	r2, [r7, #4]
 80126ac:	70fb      	strb	r3, [r7, #3]
    stream->buffer = buffer;
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	68ba      	ldr	r2, [r7, #8]
 80126b2:	601a      	str	r2, [r3, #0]
    stream->offset = offset;
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	78fa      	ldrb	r2, [r7, #3]
 80126b8:	731a      	strb	r2, [r3, #12]
    stream->size = size;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	687a      	ldr	r2, [r7, #4]
 80126be:	609a      	str	r2, [r3, #8]

    UXR_INIT_LOCK(&stream->mutex);
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	3310      	adds	r3, #16
 80126c4:	4618      	mov	r0, r3
 80126c6:	f001 faa1 	bl	8013c0c <uxr_init_lock>

    uxr_reset_output_best_effort_stream(stream);
 80126ca:	68f8      	ldr	r0, [r7, #12]
 80126cc:	f000 f804 	bl	80126d8 <uxr_reset_output_best_effort_stream>
}
 80126d0:	bf00      	nop
 80126d2:	3710      	adds	r7, #16
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}

080126d8 <uxr_reset_output_best_effort_stream>:

void uxr_reset_output_best_effort_stream(
        uxrOutputBestEffortStream* stream)
{
 80126d8:	b480      	push	{r7}
 80126da:	b083      	sub	sp, #12
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
    stream->writer = stream->offset;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	7b1b      	ldrb	r3, [r3, #12]
 80126e4:	461a      	mov	r2, r3
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	605a      	str	r2, [r3, #4]
    stream->last_send = SEQ_NUM_MAX;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80126f0:	81da      	strh	r2, [r3, #14]
}
 80126f2:	bf00      	nop
 80126f4:	370c      	adds	r7, #12
 80126f6:	46bd      	mov	sp, r7
 80126f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fc:	4770      	bx	lr

080126fe <uxr_prepare_best_effort_buffer_to_write>:

bool uxr_prepare_best_effort_buffer_to_write(
        uxrOutputBestEffortStream* stream,
        size_t size,
        ucdrBuffer* ub)
{
 80126fe:	b580      	push	{r7, lr}
 8012700:	b08a      	sub	sp, #40	; 0x28
 8012702:	af02      	add	r7, sp, #8
 8012704:	60f8      	str	r0, [r7, #12]
 8012706:	60b9      	str	r1, [r7, #8]
 8012708:	607a      	str	r2, [r7, #4]

    size_t current_padding = uxr_submessage_padding(stream->writer);
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	4618      	mov	r0, r3
 8012710:	f7ff f9d7 	bl	8011ac2 <uxr_submessage_padding>
 8012714:	61f8      	str	r0, [r7, #28]
    size_t future_length = stream->writer + current_padding + size;
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	685a      	ldr	r2, [r3, #4]
 801271a:	69fb      	ldr	r3, [r7, #28]
 801271c:	4413      	add	r3, r2
 801271e:	68ba      	ldr	r2, [r7, #8]
 8012720:	4413      	add	r3, r2
 8012722:	61bb      	str	r3, [r7, #24]
    bool available_to_write = future_length <= stream->size;
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	689b      	ldr	r3, [r3, #8]
 8012728:	69ba      	ldr	r2, [r7, #24]
 801272a:	429a      	cmp	r2, r3
 801272c:	bf94      	ite	ls
 801272e:	2301      	movls	r3, #1
 8012730:	2300      	movhi	r3, #0
 8012732:	75fb      	strb	r3, [r7, #23]
    if (available_to_write)
 8012734:	7dfb      	ldrb	r3, [r7, #23]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d011      	beq.n	801275e <uxr_prepare_best_effort_buffer_to_write+0x60>
    {
        ucdr_init_buffer_origin_offset(ub, stream->buffer, (uint32_t)future_length, 0u,
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	6819      	ldr	r1, [r3, #0]
                (uint32_t)(stream->writer + current_padding));
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	685a      	ldr	r2, [r3, #4]
        ucdr_init_buffer_origin_offset(ub, stream->buffer, (uint32_t)future_length, 0u,
 8012742:	69fb      	ldr	r3, [r7, #28]
 8012744:	4413      	add	r3, r2
 8012746:	9300      	str	r3, [sp, #0]
 8012748:	2300      	movs	r3, #0
 801274a:	69ba      	ldr	r2, [r7, #24]
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f7f7 fd69 	bl	800a224 <ucdr_init_buffer_origin_offset>
        stream->writer += size;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	685a      	ldr	r2, [r3, #4]
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	441a      	add	r2, r3
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	605a      	str	r2, [r3, #4]
    }

    return available_to_write;
 801275e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012760:	4618      	mov	r0, r3
 8012762:	3720      	adds	r7, #32
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}

08012768 <uxr_prepare_best_effort_buffer_to_send>:
bool uxr_prepare_best_effort_buffer_to_send(
        uxrOutputBestEffortStream* stream,
        uint8_t** buffer,
        size_t* length,
        uint16_t* seq_num)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b086      	sub	sp, #24
 801276c:	af00      	add	r7, sp, #0
 801276e:	60f8      	str	r0, [r7, #12]
 8012770:	60b9      	str	r1, [r7, #8]
 8012772:	607a      	str	r2, [r7, #4]
 8012774:	603b      	str	r3, [r7, #0]
    bool data_to_send = stream->writer > stream->offset;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	685b      	ldr	r3, [r3, #4]
 801277a:	68fa      	ldr	r2, [r7, #12]
 801277c:	7b12      	ldrb	r2, [r2, #12]
 801277e:	4293      	cmp	r3, r2
 8012780:	bf8c      	ite	hi
 8012782:	2301      	movhi	r3, #1
 8012784:	2300      	movls	r3, #0
 8012786:	75fb      	strb	r3, [r7, #23]
    if (data_to_send)
 8012788:	7dfb      	ldrb	r3, [r7, #23]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d01a      	beq.n	80127c4 <uxr_prepare_best_effort_buffer_to_send+0x5c>
    {
        stream->last_send = uxr_seq_num_add(stream->last_send, 1);
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	89db      	ldrh	r3, [r3, #14]
 8012792:	2101      	movs	r1, #1
 8012794:	4618      	mov	r0, r3
 8012796:	f000 fc7d 	bl	8013094 <uxr_seq_num_add>
 801279a:	4603      	mov	r3, r0
 801279c:	461a      	mov	r2, r3
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	81da      	strh	r2, [r3, #14]

        *seq_num = stream->last_send;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	89da      	ldrh	r2, [r3, #14]
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	801a      	strh	r2, [r3, #0]
        *buffer = stream->buffer;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	681a      	ldr	r2, [r3, #0]
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	601a      	str	r2, [r3, #0]
        *length = stream->writer;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	685a      	ldr	r2, [r3, #4]
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	601a      	str	r2, [r3, #0]

        stream->writer = stream->offset;
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	7b1b      	ldrb	r3, [r3, #12]
 80127be:	461a      	mov	r2, r3
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	605a      	str	r2, [r3, #4]
    }

    return data_to_send;
 80127c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80127c6:	4618      	mov	r0, r3
 80127c8:	3718      	adds	r7, #24
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}

080127ce <uxr_get_reliable_buffer>:
{
 80127ce:	b480      	push	{r7}
 80127d0:	b083      	sub	sp, #12
 80127d2:	af00      	add	r7, sp, #0
 80127d4:	6078      	str	r0, [r7, #4]
 80127d6:	460b      	mov	r3, r1
 80127d8:	807b      	strh	r3, [r7, #2]
    return stream->buffer
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	6819      	ldr	r1, [r3, #0]
           + ((seq_num % stream->history) * (stream->size / stream->history))
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	891a      	ldrh	r2, [r3, #8]
 80127e2:	887b      	ldrh	r3, [r7, #2]
 80127e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80127e8:	fb00 f202 	mul.w	r2, r0, r2
 80127ec:	1a9b      	subs	r3, r3, r2
 80127ee:	b29b      	uxth	r3, r3
 80127f0:	4618      	mov	r0, r3
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	685b      	ldr	r3, [r3, #4]
 80127f6:	687a      	ldr	r2, [r7, #4]
 80127f8:	8912      	ldrh	r2, [r2, #8]
 80127fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80127fe:	fb00 f303 	mul.w	r3, r0, r3
           + INTERNAL_RELIABLE_BUFFER_OFFSET;
 8012802:	3304      	adds	r3, #4
 8012804:	440b      	add	r3, r1
}
 8012806:	4618      	mov	r0, r3
 8012808:	370c      	adds	r7, #12
 801280a:	46bd      	mov	sp, r7
 801280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012810:	4770      	bx	lr

08012812 <uxr_get_reliable_buffer_capacity>:
{
 8012812:	b480      	push	{r7}
 8012814:	b083      	sub	sp, #12
 8012816:	af00      	add	r7, sp, #0
 8012818:	6078      	str	r0, [r7, #4]
    return stream->size / stream->history - INTERNAL_RELIABLE_BUFFER_OFFSET;
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	685b      	ldr	r3, [r3, #4]
 801281e:	687a      	ldr	r2, [r7, #4]
 8012820:	8912      	ldrh	r2, [r2, #8]
 8012822:	fbb3 f3f2 	udiv	r3, r3, r2
 8012826:	3b04      	subs	r3, #4
}
 8012828:	4618      	mov	r0, r3
 801282a:	370c      	adds	r7, #12
 801282c:	46bd      	mov	sp, r7
 801282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012832:	4770      	bx	lr

08012834 <uxr_get_reliable_buffer_history_position>:
{
 8012834:	b480      	push	{r7}
 8012836:	b083      	sub	sp, #12
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	6039      	str	r1, [r7, #0]
    return (uint16_t)((size_t)(current_position - stream->buffer) / (stream->size / stream->history));
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	683a      	ldr	r2, [r7, #0]
 8012844:	1ad3      	subs	r3, r2, r3
 8012846:	4619      	mov	r1, r3
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	687a      	ldr	r2, [r7, #4]
 801284e:	8912      	ldrh	r2, [r2, #8]
 8012850:	fbb3 f3f2 	udiv	r3, r3, r2
 8012854:	fbb1 f3f3 	udiv	r3, r1, r3
 8012858:	b29b      	uxth	r3, r3
}
 801285a:	4618      	mov	r0, r3
 801285c:	370c      	adds	r7, #12
 801285e:	46bd      	mov	sp, r7
 8012860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012864:	4770      	bx	lr

08012866 <uxr_get_reliable_buffer_size>:
{
 8012866:	b580      	push	{r7, lr}
 8012868:	b084      	sub	sp, #16
 801286a:	af00      	add	r7, sp, #0
 801286c:	6078      	str	r0, [r7, #4]
 801286e:	460b      	mov	r3, r1
 8012870:	807b      	strh	r3, [r7, #2]
        uxr_get_reliable_buffer(stream, (seq_num % stream->history)) - INTERNAL_RELIABLE_BUFFER_OFFSET,
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	891a      	ldrh	r2, [r3, #8]
 8012876:	887b      	ldrh	r3, [r7, #2]
 8012878:	fbb3 f1f2 	udiv	r1, r3, r2
 801287c:	fb01 f202 	mul.w	r2, r1, r2
 8012880:	1a9b      	subs	r3, r3, r2
 8012882:	b29b      	uxth	r3, r3
 8012884:	4619      	mov	r1, r3
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f7ff ffa1 	bl	80127ce <uxr_get_reliable_buffer>
 801288c:	4603      	mov	r3, r0
 801288e:	3b04      	subs	r3, #4
 8012890:	681b      	ldr	r3, [r3, #0]
    memcpy(
 8012892:	60fb      	str	r3, [r7, #12]
    return (size_t)length;
 8012894:	68fb      	ldr	r3, [r7, #12]
}
 8012896:	4618      	mov	r0, r3
 8012898:	3710      	adds	r7, #16
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}

0801289e <uxr_set_reliable_buffer_size>:
{
 801289e:	b580      	push	{r7, lr}
 80128a0:	b086      	sub	sp, #24
 80128a2:	af00      	add	r7, sp, #0
 80128a4:	60f8      	str	r0, [r7, #12]
 80128a6:	460b      	mov	r3, r1
 80128a8:	607a      	str	r2, [r7, #4]
 80128aa:	817b      	strh	r3, [r7, #10]
    length_t temp_length = (length_t)length;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	617b      	str	r3, [r7, #20]
        uxr_get_reliable_buffer(stream, (seq_num % stream->history)) - INTERNAL_RELIABLE_BUFFER_OFFSET,
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	891a      	ldrh	r2, [r3, #8]
 80128b4:	897b      	ldrh	r3, [r7, #10]
 80128b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80128ba:	fb01 f202 	mul.w	r2, r1, r2
 80128be:	1a9b      	subs	r3, r3, r2
 80128c0:	b29b      	uxth	r3, r3
 80128c2:	4619      	mov	r1, r3
 80128c4:	68f8      	ldr	r0, [r7, #12]
 80128c6:	f7ff ff82 	bl	80127ce <uxr_get_reliable_buffer>
 80128ca:	4603      	mov	r3, r0
 80128cc:	3b04      	subs	r3, #4
 80128ce:	697a      	ldr	r2, [r7, #20]
    memcpy(
 80128d0:	601a      	str	r2, [r3, #0]
}
 80128d2:	bf00      	nop
 80128d4:	3718      	adds	r7, #24
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}

080128da <uxr_init_output_reliable_stream>:
        uxrOutputReliableStream* stream,
        uint8_t* buffer,
        size_t size,
        uint16_t history,
        uint8_t header_offset)
{
 80128da:	b580      	push	{r7, lr}
 80128dc:	b084      	sub	sp, #16
 80128de:	af00      	add	r7, sp, #0
 80128e0:	60f8      	str	r0, [r7, #12]
 80128e2:	60b9      	str	r1, [r7, #8]
 80128e4:	607a      	str	r2, [r7, #4]
 80128e6:	807b      	strh	r3, [r7, #2]
    // assert for history (must be 2^)

    stream->base.buffer = buffer;
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	68ba      	ldr	r2, [r7, #8]
 80128ec:	601a      	str	r2, [r3, #0]
    stream->base.size = size;
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	687a      	ldr	r2, [r7, #4]
 80128f2:	605a      	str	r2, [r3, #4]
    stream->base.history = history;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	887a      	ldrh	r2, [r7, #2]
 80128f8:	811a      	strh	r2, [r3, #8]
    stream->offset = header_offset;
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	7e3a      	ldrb	r2, [r7, #24]
 80128fe:	731a      	strb	r2, [r3, #12]

    UXR_INIT_LOCK(&stream->mutex);
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	3324      	adds	r3, #36	; 0x24
 8012904:	4618      	mov	r0, r3
 8012906:	f001 f981 	bl	8013c0c <uxr_init_lock>

    uxr_reset_output_reliable_stream(stream);
 801290a:	68f8      	ldr	r0, [r7, #12]
 801290c:	f000 f804 	bl	8012918 <uxr_reset_output_reliable_stream>
}
 8012910:	bf00      	nop
 8012912:	3710      	adds	r7, #16
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}

08012918 <uxr_reset_output_reliable_stream>:

void uxr_reset_output_reliable_stream(
        uxrOutputReliableStream* stream)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b084      	sub	sp, #16
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
    for (uint16_t i = 0; i < stream->base.history; ++i)
 8012920:	2300      	movs	r3, #0
 8012922:	81fb      	strh	r3, [r7, #14]
 8012924:	e00a      	b.n	801293c <uxr_reset_output_reliable_stream+0x24>
    {
        uxr_set_reliable_buffer_size(&stream->base, i, stream->offset);
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	7b1b      	ldrb	r3, [r3, #12]
 801292c:	461a      	mov	r2, r3
 801292e:	89fb      	ldrh	r3, [r7, #14]
 8012930:	4619      	mov	r1, r3
 8012932:	f7ff ffb4 	bl	801289e <uxr_set_reliable_buffer_size>
    for (uint16_t i = 0; i < stream->base.history; ++i)
 8012936:	89fb      	ldrh	r3, [r7, #14]
 8012938:	3301      	adds	r3, #1
 801293a:	81fb      	strh	r3, [r7, #14]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	891b      	ldrh	r3, [r3, #8]
 8012940:	89fa      	ldrh	r2, [r7, #14]
 8012942:	429a      	cmp	r2, r3
 8012944:	d3ef      	bcc.n	8012926 <uxr_reset_output_reliable_stream+0xe>
    }

    stream->last_written = 0;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	2200      	movs	r2, #0
 801294a:	81da      	strh	r2, [r3, #14]
    stream->last_sent = SEQ_NUM_MAX;
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012952:	821a      	strh	r2, [r3, #16]
    stream->last_acknown = SEQ_NUM_MAX;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801295a:	825a      	strh	r2, [r3, #18]

    stream->next_heartbeat_timestamp = INT64_MAX;
 801295c:	6879      	ldr	r1, [r7, #4]
 801295e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012962:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012966:	e9c1 2306 	strd	r2, r3, [r1, #24]
    stream->next_heartbeat_tries = 0;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2200      	movs	r2, #0
 801296e:	f883 2020 	strb.w	r2, [r3, #32]
    stream->send_lost = false;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2200      	movs	r2, #0
 8012976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 801297a:	bf00      	nop
 801297c:	3710      	adds	r7, #16
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}
	...

08012984 <uxr_prepare_reliable_buffer_to_write>:

bool uxr_prepare_reliable_buffer_to_write(
        uxrOutputReliableStream* stream,
        size_t length,
        ucdrBuffer* ub)
{
 8012984:	b590      	push	{r4, r7, lr}
 8012986:	b09d      	sub	sp, #116	; 0x74
 8012988:	af02      	add	r7, sp, #8
 801298a:	60f8      	str	r0, [r7, #12]
 801298c:	60b9      	str	r1, [r7, #8]
 801298e:	607a      	str	r2, [r7, #4]
    bool available_to_write = false;
 8012990:	2300      	movs	r3, #0
 8012992:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uxrSeqNum seq_num = stream->last_written;
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	89db      	ldrh	r3, [r3, #14]
 801299a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    size_t buffer_capacity = uxr_get_reliable_buffer_capacity(&stream->base);
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7ff ff36 	bl	8012812 <uxr_get_reliable_buffer_capacity>
 80129a6:	64f8      	str	r0, [r7, #76]	; 0x4c
    uint8_t* buffer = uxr_get_reliable_buffer(&stream->base, seq_num);
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80129ae:	4611      	mov	r1, r2
 80129b0:	4618      	mov	r0, r3
 80129b2:	f7ff ff0c 	bl	80127ce <uxr_get_reliable_buffer>
 80129b6:	6638      	str	r0, [r7, #96]	; 0x60
    size_t buffer_size = uxr_get_reliable_buffer_size(&stream->base, seq_num);
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80129be:	4611      	mov	r1, r2
 80129c0:	4618      	mov	r0, r3
 80129c2:	f7ff ff50 	bl	8012866 <uxr_get_reliable_buffer_size>
 80129c6:	65f8      	str	r0, [r7, #92]	; 0x5c

    // Aligment required for inserting an XRCE subheader
    buffer_size += ucdr_alignment(buffer_size, 4);
 80129c8:	2104      	movs	r1, #4
 80129ca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80129cc:	f7f7 fc9a 	bl	800a304 <ucdr_alignment>
 80129d0:	4602      	mov	r2, r0
 80129d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80129d4:	4413      	add	r3, r2
 80129d6:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Check if the message fit in the current buffer */
    if (buffer_size + length <= buffer_capacity)
 80129d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80129da:	68bb      	ldr	r3, [r7, #8]
 80129dc:	4413      	add	r3, r2
 80129de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80129e0:	429a      	cmp	r2, r3
 80129e2:	d330      	bcc.n	8012a46 <uxr_prepare_reliable_buffer_to_write+0xc2>
    {
        /* Check if there is space in the stream history to write */
        uxrSeqNum last_available = uxr_seq_num_add(stream->last_acknown, stream->base.history);
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	8a5a      	ldrh	r2, [r3, #18]
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	891b      	ldrh	r3, [r3, #8]
 80129ec:	4619      	mov	r1, r3
 80129ee:	4610      	mov	r0, r2
 80129f0:	f000 fb50 	bl	8013094 <uxr_seq_num_add>
 80129f4:	4603      	mov	r3, r0
 80129f6:	86fb      	strh	r3, [r7, #54]	; 0x36
        available_to_write = (0 >= uxr_seq_num_cmp(seq_num, last_available));
 80129f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80129fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80129fe:	4611      	mov	r1, r2
 8012a00:	4618      	mov	r0, r3
 8012a02:	f000 fb6b 	bl	80130dc <uxr_seq_num_cmp>
 8012a06:	4603      	mov	r3, r0
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	bfd4      	ite	le
 8012a0c:	2301      	movle	r3, #1
 8012a0e:	2300      	movgt	r3, #0
 8012a10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if (available_to_write)
 8012a14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	f000 815d 	beq.w	8012cd8 <uxr_prepare_reliable_buffer_to_write+0x354>
        {
            size_t final_buffer_size = buffer_size + length;
 8012a1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	4413      	add	r3, r2
 8012a24:	633b      	str	r3, [r7, #48]	; 0x30
            uxr_set_reliable_buffer_size(&stream->base, seq_num, final_buffer_size);
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8012a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f7ff ff35 	bl	801289e <uxr_set_reliable_buffer_size>
            ucdr_init_buffer_origin_offset(ub, buffer, (uint32_t)final_buffer_size, 0u, (uint32_t)buffer_size);
 8012a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a36:	9300      	str	r3, [sp, #0]
 8012a38:	2300      	movs	r3, #0
 8012a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a3c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f7f7 fbf0 	bl	800a224 <ucdr_init_buffer_origin_offset>
 8012a44:	e148      	b.n	8012cd8 <uxr_prepare_reliable_buffer_to_write+0x354>
        }
    }
    /* Check if the message fit in a new empty buffer */
    else if (stream->offset + length <= buffer_capacity)
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	7b1b      	ldrb	r3, [r3, #12]
 8012a4a:	461a      	mov	r2, r3
 8012a4c:	68bb      	ldr	r3, [r7, #8]
 8012a4e:	4413      	add	r3, r2
 8012a50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d348      	bcc.n	8012ae8 <uxr_prepare_reliable_buffer_to_write+0x164>
    {
        /* Check if there is space in the stream history to write */
        seq_num = uxr_seq_num_add(stream->last_written, 1);
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	89db      	ldrh	r3, [r3, #14]
 8012a5a:	2101      	movs	r1, #1
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f000 fb19 	bl	8013094 <uxr_seq_num_add>
 8012a62:	4603      	mov	r3, r0
 8012a64:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        uxrSeqNum last_available = uxr_seq_num_add(stream->last_acknown, stream->base.history);
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	8a5a      	ldrh	r2, [r3, #18]
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	891b      	ldrh	r3, [r3, #8]
 8012a70:	4619      	mov	r1, r3
 8012a72:	4610      	mov	r0, r2
 8012a74:	f000 fb0e 	bl	8013094 <uxr_seq_num_add>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        available_to_write = (0 >= uxr_seq_num_cmp(seq_num, last_available));
 8012a7c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012a7e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8012a82:	4611      	mov	r1, r2
 8012a84:	4618      	mov	r0, r3
 8012a86:	f000 fb29 	bl	80130dc <uxr_seq_num_cmp>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	bfd4      	ite	le
 8012a90:	2301      	movle	r3, #1
 8012a92:	2300      	movgt	r3, #0
 8012a94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if (available_to_write)
 8012a98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	f000 811b 	beq.w	8012cd8 <uxr_prepare_reliable_buffer_to_write+0x354>
        {
            buffer = uxr_get_reliable_buffer(&stream->base, seq_num);
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8012aa8:	4611      	mov	r1, r2
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7ff fe8f 	bl	80127ce <uxr_get_reliable_buffer>
 8012ab0:	6638      	str	r0, [r7, #96]	; 0x60
            size_t final_buffer_size = stream->offset + length;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	7b1b      	ldrb	r3, [r3, #12]
 8012ab6:	461a      	mov	r2, r3
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	4413      	add	r3, r2
 8012abc:	63bb      	str	r3, [r7, #56]	; 0x38
            uxr_set_reliable_buffer_size(&stream->base, seq_num, final_buffer_size);
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8012ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f7ff fee9 	bl	801289e <uxr_set_reliable_buffer_size>
            ucdr_init_buffer_origin_offset(ub, buffer, (uint32_t)final_buffer_size, 0u, stream->offset);
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	7b1b      	ldrb	r3, [r3, #12]
 8012ad0:	9300      	str	r3, [sp, #0]
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ad6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f7f7 fba3 	bl	800a224 <ucdr_init_buffer_origin_offset>
            stream->last_written = seq_num;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8012ae4:	81da      	strh	r2, [r3, #14]
 8012ae6:	e0f7      	b.n	8012cd8 <uxr_prepare_reliable_buffer_to_write+0x354>
    }
    /* Check if the message fit in a fragmented message */
    else
    {
        /* Check if the current buffer free space is too small */
        if (buffer_size + (size_t)SUBHEADER_SIZE >= buffer_capacity)
 8012ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012aea:	3304      	adds	r3, #4
 8012aec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d818      	bhi.n	8012b24 <uxr_prepare_reliable_buffer_to_write+0x1a0>
        {
            seq_num = uxr_seq_num_add(seq_num, 1);
 8012af2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8012af6:	2101      	movs	r1, #1
 8012af8:	4618      	mov	r0, r3
 8012afa:	f000 facb 	bl	8013094 <uxr_seq_num_add>
 8012afe:	4603      	mov	r3, r0
 8012b00:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
            buffer = uxr_get_reliable_buffer(&stream->base, seq_num);
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8012b0a:	4611      	mov	r1, r2
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f7ff fe5e 	bl	80127ce <uxr_get_reliable_buffer>
 8012b12:	6638      	str	r0, [r7, #96]	; 0x60
            buffer_size = uxr_get_reliable_buffer_size(&stream->base, seq_num);
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8012b1a:	4611      	mov	r1, r2
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	f7ff fea2 	bl	8012866 <uxr_get_reliable_buffer_size>
 8012b22:	65f8      	str	r0, [r7, #92]	; 0x5c
        }

        size_t remaining_blocks = get_available_free_slots(stream);
 8012b24:	68f8      	ldr	r0, [r7, #12]
 8012b26:	f000 fa91 	bl	801304c <get_available_free_slots>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	64bb      	str	r3, [r7, #72]	; 0x48

        uint16_t available_block_size = (uint16_t)(buffer_capacity - (uint16_t)(stream->offset + SUBHEADER_SIZE));
 8012b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b30:	b29a      	uxth	r2, r3
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	7b1b      	ldrb	r3, [r3, #12]
 8012b36:	b29b      	uxth	r3, r3
 8012b38:	1ad3      	subs	r3, r2, r3
 8012b3a:	b29b      	uxth	r3, r3
 8012b3c:	3b04      	subs	r3, #4
 8012b3e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        uint16_t first_fragment_size = (uint16_t)(buffer_capacity - (uint16_t)(buffer_size + SUBHEADER_SIZE));
 8012b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b44:	b29a      	uxth	r2, r3
 8012b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012b48:	b29b      	uxth	r3, r3
 8012b4a:	1ad3      	subs	r3, r2, r3
 8012b4c:	b29b      	uxth	r3, r3
 8012b4e:	3b04      	subs	r3, #4
 8012b50:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        size_t remaining_size = length - first_fragment_size;
 8012b54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012b58:	68ba      	ldr	r2, [r7, #8]
 8012b5a:	1ad3      	subs	r3, r2, r3
 8012b5c:	643b      	str	r3, [r7, #64]	; 0x40
        size_t last_fragment_size;
        uint16_t necessary_complete_blocks;
        if (0 == (remaining_size % available_block_size))
 8012b5e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b64:	fbb3 f1f2 	udiv	r1, r3, r2
 8012b68:	fb01 f202 	mul.w	r2, r1, r2
 8012b6c:	1a9b      	subs	r3, r3, r2
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d10a      	bne.n	8012b88 <uxr_prepare_reliable_buffer_to_write+0x204>
        {
            last_fragment_size = available_block_size;
 8012b72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012b76:	65bb      	str	r3, [r7, #88]	; 0x58
            necessary_complete_blocks = (uint16_t)((remaining_size / available_block_size));
 8012b78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012b7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b82:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8012b86:	e011      	b.n	8012bac <uxr_prepare_reliable_buffer_to_write+0x228>
        }
        else
        {
            last_fragment_size = remaining_size % available_block_size;
 8012b88:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012b92:	fb01 f202 	mul.w	r2, r1, r2
 8012b96:	1a9b      	subs	r3, r3, r2
 8012b98:	65bb      	str	r3, [r7, #88]	; 0x58
            necessary_complete_blocks = (uint16_t)((remaining_size / available_block_size) + 1);
 8012b9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012b9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ba4:	b29b      	uxth	r3, r3
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        }

        available_to_write = necessary_complete_blocks <= remaining_blocks;
 8012bac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	bf2c      	ite	cs
 8012bb6:	2301      	movcs	r3, #1
 8012bb8:	2300      	movcc	r3, #0
 8012bba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if (available_to_write)
 8012bbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	f000 8088 	beq.w	8012cd8 <uxr_prepare_reliable_buffer_to_write+0x354>
        {
            ucdrBuffer temp_ub;
            uint16_t fragment_size = first_fragment_size;
 8012bc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012bcc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            for (uint16_t i = 0; i < necessary_complete_blocks; i++)
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8012bd6:	e038      	b.n	8012c4a <uxr_prepare_reliable_buffer_to_write+0x2c6>
            {
                ucdr_init_buffer_origin_offset(
                    &temp_ub,
                    uxr_get_reliable_buffer(&stream->base, seq_num),
 8012bd8:	68fb      	ldr	r3, [r7, #12]
                ucdr_init_buffer_origin_offset(
 8012bda:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8012bde:	4611      	mov	r1, r2
 8012be0:	4618      	mov	r0, r3
 8012be2:	f7ff fdf4 	bl	80127ce <uxr_get_reliable_buffer>
 8012be6:	4604      	mov	r4, r0
                    buffer_capacity,
                    0u,
                    uxr_get_reliable_buffer_size(&stream->base, seq_num));
 8012be8:	68fb      	ldr	r3, [r7, #12]
                ucdr_init_buffer_origin_offset(
 8012bea:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8012bee:	4611      	mov	r1, r2
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f7ff fe38 	bl	8012866 <uxr_get_reliable_buffer_size>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	f107 0010 	add.w	r0, r7, #16
 8012bfc:	9300      	str	r3, [sp, #0]
 8012bfe:	2300      	movs	r3, #0
 8012c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c02:	4621      	mov	r1, r4
 8012c04:	f7f7 fb0e 	bl	800a224 <ucdr_init_buffer_origin_offset>
                uxr_buffer_submessage_header(&temp_ub, SUBMESSAGE_ID_FRAGMENT, fragment_size, 0);
 8012c08:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8012c0c:	f107 0010 	add.w	r0, r7, #16
 8012c10:	2300      	movs	r3, #0
 8012c12:	210d      	movs	r1, #13
 8012c14:	f7fe feec 	bl	80119f0 <uxr_buffer_submessage_header>
                uxr_set_reliable_buffer_size(&stream->base, seq_num, buffer_capacity);
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8012c1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7ff fe3c 	bl	801289e <uxr_set_reliable_buffer_size>
                seq_num = uxr_seq_num_add(seq_num, 1);
 8012c26:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8012c2a:	2101      	movs	r1, #1
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f000 fa31 	bl	8013094 <uxr_seq_num_add>
 8012c32:	4603      	mov	r3, r0
 8012c34:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
                fragment_size = available_block_size;
 8012c38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012c3c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            for (uint16_t i = 0; i < necessary_complete_blocks; i++)
 8012c40:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8012c44:	3301      	adds	r3, #1
 8012c46:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8012c4a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8012c4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d3c0      	bcc.n	8012bd8 <uxr_prepare_reliable_buffer_to_write+0x254>
            }

            //  Prepare last fragment
            ucdr_init_buffer_origin_offset(
                &temp_ub,
                uxr_get_reliable_buffer(&stream->base, seq_num),
 8012c56:	68fb      	ldr	r3, [r7, #12]
            ucdr_init_buffer_origin_offset(
 8012c58:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8012c5c:	4611      	mov	r1, r2
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7ff fdb5 	bl	80127ce <uxr_get_reliable_buffer>
 8012c64:	4604      	mov	r4, r0
                buffer_capacity,
                0u,
                uxr_get_reliable_buffer_size(&stream->base, seq_num));
 8012c66:	68fb      	ldr	r3, [r7, #12]
            ucdr_init_buffer_origin_offset(
 8012c68:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8012c6c:	4611      	mov	r1, r2
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7ff fdf9 	bl	8012866 <uxr_get_reliable_buffer_size>
 8012c74:	4603      	mov	r3, r0
 8012c76:	f107 0010 	add.w	r0, r7, #16
 8012c7a:	9300      	str	r3, [sp, #0]
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c80:	4621      	mov	r1, r4
 8012c82:	f7f7 facf 	bl	800a224 <ucdr_init_buffer_origin_offset>
            uxr_buffer_submessage_header(&temp_ub, SUBMESSAGE_ID_FRAGMENT, (uint16_t)last_fragment_size,
 8012c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012c88:	b29a      	uxth	r2, r3
 8012c8a:	f107 0010 	add.w	r0, r7, #16
 8012c8e:	2302      	movs	r3, #2
 8012c90:	210d      	movs	r1, #13
 8012c92:	f7fe fead 	bl	80119f0 <uxr_buffer_submessage_header>
                    FLAG_LAST_FRAGMENT);
            uxr_set_reliable_buffer_size(&stream->base, seq_num,
 8012c96:	68f8      	ldr	r0, [r7, #12]
                    stream->offset + (size_t)(SUBHEADER_SIZE) + last_fragment_size);
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	7b1b      	ldrb	r3, [r3, #12]
 8012c9c:	461a      	mov	r2, r3
 8012c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ca0:	4413      	add	r3, r2
            uxr_set_reliable_buffer_size(&stream->base, seq_num,
 8012ca2:	1d1a      	adds	r2, r3, #4
 8012ca4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8012ca8:	4619      	mov	r1, r3
 8012caa:	f7ff fdf8 	bl	801289e <uxr_set_reliable_buffer_size>

            // Prepare user buffer
            ucdr_init_buffer(
                ub,
                buffer + buffer_size + SUBHEADER_SIZE,
 8012cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012cb0:	3304      	adds	r3, #4
            ucdr_init_buffer(
 8012cb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012cb4:	18d1      	adds	r1, r2, r3
                (uint32_t)(buffer_capacity - buffer_size - SUBHEADER_SIZE));
 8012cb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012cba:	1ad3      	subs	r3, r2, r3
            ucdr_init_buffer(
 8012cbc:	3b04      	subs	r3, #4
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f7f7 fa8c 	bl	800a1de <ucdr_init_buffer>
            ucdr_set_on_full_buffer_callback(ub, on_full_output_buffer, stream);
 8012cc6:	68fa      	ldr	r2, [r7, #12]
 8012cc8:	4906      	ldr	r1, [pc, #24]	; (8012ce4 <uxr_prepare_reliable_buffer_to_write+0x360>)
 8012cca:	6878      	ldr	r0, [r7, #4]
 8012ccc:	f7f7 fa75 	bl	800a1ba <ucdr_set_on_full_buffer_callback>
            stream->last_written = seq_num;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8012cd6:	81da      	strh	r2, [r3, #14]
        }
    }

    return available_to_write;
 8012cd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8012cdc:	4618      	mov	r0, r3
 8012cde:	376c      	adds	r7, #108	; 0x6c
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bd90      	pop	{r4, r7, pc}
 8012ce4:	08012fd5 	.word	0x08012fd5

08012ce8 <uxr_prepare_next_reliable_buffer_to_send>:
bool uxr_prepare_next_reliable_buffer_to_send(
        uxrOutputReliableStream* stream,
        uint8_t** buffer,
        size_t* length,
        uxrSeqNum* seq_num)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b086      	sub	sp, #24
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	60f8      	str	r0, [r7, #12]
 8012cf0:	60b9      	str	r1, [r7, #8]
 8012cf2:	607a      	str	r2, [r7, #4]
 8012cf4:	603b      	str	r3, [r7, #0]
    *seq_num = uxr_seq_num_add(stream->last_sent, 1);
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	8a1b      	ldrh	r3, [r3, #16]
 8012cfa:	2101      	movs	r1, #1
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f000 f9c9 	bl	8013094 <uxr_seq_num_add>
 8012d02:	4603      	mov	r3, r0
 8012d04:	461a      	mov	r2, r3
 8012d06:	683b      	ldr	r3, [r7, #0]
 8012d08:	801a      	strh	r2, [r3, #0]
    *buffer = uxr_get_reliable_buffer(&stream->base, *seq_num);
 8012d0a:	68fa      	ldr	r2, [r7, #12]
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	881b      	ldrh	r3, [r3, #0]
 8012d10:	4619      	mov	r1, r3
 8012d12:	4610      	mov	r0, r2
 8012d14:	f7ff fd5b 	bl	80127ce <uxr_get_reliable_buffer>
 8012d18:	4602      	mov	r2, r0
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	601a      	str	r2, [r3, #0]
    *length = uxr_get_reliable_buffer_size(&stream->base, *seq_num);
 8012d1e:	68fa      	ldr	r2, [r7, #12]
 8012d20:	683b      	ldr	r3, [r7, #0]
 8012d22:	881b      	ldrh	r3, [r3, #0]
 8012d24:	4619      	mov	r1, r3
 8012d26:	4610      	mov	r0, r2
 8012d28:	f7ff fd9d 	bl	8012866 <uxr_get_reliable_buffer_size>
 8012d2c:	4602      	mov	r2, r0
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	601a      	str	r2, [r3, #0]

    bool data_to_send = 0 >= uxr_seq_num_cmp(*seq_num, stream->last_written)
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	881a      	ldrh	r2, [r3, #0]
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	89db      	ldrh	r3, [r3, #14]
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	4610      	mov	r0, r2
 8012d3e:	f000 f9cd 	bl	80130dc <uxr_seq_num_cmp>
 8012d42:	4603      	mov	r3, r0
            && *length > stream->offset
            && uxr_seq_num_sub(stream->last_sent, stream->last_acknown) != stream->base.history;
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	dc15      	bgt.n	8012d74 <uxr_prepare_next_reliable_buffer_to_send+0x8c>
            && *length > stream->offset
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	68fa      	ldr	r2, [r7, #12]
 8012d4e:	7b12      	ldrb	r2, [r2, #12]
 8012d50:	4293      	cmp	r3, r2
 8012d52:	d90f      	bls.n	8012d74 <uxr_prepare_next_reliable_buffer_to_send+0x8c>
            && uxr_seq_num_sub(stream->last_sent, stream->last_acknown) != stream->base.history;
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	8a1a      	ldrh	r2, [r3, #16]
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	8a5b      	ldrh	r3, [r3, #18]
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	4610      	mov	r0, r2
 8012d60:	f000 f9aa 	bl	80130b8 <uxr_seq_num_sub>
 8012d64:	4603      	mov	r3, r0
 8012d66:	461a      	mov	r2, r3
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	891b      	ldrh	r3, [r3, #8]
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	d001      	beq.n	8012d74 <uxr_prepare_next_reliable_buffer_to_send+0x8c>
 8012d70:	2301      	movs	r3, #1
 8012d72:	e000      	b.n	8012d76 <uxr_prepare_next_reliable_buffer_to_send+0x8e>
 8012d74:	2300      	movs	r3, #0
    bool data_to_send = 0 >= uxr_seq_num_cmp(*seq_num, stream->last_written)
 8012d76:	75fb      	strb	r3, [r7, #23]
 8012d78:	7dfb      	ldrb	r3, [r7, #23]
 8012d7a:	f003 0301 	and.w	r3, r3, #1
 8012d7e:	75fb      	strb	r3, [r7, #23]
    if (data_to_send)
 8012d80:	7dfb      	ldrb	r3, [r7, #23]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d013      	beq.n	8012dae <uxr_prepare_next_reliable_buffer_to_send+0xc6>
    {
        stream->last_sent = *seq_num;
 8012d86:	683b      	ldr	r3, [r7, #0]
 8012d88:	881a      	ldrh	r2, [r3, #0]
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	821a      	strh	r2, [r3, #16]
        if (stream->last_sent == stream->last_written)
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	8a1a      	ldrh	r2, [r3, #16]
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	89db      	ldrh	r3, [r3, #14]
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d109      	bne.n	8012dae <uxr_prepare_next_reliable_buffer_to_send+0xc6>
        {
            stream->last_written = uxr_seq_num_add(stream->last_written, 1);
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	89db      	ldrh	r3, [r3, #14]
 8012d9e:	2101      	movs	r1, #1
 8012da0:	4618      	mov	r0, r3
 8012da2:	f000 f977 	bl	8013094 <uxr_seq_num_add>
 8012da6:	4603      	mov	r3, r0
 8012da8:	461a      	mov	r2, r3
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	81da      	strh	r2, [r3, #14]
        }
    }

    return data_to_send;
 8012dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3718      	adds	r7, #24
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}

08012db8 <uxr_update_output_stream_heartbeat_timestamp>:

bool uxr_update_output_stream_heartbeat_timestamp(
        uxrOutputReliableStream* stream,
        int64_t current_timestamp)
{
 8012db8:	b5b0      	push	{r4, r5, r7, lr}
 8012dba:	b086      	sub	sp, #24
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	60f8      	str	r0, [r7, #12]
 8012dc0:	e9c7 2300 	strd	r2, r3, [r7]
    bool must_confirm = false;
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	75fb      	strb	r3, [r7, #23]
    if (0 > uxr_seq_num_cmp(stream->last_acknown, stream->last_sent))
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	8a5a      	ldrh	r2, [r3, #18]
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	8a1b      	ldrh	r3, [r3, #16]
 8012dd0:	4619      	mov	r1, r3
 8012dd2:	4610      	mov	r0, r2
 8012dd4:	f000 f982 	bl	80130dc <uxr_seq_num_cmp>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	da26      	bge.n	8012e2c <uxr_update_output_stream_heartbeat_timestamp+0x74>
    {
        if (0 == stream->next_heartbeat_tries)
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d104      	bne.n	8012df2 <uxr_update_output_stream_heartbeat_timestamp+0x3a>
        {
            stream->next_heartbeat_tries = 1;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	2201      	movs	r2, #1
 8012dec:	f883 2020 	strb.w	r2, [r3, #32]
 8012df0:	e012      	b.n	8012e18 <uxr_update_output_stream_heartbeat_timestamp+0x60>
        }
        else if (current_timestamp >= stream->next_heartbeat_timestamp)
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8012df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012dfc:	4290      	cmp	r0, r2
 8012dfe:	eb71 0303 	sbcs.w	r3, r1, r3
 8012e02:	db09      	blt.n	8012e18 <uxr_update_output_stream_heartbeat_timestamp+0x60>
        {
            stream->next_heartbeat_tries++;
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e0a:	3301      	adds	r3, #1
 8012e0c:	b2da      	uxtb	r2, r3
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	f883 2020 	strb.w	r2, [r3, #32]
            must_confirm = true;
 8012e14:	2301      	movs	r3, #1
 8012e16:	75fb      	strb	r3, [r7, #23]
        }

        stream->next_heartbeat_timestamp = current_timestamp + MIN_HEARTBEAT_TIME_INTERVAL;
 8012e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012e1c:	f112 0464 	adds.w	r4, r2, #100	; 0x64
 8012e20:	f143 0500 	adc.w	r5, r3, #0
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	e9c3 4506 	strd	r4, r5, [r3, #24]
 8012e2a:	e006      	b.n	8012e3a <uxr_update_output_stream_heartbeat_timestamp+0x82>
    }
    else
    {
        stream->next_heartbeat_timestamp = INT64_MAX;
 8012e2c:	68f9      	ldr	r1, [r7, #12]
 8012e2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e32:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012e36:	e9c1 2306 	strd	r2, r3, [r1, #24]
    }

    return must_confirm;
 8012e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	3718      	adds	r7, #24
 8012e40:	46bd      	mov	sp, r7
 8012e42:	bdb0      	pop	{r4, r5, r7, pc}

08012e44 <uxr_begin_output_nack_buffer_it>:

uxrSeqNum uxr_begin_output_nack_buffer_it(
        const uxrOutputReliableStream* stream)
{
 8012e44:	b480      	push	{r7}
 8012e46:	b083      	sub	sp, #12
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
    return stream->last_acknown;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	8a5b      	ldrh	r3, [r3, #18]
}
 8012e50:	4618      	mov	r0, r3
 8012e52:	370c      	adds	r7, #12
 8012e54:	46bd      	mov	sp, r7
 8012e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5a:	4770      	bx	lr

08012e5c <uxr_next_reliable_nack_buffer_to_send>:
bool uxr_next_reliable_nack_buffer_to_send(
        uxrOutputReliableStream* stream,
        uint8_t** buffer,
        size_t* length,
        uxrSeqNum* seq_num_it)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b086      	sub	sp, #24
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	60f8      	str	r0, [r7, #12]
 8012e64:	60b9      	str	r1, [r7, #8]
 8012e66:	607a      	str	r2, [r7, #4]
 8012e68:	603b      	str	r3, [r7, #0]
    bool it_updated = false;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	75fb      	strb	r3, [r7, #23]
    if (stream->send_lost)
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d04d      	beq.n	8012f14 <uxr_next_reliable_nack_buffer_to_send+0xb8>
    {
        bool check_next_buffer = true;
 8012e78:	2301      	movs	r3, #1
 8012e7a:	75bb      	strb	r3, [r7, #22]
        while (check_next_buffer && !it_updated)
 8012e7c:	e037      	b.n	8012eee <uxr_next_reliable_nack_buffer_to_send+0x92>
        {
            *seq_num_it = uxr_seq_num_add(*seq_num_it, 1);
 8012e7e:	683b      	ldr	r3, [r7, #0]
 8012e80:	881b      	ldrh	r3, [r3, #0]
 8012e82:	2101      	movs	r1, #1
 8012e84:	4618      	mov	r0, r3
 8012e86:	f000 f905 	bl	8013094 <uxr_seq_num_add>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	461a      	mov	r2, r3
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	801a      	strh	r2, [r3, #0]
            check_next_buffer = 0 >= uxr_seq_num_cmp(*seq_num_it, stream->last_sent);
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	881a      	ldrh	r2, [r3, #0]
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	8a1b      	ldrh	r3, [r3, #16]
 8012e9a:	4619      	mov	r1, r3
 8012e9c:	4610      	mov	r0, r2
 8012e9e:	f000 f91d 	bl	80130dc <uxr_seq_num_cmp>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	bfd4      	ite	le
 8012ea8:	2301      	movle	r3, #1
 8012eaa:	2300      	movgt	r3, #0
 8012eac:	75bb      	strb	r3, [r7, #22]
            if (check_next_buffer)
 8012eae:	7dbb      	ldrb	r3, [r7, #22]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d01c      	beq.n	8012eee <uxr_next_reliable_nack_buffer_to_send+0x92>
            {
                *buffer = uxr_get_reliable_buffer(&stream->base, *seq_num_it);
 8012eb4:	68fa      	ldr	r2, [r7, #12]
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	881b      	ldrh	r3, [r3, #0]
 8012eba:	4619      	mov	r1, r3
 8012ebc:	4610      	mov	r0, r2
 8012ebe:	f7ff fc86 	bl	80127ce <uxr_get_reliable_buffer>
 8012ec2:	4602      	mov	r2, r0
 8012ec4:	68bb      	ldr	r3, [r7, #8]
 8012ec6:	601a      	str	r2, [r3, #0]
                *length = uxr_get_reliable_buffer_size(&stream->base, *seq_num_it);
 8012ec8:	68fa      	ldr	r2, [r7, #12]
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	881b      	ldrh	r3, [r3, #0]
 8012ece:	4619      	mov	r1, r3
 8012ed0:	4610      	mov	r0, r2
 8012ed2:	f7ff fcc8 	bl	8012866 <uxr_get_reliable_buffer_size>
 8012ed6:	4602      	mov	r2, r0
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	601a      	str	r2, [r3, #0]
                it_updated = *length != stream->offset;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	68fa      	ldr	r2, [r7, #12]
 8012ee2:	7b12      	ldrb	r2, [r2, #12]
 8012ee4:	4293      	cmp	r3, r2
 8012ee6:	bf14      	ite	ne
 8012ee8:	2301      	movne	r3, #1
 8012eea:	2300      	moveq	r3, #0
 8012eec:	75fb      	strb	r3, [r7, #23]
        while (check_next_buffer && !it_updated)
 8012eee:	7dbb      	ldrb	r3, [r7, #22]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d005      	beq.n	8012f00 <uxr_next_reliable_nack_buffer_to_send+0xa4>
 8012ef4:	7dfb      	ldrb	r3, [r7, #23]
 8012ef6:	f083 0301 	eor.w	r3, r3, #1
 8012efa:	b2db      	uxtb	r3, r3
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d1be      	bne.n	8012e7e <uxr_next_reliable_nack_buffer_to_send+0x22>
            }
        }

        if (!it_updated)
 8012f00:	7dfb      	ldrb	r3, [r7, #23]
 8012f02:	f083 0301 	eor.w	r3, r3, #1
 8012f06:	b2db      	uxtb	r3, r3
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d003      	beq.n	8012f14 <uxr_next_reliable_nack_buffer_to_send+0xb8>
        {
            stream->send_lost = false;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	2200      	movs	r2, #0
 8012f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
    }

    return it_updated;
 8012f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f16:	4618      	mov	r0, r3
 8012f18:	3718      	adds	r7, #24
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}

08012f1e <uxr_process_acknack>:

void uxr_process_acknack(
        uxrOutputReliableStream* stream,
        uint16_t bitmap,
        uxrSeqNum first_unacked_seq_num)
{
 8012f1e:	b580      	push	{r7, lr}
 8012f20:	b086      	sub	sp, #24
 8012f22:	af00      	add	r7, sp, #0
 8012f24:	6078      	str	r0, [r7, #4]
 8012f26:	460b      	mov	r3, r1
 8012f28:	807b      	strh	r3, [r7, #2]
 8012f2a:	4613      	mov	r3, r2
 8012f2c:	803b      	strh	r3, [r7, #0]
    uxrSeqNum last_acked_seq_num = uxr_seq_num_sub(first_unacked_seq_num, 1);
 8012f2e:	883b      	ldrh	r3, [r7, #0]
 8012f30:	2101      	movs	r1, #1
 8012f32:	4618      	mov	r0, r3
 8012f34:	f000 f8c0 	bl	80130b8 <uxr_seq_num_sub>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	827b      	strh	r3, [r7, #18]
    size_t buffers_to_clean = uxr_seq_num_sub(last_acked_seq_num, stream->last_acknown);
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	8a5a      	ldrh	r2, [r3, #18]
 8012f40:	8a7b      	ldrh	r3, [r7, #18]
 8012f42:	4611      	mov	r1, r2
 8012f44:	4618      	mov	r0, r3
 8012f46:	f000 f8b7 	bl	80130b8 <uxr_seq_num_sub>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < buffers_to_clean; i++)
 8012f4e:	2300      	movs	r3, #0
 8012f50:	617b      	str	r3, [r7, #20]
 8012f52:	e014      	b.n	8012f7e <uxr_process_acknack+0x60>
    {
        stream->last_acknown = uxr_seq_num_add(stream->last_acknown, 1);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	8a5b      	ldrh	r3, [r3, #18]
 8012f58:	2101      	movs	r1, #1
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f000 f89a 	bl	8013094 <uxr_seq_num_add>
 8012f60:	4603      	mov	r3, r0
 8012f62:	461a      	mov	r2, r3
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	825a      	strh	r2, [r3, #18]
        uxr_set_reliable_buffer_size(&stream->base, stream->last_acknown, stream->offset);
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	8a59      	ldrh	r1, [r3, #18]
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	7b1b      	ldrb	r3, [r3, #12]
 8012f72:	461a      	mov	r2, r3
 8012f74:	f7ff fc93 	bl	801289e <uxr_set_reliable_buffer_size>
    for (size_t i = 0; i < buffers_to_clean; i++)
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	3301      	adds	r3, #1
 8012f7c:	617b      	str	r3, [r7, #20]
 8012f7e:	697a      	ldr	r2, [r7, #20]
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d3e6      	bcc.n	8012f54 <uxr_process_acknack+0x36>
    }

    stream->send_lost = (0 < bitmap);
 8012f86:	887b      	ldrh	r3, [r7, #2]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	bf14      	ite	ne
 8012f8c:	2301      	movne	r3, #1
 8012f8e:	2300      	moveq	r3, #0
 8012f90:	b2da      	uxtb	r2, r3
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* reset heartbeat interval */
    stream->next_heartbeat_tries = 0;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	f883 2020 	strb.w	r2, [r3, #32]
}
 8012fa0:	bf00      	nop
 8012fa2:	3718      	adds	r7, #24
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd80      	pop	{r7, pc}

08012fa8 <uxr_is_output_up_to_date>:

bool uxr_is_output_up_to_date(
        const uxrOutputReliableStream* stream)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
    return 0 == uxr_seq_num_cmp(stream->last_acknown, stream->last_sent);
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	8a5a      	ldrh	r2, [r3, #18]
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	8a1b      	ldrh	r3, [r3, #16]
 8012fb8:	4619      	mov	r1, r3
 8012fba:	4610      	mov	r0, r2
 8012fbc:	f000 f88e 	bl	80130dc <uxr_seq_num_cmp>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	bf0c      	ite	eq
 8012fc6:	2301      	moveq	r3, #1
 8012fc8:	2300      	movne	r3, #0
 8012fca:	b2db      	uxtb	r3, r3
}
 8012fcc:	4618      	mov	r0, r3
 8012fce:	3708      	adds	r7, #8
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}

08012fd4 <on_full_output_buffer>:
//                             PRIVATE
//==================================================================
bool on_full_output_buffer(
        ucdrBuffer* ub,
        void* args)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b086      	sub	sp, #24
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
 8012fdc:	6039      	str	r1, [r7, #0]
    uxrOutputReliableStream* stream = (uxrOutputReliableStream*) args;
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	617b      	str	r3, [r7, #20]

    uint16_t history_position = (uint16_t)(1 + uxr_get_reliable_buffer_history_position(&stream->base, ub->init));
 8012fe2:	697a      	ldr	r2, [r7, #20]
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	4619      	mov	r1, r3
 8012fea:	4610      	mov	r0, r2
 8012fec:	f7ff fc22 	bl	8012834 <uxr_get_reliable_buffer_history_position>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	3301      	adds	r3, #1
 8012ff4:	827b      	strh	r3, [r7, #18]
    uint8_t* buffer = uxr_get_reliable_buffer(&stream->base, history_position);
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	8a7a      	ldrh	r2, [r7, #18]
 8012ffa:	4611      	mov	r1, r2
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7ff fbe6 	bl	80127ce <uxr_get_reliable_buffer>
 8013002:	60f8      	str	r0, [r7, #12]
    size_t buffer_size = uxr_get_reliable_buffer_size(&stream->base, history_position);
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	8a7a      	ldrh	r2, [r7, #18]
 8013008:	4611      	mov	r1, r2
 801300a:	4618      	mov	r0, r3
 801300c:	f7ff fc2b 	bl	8012866 <uxr_get_reliable_buffer_size>
 8013010:	60b8      	str	r0, [r7, #8]

    ucdr_init_buffer_origin(
        ub,
        buffer + stream->offset + SUBHEADER_SIZE,
 8013012:	697b      	ldr	r3, [r7, #20]
 8013014:	7b1b      	ldrb	r3, [r3, #12]
 8013016:	3304      	adds	r3, #4
    ucdr_init_buffer_origin(
 8013018:	68fa      	ldr	r2, [r7, #12]
 801301a:	18d1      	adds	r1, r2, r3
        (uint32_t)(buffer_size - stream->offset - SUBHEADER_SIZE),
 801301c:	697b      	ldr	r3, [r7, #20]
 801301e:	7b1b      	ldrb	r3, [r3, #12]
 8013020:	461a      	mov	r2, r3
 8013022:	68bb      	ldr	r3, [r7, #8]
 8013024:	1a9b      	subs	r3, r3, r2
    ucdr_init_buffer_origin(
 8013026:	1f1a      	subs	r2, r3, #4
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	691b      	ldr	r3, [r3, #16]
 801302c:	6878      	ldr	r0, [r7, #4]
 801302e:	f7f7 f8e6 	bl	800a1fe <ucdr_init_buffer_origin>
        ub->offset);
    ucdr_set_on_full_buffer_callback(ub, on_full_output_buffer, stream);
 8013032:	697a      	ldr	r2, [r7, #20]
 8013034:	4904      	ldr	r1, [pc, #16]	; (8013048 <on_full_output_buffer+0x74>)
 8013036:	6878      	ldr	r0, [r7, #4]
 8013038:	f7f7 f8bf 	bl	800a1ba <ucdr_set_on_full_buffer_callback>

    return false;
 801303c:	2300      	movs	r3, #0
}
 801303e:	4618      	mov	r0, r3
 8013040:	3718      	adds	r7, #24
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}
 8013046:	bf00      	nop
 8013048:	08012fd5 	.word	0x08012fd5

0801304c <get_available_free_slots>:

uint16_t get_available_free_slots(
        uxrOutputReliableStream* stream)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b084      	sub	sp, #16
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
    uint16_t free_slots = 0;
 8013054:	2300      	movs	r3, #0
 8013056:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < stream->base.history; i++)
 8013058:	2300      	movs	r3, #0
 801305a:	81bb      	strh	r3, [r7, #12]
 801305c:	e010      	b.n	8013080 <get_available_free_slots+0x34>
    {
        if (uxr_get_reliable_buffer_size(&stream->base, i) == stream->offset)
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	89ba      	ldrh	r2, [r7, #12]
 8013062:	4611      	mov	r1, r2
 8013064:	4618      	mov	r0, r3
 8013066:	f7ff fbfe 	bl	8012866 <uxr_get_reliable_buffer_size>
 801306a:	4602      	mov	r2, r0
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	7b1b      	ldrb	r3, [r3, #12]
 8013070:	429a      	cmp	r2, r3
 8013072:	d102      	bne.n	801307a <get_available_free_slots+0x2e>
        {
            free_slots++;
 8013074:	89fb      	ldrh	r3, [r7, #14]
 8013076:	3301      	adds	r3, #1
 8013078:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < stream->base.history; i++)
 801307a:	89bb      	ldrh	r3, [r7, #12]
 801307c:	3301      	adds	r3, #1
 801307e:	81bb      	strh	r3, [r7, #12]
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	891b      	ldrh	r3, [r3, #8]
 8013084:	89ba      	ldrh	r2, [r7, #12]
 8013086:	429a      	cmp	r2, r3
 8013088:	d3e9      	bcc.n	801305e <get_available_free_slots+0x12>
        }
    }
    return free_slots;
 801308a:	89fb      	ldrh	r3, [r7, #14]
}
 801308c:	4618      	mov	r0, r3
 801308e:	3710      	adds	r7, #16
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}

08013094 <uxr_seq_num_add>:
//                             PUBLIC
//==================================================================
uxrSeqNum uxr_seq_num_add(
        uxrSeqNum seq_num,
        uint16_t increment)
{
 8013094:	b480      	push	{r7}
 8013096:	b083      	sub	sp, #12
 8013098:	af00      	add	r7, sp, #0
 801309a:	4603      	mov	r3, r0
 801309c:	460a      	mov	r2, r1
 801309e:	80fb      	strh	r3, [r7, #6]
 80130a0:	4613      	mov	r3, r2
 80130a2:	80bb      	strh	r3, [r7, #4]
    return (uxrSeqNum)((seq_num + increment) % SEQ_NUM_SIZE);
 80130a4:	88fa      	ldrh	r2, [r7, #6]
 80130a6:	88bb      	ldrh	r3, [r7, #4]
 80130a8:	4413      	add	r3, r2
 80130aa:	b29b      	uxth	r3, r3
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	370c      	adds	r7, #12
 80130b0:	46bd      	mov	sp, r7
 80130b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b6:	4770      	bx	lr

080130b8 <uxr_seq_num_sub>:

uxrSeqNum uxr_seq_num_sub(
        uxrSeqNum seq_num,
        uint16_t decrement)
{
 80130b8:	b480      	push	{r7}
 80130ba:	b083      	sub	sp, #12
 80130bc:	af00      	add	r7, sp, #0
 80130be:	4603      	mov	r3, r0
 80130c0:	460a      	mov	r2, r1
 80130c2:	80fb      	strh	r3, [r7, #6]
 80130c4:	4613      	mov	r3, r2
 80130c6:	80bb      	strh	r3, [r7, #4]
    return (uxrSeqNum)((decrement > seq_num)
 80130c8:	88fa      	ldrh	r2, [r7, #6]
 80130ca:	88bb      	ldrh	r3, [r7, #4]
 80130cc:	1ad3      	subs	r3, r2, r3
 80130ce:	b29b      	uxth	r3, r3
        ? seq_num + (SEQ_NUM_SIZE - decrement)
        : seq_num - decrement);
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	370c      	adds	r7, #12
 80130d4:	46bd      	mov	sp, r7
 80130d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130da:	4770      	bx	lr

080130dc <uxr_seq_num_cmp>:

int uxr_seq_num_cmp(
        uxrSeqNum seq_num_1,
        uxrSeqNum seq_num_2)
{
 80130dc:	b480      	push	{r7}
 80130de:	b085      	sub	sp, #20
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	4603      	mov	r3, r0
 80130e4:	460a      	mov	r2, r1
 80130e6:	80fb      	strh	r3, [r7, #6]
 80130e8:	4613      	mov	r3, r2
 80130ea:	80bb      	strh	r3, [r7, #4]
    int result;
    if (seq_num_1 == seq_num_2)
 80130ec:	88fa      	ldrh	r2, [r7, #6]
 80130ee:	88bb      	ldrh	r3, [r7, #4]
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d102      	bne.n	80130fa <uxr_seq_num_cmp+0x1e>
    {
        result = 0;
 80130f4:	2300      	movs	r3, #0
 80130f6:	60fb      	str	r3, [r7, #12]
 80130f8:	e019      	b.n	801312e <uxr_seq_num_cmp+0x52>
    }
    else if ((seq_num_1 < seq_num_2 && (seq_num_2 - seq_num_1) < SEQ_NUM_MIDSIZE) ||
 80130fa:	88fa      	ldrh	r2, [r7, #6]
 80130fc:	88bb      	ldrh	r3, [r7, #4]
 80130fe:	429a      	cmp	r2, r3
 8013100:	d205      	bcs.n	801310e <uxr_seq_num_cmp+0x32>
 8013102:	88ba      	ldrh	r2, [r7, #4]
 8013104:	88fb      	ldrh	r3, [r7, #6]
 8013106:	1ad3      	subs	r3, r2, r3
 8013108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801310c:	db09      	blt.n	8013122 <uxr_seq_num_cmp+0x46>
 801310e:	88fa      	ldrh	r2, [r7, #6]
 8013110:	88bb      	ldrh	r3, [r7, #4]
 8013112:	429a      	cmp	r2, r3
 8013114:	d909      	bls.n	801312a <uxr_seq_num_cmp+0x4e>
            (seq_num_1 > seq_num_2 && (seq_num_1 - seq_num_2) > SEQ_NUM_MIDSIZE))
 8013116:	88fa      	ldrh	r2, [r7, #6]
 8013118:	88bb      	ldrh	r3, [r7, #4]
 801311a:	1ad3      	subs	r3, r2, r3
 801311c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013120:	dd03      	ble.n	801312a <uxr_seq_num_cmp+0x4e>
    {
        result = -1;
 8013122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013126:	60fb      	str	r3, [r7, #12]
 8013128:	e001      	b.n	801312e <uxr_seq_num_cmp+0x52>
    }
    else
    {
        result = 1;
 801312a:	2301      	movs	r3, #1
 801312c:	60fb      	str	r3, [r7, #12]
    }
    return result;
 801312e:	68fb      	ldr	r3, [r7, #12]
}
 8013130:	4618      	mov	r0, r3
 8013132:	3714      	adds	r7, #20
 8013134:	46bd      	mov	sp, r7
 8013136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313a:	4770      	bx	lr

0801313c <uxr_stream_id>:
//==================================================================
uxrStreamId uxr_stream_id(
        uint8_t index,
        uxrStreamType type,
        uxrStreamDirection direction)
{
 801313c:	b480      	push	{r7}
 801313e:	b085      	sub	sp, #20
 8013140:	af00      	add	r7, sp, #0
 8013142:	4603      	mov	r3, r0
 8013144:	71fb      	strb	r3, [r7, #7]
 8013146:	460b      	mov	r3, r1
 8013148:	71bb      	strb	r3, [r7, #6]
 801314a:	4613      	mov	r3, r2
 801314c:	717b      	strb	r3, [r7, #5]
    uxrStreamId stream_id;
    stream_id.direction = (uint8_t)direction;
 801314e:	797b      	ldrb	r3, [r7, #5]
 8013150:	72fb      	strb	r3, [r7, #11]
    stream_id.index = index;
 8013152:	79fb      	ldrb	r3, [r7, #7]
 8013154:	727b      	strb	r3, [r7, #9]
    stream_id.type = (uint8_t)type;
 8013156:	79bb      	ldrb	r3, [r7, #6]
 8013158:	72bb      	strb	r3, [r7, #10]

    switch (type)
 801315a:	79bb      	ldrb	r3, [r7, #6]
 801315c:	2b02      	cmp	r3, #2
 801315e:	d00e      	beq.n	801317e <uxr_stream_id+0x42>
 8013160:	2b02      	cmp	r3, #2
 8013162:	dc11      	bgt.n	8013188 <uxr_stream_id+0x4c>
 8013164:	2b00      	cmp	r3, #0
 8013166:	d002      	beq.n	801316e <uxr_stream_id+0x32>
 8013168:	2b01      	cmp	r3, #1
 801316a:	d003      	beq.n	8013174 <uxr_stream_id+0x38>
            break;
        case UXR_RELIABLE_STREAM:
            stream_id.raw = (uint8_t)(index + RELIABLE_STREAM_THRESHOLD);
            break;
        default:
            break;
 801316c:	e00c      	b.n	8013188 <uxr_stream_id+0x4c>
            stream_id.raw = 0;
 801316e:	2300      	movs	r3, #0
 8013170:	723b      	strb	r3, [r7, #8]
            break;
 8013172:	e00a      	b.n	801318a <uxr_stream_id+0x4e>
            stream_id.raw = (uint8_t)(index + BEST_EFFORT_STREAM_THRESHOLD);
 8013174:	79fb      	ldrb	r3, [r7, #7]
 8013176:	3301      	adds	r3, #1
 8013178:	b2db      	uxtb	r3, r3
 801317a:	723b      	strb	r3, [r7, #8]
            break;
 801317c:	e005      	b.n	801318a <uxr_stream_id+0x4e>
            stream_id.raw = (uint8_t)(index + RELIABLE_STREAM_THRESHOLD);
 801317e:	79fb      	ldrb	r3, [r7, #7]
 8013180:	3b80      	subs	r3, #128	; 0x80
 8013182:	b2db      	uxtb	r3, r3
 8013184:	723b      	strb	r3, [r7, #8]
            break;
 8013186:	e000      	b.n	801318a <uxr_stream_id+0x4e>
            break;
 8013188:	bf00      	nop
    }

    return stream_id;
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	60fb      	str	r3, [r7, #12]
 801318e:	2300      	movs	r3, #0
 8013190:	7b3a      	ldrb	r2, [r7, #12]
 8013192:	f362 0307 	bfi	r3, r2, #0, #8
 8013196:	7b7a      	ldrb	r2, [r7, #13]
 8013198:	f362 230f 	bfi	r3, r2, #8, #8
 801319c:	7bba      	ldrb	r2, [r7, #14]
 801319e:	f362 4317 	bfi	r3, r2, #16, #8
 80131a2:	7bfa      	ldrb	r2, [r7, #15]
 80131a4:	f362 631f 	bfi	r3, r2, #24, #8
}
 80131a8:	4618      	mov	r0, r3
 80131aa:	3714      	adds	r7, #20
 80131ac:	46bd      	mov	sp, r7
 80131ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b2:	4770      	bx	lr

080131b4 <uxr_stream_id_from_raw>:

uxrStreamId uxr_stream_id_from_raw(
        uint8_t stream_id_raw,
        uxrStreamDirection direction)
{
 80131b4:	b480      	push	{r7}
 80131b6:	b085      	sub	sp, #20
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	4603      	mov	r3, r0
 80131bc:	460a      	mov	r2, r1
 80131be:	71fb      	strb	r3, [r7, #7]
 80131c0:	4613      	mov	r3, r2
 80131c2:	71bb      	strb	r3, [r7, #6]
    uxrStreamId stream_id;
    stream_id.raw = stream_id_raw;
 80131c4:	79fb      	ldrb	r3, [r7, #7]
 80131c6:	723b      	strb	r3, [r7, #8]
    stream_id.direction = (uint8_t)direction;
 80131c8:	79bb      	ldrb	r3, [r7, #6]
 80131ca:	72fb      	strb	r3, [r7, #11]

    if (BEST_EFFORT_STREAM_THRESHOLD > stream_id_raw)
 80131cc:	79fb      	ldrb	r3, [r7, #7]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d104      	bne.n	80131dc <uxr_stream_id_from_raw+0x28>
    {
        stream_id.index = stream_id_raw;
 80131d2:	79fb      	ldrb	r3, [r7, #7]
 80131d4:	727b      	strb	r3, [r7, #9]
        stream_id.type = UXR_NONE_STREAM;
 80131d6:	2300      	movs	r3, #0
 80131d8:	72bb      	strb	r3, [r7, #10]
 80131da:	e010      	b.n	80131fe <uxr_stream_id_from_raw+0x4a>
    }
    else if (RELIABLE_STREAM_THRESHOLD > stream_id_raw)
 80131dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	db06      	blt.n	80131f2 <uxr_stream_id_from_raw+0x3e>
    {
        stream_id.index = (uint8_t)(stream_id_raw - BEST_EFFORT_STREAM_THRESHOLD);
 80131e4:	79fb      	ldrb	r3, [r7, #7]
 80131e6:	3b01      	subs	r3, #1
 80131e8:	b2db      	uxtb	r3, r3
 80131ea:	727b      	strb	r3, [r7, #9]
        stream_id.type = UXR_BEST_EFFORT_STREAM;
 80131ec:	2301      	movs	r3, #1
 80131ee:	72bb      	strb	r3, [r7, #10]
 80131f0:	e005      	b.n	80131fe <uxr_stream_id_from_raw+0x4a>
    }
    else
    {
        stream_id.index = (uint8_t)(stream_id_raw - RELIABLE_STREAM_THRESHOLD);
 80131f2:	79fb      	ldrb	r3, [r7, #7]
 80131f4:	3b80      	subs	r3, #128	; 0x80
 80131f6:	b2db      	uxtb	r3, r3
 80131f8:	727b      	strb	r3, [r7, #9]
        stream_id.type = UXR_RELIABLE_STREAM;
 80131fa:	2302      	movs	r3, #2
 80131fc:	72bb      	strb	r3, [r7, #10]
    }

    return stream_id;
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	60fb      	str	r3, [r7, #12]
 8013202:	2300      	movs	r3, #0
 8013204:	7b3a      	ldrb	r2, [r7, #12]
 8013206:	f362 0307 	bfi	r3, r2, #0, #8
 801320a:	7b7a      	ldrb	r2, [r7, #13]
 801320c:	f362 230f 	bfi	r3, r2, #8, #8
 8013210:	7bba      	ldrb	r2, [r7, #14]
 8013212:	f362 4317 	bfi	r3, r2, #16, #8
 8013216:	7bfa      	ldrb	r2, [r7, #15]
 8013218:	f362 631f 	bfi	r3, r2, #24, #8
}
 801321c:	4618      	mov	r0, r3
 801321e:	3714      	adds	r7, #20
 8013220:	46bd      	mov	sp, r7
 8013222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013226:	4770      	bx	lr

08013228 <uxr_init_stream_storage>:
//==================================================================
//                             PUBLIC
//==================================================================
void uxr_init_stream_storage(
        uxrStreamStorage* storage)
{
 8013228:	b480      	push	{r7}
 801322a:	b083      	sub	sp, #12
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
    storage->output_best_effort_size = 0;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2200      	movs	r2, #0
 8013234:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    storage->output_reliable_size = 0;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	2200      	movs	r2, #0
 801323c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    storage->input_best_effort_size = 0;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2200      	movs	r2, #0
 8013244:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    storage->input_reliable_size = 0;
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	2200      	movs	r2, #0
 801324c:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
}
 8013250:	bf00      	nop
 8013252:	370c      	adds	r7, #12
 8013254:	46bd      	mov	sp, r7
 8013256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325a:	4770      	bx	lr

0801325c <uxr_reset_stream_storage>:

void uxr_reset_stream_storage(
        uxrStreamStorage* storage)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b086      	sub	sp, #24
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
    for (unsigned i = 0; i < storage->output_best_effort_size; ++i)
 8013264:	2300      	movs	r3, #0
 8013266:	617b      	str	r3, [r7, #20]
 8013268:	e00b      	b.n	8013282 <uxr_reset_stream_storage+0x26>
    {
        uxr_reset_output_best_effort_stream(&storage->output_best_effort[i]);
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	2264      	movs	r2, #100	; 0x64
 801326e:	fb02 f303 	mul.w	r3, r2, r3
 8013272:	687a      	ldr	r2, [r7, #4]
 8013274:	4413      	add	r3, r2
 8013276:	4618      	mov	r0, r3
 8013278:	f7ff fa2e 	bl	80126d8 <uxr_reset_output_best_effort_stream>
    for (unsigned i = 0; i < storage->output_best_effort_size; ++i)
 801327c:	697b      	ldr	r3, [r7, #20]
 801327e:	3301      	adds	r3, #1
 8013280:	617b      	str	r3, [r7, #20]
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8013288:	461a      	mov	r2, r3
 801328a:	697b      	ldr	r3, [r7, #20]
 801328c:	4293      	cmp	r3, r2
 801328e:	d3ec      	bcc.n	801326a <uxr_reset_stream_storage+0xe>
    }

    for (unsigned i = 0; i < storage->input_best_effort_size; ++i)
 8013290:	2300      	movs	r3, #0
 8013292:	613b      	str	r3, [r7, #16]
 8013294:	e00d      	b.n	80132b2 <uxr_reset_stream_storage+0x56>
    {
        uxr_reset_input_best_effort_stream(&storage->input_best_effort[i]);
 8013296:	693b      	ldr	r3, [r7, #16]
 8013298:	2258      	movs	r2, #88	; 0x58
 801329a:	fb02 f303 	mul.w	r3, r2, r3
 801329e:	33e0      	adds	r3, #224	; 0xe0
 80132a0:	687a      	ldr	r2, [r7, #4]
 80132a2:	4413      	add	r3, r2
 80132a4:	3304      	adds	r3, #4
 80132a6:	4618      	mov	r0, r3
 80132a8:	f7fe ff13 	bl	80120d2 <uxr_reset_input_best_effort_stream>
    for (unsigned i = 0; i < storage->input_best_effort_size; ++i)
 80132ac:	693b      	ldr	r3, [r7, #16]
 80132ae:	3301      	adds	r3, #1
 80132b0:	613b      	str	r3, [r7, #16]
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80132b8:	461a      	mov	r2, r3
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	4293      	cmp	r3, r2
 80132be:	d3ea      	bcc.n	8013296 <uxr_reset_stream_storage+0x3a>
    }

    for (unsigned i = 0; i < storage->output_reliable_size; ++i)
 80132c0:	2300      	movs	r3, #0
 80132c2:	60fb      	str	r3, [r7, #12]
 80132c4:	e00d      	b.n	80132e2 <uxr_reset_stream_storage+0x86>
    {
        uxr_reset_output_reliable_stream(&storage->output_reliable[i]);
 80132c6:	68fa      	ldr	r2, [r7, #12]
 80132c8:	4613      	mov	r3, r2
 80132ca:	011b      	lsls	r3, r3, #4
 80132cc:	1a9b      	subs	r3, r3, r2
 80132ce:	00db      	lsls	r3, r3, #3
 80132d0:	3368      	adds	r3, #104	; 0x68
 80132d2:	687a      	ldr	r2, [r7, #4]
 80132d4:	4413      	add	r3, r2
 80132d6:	4618      	mov	r0, r3
 80132d8:	f7ff fb1e 	bl	8012918 <uxr_reset_output_reliable_stream>
    for (unsigned i = 0; i < storage->output_reliable_size; ++i)
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	3301      	adds	r3, #1
 80132e0:	60fb      	str	r3, [r7, #12]
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80132e8:	461a      	mov	r2, r3
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	4293      	cmp	r3, r2
 80132ee:	d3ea      	bcc.n	80132c6 <uxr_reset_stream_storage+0x6a>
    }

    for (unsigned i = 0; i < storage->input_reliable_size; ++i)
 80132f0:	2300      	movs	r3, #0
 80132f2:	60bb      	str	r3, [r7, #8]
 80132f4:	e00d      	b.n	8013312 <uxr_reset_stream_storage+0xb6>
    {
        uxr_reset_input_reliable_stream(&storage->input_reliable[i]);
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	226c      	movs	r2, #108	; 0x6c
 80132fa:	fb02 f303 	mul.w	r3, r2, r3
 80132fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8013302:	687a      	ldr	r2, [r7, #4]
 8013304:	4413      	add	r3, r2
 8013306:	4618      	mov	r0, r3
 8013308:	f7fe ffa3 	bl	8012252 <uxr_reset_input_reliable_stream>
    for (unsigned i = 0; i < storage->input_reliable_size; ++i)
 801330c:	68bb      	ldr	r3, [r7, #8]
 801330e:	3301      	adds	r3, #1
 8013310:	60bb      	str	r3, [r7, #8]
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8013318:	461a      	mov	r2, r3
 801331a:	68bb      	ldr	r3, [r7, #8]
 801331c:	4293      	cmp	r3, r2
 801331e:	d3ea      	bcc.n	80132f6 <uxr_reset_stream_storage+0x9a>
    }
}
 8013320:	bf00      	nop
 8013322:	bf00      	nop
 8013324:	3718      	adds	r7, #24
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}

0801332a <uxr_add_output_best_effort_buffer>:
uxrStreamId uxr_add_output_best_effort_buffer(
        uxrStreamStorage* storage,
        uint8_t* buffer,
        size_t size,
        uint8_t header_offset)
{
 801332a:	b580      	push	{r7, lr}
 801332c:	b088      	sub	sp, #32
 801332e:	af00      	add	r7, sp, #0
 8013330:	60f8      	str	r0, [r7, #12]
 8013332:	60b9      	str	r1, [r7, #8]
 8013334:	607a      	str	r2, [r7, #4]
 8013336:	70fb      	strb	r3, [r7, #3]
    uint8_t index = storage->output_best_effort_size++;
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801333e:	1c5a      	adds	r2, r3, #1
 8013340:	b2d1      	uxtb	r1, r2
 8013342:	68fa      	ldr	r2, [r7, #12]
 8013344:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
 8013348:	77fb      	strb	r3, [r7, #31]
    //TODO: assert for index
    uxrOutputBestEffortStream* stream = &storage->output_best_effort[index];
 801334a:	7ffb      	ldrb	r3, [r7, #31]
 801334c:	2264      	movs	r2, #100	; 0x64
 801334e:	fb02 f303 	mul.w	r3, r2, r3
 8013352:	68fa      	ldr	r2, [r7, #12]
 8013354:	4413      	add	r3, r2
 8013356:	61bb      	str	r3, [r7, #24]
    uxr_init_output_best_effort_stream(stream, buffer, size, header_offset);
 8013358:	78fb      	ldrb	r3, [r7, #3]
 801335a:	687a      	ldr	r2, [r7, #4]
 801335c:	68b9      	ldr	r1, [r7, #8]
 801335e:	69b8      	ldr	r0, [r7, #24]
 8013360:	f7ff f99e 	bl	80126a0 <uxr_init_output_best_effort_stream>
    return uxr_stream_id(index, UXR_BEST_EFFORT_STREAM, UXR_OUTPUT_STREAM);
 8013364:	7ffb      	ldrb	r3, [r7, #31]
 8013366:	2201      	movs	r2, #1
 8013368:	2101      	movs	r1, #1
 801336a:	4618      	mov	r0, r3
 801336c:	f7ff fee6 	bl	801313c <uxr_stream_id>
 8013370:	4603      	mov	r3, r0
 8013372:	617b      	str	r3, [r7, #20]
 8013374:	2300      	movs	r3, #0
 8013376:	7d3a      	ldrb	r2, [r7, #20]
 8013378:	f362 0307 	bfi	r3, r2, #0, #8
 801337c:	7d7a      	ldrb	r2, [r7, #21]
 801337e:	f362 230f 	bfi	r3, r2, #8, #8
 8013382:	7dba      	ldrb	r2, [r7, #22]
 8013384:	f362 4317 	bfi	r3, r2, #16, #8
 8013388:	7dfa      	ldrb	r2, [r7, #23]
 801338a:	f362 631f 	bfi	r3, r2, #24, #8
}
 801338e:	4618      	mov	r0, r3
 8013390:	3720      	adds	r7, #32
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}

08013396 <uxr_add_output_reliable_buffer>:
        uxrStreamStorage* storage,
        uint8_t* buffer,
        size_t size,
        uint16_t history,
        uint8_t header_offset)
{
 8013396:	b580      	push	{r7, lr}
 8013398:	b08a      	sub	sp, #40	; 0x28
 801339a:	af02      	add	r7, sp, #8
 801339c:	60f8      	str	r0, [r7, #12]
 801339e:	60b9      	str	r1, [r7, #8]
 80133a0:	607a      	str	r2, [r7, #4]
 80133a2:	807b      	strh	r3, [r7, #2]
    uint8_t index = storage->output_reliable_size++;
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80133aa:	1c5a      	adds	r2, r3, #1
 80133ac:	b2d1      	uxtb	r1, r2
 80133ae:	68fa      	ldr	r2, [r7, #12]
 80133b0:	f882 10e0 	strb.w	r1, [r2, #224]	; 0xe0
 80133b4:	77fb      	strb	r3, [r7, #31]
    //TODO: assert for index
    uxrOutputReliableStream* stream = &storage->output_reliable[index];
 80133b6:	7ffa      	ldrb	r2, [r7, #31]
 80133b8:	4613      	mov	r3, r2
 80133ba:	011b      	lsls	r3, r3, #4
 80133bc:	1a9b      	subs	r3, r3, r2
 80133be:	00db      	lsls	r3, r3, #3
 80133c0:	3368      	adds	r3, #104	; 0x68
 80133c2:	68fa      	ldr	r2, [r7, #12]
 80133c4:	4413      	add	r3, r2
 80133c6:	61bb      	str	r3, [r7, #24]
    uxr_init_output_reliable_stream(stream, buffer, size, history, header_offset);
 80133c8:	887a      	ldrh	r2, [r7, #2]
 80133ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80133ce:	9300      	str	r3, [sp, #0]
 80133d0:	4613      	mov	r3, r2
 80133d2:	687a      	ldr	r2, [r7, #4]
 80133d4:	68b9      	ldr	r1, [r7, #8]
 80133d6:	69b8      	ldr	r0, [r7, #24]
 80133d8:	f7ff fa7f 	bl	80128da <uxr_init_output_reliable_stream>
    return uxr_stream_id(index, UXR_RELIABLE_STREAM, UXR_OUTPUT_STREAM);
 80133dc:	7ffb      	ldrb	r3, [r7, #31]
 80133de:	2201      	movs	r2, #1
 80133e0:	2102      	movs	r1, #2
 80133e2:	4618      	mov	r0, r3
 80133e4:	f7ff feaa 	bl	801313c <uxr_stream_id>
 80133e8:	4603      	mov	r3, r0
 80133ea:	617b      	str	r3, [r7, #20]
 80133ec:	2300      	movs	r3, #0
 80133ee:	7d3a      	ldrb	r2, [r7, #20]
 80133f0:	f362 0307 	bfi	r3, r2, #0, #8
 80133f4:	7d7a      	ldrb	r2, [r7, #21]
 80133f6:	f362 230f 	bfi	r3, r2, #8, #8
 80133fa:	7dba      	ldrb	r2, [r7, #22]
 80133fc:	f362 4317 	bfi	r3, r2, #16, #8
 8013400:	7dfa      	ldrb	r2, [r7, #23]
 8013402:	f362 631f 	bfi	r3, r2, #24, #8
}
 8013406:	4618      	mov	r0, r3
 8013408:	3720      	adds	r7, #32
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}

0801340e <uxr_add_input_best_effort_buffer>:

uxrStreamId uxr_add_input_best_effort_buffer(
        uxrStreamStorage* storage)
{
 801340e:	b580      	push	{r7, lr}
 8013410:	b086      	sub	sp, #24
 8013412:	af00      	add	r7, sp, #0
 8013414:	6078      	str	r0, [r7, #4]
    uint8_t index = storage->input_best_effort_size++;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 801341c:	1c5a      	adds	r2, r3, #1
 801341e:	b2d1      	uxtb	r1, r2
 8013420:	687a      	ldr	r2, [r7, #4]
 8013422:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
 8013426:	75fb      	strb	r3, [r7, #23]
    //TODO: assert for index
    uxrInputBestEffortStream* stream = &storage->input_best_effort[index];
 8013428:	7dfb      	ldrb	r3, [r7, #23]
 801342a:	2258      	movs	r2, #88	; 0x58
 801342c:	fb02 f303 	mul.w	r3, r2, r3
 8013430:	33e0      	adds	r3, #224	; 0xe0
 8013432:	687a      	ldr	r2, [r7, #4]
 8013434:	4413      	add	r3, r2
 8013436:	3304      	adds	r3, #4
 8013438:	613b      	str	r3, [r7, #16]
    uxr_init_input_best_effort_stream(stream);
 801343a:	6938      	ldr	r0, [r7, #16]
 801343c:	f7fe fe38 	bl	80120b0 <uxr_init_input_best_effort_stream>
    return uxr_stream_id(index, UXR_BEST_EFFORT_STREAM, UXR_INPUT_STREAM);
 8013440:	7dfb      	ldrb	r3, [r7, #23]
 8013442:	2200      	movs	r2, #0
 8013444:	2101      	movs	r1, #1
 8013446:	4618      	mov	r0, r3
 8013448:	f7ff fe78 	bl	801313c <uxr_stream_id>
 801344c:	4603      	mov	r3, r0
 801344e:	60fb      	str	r3, [r7, #12]
 8013450:	2300      	movs	r3, #0
 8013452:	7b3a      	ldrb	r2, [r7, #12]
 8013454:	f362 0307 	bfi	r3, r2, #0, #8
 8013458:	7b7a      	ldrb	r2, [r7, #13]
 801345a:	f362 230f 	bfi	r3, r2, #8, #8
 801345e:	7bba      	ldrb	r2, [r7, #14]
 8013460:	f362 4317 	bfi	r3, r2, #16, #8
 8013464:	7bfa      	ldrb	r2, [r7, #15]
 8013466:	f362 631f 	bfi	r3, r2, #24, #8
}
 801346a:	4618      	mov	r0, r3
 801346c:	3718      	adds	r7, #24
 801346e:	46bd      	mov	sp, r7
 8013470:	bd80      	pop	{r7, pc}

08013472 <uxr_add_input_reliable_buffer>:
        uxrStreamStorage* storage,
        uint8_t* buffer,
        size_t size,
        uint16_t history,
        OnGetFragmentationInfo on_get_fragmentation_info)
{
 8013472:	b580      	push	{r7, lr}
 8013474:	b08a      	sub	sp, #40	; 0x28
 8013476:	af02      	add	r7, sp, #8
 8013478:	60f8      	str	r0, [r7, #12]
 801347a:	60b9      	str	r1, [r7, #8]
 801347c:	607a      	str	r2, [r7, #4]
 801347e:	807b      	strh	r3, [r7, #2]
    uint8_t index = storage->input_reliable_size++;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8013486:	1c5a      	adds	r2, r3, #1
 8013488:	b2d1      	uxtb	r1, r2
 801348a:	68fa      	ldr	r2, [r7, #12]
 801348c:	f882 11ac 	strb.w	r1, [r2, #428]	; 0x1ac
 8013490:	77fb      	strb	r3, [r7, #31]
    //TODO: assert for index
    uxrInputReliableStream* stream = &storage->input_reliable[index];
 8013492:	7ffb      	ldrb	r3, [r7, #31]
 8013494:	226c      	movs	r2, #108	; 0x6c
 8013496:	fb02 f303 	mul.w	r3, r2, r3
 801349a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801349e:	68fa      	ldr	r2, [r7, #12]
 80134a0:	4413      	add	r3, r2
 80134a2:	61bb      	str	r3, [r7, #24]
    uxr_init_input_reliable_stream(stream, buffer, size, history, on_get_fragmentation_info);
 80134a4:	887a      	ldrh	r2, [r7, #2]
 80134a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134a8:	9300      	str	r3, [sp, #0]
 80134aa:	4613      	mov	r3, r2
 80134ac:	687a      	ldr	r2, [r7, #4]
 80134ae:	68b9      	ldr	r1, [r7, #8]
 80134b0:	69b8      	ldr	r0, [r7, #24]
 80134b2:	f7fe feac 	bl	801220e <uxr_init_input_reliable_stream>
    return uxr_stream_id(index, UXR_RELIABLE_STREAM, UXR_INPUT_STREAM);
 80134b6:	7ffb      	ldrb	r3, [r7, #31]
 80134b8:	2200      	movs	r2, #0
 80134ba:	2102      	movs	r1, #2
 80134bc:	4618      	mov	r0, r3
 80134be:	f7ff fe3d 	bl	801313c <uxr_stream_id>
 80134c2:	4603      	mov	r3, r0
 80134c4:	617b      	str	r3, [r7, #20]
 80134c6:	2300      	movs	r3, #0
 80134c8:	7d3a      	ldrb	r2, [r7, #20]
 80134ca:	f362 0307 	bfi	r3, r2, #0, #8
 80134ce:	7d7a      	ldrb	r2, [r7, #21]
 80134d0:	f362 230f 	bfi	r3, r2, #8, #8
 80134d4:	7dba      	ldrb	r2, [r7, #22]
 80134d6:	f362 4317 	bfi	r3, r2, #16, #8
 80134da:	7dfa      	ldrb	r2, [r7, #23]
 80134dc:	f362 631f 	bfi	r3, r2, #24, #8
}
 80134e0:	4618      	mov	r0, r3
 80134e2:	3720      	adds	r7, #32
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}

080134e8 <uxr_get_output_best_effort_stream>:

uxrOutputBestEffortStream* uxr_get_output_best_effort_stream(
        uxrStreamStorage* storage,
        uint8_t index)
{
 80134e8:	b480      	push	{r7}
 80134ea:	b083      	sub	sp, #12
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	460b      	mov	r3, r1
 80134f2:	70fb      	strb	r3, [r7, #3]
    if (index < storage->output_best_effort_size)
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80134fa:	78fa      	ldrb	r2, [r7, #3]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d206      	bcs.n	801350e <uxr_get_output_best_effort_stream+0x26>
    {
        return &storage->output_best_effort[index];
 8013500:	78fb      	ldrb	r3, [r7, #3]
 8013502:	2264      	movs	r2, #100	; 0x64
 8013504:	fb02 f303 	mul.w	r3, r2, r3
 8013508:	687a      	ldr	r2, [r7, #4]
 801350a:	4413      	add	r3, r2
 801350c:	e000      	b.n	8013510 <uxr_get_output_best_effort_stream+0x28>
    }
    return NULL;
 801350e:	2300      	movs	r3, #0
}
 8013510:	4618      	mov	r0, r3
 8013512:	370c      	adds	r7, #12
 8013514:	46bd      	mov	sp, r7
 8013516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801351a:	4770      	bx	lr

0801351c <uxr_get_output_reliable_stream>:

uxrOutputReliableStream* uxr_get_output_reliable_stream(
        uxrStreamStorage* storage,
        uint8_t index)
{
 801351c:	b480      	push	{r7}
 801351e:	b083      	sub	sp, #12
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
 8013524:	460b      	mov	r3, r1
 8013526:	70fb      	strb	r3, [r7, #3]
    if (index < storage->output_reliable_size)
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 801352e:	78fa      	ldrb	r2, [r7, #3]
 8013530:	429a      	cmp	r2, r3
 8013532:	d208      	bcs.n	8013546 <uxr_get_output_reliable_stream+0x2a>
    {
        return &storage->output_reliable[index];
 8013534:	78fa      	ldrb	r2, [r7, #3]
 8013536:	4613      	mov	r3, r2
 8013538:	011b      	lsls	r3, r3, #4
 801353a:	1a9b      	subs	r3, r3, r2
 801353c:	00db      	lsls	r3, r3, #3
 801353e:	3368      	adds	r3, #104	; 0x68
 8013540:	687a      	ldr	r2, [r7, #4]
 8013542:	4413      	add	r3, r2
 8013544:	e000      	b.n	8013548 <uxr_get_output_reliable_stream+0x2c>
    }
    return NULL;
 8013546:	2300      	movs	r3, #0
}
 8013548:	4618      	mov	r0, r3
 801354a:	370c      	adds	r7, #12
 801354c:	46bd      	mov	sp, r7
 801354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013552:	4770      	bx	lr

08013554 <uxr_get_input_best_effort_stream>:

uxrInputBestEffortStream* uxr_get_input_best_effort_stream(
        uxrStreamStorage* storage,
        uint8_t index)
{
 8013554:	b480      	push	{r7}
 8013556:	b083      	sub	sp, #12
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	460b      	mov	r3, r1
 801355e:	70fb      	strb	r3, [r7, #3]
    if (index < storage->input_best_effort_size)
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8013566:	78fa      	ldrb	r2, [r7, #3]
 8013568:	429a      	cmp	r2, r3
 801356a:	d208      	bcs.n	801357e <uxr_get_input_best_effort_stream+0x2a>
    {
        return &storage->input_best_effort[index];
 801356c:	78fb      	ldrb	r3, [r7, #3]
 801356e:	2258      	movs	r2, #88	; 0x58
 8013570:	fb02 f303 	mul.w	r3, r2, r3
 8013574:	33e0      	adds	r3, #224	; 0xe0
 8013576:	687a      	ldr	r2, [r7, #4]
 8013578:	4413      	add	r3, r2
 801357a:	3304      	adds	r3, #4
 801357c:	e000      	b.n	8013580 <uxr_get_input_best_effort_stream+0x2c>
    }
    return NULL;
 801357e:	2300      	movs	r3, #0
}
 8013580:	4618      	mov	r0, r3
 8013582:	370c      	adds	r7, #12
 8013584:	46bd      	mov	sp, r7
 8013586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358a:	4770      	bx	lr

0801358c <uxr_get_input_reliable_stream>:

uxrInputReliableStream* uxr_get_input_reliable_stream(
        uxrStreamStorage* storage,
        uint8_t index)
{
 801358c:	b480      	push	{r7}
 801358e:	b083      	sub	sp, #12
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
 8013594:	460b      	mov	r3, r1
 8013596:	70fb      	strb	r3, [r7, #3]
    if (index < storage->input_reliable_size)
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 801359e:	78fa      	ldrb	r2, [r7, #3]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d208      	bcs.n	80135b6 <uxr_get_input_reliable_stream+0x2a>
    {
        return &storage->input_reliable[index];
 80135a4:	78fb      	ldrb	r3, [r7, #3]
 80135a6:	226c      	movs	r2, #108	; 0x6c
 80135a8:	fb02 f303 	mul.w	r3, r2, r3
 80135ac:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80135b0:	687a      	ldr	r2, [r7, #4]
 80135b2:	4413      	add	r3, r2
 80135b4:	e000      	b.n	80135b8 <uxr_get_input_reliable_stream+0x2c>
    }
    return NULL;
 80135b6:	2300      	movs	r3, #0
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	370c      	adds	r7, #12
 80135bc:	46bd      	mov	sp, r7
 80135be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c2:	4770      	bx	lr

080135c4 <uxr_output_streams_confirmed>:

bool uxr_output_streams_confirmed(
        const uxrStreamStorage* storage)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b084      	sub	sp, #16
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
    bool up_to_date = true;
 80135cc:	2301      	movs	r3, #1
 80135ce:	73fb      	strb	r3, [r7, #15]
    for (unsigned i = 0; i < storage->output_reliable_size && up_to_date; ++i)
 80135d0:	2300      	movs	r3, #0
 80135d2:	60bb      	str	r3, [r7, #8]
 80135d4:	e027      	b.n	8013626 <uxr_output_streams_confirmed+0x62>
    {
        UXR_LOCK((uxrMutex*) &storage->output_reliable[i].mutex);
 80135d6:	68ba      	ldr	r2, [r7, #8]
 80135d8:	4613      	mov	r3, r2
 80135da:	011b      	lsls	r3, r3, #4
 80135dc:	1a9b      	subs	r3, r3, r2
 80135de:	00db      	lsls	r3, r3, #3
 80135e0:	3388      	adds	r3, #136	; 0x88
 80135e2:	687a      	ldr	r2, [r7, #4]
 80135e4:	4413      	add	r3, r2
 80135e6:	3304      	adds	r3, #4
 80135e8:	4618      	mov	r0, r3
 80135ea:	f000 fb20 	bl	8013c2e <uxr_lock>
        up_to_date = uxr_is_output_up_to_date(&storage->output_reliable[i]);
 80135ee:	68ba      	ldr	r2, [r7, #8]
 80135f0:	4613      	mov	r3, r2
 80135f2:	011b      	lsls	r3, r3, #4
 80135f4:	1a9b      	subs	r3, r3, r2
 80135f6:	00db      	lsls	r3, r3, #3
 80135f8:	3368      	adds	r3, #104	; 0x68
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	4413      	add	r3, r2
 80135fe:	4618      	mov	r0, r3
 8013600:	f7ff fcd2 	bl	8012fa8 <uxr_is_output_up_to_date>
 8013604:	4603      	mov	r3, r0
 8013606:	73fb      	strb	r3, [r7, #15]
        UXR_UNLOCK((uxrMutex*) &storage->output_reliable[i].mutex);
 8013608:	68ba      	ldr	r2, [r7, #8]
 801360a:	4613      	mov	r3, r2
 801360c:	011b      	lsls	r3, r3, #4
 801360e:	1a9b      	subs	r3, r3, r2
 8013610:	00db      	lsls	r3, r3, #3
 8013612:	3388      	adds	r3, #136	; 0x88
 8013614:	687a      	ldr	r2, [r7, #4]
 8013616:	4413      	add	r3, r2
 8013618:	3304      	adds	r3, #4
 801361a:	4618      	mov	r0, r3
 801361c:	f000 fb16 	bl	8013c4c <uxr_unlock>
    for (unsigned i = 0; i < storage->output_reliable_size && up_to_date; ++i)
 8013620:	68bb      	ldr	r3, [r7, #8]
 8013622:	3301      	adds	r3, #1
 8013624:	60bb      	str	r3, [r7, #8]
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 801362c:	461a      	mov	r2, r3
 801362e:	68bb      	ldr	r3, [r7, #8]
 8013630:	4293      	cmp	r3, r2
 8013632:	d202      	bcs.n	801363a <uxr_output_streams_confirmed+0x76>
 8013634:	7bfb      	ldrb	r3, [r7, #15]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d1cd      	bne.n	80135d6 <uxr_output_streams_confirmed+0x12>
    }
    return up_to_date;
 801363a:	7bfb      	ldrb	r3, [r7, #15]
}
 801363c:	4618      	mov	r0, r3
 801363e:	3710      	adds	r7, #16
 8013640:	46bd      	mov	sp, r7
 8013642:	bd80      	pop	{r7, pc}

08013644 <hash_string>:
// djb2 by Dan Bernstein: http://www.cse.yorku.ca/~oz/hash.html
void hash_string(
        unsigned char* str,
        char* hash,
        bool initial)
{
 8013644:	b480      	push	{r7}
 8013646:	b089      	sub	sp, #36	; 0x24
 8013648:	af00      	add	r7, sp, #0
 801364a:	60f8      	str	r0, [r7, #12]
 801364c:	60b9      	str	r1, [r7, #8]
 801364e:	4613      	mov	r3, r2
 8013650:	71fb      	strb	r3, [r7, #7]
    hash_int_t int_hash = 5381;
 8013652:	f241 5305 	movw	r3, #5381	; 0x1505
 8013656:	617b      	str	r3, [r7, #20]

    if (initial)
 8013658:	79fb      	ldrb	r3, [r7, #7]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d002      	beq.n	8013664 <hash_string+0x20>
    {
        int_hash = *((hash_int_t*) hash);
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	617b      	str	r3, [r7, #20]
    }

    int c;

    do {
        c = *str++;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	1c5a      	adds	r2, r3, #1
 8013668:	60fa      	str	r2, [r7, #12]
 801366a:	781b      	ldrb	r3, [r3, #0]
 801366c:	61bb      	str	r3, [r7, #24]
        int_hash = ((int_hash << 5) + int_hash) + (hash_int_t)c; /* hash * 33 + c */
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	015a      	lsls	r2, r3, #5
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	441a      	add	r2, r3
 8013676:	69bb      	ldr	r3, [r7, #24]
 8013678:	4413      	add	r3, r2
 801367a:	617b      	str	r3, [r7, #20]
    } while (c);
 801367c:	69bb      	ldr	r3, [r7, #24]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d1f0      	bne.n	8013664 <hash_string+0x20>

    for (size_t i = 0; i < UXR_MATCHING_HASH_SIZE; i++)
 8013682:	2300      	movs	r3, #0
 8013684:	61fb      	str	r3, [r7, #28]
 8013686:	e00b      	b.n	80136a0 <hash_string+0x5c>
    {
        hash[i] = ((char*)&int_hash)[i];
 8013688:	f107 0214 	add.w	r2, r7, #20
 801368c:	69fb      	ldr	r3, [r7, #28]
 801368e:	441a      	add	r2, r3
 8013690:	68b9      	ldr	r1, [r7, #8]
 8013692:	69fb      	ldr	r3, [r7, #28]
 8013694:	440b      	add	r3, r1
 8013696:	7812      	ldrb	r2, [r2, #0]
 8013698:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < UXR_MATCHING_HASH_SIZE; i++)
 801369a:	69fb      	ldr	r3, [r7, #28]
 801369c:	3301      	adds	r3, #1
 801369e:	61fb      	str	r3, [r7, #28]
 80136a0:	69fb      	ldr	r3, [r7, #28]
 80136a2:	2b03      	cmp	r3, #3
 80136a4:	d9f0      	bls.n	8013688 <hash_string+0x44>
    }
}
 80136a6:	bf00      	nop
 80136a8:	bf00      	nop
 80136aa:	3724      	adds	r7, #36	; 0x24
 80136ac:	46bd      	mov	sp, r7
 80136ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b2:	4770      	bx	lr

080136b4 <find_tag_xml>:
        const char* xml,
        size_t len,
        char* tag,
        const char** content,
        size_t* content_len)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b088      	sub	sp, #32
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	60f8      	str	r0, [r7, #12]
 80136bc:	60b9      	str	r1, [r7, #8]
 80136be:	607a      	str	r2, [r7, #4]
 80136c0:	603b      	str	r3, [r7, #0]
    size_t tag_len = strlen(tag);
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f7ec fdae 	bl	8000224 <strlen>
 80136c8:	6138      	str	r0, [r7, #16]
    bool found_begin = false;
 80136ca:	2300      	movs	r3, #0
 80136cc:	77fb      	strb	r3, [r7, #31]
    bool found_end = false;
 80136ce:	2300      	movs	r3, #0
 80136d0:	77bb      	strb	r3, [r7, #30]
    for (size_t i = 1; i < len; i++)
 80136d2:	2301      	movs	r3, #1
 80136d4:	61bb      	str	r3, [r7, #24]
 80136d6:	e055      	b.n	8013784 <find_tag_xml+0xd0>
    {
        if (!found_begin && 0 == memcmp(&xml[i], tag, tag_len) && xml[i - 1] == '<')
 80136d8:	7ffb      	ldrb	r3, [r7, #31]
 80136da:	f083 0301 	eor.w	r3, r3, #1
 80136de:	b2db      	uxtb	r3, r3
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d02a      	beq.n	801373a <find_tag_xml+0x86>
 80136e4:	68fa      	ldr	r2, [r7, #12]
 80136e6:	69bb      	ldr	r3, [r7, #24]
 80136e8:	4413      	add	r3, r2
 80136ea:	693a      	ldr	r2, [r7, #16]
 80136ec:	6879      	ldr	r1, [r7, #4]
 80136ee:	4618      	mov	r0, r3
 80136f0:	f00d fad6 	bl	8020ca0 <memcmp>
 80136f4:	4603      	mov	r3, r0
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d11f      	bne.n	801373a <find_tag_xml+0x86>
 80136fa:	69bb      	ldr	r3, [r7, #24]
 80136fc:	3b01      	subs	r3, #1
 80136fe:	68fa      	ldr	r2, [r7, #12]
 8013700:	4413      	add	r3, r2
 8013702:	781b      	ldrb	r3, [r3, #0]
 8013704:	2b3c      	cmp	r3, #60	; 0x3c
 8013706:	d118      	bne.n	801373a <find_tag_xml+0x86>
        {
            size_t tag_opener_len = 0;
 8013708:	2300      	movs	r3, #0
 801370a:	617b      	str	r3, [r7, #20]
            while (xml[i + tag_opener_len] != '>')
 801370c:	e002      	b.n	8013714 <find_tag_xml+0x60>
            {
                tag_opener_len++;
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	3301      	adds	r3, #1
 8013712:	617b      	str	r3, [r7, #20]
            while (xml[i + tag_opener_len] != '>')
 8013714:	69ba      	ldr	r2, [r7, #24]
 8013716:	697b      	ldr	r3, [r7, #20]
 8013718:	4413      	add	r3, r2
 801371a:	68fa      	ldr	r2, [r7, #12]
 801371c:	4413      	add	r3, r2
 801371e:	781b      	ldrb	r3, [r3, #0]
 8013720:	2b3e      	cmp	r3, #62	; 0x3e
 8013722:	d1f4      	bne.n	801370e <find_tag_xml+0x5a>
            }
            *content = &xml[i + tag_opener_len + 1];
 8013724:	69ba      	ldr	r2, [r7, #24]
 8013726:	697b      	ldr	r3, [r7, #20]
 8013728:	4413      	add	r3, r2
 801372a:	3301      	adds	r3, #1
 801372c:	68fa      	ldr	r2, [r7, #12]
 801372e:	441a      	add	r2, r3
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	601a      	str	r2, [r3, #0]
            found_begin = true;
 8013734:	2301      	movs	r3, #1
 8013736:	77fb      	strb	r3, [r7, #31]
        {
 8013738:	e021      	b.n	801377e <find_tag_xml+0xca>
        }
        else if (found_begin && 0 == memcmp(&xml[i], tag, tag_len) && xml[i - 1] == '/')
 801373a:	7ffb      	ldrb	r3, [r7, #31]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d01e      	beq.n	801377e <find_tag_xml+0xca>
 8013740:	68fa      	ldr	r2, [r7, #12]
 8013742:	69bb      	ldr	r3, [r7, #24]
 8013744:	4413      	add	r3, r2
 8013746:	693a      	ldr	r2, [r7, #16]
 8013748:	6879      	ldr	r1, [r7, #4]
 801374a:	4618      	mov	r0, r3
 801374c:	f00d faa8 	bl	8020ca0 <memcmp>
 8013750:	4603      	mov	r3, r0
 8013752:	2b00      	cmp	r3, #0
 8013754:	d113      	bne.n	801377e <find_tag_xml+0xca>
 8013756:	69bb      	ldr	r3, [r7, #24]
 8013758:	3b01      	subs	r3, #1
 801375a:	68fa      	ldr	r2, [r7, #12]
 801375c:	4413      	add	r3, r2
 801375e:	781b      	ldrb	r3, [r3, #0]
 8013760:	2b2f      	cmp	r3, #47	; 0x2f
 8013762:	d10c      	bne.n	801377e <find_tag_xml+0xca>
        {
            *content_len = (size_t)(&xml[i - 2] - *content);
 8013764:	69bb      	ldr	r3, [r7, #24]
 8013766:	3b02      	subs	r3, #2
 8013768:	68fa      	ldr	r2, [r7, #12]
 801376a:	441a      	add	r2, r3
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	1ad3      	subs	r3, r2, r3
 8013772:	461a      	mov	r2, r3
 8013774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013776:	601a      	str	r2, [r3, #0]
            found_end = true;
 8013778:	2301      	movs	r3, #1
 801377a:	77bb      	strb	r3, [r7, #30]
            break;
 801377c:	e006      	b.n	801378c <find_tag_xml+0xd8>
    for (size_t i = 1; i < len; i++)
 801377e:	69bb      	ldr	r3, [r7, #24]
 8013780:	3301      	adds	r3, #1
 8013782:	61bb      	str	r3, [r7, #24]
 8013784:	69ba      	ldr	r2, [r7, #24]
 8013786:	68bb      	ldr	r3, [r7, #8]
 8013788:	429a      	cmp	r2, r3
 801378a:	d3a5      	bcc.n	80136d8 <find_tag_xml+0x24>
        }
    }

    return found_begin && found_end;
 801378c:	7ffb      	ldrb	r3, [r7, #31]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d004      	beq.n	801379c <find_tag_xml+0xe8>
 8013792:	7fbb      	ldrb	r3, [r7, #30]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d001      	beq.n	801379c <find_tag_xml+0xe8>
 8013798:	2301      	movs	r3, #1
 801379a:	e000      	b.n	801379e <find_tag_xml+0xea>
 801379c:	2300      	movs	r3, #0
 801379e:	f003 0301 	and.w	r3, r3, #1
 80137a2:	b2db      	uxtb	r3, r3
}
 80137a4:	4618      	mov	r0, r3
 80137a6:	3720      	adds	r7, #32
 80137a8:	46bd      	mov	sp, r7
 80137aa:	bd80      	pop	{r7, pc}

080137ac <find_tag_property>:
        size_t len,
        const char* tag,
        char* property,
        const char** content,
        size_t* content_len)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b088      	sub	sp, #32
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	60f8      	str	r0, [r7, #12]
 80137b4:	60b9      	str	r1, [r7, #8]
 80137b6:	607a      	str	r2, [r7, #4]
 80137b8:	603b      	str	r3, [r7, #0]
    size_t tag_len = strlen(tag);
 80137ba:	6878      	ldr	r0, [r7, #4]
 80137bc:	f7ec fd32 	bl	8000224 <strlen>
 80137c0:	6178      	str	r0, [r7, #20]
    size_t property_len = strlen(property);
 80137c2:	6838      	ldr	r0, [r7, #0]
 80137c4:	f7ec fd2e 	bl	8000224 <strlen>
 80137c8:	6138      	str	r0, [r7, #16]

    bool found_tag = false;
 80137ca:	2300      	movs	r3, #0
 80137cc:	77fb      	strb	r3, [r7, #31]
    bool found_property = false;
 80137ce:	2300      	movs	r3, #0
 80137d0:	77bb      	strb	r3, [r7, #30]
    for (size_t i = 1; i < len; i++)
 80137d2:	2301      	movs	r3, #1
 80137d4:	61bb      	str	r3, [r7, #24]
 80137d6:	e04d      	b.n	8013874 <find_tag_property+0xc8>
    {
        if (!found_tag && 0 == memcmp(&xml[i], tag, tag_len) && xml[i - 1] == '<')
 80137d8:	7ffb      	ldrb	r3, [r7, #31]
 80137da:	f083 0301 	eor.w	r3, r3, #1
 80137de:	b2db      	uxtb	r3, r3
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d014      	beq.n	801380e <find_tag_property+0x62>
 80137e4:	68fa      	ldr	r2, [r7, #12]
 80137e6:	69bb      	ldr	r3, [r7, #24]
 80137e8:	4413      	add	r3, r2
 80137ea:	697a      	ldr	r2, [r7, #20]
 80137ec:	6879      	ldr	r1, [r7, #4]
 80137ee:	4618      	mov	r0, r3
 80137f0:	f00d fa56 	bl	8020ca0 <memcmp>
 80137f4:	4603      	mov	r3, r0
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d109      	bne.n	801380e <find_tag_property+0x62>
 80137fa:	69bb      	ldr	r3, [r7, #24]
 80137fc:	3b01      	subs	r3, #1
 80137fe:	68fa      	ldr	r2, [r7, #12]
 8013800:	4413      	add	r3, r2
 8013802:	781b      	ldrb	r3, [r3, #0]
 8013804:	2b3c      	cmp	r3, #60	; 0x3c
 8013806:	d102      	bne.n	801380e <find_tag_property+0x62>
        {
            found_tag = true;
 8013808:	2301      	movs	r3, #1
 801380a:	77fb      	strb	r3, [r7, #31]
 801380c:	e02f      	b.n	801386e <find_tag_property+0xc2>
        }
        else if (found_tag && 0 == memcmp(&xml[i], property, property_len))
 801380e:	7ffb      	ldrb	r3, [r7, #31]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d02c      	beq.n	801386e <find_tag_property+0xc2>
 8013814:	68fa      	ldr	r2, [r7, #12]
 8013816:	69bb      	ldr	r3, [r7, #24]
 8013818:	4413      	add	r3, r2
 801381a:	693a      	ldr	r2, [r7, #16]
 801381c:	6839      	ldr	r1, [r7, #0]
 801381e:	4618      	mov	r0, r3
 8013820:	f00d fa3e 	bl	8020ca0 <memcmp>
 8013824:	4603      	mov	r3, r0
 8013826:	2b00      	cmp	r3, #0
 8013828:	d121      	bne.n	801386e <find_tag_property+0xc2>
        {
            *content = &xml[i + property_len + 2];
 801382a:	69ba      	ldr	r2, [r7, #24]
 801382c:	693b      	ldr	r3, [r7, #16]
 801382e:	4413      	add	r3, r2
 8013830:	3302      	adds	r3, #2
 8013832:	68fa      	ldr	r2, [r7, #12]
 8013834:	441a      	add	r2, r3
 8013836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013838:	601a      	str	r2, [r3, #0]
            i += property_len + 2;
 801383a:	693a      	ldr	r2, [r7, #16]
 801383c:	69bb      	ldr	r3, [r7, #24]
 801383e:	4413      	add	r3, r2
 8013840:	3302      	adds	r3, #2
 8013842:	61bb      	str	r3, [r7, #24]
            *content_len = 0;
 8013844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013846:	2200      	movs	r2, #0
 8013848:	601a      	str	r2, [r3, #0]
            while (xml[i + (*content_len)] != '"')
 801384a:	e004      	b.n	8013856 <find_tag_property+0xaa>
            {
                *content_len += 1;
 801384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	1c5a      	adds	r2, r3, #1
 8013852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013854:	601a      	str	r2, [r3, #0]
            while (xml[i + (*content_len)] != '"')
 8013856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013858:	681a      	ldr	r2, [r3, #0]
 801385a:	69bb      	ldr	r3, [r7, #24]
 801385c:	4413      	add	r3, r2
 801385e:	68fa      	ldr	r2, [r7, #12]
 8013860:	4413      	add	r3, r2
 8013862:	781b      	ldrb	r3, [r3, #0]
 8013864:	2b22      	cmp	r3, #34	; 0x22
 8013866:	d1f1      	bne.n	801384c <find_tag_property+0xa0>
            }
            found_property = true;
 8013868:	2301      	movs	r3, #1
 801386a:	77bb      	strb	r3, [r7, #30]
            break;
 801386c:	e006      	b.n	801387c <find_tag_property+0xd0>
    for (size_t i = 1; i < len; i++)
 801386e:	69bb      	ldr	r3, [r7, #24]
 8013870:	3301      	adds	r3, #1
 8013872:	61bb      	str	r3, [r7, #24]
 8013874:	69ba      	ldr	r2, [r7, #24]
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	429a      	cmp	r2, r3
 801387a:	d3ad      	bcc.n	80137d8 <find_tag_property+0x2c>
        }
    }

    return found_tag && found_property;
 801387c:	7ffb      	ldrb	r3, [r7, #31]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d004      	beq.n	801388c <find_tag_property+0xe0>
 8013882:	7fbb      	ldrb	r3, [r7, #30]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d001      	beq.n	801388c <find_tag_property+0xe0>
 8013888:	2301      	movs	r3, #1
 801388a:	e000      	b.n	801388e <find_tag_property+0xe2>
 801388c:	2300      	movs	r3, #0
 801388e:	f003 0301 	and.w	r3, r3, #1
 8013892:	b2db      	uxtb	r3, r3
}
 8013894:	4618      	mov	r0, r3
 8013896:	3720      	adds	r7, #32
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}

0801389c <uxr_generate_hash_from_xml>:

bool uxr_generate_hash_from_xml(
        const char* xml,
        uxrObjectId id,
        char* hash)
{
 801389c:	b5b0      	push	{r4, r5, r7, lr}
 801389e:	b0b6      	sub	sp, #216	; 0xd8
 80138a0:	af02      	add	r7, sp, #8
 80138a2:	60f8      	str	r0, [r7, #12]
 80138a4:	60b9      	str	r1, [r7, #8]
 80138a6:	607a      	str	r2, [r7, #4]
    bool found = true;
 80138a8:	2301      	movs	r3, #1
 80138aa:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    char name_type_buffer[100];

    switch (id.type)
 80138ae:	7abb      	ldrb	r3, [r7, #10]
 80138b0:	2b06      	cmp	r3, #6
 80138b2:	dc02      	bgt.n	80138ba <uxr_generate_hash_from_xml+0x1e>
 80138b4:	2b05      	cmp	r3, #5
 80138b6:	da05      	bge.n	80138c4 <uxr_generate_hash_from_xml+0x28>
 80138b8:	e142      	b.n	8013b40 <uxr_generate_hash_from_xml+0x2a4>
 80138ba:	3b07      	subs	r3, #7
 80138bc:	2b01      	cmp	r3, #1
 80138be:	f200 813f 	bhi.w	8013b40 <uxr_generate_hash_from_xml+0x2a4>
 80138c2:	e0a2      	b.n	8013a0a <uxr_generate_hash_from_xml+0x16e>
    {
        case UXR_DATAREADER_ID:
        case UXR_DATAWRITER_ID:
        {
            const char* data_reader_or_writer = (id.type == UXR_DATAREADER_ID) ? "data_reader\0" : "data_writer\0";
 80138c4:	7abb      	ldrb	r3, [r7, #10]
 80138c6:	2b06      	cmp	r3, #6
 80138c8:	d101      	bne.n	80138ce <uxr_generate_hash_from_xml+0x32>
 80138ca:	4ba0      	ldr	r3, [pc, #640]	; (8013b4c <uxr_generate_hash_from_xml+0x2b0>)
 80138cc:	e000      	b.n	80138d0 <uxr_generate_hash_from_xml+0x34>
 80138ce:	4ba0      	ldr	r3, [pc, #640]	; (8013b50 <uxr_generate_hash_from_xml+0x2b4>)
 80138d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            char xml_strings[3][12] =
 80138d4:	4b9f      	ldr	r3, [pc, #636]	; (8013b54 <uxr_generate_hash_from_xml+0x2b8>)
 80138d6:	f107 0414 	add.w	r4, r7, #20
 80138da:	461d      	mov	r5, r3
 80138dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138e4:	682b      	ldr	r3, [r5, #0]
 80138e6:	6023      	str	r3, [r4, #0]
            {
                "dds",
                "",
                "topic"
            };
            memmove(xml_strings[1], data_reader_or_writer, 12);
 80138e8:	f107 0314 	add.w	r3, r7, #20
 80138ec:	330c      	adds	r3, #12
 80138ee:	220c      	movs	r2, #12
 80138f0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80138f4:	4618      	mov	r0, r3
 80138f6:	f00d f9f1 	bl	8020cdc <memmove>

            const char* content_in = xml;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            char* content_out;
            size_t content_len_in = strlen(content_in);
 8013900:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8013904:	f7ec fc8e 	bl	8000224 <strlen>
 8013908:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
            size_t content_len_out;

            for (size_t i = 0; i < 3; i++)
 801390c:	2300      	movs	r3, #0
 801390e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013912:	e025      	b.n	8013960 <uxr_generate_hash_from_xml+0xc4>
            {
                if (find_tag_xml(content_in, content_len_in, xml_strings[i], (const char**)&content_out,
 8013914:	f107 0114 	add.w	r1, r7, #20
 8013918:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801391c:	4613      	mov	r3, r2
 801391e:	005b      	lsls	r3, r3, #1
 8013920:	4413      	add	r3, r2
 8013922:	009b      	lsls	r3, r3, #2
 8013924:	18ca      	adds	r2, r1, r3
 8013926:	f107 0154 	add.w	r1, r7, #84	; 0x54
 801392a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801392e:	9300      	str	r3, [sp, #0]
 8013930:	460b      	mov	r3, r1
 8013932:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8013936:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801393a:	f7ff febb 	bl	80136b4 <find_tag_xml>
 801393e:	4603      	mov	r3, r0
 8013940:	2b00      	cmp	r3, #0
 8013942:	d006      	beq.n	8013952 <uxr_generate_hash_from_xml+0xb6>
                        &content_len_out))
                {
                    content_in = content_out;
 8013944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013946:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                    content_len_in = content_len_out;
 801394a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801394c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013950:	e001      	b.n	8013956 <uxr_generate_hash_from_xml+0xba>
                }
                else
                {
                    return false;
 8013952:	2300      	movs	r3, #0
 8013954:	e0f6      	b.n	8013b44 <uxr_generate_hash_from_xml+0x2a8>
            for (size_t i = 0; i < 3; i++)
 8013956:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801395a:	3301      	adds	r3, #1
 801395c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013964:	2b02      	cmp	r3, #2
 8013966:	d9d5      	bls.n	8013914 <uxr_generate_hash_from_xml+0x78>
            }

            size_t topic_name_len;
            size_t type_name_len;

            found &= find_tag_xml(content_in, content_len_in, "name", (const char**)&content_out, &topic_name_len);
 8013968:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801396c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013970:	9300      	str	r3, [sp, #0]
 8013972:	4613      	mov	r3, r2
 8013974:	4a78      	ldr	r2, [pc, #480]	; (8013b58 <uxr_generate_hash_from_xml+0x2bc>)
 8013976:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 801397a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801397e:	f7ff fe99 	bl	80136b4 <find_tag_xml>
 8013982:	4603      	mov	r3, r0
 8013984:	461a      	mov	r2, r3
 8013986:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 801398a:	4013      	ands	r3, r2
 801398c:	2b00      	cmp	r3, #0
 801398e:	bf14      	ite	ne
 8013990:	2301      	movne	r3, #1
 8013992:	2300      	moveq	r3, #0
 8013994:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
            memcpy(name_type_buffer, content_out, topic_name_len);
 8013998:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801399a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801399c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80139a0:	4618      	mov	r0, r3
 80139a2:	f00d f98d 	bl	8020cc0 <memcpy>

            found &= find_tag_xml(content_in, content_len_in, "dataType", (const char**)&content_out, &type_name_len);
 80139a6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80139aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139ae:	9300      	str	r3, [sp, #0]
 80139b0:	4613      	mov	r3, r2
 80139b2:	4a6a      	ldr	r2, [pc, #424]	; (8013b5c <uxr_generate_hash_from_xml+0x2c0>)
 80139b4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80139b8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80139bc:	f7ff fe7a 	bl	80136b4 <find_tag_xml>
 80139c0:	4603      	mov	r3, r0
 80139c2:	461a      	mov	r2, r3
 80139c4:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80139c8:	4013      	ands	r3, r2
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	bf14      	ite	ne
 80139ce:	2301      	movne	r3, #1
 80139d0:	2300      	moveq	r3, #0
 80139d2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
            memcpy(&name_type_buffer[topic_name_len], content_out, type_name_len);
 80139d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139d8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80139dc:	4413      	add	r3, r2
 80139de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80139e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139e2:	4618      	mov	r0, r3
 80139e4:	f00d f96c 	bl	8020cc0 <memcpy>

            name_type_buffer[topic_name_len + type_name_len] = '\0';
 80139e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80139ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139ec:	4413      	add	r3, r2
 80139ee:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80139f2:	4413      	add	r3, r2
 80139f4:	2200      	movs	r2, #0
 80139f6:	f803 2c78 	strb.w	r2, [r3, #-120]

            hash_string((unsigned char*) name_type_buffer, hash, false);
 80139fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80139fe:	2200      	movs	r2, #0
 8013a00:	6879      	ldr	r1, [r7, #4]
 8013a02:	4618      	mov	r0, r3
 8013a04:	f7ff fe1e 	bl	8013644 <hash_string>
 8013a08:	e09a      	b.n	8013b40 <uxr_generate_hash_from_xml+0x2a4>
            char* content_out;
            size_t service_name_len;
            size_t request_type_name_len;
            size_t reply_type_name_len;

            found &= find_tag_property(xml,
 8013a0a:	68f8      	ldr	r0, [r7, #12]
 8013a0c:	f7ec fc0a 	bl	8000224 <strlen>
 8013a10:	4601      	mov	r1, r0
                            strlen(xml),
                            (id.type == UXR_REQUESTER_ID) ? "requester" : "replier",
 8013a12:	7abb      	ldrb	r3, [r7, #10]
            found &= find_tag_property(xml,
 8013a14:	2b07      	cmp	r3, #7
 8013a16:	d101      	bne.n	8013a1c <uxr_generate_hash_from_xml+0x180>
 8013a18:	4a51      	ldr	r2, [pc, #324]	; (8013b60 <uxr_generate_hash_from_xml+0x2c4>)
 8013a1a:	e000      	b.n	8013a1e <uxr_generate_hash_from_xml+0x182>
 8013a1c:	4a51      	ldr	r2, [pc, #324]	; (8013b64 <uxr_generate_hash_from_xml+0x2c8>)
 8013a1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013a22:	9301      	str	r3, [sp, #4]
 8013a24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013a28:	9300      	str	r3, [sp, #0]
 8013a2a:	4b4f      	ldr	r3, [pc, #316]	; (8013b68 <uxr_generate_hash_from_xml+0x2cc>)
 8013a2c:	68f8      	ldr	r0, [r7, #12]
 8013a2e:	f7ff febd 	bl	80137ac <find_tag_property>
 8013a32:	4603      	mov	r3, r0
 8013a34:	461a      	mov	r2, r3
 8013a36:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8013a3a:	4013      	ands	r3, r2
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	bf14      	ite	ne
 8013a40:	2301      	movne	r3, #1
 8013a42:	2300      	moveq	r3, #0
 8013a44:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
                            "service_name",
                            (const char**)&content_out,
                            &service_name_len);
            if (found)
 8013a48:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d006      	beq.n	8013a5e <uxr_generate_hash_from_xml+0x1c2>
            {
                memcpy(name_type_buffer, content_out, service_name_len);
 8013a50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013a52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013a54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f00d f931 	bl	8020cc0 <memcpy>
            }

            found &= find_tag_property(xml,
 8013a5e:	68f8      	ldr	r0, [r7, #12]
 8013a60:	f7ec fbe0 	bl	8000224 <strlen>
 8013a64:	4601      	mov	r1, r0
                            strlen(xml),
                            (id.type == UXR_REQUESTER_ID) ? "requester" : "replier",
 8013a66:	7abb      	ldrb	r3, [r7, #10]
            found &= find_tag_property(xml,
 8013a68:	2b07      	cmp	r3, #7
 8013a6a:	d101      	bne.n	8013a70 <uxr_generate_hash_from_xml+0x1d4>
 8013a6c:	4a3c      	ldr	r2, [pc, #240]	; (8013b60 <uxr_generate_hash_from_xml+0x2c4>)
 8013a6e:	e000      	b.n	8013a72 <uxr_generate_hash_from_xml+0x1d6>
 8013a70:	4a3c      	ldr	r2, [pc, #240]	; (8013b64 <uxr_generate_hash_from_xml+0x2c8>)
 8013a72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013a76:	9301      	str	r3, [sp, #4]
 8013a78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013a7c:	9300      	str	r3, [sp, #0]
 8013a7e:	4b3b      	ldr	r3, [pc, #236]	; (8013b6c <uxr_generate_hash_from_xml+0x2d0>)
 8013a80:	68f8      	ldr	r0, [r7, #12]
 8013a82:	f7ff fe93 	bl	80137ac <find_tag_property>
 8013a86:	4603      	mov	r3, r0
 8013a88:	461a      	mov	r2, r3
 8013a8a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8013a8e:	4013      	ands	r3, r2
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	bf14      	ite	ne
 8013a94:	2301      	movne	r3, #1
 8013a96:	2300      	moveq	r3, #0
 8013a98:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
                            "request_type",
                            (const char**)&content_out,
                            &request_type_name_len);
            if (found)
 8013a9c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d008      	beq.n	8013ab6 <uxr_generate_hash_from_xml+0x21a>
            {
                memcpy(&name_type_buffer[service_name_len], content_out, request_type_name_len);
 8013aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013aa6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013aaa:	4413      	add	r3, r2
 8013aac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013aae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f00d f905 	bl	8020cc0 <memcpy>
            }

            found &= find_tag_property(xml,
 8013ab6:	68f8      	ldr	r0, [r7, #12]
 8013ab8:	f7ec fbb4 	bl	8000224 <strlen>
 8013abc:	4601      	mov	r1, r0
                            strlen(xml),
                            (id.type == UXR_REQUESTER_ID) ? "requester" : "replier",
 8013abe:	7abb      	ldrb	r3, [r7, #10]
            found &= find_tag_property(xml,
 8013ac0:	2b07      	cmp	r3, #7
 8013ac2:	d101      	bne.n	8013ac8 <uxr_generate_hash_from_xml+0x22c>
 8013ac4:	4a26      	ldr	r2, [pc, #152]	; (8013b60 <uxr_generate_hash_from_xml+0x2c4>)
 8013ac6:	e000      	b.n	8013aca <uxr_generate_hash_from_xml+0x22e>
 8013ac8:	4a26      	ldr	r2, [pc, #152]	; (8013b64 <uxr_generate_hash_from_xml+0x2c8>)
 8013aca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013ace:	9301      	str	r3, [sp, #4]
 8013ad0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013ad4:	9300      	str	r3, [sp, #0]
 8013ad6:	4b26      	ldr	r3, [pc, #152]	; (8013b70 <uxr_generate_hash_from_xml+0x2d4>)
 8013ad8:	68f8      	ldr	r0, [r7, #12]
 8013ada:	f7ff fe67 	bl	80137ac <find_tag_property>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	461a      	mov	r2, r3
 8013ae2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8013ae6:	4013      	ands	r3, r2
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	bf14      	ite	ne
 8013aec:	2301      	movne	r3, #1
 8013aee:	2300      	moveq	r3, #0
 8013af0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
                            "reply_type",
                            (const char**)&content_out,
                            &reply_type_name_len);
            if (found)
 8013af4:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d015      	beq.n	8013b28 <uxr_generate_hash_from_xml+0x28c>
            {
                memcpy(&name_type_buffer[service_name_len + request_type_name_len], content_out, reply_type_name_len);
 8013afc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b00:	4413      	add	r3, r2
 8013b02:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013b06:	4413      	add	r3, r2
 8013b08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013b0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f00d f8d7 	bl	8020cc0 <memcpy>
                name_type_buffer[service_name_len + request_type_name_len + reply_type_name_len] = '\0';
 8013b12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b16:	441a      	add	r2, r3
 8013b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b1a:	4413      	add	r3, r2
 8013b1c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8013b20:	4413      	add	r3, r2
 8013b22:	2200      	movs	r2, #0
 8013b24:	f803 2c78 	strb.w	r2, [r3, #-120]
            }

            if (found)
 8013b28:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d006      	beq.n	8013b3e <uxr_generate_hash_from_xml+0x2a2>
            {
                hash_string((unsigned char*) name_type_buffer, hash, false);
 8013b30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013b34:	2200      	movs	r2, #0
 8013b36:	6879      	ldr	r1, [r7, #4]
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7ff fd83 	bl	8013644 <hash_string>
            }
            break;
 8013b3e:	bf00      	nop
        }
    }

    return found;
 8013b40:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 8013b44:	4618      	mov	r0, r3
 8013b46:	37d0      	adds	r7, #208	; 0xd0
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bdb0      	pop	{r4, r5, r7, pc}
 8013b4c:	080258b8 	.word	0x080258b8
 8013b50:	080258c8 	.word	0x080258c8
 8013b54:	0802592c 	.word	0x0802592c
 8013b58:	080258d8 	.word	0x080258d8
 8013b5c:	080258e0 	.word	0x080258e0
 8013b60:	080258ec 	.word	0x080258ec
 8013b64:	080258f8 	.word	0x080258f8
 8013b68:	08025900 	.word	0x08025900
 8013b6c:	08025910 	.word	0x08025910
 8013b70:	08025920 	.word	0x08025920

08013b74 <uxr_generate_hash_from_strings>:

bool uxr_generate_hash_from_strings(
        char* hash,
        size_t number_strings,
        ...)
{
 8013b74:	b40e      	push	{r1, r2, r3}
 8013b76:	b580      	push	{r7, lr}
 8013b78:	b087      	sub	sp, #28
 8013b7a:	af00      	add	r7, sp, #0
 8013b7c:	6078      	str	r0, [r7, #4]
    va_list args;
    va_start(args, number_strings);
 8013b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013b82:	60fb      	str	r3, [r7, #12]

    char* s = va_arg(args, char*);
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	1d1a      	adds	r2, r3, #4
 8013b88:	60fa      	str	r2, [r7, #12]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	613b      	str	r3, [r7, #16]
    hash_string((unsigned char*) s, hash, false);
 8013b8e:	2200      	movs	r2, #0
 8013b90:	6879      	ldr	r1, [r7, #4]
 8013b92:	6938      	ldr	r0, [r7, #16]
 8013b94:	f7ff fd56 	bl	8013644 <hash_string>

    for (size_t i = 1; i < number_strings; i++)
 8013b98:	2301      	movs	r3, #1
 8013b9a:	617b      	str	r3, [r7, #20]
 8013b9c:	e00c      	b.n	8013bb8 <uxr_generate_hash_from_strings+0x44>
    {
        s = va_arg(args, char*);
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	1d1a      	adds	r2, r3, #4
 8013ba2:	60fa      	str	r2, [r7, #12]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	613b      	str	r3, [r7, #16]
        hash_string((unsigned char*) s, hash, true);
 8013ba8:	2201      	movs	r2, #1
 8013baa:	6879      	ldr	r1, [r7, #4]
 8013bac:	6938      	ldr	r0, [r7, #16]
 8013bae:	f7ff fd49 	bl	8013644 <hash_string>
    for (size_t i = 1; i < number_strings; i++)
 8013bb2:	697b      	ldr	r3, [r7, #20]
 8013bb4:	3301      	adds	r3, #1
 8013bb6:	617b      	str	r3, [r7, #20]
 8013bb8:	697a      	ldr	r2, [r7, #20]
 8013bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d3ee      	bcc.n	8013b9e <uxr_generate_hash_from_strings+0x2a>
    }

    va_end(args);
    return true;
 8013bc0:	2301      	movs	r3, #1
}
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	371c      	adds	r7, #28
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013bcc:	b003      	add	sp, #12
 8013bce:	4770      	bx	lr

08013bd0 <uxr_match_endpoint_qosbinary>:

bool uxr_match_endpoint_qosbinary(
        const OBJK_Endpoint_QosBinary* entity_1,
        const OBJK_Endpoint_QosBinary* entity_2)
{
 8013bd0:	b480      	push	{r7}
 8013bd2:	b085      	sub	sp, #20
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	6039      	str	r1, [r7, #0]
    bool matched = true;
 8013bda:	2301      	movs	r3, #1
 8013bdc:	73fb      	strb	r3, [r7, #15]
    matched &= entity_1->qos_flags == entity_2->qos_flags;
 8013bde:	7bfb      	ldrb	r3, [r7, #15]
 8013be0:	687a      	ldr	r2, [r7, #4]
 8013be2:	8811      	ldrh	r1, [r2, #0]
 8013be4:	683a      	ldr	r2, [r7, #0]
 8013be6:	8812      	ldrh	r2, [r2, #0]
 8013be8:	4291      	cmp	r1, r2
 8013bea:	bf0c      	ite	eq
 8013bec:	2201      	moveq	r2, #1
 8013bee:	2200      	movne	r2, #0
 8013bf0:	b2d2      	uxtb	r2, r2
 8013bf2:	4013      	ands	r3, r2
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	bf14      	ite	ne
 8013bf8:	2301      	movne	r3, #1
 8013bfa:	2300      	moveq	r3, #0
 8013bfc:	73fb      	strb	r3, [r7, #15]
    return matched;
 8013bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c00:	4618      	mov	r0, r3
 8013c02:	3714      	adds	r7, #20
 8013c04:	46bd      	mov	sp, r7
 8013c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0a:	4770      	bx	lr

08013c0c <uxr_init_lock>:
//                             PRIVATE
//==================================================================

void uxr_init_lock(
        uxrMutex* mutex)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b082      	sub	sp, #8
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
#if defined(PLATFORM_NAME_FREERTOS)
    mutex->impl = xSemaphoreCreateRecursiveMutexStatic( &mutex->xMutexBuffer );
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	3304      	adds	r3, #4
 8013c18:	4619      	mov	r1, r3
 8013c1a:	2004      	movs	r0, #4
 8013c1c:	f7f3 fa01 	bl	8007022 <xQueueCreateMutexStatic>
 8013c20:	4602      	mov	r2, r0
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	601a      	str	r2, [r3, #0]
    pthread_mutexattr_settype(&mat, PTHREAD_MUTEX_RECURSIVE);
    pthread_mutex_init(&mutex->impl, &mat);
#else
#error XRCE multithreading not supported for this platform.
#endif /* if defined(PLATFORM_NAME_FREERTOS) */
}
 8013c26:	bf00      	nop
 8013c28:	3708      	adds	r7, #8
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}

08013c2e <uxr_lock>:

void uxr_lock(
        uxrMutex* mutex)
{
 8013c2e:	b580      	push	{r7, lr}
 8013c30:	b082      	sub	sp, #8
 8013c32:	af00      	add	r7, sp, #0
 8013c34:	6078      	str	r0, [r7, #4]
#if defined(PLATFORM_NAME_FREERTOS)
    xSemaphoreTakeRecursive(mutex->impl, portMAX_DELAY);
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7f3 fa3e 	bl	80070c0 <xQueueTakeMutexRecursive>
#elif defined(UCLIENT_PLATFORM_POSIX)
    pthread_mutex_lock(&mutex->impl);
#else
#error XRCE multithreading not supported for this platform.
#endif /* if defined(PLATFORM_NAME_FREERTOS) */
}
 8013c44:	bf00      	nop
 8013c46:	3708      	adds	r7, #8
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}

08013c4c <uxr_unlock>:

void uxr_unlock(
        uxrMutex* mutex)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b082      	sub	sp, #8
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
#if defined(PLATFORM_NAME_FREERTOS)
    xSemaphoreGiveRecursive(mutex->impl);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f7f3 f9fd 	bl	8007058 <xQueueGiveMutexRecursive>
#elif defined(UCLIENT_PLATFORM_POSIX)
    pthread_mutex_unlock(&mutex->impl);
#else
#error XRCE multithreading not supported for this platform.
#endif /* if defined(PLATFORM_NAME_FREERTOS) */
}
 8013c5e:	bf00      	nop
 8013c60:	3708      	adds	r7, #8
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}

08013c66 <uxr_get_stream_mutex_from_id>:

uxrMutex* uxr_get_stream_mutex_from_id(
        struct uxrSession* session,
        uxrStreamId stream_id)
{
 8013c66:	b580      	push	{r7, lr}
 8013c68:	b088      	sub	sp, #32
 8013c6a:	af00      	add	r7, sp, #0
 8013c6c:	6078      	str	r0, [r7, #4]
 8013c6e:	6039      	str	r1, [r7, #0]
    uxrMutex* mutex = NULL;
 8013c70:	2300      	movs	r3, #0
 8013c72:	61fb      	str	r3, [r7, #28]

    if (stream_id.type == UXR_BEST_EFFORT_STREAM && stream_id.direction == UXR_OUTPUT_STREAM)
 8013c74:	78bb      	ldrb	r3, [r7, #2]
 8013c76:	2b01      	cmp	r3, #1
 8013c78:	d113      	bne.n	8013ca2 <uxr_get_stream_mutex_from_id+0x3c>
 8013c7a:	78fb      	ldrb	r3, [r7, #3]
 8013c7c:	2b01      	cmp	r3, #1
 8013c7e:	d110      	bne.n	8013ca2 <uxr_get_stream_mutex_from_id+0x3c>
    {
        uxrOutputBestEffortStream* stream = uxr_get_output_best_effort_stream(&session->streams, stream_id.index);
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	3308      	adds	r3, #8
 8013c84:	787a      	ldrb	r2, [r7, #1]
 8013c86:	4611      	mov	r1, r2
 8013c88:	4618      	mov	r0, r3
 8013c8a:	f7ff fc2d 	bl	80134e8 <uxr_get_output_best_effort_stream>
 8013c8e:	61b8      	str	r0, [r7, #24]
        mutex = (stream == NULL) ? NULL : &stream->mutex;
 8013c90:	69bb      	ldr	r3, [r7, #24]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d002      	beq.n	8013c9c <uxr_get_stream_mutex_from_id+0x36>
 8013c96:	69bb      	ldr	r3, [r7, #24]
 8013c98:	3310      	adds	r3, #16
 8013c9a:	e000      	b.n	8013c9e <uxr_get_stream_mutex_from_id+0x38>
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	61fb      	str	r3, [r7, #28]
    {
 8013ca0:	e043      	b.n	8013d2a <uxr_get_stream_mutex_from_id+0xc4>
    }
    else if (stream_id.type == UXR_BEST_EFFORT_STREAM && stream_id.direction == UXR_INPUT_STREAM)
 8013ca2:	78bb      	ldrb	r3, [r7, #2]
 8013ca4:	2b01      	cmp	r3, #1
 8013ca6:	d113      	bne.n	8013cd0 <uxr_get_stream_mutex_from_id+0x6a>
 8013ca8:	78fb      	ldrb	r3, [r7, #3]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d110      	bne.n	8013cd0 <uxr_get_stream_mutex_from_id+0x6a>
    {
        uxrInputBestEffortStream* stream = uxr_get_input_best_effort_stream(&session->streams, stream_id.index);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	3308      	adds	r3, #8
 8013cb2:	787a      	ldrb	r2, [r7, #1]
 8013cb4:	4611      	mov	r1, r2
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f7ff fc4c 	bl	8013554 <uxr_get_input_best_effort_stream>
 8013cbc:	6178      	str	r0, [r7, #20]
        mutex = (stream == NULL) ? NULL : &stream->mutex;
 8013cbe:	697b      	ldr	r3, [r7, #20]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d002      	beq.n	8013cca <uxr_get_stream_mutex_from_id+0x64>
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	3304      	adds	r3, #4
 8013cc8:	e000      	b.n	8013ccc <uxr_get_stream_mutex_from_id+0x66>
 8013cca:	2300      	movs	r3, #0
 8013ccc:	61fb      	str	r3, [r7, #28]
    {
 8013cce:	e02c      	b.n	8013d2a <uxr_get_stream_mutex_from_id+0xc4>
    }
    else if (stream_id.type == UXR_RELIABLE_STREAM && stream_id.direction == UXR_OUTPUT_STREAM)
 8013cd0:	78bb      	ldrb	r3, [r7, #2]
 8013cd2:	2b02      	cmp	r3, #2
 8013cd4:	d113      	bne.n	8013cfe <uxr_get_stream_mutex_from_id+0x98>
 8013cd6:	78fb      	ldrb	r3, [r7, #3]
 8013cd8:	2b01      	cmp	r3, #1
 8013cda:	d110      	bne.n	8013cfe <uxr_get_stream_mutex_from_id+0x98>
    {
        uxrOutputReliableStream* stream = uxr_get_output_reliable_stream(&session->streams, stream_id.index);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	3308      	adds	r3, #8
 8013ce0:	787a      	ldrb	r2, [r7, #1]
 8013ce2:	4611      	mov	r1, r2
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7ff fc19 	bl	801351c <uxr_get_output_reliable_stream>
 8013cea:	6138      	str	r0, [r7, #16]
        mutex = (stream == NULL) ? NULL : &stream->mutex;
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d002      	beq.n	8013cf8 <uxr_get_stream_mutex_from_id+0x92>
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	3324      	adds	r3, #36	; 0x24
 8013cf6:	e000      	b.n	8013cfa <uxr_get_stream_mutex_from_id+0x94>
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	61fb      	str	r3, [r7, #28]
    {
 8013cfc:	e015      	b.n	8013d2a <uxr_get_stream_mutex_from_id+0xc4>
    }
    else if (stream_id.type == UXR_RELIABLE_STREAM && stream_id.direction == UXR_INPUT_STREAM)
 8013cfe:	78bb      	ldrb	r3, [r7, #2]
 8013d00:	2b02      	cmp	r3, #2
 8013d02:	d112      	bne.n	8013d2a <uxr_get_stream_mutex_from_id+0xc4>
 8013d04:	78fb      	ldrb	r3, [r7, #3]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d10f      	bne.n	8013d2a <uxr_get_stream_mutex_from_id+0xc4>
    {
        uxrInputReliableStream* stream = uxr_get_input_reliable_stream(&session->streams, stream_id.index);
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	3308      	adds	r3, #8
 8013d0e:	787a      	ldrb	r2, [r7, #1]
 8013d10:	4611      	mov	r1, r2
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7ff fc3a 	bl	801358c <uxr_get_input_reliable_stream>
 8013d18:	60f8      	str	r0, [r7, #12]
        mutex = (stream == NULL) ? NULL : &stream->mutex;
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d002      	beq.n	8013d26 <uxr_get_stream_mutex_from_id+0xc0>
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	3318      	adds	r3, #24
 8013d24:	e000      	b.n	8013d28 <uxr_get_stream_mutex_from_id+0xc2>
 8013d26:	2300      	movs	r3, #0
 8013d28:	61fb      	str	r3, [r7, #28]
    }

    return mutex;
 8013d2a:	69fb      	ldr	r3, [r7, #28]
}
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	3720      	adds	r7, #32
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}

08013d34 <uxr_prepend_to_list>:
// Double linked pool for ucdrBuffers

void uxr_prepend_to_list(
        uxr_shared_memory_buffer_item_t* member,
        uxr_shared_memory_buffer_item_t** list)
{
 8013d34:	b480      	push	{r7}
 8013d36:	b083      	sub	sp, #12
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
 8013d3c:	6039      	str	r1, [r7, #0]
    member->next = *list;
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	681a      	ldr	r2, [r3, #0]
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	601a      	str	r2, [r3, #0]
    *list = member;
 8013d46:	683b      	ldr	r3, [r7, #0]
 8013d48:	687a      	ldr	r2, [r7, #4]
 8013d4a:	601a      	str	r2, [r3, #0]
}
 8013d4c:	bf00      	nop
 8013d4e:	370c      	adds	r7, #12
 8013d50:	46bd      	mov	sp, r7
 8013d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d56:	4770      	bx	lr

08013d58 <uxr_pop_head_from_list>:

uxr_shared_memory_buffer_item_t* uxr_pop_head_from_list(
        uxr_shared_memory_buffer_item_t** list)
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b085      	sub	sp, #20
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
    uxr_shared_memory_buffer_item_t* member = *list;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	60fb      	str	r3, [r7, #12]
    *list = (*list == NULL ) ? NULL : (*list)->next;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d003      	beq.n	8013d76 <uxr_pop_head_from_list+0x1e>
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	e000      	b.n	8013d78 <uxr_pop_head_from_list+0x20>
 8013d76:	2300      	movs	r3, #0
 8013d78:	687a      	ldr	r2, [r7, #4]
 8013d7a:	6013      	str	r3, [r2, #0]
    return member;
 8013d7c:	68fb      	ldr	r3, [r7, #12]
}
 8013d7e:	4618      	mov	r0, r3
 8013d80:	3714      	adds	r7, #20
 8013d82:	46bd      	mov	sp, r7
 8013d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d88:	4770      	bx	lr
	...

08013d8c <uxr_init_shared_memory>:

#define UXR_SHARED_MEMORY_INIT() if (!uxr_sm_map.init){uxr_init_shared_memory();}

void uxr_init_shared_memory()
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b082      	sub	sp, #8
 8013d90:	af00      	add	r7, sp, #0
    uxr_sm_map.init = true;
 8013d92:	4b11      	ldr	r3, [pc, #68]	; (8013dd8 <uxr_init_shared_memory+0x4c>)
 8013d94:	2201      	movs	r2, #1
 8013d96:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
    UXR_INIT_LOCK(&uxr_sm_map.lock);
 8013d9a:	4810      	ldr	r0, [pc, #64]	; (8013ddc <uxr_init_shared_memory+0x50>)
 8013d9c:	f7ff ff36 	bl	8013c0c <uxr_init_lock>

    for (size_t i = 0; i < UXR_CONFIG_SHARED_MEMORY_STATIC_MEM_SIZE; i++)
 8013da0:	2300      	movs	r3, #0
 8013da2:	607b      	str	r3, [r7, #4]
 8013da4:	e010      	b.n	8013dc8 <uxr_init_shared_memory+0x3c>
    {
        uxr_prepend_to_list(&uxr_sm_map.mem_pool[i], &uxr_sm_map.mempool_freeitems);
 8013da6:	687a      	ldr	r2, [r7, #4]
 8013da8:	4613      	mov	r3, r2
 8013daa:	009b      	lsls	r3, r3, #2
 8013dac:	4413      	add	r3, r2
 8013dae:	00db      	lsls	r3, r3, #3
 8013db0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8013db4:	4a08      	ldr	r2, [pc, #32]	; (8013dd8 <uxr_init_shared_memory+0x4c>)
 8013db6:	4413      	add	r3, r2
 8013db8:	3304      	adds	r3, #4
 8013dba:	4909      	ldr	r1, [pc, #36]	; (8013de0 <uxr_init_shared_memory+0x54>)
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f7ff ffb9 	bl	8013d34 <uxr_prepend_to_list>
    for (size_t i = 0; i < UXR_CONFIG_SHARED_MEMORY_STATIC_MEM_SIZE; i++)
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	3301      	adds	r3, #1
 8013dc6:	607b      	str	r3, [r7, #4]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2b09      	cmp	r3, #9
 8013dcc:	d9eb      	bls.n	8013da6 <uxr_init_shared_memory+0x1a>
    }
}
 8013dce:	bf00      	nop
 8013dd0:	bf00      	nop
 8013dd2:	3708      	adds	r7, #8
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	2000e100 	.word	0x2000e100
 8013ddc:	2000e47c 	.word	0x2000e47c
 8013de0:	2000e474 	.word	0x2000e474

08013de4 <uxr_clean_shared_memory>:

void uxr_clean_shared_memory()
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	af00      	add	r7, sp, #0
    memset(&uxr_sm_map, 0, sizeof(uxr_sm_map));
 8013de8:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 8013dec:	2100      	movs	r1, #0
 8013dee:	4802      	ldr	r0, [pc, #8]	; (8013df8 <uxr_clean_shared_memory+0x14>)
 8013df0:	f00c ff8e 	bl	8020d10 <memset>
}
 8013df4:	bf00      	nop
 8013df6:	bd80      	pop	{r7, pc}
 8013df8:	2000e100 	.word	0x2000e100

08013dfc <uxr_shared_memory_entity_compare>:

// API
bool uxr_shared_memory_entity_compare(
        uxr_shared_memory_entity_t* e1,
        uxr_shared_memory_entity_t* e2)
{
 8013dfc:	b480      	push	{r7}
 8013dfe:	b085      	sub	sp, #20
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	6039      	str	r1, [r7, #0]
    bool ret = true;
 8013e06:	2301      	movs	r3, #1
 8013e08:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < sizeof(e1->session->info.key); i++)
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	73bb      	strb	r3, [r7, #14]
 8013e0e:	e018      	b.n	8013e42 <uxr_shared_memory_entity_compare+0x46>
    {
        ret &= e1->session->info.key[i] == e2->session->info.key[i];
 8013e10:	7bfb      	ldrb	r3, [r7, #15]
 8013e12:	687a      	ldr	r2, [r7, #4]
 8013e14:	6851      	ldr	r1, [r2, #4]
 8013e16:	7bba      	ldrb	r2, [r7, #14]
 8013e18:	440a      	add	r2, r1
 8013e1a:	7851      	ldrb	r1, [r2, #1]
 8013e1c:	683a      	ldr	r2, [r7, #0]
 8013e1e:	6850      	ldr	r0, [r2, #4]
 8013e20:	7bba      	ldrb	r2, [r7, #14]
 8013e22:	4402      	add	r2, r0
 8013e24:	7852      	ldrb	r2, [r2, #1]
 8013e26:	4291      	cmp	r1, r2
 8013e28:	bf0c      	ite	eq
 8013e2a:	2201      	moveq	r2, #1
 8013e2c:	2200      	movne	r2, #0
 8013e2e:	b2d2      	uxtb	r2, r2
 8013e30:	4013      	ands	r3, r2
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	bf14      	ite	ne
 8013e36:	2301      	movne	r3, #1
 8013e38:	2300      	moveq	r3, #0
 8013e3a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < sizeof(e1->session->info.key); i++)
 8013e3c:	7bbb      	ldrb	r3, [r7, #14]
 8013e3e:	3301      	adds	r3, #1
 8013e40:	73bb      	strb	r3, [r7, #14]
 8013e42:	7bbb      	ldrb	r3, [r7, #14]
 8013e44:	2b03      	cmp	r3, #3
 8013e46:	d9e3      	bls.n	8013e10 <uxr_shared_memory_entity_compare+0x14>
    }

    ret &= e1->object_id.id == e2->object_id.id;
 8013e48:	7bfb      	ldrb	r3, [r7, #15]
 8013e4a:	687a      	ldr	r2, [r7, #4]
 8013e4c:	8811      	ldrh	r1, [r2, #0]
 8013e4e:	683a      	ldr	r2, [r7, #0]
 8013e50:	8812      	ldrh	r2, [r2, #0]
 8013e52:	4291      	cmp	r1, r2
 8013e54:	bf0c      	ite	eq
 8013e56:	2201      	moveq	r2, #1
 8013e58:	2200      	movne	r2, #0
 8013e5a:	b2d2      	uxtb	r2, r2
 8013e5c:	4013      	ands	r3, r2
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	bf14      	ite	ne
 8013e62:	2301      	movne	r3, #1
 8013e64:	2300      	moveq	r3, #0
 8013e66:	73fb      	strb	r3, [r7, #15]
    ret &= e1->object_id.type == e2->object_id.type;
 8013e68:	7bfb      	ldrb	r3, [r7, #15]
 8013e6a:	687a      	ldr	r2, [r7, #4]
 8013e6c:	7891      	ldrb	r1, [r2, #2]
 8013e6e:	683a      	ldr	r2, [r7, #0]
 8013e70:	7892      	ldrb	r2, [r2, #2]
 8013e72:	4291      	cmp	r1, r2
 8013e74:	bf0c      	ite	eq
 8013e76:	2201      	moveq	r2, #1
 8013e78:	2200      	movne	r2, #0
 8013e7a:	b2d2      	uxtb	r2, r2
 8013e7c:	4013      	ands	r3, r2
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	bf14      	ite	ne
 8013e82:	2301      	movne	r3, #1
 8013e84:	2300      	moveq	r3, #0
 8013e86:	73fb      	strb	r3, [r7, #15]

    return ret;
 8013e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	3714      	adds	r7, #20
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e94:	4770      	bx	lr
	...

08013e98 <uxr_shared_memory_get_entity_index>:

ssize_t uxr_shared_memory_get_entity_index(
        uxrSession* session,
        uxrObjectId* entity_id)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b09a      	sub	sp, #104	; 0x68
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
 8013ea0:	6039      	str	r1, [r7, #0]
    uxr_shared_memory_entity_t aux;
    aux.session = session;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	60fb      	str	r3, [r7, #12]
    aux.object_id = *entity_id;
 8013ea6:	683a      	ldr	r2, [r7, #0]
 8013ea8:	f107 0308 	add.w	r3, r7, #8
 8013eac:	6810      	ldr	r0, [r2, #0]
 8013eae:	6018      	str	r0, [r3, #0]

    for (size_t i = 0; i < uxr_sm_map.entities_len; i++)
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	667b      	str	r3, [r7, #100]	; 0x64
 8013eb4:	e013      	b.n	8013ede <uxr_shared_memory_get_entity_index+0x46>
    {
        if (uxr_shared_memory_entity_compare(&aux, &uxr_sm_map.entities[i]))
 8013eb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013eb8:	2258      	movs	r2, #88	; 0x58
 8013eba:	fb02 f303 	mul.w	r3, r2, r3
 8013ebe:	4a0e      	ldr	r2, [pc, #56]	; (8013ef8 <uxr_shared_memory_get_entity_index+0x60>)
 8013ec0:	441a      	add	r2, r3
 8013ec2:	f107 0308 	add.w	r3, r7, #8
 8013ec6:	4611      	mov	r1, r2
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7ff ff97 	bl	8013dfc <uxr_shared_memory_entity_compare>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d001      	beq.n	8013ed8 <uxr_shared_memory_get_entity_index+0x40>
        {
            return (ssize_t)i;
 8013ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013ed6:	e00a      	b.n	8013eee <uxr_shared_memory_get_entity_index+0x56>
    for (size_t i = 0; i < uxr_sm_map.entities_len; i++)
 8013ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013eda:	3301      	adds	r3, #1
 8013edc:	667b      	str	r3, [r7, #100]	; 0x64
 8013ede:	4b06      	ldr	r3, [pc, #24]	; (8013ef8 <uxr_shared_memory_get_entity_index+0x60>)
 8013ee0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8013ee4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	d3e5      	bcc.n	8013eb6 <uxr_shared_memory_get_entity_index+0x1e>
        }
    }
    return -1;
 8013eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013eee:	4618      	mov	r0, r3
 8013ef0:	3768      	adds	r7, #104	; 0x68
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	bd80      	pop	{r7, pc}
 8013ef6:	bf00      	nop
 8013ef8:	2000e100 	.word	0x2000e100

08013efc <uxr_shared_memory_get_entity>:

uxr_shared_memory_entity_t* uxr_shared_memory_get_entity(
        uxrSession* session,
        uxrObjectId* entity_id)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b09a      	sub	sp, #104	; 0x68
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
 8013f04:	6039      	str	r1, [r7, #0]
    uxr_shared_memory_entity_t aux;
    aux.session = session;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	60fb      	str	r3, [r7, #12]
    aux.object_id = *entity_id;
 8013f0a:	683a      	ldr	r2, [r7, #0]
 8013f0c:	f107 0308 	add.w	r3, r7, #8
 8013f10:	6810      	ldr	r0, [r2, #0]
 8013f12:	6018      	str	r0, [r3, #0]

    for (size_t i = 0; i < uxr_sm_map.entities_len; i++)
 8013f14:	2300      	movs	r3, #0
 8013f16:	667b      	str	r3, [r7, #100]	; 0x64
 8013f18:	e018      	b.n	8013f4c <uxr_shared_memory_get_entity+0x50>
    {
        if (uxr_shared_memory_entity_compare(&aux, &uxr_sm_map.entities[i]))
 8013f1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013f1c:	2258      	movs	r2, #88	; 0x58
 8013f1e:	fb02 f303 	mul.w	r3, r2, r3
 8013f22:	4a10      	ldr	r2, [pc, #64]	; (8013f64 <uxr_shared_memory_get_entity+0x68>)
 8013f24:	441a      	add	r2, r3
 8013f26:	f107 0308 	add.w	r3, r7, #8
 8013f2a:	4611      	mov	r1, r2
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7ff ff65 	bl	8013dfc <uxr_shared_memory_entity_compare>
 8013f32:	4603      	mov	r3, r0
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d006      	beq.n	8013f46 <uxr_shared_memory_get_entity+0x4a>
        {
            return &uxr_sm_map.entities[i];
 8013f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013f3a:	2258      	movs	r2, #88	; 0x58
 8013f3c:	fb02 f303 	mul.w	r3, r2, r3
 8013f40:	4a08      	ldr	r2, [pc, #32]	; (8013f64 <uxr_shared_memory_get_entity+0x68>)
 8013f42:	4413      	add	r3, r2
 8013f44:	e009      	b.n	8013f5a <uxr_shared_memory_get_entity+0x5e>
    for (size_t i = 0; i < uxr_sm_map.entities_len; i++)
 8013f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013f48:	3301      	adds	r3, #1
 8013f4a:	667b      	str	r3, [r7, #100]	; 0x64
 8013f4c:	4b05      	ldr	r3, [pc, #20]	; (8013f64 <uxr_shared_memory_get_entity+0x68>)
 8013f4e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8013f52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013f54:	429a      	cmp	r2, r3
 8013f56:	d3e0      	bcc.n	8013f1a <uxr_shared_memory_get_entity+0x1e>
        }
    }
    return NULL;
 8013f58:	2300      	movs	r3, #0
}
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	3768      	adds	r7, #104	; 0x68
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}
 8013f62:	bf00      	nop
 8013f64:	2000e100 	.word	0x2000e100

08013f68 <uxr_prepare_shared_memory>:
        uxrSession* session,
        uxrObjectId entity_id,
        ucdrBuffer* ub,
        uint16_t data_size,
        uint16_t request_id)
{
 8013f68:	b5b0      	push	{r4, r5, r7, lr}
 8013f6a:	b088      	sub	sp, #32
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	60f8      	str	r0, [r7, #12]
 8013f70:	60b9      	str	r1, [r7, #8]
 8013f72:	607a      	str	r2, [r7, #4]
 8013f74:	807b      	strh	r3, [r7, #2]
    UXR_SHARED_MEMORY_INIT();
 8013f76:	4b2e      	ldr	r3, [pc, #184]	; (8014030 <uxr_prepare_shared_memory+0xc8>)
 8013f78:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 8013f7c:	f083 0301 	eor.w	r3, r3, #1
 8013f80:	b2db      	uxtb	r3, r3
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d001      	beq.n	8013f8a <uxr_prepare_shared_memory+0x22>
 8013f86:	f7ff ff01 	bl	8013d8c <uxr_init_shared_memory>
    UXR_LOCK(&uxr_sm_map.lock);
 8013f8a:	482a      	ldr	r0, [pc, #168]	; (8014034 <uxr_prepare_shared_memory+0xcc>)
 8013f8c:	f7ff fe4f 	bl	8013c2e <uxr_lock>

    ssize_t entity_index = uxr_shared_memory_get_entity_index(session, &entity_id);
 8013f90:	f107 0308 	add.w	r3, r7, #8
 8013f94:	4619      	mov	r1, r3
 8013f96:	68f8      	ldr	r0, [r7, #12]
 8013f98:	f7ff ff7e 	bl	8013e98 <uxr_shared_memory_get_entity_index>
 8013f9c:	61b8      	str	r0, [r7, #24]
    if (-1 == entity_index)
 8013f9e:	69bb      	ldr	r3, [r7, #24]
 8013fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fa4:	d103      	bne.n	8013fae <uxr_prepare_shared_memory+0x46>
    {
        UXR_UNLOCK(&uxr_sm_map.lock);
 8013fa6:	4823      	ldr	r0, [pc, #140]	; (8014034 <uxr_prepare_shared_memory+0xcc>)
 8013fa8:	f7ff fe50 	bl	8013c4c <uxr_unlock>
        return;
 8013fac:	e03d      	b.n	801402a <uxr_prepare_shared_memory+0xc2>
    }

    for (size_t i = 0; i < uxr_sm_map.entities_len; i++)
 8013fae:	2300      	movs	r3, #0
 8013fb0:	61fb      	str	r3, [r7, #28]
 8013fb2:	e031      	b.n	8014018 <uxr_prepare_shared_memory+0xb0>
    {
        if (uxr_sm_map.matrix[entity_index][i].matched)
 8013fb4:	491e      	ldr	r1, [pc, #120]	; (8014030 <uxr_prepare_shared_memory+0xc8>)
 8013fb6:	69bb      	ldr	r3, [r7, #24]
 8013fb8:	009a      	lsls	r2, r3, #2
 8013fba:	69fb      	ldr	r3, [r7, #28]
 8013fbc:	4413      	add	r3, r2
 8013fbe:	332c      	adds	r3, #44	; 0x2c
 8013fc0:	00db      	lsls	r3, r3, #3
 8013fc2:	440b      	add	r3, r1
 8013fc4:	791b      	ldrb	r3, [r3, #4]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d023      	beq.n	8014012 <uxr_prepare_shared_memory+0xaa>
        {
            uxr_shared_memory_buffer_item_t* item = uxr_pop_head_from_list(&uxr_sm_map.mempool_freeitems);
 8013fca:	481b      	ldr	r0, [pc, #108]	; (8014038 <uxr_prepare_shared_memory+0xd0>)
 8013fcc:	f7ff fec4 	bl	8013d58 <uxr_pop_head_from_list>
 8013fd0:	6178      	str	r0, [r7, #20]
            if (item != NULL)
 8013fd2:	697b      	ldr	r3, [r7, #20]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d01c      	beq.n	8014012 <uxr_prepare_shared_memory+0xaa>
            {
                item->data = *ub;
 8013fd8:	697b      	ldr	r3, [r7, #20]
 8013fda:	687a      	ldr	r2, [r7, #4]
 8013fdc:	1d1c      	adds	r4, r3, #4
 8013fde:	4615      	mov	r5, r2
 8013fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fe4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                item->data_size = data_size;
 8013fec:	697b      	ldr	r3, [r7, #20]
 8013fee:	887a      	ldrh	r2, [r7, #2]
 8013ff0:	849a      	strh	r2, [r3, #36]	; 0x24
                item->request_id = request_id;
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8013ff6:	84da      	strh	r2, [r3, #38]	; 0x26
                uxr_prepend_to_list(item, &uxr_sm_map.matrix[entity_index][i].list);
 8013ff8:	69bb      	ldr	r3, [r7, #24]
 8013ffa:	009a      	lsls	r2, r3, #2
 8013ffc:	69fb      	ldr	r3, [r7, #28]
 8013ffe:	4413      	add	r3, r2
 8014000:	332c      	adds	r3, #44	; 0x2c
 8014002:	00db      	lsls	r3, r3, #3
 8014004:	4a0a      	ldr	r2, [pc, #40]	; (8014030 <uxr_prepare_shared_memory+0xc8>)
 8014006:	4413      	add	r3, r2
 8014008:	3308      	adds	r3, #8
 801400a:	4619      	mov	r1, r3
 801400c:	6978      	ldr	r0, [r7, #20]
 801400e:	f7ff fe91 	bl	8013d34 <uxr_prepend_to_list>
    for (size_t i = 0; i < uxr_sm_map.entities_len; i++)
 8014012:	69fb      	ldr	r3, [r7, #28]
 8014014:	3301      	adds	r3, #1
 8014016:	61fb      	str	r3, [r7, #28]
 8014018:	4b05      	ldr	r3, [pc, #20]	; (8014030 <uxr_prepare_shared_memory+0xc8>)
 801401a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 801401e:	69fa      	ldr	r2, [r7, #28]
 8014020:	429a      	cmp	r2, r3
 8014022:	d3c7      	bcc.n	8013fb4 <uxr_prepare_shared_memory+0x4c>
            }
        }
    }

    UXR_UNLOCK(&uxr_sm_map.lock);
 8014024:	4803      	ldr	r0, [pc, #12]	; (8014034 <uxr_prepare_shared_memory+0xcc>)
 8014026:	f7ff fe11 	bl	8013c4c <uxr_unlock>
}
 801402a:	3720      	adds	r7, #32
 801402c:	46bd      	mov	sp, r7
 801402e:	bdb0      	pop	{r4, r5, r7, pc}
 8014030:	2000e100 	.word	0x2000e100
 8014034:	2000e47c 	.word	0x2000e47c
 8014038:	2000e474 	.word	0x2000e474

0801403c <uxr_handle_shared_memory>:

void uxr_handle_shared_memory()
{
 801403c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801403e:	b099      	sub	sp, #100	; 0x64
 8014040:	af04      	add	r7, sp, #16
    UXR_SHARED_MEMORY_INIT();
 8014042:	4b82      	ldr	r3, [pc, #520]	; (801424c <uxr_handle_shared_memory+0x210>)
 8014044:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 8014048:	f083 0301 	eor.w	r3, r3, #1
 801404c:	b2db      	uxtb	r3, r3
 801404e:	2b00      	cmp	r3, #0
 8014050:	d001      	beq.n	8014056 <uxr_handle_shared_memory+0x1a>
 8014052:	f7ff fe9b 	bl	8013d8c <uxr_init_shared_memory>
    UXR_LOCK(&uxr_sm_map.lock);
 8014056:	487e      	ldr	r0, [pc, #504]	; (8014250 <uxr_handle_shared_memory+0x214>)
 8014058:	f7ff fde9 	bl	8013c2e <uxr_lock>

    for (size_t i = 0; i < uxr_sm_map.entities_len; i++)
 801405c:	2300      	movs	r3, #0
 801405e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014060:	e1a2      	b.n	80143a8 <uxr_handle_shared_memory+0x36c>
    {
        if (uxr_sm_map.entities[i].object_id.type != UXR_DATAWRITER_ID
 8014062:	4a7a      	ldr	r2, [pc, #488]	; (801424c <uxr_handle_shared_memory+0x210>)
 8014064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014066:	2158      	movs	r1, #88	; 0x58
 8014068:	fb01 f303 	mul.w	r3, r1, r3
 801406c:	4413      	add	r3, r2
 801406e:	3302      	adds	r3, #2
 8014070:	781b      	ldrb	r3, [r3, #0]
 8014072:	2b05      	cmp	r3, #5
 8014074:	d014      	beq.n	80140a0 <uxr_handle_shared_memory+0x64>
                && uxr_sm_map.entities[i].object_id.type != UXR_REPLIER_ID
 8014076:	4a75      	ldr	r2, [pc, #468]	; (801424c <uxr_handle_shared_memory+0x210>)
 8014078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801407a:	2158      	movs	r1, #88	; 0x58
 801407c:	fb01 f303 	mul.w	r3, r1, r3
 8014080:	4413      	add	r3, r2
 8014082:	3302      	adds	r3, #2
 8014084:	781b      	ldrb	r3, [r3, #0]
 8014086:	2b08      	cmp	r3, #8
 8014088:	d00a      	beq.n	80140a0 <uxr_handle_shared_memory+0x64>
                && uxr_sm_map.entities[i].object_id.type != UXR_REQUESTER_ID
 801408a:	4a70      	ldr	r2, [pc, #448]	; (801424c <uxr_handle_shared_memory+0x210>)
 801408c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801408e:	2158      	movs	r1, #88	; 0x58
 8014090:	fb01 f303 	mul.w	r3, r1, r3
 8014094:	4413      	add	r3, r2
 8014096:	3302      	adds	r3, #2
 8014098:	781b      	ldrb	r3, [r3, #0]
 801409a:	2b07      	cmp	r3, #7
 801409c:	f040 8180 	bne.w	80143a0 <uxr_handle_shared_memory+0x364>
                )
        {
            continue;
        }

        for (size_t j = 0; j < uxr_sm_map.entities_len; j++)
 80140a0:	2300      	movs	r3, #0
 80140a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80140a4:	e175      	b.n	8014392 <uxr_handle_shared_memory+0x356>
        {
            while (uxr_sm_map.matrix[i][j].list != NULL)
            {
                uxrStreamId stream_id = {
 80140a6:	2300      	movs	r3, #0
 80140a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80140aa:	2303      	movs	r3, #3
 80140ac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
                    .type = UXR_SHARED_MEMORY_STREAM
                };
                uxr_shared_memory_buffer_item_t* item =  uxr_pop_head_from_list(&uxr_sm_map.matrix[i][j].list);
 80140b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140b2:	009a      	lsls	r2, r3, #2
 80140b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140b6:	4413      	add	r3, r2
 80140b8:	332c      	adds	r3, #44	; 0x2c
 80140ba:	00db      	lsls	r3, r3, #3
 80140bc:	4a63      	ldr	r2, [pc, #396]	; (801424c <uxr_handle_shared_memory+0x210>)
 80140be:	4413      	add	r3, r2
 80140c0:	3308      	adds	r3, #8
 80140c2:	4618      	mov	r0, r3
 80140c4:	f7ff fe48 	bl	8013d58 <uxr_pop_head_from_list>
 80140c8:	6478      	str	r0, [r7, #68]	; 0x44

                switch (uxr_sm_map.entities[j].object_id.type)
 80140ca:	4a60      	ldr	r2, [pc, #384]	; (801424c <uxr_handle_shared_memory+0x210>)
 80140cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140ce:	2158      	movs	r1, #88	; 0x58
 80140d0:	fb01 f303 	mul.w	r3, r1, r3
 80140d4:	4413      	add	r3, r2
 80140d6:	3302      	adds	r3, #2
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	2b08      	cmp	r3, #8
 80140dc:	d045      	beq.n	801416a <uxr_handle_shared_memory+0x12e>
 80140de:	2b08      	cmp	r3, #8
 80140e0:	f300 813d 	bgt.w	801435e <uxr_handle_shared_memory+0x322>
 80140e4:	2b06      	cmp	r3, #6
 80140e6:	d003      	beq.n	80140f0 <uxr_handle_shared_memory+0xb4>
 80140e8:	2b07      	cmp	r3, #7
 80140ea:	f000 80b3 	beq.w	8014254 <uxr_handle_shared_memory+0x218>
                            }
                        }
                        break;
                    }
                    default:
                        break;
 80140ee:	e136      	b.n	801435e <uxr_handle_shared_memory+0x322>
                        if (NULL != uxr_sm_map.entities[j].session->on_topic)
 80140f0:	4a56      	ldr	r2, [pc, #344]	; (801424c <uxr_handle_shared_memory+0x210>)
 80140f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140f4:	2158      	movs	r1, #88	; 0x58
 80140f6:	fb01 f303 	mul.w	r3, r1, r3
 80140fa:	4413      	add	r3, r2
 80140fc:	3304      	adds	r3, #4
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8014104:	2b00      	cmp	r3, #0
 8014106:	f000 812c 	beq.w	8014362 <uxr_handle_shared_memory+0x326>
                            uxr_sm_map.entities[j].session->on_topic(
 801410a:	4a50      	ldr	r2, [pc, #320]	; (801424c <uxr_handle_shared_memory+0x210>)
 801410c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801410e:	2158      	movs	r1, #88	; 0x58
 8014110:	fb01 f303 	mul.w	r3, r1, r3
 8014114:	4413      	add	r3, r2
 8014116:	3304      	adds	r3, #4
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	f8d3 41d0 	ldr.w	r4, [r3, #464]	; 0x1d0
                                uxr_sm_map.entities[j].session,
 801411e:	4a4b      	ldr	r2, [pc, #300]	; (801424c <uxr_handle_shared_memory+0x210>)
 8014120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014122:	2158      	movs	r1, #88	; 0x58
 8014124:	fb01 f303 	mul.w	r3, r1, r3
 8014128:	4413      	add	r3, r2
 801412a:	3304      	adds	r3, #4
 801412c:	681d      	ldr	r5, [r3, #0]
                                &item->data,
 801412e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014130:	3304      	adds	r3, #4
                            uxr_sm_map.entities[j].session->on_topic(
 8014132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014134:	8c92      	ldrh	r2, [r2, #36]	; 0x24
                                uxr_sm_map.entities[j].session->on_topic_args
 8014136:	4845      	ldr	r0, [pc, #276]	; (801424c <uxr_handle_shared_memory+0x210>)
 8014138:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801413a:	2658      	movs	r6, #88	; 0x58
 801413c:	fb06 f101 	mul.w	r1, r6, r1
 8014140:	4401      	add	r1, r0
 8014142:	3104      	adds	r1, #4
 8014144:	6809      	ldr	r1, [r1, #0]
                            uxr_sm_map.entities[j].session->on_topic(
 8014146:	f8d1 01d4 	ldr.w	r0, [r1, #468]	; 0x1d4
 801414a:	4e40      	ldr	r6, [pc, #256]	; (801424c <uxr_handle_shared_memory+0x210>)
 801414c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801414e:	f04f 0c58 	mov.w	ip, #88	; 0x58
 8014152:	fb0c f101 	mul.w	r1, ip, r1
 8014156:	4431      	add	r1, r6
 8014158:	9002      	str	r0, [sp, #8]
 801415a:	9201      	str	r2, [sp, #4]
 801415c:	9300      	str	r3, [sp, #0]
 801415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014160:	2200      	movs	r2, #0
 8014162:	6809      	ldr	r1, [r1, #0]
 8014164:	4628      	mov	r0, r5
 8014166:	47a0      	blx	r4
                        break;
 8014168:	e0fb      	b.n	8014362 <uxr_handle_shared_memory+0x326>
                        if (NULL != uxr_sm_map.entities[j].session->on_request)
 801416a:	4a38      	ldr	r2, [pc, #224]	; (801424c <uxr_handle_shared_memory+0x210>)
 801416c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801416e:	2158      	movs	r1, #88	; 0x58
 8014170:	fb01 f303 	mul.w	r3, r1, r3
 8014174:	4413      	add	r3, r2
 8014176:	3304      	adds	r3, #4
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 801417e:	2b00      	cmp	r3, #0
 8014180:	f000 80f1 	beq.w	8014366 <uxr_handle_shared_memory+0x32a>
                            sample_identity.sequence_number.low = item->request_id;
 8014184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014186:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014188:	63bb      	str	r3, [r7, #56]	; 0x38
                                    uxr_sm_map.entities[i].session->info.key,
 801418a:	4a30      	ldr	r2, [pc, #192]	; (801424c <uxr_handle_shared_memory+0x210>)
 801418c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801418e:	2158      	movs	r1, #88	; 0x58
 8014190:	fb01 f303 	mul.w	r3, r1, r3
 8014194:	4413      	add	r3, r2
 8014196:	3304      	adds	r3, #4
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	3301      	adds	r3, #1
 801419c:	681b      	ldr	r3, [r3, #0]
                            memcpy(sample_identity.writer_guid.guidPrefix.data,
 801419e:	627b      	str	r3, [r7, #36]	; 0x24
                                    (uint8_t) (uxr_sm_map.entities[i].object_id.id >> 8) & 0xFF;
 80141a0:	4a2a      	ldr	r2, [pc, #168]	; (801424c <uxr_handle_shared_memory+0x210>)
 80141a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141a4:	2158      	movs	r1, #88	; 0x58
 80141a6:	fb01 f303 	mul.w	r3, r1, r3
 80141aa:	4413      	add	r3, r2
 80141ac:	881b      	ldrh	r3, [r3, #0]
 80141ae:	0a1b      	lsrs	r3, r3, #8
 80141b0:	b29b      	uxth	r3, r3
 80141b2:	b2db      	uxtb	r3, r3
                            sample_identity.writer_guid.entityId.entityKey[1] =
 80141b4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                                    (uint8_t) uxr_sm_map.entities[i].object_id.id &
 80141b8:	4a24      	ldr	r2, [pc, #144]	; (801424c <uxr_handle_shared_memory+0x210>)
 80141ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141bc:	2158      	movs	r1, #88	; 0x58
 80141be:	fb01 f303 	mul.w	r3, r1, r3
 80141c2:	4413      	add	r3, r2
 80141c4:	881b      	ldrh	r3, [r3, #0]
 80141c6:	b2db      	uxtb	r3, r3
                            sample_identity.writer_guid.entityId.entityKey[0] =
 80141c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                            sample_identity.writer_guid.entityId.entityKind = uxr_sm_map.entities[i].object_id.type;
 80141cc:	4a1f      	ldr	r2, [pc, #124]	; (801424c <uxr_handle_shared_memory+0x210>)
 80141ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141d0:	2158      	movs	r1, #88	; 0x58
 80141d2:	fb01 f303 	mul.w	r3, r1, r3
 80141d6:	4413      	add	r3, r2
 80141d8:	3302      	adds	r3, #2
 80141da:	781b      	ldrb	r3, [r3, #0]
 80141dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                            uxr_sm_map.entities[j].session->on_request(
 80141e0:	4a1a      	ldr	r2, [pc, #104]	; (801424c <uxr_handle_shared_memory+0x210>)
 80141e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141e4:	2158      	movs	r1, #88	; 0x58
 80141e6:	fb01 f303 	mul.w	r3, r1, r3
 80141ea:	4413      	add	r3, r2
 80141ec:	3304      	adds	r3, #4
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	f8d3 41ec 	ldr.w	r4, [r3, #492]	; 0x1ec
                                uxr_sm_map.entities[j].session,
 80141f4:	4a15      	ldr	r2, [pc, #84]	; (801424c <uxr_handle_shared_memory+0x210>)
 80141f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141f8:	2158      	movs	r1, #88	; 0x58
 80141fa:	fb01 f303 	mul.w	r3, r1, r3
 80141fe:	4413      	add	r3, r2
 8014200:	3304      	adds	r3, #4
 8014202:	681d      	ldr	r5, [r3, #0]
                                &item->data,
 8014204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014206:	3304      	adds	r3, #4
 8014208:	607b      	str	r3, [r7, #4]
                            uxr_sm_map.entities[j].session->on_request(
 801420a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801420c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
                                uxr_sm_map.entities[j].session->on_topic_args);
 801420e:	480f      	ldr	r0, [pc, #60]	; (801424c <uxr_handle_shared_memory+0x210>)
 8014210:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014212:	2658      	movs	r6, #88	; 0x58
 8014214:	fb06 f101 	mul.w	r1, r6, r1
 8014218:	4401      	add	r1, r0
 801421a:	3104      	adds	r1, #4
 801421c:	6809      	ldr	r1, [r1, #0]
                            uxr_sm_map.entities[j].session->on_request(
 801421e:	f8d1 01d4 	ldr.w	r0, [r1, #468]	; 0x1d4
 8014222:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8014226:	4909      	ldr	r1, [pc, #36]	; (801424c <uxr_handle_shared_memory+0x210>)
 8014228:	460b      	mov	r3, r1
 801422a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801422c:	f04f 0c58 	mov.w	ip, #88	; 0x58
 8014230:	fb0c f101 	mul.w	r1, ip, r1
 8014234:	4419      	add	r1, r3
 8014236:	9002      	str	r0, [sp, #8]
 8014238:	9201      	str	r2, [sp, #4]
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	9300      	str	r3, [sp, #0]
 801423e:	4633      	mov	r3, r6
 8014240:	2200      	movs	r2, #0
 8014242:	6809      	ldr	r1, [r1, #0]
 8014244:	4628      	mov	r0, r5
 8014246:	47a0      	blx	r4
                        break;
 8014248:	e08d      	b.n	8014366 <uxr_handle_shared_memory+0x32a>
 801424a:	bf00      	nop
 801424c:	2000e100 	.word	0x2000e100
 8014250:	2000e47c 	.word	0x2000e47c
                        if (NULL != uxr_sm_map.entities[j].session->on_reply)
 8014254:	4a5b      	ldr	r2, [pc, #364]	; (80143c4 <uxr_handle_shared_memory+0x388>)
 8014256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014258:	2158      	movs	r1, #88	; 0x58
 801425a:	fb01 f303 	mul.w	r3, r1, r3
 801425e:	4413      	add	r3, r2
 8014260:	3304      	adds	r3, #4
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8014268:	2b00      	cmp	r3, #0
 801426a:	d07e      	beq.n	801436a <uxr_handle_shared_memory+0x32e>
                            size_t offset = item->data.offset;
 801426c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801426e:	695b      	ldr	r3, [r3, #20]
 8014270:	643b      	str	r3, [r7, #64]	; 0x40
                            uxr_deserialize_SampleIdentity(&item->data, &sample_identity);
 8014272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014274:	3304      	adds	r3, #4
 8014276:	f107 020c 	add.w	r2, r7, #12
 801427a:	4611      	mov	r1, r2
 801427c:	4618      	mov	r0, r3
 801427e:	f7fa fe08 	bl	800ee92 <uxr_deserialize_SampleIdentity>
                            if (!memcmp(uxr_sm_map.entities[j].session->info.key,
 8014282:	4a50      	ldr	r2, [pc, #320]	; (80143c4 <uxr_handle_shared_memory+0x388>)
 8014284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014286:	2158      	movs	r1, #88	; 0x58
 8014288:	fb01 f303 	mul.w	r3, r1, r3
 801428c:	4413      	add	r3, r2
 801428e:	3304      	adds	r3, #4
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	3301      	adds	r3, #1
 8014294:	f107 010c 	add.w	r1, r7, #12
 8014298:	2204      	movs	r2, #4
 801429a:	4618      	mov	r0, r3
 801429c:	f00c fd00 	bl	8020ca0 <memcmp>
 80142a0:	4603      	mov	r3, r0
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d161      	bne.n	801436a <uxr_handle_shared_memory+0x32e>
                                    && uxr_sm_map.entities[j].object_id.id ==
 80142a6:	4a47      	ldr	r2, [pc, #284]	; (80143c4 <uxr_handle_shared_memory+0x388>)
 80142a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142aa:	2158      	movs	r1, #88	; 0x58
 80142ac:	fb01 f303 	mul.w	r3, r1, r3
 80142b0:	4413      	add	r3, r2
 80142b2:	881b      	ldrh	r3, [r3, #0]
 80142b4:	461a      	mov	r2, r3
                                    (sample_identity.writer_guid.entityId.entityKey[1] >> 8) +
 80142b6:	7e7b      	ldrb	r3, [r7, #25]
 80142b8:	121b      	asrs	r3, r3, #8
                                    sample_identity.writer_guid.entityId.entityKey[0]
 80142ba:	7e39      	ldrb	r1, [r7, #24]
                                    (sample_identity.writer_guid.entityId.entityKey[1] >> 8) +
 80142bc:	440b      	add	r3, r1
                                    && uxr_sm_map.entities[j].object_id.id ==
 80142be:	429a      	cmp	r2, r3
 80142c0:	d153      	bne.n	801436a <uxr_handle_shared_memory+0x32e>
                                    && sample_identity.writer_guid.entityId.entityKind ==
 80142c2:	7efa      	ldrb	r2, [r7, #27]
                                    uxr_sm_map.entities[j].object_id.type)
 80142c4:	493f      	ldr	r1, [pc, #252]	; (80143c4 <uxr_handle_shared_memory+0x388>)
 80142c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142c8:	2058      	movs	r0, #88	; 0x58
 80142ca:	fb00 f303 	mul.w	r3, r0, r3
 80142ce:	440b      	add	r3, r1
 80142d0:	3302      	adds	r3, #2
 80142d2:	781b      	ldrb	r3, [r3, #0]
                                    && sample_identity.writer_guid.entityId.entityKind ==
 80142d4:	429a      	cmp	r2, r3
 80142d6:	d148      	bne.n	801436a <uxr_handle_shared_memory+0x32e>
                                item->data_size = (uint16_t)(item->data_size - (item->data.offset - offset));
 80142d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142da:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80142dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142de:	b299      	uxth	r1, r3
 80142e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142e2:	695b      	ldr	r3, [r3, #20]
 80142e4:	b29b      	uxth	r3, r3
 80142e6:	1acb      	subs	r3, r1, r3
 80142e8:	b29b      	uxth	r3, r3
 80142ea:	4413      	add	r3, r2
 80142ec:	b29a      	uxth	r2, r3
 80142ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142f0:	849a      	strh	r2, [r3, #36]	; 0x24
                                uxr_sm_map.entities[j].session->on_reply(
 80142f2:	4a34      	ldr	r2, [pc, #208]	; (80143c4 <uxr_handle_shared_memory+0x388>)
 80142f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142f6:	2158      	movs	r1, #88	; 0x58
 80142f8:	fb01 f303 	mul.w	r3, r1, r3
 80142fc:	4413      	add	r3, r2
 80142fe:	3304      	adds	r3, #4
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	f8d3 41f4 	ldr.w	r4, [r3, #500]	; 0x1f4
                                    uxr_sm_map.entities[j].session,
 8014306:	4a2f      	ldr	r2, [pc, #188]	; (80143c4 <uxr_handle_shared_memory+0x388>)
 8014308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801430a:	2158      	movs	r1, #88	; 0x58
 801430c:	fb01 f303 	mul.w	r3, r1, r3
 8014310:	4413      	add	r3, r2
 8014312:	3304      	adds	r3, #4
 8014314:	681d      	ldr	r5, [r3, #0]
                                    (uint16_t)sample_identity.sequence_number.low,
 8014316:	6a3b      	ldr	r3, [r7, #32]
                                uxr_sm_map.entities[j].session->on_reply(
 8014318:	b29e      	uxth	r6, r3
                                    &item->data,
 801431a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801431c:	3304      	adds	r3, #4
 801431e:	607b      	str	r3, [r7, #4]
                                uxr_sm_map.entities[j].session->on_reply(
 8014320:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014322:	8c92      	ldrh	r2, [r2, #36]	; 0x24
                                    uxr_sm_map.entities[j].session->on_topic_args);
 8014324:	4827      	ldr	r0, [pc, #156]	; (80143c4 <uxr_handle_shared_memory+0x388>)
 8014326:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014328:	f04f 0c58 	mov.w	ip, #88	; 0x58
 801432c:	fb0c f101 	mul.w	r1, ip, r1
 8014330:	4401      	add	r1, r0
 8014332:	3104      	adds	r1, #4
 8014334:	6809      	ldr	r1, [r1, #0]
                                uxr_sm_map.entities[j].session->on_reply(
 8014336:	f8d1 01d4 	ldr.w	r0, [r1, #468]	; 0x1d4
 801433a:	4922      	ldr	r1, [pc, #136]	; (80143c4 <uxr_handle_shared_memory+0x388>)
 801433c:	460b      	mov	r3, r1
 801433e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014340:	f04f 0c58 	mov.w	ip, #88	; 0x58
 8014344:	fb0c f101 	mul.w	r1, ip, r1
 8014348:	4419      	add	r1, r3
 801434a:	9002      	str	r0, [sp, #8]
 801434c:	9201      	str	r2, [sp, #4]
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	9300      	str	r3, [sp, #0]
 8014352:	4633      	mov	r3, r6
 8014354:	2200      	movs	r2, #0
 8014356:	6809      	ldr	r1, [r1, #0]
 8014358:	4628      	mov	r0, r5
 801435a:	47a0      	blx	r4
                        break;
 801435c:	e005      	b.n	801436a <uxr_handle_shared_memory+0x32e>
                        break;
 801435e:	bf00      	nop
 8014360:	e004      	b.n	801436c <uxr_handle_shared_memory+0x330>
                        break;
 8014362:	bf00      	nop
 8014364:	e002      	b.n	801436c <uxr_handle_shared_memory+0x330>
                        break;
 8014366:	bf00      	nop
 8014368:	e000      	b.n	801436c <uxr_handle_shared_memory+0x330>
                        break;
 801436a:	bf00      	nop
                }

                uxr_prepend_to_list(item, &uxr_sm_map.mempool_freeitems);
 801436c:	4916      	ldr	r1, [pc, #88]	; (80143c8 <uxr_handle_shared_memory+0x38c>)
 801436e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014370:	f7ff fce0 	bl	8013d34 <uxr_prepend_to_list>
            while (uxr_sm_map.matrix[i][j].list != NULL)
 8014374:	4913      	ldr	r1, [pc, #76]	; (80143c4 <uxr_handle_shared_memory+0x388>)
 8014376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014378:	009a      	lsls	r2, r3, #2
 801437a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801437c:	4413      	add	r3, r2
 801437e:	332c      	adds	r3, #44	; 0x2c
 8014380:	00db      	lsls	r3, r3, #3
 8014382:	440b      	add	r3, r1
 8014384:	689b      	ldr	r3, [r3, #8]
 8014386:	2b00      	cmp	r3, #0
 8014388:	f47f ae8d 	bne.w	80140a6 <uxr_handle_shared_memory+0x6a>
        for (size_t j = 0; j < uxr_sm_map.entities_len; j++)
 801438c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801438e:	3301      	adds	r3, #1
 8014390:	64bb      	str	r3, [r7, #72]	; 0x48
 8014392:	4b0c      	ldr	r3, [pc, #48]	; (80143c4 <uxr_handle_shared_memory+0x388>)
 8014394:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8014398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801439a:	429a      	cmp	r2, r3
 801439c:	d3ea      	bcc.n	8014374 <uxr_handle_shared_memory+0x338>
 801439e:	e000      	b.n	80143a2 <uxr_handle_shared_memory+0x366>
            continue;
 80143a0:	bf00      	nop
    for (size_t i = 0; i < uxr_sm_map.entities_len; i++)
 80143a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143a4:	3301      	adds	r3, #1
 80143a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80143a8:	4b06      	ldr	r3, [pc, #24]	; (80143c4 <uxr_handle_shared_memory+0x388>)
 80143aa:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80143ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80143b0:	429a      	cmp	r2, r3
 80143b2:	f4ff ae56 	bcc.w	8014062 <uxr_handle_shared_memory+0x26>
            }
        }
    }

    UXR_UNLOCK(&uxr_sm_map.lock);
 80143b6:	4805      	ldr	r0, [pc, #20]	; (80143cc <uxr_handle_shared_memory+0x390>)
 80143b8:	f7ff fc48 	bl	8013c4c <uxr_unlock>
}
 80143bc:	bf00      	nop
 80143be:	3754      	adds	r7, #84	; 0x54
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143c4:	2000e100 	.word	0x2000e100
 80143c8:	2000e474 	.word	0x2000e474
 80143cc:	2000e47c 	.word	0x2000e47c

080143d0 <uxr_match_binary_entities>:

bool uxr_match_binary_entities(
        uxr_shared_memory_entity_t* entity_1,
        uxr_shared_memory_entity_t* entity_2)
{
 80143d0:	b590      	push	{r4, r7, lr}
 80143d2:	b089      	sub	sp, #36	; 0x24
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
 80143d8:	6039      	str	r1, [r7, #0]
    if (!(entity_1->object_id.type == UXR_DATAREADER_ID  && entity_2->object_id.type == UXR_DATAWRITER_ID) &&
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	789b      	ldrb	r3, [r3, #2]
 80143de:	2b06      	cmp	r3, #6
 80143e0:	d103      	bne.n	80143ea <uxr_match_binary_entities+0x1a>
 80143e2:	683b      	ldr	r3, [r7, #0]
 80143e4:	789b      	ldrb	r3, [r3, #2]
 80143e6:	2b05      	cmp	r3, #5
 80143e8:	d019      	beq.n	801441e <uxr_match_binary_entities+0x4e>
            !(entity_1->object_id.type == UXR_DATAWRITER_ID  && entity_2->object_id.type == UXR_DATAREADER_ID) &&
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	789b      	ldrb	r3, [r3, #2]
    if (!(entity_1->object_id.type == UXR_DATAREADER_ID  && entity_2->object_id.type == UXR_DATAWRITER_ID) &&
 80143ee:	2b05      	cmp	r3, #5
 80143f0:	d103      	bne.n	80143fa <uxr_match_binary_entities+0x2a>
            !(entity_1->object_id.type == UXR_DATAWRITER_ID  && entity_2->object_id.type == UXR_DATAREADER_ID) &&
 80143f2:	683b      	ldr	r3, [r7, #0]
 80143f4:	789b      	ldrb	r3, [r3, #2]
 80143f6:	2b06      	cmp	r3, #6
 80143f8:	d011      	beq.n	801441e <uxr_match_binary_entities+0x4e>
            !(entity_1->object_id.type == UXR_REQUESTER_ID   && entity_2->object_id.type == UXR_REPLIER_ID) &&
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	789b      	ldrb	r3, [r3, #2]
            !(entity_1->object_id.type == UXR_DATAWRITER_ID  && entity_2->object_id.type == UXR_DATAREADER_ID) &&
 80143fe:	2b07      	cmp	r3, #7
 8014400:	d103      	bne.n	801440a <uxr_match_binary_entities+0x3a>
            !(entity_1->object_id.type == UXR_REQUESTER_ID   && entity_2->object_id.type == UXR_REPLIER_ID) &&
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	789b      	ldrb	r3, [r3, #2]
 8014406:	2b08      	cmp	r3, #8
 8014408:	d009      	beq.n	801441e <uxr_match_binary_entities+0x4e>
            !(entity_1->object_id.type == UXR_REPLIER_ID     && entity_2->object_id.type == UXR_REQUESTER_ID))
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	789b      	ldrb	r3, [r3, #2]
            !(entity_1->object_id.type == UXR_REQUESTER_ID   && entity_2->object_id.type == UXR_REPLIER_ID) &&
 801440e:	2b08      	cmp	r3, #8
 8014410:	d103      	bne.n	801441a <uxr_match_binary_entities+0x4a>
            !(entity_1->object_id.type == UXR_REPLIER_ID     && entity_2->object_id.type == UXR_REQUESTER_ID))
 8014412:	683b      	ldr	r3, [r7, #0]
 8014414:	789b      	ldrb	r3, [r3, #2]
 8014416:	2b07      	cmp	r3, #7
 8014418:	d001      	beq.n	801441e <uxr_match_binary_entities+0x4e>
    {
        return false;
 801441a:	2300      	movs	r3, #0
 801441c:	e06d      	b.n	80144fa <uxr_match_binary_entities+0x12a>
    }

    bool matched = true;
 801441e:	2301      	movs	r3, #1
 8014420:	77fb      	strb	r3, [r7, #31]
    switch (entity_1->object_id.type)
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	789b      	ldrb	r3, [r3, #2]
 8014426:	2b05      	cmp	r3, #5
 8014428:	d032      	beq.n	8014490 <uxr_match_binary_entities+0xc0>
 801442a:	2b06      	cmp	r3, #6
 801442c:	d161      	bne.n	80144f2 <uxr_match_binary_entities+0x122>
    {
        case UXR_DATAREADER_ID:
        {
            OBJK_DataReader_Binary* dr = (OBJK_DataReader_Binary*) &entity_1->data.datareader;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	3310      	adds	r3, #16
 8014432:	61bb      	str	r3, [r7, #24]
            OBJK_DataWriter_Binary* dw = (OBJK_DataWriter_Binary*) &entity_2->data.datawriter;
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	3310      	adds	r3, #16
 8014438:	617b      	str	r3, [r7, #20]
            matched &= uxr_match_endpoint_qosbinary(&dr->qos.base, &dw->qos.base);
 801443a:	69bb      	ldr	r3, [r7, #24]
 801443c:	f103 0208 	add.w	r2, r3, #8
 8014440:	697b      	ldr	r3, [r7, #20]
 8014442:	3308      	adds	r3, #8
 8014444:	4619      	mov	r1, r3
 8014446:	4610      	mov	r0, r2
 8014448:	f7ff fbc2 	bl	8013bd0 <uxr_match_endpoint_qosbinary>
 801444c:	4603      	mov	r3, r0
 801444e:	461a      	mov	r2, r3
 8014450:	7ffb      	ldrb	r3, [r7, #31]
 8014452:	4013      	ands	r3, r2
 8014454:	2b00      	cmp	r3, #0
 8014456:	bf14      	ite	ne
 8014458:	2301      	movne	r3, #1
 801445a:	2300      	moveq	r3, #0
 801445c:	77fb      	strb	r3, [r7, #31]
            matched &= 0 == strcmp(entity_1->related_topic->data.hash, entity_2->related_topic->data.hash);
 801445e:	7ffc      	ldrb	r4, [r7, #31]
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014464:	f103 0210 	add.w	r2, r3, #16
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801446c:	3310      	adds	r3, #16
 801446e:	4619      	mov	r1, r3
 8014470:	4610      	mov	r0, r2
 8014472:	f7eb fecd 	bl	8000210 <strcmp>
 8014476:	4603      	mov	r3, r0
 8014478:	2b00      	cmp	r3, #0
 801447a:	bf0c      	ite	eq
 801447c:	2301      	moveq	r3, #1
 801447e:	2300      	movne	r3, #0
 8014480:	b2db      	uxtb	r3, r3
 8014482:	4023      	ands	r3, r4
 8014484:	2b00      	cmp	r3, #0
 8014486:	bf14      	ite	ne
 8014488:	2301      	movne	r3, #1
 801448a:	2300      	moveq	r3, #0
 801448c:	77fb      	strb	r3, [r7, #31]
            break;
 801448e:	e033      	b.n	80144f8 <uxr_match_binary_entities+0x128>
        }

        case UXR_DATAWRITER_ID:
        {
            OBJK_DataWriter_Binary* dw = (OBJK_DataWriter_Binary*) &entity_1->data.datawriter;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	3310      	adds	r3, #16
 8014494:	613b      	str	r3, [r7, #16]
            OBJK_DataReader_Binary* dr = (OBJK_DataReader_Binary*) &entity_2->data.datareader;
 8014496:	683b      	ldr	r3, [r7, #0]
 8014498:	3310      	adds	r3, #16
 801449a:	60fb      	str	r3, [r7, #12]
            matched &= uxr_match_endpoint_qosbinary(&dr->qos.base, &dw->qos.base);
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	f103 0208 	add.w	r2, r3, #8
 80144a2:	693b      	ldr	r3, [r7, #16]
 80144a4:	3308      	adds	r3, #8
 80144a6:	4619      	mov	r1, r3
 80144a8:	4610      	mov	r0, r2
 80144aa:	f7ff fb91 	bl	8013bd0 <uxr_match_endpoint_qosbinary>
 80144ae:	4603      	mov	r3, r0
 80144b0:	461a      	mov	r2, r3
 80144b2:	7ffb      	ldrb	r3, [r7, #31]
 80144b4:	4013      	ands	r3, r2
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	bf14      	ite	ne
 80144ba:	2301      	movne	r3, #1
 80144bc:	2300      	moveq	r3, #0
 80144be:	77fb      	strb	r3, [r7, #31]
            matched &= 0 == strcmp(entity_1->related_topic->data.hash, entity_2->related_topic->data.hash);
 80144c0:	7ffc      	ldrb	r4, [r7, #31]
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80144c6:	f103 0210 	add.w	r2, r3, #16
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80144ce:	3310      	adds	r3, #16
 80144d0:	4619      	mov	r1, r3
 80144d2:	4610      	mov	r0, r2
 80144d4:	f7eb fe9c 	bl	8000210 <strcmp>
 80144d8:	4603      	mov	r3, r0
 80144da:	2b00      	cmp	r3, #0
 80144dc:	bf0c      	ite	eq
 80144de:	2301      	moveq	r3, #1
 80144e0:	2300      	movne	r3, #0
 80144e2:	b2db      	uxtb	r3, r3
 80144e4:	4023      	ands	r3, r4
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	bf14      	ite	ne
 80144ea:	2301      	movne	r3, #1
 80144ec:	2300      	moveq	r3, #0
 80144ee:	77fb      	strb	r3, [r7, #31]
            break;
 80144f0:	e002      	b.n	80144f8 <uxr_match_binary_entities+0x128>
        }
        case UXR_REQUESTER_ID:
        case UXR_REPLIER_ID:
        default:
            matched = false;
 80144f2:	2300      	movs	r3, #0
 80144f4:	77fb      	strb	r3, [r7, #31]
            break;
 80144f6:	bf00      	nop
    }

    return matched;
 80144f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80144fa:	4618      	mov	r0, r3
 80144fc:	3724      	adds	r7, #36	; 0x24
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd90      	pop	{r4, r7, pc}
	...

08014504 <uxr_update_shared_memory_matching>:

void uxr_update_shared_memory_matching()
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b082      	sub	sp, #8
 8014508:	af00      	add	r7, sp, #0
    UXR_LOCK(&uxr_sm_map.lock);
 801450a:	485d      	ldr	r0, [pc, #372]	; (8014680 <uxr_update_shared_memory_matching+0x17c>)
 801450c:	f7ff fb8f 	bl	8013c2e <uxr_lock>

    for (size_t i = 0; i < uxr_sm_map.entities_len; i++)
 8014510:	2300      	movs	r3, #0
 8014512:	607b      	str	r3, [r7, #4]
 8014514:	e0a5      	b.n	8014662 <uxr_update_shared_memory_matching+0x15e>
    {
        for (size_t j = 0; j < uxr_sm_map.entities_len; j++)
 8014516:	2300      	movs	r3, #0
 8014518:	603b      	str	r3, [r7, #0]
 801451a:	e098      	b.n	801464e <uxr_update_shared_memory_matching+0x14a>
        {
            if (i != j &&
 801451c:	687a      	ldr	r2, [r7, #4]
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	429a      	cmp	r2, r3
 8014522:	f000 8090 	beq.w	8014646 <uxr_update_shared_memory_matching+0x142>
                    uxr_sm_map.entities[i].type == uxr_sm_map.entities[j].type  &&
 8014526:	4a57      	ldr	r2, [pc, #348]	; (8014684 <uxr_update_shared_memory_matching+0x180>)
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2158      	movs	r1, #88	; 0x58
 801452c:	fb01 f303 	mul.w	r3, r1, r3
 8014530:	4413      	add	r3, r2
 8014532:	3308      	adds	r3, #8
 8014534:	781a      	ldrb	r2, [r3, #0]
 8014536:	4953      	ldr	r1, [pc, #332]	; (8014684 <uxr_update_shared_memory_matching+0x180>)
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	2058      	movs	r0, #88	; 0x58
 801453c:	fb00 f303 	mul.w	r3, r0, r3
 8014540:	440b      	add	r3, r1
 8014542:	3308      	adds	r3, #8
 8014544:	781b      	ldrb	r3, [r3, #0]
            if (i != j &&
 8014546:	429a      	cmp	r2, r3
 8014548:	d17d      	bne.n	8014646 <uxr_update_shared_memory_matching+0x142>
                    uxr_sm_map.entities[i].object_id.type != uxr_sm_map.entities[j].object_id.type &&
 801454a:	4a4e      	ldr	r2, [pc, #312]	; (8014684 <uxr_update_shared_memory_matching+0x180>)
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	2158      	movs	r1, #88	; 0x58
 8014550:	fb01 f303 	mul.w	r3, r1, r3
 8014554:	4413      	add	r3, r2
 8014556:	3302      	adds	r3, #2
 8014558:	781a      	ldrb	r2, [r3, #0]
 801455a:	494a      	ldr	r1, [pc, #296]	; (8014684 <uxr_update_shared_memory_matching+0x180>)
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	2058      	movs	r0, #88	; 0x58
 8014560:	fb00 f303 	mul.w	r3, r0, r3
 8014564:	440b      	add	r3, r1
 8014566:	3302      	adds	r3, #2
 8014568:	781b      	ldrb	r3, [r3, #0]
                    uxr_sm_map.entities[i].type == uxr_sm_map.entities[j].type  &&
 801456a:	429a      	cmp	r2, r3
 801456c:	d06b      	beq.n	8014646 <uxr_update_shared_memory_matching+0x142>
                    uxr_sm_map.entities[i].object_id.type != UXR_TOPIC_ID &&
 801456e:	4a45      	ldr	r2, [pc, #276]	; (8014684 <uxr_update_shared_memory_matching+0x180>)
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	2158      	movs	r1, #88	; 0x58
 8014574:	fb01 f303 	mul.w	r3, r1, r3
 8014578:	4413      	add	r3, r2
 801457a:	3302      	adds	r3, #2
 801457c:	781b      	ldrb	r3, [r3, #0]
                    uxr_sm_map.entities[i].object_id.type != uxr_sm_map.entities[j].object_id.type &&
 801457e:	2b02      	cmp	r3, #2
 8014580:	d061      	beq.n	8014646 <uxr_update_shared_memory_matching+0x142>
                    uxr_sm_map.entities[j].object_id.type != UXR_TOPIC_ID)
 8014582:	4a40      	ldr	r2, [pc, #256]	; (8014684 <uxr_update_shared_memory_matching+0x180>)
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	2158      	movs	r1, #88	; 0x58
 8014588:	fb01 f303 	mul.w	r3, r1, r3
 801458c:	4413      	add	r3, r2
 801458e:	3302      	adds	r3, #2
 8014590:	781b      	ldrb	r3, [r3, #0]
                    uxr_sm_map.entities[i].object_id.type != UXR_TOPIC_ID &&
 8014592:	2b02      	cmp	r3, #2
 8014594:	d057      	beq.n	8014646 <uxr_update_shared_memory_matching+0x142>
            {
                switch (uxr_sm_map.entities[i].type)
 8014596:	4a3b      	ldr	r2, [pc, #236]	; (8014684 <uxr_update_shared_memory_matching+0x180>)
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	2158      	movs	r1, #88	; 0x58
 801459c:	fb01 f303 	mul.w	r3, r1, r3
 80145a0:	4413      	add	r3, r2
 80145a2:	3308      	adds	r3, #8
 80145a4:	781b      	ldrb	r3, [r3, #0]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d002      	beq.n	80145b0 <uxr_update_shared_memory_matching+0xac>
 80145aa:	2b01      	cmp	r3, #1
 80145ac:	d023      	beq.n	80145f6 <uxr_update_shared_memory_matching+0xf2>
 80145ae:	e03f      	b.n	8014630 <uxr_update_shared_memory_matching+0x12c>
                {
                    case UXR_SHARED_MEMORY_HASH_ENTITY:
                        uxr_sm_map.matrix[i][j].matched =
                                0 == memcmp(uxr_sm_map.entities[i].data.hash, uxr_sm_map.entities[j].data.hash,
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	2258      	movs	r2, #88	; 0x58
 80145b4:	fb02 f303 	mul.w	r3, r2, r3
 80145b8:	3310      	adds	r3, #16
 80145ba:	4a32      	ldr	r2, [pc, #200]	; (8014684 <uxr_update_shared_memory_matching+0x180>)
 80145bc:	1898      	adds	r0, r3, r2
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	2258      	movs	r2, #88	; 0x58
 80145c2:	fb02 f303 	mul.w	r3, r2, r3
 80145c6:	3310      	adds	r3, #16
 80145c8:	4a2e      	ldr	r2, [pc, #184]	; (8014684 <uxr_update_shared_memory_matching+0x180>)
 80145ca:	4413      	add	r3, r2
 80145cc:	2204      	movs	r2, #4
 80145ce:	4619      	mov	r1, r3
 80145d0:	f00c fb66 	bl	8020ca0 <memcmp>
 80145d4:	4603      	mov	r3, r0
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	bf0c      	ite	eq
 80145da:	2301      	moveq	r3, #1
 80145dc:	2300      	movne	r3, #0
 80145de:	b2d8      	uxtb	r0, r3
                        uxr_sm_map.matrix[i][j].matched =
 80145e0:	4928      	ldr	r1, [pc, #160]	; (8014684 <uxr_update_shared_memory_matching+0x180>)
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	009a      	lsls	r2, r3, #2
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	4413      	add	r3, r2
 80145ea:	332c      	adds	r3, #44	; 0x2c
 80145ec:	00db      	lsls	r3, r3, #3
 80145ee:	440b      	add	r3, r1
 80145f0:	4602      	mov	r2, r0
 80145f2:	711a      	strb	r2, [r3, #4]
                                        UXR_MATCHING_HASH_SIZE);
                        break;
 80145f4:	e028      	b.n	8014648 <uxr_update_shared_memory_matching+0x144>
                    case UXR_SHARED_MEMORY_BIN_ENTITY:
                        uxr_sm_map.matrix[i][j].matched = uxr_match_binary_entities(&uxr_sm_map.entities[i],
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2258      	movs	r2, #88	; 0x58
 80145fa:	fb02 f303 	mul.w	r3, r2, r3
 80145fe:	4a21      	ldr	r2, [pc, #132]	; (8014684 <uxr_update_shared_memory_matching+0x180>)
 8014600:	441a      	add	r2, r3
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	2158      	movs	r1, #88	; 0x58
 8014606:	fb01 f303 	mul.w	r3, r1, r3
 801460a:	491e      	ldr	r1, [pc, #120]	; (8014684 <uxr_update_shared_memory_matching+0x180>)
 801460c:	440b      	add	r3, r1
 801460e:	4619      	mov	r1, r3
 8014610:	4610      	mov	r0, r2
 8014612:	f7ff fedd 	bl	80143d0 <uxr_match_binary_entities>
 8014616:	4603      	mov	r3, r0
 8014618:	4618      	mov	r0, r3
 801461a:	491a      	ldr	r1, [pc, #104]	; (8014684 <uxr_update_shared_memory_matching+0x180>)
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	009a      	lsls	r2, r3, #2
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	4413      	add	r3, r2
 8014624:	332c      	adds	r3, #44	; 0x2c
 8014626:	00db      	lsls	r3, r3, #3
 8014628:	440b      	add	r3, r1
 801462a:	4602      	mov	r2, r0
 801462c:	711a      	strb	r2, [r3, #4]
                                        &uxr_sm_map.entities[j]);
                        break;
 801462e:	e00b      	b.n	8014648 <uxr_update_shared_memory_matching+0x144>
                    default:
                        uxr_sm_map.matrix[i][j].matched = 0;
 8014630:	4914      	ldr	r1, [pc, #80]	; (8014684 <uxr_update_shared_memory_matching+0x180>)
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	009a      	lsls	r2, r3, #2
 8014636:	683b      	ldr	r3, [r7, #0]
 8014638:	4413      	add	r3, r2
 801463a:	332c      	adds	r3, #44	; 0x2c
 801463c:	00db      	lsls	r3, r3, #3
 801463e:	440b      	add	r3, r1
 8014640:	2200      	movs	r2, #0
 8014642:	711a      	strb	r2, [r3, #4]
 8014644:	e000      	b.n	8014648 <uxr_update_shared_memory_matching+0x144>
                }
            }
 8014646:	bf00      	nop
        for (size_t j = 0; j < uxr_sm_map.entities_len; j++)
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	3301      	adds	r3, #1
 801464c:	603b      	str	r3, [r7, #0]
 801464e:	4b0d      	ldr	r3, [pc, #52]	; (8014684 <uxr_update_shared_memory_matching+0x180>)
 8014650:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8014654:	683a      	ldr	r2, [r7, #0]
 8014656:	429a      	cmp	r2, r3
 8014658:	f4ff af60 	bcc.w	801451c <uxr_update_shared_memory_matching+0x18>
    for (size_t i = 0; i < uxr_sm_map.entities_len; i++)
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	3301      	adds	r3, #1
 8014660:	607b      	str	r3, [r7, #4]
 8014662:	4b08      	ldr	r3, [pc, #32]	; (8014684 <uxr_update_shared_memory_matching+0x180>)
 8014664:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8014668:	687a      	ldr	r2, [r7, #4]
 801466a:	429a      	cmp	r2, r3
 801466c:	f4ff af53 	bcc.w	8014516 <uxr_update_shared_memory_matching+0x12>
        }
    }

    UXR_UNLOCK(&uxr_sm_map.lock);
 8014670:	4803      	ldr	r0, [pc, #12]	; (8014680 <uxr_update_shared_memory_matching+0x17c>)
 8014672:	f7ff faeb 	bl	8013c4c <uxr_unlock>
}
 8014676:	bf00      	nop
 8014678:	3708      	adds	r7, #8
 801467a:	46bd      	mov	sp, r7
 801467c:	bd80      	pop	{r7, pc}
 801467e:	bf00      	nop
 8014680:	2000e47c 	.word	0x2000e47c
 8014684:	2000e100 	.word	0x2000e100

08014688 <uxr_add_shared_memory_entity_xml>:

void uxr_add_shared_memory_entity_xml(
        uxrSession* session,
        uxrObjectId entity_id,
        const char* xml)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b084      	sub	sp, #16
 801468c:	af00      	add	r7, sp, #0
 801468e:	60f8      	str	r0, [r7, #12]
 8014690:	60b9      	str	r1, [r7, #8]
 8014692:	607a      	str	r2, [r7, #4]
    UXR_SHARED_MEMORY_INIT();
 8014694:	4b27      	ldr	r3, [pc, #156]	; (8014734 <uxr_add_shared_memory_entity_xml+0xac>)
 8014696:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 801469a:	f083 0301 	eor.w	r3, r3, #1
 801469e:	b2db      	uxtb	r3, r3
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d001      	beq.n	80146a8 <uxr_add_shared_memory_entity_xml+0x20>
 80146a4:	f7ff fb72 	bl	8013d8c <uxr_init_shared_memory>
    UXR_LOCK(&uxr_sm_map.lock);
 80146a8:	4823      	ldr	r0, [pc, #140]	; (8014738 <uxr_add_shared_memory_entity_xml+0xb0>)
 80146aa:	f7ff fac0 	bl	8013c2e <uxr_lock>

    if (uxr_sm_map.entities_len <= UXR_CONFIG_SHARED_MEMORY_MAX_ENTITIES - 1)
 80146ae:	4b21      	ldr	r3, [pc, #132]	; (8014734 <uxr_add_shared_memory_entity_xml+0xac>)
 80146b0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80146b4:	2b03      	cmp	r3, #3
 80146b6:	d836      	bhi.n	8014726 <uxr_add_shared_memory_entity_xml+0x9e>
    {
        uxr_sm_map.entities[uxr_sm_map.entities_len].object_id = entity_id;
 80146b8:	4b1e      	ldr	r3, [pc, #120]	; (8014734 <uxr_add_shared_memory_entity_xml+0xac>)
 80146ba:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80146be:	4a1d      	ldr	r2, [pc, #116]	; (8014734 <uxr_add_shared_memory_entity_xml+0xac>)
 80146c0:	2158      	movs	r1, #88	; 0x58
 80146c2:	fb01 f303 	mul.w	r3, r1, r3
 80146c6:	4413      	add	r3, r2
 80146c8:	68ba      	ldr	r2, [r7, #8]
 80146ca:	601a      	str	r2, [r3, #0]
        uxr_sm_map.entities[uxr_sm_map.entities_len].session = session;
 80146cc:	4b19      	ldr	r3, [pc, #100]	; (8014734 <uxr_add_shared_memory_entity_xml+0xac>)
 80146ce:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80146d2:	4a18      	ldr	r2, [pc, #96]	; (8014734 <uxr_add_shared_memory_entity_xml+0xac>)
 80146d4:	2158      	movs	r1, #88	; 0x58
 80146d6:	fb01 f303 	mul.w	r3, r1, r3
 80146da:	4413      	add	r3, r2
 80146dc:	3304      	adds	r3, #4
 80146de:	68fa      	ldr	r2, [r7, #12]
 80146e0:	601a      	str	r2, [r3, #0]
        uxr_sm_map.entities[uxr_sm_map.entities_len].type = UXR_SHARED_MEMORY_HASH_ENTITY;
 80146e2:	4b14      	ldr	r3, [pc, #80]	; (8014734 <uxr_add_shared_memory_entity_xml+0xac>)
 80146e4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80146e8:	4a12      	ldr	r2, [pc, #72]	; (8014734 <uxr_add_shared_memory_entity_xml+0xac>)
 80146ea:	2158      	movs	r1, #88	; 0x58
 80146ec:	fb01 f303 	mul.w	r3, r1, r3
 80146f0:	4413      	add	r3, r2
 80146f2:	3308      	adds	r3, #8
 80146f4:	2200      	movs	r2, #0
 80146f6:	701a      	strb	r2, [r3, #0]
        uxr_generate_hash_from_xml(xml, entity_id, uxr_sm_map.entities[uxr_sm_map.entities_len].data.hash);
 80146f8:	4b0e      	ldr	r3, [pc, #56]	; (8014734 <uxr_add_shared_memory_entity_xml+0xac>)
 80146fa:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80146fe:	2258      	movs	r2, #88	; 0x58
 8014700:	fb02 f303 	mul.w	r3, r2, r3
 8014704:	3310      	adds	r3, #16
 8014706:	4a0b      	ldr	r2, [pc, #44]	; (8014734 <uxr_add_shared_memory_entity_xml+0xac>)
 8014708:	4413      	add	r3, r2
 801470a:	461a      	mov	r2, r3
 801470c:	68b9      	ldr	r1, [r7, #8]
 801470e:	6878      	ldr	r0, [r7, #4]
 8014710:	f7ff f8c4 	bl	801389c <uxr_generate_hash_from_xml>
        uxr_sm_map.entities_len++;
 8014714:	4b07      	ldr	r3, [pc, #28]	; (8014734 <uxr_add_shared_memory_entity_xml+0xac>)
 8014716:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 801471a:	3301      	adds	r3, #1
 801471c:	4a05      	ldr	r2, [pc, #20]	; (8014734 <uxr_add_shared_memory_entity_xml+0xac>)
 801471e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
        uxr_update_shared_memory_matching();
 8014722:	f7ff feef 	bl	8014504 <uxr_update_shared_memory_matching>
    }

    UXR_UNLOCK(&uxr_sm_map.lock);
 8014726:	4804      	ldr	r0, [pc, #16]	; (8014738 <uxr_add_shared_memory_entity_xml+0xb0>)
 8014728:	f7ff fa90 	bl	8013c4c <uxr_unlock>
}
 801472c:	bf00      	nop
 801472e:	3710      	adds	r7, #16
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}
 8014734:	2000e100 	.word	0x2000e100
 8014738:	2000e47c 	.word	0x2000e47c

0801473c <uxr_add_shared_memory_entity_bin>:

void uxr_add_shared_memory_entity_bin(
        uxrSession* session,
        uxrObjectId entity_id,
        const void* entity)
{
 801473c:	b5b0      	push	{r4, r5, r7, lr}
 801473e:	b08a      	sub	sp, #40	; 0x28
 8014740:	af04      	add	r7, sp, #16
 8014742:	60f8      	str	r0, [r7, #12]
 8014744:	60b9      	str	r1, [r7, #8]
 8014746:	607a      	str	r2, [r7, #4]
    UXR_SHARED_MEMORY_INIT();
 8014748:	4ba1      	ldr	r3, [pc, #644]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 801474a:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 801474e:	f083 0301 	eor.w	r3, r3, #1
 8014752:	b2db      	uxtb	r3, r3
 8014754:	2b00      	cmp	r3, #0
 8014756:	d001      	beq.n	801475c <uxr_add_shared_memory_entity_bin+0x20>
 8014758:	f7ff fb18 	bl	8013d8c <uxr_init_shared_memory>
    UXR_LOCK(&uxr_sm_map.lock);
 801475c:	489d      	ldr	r0, [pc, #628]	; (80149d4 <uxr_add_shared_memory_entity_bin+0x298>)
 801475e:	f7ff fa66 	bl	8013c2e <uxr_lock>

    if (uxr_sm_map.entities_len <= UXR_CONFIG_SHARED_MEMORY_MAX_ENTITIES - 1)
 8014762:	4b9b      	ldr	r3, [pc, #620]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 8014764:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8014768:	2b03      	cmp	r3, #3
 801476a:	f200 8129 	bhi.w	80149c0 <uxr_add_shared_memory_entity_bin+0x284>
    {
        uxr_sm_map.entities[uxr_sm_map.entities_len].object_id = entity_id;
 801476e:	4b98      	ldr	r3, [pc, #608]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 8014770:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8014774:	4a96      	ldr	r2, [pc, #600]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 8014776:	2158      	movs	r1, #88	; 0x58
 8014778:	fb01 f303 	mul.w	r3, r1, r3
 801477c:	4413      	add	r3, r2
 801477e:	68ba      	ldr	r2, [r7, #8]
 8014780:	601a      	str	r2, [r3, #0]
        uxr_sm_map.entities[uxr_sm_map.entities_len].session = session;
 8014782:	4b93      	ldr	r3, [pc, #588]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 8014784:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8014788:	4a91      	ldr	r2, [pc, #580]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 801478a:	2158      	movs	r1, #88	; 0x58
 801478c:	fb01 f303 	mul.w	r3, r1, r3
 8014790:	4413      	add	r3, r2
 8014792:	3304      	adds	r3, #4
 8014794:	68fa      	ldr	r2, [r7, #12]
 8014796:	601a      	str	r2, [r3, #0]
        uxr_sm_map.entities[uxr_sm_map.entities_len].type = UXR_SHARED_MEMORY_BIN_ENTITY;
 8014798:	4b8d      	ldr	r3, [pc, #564]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 801479a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 801479e:	4a8c      	ldr	r2, [pc, #560]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 80147a0:	2158      	movs	r1, #88	; 0x58
 80147a2:	fb01 f303 	mul.w	r3, r1, r3
 80147a6:	4413      	add	r3, r2
 80147a8:	3308      	adds	r3, #8
 80147aa:	2201      	movs	r2, #1
 80147ac:	701a      	strb	r2, [r3, #0]

        uxrObjectId related_object_id;
        switch (entity_id.type)
 80147ae:	7abb      	ldrb	r3, [r7, #10]
 80147b0:	3b02      	subs	r3, #2
 80147b2:	2b06      	cmp	r3, #6
 80147b4:	f200 80fa 	bhi.w	80149ac <uxr_add_shared_memory_entity_bin+0x270>
 80147b8:	a201      	add	r2, pc, #4	; (adr r2, 80147c0 <uxr_add_shared_memory_entity_bin+0x84>)
 80147ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147be:	bf00      	nop
 80147c0:	08014961 	.word	0x08014961
 80147c4:	080149ad 	.word	0x080149ad
 80147c8:	080149ad 	.word	0x080149ad
 80147cc:	080147dd 	.word	0x080147dd
 80147d0:	0801483b 	.word	0x0801483b
 80147d4:	08014899 	.word	0x08014899
 80147d8:	080148fd 	.word	0x080148fd
        {
            case UXR_DATAWRITER_ID:
                related_object_id = uxr_object_id_from_raw(((OBJK_DataWriter_Binary*) entity)->topic_id.data);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	4618      	mov	r0, r3
 80147e0:	f7fb f9c9 	bl	800fb76 <uxr_object_id_from_raw>
 80147e4:	4603      	mov	r3, r0
 80147e6:	617b      	str	r3, [r7, #20]
                uxr_sm_map.entities[uxr_sm_map.entities_len].data.datawriter = *((OBJK_DataWriter_Binary*) entity);
 80147e8:	4b79      	ldr	r3, [pc, #484]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 80147ea:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80147ee:	4a78      	ldr	r2, [pc, #480]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 80147f0:	2158      	movs	r1, #88	; 0x58
 80147f2:	fb01 f303 	mul.w	r3, r1, r3
 80147f6:	4413      	add	r3, r2
 80147f8:	f103 0210 	add.w	r2, r3, #16
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	4614      	mov	r4, r2
 8014800:	461d      	mov	r5, r3
 8014802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801480a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801480c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801480e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014812:	e884 0003 	stmia.w	r4, {r0, r1}
                uxr_sm_map.entities[uxr_sm_map.entities_len].related_topic = uxr_shared_memory_get_entity(session,
 8014816:	4b6e      	ldr	r3, [pc, #440]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 8014818:	f8d3 4160 	ldr.w	r4, [r3, #352]	; 0x160
 801481c:	f107 0314 	add.w	r3, r7, #20
 8014820:	4619      	mov	r1, r3
 8014822:	68f8      	ldr	r0, [r7, #12]
 8014824:	f7ff fb6a 	bl	8013efc <uxr_shared_memory_get_entity>
 8014828:	4602      	mov	r2, r0
 801482a:	4969      	ldr	r1, [pc, #420]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 801482c:	2358      	movs	r3, #88	; 0x58
 801482e:	fb04 f303 	mul.w	r3, r4, r3
 8014832:	440b      	add	r3, r1
 8014834:	3350      	adds	r3, #80	; 0x50
 8014836:	601a      	str	r2, [r3, #0]
                                &related_object_id);
                break;
 8014838:	e0b9      	b.n	80149ae <uxr_add_shared_memory_entity_bin+0x272>
            case UXR_DATAREADER_ID:
                related_object_id = uxr_object_id_from_raw(((OBJK_DataReader_Binary*) entity)->topic_id.data);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	4618      	mov	r0, r3
 801483e:	f7fb f99a 	bl	800fb76 <uxr_object_id_from_raw>
 8014842:	4603      	mov	r3, r0
 8014844:	617b      	str	r3, [r7, #20]
                uxr_sm_map.entities[uxr_sm_map.entities_len].data.datareader = *((OBJK_DataReader_Binary*) entity);
 8014846:	4b62      	ldr	r3, [pc, #392]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 8014848:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 801484c:	4a60      	ldr	r2, [pc, #384]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 801484e:	2158      	movs	r1, #88	; 0x58
 8014850:	fb01 f303 	mul.w	r3, r1, r3
 8014854:	4413      	add	r3, r2
 8014856:	f103 0210 	add.w	r2, r3, #16
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	4614      	mov	r4, r2
 801485e:	461d      	mov	r5, r3
 8014860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801486a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801486c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                uxr_sm_map.entities[uxr_sm_map.entities_len].related_topic = uxr_shared_memory_get_entity(session,
 8014874:	4b56      	ldr	r3, [pc, #344]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 8014876:	f8d3 4160 	ldr.w	r4, [r3, #352]	; 0x160
 801487a:	f107 0314 	add.w	r3, r7, #20
 801487e:	4619      	mov	r1, r3
 8014880:	68f8      	ldr	r0, [r7, #12]
 8014882:	f7ff fb3b 	bl	8013efc <uxr_shared_memory_get_entity>
 8014886:	4602      	mov	r2, r0
 8014888:	4951      	ldr	r1, [pc, #324]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 801488a:	2358      	movs	r3, #88	; 0x58
 801488c:	fb04 f303 	mul.w	r3, r4, r3
 8014890:	440b      	add	r3, r1
 8014892:	3350      	adds	r3, #80	; 0x50
 8014894:	601a      	str	r2, [r3, #0]
                                &related_object_id);
                break;
 8014896:	e08a      	b.n	80149ae <uxr_add_shared_memory_entity_bin+0x272>
            case UXR_REQUESTER_ID:
                uxr_sm_map.entities[uxr_sm_map.entities_len].type = UXR_SHARED_MEMORY_HASH_ENTITY;
 8014898:	4b4d      	ldr	r3, [pc, #308]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 801489a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 801489e:	4a4c      	ldr	r2, [pc, #304]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 80148a0:	2158      	movs	r1, #88	; 0x58
 80148a2:	fb01 f303 	mul.w	r3, r1, r3
 80148a6:	4413      	add	r3, r2
 80148a8:	3308      	adds	r3, #8
 80148aa:	2200      	movs	r2, #0
 80148ac:	701a      	strb	r2, [r3, #0]
                uxr_generate_hash_from_strings(
                    uxr_sm_map.entities[uxr_sm_map.entities_len].data.hash, 5,
 80148ae:	4b48      	ldr	r3, [pc, #288]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 80148b0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80148b4:	2258      	movs	r2, #88	; 0x58
 80148b6:	fb02 f303 	mul.w	r3, r2, r3
 80148ba:	3310      	adds	r3, #16
 80148bc:	4a44      	ldr	r2, [pc, #272]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 80148be:	1898      	adds	r0, r3, r2
                uxr_generate_hash_from_strings(
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	681c      	ldr	r4, [r3, #0]
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	685d      	ldr	r5, [r3, #4]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	689b      	ldr	r3, [r3, #8]
 80148cc:	687a      	ldr	r2, [r7, #4]
 80148ce:	6912      	ldr	r2, [r2, #16]
 80148d0:	6879      	ldr	r1, [r7, #4]
 80148d2:	6989      	ldr	r1, [r1, #24]
 80148d4:	9102      	str	r1, [sp, #8]
 80148d6:	9201      	str	r2, [sp, #4]
 80148d8:	9300      	str	r3, [sp, #0]
 80148da:	462b      	mov	r3, r5
 80148dc:	4622      	mov	r2, r4
 80148de:	2105      	movs	r1, #5
 80148e0:	f7ff f948 	bl	8013b74 <uxr_generate_hash_from_strings>
                    ((OBJK_Requester_Binary*) entity)->service_name,
                    ((OBJK_Requester_Binary*) entity)->request_type,
                    ((OBJK_Requester_Binary*) entity)->reply_type,
                    ((OBJK_Requester_Binary*) entity)->request_topic_name,
                    ((OBJK_Requester_Binary*) entity)->reply_topic_name);
                uxr_sm_map.entities[uxr_sm_map.entities_len].related_topic = NULL;
 80148e4:	4b3a      	ldr	r3, [pc, #232]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 80148e6:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80148ea:	4a39      	ldr	r2, [pc, #228]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 80148ec:	2158      	movs	r1, #88	; 0x58
 80148ee:	fb01 f303 	mul.w	r3, r1, r3
 80148f2:	4413      	add	r3, r2
 80148f4:	3350      	adds	r3, #80	; 0x50
 80148f6:	2200      	movs	r2, #0
 80148f8:	601a      	str	r2, [r3, #0]
                break;
 80148fa:	e058      	b.n	80149ae <uxr_add_shared_memory_entity_bin+0x272>
            case UXR_REPLIER_ID:
                uxr_sm_map.entities[uxr_sm_map.entities_len].type = UXR_SHARED_MEMORY_HASH_ENTITY;
 80148fc:	4b34      	ldr	r3, [pc, #208]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 80148fe:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8014902:	4a33      	ldr	r2, [pc, #204]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 8014904:	2158      	movs	r1, #88	; 0x58
 8014906:	fb01 f303 	mul.w	r3, r1, r3
 801490a:	4413      	add	r3, r2
 801490c:	3308      	adds	r3, #8
 801490e:	2200      	movs	r2, #0
 8014910:	701a      	strb	r2, [r3, #0]
                uxr_generate_hash_from_strings(
                    uxr_sm_map.entities[uxr_sm_map.entities_len].data.hash, 5,
 8014912:	4b2f      	ldr	r3, [pc, #188]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 8014914:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8014918:	2258      	movs	r2, #88	; 0x58
 801491a:	fb02 f303 	mul.w	r3, r2, r3
 801491e:	3310      	adds	r3, #16
 8014920:	4a2b      	ldr	r2, [pc, #172]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 8014922:	1898      	adds	r0, r3, r2
                uxr_generate_hash_from_strings(
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	681c      	ldr	r4, [r3, #0]
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	685d      	ldr	r5, [r3, #4]
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	689b      	ldr	r3, [r3, #8]
 8014930:	687a      	ldr	r2, [r7, #4]
 8014932:	6912      	ldr	r2, [r2, #16]
 8014934:	6879      	ldr	r1, [r7, #4]
 8014936:	6989      	ldr	r1, [r1, #24]
 8014938:	9102      	str	r1, [sp, #8]
 801493a:	9201      	str	r2, [sp, #4]
 801493c:	9300      	str	r3, [sp, #0]
 801493e:	462b      	mov	r3, r5
 8014940:	4622      	mov	r2, r4
 8014942:	2105      	movs	r1, #5
 8014944:	f7ff f916 	bl	8013b74 <uxr_generate_hash_from_strings>
                    ((OBJK_Replier_Binary*) entity)->service_name,
                    ((OBJK_Replier_Binary*) entity)->request_type,
                    ((OBJK_Replier_Binary*) entity)->reply_type,
                    ((OBJK_Replier_Binary*) entity)->request_topic_name,
                    ((OBJK_Replier_Binary*) entity)->reply_topic_name);
                uxr_sm_map.entities[uxr_sm_map.entities_len].related_topic = NULL;
 8014948:	4b21      	ldr	r3, [pc, #132]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 801494a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 801494e:	4a20      	ldr	r2, [pc, #128]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 8014950:	2158      	movs	r1, #88	; 0x58
 8014952:	fb01 f303 	mul.w	r3, r1, r3
 8014956:	4413      	add	r3, r2
 8014958:	3350      	adds	r3, #80	; 0x50
 801495a:	2200      	movs	r2, #0
 801495c:	601a      	str	r2, [r3, #0]
                break;
 801495e:	e026      	b.n	80149ae <uxr_add_shared_memory_entity_bin+0x272>
            case UXR_TOPIC_ID:
                uxr_sm_map.entities[uxr_sm_map.entities_len].type = UXR_SHARED_MEMORY_HASH_ENTITY;
 8014960:	4b1b      	ldr	r3, [pc, #108]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 8014962:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8014966:	4a1a      	ldr	r2, [pc, #104]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 8014968:	2158      	movs	r1, #88	; 0x58
 801496a:	fb01 f303 	mul.w	r3, r1, r3
 801496e:	4413      	add	r3, r2
 8014970:	3308      	adds	r3, #8
 8014972:	2200      	movs	r2, #0
 8014974:	701a      	strb	r2, [r3, #0]
                uxr_generate_hash_from_strings(
                    uxr_sm_map.entities[uxr_sm_map.entities_len].data.hash, 2,
 8014976:	4b16      	ldr	r3, [pc, #88]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 8014978:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 801497c:	2258      	movs	r2, #88	; 0x58
 801497e:	fb02 f303 	mul.w	r3, r2, r3
 8014982:	3310      	adds	r3, #16
 8014984:	4a12      	ldr	r2, [pc, #72]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 8014986:	1898      	adds	r0, r3, r2
                uxr_generate_hash_from_strings(
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	681a      	ldr	r2, [r3, #0]
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	691b      	ldr	r3, [r3, #16]
 8014990:	2102      	movs	r1, #2
 8014992:	f7ff f8ef 	bl	8013b74 <uxr_generate_hash_from_strings>
                    ((OBJK_Topic_Binary*) entity)->topic_name,
                    ((OBJK_Topic_Binary*) entity)->type_name);
                uxr_sm_map.entities[uxr_sm_map.entities_len].related_topic = NULL;
 8014996:	4b0e      	ldr	r3, [pc, #56]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 8014998:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 801499c:	4a0c      	ldr	r2, [pc, #48]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 801499e:	2158      	movs	r1, #88	; 0x58
 80149a0:	fb01 f303 	mul.w	r3, r1, r3
 80149a4:	4413      	add	r3, r2
 80149a6:	3350      	adds	r3, #80	; 0x50
 80149a8:	2200      	movs	r2, #0
 80149aa:	601a      	str	r2, [r3, #0]
            default:
                break;
 80149ac:	bf00      	nop
        }
        uxr_sm_map.entities_len++;
 80149ae:	4b08      	ldr	r3, [pc, #32]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 80149b0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80149b4:	3301      	adds	r3, #1
 80149b6:	4a06      	ldr	r2, [pc, #24]	; (80149d0 <uxr_add_shared_memory_entity_bin+0x294>)
 80149b8:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
        uxr_update_shared_memory_matching();
 80149bc:	f7ff fda2 	bl	8014504 <uxr_update_shared_memory_matching>
    }

    UXR_UNLOCK(&uxr_sm_map.lock);
 80149c0:	4804      	ldr	r0, [pc, #16]	; (80149d4 <uxr_add_shared_memory_entity_bin+0x298>)
 80149c2:	f7ff f943 	bl	8013c4c <uxr_unlock>
}
 80149c6:	bf00      	nop
 80149c8:	3718      	adds	r7, #24
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bdb0      	pop	{r4, r5, r7, pc}
 80149ce:	bf00      	nop
 80149d0:	2000e100 	.word	0x2000e100
 80149d4:	2000e47c 	.word	0x2000e47c

080149d8 <send_custom_msg>:
*******************************************************************************/
static bool send_custom_msg(
        void* instance,
        const uint8_t* buf,
        size_t len)
{
 80149d8:	b590      	push	{r4, r7, lr}
 80149da:	b08d      	sub	sp, #52	; 0x34
 80149dc:	af04      	add	r7, sp, #16
 80149de:	60f8      	str	r0, [r7, #12]
 80149e0:	60b9      	str	r1, [r7, #8]
 80149e2:	607a      	str	r2, [r7, #4]
    bool rv = false;
 80149e4:	2300      	movs	r3, #0
 80149e6:	77fb      	strb	r3, [r7, #31]
    uxrCustomTransport* transport = (uxrCustomTransport*)instance;
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	617b      	str	r3, [r7, #20]
    UXR_LOCK_TRANSPORT((&transport->comm));
 80149ec:	697b      	ldr	r3, [r7, #20]
 80149ee:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80149f2:	4618      	mov	r0, r3
 80149f4:	f7ff f91b 	bl	8013c2e <uxr_lock>

    uint8_t errcode;
    size_t bytes_written = 0;
 80149f8:	2300      	movs	r3, #0
 80149fa:	61bb      	str	r3, [r7, #24]
    if (transport->framing)
 80149fc:	697b      	ldr	r3, [r7, #20]
 80149fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d012      	beq.n	8014a2c <send_custom_msg+0x54>
    {
#ifdef UCLIENT_PROFILE_STREAM_FRAMING
        bytes_written = uxr_write_framed_msg(&transport->framing_io,
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	f203 2002 	addw	r0, r3, #514	; 0x202
                        (uxr_write_cb) transport->write,
 8014a0c:	697b      	ldr	r3, [r7, #20]
 8014a0e:	f8d3 1270 	ldr.w	r1, [r3, #624]	; 0x270
        bytes_written = uxr_write_framed_msg(&transport->framing_io,
 8014a12:	f107 0313 	add.w	r3, r7, #19
 8014a16:	9302      	str	r3, [sp, #8]
 8014a18:	2300      	movs	r3, #0
 8014a1a:	9301      	str	r3, [sp, #4]
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	9300      	str	r3, [sp, #0]
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	697a      	ldr	r2, [r7, #20]
 8014a24:	f000 fa71 	bl	8014f0a <uxr_write_framed_msg>
 8014a28:	61b8      	str	r0, [r7, #24]
 8014a2a:	e009      	b.n	8014a40 <send_custom_msg+0x68>
                        &errcode);
#endif  // ifdef UCLIENT_PROFILE_STREAM_FRAMING
    }
    else
    {
        bytes_written = transport->write(transport, buf, len, &errcode);
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	f8d3 4270 	ldr.w	r4, [r3, #624]	; 0x270
 8014a32:	f107 0313 	add.w	r3, r7, #19
 8014a36:	687a      	ldr	r2, [r7, #4]
 8014a38:	68b9      	ldr	r1, [r7, #8]
 8014a3a:	6978      	ldr	r0, [r7, #20]
 8014a3c:	47a0      	blx	r4
 8014a3e:	61b8      	str	r0, [r7, #24]
    }

    if ((0 < bytes_written) && (bytes_written == len))
 8014a40:	69bb      	ldr	r3, [r7, #24]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d006      	beq.n	8014a54 <send_custom_msg+0x7c>
 8014a46:	69ba      	ldr	r2, [r7, #24]
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	d102      	bne.n	8014a54 <send_custom_msg+0x7c>
    {
        rv = true;
 8014a4e:	2301      	movs	r3, #1
 8014a50:	77fb      	strb	r3, [r7, #31]
 8014a52:	e002      	b.n	8014a5a <send_custom_msg+0x82>
    }
    else
    {
        error_code = errcode;
 8014a54:	7cfa      	ldrb	r2, [r7, #19]
 8014a56:	4b06      	ldr	r3, [pc, #24]	; (8014a70 <send_custom_msg+0x98>)
 8014a58:	701a      	strb	r2, [r3, #0]
    }

    UXR_UNLOCK_TRANSPORT((&transport->comm));
 8014a5a:	697b      	ldr	r3, [r7, #20]
 8014a5c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8014a60:	4618      	mov	r0, r3
 8014a62:	f7ff f8f3 	bl	8013c4c <uxr_unlock>
    return rv;
 8014a66:	7ffb      	ldrb	r3, [r7, #31]
}
 8014a68:	4618      	mov	r0, r3
 8014a6a:	3724      	adds	r7, #36	; 0x24
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd90      	pop	{r4, r7, pc}
 8014a70:	2000e4d0 	.word	0x2000e4d0

08014a74 <recv_custom_msg>:
static bool recv_custom_msg(
        void* instance,
        uint8_t** buf,
        size_t* len,
        int timeout)
{
 8014a74:	b590      	push	{r4, r7, lr}
 8014a76:	b08d      	sub	sp, #52	; 0x34
 8014a78:	af04      	add	r7, sp, #16
 8014a7a:	60f8      	str	r0, [r7, #12]
 8014a7c:	60b9      	str	r1, [r7, #8]
 8014a7e:	607a      	str	r2, [r7, #4]
 8014a80:	603b      	str	r3, [r7, #0]
    bool rv = false;
 8014a82:	2300      	movs	r3, #0
 8014a84:	77fb      	strb	r3, [r7, #31]
    uxrCustomTransport* transport = (uxrCustomTransport*)instance;
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	617b      	str	r3, [r7, #20]
    UXR_LOCK_TRANSPORT((&transport->comm));
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8014a90:	4618      	mov	r0, r3
 8014a92:	f7ff f8cc 	bl	8013c2e <uxr_lock>

    size_t bytes_read = 0;
 8014a96:	2300      	movs	r3, #0
 8014a98:	61bb      	str	r3, [r7, #24]
    uint8_t remote_addr = 0x00;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	74fb      	strb	r3, [r7, #19]
    uint8_t errcode;

    if (transport->framing)
 8014a9e:	697b      	ldr	r3, [r7, #20]
 8014aa0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d01d      	beq.n	8014ae4 <recv_custom_msg+0x70>
    {
#ifdef UCLIENT_PROFILE_STREAM_FRAMING
        do
        {
            bytes_read = uxr_read_framed_msg(&transport->framing_io,
 8014aa8:	697b      	ldr	r3, [r7, #20]
 8014aaa:	f203 2002 	addw	r0, r3, #514	; 0x202
                            (uxr_read_cb) transport->read,
 8014aae:	697b      	ldr	r3, [r7, #20]
 8014ab0:	f8d3 1274 	ldr.w	r1, [r3, #628]	; 0x274
                            transport,
                            transport->buffer,
 8014ab4:	697a      	ldr	r2, [r7, #20]
            bytes_read = uxr_read_framed_msg(&transport->framing_io,
 8014ab6:	f107 0312 	add.w	r3, r7, #18
 8014aba:	9303      	str	r3, [sp, #12]
 8014abc:	463b      	mov	r3, r7
 8014abe:	9302      	str	r3, [sp, #8]
 8014ac0:	f107 0313 	add.w	r3, r7, #19
 8014ac4:	9301      	str	r3, [sp, #4]
 8014ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014aca:	9300      	str	r3, [sp, #0]
 8014acc:	4613      	mov	r3, r2
 8014ace:	697a      	ldr	r2, [r7, #20]
 8014ad0:	f000 fba0 	bl	8015214 <uxr_read_framed_msg>
 8014ad4:	61b8      	str	r0, [r7, #24]
                            &remote_addr,
                            &timeout,
                            &errcode);

        }
        while ((0 == bytes_read) && (0 < timeout));
 8014ad6:	69bb      	ldr	r3, [r7, #24]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d111      	bne.n	8014b00 <recv_custom_msg+0x8c>
 8014adc:	683b      	ldr	r3, [r7, #0]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	dce2      	bgt.n	8014aa8 <recv_custom_msg+0x34>
 8014ae2:	e00d      	b.n	8014b00 <recv_custom_msg+0x8c>
#endif  // ifdef UCLIENT_PROFILE_STREAM_FRAMING
    }
    else
    {
        bytes_read = transport->read(transport,
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	f8d3 4274 	ldr.w	r4, [r3, #628]	; 0x274
                        transport->buffer,
 8014aea:	6979      	ldr	r1, [r7, #20]
        bytes_read = transport->read(transport,
 8014aec:	683a      	ldr	r2, [r7, #0]
 8014aee:	f107 0312 	add.w	r3, r7, #18
 8014af2:	9300      	str	r3, [sp, #0]
 8014af4:	4613      	mov	r3, r2
 8014af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014afa:	6978      	ldr	r0, [r7, #20]
 8014afc:	47a0      	blx	r4
 8014afe:	61b8      	str	r0, [r7, #24]
                        sizeof(transport->buffer),
                        timeout,
                        &errcode);
    }

    if ((0 < bytes_read) && (remote_addr == 0x00))
 8014b00:	69bb      	ldr	r3, [r7, #24]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d00b      	beq.n	8014b1e <recv_custom_msg+0xaa>
 8014b06:	7cfb      	ldrb	r3, [r7, #19]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d108      	bne.n	8014b1e <recv_custom_msg+0xaa>
    {
        *len = bytes_read;
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	69ba      	ldr	r2, [r7, #24]
 8014b10:	601a      	str	r2, [r3, #0]
        *buf = transport->buffer;
 8014b12:	697a      	ldr	r2, [r7, #20]
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	601a      	str	r2, [r3, #0]
        rv = true;
 8014b18:	2301      	movs	r3, #1
 8014b1a:	77fb      	strb	r3, [r7, #31]
 8014b1c:	e002      	b.n	8014b24 <recv_custom_msg+0xb0>
    }
    else
    {
        error_code = errcode;
 8014b1e:	7cba      	ldrb	r2, [r7, #18]
 8014b20:	4b06      	ldr	r3, [pc, #24]	; (8014b3c <recv_custom_msg+0xc8>)
 8014b22:	701a      	strb	r2, [r3, #0]
    }


    UXR_UNLOCK_TRANSPORT((&transport->comm));
 8014b24:	697b      	ldr	r3, [r7, #20]
 8014b26:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f7ff f88e 	bl	8013c4c <uxr_unlock>
    return rv;
 8014b30:	7ffb      	ldrb	r3, [r7, #31]
}
 8014b32:	4618      	mov	r0, r3
 8014b34:	3724      	adds	r7, #36	; 0x24
 8014b36:	46bd      	mov	sp, r7
 8014b38:	bd90      	pop	{r4, r7, pc}
 8014b3a:	bf00      	nop
 8014b3c:	2000e4d0 	.word	0x2000e4d0

08014b40 <get_custom_error>:

static uint8_t get_custom_error(
        void)
{
 8014b40:	b480      	push	{r7}
 8014b42:	af00      	add	r7, sp, #0
    return error_code;
 8014b44:	4b03      	ldr	r3, [pc, #12]	; (8014b54 <get_custom_error+0x14>)
 8014b46:	781b      	ldrb	r3, [r3, #0]
}
 8014b48:	4618      	mov	r0, r3
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b50:	4770      	bx	lr
 8014b52:	bf00      	nop
 8014b54:	2000e4d0 	.word	0x2000e4d0

08014b58 <uxr_set_custom_transport_callbacks>:
        bool framing,
        open_custom_func open,
        close_custom_func close,
        write_custom_func write,
        read_custom_func read)
{
 8014b58:	b480      	push	{r7}
 8014b5a:	b085      	sub	sp, #20
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	60f8      	str	r0, [r7, #12]
 8014b60:	607a      	str	r2, [r7, #4]
 8014b62:	603b      	str	r3, [r7, #0]
 8014b64:	460b      	mov	r3, r1
 8014b66:	72fb      	strb	r3, [r7, #11]
    transport->framing = framing;
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	7afa      	ldrb	r2, [r7, #11]
 8014b6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
    transport->open = open;
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	687a      	ldr	r2, [r7, #4]
 8014b74:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    transport->close = close;
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	683a      	ldr	r2, [r7, #0]
 8014b7c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
    transport->write = write;
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	69ba      	ldr	r2, [r7, #24]
 8014b84:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    transport->read = read;
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	69fa      	ldr	r2, [r7, #28]
 8014b8c:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
}
 8014b90:	bf00      	nop
 8014b92:	3714      	adds	r7, #20
 8014b94:	46bd      	mov	sp, r7
 8014b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9a:	4770      	bx	lr

08014b9c <uxr_init_custom_transport>:

bool uxr_init_custom_transport(
        uxrCustomTransport* transport,
        void* args)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b084      	sub	sp, #16
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
 8014ba4:	6039      	str	r1, [r7, #0]
    bool rv = false;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	73fb      	strb	r3, [r7, #15]
    if (transport->open == NULL  ||
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d00e      	beq.n	8014bd2 <uxr_init_custom_transport+0x36>
            transport->close == NULL ||
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
    if (transport->open == NULL  ||
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d009      	beq.n	8014bd2 <uxr_init_custom_transport+0x36>
            transport->write == NULL ||
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
            transport->close == NULL ||
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d004      	beq.n	8014bd2 <uxr_init_custom_transport+0x36>
            transport->read == NULL)
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
            transport->write == NULL ||
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d101      	bne.n	8014bd6 <uxr_init_custom_transport+0x3a>
    {
        return rv;
 8014bd2:	7bfb      	ldrb	r3, [r7, #15]
 8014bd4:	e035      	b.n	8014c42 <uxr_init_custom_transport+0xa6>
    }

    transport->args = args;
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	683a      	ldr	r2, [r7, #0]
 8014bda:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0

    if (transport->open(transport))
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014be4:	6878      	ldr	r0, [r7, #4]
 8014be6:	4798      	blx	r3
 8014be8:	4603      	mov	r3, r0
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d028      	beq.n	8014c40 <uxr_init_custom_transport+0xa4>
    {
        if (transport->framing)
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d006      	beq.n	8014c06 <uxr_init_custom_transport+0x6a>
        {
#ifdef UCLIENT_PROFILE_STREAM_FRAMING
            /* Init FramingIO. */
            uxr_init_framing_io(&transport->framing_io, 0x00);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f203 2302 	addw	r3, r3, #514	; 0x202
 8014bfe:	2100      	movs	r1, #0
 8014c00:	4618      	mov	r0, r3
 8014c02:	f000 f92e 	bl	8014e62 <uxr_init_framing_io>
            return false;
#endif  // ifdef UCLIENT_PROFILE_STREAM_FRAMING
        }

        /* Setup interface. */
        transport->comm.instance = (void*)transport;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	687a      	ldr	r2, [r7, #4]
 8014c0a:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
        transport->comm.send_msg = send_custom_msg;
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	4a0e      	ldr	r2, [pc, #56]	; (8014c4c <uxr_init_custom_transport+0xb0>)
 8014c12:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
        transport->comm.recv_msg = recv_custom_msg;
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	4a0d      	ldr	r2, [pc, #52]	; (8014c50 <uxr_init_custom_transport+0xb4>)
 8014c1a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
        transport->comm.comm_error = get_custom_error;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	4a0c      	ldr	r2, [pc, #48]	; (8014c54 <uxr_init_custom_transport+0xb8>)
 8014c22:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
        transport->comm.mtu = UXR_CONFIG_CUSTOM_TRANSPORT_MTU;
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014c2c:	f8a3 2288 	strh.w	r2, [r3, #648]	; 0x288
        UXR_INIT_LOCK(&transport->comm.mutex);
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8014c36:	4618      	mov	r0, r3
 8014c38:	f7fe ffe8 	bl	8013c0c <uxr_init_lock>
        rv = true;
 8014c3c:	2301      	movs	r3, #1
 8014c3e:	73fb      	strb	r3, [r7, #15]
    }
    return rv;
 8014c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c42:	4618      	mov	r0, r3
 8014c44:	3710      	adds	r7, #16
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}
 8014c4a:	bf00      	nop
 8014c4c:	080149d9 	.word	0x080149d9
 8014c50:	08014a75 	.word	0x08014a75
 8014c54:	08014b41 	.word	0x08014b41

08014c58 <uxr_close_custom_transport>:

bool uxr_close_custom_transport(
        uxrCustomTransport* transport)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b082      	sub	sp, #8
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
    return transport->close(transport);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8014c66:	6878      	ldr	r0, [r7, #4]
 8014c68:	4798      	blx	r3
 8014c6a:	4603      	mov	r3, r0
}
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	3708      	adds	r7, #8
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd80      	pop	{r7, pc}

08014c74 <uxr_update_crc>:
* Public function definitions.
*******************************************************************************/
void uxr_update_crc(
        uint16_t* crc,
        const uint8_t data)
{
 8014c74:	b480      	push	{r7}
 8014c76:	b083      	sub	sp, #12
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
 8014c7c:	460b      	mov	r3, r1
 8014c7e:	70fb      	strb	r3, [r7, #3]
    *crc = (*crc >> 8) ^ crc16_table[(*crc ^ data) & 0xFF];
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	881b      	ldrh	r3, [r3, #0]
 8014c84:	0a1b      	lsrs	r3, r3, #8
 8014c86:	b29a      	uxth	r2, r3
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	881b      	ldrh	r3, [r3, #0]
 8014c8c:	4619      	mov	r1, r3
 8014c8e:	78fb      	ldrb	r3, [r7, #3]
 8014c90:	404b      	eors	r3, r1
 8014c92:	b2db      	uxtb	r3, r3
 8014c94:	4906      	ldr	r1, [pc, #24]	; (8014cb0 <uxr_update_crc+0x3c>)
 8014c96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014c9a:	4053      	eors	r3, r2
 8014c9c:	b29a      	uxth	r2, r3
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	801a      	strh	r2, [r3, #0]
}
 8014ca2:	bf00      	nop
 8014ca4:	370c      	adds	r7, #12
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cac:	4770      	bx	lr
 8014cae:	bf00      	nop
 8014cb0:	08027008 	.word	0x08027008

08014cb4 <uxr_get_next_octet>:

bool uxr_get_next_octet(
        uxrFramingIO* framing_io,
        uint8_t* octet)
{
 8014cb4:	b480      	push	{r7}
 8014cb6:	b085      	sub	sp, #20
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
 8014cbc:	6039      	str	r1, [r7, #0]
    bool rv = false;
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	73fb      	strb	r3, [r7, #15]
    *octet = 0;
 8014cc2:	683b      	ldr	r3, [r7, #0]
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	701a      	strb	r2, [r3, #0]
    if (framing_io->rb_head != framing_io->rb_tail)
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014cd4:	429a      	cmp	r2, r3
 8014cd6:	d065      	beq.n	8014da4 <uxr_get_next_octet+0xf0>
    {
        if (UXR_FRAMING_ESC_FLAG != framing_io->rb[framing_io->rb_tail])
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014cde:	461a      	mov	r2, r3
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	4413      	add	r3, r2
 8014ce4:	789b      	ldrb	r3, [r3, #2]
 8014ce6:	2b7d      	cmp	r3, #125	; 0x7d
 8014ce8:	d022      	beq.n	8014d30 <uxr_get_next_octet+0x7c>
        {
            *octet = framing_io->rb[framing_io->rb_tail];
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014cf0:	461a      	mov	r2, r3
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	4413      	add	r3, r2
 8014cf6:	789a      	ldrb	r2, [r3, #2]
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	701a      	strb	r2, [r3, #0]
            framing_io->rb_tail = (uint8_t)((size_t)(framing_io->rb_tail + 1) % sizeof(framing_io->rb));
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014d02:	3301      	adds	r3, #1
 8014d04:	461a      	mov	r2, r3
 8014d06:	0853      	lsrs	r3, r2, #1
 8014d08:	492a      	ldr	r1, [pc, #168]	; (8014db4 <uxr_get_next_octet+0x100>)
 8014d0a:	fba1 1303 	umull	r1, r3, r1, r3
 8014d0e:	089b      	lsrs	r3, r3, #2
 8014d10:	212a      	movs	r1, #42	; 0x2a
 8014d12:	fb01 f303 	mul.w	r3, r1, r3
 8014d16:	1ad3      	subs	r3, r2, r3
 8014d18:	b2da      	uxtb	r2, r3
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            rv = (UXR_FRAMING_BEGIN_FLAG != *octet);
 8014d20:	683b      	ldr	r3, [r7, #0]
 8014d22:	781b      	ldrb	r3, [r3, #0]
 8014d24:	2b7e      	cmp	r3, #126	; 0x7e
 8014d26:	bf14      	ite	ne
 8014d28:	2301      	movne	r3, #1
 8014d2a:	2300      	moveq	r3, #0
 8014d2c:	73fb      	strb	r3, [r7, #15]
 8014d2e:	e039      	b.n	8014da4 <uxr_get_next_octet+0xf0>
        }
        else
        {
            uint8_t temp_tail = (uint8_t)((size_t)(framing_io->rb_tail + 1) % sizeof(framing_io->rb));
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014d36:	3301      	adds	r3, #1
 8014d38:	461a      	mov	r2, r3
 8014d3a:	0853      	lsrs	r3, r2, #1
 8014d3c:	491d      	ldr	r1, [pc, #116]	; (8014db4 <uxr_get_next_octet+0x100>)
 8014d3e:	fba1 1303 	umull	r1, r3, r1, r3
 8014d42:	089b      	lsrs	r3, r3, #2
 8014d44:	212a      	movs	r1, #42	; 0x2a
 8014d46:	fb01 f303 	mul.w	r3, r1, r3
 8014d4a:	1ad3      	subs	r3, r2, r3
 8014d4c:	73bb      	strb	r3, [r7, #14]
            if (temp_tail != framing_io->rb_head)
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014d54:	7bba      	ldrb	r2, [r7, #14]
 8014d56:	429a      	cmp	r2, r3
 8014d58:	d024      	beq.n	8014da4 <uxr_get_next_octet+0xf0>
            {
                *octet = framing_io->rb[temp_tail];
 8014d5a:	7bbb      	ldrb	r3, [r7, #14]
 8014d5c:	687a      	ldr	r2, [r7, #4]
 8014d5e:	4413      	add	r3, r2
 8014d60:	789a      	ldrb	r2, [r3, #2]
 8014d62:	683b      	ldr	r3, [r7, #0]
 8014d64:	701a      	strb	r2, [r3, #0]
                framing_io->rb_tail = (uint8_t)((size_t)(framing_io->rb_tail + 2) % sizeof(framing_io->rb));
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014d6c:	3302      	adds	r3, #2
 8014d6e:	461a      	mov	r2, r3
 8014d70:	0853      	lsrs	r3, r2, #1
 8014d72:	4910      	ldr	r1, [pc, #64]	; (8014db4 <uxr_get_next_octet+0x100>)
 8014d74:	fba1 1303 	umull	r1, r3, r1, r3
 8014d78:	089b      	lsrs	r3, r3, #2
 8014d7a:	212a      	movs	r1, #42	; 0x2a
 8014d7c:	fb01 f303 	mul.w	r3, r1, r3
 8014d80:	1ad3      	subs	r3, r2, r3
 8014d82:	b2da      	uxtb	r2, r3
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                if (UXR_FRAMING_BEGIN_FLAG != *octet)
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	781b      	ldrb	r3, [r3, #0]
 8014d8e:	2b7e      	cmp	r3, #126	; 0x7e
 8014d90:	d008      	beq.n	8014da4 <uxr_get_next_octet+0xf0>
                {
                    *octet ^= UXR_FRAMING_XOR_FLAG;
 8014d92:	683b      	ldr	r3, [r7, #0]
 8014d94:	781b      	ldrb	r3, [r3, #0]
 8014d96:	f083 0320 	eor.w	r3, r3, #32
 8014d9a:	b2da      	uxtb	r2, r3
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	701a      	strb	r2, [r3, #0]
                    rv = true;
 8014da0:	2301      	movs	r3, #1
 8014da2:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }
    return rv;
 8014da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014da6:	4618      	mov	r0, r3
 8014da8:	3714      	adds	r7, #20
 8014daa:	46bd      	mov	sp, r7
 8014dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db0:	4770      	bx	lr
 8014db2:	bf00      	nop
 8014db4:	30c30c31 	.word	0x30c30c31

08014db8 <uxr_add_next_octet>:

bool uxr_add_next_octet(
        uxrFramingIO* framing_io,
        uint8_t octet)
{
 8014db8:	b480      	push	{r7}
 8014dba:	b085      	sub	sp, #20
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
 8014dc0:	460b      	mov	r3, r1
 8014dc2:	70fb      	strb	r3, [r7, #3]
    bool rv = false;
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	73fb      	strb	r3, [r7, #15]

    if (UXR_FRAMING_BEGIN_FLAG == octet || UXR_FRAMING_ESC_FLAG == octet)
 8014dc8:	78fb      	ldrb	r3, [r7, #3]
 8014dca:	2b7e      	cmp	r3, #126	; 0x7e
 8014dcc:	d002      	beq.n	8014dd4 <uxr_add_next_octet+0x1c>
 8014dce:	78fb      	ldrb	r3, [r7, #3]
 8014dd0:	2b7d      	cmp	r3, #125	; 0x7d
 8014dd2:	d127      	bne.n	8014e24 <uxr_add_next_octet+0x6c>
    {
        if ((uint8_t)(framing_io->wb_pos + 1) < sizeof(framing_io->wb))
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014dda:	3301      	adds	r3, #1
 8014ddc:	b2db      	uxtb	r3, r3
 8014dde:	2b29      	cmp	r3, #41	; 0x29
 8014de0:	d838      	bhi.n	8014e54 <uxr_add_next_octet+0x9c>
        {
            framing_io->wb[framing_io->wb_pos] = UXR_FRAMING_ESC_FLAG;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014de8:	461a      	mov	r2, r3
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	4413      	add	r3, r2
 8014dee:	227d      	movs	r2, #125	; 0x7d
 8014df0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            framing_io->wb[framing_io->wb_pos + 1] = octet ^ UXR_FRAMING_XOR_FLAG;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014dfa:	3301      	adds	r3, #1
 8014dfc:	78fa      	ldrb	r2, [r7, #3]
 8014dfe:	f082 0220 	eor.w	r2, r2, #32
 8014e02:	b2d1      	uxtb	r1, r2
 8014e04:	687a      	ldr	r2, [r7, #4]
 8014e06:	4413      	add	r3, r2
 8014e08:	460a      	mov	r2, r1
 8014e0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            framing_io->wb_pos = (uint8_t)(framing_io->wb_pos + 2);
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014e14:	3302      	adds	r3, #2
 8014e16:	b2da      	uxtb	r2, r3
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
            rv = true;
 8014e1e:	2301      	movs	r3, #1
 8014e20:	73fb      	strb	r3, [r7, #15]
        if ((uint8_t)(framing_io->wb_pos + 1) < sizeof(framing_io->wb))
 8014e22:	e017      	b.n	8014e54 <uxr_add_next_octet+0x9c>
        }
    }
    else
    {
        if (framing_io->wb_pos < sizeof(framing_io->wb))
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014e2a:	2b29      	cmp	r3, #41	; 0x29
 8014e2c:	d812      	bhi.n	8014e54 <uxr_add_next_octet+0x9c>
        {
            framing_io->wb[framing_io->wb_pos] = octet;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014e34:	461a      	mov	r2, r3
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	4413      	add	r3, r2
 8014e3a:	78fa      	ldrb	r2, [r7, #3]
 8014e3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            framing_io->wb_pos = (uint8_t)(framing_io->wb_pos + 1);
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014e46:	3301      	adds	r3, #1
 8014e48:	b2da      	uxtb	r2, r3
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
            rv = true;
 8014e50:	2301      	movs	r3, #1
 8014e52:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rv;
 8014e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	3714      	adds	r7, #20
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e60:	4770      	bx	lr

08014e62 <uxr_init_framing_io>:

void uxr_init_framing_io(
        uxrFramingIO* framing_io,
        uint8_t local_addr)
{
 8014e62:	b480      	push	{r7}
 8014e64:	b083      	sub	sp, #12
 8014e66:	af00      	add	r7, sp, #0
 8014e68:	6078      	str	r0, [r7, #4]
 8014e6a:	460b      	mov	r3, r1
 8014e6c:	70fb      	strb	r3, [r7, #3]
    framing_io->local_addr = local_addr;
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	78fa      	ldrb	r2, [r7, #3]
 8014e72:	705a      	strb	r2, [r3, #1]
    framing_io->state = UXR_FRAMING_UNINITIALIZED;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	2200      	movs	r2, #0
 8014e78:	701a      	strb	r2, [r3, #0]
    framing_io->rb_head = 0;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    framing_io->rb_tail = 0;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2200      	movs	r2, #0
 8014e86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8014e8a:	bf00      	nop
 8014e8c:	370c      	adds	r7, #12
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e94:	4770      	bx	lr

08014e96 <uxr_framing_write_transport>:
bool uxr_framing_write_transport(
        uxrFramingIO* framing_io,
        uxr_write_cb write_cb,
        void* cb_arg,
        uint8_t* errcode)
{
 8014e96:	b590      	push	{r4, r7, lr}
 8014e98:	b087      	sub	sp, #28
 8014e9a:	af00      	add	r7, sp, #0
 8014e9c:	60f8      	str	r0, [r7, #12]
 8014e9e:	60b9      	str	r1, [r7, #8]
 8014ea0:	607a      	str	r2, [r7, #4]
 8014ea2:	603b      	str	r3, [r7, #0]
    size_t bytes_written = 0;
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	617b      	str	r3, [r7, #20]
    size_t last_written = 0;
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	613b      	str	r3, [r7, #16]

    do
    {
        last_written = write_cb(cb_arg, &framing_io->wb[bytes_written], framing_io->wb_pos - bytes_written, errcode);
 8014eac:	697b      	ldr	r3, [r7, #20]
 8014eae:	3338      	adds	r3, #56	; 0x38
 8014eb0:	68fa      	ldr	r2, [r7, #12]
 8014eb2:	18d1      	adds	r1, r2, r3
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014eba:	461a      	mov	r2, r3
 8014ebc:	697b      	ldr	r3, [r7, #20]
 8014ebe:	1ad2      	subs	r2, r2, r3
 8014ec0:	68bc      	ldr	r4, [r7, #8]
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	47a0      	blx	r4
 8014ec8:	6138      	str	r0, [r7, #16]
        bytes_written += last_written;
 8014eca:	697a      	ldr	r2, [r7, #20]
 8014ecc:	693b      	ldr	r3, [r7, #16]
 8014ece:	4413      	add	r3, r2
 8014ed0:	617b      	str	r3, [r7, #20]
    } while (bytes_written < framing_io->wb_pos && 0 < last_written);
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014ed8:	461a      	mov	r2, r3
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	4293      	cmp	r3, r2
 8014ede:	d202      	bcs.n	8014ee6 <uxr_framing_write_transport+0x50>
 8014ee0:	693b      	ldr	r3, [r7, #16]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d1e2      	bne.n	8014eac <uxr_framing_write_transport+0x16>

    if (bytes_written == framing_io->wb_pos)
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014eec:	461a      	mov	r2, r3
 8014eee:	697b      	ldr	r3, [r7, #20]
 8014ef0:	4293      	cmp	r3, r2
 8014ef2:	d105      	bne.n	8014f00 <uxr_framing_write_transport+0x6a>
    {
        framing_io->wb_pos = 0;
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	2200      	movs	r2, #0
 8014ef8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
        return true;
 8014efc:	2301      	movs	r3, #1
 8014efe:	e000      	b.n	8014f02 <uxr_framing_write_transport+0x6c>
    }
    return false;
 8014f00:	2300      	movs	r3, #0
}
 8014f02:	4618      	mov	r0, r3
 8014f04:	371c      	adds	r7, #28
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bd90      	pop	{r4, r7, pc}

08014f0a <uxr_write_framed_msg>:
        void* cb_arg,
        const uint8_t* buf,
        size_t len,
        uint8_t remote_addr,
        uint8_t* errcode)
{
 8014f0a:	b580      	push	{r7, lr}
 8014f0c:	b088      	sub	sp, #32
 8014f0e:	af00      	add	r7, sp, #0
 8014f10:	60f8      	str	r0, [r7, #12]
 8014f12:	60b9      	str	r1, [r7, #8]
 8014f14:	607a      	str	r2, [r7, #4]
 8014f16:	603b      	str	r3, [r7, #0]
    /* Buffer being flag. */
    framing_io->wb[0] = UXR_FRAMING_BEGIN_FLAG;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	227e      	movs	r2, #126	; 0x7e
 8014f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    framing_io->wb_pos = 1;
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	2201      	movs	r2, #1
 8014f24:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

    /* Buffer header. */
    uxr_add_next_octet(framing_io, framing_io->local_addr);
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	785b      	ldrb	r3, [r3, #1]
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	68f8      	ldr	r0, [r7, #12]
 8014f30:	f7ff ff42 	bl	8014db8 <uxr_add_next_octet>
    uxr_add_next_octet(framing_io, remote_addr);
 8014f34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014f38:	4619      	mov	r1, r3
 8014f3a:	68f8      	ldr	r0, [r7, #12]
 8014f3c:	f7ff ff3c 	bl	8014db8 <uxr_add_next_octet>
    uxr_add_next_octet(framing_io, (uint8_t)(len & 0xFF));
 8014f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f42:	b2db      	uxtb	r3, r3
 8014f44:	4619      	mov	r1, r3
 8014f46:	68f8      	ldr	r0, [r7, #12]
 8014f48:	f7ff ff36 	bl	8014db8 <uxr_add_next_octet>
    uxr_add_next_octet(framing_io, (uint8_t)(len >> 8));
 8014f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f4e:	0a1b      	lsrs	r3, r3, #8
 8014f50:	b2db      	uxtb	r3, r3
 8014f52:	4619      	mov	r1, r3
 8014f54:	68f8      	ldr	r0, [r7, #12]
 8014f56:	f7ff ff2f 	bl	8014db8 <uxr_add_next_octet>

    /* Write payload. */
    uint8_t octet = 0;
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	76bb      	strb	r3, [r7, #26]
    size_t written_len = 0;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	61fb      	str	r3, [r7, #28]
    uint16_t crc = 0;
 8014f62:	2300      	movs	r3, #0
 8014f64:	833b      	strh	r3, [r7, #24]
    bool cond = true;
 8014f66:	2301      	movs	r3, #1
 8014f68:	76fb      	strb	r3, [r7, #27]
    while ((written_len < len) && cond)
 8014f6a:	e01f      	b.n	8014fac <uxr_write_framed_msg+0xa2>
    {
        octet = *(buf + written_len);
 8014f6c:	683a      	ldr	r2, [r7, #0]
 8014f6e:	69fb      	ldr	r3, [r7, #28]
 8014f70:	4413      	add	r3, r2
 8014f72:	781b      	ldrb	r3, [r3, #0]
 8014f74:	76bb      	strb	r3, [r7, #26]
        if (uxr_add_next_octet(framing_io, octet))
 8014f76:	7ebb      	ldrb	r3, [r7, #26]
 8014f78:	4619      	mov	r1, r3
 8014f7a:	68f8      	ldr	r0, [r7, #12]
 8014f7c:	f7ff ff1c 	bl	8014db8 <uxr_add_next_octet>
 8014f80:	4603      	mov	r3, r0
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d00a      	beq.n	8014f9c <uxr_write_framed_msg+0x92>
        {
            uxr_update_crc(&crc, octet);
 8014f86:	7eba      	ldrb	r2, [r7, #26]
 8014f88:	f107 0318 	add.w	r3, r7, #24
 8014f8c:	4611      	mov	r1, r2
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f7ff fe70 	bl	8014c74 <uxr_update_crc>
            ++written_len;
 8014f94:	69fb      	ldr	r3, [r7, #28]
 8014f96:	3301      	adds	r3, #1
 8014f98:	61fb      	str	r3, [r7, #28]
 8014f9a:	e007      	b.n	8014fac <uxr_write_framed_msg+0xa2>
        }
        else
        {
            cond = uxr_framing_write_transport(framing_io, write_cb, cb_arg, errcode);
 8014f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f9e:	687a      	ldr	r2, [r7, #4]
 8014fa0:	68b9      	ldr	r1, [r7, #8]
 8014fa2:	68f8      	ldr	r0, [r7, #12]
 8014fa4:	f7ff ff77 	bl	8014e96 <uxr_framing_write_transport>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	76fb      	strb	r3, [r7, #27]
    while ((written_len < len) && cond)
 8014fac:	69fa      	ldr	r2, [r7, #28]
 8014fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d202      	bcs.n	8014fba <uxr_write_framed_msg+0xb0>
 8014fb4:	7efb      	ldrb	r3, [r7, #27]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d1d8      	bne.n	8014f6c <uxr_write_framed_msg+0x62>
        }
    }

    /* Write CRC. */
    uint8_t tmp_crc[2];
    tmp_crc[0] = (uint8_t)(crc & 0xFF);
 8014fba:	8b3b      	ldrh	r3, [r7, #24]
 8014fbc:	b2db      	uxtb	r3, r3
 8014fbe:	753b      	strb	r3, [r7, #20]
    tmp_crc[1] = (uint8_t)(crc >> 8);
 8014fc0:	8b3b      	ldrh	r3, [r7, #24]
 8014fc2:	0a1b      	lsrs	r3, r3, #8
 8014fc4:	b29b      	uxth	r3, r3
 8014fc6:	b2db      	uxtb	r3, r3
 8014fc8:	757b      	strb	r3, [r7, #21]
    written_len = 0;
 8014fca:	2300      	movs	r3, #0
 8014fcc:	61fb      	str	r3, [r7, #28]
    while (written_len < sizeof(tmp_crc) && cond)
 8014fce:	e020      	b.n	8015012 <uxr_write_framed_msg+0x108>
    {
        octet = *(tmp_crc + written_len);
 8014fd0:	f107 0214 	add.w	r2, r7, #20
 8014fd4:	69fb      	ldr	r3, [r7, #28]
 8014fd6:	4413      	add	r3, r2
 8014fd8:	781b      	ldrb	r3, [r3, #0]
 8014fda:	76bb      	strb	r3, [r7, #26]
        if (uxr_add_next_octet(framing_io, octet))
 8014fdc:	7ebb      	ldrb	r3, [r7, #26]
 8014fde:	4619      	mov	r1, r3
 8014fe0:	68f8      	ldr	r0, [r7, #12]
 8014fe2:	f7ff fee9 	bl	8014db8 <uxr_add_next_octet>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d00a      	beq.n	8015002 <uxr_write_framed_msg+0xf8>
        {
            uxr_update_crc(&crc, octet);
 8014fec:	7eba      	ldrb	r2, [r7, #26]
 8014fee:	f107 0318 	add.w	r3, r7, #24
 8014ff2:	4611      	mov	r1, r2
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f7ff fe3d 	bl	8014c74 <uxr_update_crc>
            ++written_len;
 8014ffa:	69fb      	ldr	r3, [r7, #28]
 8014ffc:	3301      	adds	r3, #1
 8014ffe:	61fb      	str	r3, [r7, #28]
 8015000:	e007      	b.n	8015012 <uxr_write_framed_msg+0x108>
        }
        else
        {
            cond = uxr_framing_write_transport(framing_io, write_cb, cb_arg, errcode);
 8015002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015004:	687a      	ldr	r2, [r7, #4]
 8015006:	68b9      	ldr	r1, [r7, #8]
 8015008:	68f8      	ldr	r0, [r7, #12]
 801500a:	f7ff ff44 	bl	8014e96 <uxr_framing_write_transport>
 801500e:	4603      	mov	r3, r0
 8015010:	76fb      	strb	r3, [r7, #27]
    while (written_len < sizeof(tmp_crc) && cond)
 8015012:	69fb      	ldr	r3, [r7, #28]
 8015014:	2b01      	cmp	r3, #1
 8015016:	d802      	bhi.n	801501e <uxr_write_framed_msg+0x114>
 8015018:	7efb      	ldrb	r3, [r7, #27]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d1d8      	bne.n	8014fd0 <uxr_write_framed_msg+0xc6>
        }
    }

    /* Flush write buffer. */
    if (cond && (0 < framing_io->wb_pos))
 801501e:	7efb      	ldrb	r3, [r7, #27]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d00c      	beq.n	801503e <uxr_write_framed_msg+0x134>
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801502a:	2b00      	cmp	r3, #0
 801502c:	d007      	beq.n	801503e <uxr_write_framed_msg+0x134>
    {
        cond = uxr_framing_write_transport(framing_io, write_cb, cb_arg, errcode);
 801502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015030:	687a      	ldr	r2, [r7, #4]
 8015032:	68b9      	ldr	r1, [r7, #8]
 8015034:	68f8      	ldr	r0, [r7, #12]
 8015036:	f7ff ff2e 	bl	8014e96 <uxr_framing_write_transport>
 801503a:	4603      	mov	r3, r0
 801503c:	76fb      	strb	r3, [r7, #27]
    }

    return cond ? (uint16_t)(len) : 0;
 801503e:	7efb      	ldrb	r3, [r7, #27]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d002      	beq.n	801504a <uxr_write_framed_msg+0x140>
 8015044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015046:	b29b      	uxth	r3, r3
 8015048:	e000      	b.n	801504c <uxr_write_framed_msg+0x142>
 801504a:	2300      	movs	r3, #0
}
 801504c:	4618      	mov	r0, r3
 801504e:	3720      	adds	r7, #32
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}

08015054 <uxr_framing_read_transport>:
        uxr_read_cb read_cb,
        void* cb_arg,
        int* timeout,
        uint8_t* errcode,
        size_t max_size)
{
 8015054:	b590      	push	{r4, r7, lr}
 8015056:	b08d      	sub	sp, #52	; 0x34
 8015058:	af02      	add	r7, sp, #8
 801505a:	60f8      	str	r0, [r7, #12]
 801505c:	60b9      	str	r1, [r7, #8]
 801505e:	607a      	str	r2, [r7, #4]
 8015060:	603b      	str	r3, [r7, #0]
    int64_t time_init = uxr_millis();
 8015062:	f000 fad3 	bl	801560c <uxr_millis>
 8015066:	e9c7 0108 	strd	r0, r1, [r7, #32]

    /* Compute read-buffer available size. */
    uint8_t av_len[2] = {
 801506a:	2300      	movs	r3, #0
 801506c:	83bb      	strh	r3, [r7, #28]
        0, 0
    };
    if (framing_io->rb_head == framing_io->rb_tail)
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801507a:	429a      	cmp	r2, r3
 801507c:	d10a      	bne.n	8015094 <uxr_framing_read_transport+0x40>
    {
        framing_io->rb_head = 0;
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	2200      	movs	r2, #0
 8015082:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        framing_io->rb_tail = 0;
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	2200      	movs	r2, #0
 801508a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        av_len[0] = sizeof(framing_io->rb) - 1;
 801508e:	2329      	movs	r3, #41	; 0x29
 8015090:	773b      	strb	r3, [r7, #28]
 8015092:	e02d      	b.n	80150f0 <uxr_framing_read_transport+0x9c>
    }
    else if (framing_io->rb_head > framing_io->rb_tail)
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80150a0:	429a      	cmp	r2, r3
 80150a2:	d91a      	bls.n	80150da <uxr_framing_read_transport+0x86>
    {
        if (0 < framing_io->rb_tail)
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d00d      	beq.n	80150ca <uxr_framing_read_transport+0x76>
        {
            av_len[0] = (uint8_t)(sizeof(framing_io->rb) - framing_io->rb_head);
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80150b4:	f1c3 032a 	rsb	r3, r3, #42	; 0x2a
 80150b8:	b2db      	uxtb	r3, r3
 80150ba:	773b      	strb	r3, [r7, #28]
            av_len[1] = (uint8_t)(framing_io->rb_tail - 1);
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80150c2:	3b01      	subs	r3, #1
 80150c4:	b2db      	uxtb	r3, r3
 80150c6:	777b      	strb	r3, [r7, #29]
 80150c8:	e012      	b.n	80150f0 <uxr_framing_read_transport+0x9c>
        }
        else
        {
            av_len[0] = (uint8_t)(sizeof(framing_io->rb) - framing_io->rb_head - 1);
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80150d0:	f1c3 0329 	rsb	r3, r3, #41	; 0x29
 80150d4:	b2db      	uxtb	r3, r3
 80150d6:	773b      	strb	r3, [r7, #28]
 80150d8:	e00a      	b.n	80150f0 <uxr_framing_read_transport+0x9c>
        }
    }
    else
    {
        av_len[0] = (uint8_t)(framing_io->rb_tail - framing_io->rb_head - 1);
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80150e6:	1ad3      	subs	r3, r2, r3
 80150e8:	b2db      	uxtb	r3, r3
 80150ea:	3b01      	subs	r3, #1
 80150ec:	b2db      	uxtb	r3, r3
 80150ee:	773b      	strb	r3, [r7, #28]
    }

    /* Read */
    size_t bytes_read[2] = {
 80150f0:	f107 0314 	add.w	r3, r7, #20
 80150f4:	2200      	movs	r2, #0
 80150f6:	601a      	str	r2, [r3, #0]
 80150f8:	605a      	str	r2, [r3, #4]
        0
    };

    // Limit the reading size
    if (max_size < av_len[0])
 80150fa:	7f3b      	ldrb	r3, [r7, #28]
 80150fc:	461a      	mov	r2, r3
 80150fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015100:	4293      	cmp	r3, r2
 8015102:	d205      	bcs.n	8015110 <uxr_framing_read_transport+0xbc>
    {
        av_len[0] = (uint8_t)max_size;
 8015104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015106:	b2db      	uxtb	r3, r3
 8015108:	773b      	strb	r3, [r7, #28]
        av_len[1] = 0;
 801510a:	2300      	movs	r3, #0
 801510c:	777b      	strb	r3, [r7, #29]
 801510e:	e00d      	b.n	801512c <uxr_framing_read_transport+0xd8>
    }
    else if (max_size < av_len[0] + av_len[1])
 8015110:	7f3b      	ldrb	r3, [r7, #28]
 8015112:	461a      	mov	r2, r3
 8015114:	7f7b      	ldrb	r3, [r7, #29]
 8015116:	4413      	add	r3, r2
 8015118:	461a      	mov	r2, r3
 801511a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801511c:	4293      	cmp	r3, r2
 801511e:	d205      	bcs.n	801512c <uxr_framing_read_transport+0xd8>
    {
        av_len[1] = (uint8_t)(max_size - av_len[0]);
 8015120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015122:	b2da      	uxtb	r2, r3
 8015124:	7f3b      	ldrb	r3, [r7, #28]
 8015126:	1ad3      	subs	r3, r2, r3
 8015128:	b2db      	uxtb	r3, r3
 801512a:	777b      	strb	r3, [r7, #29]
    }

    if (0 < av_len[0])
 801512c:	7f3b      	ldrb	r3, [r7, #28]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d054      	beq.n	80151dc <uxr_framing_read_transport+0x188>
    {
        bytes_read[0] = read_cb(cb_arg, &framing_io->rb[framing_io->rb_head], av_len[0], *timeout, errcode);
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015138:	461a      	mov	r2, r3
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	4413      	add	r3, r2
 801513e:	1c99      	adds	r1, r3, #2
 8015140:	7f3b      	ldrb	r3, [r7, #28]
 8015142:	4618      	mov	r0, r3
 8015144:	683b      	ldr	r3, [r7, #0]
 8015146:	681a      	ldr	r2, [r3, #0]
 8015148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801514a:	9300      	str	r3, [sp, #0]
 801514c:	68bc      	ldr	r4, [r7, #8]
 801514e:	4613      	mov	r3, r2
 8015150:	4602      	mov	r2, r0
 8015152:	6878      	ldr	r0, [r7, #4]
 8015154:	47a0      	blx	r4
 8015156:	4603      	mov	r3, r0
 8015158:	617b      	str	r3, [r7, #20]
        framing_io->rb_head = (uint8_t)((size_t)(framing_io->rb_head + bytes_read[0]) % sizeof(framing_io->rb));
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015160:	461a      	mov	r2, r3
 8015162:	697b      	ldr	r3, [r7, #20]
 8015164:	441a      	add	r2, r3
 8015166:	0853      	lsrs	r3, r2, #1
 8015168:	4929      	ldr	r1, [pc, #164]	; (8015210 <uxr_framing_read_transport+0x1bc>)
 801516a:	fba1 1303 	umull	r1, r3, r1, r3
 801516e:	089b      	lsrs	r3, r3, #2
 8015170:	212a      	movs	r1, #42	; 0x2a
 8015172:	fb01 f303 	mul.w	r3, r1, r3
 8015176:	1ad3      	subs	r3, r2, r3
 8015178:	b2da      	uxtb	r2, r3
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        if (0 < bytes_read[0])
 8015180:	697b      	ldr	r3, [r7, #20]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d02a      	beq.n	80151dc <uxr_framing_read_transport+0x188>
        {
            if ((bytes_read[0] == av_len[0]) && (0 < av_len[1]))
 8015186:	697b      	ldr	r3, [r7, #20]
 8015188:	7f3a      	ldrb	r2, [r7, #28]
 801518a:	4293      	cmp	r3, r2
 801518c:	d126      	bne.n	80151dc <uxr_framing_read_transport+0x188>
 801518e:	7f7b      	ldrb	r3, [r7, #29]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d023      	beq.n	80151dc <uxr_framing_read_transport+0x188>
            {
                bytes_read[1] = read_cb(cb_arg, &framing_io->rb[framing_io->rb_head], av_len[1], 0, errcode);
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801519a:	461a      	mov	r2, r3
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	4413      	add	r3, r2
 80151a0:	1c99      	adds	r1, r3, #2
 80151a2:	7f7b      	ldrb	r3, [r7, #29]
 80151a4:	461a      	mov	r2, r3
 80151a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151a8:	9300      	str	r3, [sp, #0]
 80151aa:	68bc      	ldr	r4, [r7, #8]
 80151ac:	2300      	movs	r3, #0
 80151ae:	6878      	ldr	r0, [r7, #4]
 80151b0:	47a0      	blx	r4
 80151b2:	4603      	mov	r3, r0
 80151b4:	61bb      	str	r3, [r7, #24]
                framing_io->rb_head = (uint8_t)((size_t)(framing_io->rb_head + bytes_read[1]) % sizeof(framing_io->rb));
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80151bc:	461a      	mov	r2, r3
 80151be:	69bb      	ldr	r3, [r7, #24]
 80151c0:	441a      	add	r2, r3
 80151c2:	0853      	lsrs	r3, r2, #1
 80151c4:	4912      	ldr	r1, [pc, #72]	; (8015210 <uxr_framing_read_transport+0x1bc>)
 80151c6:	fba1 1303 	umull	r1, r3, r1, r3
 80151ca:	089b      	lsrs	r3, r3, #2
 80151cc:	212a      	movs	r1, #42	; 0x2a
 80151ce:	fb01 f303 	mul.w	r3, r1, r3
 80151d2:	1ad3      	subs	r3, r2, r3
 80151d4:	b2da      	uxtb	r2, r3
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            }
        }
    }

    *timeout -= (int)(uxr_millis() - time_init);
 80151dc:	f000 fa16 	bl	801560c <uxr_millis>
 80151e0:	4602      	mov	r2, r0
 80151e2:	460b      	mov	r3, r1
 80151e4:	6a3b      	ldr	r3, [r7, #32]
 80151e6:	1ad3      	subs	r3, r2, r3
 80151e8:	461a      	mov	r2, r3
 80151ea:	683b      	ldr	r3, [r7, #0]
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	1a9a      	subs	r2, r3, r2
 80151f0:	683b      	ldr	r3, [r7, #0]
 80151f2:	601a      	str	r2, [r3, #0]
    *timeout = (0 > *timeout) ? 0 : *timeout;
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80151fc:	683b      	ldr	r3, [r7, #0]
 80151fe:	601a      	str	r2, [r3, #0]
    return bytes_read[0] + bytes_read[1];
 8015200:	697a      	ldr	r2, [r7, #20]
 8015202:	69bb      	ldr	r3, [r7, #24]
 8015204:	4413      	add	r3, r2
}
 8015206:	4618      	mov	r0, r3
 8015208:	372c      	adds	r7, #44	; 0x2c
 801520a:	46bd      	mov	sp, r7
 801520c:	bd90      	pop	{r4, r7, pc}
 801520e:	bf00      	nop
 8015210:	30c30c31 	.word	0x30c30c31

08015214 <uxr_read_framed_msg>:
        uint8_t* buf,
        size_t len,
        uint8_t* remote_addr,
        int* timeout,
        uint8_t* errcode)
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b088      	sub	sp, #32
 8015218:	af02      	add	r7, sp, #8
 801521a:	60f8      	str	r0, [r7, #12]
 801521c:	60b9      	str	r1, [r7, #8]
 801521e:	607a      	str	r2, [r7, #4]
 8015220:	603b      	str	r3, [r7, #0]
    size_t rv = 0;
 8015222:	2300      	movs	r3, #0
 8015224:	617b      	str	r3, [r7, #20]

    if (framing_io->rb_head == framing_io->rb_tail)
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015232:	429a      	cmp	r2, r3
 8015234:	d109      	bne.n	801524a <uxr_read_framed_msg+0x36>
    {
        uxr_framing_read_transport(framing_io, read_cb, cb_arg, timeout, errcode, 5);
 8015236:	2305      	movs	r3, #5
 8015238:	9301      	str	r3, [sp, #4]
 801523a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801523c:	9300      	str	r3, [sp, #0]
 801523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015240:	687a      	ldr	r2, [r7, #4]
 8015242:	68b9      	ldr	r1, [r7, #8]
 8015244:	68f8      	ldr	r0, [r7, #12]
 8015246:	f7ff ff05 	bl	8015054 <uxr_framing_read_transport>
    }

    if (framing_io->rb_tail != framing_io->rb_head)
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015256:	429a      	cmp	r2, r3
 8015258:	f000 81d3 	beq.w	8015602 <uxr_read_framed_msg+0x3ee>
    {
        /* State Machine. */
        bool exit_cond = false;
 801525c:	2300      	movs	r3, #0
 801525e:	74fb      	strb	r3, [r7, #19]
        while (!exit_cond)
 8015260:	e1c8      	b.n	80155f4 <uxr_read_framed_msg+0x3e0>
        {
            uint8_t octet = 0;
 8015262:	2300      	movs	r3, #0
 8015264:	74bb      	strb	r3, [r7, #18]
            switch (framing_io->state)
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	2b07      	cmp	r3, #7
 801526c:	f200 81b3 	bhi.w	80155d6 <uxr_read_framed_msg+0x3c2>
 8015270:	a201      	add	r2, pc, #4	; (adr r2, 8015278 <uxr_read_framed_msg+0x64>)
 8015272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015276:	bf00      	nop
 8015278:	08015299 	.word	0x08015299
 801527c:	080152fd 	.word	0x080152fd
 8015280:	08015345 	.word	0x08015345
 8015284:	0801539d 	.word	0x0801539d
 8015288:	080153ef 	.word	0x080153ef
 801528c:	08015499 	.word	0x08015499
 8015290:	08015505 	.word	0x08015505
 8015294:	0801555b 	.word	0x0801555b
            {
                case UXR_FRAMING_UNINITIALIZED:
                {
                    octet = 0;
 8015298:	2300      	movs	r3, #0
 801529a:	74bb      	strb	r3, [r7, #18]
                    while ((UXR_FRAMING_BEGIN_FLAG != octet) && (framing_io->rb_head != framing_io->rb_tail))
 801529c:	e019      	b.n	80152d2 <uxr_read_framed_msg+0xbe>
                    {
                        octet = framing_io->rb[framing_io->rb_tail];
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152a4:	461a      	mov	r2, r3
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	4413      	add	r3, r2
 80152aa:	789b      	ldrb	r3, [r3, #2]
 80152ac:	74bb      	strb	r3, [r7, #18]
                        framing_io->rb_tail = (uint8_t)((size_t)(framing_io->rb_tail + 1) % sizeof(framing_io->rb));
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152b4:	3301      	adds	r3, #1
 80152b6:	461a      	mov	r2, r3
 80152b8:	0853      	lsrs	r3, r2, #1
 80152ba:	499b      	ldr	r1, [pc, #620]	; (8015528 <uxr_read_framed_msg+0x314>)
 80152bc:	fba1 1303 	umull	r1, r3, r1, r3
 80152c0:	089b      	lsrs	r3, r3, #2
 80152c2:	212a      	movs	r1, #42	; 0x2a
 80152c4:	fb01 f303 	mul.w	r3, r1, r3
 80152c8:	1ad3      	subs	r3, r2, r3
 80152ca:	b2da      	uxtb	r2, r3
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                    while ((UXR_FRAMING_BEGIN_FLAG != octet) && (framing_io->rb_head != framing_io->rb_tail))
 80152d2:	7cbb      	ldrb	r3, [r7, #18]
 80152d4:	2b7e      	cmp	r3, #126	; 0x7e
 80152d6:	d007      	beq.n	80152e8 <uxr_read_framed_msg+0xd4>
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d1da      	bne.n	801529e <uxr_read_framed_msg+0x8a>
                    }

                    if (UXR_FRAMING_BEGIN_FLAG == octet)
 80152e8:	7cbb      	ldrb	r3, [r7, #18]
 80152ea:	2b7e      	cmp	r3, #126	; 0x7e
 80152ec:	d103      	bne.n	80152f6 <uxr_read_framed_msg+0xe2>
                    {
                        framing_io->state = UXR_FRAMING_READING_SRC_ADDR;
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	2201      	movs	r2, #1
 80152f2:	701a      	strb	r2, [r3, #0]
                    }
                    else
                    {
                        exit_cond = true;
                    }
                    break;
 80152f4:	e17e      	b.n	80155f4 <uxr_read_framed_msg+0x3e0>
                        exit_cond = true;
 80152f6:	2301      	movs	r3, #1
 80152f8:	74fb      	strb	r3, [r7, #19]
                    break;
 80152fa:	e17b      	b.n	80155f4 <uxr_read_framed_msg+0x3e0>
                }
                case UXR_FRAMING_READING_SRC_ADDR:
                {
                    if (uxr_get_next_octet(framing_io, &framing_io->src_addr))
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	332e      	adds	r3, #46	; 0x2e
 8015300:	4619      	mov	r1, r3
 8015302:	68f8      	ldr	r0, [r7, #12]
 8015304:	f7ff fcd6 	bl	8014cb4 <uxr_get_next_octet>
 8015308:	4603      	mov	r3, r0
 801530a:	2b00      	cmp	r3, #0
 801530c:	d003      	beq.n	8015316 <uxr_read_framed_msg+0x102>
                    {
                        framing_io->state = UXR_FRAMING_READING_DST_ADDR;
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	2202      	movs	r2, #2
 8015312:	701a      	strb	r2, [r3, #0]
                        if (UXR_FRAMING_BEGIN_FLAG != framing_io->src_addr)
                        {
                            exit_cond = true;
                        }
                    }
                    break;
 8015314:	e161      	b.n	80155da <uxr_read_framed_msg+0x3c6>
                    else if (0 < uxr_framing_read_transport(framing_io, read_cb, cb_arg, timeout, errcode, 4))
 8015316:	2304      	movs	r3, #4
 8015318:	9301      	str	r3, [sp, #4]
 801531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801531c:	9300      	str	r3, [sp, #0]
 801531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015320:	687a      	ldr	r2, [r7, #4]
 8015322:	68b9      	ldr	r1, [r7, #8]
 8015324:	68f8      	ldr	r0, [r7, #12]
 8015326:	f7ff fe95 	bl	8015054 <uxr_framing_read_transport>
 801532a:	4603      	mov	r3, r0
 801532c:	2b00      	cmp	r3, #0
 801532e:	f040 8154 	bne.w	80155da <uxr_read_framed_msg+0x3c6>
                        if (UXR_FRAMING_BEGIN_FLAG != framing_io->src_addr)
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8015338:	2b7e      	cmp	r3, #126	; 0x7e
 801533a:	f000 814e 	beq.w	80155da <uxr_read_framed_msg+0x3c6>
                            exit_cond = true;
 801533e:	2301      	movs	r3, #1
 8015340:	74fb      	strb	r3, [r7, #19]
                    break;
 8015342:	e14a      	b.n	80155da <uxr_read_framed_msg+0x3c6>
                }
                case UXR_FRAMING_READING_DST_ADDR:
                {
                    if (uxr_get_next_octet(framing_io, &octet))
 8015344:	f107 0312 	add.w	r3, r7, #18
 8015348:	4619      	mov	r1, r3
 801534a:	68f8      	ldr	r0, [r7, #12]
 801534c:	f7ff fcb2 	bl	8014cb4 <uxr_get_next_octet>
 8015350:	4603      	mov	r3, r0
 8015352:	2b00      	cmp	r3, #0
 8015354:	d00a      	beq.n	801536c <uxr_read_framed_msg+0x158>
                    {
                        framing_io->state = (octet == framing_io->local_addr) ? UXR_FRAMING_READING_LEN_LSB :
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	785a      	ldrb	r2, [r3, #1]
 801535a:	7cbb      	ldrb	r3, [r7, #18]
 801535c:	429a      	cmp	r2, r3
 801535e:	d101      	bne.n	8015364 <uxr_read_framed_msg+0x150>
 8015360:	2203      	movs	r2, #3
 8015362:	e000      	b.n	8015366 <uxr_read_framed_msg+0x152>
 8015364:	2200      	movs	r2, #0
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	701a      	strb	r2, [r3, #0]
                        else
                        {
                            exit_cond = true;
                        }
                    }
                    break;
 801536a:	e138      	b.n	80155de <uxr_read_framed_msg+0x3ca>
                    else if (0 < uxr_framing_read_transport(framing_io, read_cb, cb_arg, timeout, errcode, 3))
 801536c:	2303      	movs	r3, #3
 801536e:	9301      	str	r3, [sp, #4]
 8015370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015372:	9300      	str	r3, [sp, #0]
 8015374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015376:	687a      	ldr	r2, [r7, #4]
 8015378:	68b9      	ldr	r1, [r7, #8]
 801537a:	68f8      	ldr	r0, [r7, #12]
 801537c:	f7ff fe6a 	bl	8015054 <uxr_framing_read_transport>
 8015380:	4603      	mov	r3, r0
 8015382:	2b00      	cmp	r3, #0
 8015384:	f040 812b 	bne.w	80155de <uxr_read_framed_msg+0x3ca>
                        if (UXR_FRAMING_BEGIN_FLAG == octet)
 8015388:	7cbb      	ldrb	r3, [r7, #18]
 801538a:	2b7e      	cmp	r3, #126	; 0x7e
 801538c:	d103      	bne.n	8015396 <uxr_read_framed_msg+0x182>
                            framing_io->state = UXR_FRAMING_READING_SRC_ADDR;
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	2201      	movs	r2, #1
 8015392:	701a      	strb	r2, [r3, #0]
                    break;
 8015394:	e123      	b.n	80155de <uxr_read_framed_msg+0x3ca>
                            exit_cond = true;
 8015396:	2301      	movs	r3, #1
 8015398:	74fb      	strb	r3, [r7, #19]
                    break;
 801539a:	e120      	b.n	80155de <uxr_read_framed_msg+0x3ca>
                }
                case UXR_FRAMING_READING_LEN_LSB:
                {
                    if (uxr_get_next_octet(framing_io, &octet))
 801539c:	f107 0312 	add.w	r3, r7, #18
 80153a0:	4619      	mov	r1, r3
 80153a2:	68f8      	ldr	r0, [r7, #12]
 80153a4:	f7ff fc86 	bl	8014cb4 <uxr_get_next_octet>
 80153a8:	4603      	mov	r3, r0
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d007      	beq.n	80153be <uxr_read_framed_msg+0x1aa>
                    {
                        framing_io->msg_len = octet;
 80153ae:	7cbb      	ldrb	r3, [r7, #18]
 80153b0:	b29a      	uxth	r2, r3
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	861a      	strh	r2, [r3, #48]	; 0x30
                        framing_io->state = UXR_FRAMING_READING_LEN_MSB;
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	2204      	movs	r2, #4
 80153ba:	701a      	strb	r2, [r3, #0]
                        else
                        {
                            exit_cond = true;
                        }
                    }
                    break;
 80153bc:	e111      	b.n	80155e2 <uxr_read_framed_msg+0x3ce>
                    else if (0 < uxr_framing_read_transport(framing_io, read_cb, cb_arg, timeout, errcode, 2))
 80153be:	2302      	movs	r3, #2
 80153c0:	9301      	str	r3, [sp, #4]
 80153c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153c4:	9300      	str	r3, [sp, #0]
 80153c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153c8:	687a      	ldr	r2, [r7, #4]
 80153ca:	68b9      	ldr	r1, [r7, #8]
 80153cc:	68f8      	ldr	r0, [r7, #12]
 80153ce:	f7ff fe41 	bl	8015054 <uxr_framing_read_transport>
 80153d2:	4603      	mov	r3, r0
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	f040 8104 	bne.w	80155e2 <uxr_read_framed_msg+0x3ce>
                        if (UXR_FRAMING_BEGIN_FLAG == octet)
 80153da:	7cbb      	ldrb	r3, [r7, #18]
 80153dc:	2b7e      	cmp	r3, #126	; 0x7e
 80153de:	d103      	bne.n	80153e8 <uxr_read_framed_msg+0x1d4>
                            framing_io->state = UXR_FRAMING_READING_SRC_ADDR;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	2201      	movs	r2, #1
 80153e4:	701a      	strb	r2, [r3, #0]
                    break;
 80153e6:	e0fc      	b.n	80155e2 <uxr_read_framed_msg+0x3ce>
                            exit_cond = true;
 80153e8:	2301      	movs	r3, #1
 80153ea:	74fb      	strb	r3, [r7, #19]
                    break;
 80153ec:	e0f9      	b.n	80155e2 <uxr_read_framed_msg+0x3ce>
                }
                case UXR_FRAMING_READING_LEN_MSB:
                {
                    if (uxr_get_next_octet(framing_io, &octet))
 80153ee:	f107 0312 	add.w	r3, r7, #18
 80153f2:	4619      	mov	r1, r3
 80153f4:	68f8      	ldr	r0, [r7, #12]
 80153f6:	f7ff fc5d 	bl	8014cb4 <uxr_get_next_octet>
 80153fa:	4603      	mov	r3, r0
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d01f      	beq.n	8015440 <uxr_read_framed_msg+0x22c>
                    {
                        framing_io->msg_len = (uint16_t)(framing_io->msg_len + (octet << 8));
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8015404:	7cbb      	ldrb	r3, [r7, #18]
 8015406:	b29b      	uxth	r3, r3
 8015408:	021b      	lsls	r3, r3, #8
 801540a:	b29b      	uxth	r3, r3
 801540c:	4413      	add	r3, r2
 801540e:	b29a      	uxth	r2, r3
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	861a      	strh	r2, [r3, #48]	; 0x30
                        framing_io->msg_pos = 0;
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	2200      	movs	r2, #0
 8015418:	865a      	strh	r2, [r3, #50]	; 0x32
                        framing_io->cmp_crc = 0;
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	2200      	movs	r2, #0
 801541e:	86da      	strh	r2, [r3, #54]	; 0x36
                        if (len < framing_io->msg_len)
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8015424:	461a      	mov	r2, r3
 8015426:	6a3b      	ldr	r3, [r7, #32]
 8015428:	4293      	cmp	r3, r2
 801542a:	d205      	bcs.n	8015438 <uxr_read_framed_msg+0x224>
                        {
                            framing_io->state = UXR_FRAMING_UNINITIALIZED;
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	2200      	movs	r2, #0
 8015430:	701a      	strb	r2, [r3, #0]
                            exit_cond = true;
 8015432:	2301      	movs	r3, #1
 8015434:	74fb      	strb	r3, [r7, #19]
                        else
                        {
                            exit_cond = true;
                        }
                    }
                    break;
 8015436:	e0d6      	b.n	80155e6 <uxr_read_framed_msg+0x3d2>
                            framing_io->state = UXR_FRAMING_READING_PAYLOAD;
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	2205      	movs	r2, #5
 801543c:	701a      	strb	r2, [r3, #0]
                    break;
 801543e:	e0d2      	b.n	80155e6 <uxr_read_framed_msg+0x3d2>
                    else if (0 < uxr_framing_read_transport(framing_io, read_cb, cb_arg, timeout, errcode, 1))
 8015440:	2301      	movs	r3, #1
 8015442:	9301      	str	r3, [sp, #4]
 8015444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015446:	9300      	str	r3, [sp, #0]
 8015448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801544a:	687a      	ldr	r2, [r7, #4]
 801544c:	68b9      	ldr	r1, [r7, #8]
 801544e:	68f8      	ldr	r0, [r7, #12]
 8015450:	f7ff fe00 	bl	8015054 <uxr_framing_read_transport>
 8015454:	4603      	mov	r3, r0
 8015456:	2b00      	cmp	r3, #0
 8015458:	f040 80c5 	bne.w	80155e6 <uxr_read_framed_msg+0x3d2>
                        if (UXR_FRAMING_BEGIN_FLAG == octet)
 801545c:	7cbb      	ldrb	r3, [r7, #18]
 801545e:	2b7e      	cmp	r3, #126	; 0x7e
 8015460:	d103      	bne.n	801546a <uxr_read_framed_msg+0x256>
                            framing_io->state = UXR_FRAMING_READING_SRC_ADDR;
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	2201      	movs	r2, #1
 8015466:	701a      	strb	r2, [r3, #0]
                    break;
 8015468:	e0bd      	b.n	80155e6 <uxr_read_framed_msg+0x3d2>
                            exit_cond = true;
 801546a:	2301      	movs	r3, #1
 801546c:	74fb      	strb	r3, [r7, #19]
                    break;
 801546e:	e0ba      	b.n	80155e6 <uxr_read_framed_msg+0x3d2>
                }
                case UXR_FRAMING_READING_PAYLOAD:
                {
                    while ((framing_io->msg_pos < framing_io->msg_len) && uxr_get_next_octet(framing_io, &octet))
                    {
                        buf[(size_t)framing_io->msg_pos] = octet;
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015474:	461a      	mov	r2, r3
 8015476:	683b      	ldr	r3, [r7, #0]
 8015478:	4413      	add	r3, r2
 801547a:	7cba      	ldrb	r2, [r7, #18]
 801547c:	701a      	strb	r2, [r3, #0]
                        framing_io->msg_pos = (uint16_t)(framing_io->msg_pos + 1);
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015482:	3301      	adds	r3, #1
 8015484:	b29a      	uxth	r2, r3
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	865a      	strh	r2, [r3, #50]	; 0x32
                        uxr_update_crc(&framing_io->cmp_crc, octet);
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	3336      	adds	r3, #54	; 0x36
 801548e:	7cba      	ldrb	r2, [r7, #18]
 8015490:	4611      	mov	r1, r2
 8015492:	4618      	mov	r0, r3
 8015494:	f7ff fbee 	bl	8014c74 <uxr_update_crc>
                    while ((framing_io->msg_pos < framing_io->msg_len) && uxr_get_next_octet(framing_io, &octet))
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80154a0:	429a      	cmp	r2, r3
 80154a2:	d208      	bcs.n	80154b6 <uxr_read_framed_msg+0x2a2>
 80154a4:	f107 0312 	add.w	r3, r7, #18
 80154a8:	4619      	mov	r1, r3
 80154aa:	68f8      	ldr	r0, [r7, #12]
 80154ac:	f7ff fc02 	bl	8014cb4 <uxr_get_next_octet>
 80154b0:	4603      	mov	r3, r0
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d1dc      	bne.n	8015470 <uxr_read_framed_msg+0x25c>
                    }

                    if (framing_io->msg_pos == framing_io->msg_len)
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80154be:	429a      	cmp	r2, r3
 80154c0:	d103      	bne.n	80154ca <uxr_read_framed_msg+0x2b6>
                    {
                        framing_io->state = UXR_FRAMING_READING_CRC_LSB;
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	2206      	movs	r2, #6
 80154c6:	701a      	strb	r2, [r3, #0]
                        else
                        {
                            exit_cond = true;
                        }
                    }
                    break;
 80154c8:	e08f      	b.n	80155ea <uxr_read_framed_msg+0x3d6>
                        if (UXR_FRAMING_BEGIN_FLAG == octet)
 80154ca:	7cbb      	ldrb	r3, [r7, #18]
 80154cc:	2b7e      	cmp	r3, #126	; 0x7e
 80154ce:	d103      	bne.n	80154d8 <uxr_read_framed_msg+0x2c4>
                            framing_io->state = UXR_FRAMING_READING_SRC_ADDR;
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	2201      	movs	r2, #1
 80154d4:	701a      	strb	r2, [r3, #0]
                    break;
 80154d6:	e088      	b.n	80155ea <uxr_read_framed_msg+0x3d6>
                                (size_t)((framing_io->msg_len - framing_io->msg_pos) + 2)))
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80154dc:	461a      	mov	r2, r3
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80154e2:	1ad3      	subs	r3, r2, r3
 80154e4:	3302      	adds	r3, #2
                                uxr_framing_read_transport(framing_io, read_cb, cb_arg, timeout, errcode,
 80154e6:	9301      	str	r3, [sp, #4]
 80154e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154ea:	9300      	str	r3, [sp, #0]
 80154ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ee:	687a      	ldr	r2, [r7, #4]
 80154f0:	68b9      	ldr	r1, [r7, #8]
 80154f2:	68f8      	ldr	r0, [r7, #12]
 80154f4:	f7ff fdae 	bl	8015054 <uxr_framing_read_transport>
 80154f8:	4603      	mov	r3, r0
                        else if (0 <
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d175      	bne.n	80155ea <uxr_read_framed_msg+0x3d6>
                            exit_cond = true;
 80154fe:	2301      	movs	r3, #1
 8015500:	74fb      	strb	r3, [r7, #19]
                    break;
 8015502:	e072      	b.n	80155ea <uxr_read_framed_msg+0x3d6>
                }
                case UXR_FRAMING_READING_CRC_LSB:
                {
                    if (uxr_get_next_octet(framing_io, &octet))
 8015504:	f107 0312 	add.w	r3, r7, #18
 8015508:	4619      	mov	r1, r3
 801550a:	68f8      	ldr	r0, [r7, #12]
 801550c:	f7ff fbd2 	bl	8014cb4 <uxr_get_next_octet>
 8015510:	4603      	mov	r3, r0
 8015512:	2b00      	cmp	r3, #0
 8015514:	d00a      	beq.n	801552c <uxr_read_framed_msg+0x318>
                    {
                        framing_io->msg_crc = octet;
 8015516:	7cbb      	ldrb	r3, [r7, #18]
 8015518:	b29a      	uxth	r2, r3
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	869a      	strh	r2, [r3, #52]	; 0x34
                        framing_io->state = UXR_FRAMING_READING_CRC_MSB;
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	2207      	movs	r2, #7
 8015522:	701a      	strb	r2, [r3, #0]
                        else
                        {
                            exit_cond = true;
                        }
                    }
                    break;
 8015524:	e063      	b.n	80155ee <uxr_read_framed_msg+0x3da>
 8015526:	bf00      	nop
 8015528:	30c30c31 	.word	0x30c30c31
                    else if (0 < uxr_framing_read_transport(framing_io, read_cb, cb_arg, timeout, errcode, 2))
 801552c:	2302      	movs	r3, #2
 801552e:	9301      	str	r3, [sp, #4]
 8015530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015532:	9300      	str	r3, [sp, #0]
 8015534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015536:	687a      	ldr	r2, [r7, #4]
 8015538:	68b9      	ldr	r1, [r7, #8]
 801553a:	68f8      	ldr	r0, [r7, #12]
 801553c:	f7ff fd8a 	bl	8015054 <uxr_framing_read_transport>
 8015540:	4603      	mov	r3, r0
 8015542:	2b00      	cmp	r3, #0
 8015544:	d153      	bne.n	80155ee <uxr_read_framed_msg+0x3da>
                        if (UXR_FRAMING_BEGIN_FLAG == octet)
 8015546:	7cbb      	ldrb	r3, [r7, #18]
 8015548:	2b7e      	cmp	r3, #126	; 0x7e
 801554a:	d103      	bne.n	8015554 <uxr_read_framed_msg+0x340>
                            framing_io->state = UXR_FRAMING_READING_SRC_ADDR;
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	2201      	movs	r2, #1
 8015550:	701a      	strb	r2, [r3, #0]
                    break;
 8015552:	e04c      	b.n	80155ee <uxr_read_framed_msg+0x3da>
                            exit_cond = true;
 8015554:	2301      	movs	r3, #1
 8015556:	74fb      	strb	r3, [r7, #19]
                    break;
 8015558:	e049      	b.n	80155ee <uxr_read_framed_msg+0x3da>
                }
                case UXR_FRAMING_READING_CRC_MSB:
                {
                    if (uxr_get_next_octet(framing_io, &octet))
 801555a:	f107 0312 	add.w	r3, r7, #18
 801555e:	4619      	mov	r1, r3
 8015560:	68f8      	ldr	r0, [r7, #12]
 8015562:	f7ff fba7 	bl	8014cb4 <uxr_get_next_octet>
 8015566:	4603      	mov	r3, r0
 8015568:	2b00      	cmp	r3, #0
 801556a:	d01d      	beq.n	80155a8 <uxr_read_framed_msg+0x394>
                    {
                        framing_io->msg_crc = (uint16_t)(framing_io->msg_crc + (octet << 8));
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8015570:	7cbb      	ldrb	r3, [r7, #18]
 8015572:	b29b      	uxth	r3, r3
 8015574:	021b      	lsls	r3, r3, #8
 8015576:	b29b      	uxth	r3, r3
 8015578:	4413      	add	r3, r2
 801557a:	b29a      	uxth	r2, r3
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	869a      	strh	r2, [r3, #52]	; 0x34
                        framing_io->state = UXR_FRAMING_UNINITIALIZED;
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	2200      	movs	r2, #0
 8015584:	701a      	strb	r2, [r3, #0]
                        if (framing_io->cmp_crc == framing_io->msg_crc)
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801558e:	429a      	cmp	r2, r3
 8015590:	d107      	bne.n	80155a2 <uxr_read_framed_msg+0x38e>
                        {
                            *remote_addr = framing_io->src_addr;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8015598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801559a:	701a      	strb	r2, [r3, #0]
                            rv = framing_io->msg_len;
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80155a0:	617b      	str	r3, [r7, #20]
                        }
                        exit_cond = true;
 80155a2:	2301      	movs	r3, #1
 80155a4:	74fb      	strb	r3, [r7, #19]
                        else
                        {
                            exit_cond = true;
                        }
                    }
                    break;
 80155a6:	e024      	b.n	80155f2 <uxr_read_framed_msg+0x3de>
                    else if (0 < uxr_framing_read_transport(framing_io, read_cb, cb_arg, timeout, errcode, 1))
 80155a8:	2301      	movs	r3, #1
 80155aa:	9301      	str	r3, [sp, #4]
 80155ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ae:	9300      	str	r3, [sp, #0]
 80155b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155b2:	687a      	ldr	r2, [r7, #4]
 80155b4:	68b9      	ldr	r1, [r7, #8]
 80155b6:	68f8      	ldr	r0, [r7, #12]
 80155b8:	f7ff fd4c 	bl	8015054 <uxr_framing_read_transport>
 80155bc:	4603      	mov	r3, r0
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d117      	bne.n	80155f2 <uxr_read_framed_msg+0x3de>
                        if (UXR_FRAMING_BEGIN_FLAG == octet)
 80155c2:	7cbb      	ldrb	r3, [r7, #18]
 80155c4:	2b7e      	cmp	r3, #126	; 0x7e
 80155c6:	d103      	bne.n	80155d0 <uxr_read_framed_msg+0x3bc>
                            framing_io->state = UXR_FRAMING_READING_SRC_ADDR;
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	2201      	movs	r2, #1
 80155cc:	701a      	strb	r2, [r3, #0]
                    break;
 80155ce:	e010      	b.n	80155f2 <uxr_read_framed_msg+0x3de>
                            exit_cond = true;
 80155d0:	2301      	movs	r3, #1
 80155d2:	74fb      	strb	r3, [r7, #19]
                    break;
 80155d4:	e00d      	b.n	80155f2 <uxr_read_framed_msg+0x3de>
                }
                default:
                    break;
 80155d6:	bf00      	nop
 80155d8:	e00c      	b.n	80155f4 <uxr_read_framed_msg+0x3e0>
                    break;
 80155da:	bf00      	nop
 80155dc:	e00a      	b.n	80155f4 <uxr_read_framed_msg+0x3e0>
                    break;
 80155de:	bf00      	nop
 80155e0:	e008      	b.n	80155f4 <uxr_read_framed_msg+0x3e0>
                    break;
 80155e2:	bf00      	nop
 80155e4:	e006      	b.n	80155f4 <uxr_read_framed_msg+0x3e0>
                    break;
 80155e6:	bf00      	nop
 80155e8:	e004      	b.n	80155f4 <uxr_read_framed_msg+0x3e0>
                    break;
 80155ea:	bf00      	nop
 80155ec:	e002      	b.n	80155f4 <uxr_read_framed_msg+0x3e0>
                    break;
 80155ee:	bf00      	nop
 80155f0:	e000      	b.n	80155f4 <uxr_read_framed_msg+0x3e0>
                    break;
 80155f2:	bf00      	nop
        while (!exit_cond)
 80155f4:	7cfb      	ldrb	r3, [r7, #19]
 80155f6:	f083 0301 	eor.w	r3, r3, #1
 80155fa:	b2db      	uxtb	r3, r3
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	f47f ae30 	bne.w	8015262 <uxr_read_framed_msg+0x4e>
            }
        }
    }

    return rv;
 8015602:	697b      	ldr	r3, [r7, #20]
}
 8015604:	4618      	mov	r0, r3
 8015606:	3718      	adds	r7, #24
 8015608:	46bd      	mov	sp, r7
 801560a:	bd80      	pop	{r7, pc}

0801560c <uxr_millis>:
//==================================================================
//                             PUBLIC
//==================================================================
int64_t uxr_millis(
        void)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	af00      	add	r7, sp, #0
    return uxr_nanos() / 1000000;
 8015610:	f000 f80c 	bl	801562c <uxr_nanos>
 8015614:	4a04      	ldr	r2, [pc, #16]	; (8015628 <uxr_millis+0x1c>)
 8015616:	f04f 0300 	mov.w	r3, #0
 801561a:	f7eb fb65 	bl	8000ce8 <__aeabi_ldivmod>
 801561e:	4602      	mov	r2, r0
 8015620:	460b      	mov	r3, r1
}
 8015622:	4610      	mov	r0, r2
 8015624:	4619      	mov	r1, r3
 8015626:	bd80      	pop	{r7, pc}
 8015628:	000f4240 	.word	0x000f4240

0801562c <uxr_nanos>:

int64_t uxr_nanos(
        void)
{
 801562c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015630:	b084      	sub	sp, #16
 8015632:	af00      	add	r7, sp, #0
    struct timespec ts;
    z_impl_clock_gettime(CLOCK_REALTIME, &ts);
    return (((int64_t)ts.tv_sec) * 1000000000) + ts.tv_nsec;
#else
    struct timespec ts;
    clock_gettime(CLOCK_REALTIME, &ts);
 8015634:	463b      	mov	r3, r7
 8015636:	4619      	mov	r1, r3
 8015638:	2001      	movs	r0, #1
 801563a:	f7f4 fc25 	bl	8009e88 <clock_gettime>
    return (((int64_t)ts.tv_sec) * 1000000000) + ts.tv_nsec;
 801563e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015642:	490e      	ldr	r1, [pc, #56]	; (801567c <uxr_nanos+0x50>)
 8015644:	fb01 f003 	mul.w	r0, r1, r3
 8015648:	2100      	movs	r1, #0
 801564a:	fb02 f101 	mul.w	r1, r2, r1
 801564e:	4401      	add	r1, r0
 8015650:	480a      	ldr	r0, [pc, #40]	; (801567c <uxr_nanos+0x50>)
 8015652:	fba2 4500 	umull	r4, r5, r2, r0
 8015656:	194b      	adds	r3, r1, r5
 8015658:	461d      	mov	r5, r3
 801565a:	68bb      	ldr	r3, [r7, #8]
 801565c:	17da      	asrs	r2, r3, #31
 801565e:	4698      	mov	r8, r3
 8015660:	4691      	mov	r9, r2
 8015662:	eb14 0a08 	adds.w	sl, r4, r8
 8015666:	eb45 0b09 	adc.w	fp, r5, r9
 801566a:	4652      	mov	r2, sl
 801566c:	465b      	mov	r3, fp
#endif /* ifdef WIN32 */
}
 801566e:	4610      	mov	r0, r2
 8015670:	4619      	mov	r1, r3
 8015672:	3710      	adds	r7, #16
 8015674:	46bd      	mov	sp, r7
 8015676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801567a:	bf00      	nop
 801567c:	3b9aca00 	.word	0x3b9aca00

08015680 <rcl_client_get_rmw_handle>:
  return _client_get_options(client);
}

rmw_client_t *
rcl_client_get_rmw_handle(const rcl_client_t * client)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b082      	sub	sp, #8
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
  if (!rcl_client_is_valid(client)) {
 8015688:	6878      	ldr	r0, [r7, #4]
 801568a:	f000 f87e 	bl	801578a <rcl_client_is_valid>
 801568e:	4603      	mov	r3, r0
 8015690:	f083 0301 	eor.w	r3, r3, #1
 8015694:	b2db      	uxtb	r3, r3
 8015696:	2b00      	cmp	r3, #0
 8015698:	d001      	beq.n	801569e <rcl_client_get_rmw_handle+0x1e>
    return NULL;  // error already set
 801569a:	2300      	movs	r3, #0
 801569c:	e002      	b.n	80156a4 <rcl_client_get_rmw_handle+0x24>
  }
  return client->impl->rmw_handle;
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 80156a4:	4618      	mov	r0, r3
 80156a6:	3708      	adds	r7, #8
 80156a8:	46bd      	mov	sp, r7
 80156aa:	bd80      	pop	{r7, pc}

080156ac <rcl_take_response_with_info>:
rcl_ret_t
rcl_take_response_with_info(
  const rcl_client_t * client,
  rmw_service_info_t * request_header,
  void * ros_response)
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b086      	sub	sp, #24
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	60f8      	str	r0, [r7, #12]
 80156b4:	60b9      	str	r1, [r7, #8]
 80156b6:	607a      	str	r2, [r7, #4]
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Client taking service response");
  if (!rcl_client_is_valid(client)) {
 80156b8:	68f8      	ldr	r0, [r7, #12]
 80156ba:	f000 f866 	bl	801578a <rcl_client_is_valid>
 80156be:	4603      	mov	r3, r0
 80156c0:	f083 0301 	eor.w	r3, r3, #1
 80156c4:	b2db      	uxtb	r3, r3
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d002      	beq.n	80156d0 <rcl_take_response_with_info+0x24>
    return RCL_RET_CLIENT_INVALID;  // error already set
 80156ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80156ce:	e031      	b.n	8015734 <rcl_take_response_with_info+0x88>
  }

  RCL_CHECK_ARGUMENT_FOR_NULL(request_header, RCL_RET_INVALID_ARGUMENT);
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d101      	bne.n	80156da <rcl_take_response_with_info+0x2e>
 80156d6:	230b      	movs	r3, #11
 80156d8:	e02c      	b.n	8015734 <rcl_take_response_with_info+0x88>
  RCL_CHECK_ARGUMENT_FOR_NULL(ros_response, RCL_RET_INVALID_ARGUMENT);
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d101      	bne.n	80156e4 <rcl_take_response_with_info+0x38>
 80156e0:	230b      	movs	r3, #11
 80156e2:	e027      	b.n	8015734 <rcl_take_response_with_info+0x88>

  bool taken = false;
 80156e4:	2300      	movs	r3, #0
 80156e6:	75fb      	strb	r3, [r7, #23]
  request_header->source_timestamp = 0;
 80156e8:	68b9      	ldr	r1, [r7, #8]
 80156ea:	f04f 0200 	mov.w	r2, #0
 80156ee:	f04f 0300 	mov.w	r3, #0
 80156f2:	e9c1 2300 	strd	r2, r3, [r1]
  request_header->received_timestamp = 0;
 80156f6:	68b9      	ldr	r1, [r7, #8]
 80156f8:	f04f 0200 	mov.w	r2, #0
 80156fc:	f04f 0300 	mov.w	r3, #0
 8015700:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (rmw_take_response(
      client->impl->rmw_handle, request_header, ros_response, &taken) != RMW_RET_OK)
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	6e98      	ldr	r0, [r3, #104]	; 0x68
  if (rmw_take_response(
 801570a:	f107 0317 	add.w	r3, r7, #23
 801570e:	687a      	ldr	r2, [r7, #4]
 8015710:	68b9      	ldr	r1, [r7, #8]
 8015712:	f009 fa67 	bl	801ebe4 <rmw_take_response>
 8015716:	4603      	mov	r3, r0
 8015718:	2b00      	cmp	r3, #0
 801571a:	d001      	beq.n	8015720 <rcl_take_response_with_info+0x74>
  {
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    return RCL_RET_ERROR;
 801571c:	2301      	movs	r3, #1
 801571e:	e009      	b.n	8015734 <rcl_take_response_with_info+0x88>
  }
  RCUTILS_LOG_DEBUG_NAMED(
    ROS_PACKAGE_NAME, "Client take response succeeded: %s", taken ? "true" : "false");
  if (!taken) {
 8015720:	7dfb      	ldrb	r3, [r7, #23]
 8015722:	f083 0301 	eor.w	r3, r3, #1
 8015726:	b2db      	uxtb	r3, r3
 8015728:	2b00      	cmp	r3, #0
 801572a:	d002      	beq.n	8015732 <rcl_take_response_with_info+0x86>
    return RCL_RET_CLIENT_TAKE_FAILED;
 801572c:	f240 13f5 	movw	r3, #501	; 0x1f5
 8015730:	e000      	b.n	8015734 <rcl_take_response_with_info+0x88>
  }
  return RCL_RET_OK;
 8015732:	2300      	movs	r3, #0
}
 8015734:	4618      	mov	r0, r3
 8015736:	3718      	adds	r7, #24
 8015738:	46bd      	mov	sp, r7
 801573a:	bd80      	pop	{r7, pc}

0801573c <rcl_take_response>:
rcl_ret_t
rcl_take_response(
  const rcl_client_t * client,
  rmw_request_id_t * request_header,
  void * ros_response)
{
 801573c:	b5b0      	push	{r4, r5, r7, lr}
 801573e:	b090      	sub	sp, #64	; 0x40
 8015740:	af00      	add	r7, sp, #0
 8015742:	60f8      	str	r0, [r7, #12]
 8015744:	60b9      	str	r1, [r7, #8]
 8015746:	607a      	str	r2, [r7, #4]
  rmw_service_info_t header;
  header.request_id = *request_header;
 8015748:	68bb      	ldr	r3, [r7, #8]
 801574a:	f107 0420 	add.w	r4, r7, #32
 801574e:	461d      	mov	r5, r3
 8015750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015754:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015758:	e884 0003 	stmia.w	r4, {r0, r1}
  rcl_ret_t ret = rcl_take_response_with_info(client, &header, ros_response);
 801575c:	f107 0310 	add.w	r3, r7, #16
 8015760:	687a      	ldr	r2, [r7, #4]
 8015762:	4619      	mov	r1, r3
 8015764:	68f8      	ldr	r0, [r7, #12]
 8015766:	f7ff ffa1 	bl	80156ac <rcl_take_response_with_info>
 801576a:	63f8      	str	r0, [r7, #60]	; 0x3c
  *request_header = header.request_id;
 801576c:	68bb      	ldr	r3, [r7, #8]
 801576e:	461d      	mov	r5, r3
 8015770:	f107 0420 	add.w	r4, r7, #32
 8015774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015778:	e894 0003 	ldmia.w	r4, {r0, r1}
 801577c:	e885 0003 	stmia.w	r5, {r0, r1}
  return ret;
 8015780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015782:	4618      	mov	r0, r3
 8015784:	3740      	adds	r7, #64	; 0x40
 8015786:	46bd      	mov	sp, r7
 8015788:	bdb0      	pop	{r4, r5, r7, pc}

0801578a <rcl_client_is_valid>:

bool
rcl_client_is_valid(const rcl_client_t * client)
{
 801578a:	b480      	push	{r7}
 801578c:	b083      	sub	sp, #12
 801578e:	af00      	add	r7, sp, #0
 8015790:	6078      	str	r0, [r7, #4]
  RCL_CHECK_FOR_NULL_WITH_MSG(client, "client pointer is invalid", return false);
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d101      	bne.n	801579c <rcl_client_is_valid+0x12>
 8015798:	2300      	movs	r3, #0
 801579a:	e00d      	b.n	80157b8 <rcl_client_is_valid+0x2e>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d101      	bne.n	80157a8 <rcl_client_is_valid+0x1e>
 80157a4:	2300      	movs	r3, #0
 80157a6:	e007      	b.n	80157b8 <rcl_client_is_valid+0x2e>
    client->impl, "client's rmw implementation is invalid", return false);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d101      	bne.n	80157b6 <rcl_client_is_valid+0x2c>
 80157b2:	2300      	movs	r3, #0
 80157b4:	e000      	b.n	80157b8 <rcl_client_is_valid+0x2e>
    client->impl->rmw_handle, "client's rmw handle is invalid", return false);
  return true;
 80157b6:	2301      	movs	r3, #1
}
 80157b8:	4618      	mov	r0, r3
 80157ba:	370c      	adds	r7, #12
 80157bc:	46bd      	mov	sp, r7
 80157be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c2:	4770      	bx	lr

080157c4 <rcl_convert_rmw_ret_to_rcl_ret>:
#include "rcl/allocator.h"
#include "rcl/error_handling.h"

rcl_ret_t
rcl_convert_rmw_ret_to_rcl_ret(rmw_ret_t rmw_ret)
{
 80157c4:	b480      	push	{r7}
 80157c6:	b083      	sub	sp, #12
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]
  switch (rmw_ret) {
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	2b0b      	cmp	r3, #11
 80157d0:	dc20      	bgt.n	8015814 <rcl_convert_rmw_ret_to_rcl_ret+0x50>
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	db2b      	blt.n	8015830 <rcl_convert_rmw_ret_to_rcl_ret+0x6c>
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	2b0b      	cmp	r3, #11
 80157dc:	d828      	bhi.n	8015830 <rcl_convert_rmw_ret_to_rcl_ret+0x6c>
 80157de:	a201      	add	r2, pc, #4	; (adr r2, 80157e4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>)
 80157e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157e4:	0801581d 	.word	0x0801581d
 80157e8:	08015831 	.word	0x08015831
 80157ec:	08015831 	.word	0x08015831
 80157f0:	08015829 	.word	0x08015829
 80157f4:	08015831 	.word	0x08015831
 80157f8:	08015831 	.word	0x08015831
 80157fc:	08015831 	.word	0x08015831
 8015800:	08015831 	.word	0x08015831
 8015804:	08015831 	.word	0x08015831
 8015808:	08015831 	.word	0x08015831
 801580c:	08015825 	.word	0x08015825
 8015810:	08015821 	.word	0x08015821
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	2bcb      	cmp	r3, #203	; 0xcb
 8015818:	d008      	beq.n	801582c <rcl_convert_rmw_ret_to_rcl_ret+0x68>
 801581a:	e009      	b.n	8015830 <rcl_convert_rmw_ret_to_rcl_ret+0x6c>
    case RMW_RET_OK:
      return RCL_RET_OK;
 801581c:	2300      	movs	r3, #0
 801581e:	e008      	b.n	8015832 <rcl_convert_rmw_ret_to_rcl_ret+0x6e>
    case RMW_RET_INVALID_ARGUMENT:
      return RCL_RET_INVALID_ARGUMENT;
 8015820:	230b      	movs	r3, #11
 8015822:	e006      	b.n	8015832 <rcl_convert_rmw_ret_to_rcl_ret+0x6e>
    case RMW_RET_BAD_ALLOC:
      return RCL_RET_BAD_ALLOC;
 8015824:	230a      	movs	r3, #10
 8015826:	e004      	b.n	8015832 <rcl_convert_rmw_ret_to_rcl_ret+0x6e>
    case RMW_RET_UNSUPPORTED:
      return RCL_RET_UNSUPPORTED;
 8015828:	2303      	movs	r3, #3
 801582a:	e002      	b.n	8015832 <rcl_convert_rmw_ret_to_rcl_ret+0x6e>
    case RMW_RET_NODE_NAME_NON_EXISTENT:
      return RCL_RET_NODE_NAME_NON_EXISTENT;
 801582c:	23cb      	movs	r3, #203	; 0xcb
 801582e:	e000      	b.n	8015832 <rcl_convert_rmw_ret_to_rcl_ret+0x6e>
    default:
      return RCL_RET_ERROR;
 8015830:	2301      	movs	r3, #1
  }
}
 8015832:	4618      	mov	r0, r3
 8015834:	370c      	adds	r7, #12
 8015836:	46bd      	mov	sp, r7
 8015838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583c:	4770      	bx	lr
 801583e:	bf00      	nop

08015840 <rcutils_atomic_load_uint64_t>:
  return result;
}

static inline uint64_t
rcutils_atomic_load_uint64_t(atomic_uint_least64_t * a_uint64_t)
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b084      	sub	sp, #16
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
  uint64_t result = 0;
 8015848:	f04f 0200 	mov.w	r2, #0
 801584c:	f04f 0300 	mov.w	r3, #0
 8015850:	e9c7 2302 	strd	r2, r3, [r7, #8]
  rcutils_atomic_load(a_uint64_t, result);
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	2105      	movs	r1, #5
 8015858:	4618      	mov	r0, r3
 801585a:	f006 f810 	bl	801b87e <__atomic_load_8>
 801585e:	4602      	mov	r2, r0
 8015860:	460b      	mov	r3, r1
 8015862:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return result;
 8015866:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 801586a:	4610      	mov	r0, r2
 801586c:	4619      	mov	r1, r3
 801586e:	3710      	adds	r7, #16
 8015870:	46bd      	mov	sp, r7
 8015872:	bd80      	pop	{r7, pc}

08015874 <rcl_get_zero_initialized_context>:
#include "./context_impl.h"
#include "rcutils/stdatomic_helper.h"

rcl_context_t
rcl_get_zero_initialized_context(void)
{
 8015874:	b490      	push	{r4, r7}
 8015876:	b082      	sub	sp, #8
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
  // ensure assumption about static storage
  static_assert(
    sizeof(context.instance_id_storage) >= sizeof(atomic_uint_least64_t),
    "expected rcl_context_t's instance id storage to be >= size of atomic_uint_least64_t");
  // initialize atomic
  atomic_init((atomic_uint_least64_t *)(&context.instance_id_storage), 0);
 801587c:	4909      	ldr	r1, [pc, #36]	; (80158a4 <rcl_get_zero_initialized_context+0x30>)
 801587e:	f04f 0200 	mov.w	r2, #0
 8015882:	f04f 0300 	mov.w	r3, #0
 8015886:	e9c1 2300 	strd	r2, r3, [r1]
  return context;
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	4a06      	ldr	r2, [pc, #24]	; (80158a8 <rcl_get_zero_initialized_context+0x34>)
 801588e:	461c      	mov	r4, r3
 8015890:	4613      	mov	r3, r2
 8015892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8015898:	6878      	ldr	r0, [r7, #4]
 801589a:	3708      	adds	r7, #8
 801589c:	46bd      	mov	sp, r7
 801589e:	bc90      	pop	{r4, r7}
 80158a0:	4770      	bx	lr
 80158a2:	bf00      	nop
 80158a4:	2000e4e0 	.word	0x2000e4e0
 80158a8:	2000e4d8 	.word	0x2000e4d8

080158ac <rcl_context_get_instance_id>:
  return &(context->impl->init_options);
}

rcl_context_instance_id_t
rcl_context_get_instance_id(rcl_context_t * context)
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b082      	sub	sp, #8
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
  RCL_CHECK_ARGUMENT_FOR_NULL(context, 0);
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d104      	bne.n	80158c4 <rcl_context_get_instance_id+0x18>
 80158ba:	f04f 0200 	mov.w	r2, #0
 80158be:	f04f 0300 	mov.w	r3, #0
 80158c2:	e006      	b.n	80158d2 <rcl_context_get_instance_id+0x26>
  return rcutils_atomic_load_uint64_t((atomic_uint_least64_t *)(&context->instance_id_storage));
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	3308      	adds	r3, #8
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7ff ffb9 	bl	8015840 <rcutils_atomic_load_uint64_t>
 80158ce:	4602      	mov	r2, r0
 80158d0:	460b      	mov	r3, r1
}
 80158d2:	4610      	mov	r0, r2
 80158d4:	4619      	mov	r1, r3
 80158d6:	3708      	adds	r7, #8
 80158d8:	46bd      	mov	sp, r7
 80158da:	bd80      	pop	{r7, pc}

080158dc <rcl_context_is_valid>:

bool
rcl_context_is_valid(rcl_context_t * context)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b082      	sub	sp, #8
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
  RCL_CHECK_ARGUMENT_FOR_NULL(context, false);
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d101      	bne.n	80158ee <rcl_context_is_valid+0x12>
 80158ea:	2300      	movs	r3, #0
 80158ec:	e00a      	b.n	8015904 <rcl_context_is_valid+0x28>
  return 0 != rcl_context_get_instance_id(context);
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f7ff ffdc 	bl	80158ac <rcl_context_get_instance_id>
 80158f4:	4602      	mov	r2, r0
 80158f6:	460b      	mov	r3, r1
 80158f8:	4313      	orrs	r3, r2
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	bf14      	ite	ne
 80158fe:	2301      	movne	r3, #1
 8015900:	2300      	moveq	r3, #0
 8015902:	b2db      	uxtb	r3, r3
}
 8015904:	4618      	mov	r0, r3
 8015906:	3708      	adds	r7, #8
 8015908:	46bd      	mov	sp, r7
 801590a:	bd80      	pop	{r7, pc}

0801590c <__cleanup_context>:
  return &(context->impl->rmw_context);
}

rcl_ret_t
__cleanup_context(rcl_context_t * context)
{
 801590c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015910:	b094      	sub	sp, #80	; 0x50
 8015912:	af02      	add	r7, sp, #8
 8015914:	6178      	str	r0, [r7, #20]
  rcl_ret_t ret = RCL_RET_OK;
 8015916:	2300      	movs	r3, #0
 8015918:	647b      	str	r3, [r7, #68]	; 0x44
  // reset the instance id to 0 to indicate "invalid" (should already be 0, but this is defensive)
  rcutils_atomic_store((atomic_uint_least64_t *)(&context->instance_id_storage), 0);
 801591a:	697b      	ldr	r3, [r7, #20]
 801591c:	3308      	adds	r3, #8
 801591e:	4619      	mov	r1, r3
 8015920:	2305      	movs	r3, #5
 8015922:	9300      	str	r3, [sp, #0]
 8015924:	f04f 0200 	mov.w	r2, #0
 8015928:	f04f 0300 	mov.w	r3, #0
 801592c:	4608      	mov	r0, r1
 801592e:	f005 ffbd 	bl	801b8ac <__atomic_store_8>
    }
  }
#endif // RCL_COMMAND_LINE_ENABLED

  // if impl is null, nothing else can be cleaned up
  if (NULL != context->impl) {
 8015932:	697b      	ldr	r3, [r7, #20]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d075      	beq.n	8015a26 <__cleanup_context+0x11a>
    // pull allocator out for use during deallocation
    rcl_allocator_t allocator = context->impl->allocator;
 801593a:	697b      	ldr	r3, [r7, #20]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	f107 041c 	add.w	r4, r7, #28
 8015942:	461d      	mov	r5, r3
 8015944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015948:	682b      	ldr	r3, [r5, #0]
 801594a:	6023      	str	r3, [r4, #0]

    // finalize init options if valid
    if (NULL != context->impl->init_options.impl) {
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	695b      	ldr	r3, [r3, #20]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d010      	beq.n	8015978 <__cleanup_context+0x6c>
      rcl_ret_t init_options_fini_ret = rcl_init_options_fini(&(context->impl->init_options));
 8015956:	697b      	ldr	r3, [r7, #20]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	3314      	adds	r3, #20
 801595c:	4618      	mov	r0, r3
 801595e:	f000 ff5a 	bl	8016816 <rcl_init_options_fini>
 8015962:	6378      	str	r0, [r7, #52]	; 0x34
      if (RCL_RET_OK != init_options_fini_ret) {
 8015964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015966:	2b00      	cmp	r3, #0
 8015968:	d006      	beq.n	8015978 <__cleanup_context+0x6c>
        if (RCL_RET_OK == ret) {
 801596a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801596c:	2b00      	cmp	r3, #0
 801596e:	d101      	bne.n	8015974 <__cleanup_context+0x68>
          ret = init_options_fini_ret;
 8015970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015972:	647b      	str	r3, [r7, #68]	; 0x44
        RCUTILS_SAFE_FWRITE_TO_STDERR(
          "[rcl|context.c:" RCUTILS_STRINGIFY(__LINE__)
          "] failed to finalize init options while cleaning up context, memory may be leaked: ");
        RCUTILS_SAFE_FWRITE_TO_STDERR(rcl_get_error_string().str);
        RCUTILS_SAFE_FWRITE_TO_STDERR("\n");
        rcl_reset_error();
 8015974:	f006 f9b8 	bl	801bce8 <rcutils_reset_error>
      }
    }

    // clean up rmw_context
    if (NULL != context->impl->rmw_context.implementation_identifier) {
 8015978:	697b      	ldr	r3, [r7, #20]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801597e:	2b00      	cmp	r3, #0
 8015980:	d012      	beq.n	80159a8 <__cleanup_context+0x9c>
      rmw_ret_t rmw_context_fini_ret = rmw_context_fini(&(context->impl->rmw_context));
 8015982:	697b      	ldr	r3, [r7, #20]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	3328      	adds	r3, #40	; 0x28
 8015988:	4618      	mov	r0, r3
 801598a:	f008 fa09 	bl	801dda0 <rmw_context_fini>
 801598e:	6338      	str	r0, [r7, #48]	; 0x30
      if (RMW_RET_OK != rmw_context_fini_ret) {
 8015990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015992:	2b00      	cmp	r3, #0
 8015994:	d008      	beq.n	80159a8 <__cleanup_context+0x9c>
        if (RCL_RET_OK == ret) {
 8015996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015998:	2b00      	cmp	r3, #0
 801599a:	d103      	bne.n	80159a4 <__cleanup_context+0x98>
          ret = rcl_convert_rmw_ret_to_rcl_ret(rmw_context_fini_ret);
 801599c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801599e:	f7ff ff11 	bl	80157c4 <rcl_convert_rmw_ret_to_rcl_ret>
 80159a2:	6478      	str	r0, [r7, #68]	; 0x44
        RCUTILS_SAFE_FWRITE_TO_STDERR(
          "[rcl|context.c:" RCUTILS_STRINGIFY(__LINE__)
          "] failed to finalize rmw context while cleaning up context, memory may be leaked: ");
        RCUTILS_SAFE_FWRITE_TO_STDERR(rcutils_get_error_string().str);
        RCUTILS_SAFE_FWRITE_TO_STDERR("\n");
        rcutils_reset_error();
 80159a4:	f006 f9a0 	bl	801bce8 <rcutils_reset_error>
      }
    }

    // clean up copy of argv if valid
    if (NULL != context->impl->argv) {
 80159a8:	697b      	ldr	r3, [r7, #20]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	6a1b      	ldr	r3, [r3, #32]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d033      	beq.n	8015a1a <__cleanup_context+0x10e>
      int64_t i;
      for (i = 0; i < context->impl->argc; ++i) {
 80159b2:	f04f 0200 	mov.w	r2, #0
 80159b6:	f04f 0300 	mov.w	r3, #0
 80159ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80159be:	e01b      	b.n	80159f8 <__cleanup_context+0xec>
        if (NULL != context->impl->argv[i]) {
 80159c0:	697b      	ldr	r3, [r7, #20]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	6a1a      	ldr	r2, [r3, #32]
 80159c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159c8:	009b      	lsls	r3, r3, #2
 80159ca:	4413      	add	r3, r2
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d00a      	beq.n	80159e8 <__cleanup_context+0xdc>
          allocator.deallocate(context->impl->argv[i], allocator.state);
 80159d2:	6a3b      	ldr	r3, [r7, #32]
 80159d4:	697a      	ldr	r2, [r7, #20]
 80159d6:	6812      	ldr	r2, [r2, #0]
 80159d8:	6a11      	ldr	r1, [r2, #32]
 80159da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80159dc:	0092      	lsls	r2, r2, #2
 80159de:	440a      	add	r2, r1
 80159e0:	6812      	ldr	r2, [r2, #0]
 80159e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80159e4:	4610      	mov	r0, r2
 80159e6:	4798      	blx	r3
      for (i = 0; i < context->impl->argc; ++i) {
 80159e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80159ec:	f112 0801 	adds.w	r8, r2, #1
 80159f0:	f143 0900 	adc.w	r9, r3, #0
 80159f4:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 80159f8:	697b      	ldr	r3, [r7, #20]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015a00:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8015a04:	4290      	cmp	r0, r2
 8015a06:	eb71 0303 	sbcs.w	r3, r1, r3
 8015a0a:	dbd9      	blt.n	80159c0 <__cleanup_context+0xb4>
        }
      }
      allocator.deallocate(context->impl->argv, allocator.state);
 8015a0c:	6a3b      	ldr	r3, [r7, #32]
 8015a0e:	697a      	ldr	r2, [r7, #20]
 8015a10:	6812      	ldr	r2, [r2, #0]
 8015a12:	6a12      	ldr	r2, [r2, #32]
 8015a14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015a16:	4610      	mov	r0, r2
 8015a18:	4798      	blx	r3
    }
    allocator.deallocate(context->impl, allocator.state);
 8015a1a:	6a3b      	ldr	r3, [r7, #32]
 8015a1c:	697a      	ldr	r2, [r7, #20]
 8015a1e:	6812      	ldr	r2, [r2, #0]
 8015a20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015a22:	4610      	mov	r0, r2
 8015a24:	4798      	blx	r3
  }  // if (NULL != context->impl)

  // zero-initialize the context
  *context = rcl_get_zero_initialized_context();
 8015a26:	697c      	ldr	r4, [r7, #20]
 8015a28:	463b      	mov	r3, r7
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7ff ff22 	bl	8015874 <rcl_get_zero_initialized_context>
 8015a30:	463b      	mov	r3, r7
 8015a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015a34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return ret;
 8015a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	3748      	adds	r7, #72	; 0x48
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08015a44 <rcl_get_default_domain_id>:

const char * const RCL_DOMAIN_ID_ENV_VAR = "ROS_DOMAIN_ID";

rcl_ret_t
rcl_get_default_domain_id(size_t * domain_id)
{
 8015a44:	b580      	push	{r7, lr}
 8015a46:	b086      	sub	sp, #24
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_INVALID_ARGUMENT);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_ERROR);

  const char * ros_domain_id = NULL;
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	60fb      	str	r3, [r7, #12]
  const char * get_env_error_str = NULL;
 8015a50:	2300      	movs	r3, #0
 8015a52:	617b      	str	r3, [r7, #20]

  RCL_CHECK_ARGUMENT_FOR_NULL(domain_id, RCL_RET_INVALID_ARGUMENT);
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d101      	bne.n	8015a5e <rcl_get_default_domain_id+0x1a>
 8015a5a:	230b      	movs	r3, #11
 8015a5c:	e036      	b.n	8015acc <rcl_get_default_domain_id+0x88>

  get_env_error_str = rcutils_get_env(RCL_DOMAIN_ID_ENV_VAR, &ros_domain_id);
 8015a5e:	4a1d      	ldr	r2, [pc, #116]	; (8015ad4 <rcl_get_default_domain_id+0x90>)
 8015a60:	f107 030c 	add.w	r3, r7, #12
 8015a64:	4619      	mov	r1, r3
 8015a66:	4610      	mov	r0, r2
 8015a68:	f006 fa02 	bl	801be70 <rcutils_get_env>
 8015a6c:	6178      	str	r0, [r7, #20]
  if (NULL != get_env_error_str) {
 8015a6e:	697b      	ldr	r3, [r7, #20]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d001      	beq.n	8015a78 <rcl_get_default_domain_id+0x34>
    RCL_SET_ERROR_MSG_WITH_FORMAT_STRING(
      "Error getting env var '" RCUTILS_STRINGIFY(RCL_DOMAIN_ID_ENV_VAR) "': %s\n",
      get_env_error_str);
    return RCL_RET_ERROR;
 8015a74:	2301      	movs	r3, #1
 8015a76:	e029      	b.n	8015acc <rcl_get_default_domain_id+0x88>
  }
  if (ros_domain_id && strcmp(ros_domain_id, "") != 0) {
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d025      	beq.n	8015aca <rcl_get_default_domain_id+0x86>
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	781b      	ldrb	r3, [r3, #0]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d021      	beq.n	8015aca <rcl_get_default_domain_id+0x86>
    char * end = NULL;
 8015a86:	2300      	movs	r3, #0
 8015a88:	60bb      	str	r3, [r7, #8]
    unsigned long number = strtoul(ros_domain_id, &end, 0);  // NOLINT(runtime/int)
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	f107 0108 	add.w	r1, r7, #8
 8015a90:	2200      	movs	r2, #0
 8015a92:	4618      	mov	r0, r3
 8015a94:	f00d fae6 	bl	8023064 <strtoul>
 8015a98:	6138      	str	r0, [r7, #16]
    if (number == 0UL && *end != '\0') {
 8015a9a:	693b      	ldr	r3, [r7, #16]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d105      	bne.n	8015aac <rcl_get_default_domain_id+0x68>
 8015aa0:	68bb      	ldr	r3, [r7, #8]
 8015aa2:	781b      	ldrb	r3, [r3, #0]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d001      	beq.n	8015aac <rcl_get_default_domain_id+0x68>
      RCL_SET_ERROR_MSG("ROS_DOMAIN_ID is not an integral number");
      return RCL_RET_ERROR;
 8015aa8:	2301      	movs	r3, #1
 8015aaa:	e00f      	b.n	8015acc <rcl_get_default_domain_id+0x88>
    }
    if ((number == ULONG_MAX && errno == ERANGE) || number > SIZE_MAX) {
 8015aac:	693b      	ldr	r3, [r7, #16]
 8015aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015ab2:	d107      	bne.n	8015ac4 <rcl_get_default_domain_id+0x80>
 8015ab4:	f00a ff52 	bl	802095c <__errno>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	2b22      	cmp	r3, #34	; 0x22
 8015abe:	d101      	bne.n	8015ac4 <rcl_get_default_domain_id+0x80>
      RCL_SET_ERROR_MSG("ROS_DOMAIN_ID is out of range");
      return RCL_RET_ERROR;
 8015ac0:	2301      	movs	r3, #1
 8015ac2:	e003      	b.n	8015acc <rcl_get_default_domain_id+0x88>
    }
    *domain_id = (size_t)number;
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	693a      	ldr	r2, [r7, #16]
 8015ac8:	601a      	str	r2, [r3, #0]
  }
  return RCL_RET_OK;
 8015aca:	2300      	movs	r3, #0
}
 8015acc:	4618      	mov	r0, r3
 8015ace:	3718      	adds	r7, #24
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}
 8015ad4:	08025950 	.word	0x08025950

08015ad8 <rcl_expand_topic_name>:
  const char * node_name,
  const char * node_namespace,
  const rcutils_string_map_t * substitutions,
  rcl_allocator_t allocator,
  char ** output_topic_name)
{
 8015ad8:	b590      	push	{r4, r7, lr}
 8015ada:	b09b      	sub	sp, #108	; 0x6c
 8015adc:	af06      	add	r7, sp, #24
 8015ade:	60f8      	str	r0, [r7, #12]
 8015ae0:	60b9      	str	r1, [r7, #8]
 8015ae2:	607a      	str	r2, [r7, #4]
 8015ae4:	603b      	str	r3, [r7, #0]
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_NODE_INVALID_NAMESPACE);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_UNKNOWN_SUBSTITUTION);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_BAD_ALLOC);

  // check arguments that could be null
  RCL_CHECK_ARGUMENT_FOR_NULL(input_topic_name, RCL_RET_INVALID_ARGUMENT);
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d101      	bne.n	8015af0 <rcl_expand_topic_name+0x18>
 8015aec:	230b      	movs	r3, #11
 8015aee:	e1a6      	b.n	8015e3e <rcl_expand_topic_name+0x366>
  RCL_CHECK_ARGUMENT_FOR_NULL(node_name, RCL_RET_INVALID_ARGUMENT);
 8015af0:	68bb      	ldr	r3, [r7, #8]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d101      	bne.n	8015afa <rcl_expand_topic_name+0x22>
 8015af6:	230b      	movs	r3, #11
 8015af8:	e1a1      	b.n	8015e3e <rcl_expand_topic_name+0x366>
  RCL_CHECK_ARGUMENT_FOR_NULL(node_namespace, RCL_RET_INVALID_ARGUMENT);
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d101      	bne.n	8015b04 <rcl_expand_topic_name+0x2c>
 8015b00:	230b      	movs	r3, #11
 8015b02:	e19c      	b.n	8015e3e <rcl_expand_topic_name+0x366>
  RCL_CHECK_ARGUMENT_FOR_NULL(substitutions, RCL_RET_INVALID_ARGUMENT);
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d101      	bne.n	8015b0e <rcl_expand_topic_name+0x36>
 8015b0a:	230b      	movs	r3, #11
 8015b0c:	e197      	b.n	8015e3e <rcl_expand_topic_name+0x366>
  RCL_CHECK_ARGUMENT_FOR_NULL(output_topic_name, RCL_RET_INVALID_ARGUMENT);
 8015b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d101      	bne.n	8015b18 <rcl_expand_topic_name+0x40>
 8015b14:	230b      	movs	r3, #11
 8015b16:	e192      	b.n	8015e3e <rcl_expand_topic_name+0x366>
  // validate the input topic
  int validation_result;
  rcl_ret_t ret = rcl_validate_topic_name(input_topic_name, &validation_result, NULL);
 8015b18:	f107 0310 	add.w	r3, r7, #16
 8015b1c:	2200      	movs	r2, #0
 8015b1e:	4619      	mov	r1, r3
 8015b20:	68f8      	ldr	r0, [r7, #12]
 8015b22:	f003 f993 	bl	8018e4c <rcl_validate_topic_name>
 8015b26:	6438      	str	r0, [r7, #64]	; 0x40
  if (ret != RCL_RET_OK) {
 8015b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d001      	beq.n	8015b32 <rcl_expand_topic_name+0x5a>
    // error message already set
    return ret;
 8015b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b30:	e185      	b.n	8015e3e <rcl_expand_topic_name+0x366>
  }
  if (validation_result != RCL_TOPIC_NAME_VALID) {
 8015b32:	693b      	ldr	r3, [r7, #16]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d001      	beq.n	8015b3c <rcl_expand_topic_name+0x64>
    RCL_SET_ERROR_MSG("topic name is invalid");
    return RCL_RET_TOPIC_NAME_INVALID;
 8015b38:	2367      	movs	r3, #103	; 0x67
 8015b3a:	e180      	b.n	8015e3e <rcl_expand_topic_name+0x366>
  }
  // validate the node name
  rmw_ret_t rmw_ret;
  rmw_ret = rmw_validate_node_name(node_name, &validation_result, NULL);
 8015b3c:	f107 0310 	add.w	r3, r7, #16
 8015b40:	2200      	movs	r2, #0
 8015b42:	4619      	mov	r1, r3
 8015b44:	68b8      	ldr	r0, [r7, #8]
 8015b46:	f007 f913 	bl	801cd70 <rmw_validate_node_name>
 8015b4a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (rmw_ret != RMW_RET_OK) {
 8015b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d004      	beq.n	8015b5c <rcl_expand_topic_name+0x84>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    return rcl_convert_rmw_ret_to_rcl_ret(rmw_ret);
 8015b52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015b54:	f7ff fe36 	bl	80157c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8015b58:	4603      	mov	r3, r0
 8015b5a:	e170      	b.n	8015e3e <rcl_expand_topic_name+0x366>
  }
  if (validation_result != RMW_NODE_NAME_VALID) {
 8015b5c:	693b      	ldr	r3, [r7, #16]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d001      	beq.n	8015b66 <rcl_expand_topic_name+0x8e>
    RCL_SET_ERROR_MSG("node name is invalid");
    return RCL_RET_NODE_INVALID_NAME;
 8015b62:	23c9      	movs	r3, #201	; 0xc9
 8015b64:	e16b      	b.n	8015e3e <rcl_expand_topic_name+0x366>
  }
  // validate the namespace
  rmw_ret = rmw_validate_namespace(node_namespace, &validation_result, NULL);
 8015b66:	f107 0310 	add.w	r3, r7, #16
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	4619      	mov	r1, r3
 8015b6e:	6878      	ldr	r0, [r7, #4]
 8015b70:	f006 ff90 	bl	801ca94 <rmw_validate_namespace>
 8015b74:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (rmw_ret != RMW_RET_OK) {
 8015b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d004      	beq.n	8015b86 <rcl_expand_topic_name+0xae>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    return rcl_convert_rmw_ret_to_rcl_ret(rmw_ret);
 8015b7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015b7e:	f7ff fe21 	bl	80157c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8015b82:	4603      	mov	r3, r0
 8015b84:	e15b      	b.n	8015e3e <rcl_expand_topic_name+0x366>
  }
  if (validation_result != RMW_NODE_NAME_VALID) {
 8015b86:	693b      	ldr	r3, [r7, #16]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d001      	beq.n	8015b90 <rcl_expand_topic_name+0xb8>
    RCL_SET_ERROR_MSG("node namespace is invalid");
    return RCL_RET_NODE_INVALID_NAMESPACE;
 8015b8c:	23ca      	movs	r3, #202	; 0xca
 8015b8e:	e156      	b.n	8015e3e <rcl_expand_topic_name+0x366>
  }
  // check if the topic has substitutions to be made
  bool has_a_substitution = strchr(input_topic_name, '{') != NULL;
 8015b90:	217b      	movs	r1, #123	; 0x7b
 8015b92:	68f8      	ldr	r0, [r7, #12]
 8015b94:	f00c fafd 	bl	8022192 <strchr>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	bf14      	ite	ne
 8015b9e:	2301      	movne	r3, #1
 8015ba0:	2300      	moveq	r3, #0
 8015ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  bool has_a_namespace_tilde = input_topic_name[0] == '~';
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	781b      	ldrb	r3, [r3, #0]
 8015baa:	2b7e      	cmp	r3, #126	; 0x7e
 8015bac:	bf0c      	ite	eq
 8015bae:	2301      	moveq	r3, #1
 8015bb0:	2300      	movne	r3, #0
 8015bb2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  bool is_absolute = input_topic_name[0] == '/';
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	781b      	ldrb	r3, [r3, #0]
 8015bba:	2b2f      	cmp	r3, #47	; 0x2f
 8015bbc:	bf0c      	ite	eq
 8015bbe:	2301      	moveq	r3, #1
 8015bc0:	2300      	movne	r3, #0
 8015bc2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  // if absolute and doesn't have any substitution
  if (is_absolute && !has_a_substitution) {
 8015bc6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d021      	beq.n	8015c12 <rcl_expand_topic_name+0x13a>
 8015bce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015bd2:	f083 0301 	eor.w	r3, r3, #1
 8015bd6:	b2db      	uxtb	r3, r3
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d01a      	beq.n	8015c12 <rcl_expand_topic_name+0x13a>
    // nothing to do, duplicate and return
    *output_topic_name = rcutils_strdup(input_topic_name, allocator);
 8015bdc:	466a      	mov	r2, sp
 8015bde:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015be2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015be6:	e882 0003 	stmia.w	r2, {r0, r1}
 8015bea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015bee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015bf0:	68f8      	ldr	r0, [r7, #12]
 8015bf2:	f006 faa1 	bl	801c138 <rcutils_strdup>
 8015bf6:	4602      	mov	r2, r0
 8015bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015bfa:	601a      	str	r2, [r3, #0]
    if (!*output_topic_name) {
 8015bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d104      	bne.n	8015c0e <rcl_expand_topic_name+0x136>
      *output_topic_name = NULL;
 8015c04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015c06:	2200      	movs	r2, #0
 8015c08:	601a      	str	r2, [r3, #0]
      RCL_SET_ERROR_MSG("failed to allocate memory for output topic");
      return RCL_RET_BAD_ALLOC;
 8015c0a:	230a      	movs	r3, #10
 8015c0c:	e117      	b.n	8015e3e <rcl_expand_topic_name+0x366>
    }
    return RCL_RET_OK;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	e115      	b.n	8015e3e <rcl_expand_topic_name+0x366>
  }
  char * local_output = NULL;
 8015c12:	2300      	movs	r3, #0
 8015c14:	64fb      	str	r3, [r7, #76]	; 0x4c
  // if has_a_namespace_tilde, replace that first
  if (has_a_namespace_tilde) {
 8015c16:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d025      	beq.n	8015c6a <rcl_expand_topic_name+0x192>
    // special case where node_namespace is just '/'
    // then no additional separating '/' is needed
    const char * fmt = (strlen(node_namespace) == 1) ? "%s%s%s" : "%s/%s%s";
 8015c1e:	6878      	ldr	r0, [r7, #4]
 8015c20:	f7ea fb00 	bl	8000224 <strlen>
 8015c24:	4603      	mov	r3, r0
 8015c26:	2b01      	cmp	r3, #1
 8015c28:	d101      	bne.n	8015c2e <rcl_expand_topic_name+0x156>
 8015c2a:	4b87      	ldr	r3, [pc, #540]	; (8015e48 <rcl_expand_topic_name+0x370>)
 8015c2c:	e000      	b.n	8015c30 <rcl_expand_topic_name+0x158>
 8015c2e:	4b87      	ldr	r3, [pc, #540]	; (8015e4c <rcl_expand_topic_name+0x374>)
 8015c30:	637b      	str	r3, [r7, #52]	; 0x34
    local_output =
      rcutils_format_string(allocator, fmt, node_namespace, node_name, input_topic_name + 1);
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	3301      	adds	r3, #1
 8015c36:	9305      	str	r3, [sp, #20]
 8015c38:	68bb      	ldr	r3, [r7, #8]
 8015c3a:	9304      	str	r3, [sp, #16]
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	9303      	str	r3, [sp, #12]
 8015c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c42:	9302      	str	r3, [sp, #8]
 8015c44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015c48:	9301      	str	r3, [sp, #4]
 8015c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015c4c:	9300      	str	r3, [sp, #0]
 8015c4e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015c52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015c54:	f006 f8ac 	bl	801bdb0 <rcutils_format_string_limit>
 8015c58:	64f8      	str	r0, [r7, #76]	; 0x4c
    if (!local_output) {
 8015c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d104      	bne.n	8015c6a <rcl_expand_topic_name+0x192>
      *output_topic_name = NULL;
 8015c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015c62:	2200      	movs	r2, #0
 8015c64:	601a      	str	r2, [r3, #0]
      RCL_SET_ERROR_MSG("failed to allocate memory for output topic");
      return RCL_RET_BAD_ALLOC;
 8015c66:	230a      	movs	r3, #10
 8015c68:	e0e9      	b.n	8015e3e <rcl_expand_topic_name+0x366>
    }
  }
  // if it has any substitutions, replace those
  if (has_a_substitution) {
 8015c6a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	f000 80a1 	beq.w	8015db6 <rcl_expand_topic_name+0x2de>
    // - All {} are matched and balanced
    // - There is no nesting, i.e. {{}}
    // - There are no empty substitution substr, i.e. '{}' versus '{something}'
    //
    // These assumptions are taken because this is checked in the validation function.
    const char * current_output = (local_output) ? local_output : input_topic_name;
 8015c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d001      	beq.n	8015c7e <rcl_expand_topic_name+0x1a6>
 8015c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c7c:	e000      	b.n	8015c80 <rcl_expand_topic_name+0x1a8>
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	64bb      	str	r3, [r7, #72]	; 0x48
    char * next_opening_brace = NULL;
 8015c82:	2300      	movs	r3, #0
 8015c84:	633b      	str	r3, [r7, #48]	; 0x30
    // current_output may be replaced on each loop if a substitution is made
    while ((next_opening_brace = strchr(current_output, '{')) != NULL) {
 8015c86:	e08d      	b.n	8015da4 <rcl_expand_topic_name+0x2cc>
      char * next_closing_brace = strchr(current_output, '}');
 8015c88:	217d      	movs	r1, #125	; 0x7d
 8015c8a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015c8c:	f00c fa81 	bl	8022192 <strchr>
 8015c90:	62f8      	str	r0, [r7, #44]	; 0x2c
      // conclusion based on above assumptions: next_closing_brace - next_opening_brace > 1
      size_t substitution_substr_len = next_closing_brace - next_opening_brace + 1;
 8015c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c96:	1ad3      	subs	r3, r2, r3
 8015c98:	3301      	adds	r3, #1
 8015c9a:	62bb      	str	r3, [r7, #40]	; 0x28
      // figure out what the replacement is for this substitution
      const char * replacement = NULL;
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	647b      	str	r3, [r7, #68]	; 0x44
      if (strncmp(SUBSTITUION_NODE_NAME, next_opening_brace, substitution_substr_len) == 0) {
 8015ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ca2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015ca4:	486a      	ldr	r0, [pc, #424]	; (8015e50 <rcl_expand_topic_name+0x378>)
 8015ca6:	f00c fa89 	bl	80221bc <strncmp>
 8015caa:	4603      	mov	r3, r0
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d102      	bne.n	8015cb6 <rcl_expand_topic_name+0x1de>
        replacement = node_name;
 8015cb0:	68bb      	ldr	r3, [r7, #8]
 8015cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8015cb4:	e03c      	b.n	8015d30 <rcl_expand_topic_name+0x258>
      } else if (  // NOLINT
        strncmp(SUBSTITUION_NAMESPACE, next_opening_brace, substitution_substr_len) == 0 ||
 8015cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015cba:	4866      	ldr	r0, [pc, #408]	; (8015e54 <rcl_expand_topic_name+0x37c>)
 8015cbc:	f00c fa7e 	bl	80221bc <strncmp>
 8015cc0:	4603      	mov	r3, r0
      } else if (  // NOLINT
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d007      	beq.n	8015cd6 <rcl_expand_topic_name+0x1fe>
        strncmp(SUBSTITUION_NAMESPACE2, next_opening_brace, substitution_substr_len) == 0)
 8015cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015cc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015cca:	4863      	ldr	r0, [pc, #396]	; (8015e58 <rcl_expand_topic_name+0x380>)
 8015ccc:	f00c fa76 	bl	80221bc <strncmp>
 8015cd0:	4603      	mov	r3, r0
        strncmp(SUBSTITUION_NAMESPACE, next_opening_brace, substitution_substr_len) == 0 ||
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d102      	bne.n	8015cdc <rcl_expand_topic_name+0x204>
      {
        replacement = node_namespace;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8015cda:	e029      	b.n	8015d30 <rcl_expand_topic_name+0x258>
      } else {
        replacement = rcutils_string_map_getn(
          substitutions,
          // compare {substitution}
          //          ^ until    ^
          next_opening_brace + 1, substitution_substr_len - 2);
 8015cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cde:	1c59      	adds	r1, r3, #1
        replacement = rcutils_string_map_getn(
 8015ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce2:	3b02      	subs	r3, #2
 8015ce4:	461a      	mov	r2, r3
 8015ce6:	6838      	ldr	r0, [r7, #0]
 8015ce8:	f006 fc75 	bl	801c5d6 <rcutils_string_map_getn>
 8015cec:	6478      	str	r0, [r7, #68]	; 0x44
        if (!replacement) {
 8015cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d11d      	bne.n	8015d30 <rcl_expand_topic_name+0x258>
          // in this case, it is neither node name nor ns nor in the substitutions map, so error
          *output_topic_name = NULL;
 8015cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	601a      	str	r2, [r3, #0]
          char * unmatched_substitution =
            rcutils_strndup(next_opening_brace, substitution_substr_len, allocator);
 8015cfa:	466c      	mov	r4, sp
 8015cfc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015d00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015d04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015d08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015d0c:	cb0c      	ldmia	r3, {r2, r3}
 8015d0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d12:	f006 fa39 	bl	801c188 <rcutils_strndup>
 8015d16:	6278      	str	r0, [r7, #36]	; 0x24
            RCL_SET_ERROR_MSG_WITH_FORMAT_STRING(
              "unknown substitution: %s", unmatched_substitution);
          } else {
            RCUTILS_SAFE_FWRITE_TO_STDERR("failed to allocate memory for unmatched substitution\n");
          }
          allocator.deallocate(unmatched_substitution, allocator.state);
 8015d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015d1c:	4611      	mov	r1, r2
 8015d1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d20:	4798      	blx	r3
          allocator.deallocate(local_output, allocator.state);
 8015d22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d24:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015d26:	4611      	mov	r1, r2
 8015d28:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015d2a:	4798      	blx	r3
          return RCL_RET_UNKNOWN_SUBSTITUTION;
 8015d2c:	2369      	movs	r3, #105	; 0x69
 8015d2e:	e086      	b.n	8015e3e <rcl_expand_topic_name+0x366>
        }
      }
      // at this point replacement will be set or an error would have returned out
      // do the replacement
      char * next_substitution =
        rcutils_strndup(next_opening_brace, substitution_substr_len, allocator);
 8015d30:	466c      	mov	r4, sp
 8015d32:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015d36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015d3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015d3e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015d42:	cb0c      	ldmia	r3, {r2, r3}
 8015d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015d46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d48:	f006 fa1e 	bl	801c188 <rcutils_strndup>
 8015d4c:	6238      	str	r0, [r7, #32]
      if (!next_substitution) {
 8015d4e:	6a3b      	ldr	r3, [r7, #32]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d109      	bne.n	8015d68 <rcl_expand_topic_name+0x290>
        *output_topic_name = NULL;
 8015d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015d56:	2200      	movs	r2, #0
 8015d58:	601a      	str	r2, [r3, #0]
        RCL_SET_ERROR_MSG("failed to allocate memory for substitution");
        allocator.deallocate(local_output, allocator.state);
 8015d5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d5c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015d5e:	4611      	mov	r1, r2
 8015d60:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015d62:	4798      	blx	r3
        return RCL_RET_BAD_ALLOC;
 8015d64:	230a      	movs	r3, #10
 8015d66:	e06a      	b.n	8015e3e <rcl_expand_topic_name+0x366>
      }
      char * original_local_output = local_output;
 8015d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d6a:	61fb      	str	r3, [r7, #28]
      local_output = rcutils_repl_str(current_output, next_substitution, replacement, &allocator);
 8015d6c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d72:	6a39      	ldr	r1, [r7, #32]
 8015d74:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015d76:	f006 f8a3 	bl	801bec0 <rcutils_repl_str>
 8015d7a:	64f8      	str	r0, [r7, #76]	; 0x4c
      allocator.deallocate(next_substitution, allocator.state);  // free no matter what
 8015d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015d80:	4611      	mov	r1, r2
 8015d82:	6a38      	ldr	r0, [r7, #32]
 8015d84:	4798      	blx	r3
      allocator.deallocate(original_local_output, allocator.state);  // free no matter what
 8015d86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d88:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015d8a:	4611      	mov	r1, r2
 8015d8c:	69f8      	ldr	r0, [r7, #28]
 8015d8e:	4798      	blx	r3
      if (!local_output) {
 8015d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d104      	bne.n	8015da0 <rcl_expand_topic_name+0x2c8>
        *output_topic_name = NULL;
 8015d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015d98:	2200      	movs	r2, #0
 8015d9a:	601a      	str	r2, [r3, #0]
        RCL_SET_ERROR_MSG("failed to allocate memory for expanded topic");
        return RCL_RET_BAD_ALLOC;
 8015d9c:	230a      	movs	r3, #10
 8015d9e:	e04e      	b.n	8015e3e <rcl_expand_topic_name+0x366>
      }
      current_output = local_output;
 8015da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015da2:	64bb      	str	r3, [r7, #72]	; 0x48
    while ((next_opening_brace = strchr(current_output, '{')) != NULL) {
 8015da4:	217b      	movs	r1, #123	; 0x7b
 8015da6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015da8:	f00c f9f3 	bl	8022192 <strchr>
 8015dac:	6338      	str	r0, [r7, #48]	; 0x30
 8015dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	f47f af69 	bne.w	8015c88 <rcl_expand_topic_name+0x1b0>
      // loop until all substitutions are replaced
    }  // while
  }
  // finally make the name absolute if it isn't already
  if (
 8015db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d003      	beq.n	8015dc4 <rcl_expand_topic_name+0x2ec>
    (local_output && local_output[0] != '/') ||
 8015dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dbe:	781b      	ldrb	r3, [r3, #0]
 8015dc0:	2b2f      	cmp	r3, #47	; 0x2f
 8015dc2:	d106      	bne.n	8015dd2 <rcl_expand_topic_name+0x2fa>
 8015dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d135      	bne.n	8015e36 <rcl_expand_topic_name+0x35e>
    (!local_output && input_topic_name[0] != '/'))
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	781b      	ldrb	r3, [r3, #0]
 8015dce:	2b2f      	cmp	r3, #47	; 0x2f
 8015dd0:	d031      	beq.n	8015e36 <rcl_expand_topic_name+0x35e>
  {
    char * original_local_output = local_output;
 8015dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dd4:	61bb      	str	r3, [r7, #24]
    // special case where node_namespace is just '/'
    // then no additional separating '/' is needed
    const char * fmt = (strlen(node_namespace) == 1) ? "%s%s" : "%s/%s";
 8015dd6:	6878      	ldr	r0, [r7, #4]
 8015dd8:	f7ea fa24 	bl	8000224 <strlen>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	2b01      	cmp	r3, #1
 8015de0:	d101      	bne.n	8015de6 <rcl_expand_topic_name+0x30e>
 8015de2:	4b1e      	ldr	r3, [pc, #120]	; (8015e5c <rcl_expand_topic_name+0x384>)
 8015de4:	e000      	b.n	8015de8 <rcl_expand_topic_name+0x310>
 8015de6:	4b1e      	ldr	r3, [pc, #120]	; (8015e60 <rcl_expand_topic_name+0x388>)
 8015de8:	617b      	str	r3, [r7, #20]
    local_output = rcutils_format_string(
 8015dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d001      	beq.n	8015df4 <rcl_expand_topic_name+0x31c>
 8015df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015df2:	e000      	b.n	8015df6 <rcl_expand_topic_name+0x31e>
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	9304      	str	r3, [sp, #16]
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	9303      	str	r3, [sp, #12]
 8015dfc:	697b      	ldr	r3, [r7, #20]
 8015dfe:	9302      	str	r3, [sp, #8]
 8015e00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015e04:	9301      	str	r3, [sp, #4]
 8015e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015e08:	9300      	str	r3, [sp, #0]
 8015e0a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015e0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015e10:	f005 ffce 	bl	801bdb0 <rcutils_format_string_limit>
 8015e14:	64f8      	str	r0, [r7, #76]	; 0x4c
      allocator, fmt, node_namespace, (local_output) ? local_output : input_topic_name);
    if (original_local_output) {
 8015e16:	69bb      	ldr	r3, [r7, #24]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d004      	beq.n	8015e26 <rcl_expand_topic_name+0x34e>
      allocator.deallocate(original_local_output, allocator.state);
 8015e1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015e1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015e20:	4611      	mov	r1, r2
 8015e22:	69b8      	ldr	r0, [r7, #24]
 8015e24:	4798      	blx	r3
    }
    if (!local_output) {
 8015e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d104      	bne.n	8015e36 <rcl_expand_topic_name+0x35e>
      *output_topic_name = NULL;
 8015e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015e2e:	2200      	movs	r2, #0
 8015e30:	601a      	str	r2, [r3, #0]
      RCL_SET_ERROR_MSG("failed to allocate memory for output topic");
      return RCL_RET_BAD_ALLOC;
 8015e32:	230a      	movs	r3, #10
 8015e34:	e003      	b.n	8015e3e <rcl_expand_topic_name+0x366>
    }
  }
  // finally store the result in the out pointer and return
  *output_topic_name = local_output;
 8015e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015e3a:	601a      	str	r2, [r3, #0]
  return RCL_RET_OK;
 8015e3c:	2300      	movs	r3, #0
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	3754      	adds	r7, #84	; 0x54
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bd90      	pop	{r4, r7, pc}
 8015e46:	bf00      	nop
 8015e48:	08025960 	.word	0x08025960
 8015e4c:	08025968 	.word	0x08025968
 8015e50:	08025970 	.word	0x08025970
 8015e54:	08025978 	.word	0x08025978
 8015e58:	08025980 	.word	0x08025980
 8015e5c:	0802598c 	.word	0x0802598c
 8015e60:	08025994 	.word	0x08025994

08015e64 <rcl_get_default_topic_name_substitutions>:

rcl_ret_t
rcl_get_default_topic_name_substitutions(rcutils_string_map_t * string_map)
{
 8015e64:	b480      	push	{r7}
 8015e66:	b083      	sub	sp, #12
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
  RCL_CHECK_ARGUMENT_FOR_NULL(string_map, RCL_RET_INVALID_ARGUMENT);
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d101      	bne.n	8015e76 <rcl_get_default_topic_name_substitutions+0x12>
 8015e72:	230b      	movs	r3, #11
 8015e74:	e000      	b.n	8015e78 <rcl_get_default_topic_name_substitutions+0x14>

  // right now there are no default substitutions

  return RCL_RET_OK;
 8015e76:	2300      	movs	r3, #0
}
 8015e78:	4618      	mov	r0, r3
 8015e7a:	370c      	adds	r7, #12
 8015e7c:	46bd      	mov	sp, r7
 8015e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e82:	4770      	bx	lr

08015e84 <rcl_get_zero_initialized_guard_condition>:
  rcl_guard_condition_options_t options;
} rcl_guard_condition_impl_t;

rcl_guard_condition_t
rcl_get_zero_initialized_guard_condition()
{
 8015e84:	b480      	push	{r7}
 8015e86:	b083      	sub	sp, #12
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
  static rcl_guard_condition_t null_guard_condition = {
    .context = 0,
    .impl = 0
  };
  return null_guard_condition;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	4a05      	ldr	r2, [pc, #20]	; (8015ea4 <rcl_get_zero_initialized_guard_condition+0x20>)
 8015e90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e94:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8015e98:	6878      	ldr	r0, [r7, #4]
 8015e9a:	370c      	adds	r7, #12
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea2:	4770      	bx	lr
 8015ea4:	2000e4e8 	.word	0x2000e4e8

08015ea8 <__rcl_guard_condition_init_from_rmw_impl>:
__rcl_guard_condition_init_from_rmw_impl(
  rcl_guard_condition_t * guard_condition,
  const rmw_guard_condition_t * rmw_guard_condition,
  rcl_context_t * context,
  const rcl_guard_condition_options_t options)
{
 8015ea8:	b082      	sub	sp, #8
 8015eaa:	b5b0      	push	{r4, r5, r7, lr}
 8015eac:	b086      	sub	sp, #24
 8015eae:	af00      	add	r7, sp, #0
 8015eb0:	60f8      	str	r0, [r7, #12]
 8015eb2:	60b9      	str	r1, [r7, #8]
 8015eb4:	607a      	str	r2, [r7, #4]
 8015eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  // This function will create an rmw_guard_condition if the parameter is null.

  // Perform argument validation.
  const rcl_allocator_t * allocator = &options.allocator;
 8015eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015ebc:	617b      	str	r3, [r7, #20]
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 8015ebe:	6978      	ldr	r0, [r7, #20]
 8015ec0:	f005 fc54 	bl	801b76c <rcutils_allocator_is_valid>
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	f083 0301 	eor.w	r3, r3, #1
 8015eca:	b2db      	uxtb	r3, r3
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d001      	beq.n	8015ed4 <__rcl_guard_condition_init_from_rmw_impl+0x2c>
 8015ed0:	230b      	movs	r3, #11
 8015ed2:	e062      	b.n	8015f9a <__rcl_guard_condition_init_from_rmw_impl+0xf2>
  RCL_CHECK_ARGUMENT_FOR_NULL(guard_condition, RCL_RET_INVALID_ARGUMENT);
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d101      	bne.n	8015ede <__rcl_guard_condition_init_from_rmw_impl+0x36>
 8015eda:	230b      	movs	r3, #11
 8015edc:	e05d      	b.n	8015f9a <__rcl_guard_condition_init_from_rmw_impl+0xf2>
  // Ensure the guard_condition handle is zero initialized.
  if (guard_condition->impl) {
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	685b      	ldr	r3, [r3, #4]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d001      	beq.n	8015eea <__rcl_guard_condition_init_from_rmw_impl+0x42>
    RCL_SET_ERROR_MSG("guard_condition already initialized, or memory was unintialized");
    return RCL_RET_ALREADY_INIT;
 8015ee6:	2364      	movs	r3, #100	; 0x64
 8015ee8:	e057      	b.n	8015f9a <__rcl_guard_condition_init_from_rmw_impl+0xf2>
  }
  // Make sure rcl has been initialized.
  RCL_CHECK_ARGUMENT_FOR_NULL(context, RCL_RET_INVALID_ARGUMENT);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d101      	bne.n	8015ef4 <__rcl_guard_condition_init_from_rmw_impl+0x4c>
 8015ef0:	230b      	movs	r3, #11
 8015ef2:	e052      	b.n	8015f9a <__rcl_guard_condition_init_from_rmw_impl+0xf2>
  if (!rcl_context_is_valid(context)) {
 8015ef4:	6878      	ldr	r0, [r7, #4]
 8015ef6:	f7ff fcf1 	bl	80158dc <rcl_context_is_valid>
 8015efa:	4603      	mov	r3, r0
 8015efc:	f083 0301 	eor.w	r3, r3, #1
 8015f00:	b2db      	uxtb	r3, r3
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d001      	beq.n	8015f0a <__rcl_guard_condition_init_from_rmw_impl+0x62>
    RCL_SET_ERROR_MSG(
      "the given context is not valid, "
      "either rcl_init() was not called or rcl_shutdown() was called.");
    return RCL_RET_NOT_INIT;
 8015f06:	2365      	movs	r3, #101	; 0x65
 8015f08:	e047      	b.n	8015f9a <__rcl_guard_condition_init_from_rmw_impl+0xf2>
  }
  // Allocate space for the guard condition impl.
  guard_condition->impl = (rcl_guard_condition_impl_t *)allocator->allocate(
 8015f0a:	697b      	ldr	r3, [r7, #20]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	697a      	ldr	r2, [r7, #20]
 8015f10:	6912      	ldr	r2, [r2, #16]
 8015f12:	4611      	mov	r1, r2
 8015f14:	201c      	movs	r0, #28
 8015f16:	4798      	blx	r3
 8015f18:	4602      	mov	r2, r0
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	605a      	str	r2, [r3, #4]
    sizeof(rcl_guard_condition_impl_t), allocator->state);
  if (!guard_condition->impl) {
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	685b      	ldr	r3, [r3, #4]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d101      	bne.n	8015f2a <__rcl_guard_condition_init_from_rmw_impl+0x82>
    RCL_SET_ERROR_MSG("allocating memory failed");
    return RCL_RET_BAD_ALLOC;
 8015f26:	230a      	movs	r3, #10
 8015f28:	e037      	b.n	8015f9a <__rcl_guard_condition_init_from_rmw_impl+0xf2>
  }
  // Create the rmw guard condition.
  if (rmw_guard_condition) {
 8015f2a:	68bb      	ldr	r3, [r7, #8]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d008      	beq.n	8015f42 <__rcl_guard_condition_init_from_rmw_impl+0x9a>
    // If given, just assign (cast away const).
    guard_condition->impl->rmw_handle = (rmw_guard_condition_t *)rmw_guard_condition;
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	685b      	ldr	r3, [r3, #4]
 8015f34:	68ba      	ldr	r2, [r7, #8]
 8015f36:	601a      	str	r2, [r3, #0]
    guard_condition->impl->allocated_rmw_guard_condition = false;
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	685b      	ldr	r3, [r3, #4]
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	711a      	strb	r2, [r3, #4]
 8015f40:	e020      	b.n	8015f84 <__rcl_guard_condition_init_from_rmw_impl+0xdc>
  } else {
    // Otherwise create one.
    guard_condition->impl->rmw_handle = rmw_create_guard_condition(&(context->impl->rmw_context));
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	685c      	ldr	r4, [r3, #4]
 8015f4e:	4610      	mov	r0, r2
 8015f50:	f007 fbc6 	bl	801d6e0 <rmw_create_guard_condition>
 8015f54:	4603      	mov	r3, r0
 8015f56:	6023      	str	r3, [r4, #0]
    if (!guard_condition->impl->rmw_handle) {
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	685b      	ldr	r3, [r3, #4]
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d10c      	bne.n	8015f7c <__rcl_guard_condition_init_from_rmw_impl+0xd4>
      // Deallocate impl and exit.
      allocator->deallocate(guard_condition->impl, allocator->state);
 8015f62:	697b      	ldr	r3, [r7, #20]
 8015f64:	685b      	ldr	r3, [r3, #4]
 8015f66:	68fa      	ldr	r2, [r7, #12]
 8015f68:	6850      	ldr	r0, [r2, #4]
 8015f6a:	697a      	ldr	r2, [r7, #20]
 8015f6c:	6912      	ldr	r2, [r2, #16]
 8015f6e:	4611      	mov	r1, r2
 8015f70:	4798      	blx	r3
      guard_condition->impl = NULL;
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	2200      	movs	r2, #0
 8015f76:	605a      	str	r2, [r3, #4]
      RCL_SET_ERROR_MSG(rmw_get_error_string().str);
      return RCL_RET_ERROR;
 8015f78:	2301      	movs	r3, #1
 8015f7a:	e00e      	b.n	8015f9a <__rcl_guard_condition_init_from_rmw_impl+0xf2>
    }
    guard_condition->impl->allocated_rmw_guard_condition = true;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	685b      	ldr	r3, [r3, #4]
 8015f80:	2201      	movs	r2, #1
 8015f82:	711a      	strb	r2, [r3, #4]
  }
  // Copy options into impl.
  guard_condition->impl->options = options;
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	685b      	ldr	r3, [r3, #4]
 8015f88:	f103 0408 	add.w	r4, r3, #8
 8015f8c:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8015f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015f94:	682b      	ldr	r3, [r5, #0]
 8015f96:	6023      	str	r3, [r4, #0]
  return RCL_RET_OK;
 8015f98:	2300      	movs	r3, #0
}
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	3718      	adds	r7, #24
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8015fa4:	b002      	add	sp, #8
 8015fa6:	4770      	bx	lr

08015fa8 <rcl_guard_condition_init>:
rcl_ret_t
rcl_guard_condition_init(
  rcl_guard_condition_t * guard_condition,
  rcl_context_t * context,
  const rcl_guard_condition_options_t options)
{
 8015fa8:	b082      	sub	sp, #8
 8015faa:	b590      	push	{r4, r7, lr}
 8015fac:	b087      	sub	sp, #28
 8015fae:	af04      	add	r7, sp, #16
 8015fb0:	6078      	str	r0, [r7, #4]
 8015fb2:	6039      	str	r1, [r7, #0]
 8015fb4:	f107 0118 	add.w	r1, r7, #24
 8015fb8:	e881 000c 	stmia.w	r1, {r2, r3}
  // NULL indicates "create a new rmw guard condition".
  return __rcl_guard_condition_init_from_rmw_impl(guard_condition, NULL, context, options);
 8015fbc:	466c      	mov	r4, sp
 8015fbe:	f107 031c 	add.w	r3, r7, #28
 8015fc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015fc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015fc8:	69bb      	ldr	r3, [r7, #24]
 8015fca:	683a      	ldr	r2, [r7, #0]
 8015fcc:	2100      	movs	r1, #0
 8015fce:	6878      	ldr	r0, [r7, #4]
 8015fd0:	f7ff ff6a 	bl	8015ea8 <__rcl_guard_condition_init_from_rmw_impl>
 8015fd4:	4603      	mov	r3, r0
}
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	370c      	adds	r7, #12
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8015fe0:	b002      	add	sp, #8
 8015fe2:	4770      	bx	lr

08015fe4 <rcl_guard_condition_init_from_rmw>:
rcl_guard_condition_init_from_rmw(
  rcl_guard_condition_t * guard_condition,
  const rmw_guard_condition_t * rmw_guard_condition,
  rcl_context_t * context,
  const rcl_guard_condition_options_t options)
{
 8015fe4:	b082      	sub	sp, #8
 8015fe6:	b590      	push	{r4, r7, lr}
 8015fe8:	b089      	sub	sp, #36	; 0x24
 8015fea:	af04      	add	r7, sp, #16
 8015fec:	60f8      	str	r0, [r7, #12]
 8015fee:	60b9      	str	r1, [r7, #8]
 8015ff0:	607a      	str	r2, [r7, #4]
 8015ff2:	627b      	str	r3, [r7, #36]	; 0x24
  return __rcl_guard_condition_init_from_rmw_impl(
 8015ff4:	466c      	mov	r4, sp
 8015ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016002:	687a      	ldr	r2, [r7, #4]
 8016004:	68b9      	ldr	r1, [r7, #8]
 8016006:	68f8      	ldr	r0, [r7, #12]
 8016008:	f7ff ff4e 	bl	8015ea8 <__rcl_guard_condition_init_from_rmw_impl>
 801600c:	4603      	mov	r3, r0
    guard_condition, rmw_guard_condition, context, options);
}
 801600e:	4618      	mov	r0, r3
 8016010:	3714      	adds	r7, #20
 8016012:	46bd      	mov	sp, r7
 8016014:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8016018:	b002      	add	sp, #8
 801601a:	4770      	bx	lr

0801601c <rcl_guard_condition_fini>:

rcl_ret_t
rcl_guard_condition_fini(rcl_guard_condition_t * guard_condition)
{
 801601c:	b5b0      	push	{r4, r5, r7, lr}
 801601e:	b088      	sub	sp, #32
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]
  // Perform argument validation.
  RCL_CHECK_ARGUMENT_FOR_NULL(guard_condition, RCL_RET_INVALID_ARGUMENT);
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d101      	bne.n	801602e <rcl_guard_condition_fini+0x12>
 801602a:	230b      	movs	r3, #11
 801602c:	e02e      	b.n	801608c <rcl_guard_condition_fini+0x70>
  rcl_ret_t result = RCL_RET_OK;
 801602e:	2300      	movs	r3, #0
 8016030:	61fb      	str	r3, [r7, #28]
  if (guard_condition->impl) {
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	685b      	ldr	r3, [r3, #4]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d027      	beq.n	801608a <rcl_guard_condition_fini+0x6e>
    // assuming the allocator is valid because it is checked in rcl_guard_condition_init()
    rcl_allocator_t allocator = guard_condition->impl->options.allocator;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	685b      	ldr	r3, [r3, #4]
 801603e:	f107 0408 	add.w	r4, r7, #8
 8016042:	f103 0508 	add.w	r5, r3, #8
 8016046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801604a:	682b      	ldr	r3, [r5, #0]
 801604c:	6023      	str	r3, [r4, #0]
    if (guard_condition->impl->rmw_handle && guard_condition->impl->allocated_rmw_guard_condition) {
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	685b      	ldr	r3, [r3, #4]
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d00f      	beq.n	8016078 <rcl_guard_condition_fini+0x5c>
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	685b      	ldr	r3, [r3, #4]
 801605c:	791b      	ldrb	r3, [r3, #4]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d00a      	beq.n	8016078 <rcl_guard_condition_fini+0x5c>
      if (rmw_destroy_guard_condition(guard_condition->impl->rmw_handle) != RMW_RET_OK) {
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	685b      	ldr	r3, [r3, #4]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	4618      	mov	r0, r3
 801606a:	f007 fb5f 	bl	801d72c <rmw_destroy_guard_condition>
 801606e:	4603      	mov	r3, r0
 8016070:	2b00      	cmp	r3, #0
 8016072:	d001      	beq.n	8016078 <rcl_guard_condition_fini+0x5c>
        RCL_SET_ERROR_MSG(rmw_get_error_string().str);
        result = RCL_RET_ERROR;
 8016074:	2301      	movs	r3, #1
 8016076:	61fb      	str	r3, [r7, #28]
      }
    }
    allocator.deallocate(guard_condition->impl, allocator.state);
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	687a      	ldr	r2, [r7, #4]
 801607c:	6852      	ldr	r2, [r2, #4]
 801607e:	69b9      	ldr	r1, [r7, #24]
 8016080:	4610      	mov	r0, r2
 8016082:	4798      	blx	r3
    guard_condition->impl = NULL;
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	2200      	movs	r2, #0
 8016088:	605a      	str	r2, [r3, #4]
  }
  return result;
 801608a:	69fb      	ldr	r3, [r7, #28]
}
 801608c:	4618      	mov	r0, r3
 801608e:	3720      	adds	r7, #32
 8016090:	46bd      	mov	sp, r7
 8016092:	bdb0      	pop	{r4, r5, r7, pc}

08016094 <rcl_guard_condition_get_default_options>:

rcl_guard_condition_options_t
rcl_guard_condition_get_default_options()
{
 8016094:	b5b0      	push	{r4, r5, r7, lr}
 8016096:	b088      	sub	sp, #32
 8016098:	af00      	add	r7, sp, #0
 801609a:	61f8      	str	r0, [r7, #28]
  // !!! MAKE SURE THAT CHANGES TO THESE DEFAULTS ARE REFLECTED IN THE HEADER DOC STRING
  static rcl_guard_condition_options_t default_options;
  default_options.allocator = rcl_get_default_allocator();
 801609c:	4c0b      	ldr	r4, [pc, #44]	; (80160cc <rcl_guard_condition_get_default_options+0x38>)
 801609e:	463b      	mov	r3, r7
 80160a0:	4618      	mov	r0, r3
 80160a2:	f005 fb4f 	bl	801b744 <rcutils_get_default_allocator>
 80160a6:	4625      	mov	r5, r4
 80160a8:	463c      	mov	r4, r7
 80160aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80160ae:	6823      	ldr	r3, [r4, #0]
 80160b0:	602b      	str	r3, [r5, #0]
  return default_options;
 80160b2:	69fb      	ldr	r3, [r7, #28]
 80160b4:	4a05      	ldr	r2, [pc, #20]	; (80160cc <rcl_guard_condition_get_default_options+0x38>)
 80160b6:	461c      	mov	r4, r3
 80160b8:	4615      	mov	r5, r2
 80160ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80160bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80160be:	682b      	ldr	r3, [r5, #0]
 80160c0:	6023      	str	r3, [r4, #0]
}
 80160c2:	69f8      	ldr	r0, [r7, #28]
 80160c4:	3720      	adds	r7, #32
 80160c6:	46bd      	mov	sp, r7
 80160c8:	bdb0      	pop	{r4, r5, r7, pc}
 80160ca:	bf00      	nop
 80160cc:	2000e4f0 	.word	0x2000e4f0

080160d0 <rcl_trigger_guard_condition>:

rcl_ret_t
rcl_trigger_guard_condition(rcl_guard_condition_t * guard_condition)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b084      	sub	sp, #16
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
  const rcl_guard_condition_options_t * options = rcl_guard_condition_get_options(guard_condition);
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	f000 f816 	bl	801610a <rcl_guard_condition_get_options>
 80160de:	60f8      	str	r0, [r7, #12]
  if (!options) {
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d101      	bne.n	80160ea <rcl_trigger_guard_condition+0x1a>
    return RCL_RET_INVALID_ARGUMENT;  // error already set
 80160e6:	230b      	movs	r3, #11
 80160e8:	e00b      	b.n	8016102 <rcl_trigger_guard_condition+0x32>
  }
  // Trigger the guard condition.
  if (rmw_trigger_guard_condition(guard_condition->impl->rmw_handle) != RMW_RET_OK) {
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	685b      	ldr	r3, [r3, #4]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	4618      	mov	r0, r3
 80160f2:	f009 f8e3 	bl	801f2bc <rmw_trigger_guard_condition>
 80160f6:	4603      	mov	r3, r0
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d001      	beq.n	8016100 <rcl_trigger_guard_condition+0x30>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    return RCL_RET_ERROR;
 80160fc:	2301      	movs	r3, #1
 80160fe:	e000      	b.n	8016102 <rcl_trigger_guard_condition+0x32>
  }
  return RCL_RET_OK;
 8016100:	2300      	movs	r3, #0
}
 8016102:	4618      	mov	r0, r3
 8016104:	3710      	adds	r7, #16
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}

0801610a <rcl_guard_condition_get_options>:

const rcl_guard_condition_options_t *
rcl_guard_condition_get_options(const rcl_guard_condition_t * guard_condition)
{
 801610a:	b480      	push	{r7}
 801610c:	b083      	sub	sp, #12
 801610e:	af00      	add	r7, sp, #0
 8016110:	6078      	str	r0, [r7, #4]
  // Perform argument validation.
  RCL_CHECK_ARGUMENT_FOR_NULL(guard_condition, NULL);
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d101      	bne.n	801611c <rcl_guard_condition_get_options+0x12>
 8016118:	2300      	movs	r3, #0
 801611a:	e008      	b.n	801612e <rcl_guard_condition_get_options+0x24>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	685b      	ldr	r3, [r3, #4]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d101      	bne.n	8016128 <rcl_guard_condition_get_options+0x1e>
 8016124:	2300      	movs	r3, #0
 8016126:	e002      	b.n	801612e <rcl_guard_condition_get_options+0x24>
    guard_condition->impl,
    "guard condition implementation is invalid",
    return NULL);
  return &guard_condition->impl->options;
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	685b      	ldr	r3, [r3, #4]
 801612c:	3308      	adds	r3, #8
}
 801612e:	4618      	mov	r0, r3
 8016130:	370c      	adds	r7, #12
 8016132:	46bd      	mov	sp, r7
 8016134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016138:	4770      	bx	lr

0801613a <rcl_guard_condition_get_rmw_handle>:

rmw_guard_condition_t *
rcl_guard_condition_get_rmw_handle(const rcl_guard_condition_t * guard_condition)
{
 801613a:	b580      	push	{r7, lr}
 801613c:	b084      	sub	sp, #16
 801613e:	af00      	add	r7, sp, #0
 8016140:	6078      	str	r0, [r7, #4]
  const rcl_guard_condition_options_t * options = rcl_guard_condition_get_options(guard_condition);
 8016142:	6878      	ldr	r0, [r7, #4]
 8016144:	f7ff ffe1 	bl	801610a <rcl_guard_condition_get_options>
 8016148:	60f8      	str	r0, [r7, #12]
  if (!options) {
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d101      	bne.n	8016154 <rcl_guard_condition_get_rmw_handle+0x1a>
    return NULL;  // error already set
 8016150:	2300      	movs	r3, #0
 8016152:	e002      	b.n	801615a <rcl_guard_condition_get_rmw_handle+0x20>
  }
  return guard_condition->impl->rmw_handle;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	685b      	ldr	r3, [r3, #4]
 8016158:	681b      	ldr	r3, [r3, #0]
}
 801615a:	4618      	mov	r0, r3
 801615c:	3710      	adds	r7, #16
 801615e:	46bd      	mov	sp, r7
 8016160:	bd80      	pop	{r7, pc}

08016162 <rcutils_atomic_fetch_add_uint64_t>:
  return result;
}

static inline uint64_t
rcutils_atomic_fetch_add_uint64_t(atomic_uint_least64_t * a_uint64_t, uint64_t arg)
{
 8016162:	b580      	push	{r7, lr}
 8016164:	b088      	sub	sp, #32
 8016166:	af02      	add	r7, sp, #8
 8016168:	60f8      	str	r0, [r7, #12]
 801616a:	e9c7 2300 	strd	r2, r3, [r7]
  uint64_t result;
  rcutils_atomic_fetch_add(a_uint64_t, result, arg);
 801616e:	68f9      	ldr	r1, [r7, #12]
 8016170:	2305      	movs	r3, #5
 8016172:	9300      	str	r3, [sp, #0]
 8016174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016178:	4608      	mov	r0, r1
 801617a:	f005 fbc9 	bl	801b910 <__atomic_fetch_add_8>
 801617e:	4602      	mov	r2, r0
 8016180:	460b      	mov	r3, r1
 8016182:	e9c7 2304 	strd	r2, r3, [r7, #16]
  return result;
 8016186:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 801618a:	4610      	mov	r0, r2
 801618c:	4619      	mov	r1, r3
 801618e:	3718      	adds	r7, #24
 8016190:	46bd      	mov	sp, r7
 8016192:	bd80      	pop	{r7, pc}

08016194 <rcl_init>:
rcl_init(
  int argc,
  char const * const * argv,
  const rcl_init_options_t * options,
  rcl_context_t * context)
{
 8016194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016198:	b0b0      	sub	sp, #192	; 0xc0
 801619a:	af02      	add	r7, sp, #8
 801619c:	6678      	str	r0, [r7, #100]	; 0x64
 801619e:	6639      	str	r1, [r7, #96]	; 0x60
 80161a0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80161a2:	65bb      	str	r3, [r7, #88]	; 0x58
  rcl_ret_t fail_ret = RCL_RET_ERROR;
 80161a4:	2301      	movs	r3, #1
 80161a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  if (argc > 0) {
 80161aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	dd1d      	ble.n	80161ec <rcl_init+0x58>
    RCL_CHECK_ARGUMENT_FOR_NULL(argv, RCL_RET_INVALID_ARGUMENT);
 80161b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d101      	bne.n	80161ba <rcl_init+0x26>
 80161b6:	230b      	movs	r3, #11
 80161b8:	e1c1      	b.n	801653e <rcl_init+0x3aa>
    for (int i = 0; i < argc; ++i) {
 80161ba:	2300      	movs	r3, #0
 80161bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80161c0:	e00e      	b.n	80161e0 <rcl_init+0x4c>
      RCL_CHECK_ARGUMENT_FOR_NULL(argv[i], RCL_RET_INVALID_ARGUMENT);
 80161c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80161c6:	009b      	lsls	r3, r3, #2
 80161c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80161ca:	4413      	add	r3, r2
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d101      	bne.n	80161d6 <rcl_init+0x42>
 80161d2:	230b      	movs	r3, #11
 80161d4:	e1b3      	b.n	801653e <rcl_init+0x3aa>
    for (int i = 0; i < argc; ++i) {
 80161d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80161da:	3301      	adds	r3, #1
 80161dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80161e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80161e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80161e6:	429a      	cmp	r2, r3
 80161e8:	dbeb      	blt.n	80161c2 <rcl_init+0x2e>
 80161ea:	e004      	b.n	80161f6 <rcl_init+0x62>
    }
  } else {
    if (NULL != argv) {
 80161ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d001      	beq.n	80161f6 <rcl_init+0x62>
      RCL_SET_ERROR_MSG("argc is <= 0, but argv is not NULL");
      return RCL_RET_INVALID_ARGUMENT;
 80161f2:	230b      	movs	r3, #11
 80161f4:	e1a3      	b.n	801653e <rcl_init+0x3aa>
    }
  }
  RCL_CHECK_ARGUMENT_FOR_NULL(options, RCL_RET_INVALID_ARGUMENT);
 80161f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d101      	bne.n	8016200 <rcl_init+0x6c>
 80161fc:	230b      	movs	r3, #11
 80161fe:	e19e      	b.n	801653e <rcl_init+0x3aa>
  RCL_CHECK_ARGUMENT_FOR_NULL(options->impl, RCL_RET_INVALID_ARGUMENT);
 8016200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d101      	bne.n	801620c <rcl_init+0x78>
 8016208:	230b      	movs	r3, #11
 801620a:	e198      	b.n	801653e <rcl_init+0x3aa>
  rcl_allocator_t allocator = options->impl->allocator;
 801620c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8016214:	461d      	mov	r5, r3
 8016216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801621a:	682b      	ldr	r3, [r5, #0]
 801621c:	6023      	str	r3, [r4, #0]
  RCL_CHECK_ALLOCATOR(&allocator, return RCL_RET_INVALID_ARGUMENT);
 801621e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8016222:	4618      	mov	r0, r3
 8016224:	f005 faa2 	bl	801b76c <rcutils_allocator_is_valid>
 8016228:	4603      	mov	r3, r0
 801622a:	f083 0301 	eor.w	r3, r3, #1
 801622e:	b2db      	uxtb	r3, r3
 8016230:	2b00      	cmp	r3, #0
 8016232:	d001      	beq.n	8016238 <rcl_init+0xa4>
 8016234:	230b      	movs	r3, #11
 8016236:	e182      	b.n	801653e <rcl_init+0x3aa>
  RCL_CHECK_ARGUMENT_FOR_NULL(context, RCL_RET_INVALID_ARGUMENT);
 8016238:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801623a:	2b00      	cmp	r3, #0
 801623c:	d101      	bne.n	8016242 <rcl_init+0xae>
 801623e:	230b      	movs	r3, #11
 8016240:	e17d      	b.n	801653e <rcl_init+0x3aa>
  RCUTILS_LOG_DEBUG_NAMED(
    ROS_PACKAGE_NAME,
    "Initializing ROS client library, for context at address: %p", (void *) context);

  // test expectation that given context is zero initialized
  if (NULL != context->impl) {
 8016242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d001      	beq.n	801624e <rcl_init+0xba>
    // note that this can also occur when the given context is used before initialization
    // i.e. it is declared on the stack but never defined or zero initialized
    RCL_SET_ERROR_MSG("rcl_init called on an already initialized context");
    return RCL_RET_ALREADY_INIT;
 801624a:	2364      	movs	r3, #100	; 0x64
 801624c:	e177      	b.n	801653e <rcl_init+0x3aa>
  context->global_arguments = rcl_get_zero_initialized_arguments();
#endif // RCL_COMMAND_LINE_ENABLED

  // Setup impl for context.
  // use zero_allocate so the cleanup function will not try to clean up uninitialized parts later
  context->impl = allocator.zero_allocate(1, sizeof(rcl_context_impl_t), allocator.state);
 801624e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016252:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016256:	2178      	movs	r1, #120	; 0x78
 8016258:	2001      	movs	r0, #1
 801625a:	4798      	blx	r3
 801625c:	4602      	mov	r2, r0
 801625e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016260:	601a      	str	r2, [r3, #0]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8016262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d101      	bne.n	801626e <rcl_init+0xda>
 801626a:	230a      	movs	r3, #10
 801626c:	e167      	b.n	801653e <rcl_init+0x3aa>
    context->impl, "failed to allocate memory for context impl", return RCL_RET_BAD_ALLOC);

  // Zero initialize rmw context first so its validity can by checked in cleanup.
  context->impl->rmw_context = rmw_get_zero_initialized_context();
 801626e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016270:	681c      	ldr	r4, [r3, #0]
 8016272:	f107 0308 	add.w	r3, r7, #8
 8016276:	4618      	mov	r0, r3
 8016278:	f006 fa54 	bl	801c724 <rmw_get_zero_initialized_context>
 801627c:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8016280:	f107 0108 	add.w	r1, r7, #8
 8016284:	2250      	movs	r2, #80	; 0x50
 8016286:	4618      	mov	r0, r3
 8016288:	f00a fd1a 	bl	8020cc0 <memcpy>

  // Store the allocator.
  context->impl->allocator = allocator;
 801628c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	461d      	mov	r5, r3
 8016292:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8016296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801629a:	6823      	ldr	r3, [r4, #0]
 801629c:	602b      	str	r3, [r5, #0]

  // Copy the options into the context for future reference.
  rcl_ret_t ret = rcl_init_options_copy(options, &(context->impl->init_options));
 801629e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	3314      	adds	r3, #20
 80162a4:	4619      	mov	r1, r3
 80162a6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80162a8:	f000 f9ca 	bl	8016640 <rcl_init_options_copy>
 80162ac:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  if (RCL_RET_OK != ret) {
 80162b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d004      	beq.n	80162c2 <rcl_init+0x12e>
    fail_ret = ret;  // error message already set
 80162b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80162bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    goto fail;
 80162c0:	e138      	b.n	8016534 <rcl_init+0x3a0>
  }

  // Copy the argc and argv into the context, if argc >= 0.
  context->impl->argc = argc;
 80162c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80162c4:	681a      	ldr	r2, [r3, #0]
 80162c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80162c8:	17d9      	asrs	r1, r3, #31
 80162ca:	603b      	str	r3, [r7, #0]
 80162cc:	6079      	str	r1, [r7, #4]
 80162ce:	e9d7 3400 	ldrd	r3, r4, [r7]
 80162d2:	e9c2 3406 	strd	r3, r4, [r2, #24]
  context->impl->argv = NULL;
 80162d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	2200      	movs	r2, #0
 80162dc:	621a      	str	r2, [r3, #32]
  if (0 != argc && argv != NULL) {
 80162de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d06c      	beq.n	80163be <rcl_init+0x22a>
 80162e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d069      	beq.n	80163be <rcl_init+0x22a>
    context->impl->argv = (char **)allocator.zero_allocate(argc, sizeof(char *), allocator.state);
 80162ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80162ee:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80162f0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80162f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80162f6:	6814      	ldr	r4, [r2, #0]
 80162f8:	460a      	mov	r2, r1
 80162fa:	2104      	movs	r1, #4
 80162fc:	4798      	blx	r3
 80162fe:	4603      	mov	r3, r0
 8016300:	6223      	str	r3, [r4, #32]
    RCL_CHECK_FOR_NULL_WITH_MSG(
 8016302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	6a1b      	ldr	r3, [r3, #32]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d103      	bne.n	8016314 <rcl_init+0x180>
 801630c:	230a      	movs	r3, #10
 801630e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016312:	e10f      	b.n	8016534 <rcl_init+0x3a0>
      context->impl->argv,
      "failed to allocate memory for argv",
      fail_ret = RCL_RET_BAD_ALLOC; goto fail);
    int64_t i;
    for (i = 0; i < argc; ++i) {
 8016314:	f04f 0200 	mov.w	r2, #0
 8016318:	f04f 0300 	mov.w	r3, #0
 801631c:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8016320:	e043      	b.n	80163aa <rcl_init+0x216>
      size_t argv_i_length = strlen(argv[i]);
 8016322:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016326:	009b      	lsls	r3, r3, #2
 8016328:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801632a:	4413      	add	r3, r2
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	4618      	mov	r0, r3
 8016330:	f7e9 ff78 	bl	8000224 <strlen>
 8016334:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
      context->impl->argv[i] = (char *)allocator.allocate(argv_i_length, allocator.state);
 8016338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801633a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801633e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016340:	6812      	ldr	r2, [r2, #0]
 8016342:	6a11      	ldr	r1, [r2, #32]
 8016344:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016348:	0092      	lsls	r2, r2, #2
 801634a:	188c      	adds	r4, r1, r2
 801634c:	4601      	mov	r1, r0
 801634e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8016352:	4798      	blx	r3
 8016354:	4603      	mov	r3, r0
 8016356:	6023      	str	r3, [r4, #0]
      RCL_CHECK_FOR_NULL_WITH_MSG(
 8016358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	6a1a      	ldr	r2, [r3, #32]
 801635e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016362:	009b      	lsls	r3, r3, #2
 8016364:	4413      	add	r3, r2
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d103      	bne.n	8016374 <rcl_init+0x1e0>
 801636c:	230a      	movs	r3, #10
 801636e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016372:	e0df      	b.n	8016534 <rcl_init+0x3a0>
        context->impl->argv[i],
        "failed to allocate memory for string entry in argv",
        fail_ret = RCL_RET_BAD_ALLOC; goto fail);
      memcpy(context->impl->argv[i], argv[i], argv_i_length);
 8016374:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	6a1a      	ldr	r2, [r3, #32]
 801637a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801637e:	009b      	lsls	r3, r3, #2
 8016380:	4413      	add	r3, r2
 8016382:	6818      	ldr	r0, [r3, #0]
 8016384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016388:	009b      	lsls	r3, r3, #2
 801638a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801638c:	4413      	add	r3, r2
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8016394:	4619      	mov	r1, r3
 8016396:	f00a fc93 	bl	8020cc0 <memcpy>
    for (i = 0; i < argc; ++i) {
 801639a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801639e:	f112 0a01 	adds.w	sl, r2, #1
 80163a2:	f143 0b00 	adc.w	fp, r3, #0
 80163a6:	e9c7 ab2a 	strd	sl, fp, [r7, #168]	; 0xa8
 80163aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80163ac:	17da      	asrs	r2, r3, #31
 80163ae:	4698      	mov	r8, r3
 80163b0:	4691      	mov	r9, r2
 80163b2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80163b6:	4542      	cmp	r2, r8
 80163b8:	eb73 0309 	sbcs.w	r3, r3, r9
 80163bc:	dbb1      	blt.n	8016322 <rcl_init+0x18e>
    goto fail;
  }
#endif // RCL_COMMAND_LINE_ENABLED

  // Set the instance id.
  uint64_t next_instance_id = rcutils_atomic_fetch_add_uint64_t(&__rcl_next_unique_id, 1);
 80163be:	f04f 0201 	mov.w	r2, #1
 80163c2:	f04f 0300 	mov.w	r3, #0
 80163c6:	4860      	ldr	r0, [pc, #384]	; (8016548 <rcl_init+0x3b4>)
 80163c8:	f7ff fecb 	bl	8016162 <rcutils_atomic_fetch_add_uint64_t>
 80163cc:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
  if (0 == next_instance_id) {
 80163d0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80163d4:	4313      	orrs	r3, r2
 80163d6:	d109      	bne.n	80163ec <rcl_init+0x258>
    // Roll over occurred, this is an extremely unlikely occurrence.
    RCL_SET_ERROR_MSG("unique rcl instance ids exhausted");
    // Roll back to try to avoid the next call succeeding, but there's a data race here.
    rcutils_atomic_store(&__rcl_next_unique_id, -1);
 80163d8:	2305      	movs	r3, #5
 80163da:	9300      	str	r3, [sp, #0]
 80163dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80163e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163e4:	4858      	ldr	r0, [pc, #352]	; (8016548 <rcl_init+0x3b4>)
 80163e6:	f005 fa61 	bl	801b8ac <__atomic_store_8>
    goto fail;
 80163ea:	e0a3      	b.n	8016534 <rcl_init+0x3a0>
  }
  rcutils_atomic_store((atomic_uint_least64_t *)(&context->instance_id_storage), next_instance_id);
 80163ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80163ee:	3308      	adds	r3, #8
 80163f0:	4619      	mov	r1, r3
 80163f2:	2305      	movs	r3, #5
 80163f4:	9300      	str	r3, [sp, #0]
 80163f6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80163fa:	4608      	mov	r0, r1
 80163fc:	f005 fa56 	bl	801b8ac <__atomic_store_8>
  context->impl->init_options.impl->rmw_init_options.instance_id = next_instance_id;
 8016400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	6959      	ldr	r1, [r3, #20]
 8016406:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 801640a:	e9c1 2306 	strd	r2, r3, [r1, #24]

  size_t * domain_id = &context->impl->init_options.impl->rmw_init_options.domain_id;
 801640e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	695b      	ldr	r3, [r3, #20]
 8016414:	3324      	adds	r3, #36	; 0x24
 8016416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (RCL_DEFAULT_DOMAIN_ID == *domain_id) {
 801641a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016424:	d10e      	bne.n	8016444 <rcl_init+0x2b0>
    // Get actual domain id based on environment variable.
    ret = rcl_get_default_domain_id(domain_id);
 8016426:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 801642a:	f7ff fb0b 	bl	8015a44 <rcl_get_default_domain_id>
 801642e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (RCL_RET_OK != ret) {
 8016432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016436:	2b00      	cmp	r3, #0
 8016438:	d004      	beq.n	8016444 <rcl_init+0x2b0>
      fail_ret = ret;
 801643a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801643e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      goto fail;
 8016442:	e077      	b.n	8016534 <rcl_init+0x3a0>
    }
  }
  if (RMW_DEFAULT_DOMAIN_ID == *domain_id) {
 8016444:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801644e:	d103      	bne.n	8016458 <rcl_init+0x2c4>
    *domain_id = 0u;
 8016450:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016454:	2200      	movs	r2, #0
 8016456:	601a      	str	r2, [r3, #0]
  }

  rmw_localhost_only_t * localhost_only =
    &context->impl->init_options.impl->rmw_init_options.localhost_only;
 8016458:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	695b      	ldr	r3, [r3, #20]
  rmw_localhost_only_t * localhost_only =
 801645e:	3330      	adds	r3, #48	; 0x30
 8016460:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (RMW_LOCALHOST_ONLY_DEFAULT == *localhost_only) {
 8016464:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016468:	781b      	ldrb	r3, [r3, #0]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d10e      	bne.n	801648c <rcl_init+0x2f8>
    // Get actual localhost_only value based on environment variable, if needed.
    ret = rcl_get_localhost_only(localhost_only);
 801646e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8016472:	f000 fa0f 	bl	8016894 <rcl_get_localhost_only>
 8016476:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (RCL_RET_OK != ret) {
 801647a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801647e:	2b00      	cmp	r3, #0
 8016480:	d004      	beq.n	801648c <rcl_init+0x2f8>
      fail_ret = ret;
 8016482:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016486:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      goto fail;
 801648a:	e053      	b.n	8016534 <rcl_init+0x3a0>
#endif RCL_COMMAND_LINE_ENABLED

  int validation_result;
  size_t invalid_index;
  ret = rcl_validate_enclave_name(
    context->impl->init_options.impl->rmw_init_options.enclave,
 801648c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	695b      	ldr	r3, [r3, #20]
 8016492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  ret = rcl_validate_enclave_name(
 8016494:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8016498:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801649c:	4618      	mov	r0, r3
 801649e:	f002 fbae 	bl	8018bfe <rcl_validate_enclave_name>
 80164a2:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    &validation_result,
    &invalid_index);
  if (RCL_RET_OK != ret) {
 80164a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d004      	beq.n	80164b8 <rcl_init+0x324>
    RCL_SET_ERROR_MSG("rcl_validate_enclave_name() failed");
    fail_ret = ret;
 80164ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80164b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    goto fail;
 80164b6:	e03d      	b.n	8016534 <rcl_init+0x3a0>
  }
  if (RCL_ENCLAVE_NAME_VALID != validation_result) {
 80164b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d003      	beq.n	80164c6 <rcl_init+0x332>
    RCL_SET_ERROR_MSG_WITH_FORMAT_STRING(
      "Enclave name is not valid: '%s'. Invalid index: %zu",
      rcl_enclave_name_validation_result_string(validation_result),
      invalid_index);
    fail_ret = RCL_RET_ERROR;
 80164be:	2301      	movs	r3, #1
 80164c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    goto fail;
 80164c4:	e036      	b.n	8016534 <rcl_init+0x3a0>
  }

  rmw_security_options_t * security_options =
    &context->impl->init_options.impl->rmw_init_options.security_options;
 80164c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	695b      	ldr	r3, [r3, #20]
  rmw_security_options_t * security_options =
 80164cc:	3328      	adds	r3, #40	; 0x28
 80164ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  ret = rcl_get_security_options_from_environment(
    context->impl->init_options.impl->rmw_init_options.enclave,
 80164d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	695b      	ldr	r3, [r3, #20]
 80164d8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    &context->impl->allocator,
 80164da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80164dc:	681b      	ldr	r3, [r3, #0]
  ret = rcl_get_security_options_from_environment(
 80164de:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80164e2:	4619      	mov	r1, r3
 80164e4:	f001 f848 	bl	8017578 <rcl_get_security_options_from_environment>
 80164e8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    security_options);
  if (RCL_RET_OK != ret) {
 80164ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d004      	beq.n	80164fe <rcl_init+0x36a>
    fail_ret = ret;
 80164f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80164f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    goto fail;
 80164fc:	e01a      	b.n	8016534 <rcl_init+0x3a0>
  }

  // Initialize rmw_init.
  rmw_ret_t rmw_ret = rmw_init(
    &(context->impl->init_options.impl->rmw_init_options),
 80164fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	695b      	ldr	r3, [r3, #20]
 8016504:	f103 0218 	add.w	r2, r3, #24
    &(context->impl->rmw_context));
 8016508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801650a:	681b      	ldr	r3, [r3, #0]
  rmw_ret_t rmw_ret = rmw_init(
 801650c:	3328      	adds	r3, #40	; 0x28
 801650e:	4619      	mov	r1, r3
 8016510:	4610      	mov	r0, r2
 8016512:	f007 fa6f 	bl	801d9f4 <rmw_init>
 8016516:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  if (RMW_RET_OK != rmw_ret) {
 801651a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801651e:	2b00      	cmp	r3, #0
 8016520:	d006      	beq.n	8016530 <rcl_init+0x39c>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    fail_ret = rcl_convert_rmw_ret_to_rcl_ret(rmw_ret);
 8016522:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8016526:	f7ff f94d 	bl	80157c4 <rcl_convert_rmw_ret_to_rcl_ret>
 801652a:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
    goto fail;
 801652e:	e001      	b.n	8016534 <rcl_init+0x3a0>
  }

  //TRACEPOINT(rcl_init, (const void *)context);

  return RCL_RET_OK;
 8016530:	2300      	movs	r3, #0
 8016532:	e004      	b.n	801653e <rcl_init+0x3aa>
fail:
  __cleanup_context(context);
 8016534:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8016536:	f7ff f9e9 	bl	801590c <__cleanup_context>
  return fail_ret;
 801653a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
}
 801653e:	4618      	mov	r0, r3
 8016540:	37b8      	adds	r7, #184	; 0xb8
 8016542:	46bd      	mov	sp, r7
 8016544:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016548:	20000018 	.word	0x20000018

0801654c <rcl_get_zero_initialized_init_options>:
#include "rmw/error_handling.h"
#include "rcutils/logging_macros.h"

rcl_init_options_t
rcl_get_zero_initialized_init_options(void)
{
 801654c:	b480      	push	{r7}
 801654e:	af00      	add	r7, sp, #0
  return (const rcl_init_options_t) {
 8016550:	2300      	movs	r3, #0
           .impl = 0,
  };  // NOLINT(readability/braces): false positive
}
 8016552:	4618      	mov	r0, r3
 8016554:	46bd      	mov	sp, r7
 8016556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655a:	4770      	bx	lr

0801655c <rcl_init_options_init>:

rcl_ret_t
rcl_init_options_init(rcl_init_options_t * init_options, rcl_allocator_t allocator)
{
 801655c:	b084      	sub	sp, #16
 801655e:	b5b0      	push	{r4, r5, r7, lr}
 8016560:	b094      	sub	sp, #80	; 0x50
 8016562:	af02      	add	r7, sp, #8
 8016564:	63f8      	str	r0, [r7, #60]	; 0x3c
 8016566:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 801656a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_INVALID_ARGUMENT);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_ALREADY_INIT);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_BAD_ALLOC);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_ERROR);

  RCL_CHECK_ARGUMENT_FOR_NULL(init_options, RCL_RET_INVALID_ARGUMENT);
 801656e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016570:	2b00      	cmp	r3, #0
 8016572:	d101      	bne.n	8016578 <rcl_init_options_init+0x1c>
 8016574:	230b      	movs	r3, #11
 8016576:	e05c      	b.n	8016632 <rcl_init_options_init+0xd6>
  if (NULL != init_options->impl) {
 8016578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d001      	beq.n	8016584 <rcl_init_options_init+0x28>
    RCL_SET_ERROR_MSG("given init_options (rcl_init_options_t) is already initialized");
    return RCL_RET_ALREADY_INIT;
 8016580:	2364      	movs	r3, #100	; 0x64
 8016582:	e056      	b.n	8016632 <rcl_init_options_init+0xd6>
  }
  RCL_CHECK_ALLOCATOR(&allocator, return RCL_RET_INVALID_ARGUMENT);
 8016584:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8016588:	4618      	mov	r0, r3
 801658a:	f005 f8ef 	bl	801b76c <rcutils_allocator_is_valid>
 801658e:	4603      	mov	r3, r0
 8016590:	f083 0301 	eor.w	r3, r3, #1
 8016594:	b2db      	uxtb	r3, r3
 8016596:	2b00      	cmp	r3, #0
 8016598:	d001      	beq.n	801659e <rcl_init_options_init+0x42>
 801659a:	230b      	movs	r3, #11
 801659c:	e049      	b.n	8016632 <rcl_init_options_init+0xd6>
  init_options->impl = allocator.allocate(sizeof(rcl_init_options_impl_t), allocator.state);
 801659e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80165a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80165a2:	4611      	mov	r1, r2
 80165a4:	2050      	movs	r0, #80	; 0x50
 80165a6:	4798      	blx	r3
 80165a8:	4602      	mov	r2, r0
 80165aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165ac:	601a      	str	r2, [r3, #0]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 80165ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d101      	bne.n	80165ba <rcl_init_options_init+0x5e>
 80165b6:	230a      	movs	r3, #10
 80165b8:	e03b      	b.n	8016632 <rcl_init_options_init+0xd6>
    init_options->impl,
    "failed to allocate memory for init options impl",
    return RCL_RET_BAD_ALLOC);
  init_options->impl->allocator = allocator;
 80165ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	461d      	mov	r5, r3
 80165c0:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80165c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80165c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80165c8:	6823      	ldr	r3, [r4, #0]
 80165ca:	602b      	str	r3, [r5, #0]
  init_options->impl->rmw_init_options = rmw_get_zero_initialized_init_options();
 80165cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165ce:	681c      	ldr	r4, [r3, #0]
 80165d0:	463b      	mov	r3, r7
 80165d2:	4618      	mov	r0, r3
 80165d4:	f006 f8c7 	bl	801c766 <rmw_get_zero_initialized_init_options>
 80165d8:	3418      	adds	r4, #24
 80165da:	463d      	mov	r5, r7
 80165dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80165de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80165e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80165e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80165e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80165e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80165e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80165ec:	e884 0003 	stmia.w	r4, {r0, r1}
  rmw_ret_t rmw_ret = rmw_init_options_init(&(init_options->impl->rmw_init_options), allocator);
 80165f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	f103 0418 	add.w	r4, r3, #24
 80165f8:	466a      	mov	r2, sp
 80165fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80165fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016602:	e882 0003 	stmia.w	r2, {r0, r1}
 8016606:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801660a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801660c:	4620      	mov	r0, r4
 801660e:	f007 f8b1 	bl	801d774 <rmw_init_options_init>
 8016612:	6478      	str	r0, [r7, #68]	; 0x44
  if (RMW_RET_OK != rmw_ret) {
 8016614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016616:	2b00      	cmp	r3, #0
 8016618:	d00a      	beq.n	8016630 <rcl_init_options_init+0xd4>
    allocator.deallocate(init_options->impl, allocator.state);
 801661a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801661c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801661e:	6812      	ldr	r2, [r2, #0]
 8016620:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8016622:	4610      	mov	r0, r2
 8016624:	4798      	blx	r3
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    return rcl_convert_rmw_ret_to_rcl_ret(rmw_ret);
 8016626:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016628:	f7ff f8cc 	bl	80157c4 <rcl_convert_rmw_ret_to_rcl_ret>
 801662c:	4603      	mov	r3, r0
 801662e:	e000      	b.n	8016632 <rcl_init_options_init+0xd6>
  }
  return RCL_RET_OK;
 8016630:	2300      	movs	r3, #0
}
 8016632:	4618      	mov	r0, r3
 8016634:	3748      	adds	r7, #72	; 0x48
 8016636:	46bd      	mov	sp, r7
 8016638:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801663c:	b004      	add	sp, #16
 801663e:	4770      	bx	lr

08016640 <rcl_init_options_copy>:

rcl_ret_t
rcl_init_options_copy(const rcl_init_options_t * src, rcl_init_options_t * dst)
{
 8016640:	b5b0      	push	{r4, r5, r7, lr}
 8016642:	f5ad 6d8a 	sub.w	sp, sp, #1104	; 0x450
 8016646:	af02      	add	r7, sp, #8
 8016648:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 801664c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8016650:	6018      	str	r0, [r3, #0]
 8016652:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8016656:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 801665a:	6019      	str	r1, [r3, #0]
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_INVALID_ARGUMENT);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_ALREADY_INIT);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_BAD_ALLOC);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_ERROR);

  RCL_CHECK_ARGUMENT_FOR_NULL(src, RCL_RET_INVALID_ARGUMENT);
 801665c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8016660:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d101      	bne.n	801666e <rcl_init_options_copy+0x2e>
 801666a:	230b      	movs	r3, #11
 801666c:	e0ce      	b.n	801680c <rcl_init_options_copy+0x1cc>
  RCL_CHECK_ARGUMENT_FOR_NULL(src->impl, RCL_RET_INVALID_ARGUMENT);
 801666e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8016672:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d101      	bne.n	8016682 <rcl_init_options_copy+0x42>
 801667e:	230b      	movs	r3, #11
 8016680:	e0c4      	b.n	801680c <rcl_init_options_copy+0x1cc>
  RCL_CHECK_ARGUMENT_FOR_NULL(dst, RCL_RET_INVALID_ARGUMENT);
 8016682:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8016686:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d101      	bne.n	8016694 <rcl_init_options_copy+0x54>
 8016690:	230b      	movs	r3, #11
 8016692:	e0bb      	b.n	801680c <rcl_init_options_copy+0x1cc>
  if (NULL != dst->impl) {
 8016694:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8016698:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d001      	beq.n	80166a8 <rcl_init_options_copy+0x68>
    RCL_SET_ERROR_MSG("given dst (rcl_init_options_t) is already initialized");
    return RCL_RET_ALREADY_INIT;
 80166a4:	2364      	movs	r3, #100	; 0x64
 80166a6:	e0b1      	b.n	801680c <rcl_init_options_copy+0x1cc>
  }

  // initialize dst (since we know it's in a zero initialized state)
  rcl_ret_t ret = rcl_init_options_init(dst, src->impl->allocator);
 80166a8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80166ac:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 80166b8:	f5a2 6482 	sub.w	r4, r2, #1040	; 0x410
 80166bc:	466d      	mov	r5, sp
 80166be:	f103 020c 	add.w	r2, r3, #12
 80166c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80166c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80166ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80166cc:	6820      	ldr	r0, [r4, #0]
 80166ce:	f7ff ff45 	bl	801655c <rcl_init_options_init>
 80166d2:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
  if (RCL_RET_OK != ret) {
 80166d6:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d002      	beq.n	80166e4 <rcl_init_options_copy+0xa4>
    return ret;  // error already set
 80166de:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80166e2:	e093      	b.n	801680c <rcl_init_options_copy+0x1cc>
  }

  // copy src information into dst
  dst->impl->allocator = src->impl->allocator;
 80166e4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80166e8:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	681a      	ldr	r2, [r3, #0]
 80166f0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80166f4:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	461c      	mov	r4, r3
 80166fe:	4615      	mov	r5, r2
 8016700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016704:	682b      	ldr	r3, [r5, #0]
 8016706:	6023      	str	r3, [r4, #0]
  // first zero-initialize rmw init options
  rmw_ret_t rmw_ret = rmw_init_options_fini(&(dst->impl->rmw_init_options));
 8016708:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 801670c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	3318      	adds	r3, #24
 8016716:	4618      	mov	r0, r3
 8016718:	f007 f90e 	bl	801d938 <rmw_init_options_fini>
 801671c:	f8c7 0440 	str.w	r0, [r7, #1088]	; 0x440
  if (RMW_RET_OK != rmw_ret) {
 8016720:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8016724:	2b00      	cmp	r3, #0
 8016726:	d01e      	beq.n	8016766 <rcl_init_options_copy+0x126>
    rmw_error_string_t error_string = rmw_get_error_string();
 8016728:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 801672c:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8016730:	4618      	mov	r0, r3
 8016732:	f005 fa79 	bl	801bc28 <rcutils_get_error_string>
    rmw_reset_error();
 8016736:	f005 fad7 	bl	801bce8 <rcutils_reset_error>
    ret = rcl_init_options_fini(dst);
 801673a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 801673e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8016742:	6818      	ldr	r0, [r3, #0]
 8016744:	f000 f867 	bl	8016816 <rcl_init_options_fini>
 8016748:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
    if (RCL_RET_OK != ret) {
 801674c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8016750:	2b00      	cmp	r3, #0
 8016752:	d002      	beq.n	801675a <rcl_init_options_copy+0x11a>
      RCUTILS_LOG_ERROR_NAMED(
        "rcl",
        "failed to finalize dst rcl_init_options while handling failure to "
        "finalize rmw_init_options, original ret '%d' and error: %s", rmw_ret, error_string.str);
      return ret;  // error already set
 8016754:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8016758:	e058      	b.n	801680c <rcl_init_options_copy+0x1cc>
    }
    RCL_SET_ERROR_MSG(error_string.str);
    return rcl_convert_rmw_ret_to_rcl_ret(rmw_ret);
 801675a:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 801675e:	f7ff f831 	bl	80157c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8016762:	4603      	mov	r3, r0
 8016764:	e052      	b.n	801680c <rcl_init_options_copy+0x1cc>
  }
  // then copy
  dst->impl->rmw_init_options = rmw_get_zero_initialized_init_options();
 8016766:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 801676a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	681c      	ldr	r4, [r3, #0]
 8016772:	463b      	mov	r3, r7
 8016774:	4618      	mov	r0, r3
 8016776:	f005 fff6 	bl	801c766 <rmw_get_zero_initialized_init_options>
 801677a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 801677e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8016782:	3418      	adds	r4, #24
 8016784:	461d      	mov	r5, r3
 8016786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801678a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801678c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801678e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016792:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016796:	e884 0003 	stmia.w	r4, {r0, r1}
  rmw_ret =
    rmw_init_options_copy(&(src->impl->rmw_init_options), &(dst->impl->rmw_init_options));
 801679a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 801679e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	f103 0218 	add.w	r2, r3, #24
 80167aa:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80167ae:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	3318      	adds	r3, #24
 80167b8:	4619      	mov	r1, r3
 80167ba:	4610      	mov	r0, r2
 80167bc:	f007 f868 	bl	801d890 <rmw_init_options_copy>
 80167c0:	f8c7 0440 	str.w	r0, [r7, #1088]	; 0x440
  if (RMW_RET_OK != rmw_ret) {
 80167c4:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d01e      	beq.n	801680a <rcl_init_options_copy+0x1ca>
    rmw_error_string_t error_string = rmw_get_error_string();
 80167cc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80167d0:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80167d4:	4618      	mov	r0, r3
 80167d6:	f005 fa27 	bl	801bc28 <rcutils_get_error_string>
    rmw_reset_error();
 80167da:	f005 fa85 	bl	801bce8 <rcutils_reset_error>
    ret = rcl_init_options_fini(dst);
 80167de:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80167e2:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80167e6:	6818      	ldr	r0, [r3, #0]
 80167e8:	f000 f815 	bl	8016816 <rcl_init_options_fini>
 80167ec:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
    if (RCL_RET_OK != ret) {
 80167f0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d002      	beq.n	80167fe <rcl_init_options_copy+0x1be>
      RCUTILS_LOG_ERROR_NAMED(
        "rcl",
        "failed to finalize dst rcl_init_options while handling failure to "
        "copy rmw_init_options, original ret '%d' and error: %s", rmw_ret, error_string.str);
      return ret;  // error already set
 80167f8:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80167fc:	e006      	b.n	801680c <rcl_init_options_copy+0x1cc>
    }
    RCL_SET_ERROR_MSG(error_string.str);
    return rcl_convert_rmw_ret_to_rcl_ret(rmw_ret);
 80167fe:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 8016802:	f7fe ffdf 	bl	80157c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8016806:	4603      	mov	r3, r0
 8016808:	e000      	b.n	801680c <rcl_init_options_copy+0x1cc>
  }

  return RCL_RET_OK;
 801680a:	2300      	movs	r3, #0
}
 801680c:	4618      	mov	r0, r3
 801680e:	f507 6789 	add.w	r7, r7, #1096	; 0x448
 8016812:	46bd      	mov	sp, r7
 8016814:	bdb0      	pop	{r4, r5, r7, pc}

08016816 <rcl_init_options_fini>:

rcl_ret_t
rcl_init_options_fini(rcl_init_options_t * init_options)
{
 8016816:	b5b0      	push	{r4, r5, r7, lr}
 8016818:	b088      	sub	sp, #32
 801681a:	af00      	add	r7, sp, #0
 801681c:	6078      	str	r0, [r7, #4]
  RCL_CHECK_ARGUMENT_FOR_NULL(init_options, RCL_RET_INVALID_ARGUMENT);
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d101      	bne.n	8016828 <rcl_init_options_fini+0x12>
 8016824:	230b      	movs	r3, #11
 8016826:	e031      	b.n	801688c <rcl_init_options_fini+0x76>
  RCL_CHECK_ARGUMENT_FOR_NULL(init_options->impl, RCL_RET_INVALID_ARGUMENT);
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d101      	bne.n	8016834 <rcl_init_options_fini+0x1e>
 8016830:	230b      	movs	r3, #11
 8016832:	e02b      	b.n	801688c <rcl_init_options_fini+0x76>
  rcl_allocator_t allocator = init_options->impl->allocator;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	f107 0408 	add.w	r4, r7, #8
 801683c:	461d      	mov	r5, r3
 801683e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016842:	682b      	ldr	r3, [r5, #0]
 8016844:	6023      	str	r3, [r4, #0]
  RCL_CHECK_ALLOCATOR(&allocator, return RCL_RET_INVALID_ARGUMENT);
 8016846:	f107 0308 	add.w	r3, r7, #8
 801684a:	4618      	mov	r0, r3
 801684c:	f004 ff8e 	bl	801b76c <rcutils_allocator_is_valid>
 8016850:	4603      	mov	r3, r0
 8016852:	f083 0301 	eor.w	r3, r3, #1
 8016856:	b2db      	uxtb	r3, r3
 8016858:	2b00      	cmp	r3, #0
 801685a:	d001      	beq.n	8016860 <rcl_init_options_fini+0x4a>
 801685c:	230b      	movs	r3, #11
 801685e:	e015      	b.n	801688c <rcl_init_options_fini+0x76>
  rmw_ret_t rmw_ret = rmw_init_options_fini(&(init_options->impl->rmw_init_options));
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	3318      	adds	r3, #24
 8016866:	4618      	mov	r0, r3
 8016868:	f007 f866 	bl	801d938 <rmw_init_options_fini>
 801686c:	61f8      	str	r0, [r7, #28]
  if (RMW_RET_OK != rmw_ret) {
 801686e:	69fb      	ldr	r3, [r7, #28]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d004      	beq.n	801687e <rcl_init_options_fini+0x68>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    return rcl_convert_rmw_ret_to_rcl_ret(rmw_ret);
 8016874:	69f8      	ldr	r0, [r7, #28]
 8016876:	f7fe ffa5 	bl	80157c4 <rcl_convert_rmw_ret_to_rcl_ret>
 801687a:	4603      	mov	r3, r0
 801687c:	e006      	b.n	801688c <rcl_init_options_fini+0x76>
  }
  allocator.deallocate(init_options->impl, allocator.state);
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	687a      	ldr	r2, [r7, #4]
 8016882:	6812      	ldr	r2, [r2, #0]
 8016884:	69b9      	ldr	r1, [r7, #24]
 8016886:	4610      	mov	r0, r2
 8016888:	4798      	blx	r3
  return RCL_RET_OK;
 801688a:	2300      	movs	r3, #0
}
 801688c:	4618      	mov	r0, r3
 801688e:	3720      	adds	r7, #32
 8016890:	46bd      	mov	sp, r7
 8016892:	bdb0      	pop	{r4, r5, r7, pc}

08016894 <rcl_get_localhost_only>:

const char * const RCL_LOCALHOST_ENV_VAR = "ROS_LOCALHOST_ONLY";

rcl_ret_t
rcl_get_localhost_only(rmw_localhost_only_t * localhost_only)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b084      	sub	sp, #16
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
  const char * ros_local_host_env_val = NULL;
 801689c:	2300      	movs	r3, #0
 801689e:	60bb      	str	r3, [r7, #8]
  const char * get_env_error_str = NULL;
 80168a0:	2300      	movs	r3, #0
 80168a2:	60fb      	str	r3, [r7, #12]

  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_INVALID_ARGUMENT);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_ERROR);
  RCL_CHECK_ARGUMENT_FOR_NULL(localhost_only, RCL_RET_INVALID_ARGUMENT);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d101      	bne.n	80168ae <rcl_get_localhost_only+0x1a>
 80168aa:	230b      	movs	r3, #11
 80168ac:	e01d      	b.n	80168ea <rcl_get_localhost_only+0x56>

  get_env_error_str = rcutils_get_env(RCL_LOCALHOST_ENV_VAR, &ros_local_host_env_val);
 80168ae:	4a11      	ldr	r2, [pc, #68]	; (80168f4 <rcl_get_localhost_only+0x60>)
 80168b0:	f107 0308 	add.w	r3, r7, #8
 80168b4:	4619      	mov	r1, r3
 80168b6:	4610      	mov	r0, r2
 80168b8:	f005 fada 	bl	801be70 <rcutils_get_env>
 80168bc:	60f8      	str	r0, [r7, #12]
  if (NULL != get_env_error_str) {
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d001      	beq.n	80168c8 <rcl_get_localhost_only+0x34>
    RCL_SET_ERROR_MSG_WITH_FORMAT_STRING(
      "Error getting env var '" RCUTILS_STRINGIFY(RCL_LOCALHOST_ENV_VAR) "': %s\n",
      get_env_error_str);
    return RCL_RET_ERROR;
 80168c4:	2301      	movs	r3, #1
 80168c6:	e010      	b.n	80168ea <rcl_get_localhost_only+0x56>
  }
  *localhost_only = (ros_local_host_env_val != NULL &&
 80168c8:	68bb      	ldr	r3, [r7, #8]
    strcmp(
      ros_local_host_env_val,
      "1") == 0) ? RMW_LOCALHOST_ONLY_ENABLED : RMW_LOCALHOST_ONLY_DISABLED;
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d009      	beq.n	80168e2 <rcl_get_localhost_only+0x4e>
    strcmp(
 80168ce:	68bb      	ldr	r3, [r7, #8]
 80168d0:	4909      	ldr	r1, [pc, #36]	; (80168f8 <rcl_get_localhost_only+0x64>)
 80168d2:	4618      	mov	r0, r3
 80168d4:	f7e9 fc9c 	bl	8000210 <strcmp>
 80168d8:	4603      	mov	r3, r0
  *localhost_only = (ros_local_host_env_val != NULL &&
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d101      	bne.n	80168e2 <rcl_get_localhost_only+0x4e>
      "1") == 0) ? RMW_LOCALHOST_ONLY_ENABLED : RMW_LOCALHOST_ONLY_DISABLED;
 80168de:	2201      	movs	r2, #1
 80168e0:	e000      	b.n	80168e4 <rcl_get_localhost_only+0x50>
 80168e2:	2202      	movs	r2, #2
  *localhost_only = (ros_local_host_env_val != NULL &&
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	701a      	strb	r2, [r3, #0]
  return RCL_RET_OK;
 80168e8:	2300      	movs	r3, #0
}
 80168ea:	4618      	mov	r0, r3
 80168ec:	3710      	adds	r7, #16
 80168ee:	46bd      	mov	sp, r7
 80168f0:	bd80      	pop	{r7, pc}
 80168f2:	bf00      	nop
 80168f4:	0802599c 	.word	0x0802599c
 80168f8:	080259b0 	.word	0x080259b0

080168fc <rcl_get_zero_initialized_node>:
  return node_logger_name;
}

rcl_node_t
rcl_get_zero_initialized_node()
{
 80168fc:	b480      	push	{r7}
 80168fe:	b083      	sub	sp, #12
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
  static rcl_node_t null_node = {
    .context = 0,
    .impl = 0
  };
  return null_node;
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	4a05      	ldr	r2, [pc, #20]	; (801691c <rcl_get_zero_initialized_node+0x20>)
 8016908:	e892 0003 	ldmia.w	r2, {r0, r1}
 801690c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8016910:	6878      	ldr	r0, [r7, #4]
 8016912:	370c      	adds	r7, #12
 8016914:	46bd      	mov	sp, r7
 8016916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801691a:	4770      	bx	lr
 801691c:	2000e504 	.word	0x2000e504

08016920 <rcl_node_init>:
  rcl_node_t * node,
  const char * name,
  const char * namespace_,
  rcl_context_t * context,
  const rcl_node_options_t * options)
{
 8016920:	b5b0      	push	{r4, r5, r7, lr}
 8016922:	b0a4      	sub	sp, #144	; 0x90
 8016924:	af06      	add	r7, sp, #24
 8016926:	62f8      	str	r0, [r7, #44]	; 0x2c
 8016928:	62b9      	str	r1, [r7, #40]	; 0x28
 801692a:	627a      	str	r2, [r7, #36]	; 0x24
 801692c:	623b      	str	r3, [r7, #32]
  size_t domain_id = 0;
 801692e:	2300      	movs	r3, #0
 8016930:	64fb      	str	r3, [r7, #76]	; 0x4c
  rmw_localhost_only_t localhost_only = RMW_LOCALHOST_ONLY_DEFAULT;
 8016932:	2300      	movs	r3, #0
 8016934:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  const rmw_guard_condition_t * rmw_graph_guard_condition = NULL;
 8016938:	2300      	movs	r3, #0
 801693a:	66bb      	str	r3, [r7, #104]	; 0x68
  rcl_guard_condition_options_t graph_guard_condition_options =
    rcl_guard_condition_get_default_options();
 801693c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016940:	4618      	mov	r0, r3
 8016942:	f7ff fba7 	bl	8016094 <rcl_guard_condition_get_default_options>
  rcl_ret_t ret;
  rcl_ret_t fail_ret = RCL_RET_ERROR;
 8016946:	2301      	movs	r3, #1
 8016948:	667b      	str	r3, [r7, #100]	; 0x64
  char * remapped_node_name = NULL;
 801694a:	2300      	movs	r3, #0
 801694c:	663b      	str	r3, [r7, #96]	; 0x60

  // Check options and allocator first, so allocator can be used for errors.
  RCL_CHECK_ARGUMENT_FOR_NULL(options, RCL_RET_INVALID_ARGUMENT);
 801694e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016952:	2b00      	cmp	r3, #0
 8016954:	d101      	bne.n	801695a <rcl_node_init+0x3a>
 8016956:	230b      	movs	r3, #11
 8016958:	e1f7      	b.n	8016d4a <rcl_node_init+0x42a>
  const rcl_allocator_t * allocator = &options->allocator;
 801695a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801695e:	3304      	adds	r3, #4
 8016960:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 8016962:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8016964:	f004 ff02 	bl	801b76c <rcutils_allocator_is_valid>
 8016968:	4603      	mov	r3, r0
 801696a:	f083 0301 	eor.w	r3, r3, #1
 801696e:	b2db      	uxtb	r3, r3
 8016970:	2b00      	cmp	r3, #0
 8016972:	d001      	beq.n	8016978 <rcl_node_init+0x58>
 8016974:	230b      	movs	r3, #11
 8016976:	e1e8      	b.n	8016d4a <rcl_node_init+0x42a>

  RCL_CHECK_ARGUMENT_FOR_NULL(name, RCL_RET_INVALID_ARGUMENT);
 8016978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801697a:	2b00      	cmp	r3, #0
 801697c:	d101      	bne.n	8016982 <rcl_node_init+0x62>
 801697e:	230b      	movs	r3, #11
 8016980:	e1e3      	b.n	8016d4a <rcl_node_init+0x42a>
  RCL_CHECK_ARGUMENT_FOR_NULL(namespace_, RCL_RET_INVALID_ARGUMENT);
 8016982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016984:	2b00      	cmp	r3, #0
 8016986:	d101      	bne.n	801698c <rcl_node_init+0x6c>
 8016988:	230b      	movs	r3, #11
 801698a:	e1de      	b.n	8016d4a <rcl_node_init+0x42a>
  RCL_CHECK_ARGUMENT_FOR_NULL(node, RCL_RET_INVALID_ARGUMENT);
 801698c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801698e:	2b00      	cmp	r3, #0
 8016990:	d101      	bne.n	8016996 <rcl_node_init+0x76>
 8016992:	230b      	movs	r3, #11
 8016994:	e1d9      	b.n	8016d4a <rcl_node_init+0x42a>
  RCUTILS_LOG_DEBUG_NAMED(
    ROS_PACKAGE_NAME, "Initializing node '%s' in namespace '%s'", name, namespace_);
  if (node->impl) {
 8016996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016998:	685b      	ldr	r3, [r3, #4]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d001      	beq.n	80169a2 <rcl_node_init+0x82>
    RCL_SET_ERROR_MSG("node already initialized, or struct memory was unintialized");
    return RCL_RET_ALREADY_INIT;
 801699e:	2364      	movs	r3, #100	; 0x64
 80169a0:	e1d3      	b.n	8016d4a <rcl_node_init+0x42a>
  }
  // Make sure rcl has been initialized.
  RCL_CHECK_FOR_NULL_WITH_MSG(
 80169a2:	6a3b      	ldr	r3, [r7, #32]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d101      	bne.n	80169ac <rcl_node_init+0x8c>
 80169a8:	230b      	movs	r3, #11
 80169aa:	e1ce      	b.n	8016d4a <rcl_node_init+0x42a>
    context, "given context in options is NULL", return RCL_RET_INVALID_ARGUMENT);
  if (!rcl_context_is_valid(context)) {
 80169ac:	6a38      	ldr	r0, [r7, #32]
 80169ae:	f7fe ff95 	bl	80158dc <rcl_context_is_valid>
 80169b2:	4603      	mov	r3, r0
 80169b4:	f083 0301 	eor.w	r3, r3, #1
 80169b8:	b2db      	uxtb	r3, r3
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d001      	beq.n	80169c2 <rcl_node_init+0xa2>
    RCL_SET_ERROR_MSG(
      "the given context is not valid, "
      "either rcl_init() was not called or rcl_shutdown() was called.");
    return RCL_RET_NOT_INIT;
 80169be:	2365      	movs	r3, #101	; 0x65
 80169c0:	e1c3      	b.n	8016d4a <rcl_node_init+0x42a>
  }
  // Make sure the node name is valid before allocating memory.
  int validation_result = 0;
 80169c2:	2300      	movs	r3, #0
 80169c4:	637b      	str	r3, [r7, #52]	; 0x34
  ret = rmw_validate_node_name(name, &validation_result, NULL);
 80169c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80169ca:	2200      	movs	r2, #0
 80169cc:	4619      	mov	r1, r3
 80169ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80169d0:	f006 f9ce 	bl	801cd70 <rmw_validate_node_name>
 80169d4:	6778      	str	r0, [r7, #116]	; 0x74
  if (ret != RMW_RET_OK) {
 80169d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d001      	beq.n	80169e0 <rcl_node_init+0xc0>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    return ret;
 80169dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80169de:	e1b4      	b.n	8016d4a <rcl_node_init+0x42a>
  }
  if (validation_result != RMW_NODE_NAME_VALID) {
 80169e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d006      	beq.n	80169f4 <rcl_node_init+0xd4>
    const char * msg = rmw_node_name_validation_result_string(validation_result);
 80169e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169e8:	4618      	mov	r0, r3
 80169ea:	f006 fa4f 	bl	801ce8c <rmw_node_name_validation_result_string>
 80169ee:	6538      	str	r0, [r7, #80]	; 0x50
    RCL_SET_ERROR_MSG(msg);
    return RCL_RET_NODE_INVALID_NAME;
 80169f0:	23c9      	movs	r3, #201	; 0xc9
 80169f2:	e1aa      	b.n	8016d4a <rcl_node_init+0x42a>
  }

  // Process the namespace.
  size_t namespace_length = strlen(namespace_);
 80169f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169f6:	f7e9 fc15 	bl	8000224 <strlen>
 80169fa:	65b8      	str	r0, [r7, #88]	; 0x58
  const char * local_namespace_ = namespace_;
 80169fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169fe:	673b      	str	r3, [r7, #112]	; 0x70
  bool should_free_local_namespace_ = false;
 8016a00:	2300      	movs	r3, #0
 8016a02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  // If the namespace is just an empty string, replace with "/"
  if (namespace_length == 0) {
 8016a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d101      	bne.n	8016a10 <rcl_node_init+0xf0>
    // Have this special case to avoid a memory allocation when "" is passed.
    local_namespace_ = "/";
 8016a0c:	4b99      	ldr	r3, [pc, #612]	; (8016c74 <rcl_node_init+0x354>)
 8016a0e:	673b      	str	r3, [r7, #112]	; 0x70
  }

  // If the namespace does not start with a /, add one.
  if (namespace_length > 0 && namespace_[0] != '/') {
 8016a10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d01a      	beq.n	8016a4c <rcl_node_init+0x12c>
 8016a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a18:	781b      	ldrb	r3, [r3, #0]
 8016a1a:	2b2f      	cmp	r3, #47	; 0x2f
 8016a1c:	d016      	beq.n	8016a4c <rcl_node_init+0x12c>
    local_namespace_ = rcutils_format_string(*allocator, "/%s", namespace_);
 8016a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a22:	9203      	str	r2, [sp, #12]
 8016a24:	4a94      	ldr	r2, [pc, #592]	; (8016c78 <rcl_node_init+0x358>)
 8016a26:	9202      	str	r2, [sp, #8]
 8016a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016a2c:	9201      	str	r2, [sp, #4]
 8016a2e:	691a      	ldr	r2, [r3, #16]
 8016a30:	9200      	str	r2, [sp, #0]
 8016a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016a34:	f005 f9bc 	bl	801bdb0 <rcutils_format_string_limit>
 8016a38:	6738      	str	r0, [r7, #112]	; 0x70
    RCL_CHECK_FOR_NULL_WITH_MSG(
 8016a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d102      	bne.n	8016a46 <rcl_node_init+0x126>
 8016a40:	230a      	movs	r3, #10
 8016a42:	677b      	str	r3, [r7, #116]	; 0x74
 8016a44:	e169      	b.n	8016d1a <rcl_node_init+0x3fa>
      local_namespace_,
      "failed to format node namespace string",
      ret = RCL_RET_BAD_ALLOC; goto cleanup);
    should_free_local_namespace_ = true;
 8016a46:	2301      	movs	r3, #1
 8016a48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  // Make sure the node namespace is valid.
  validation_result = 0;
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	637b      	str	r3, [r7, #52]	; 0x34
  ret = rmw_validate_namespace(local_namespace_, &validation_result, NULL);
 8016a50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016a54:	2200      	movs	r2, #0
 8016a56:	4619      	mov	r1, r3
 8016a58:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8016a5a:	f006 f81b 	bl	801ca94 <rmw_validate_namespace>
 8016a5e:	6778      	str	r0, [r7, #116]	; 0x74
  if (ret != RMW_RET_OK) {
 8016a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	f040 8158 	bne.w	8016d18 <rcl_node_init+0x3f8>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    goto cleanup;
  }
  if (validation_result != RMW_NAMESPACE_VALID) {
 8016a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d007      	beq.n	8016a7e <rcl_node_init+0x15e>
    const char * msg = rmw_namespace_validation_result_string(validation_result);
 8016a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a70:	4618      	mov	r0, r3
 8016a72:	f006 f917 	bl	801cca4 <rmw_namespace_validation_result_string>
 8016a76:	6578      	str	r0, [r7, #84]	; 0x54
    RCL_SET_ERROR_MSG_WITH_FORMAT_STRING("%s, result: %d", msg, validation_result);

    ret = RCL_RET_NODE_INVALID_NAMESPACE;
 8016a78:	23ca      	movs	r3, #202	; 0xca
 8016a7a:	677b      	str	r3, [r7, #116]	; 0x74
    goto cleanup;
 8016a7c:	e14d      	b.n	8016d1a <rcl_node_init+0x3fa>
  }

  // Allocate space for the implementation struct.
  node->impl = (rcl_node_impl_t *)allocator->allocate(sizeof(rcl_node_impl_t), allocator->state);
 8016a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016a84:	6912      	ldr	r2, [r2, #16]
 8016a86:	4611      	mov	r1, r2
 8016a88:	2030      	movs	r0, #48	; 0x30
 8016a8a:	4798      	blx	r3
 8016a8c:	4602      	mov	r2, r0
 8016a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a90:	605a      	str	r2, [r3, #4]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8016a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a94:	685b      	ldr	r3, [r3, #4]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d102      	bne.n	8016aa0 <rcl_node_init+0x180>
 8016a9a:	230a      	movs	r3, #10
 8016a9c:	677b      	str	r3, [r7, #116]	; 0x74
 8016a9e:	e13c      	b.n	8016d1a <rcl_node_init+0x3fa>
    node->impl, "allocating memory failed", ret = RCL_RET_BAD_ALLOC; goto cleanup);
  node->impl->rmw_node_handle = NULL;
 8016aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aa2:	685b      	ldr	r3, [r3, #4]
 8016aa4:	2200      	movs	r2, #0
 8016aa6:	621a      	str	r2, [r3, #32]
  node->impl->graph_guard_condition = NULL;
 8016aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aaa:	685b      	ldr	r3, [r3, #4]
 8016aac:	2200      	movs	r2, #0
 8016aae:	625a      	str	r2, [r3, #36]	; 0x24
  node->impl->logger_name = NULL;
 8016ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ab2:	685b      	ldr	r3, [r3, #4]
 8016ab4:	2200      	movs	r2, #0
 8016ab6:	629a      	str	r2, [r3, #40]	; 0x28
  node->impl->fq_name = NULL;
 8016ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aba:	685b      	ldr	r3, [r3, #4]
 8016abc:	2200      	movs	r2, #0
 8016abe:	62da      	str	r2, [r3, #44]	; 0x2c
  node->impl->options = rcl_node_get_default_options();
 8016ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ac2:	685c      	ldr	r4, [r3, #4]
 8016ac4:	463b      	mov	r3, r7
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	f000 f9de 	bl	8016e88 <rcl_node_get_default_options>
 8016acc:	4625      	mov	r5, r4
 8016ace:	463c      	mov	r4, r7
 8016ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016ad4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8016ad8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  node->context = context;
 8016adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ade:	6a3a      	ldr	r2, [r7, #32]
 8016ae0:	601a      	str	r2, [r3, #0]
  // Initialize node impl.
  ret = rcl_node_options_copy(options, &(node->impl->options));
 8016ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ae4:	685b      	ldr	r3, [r3, #4]
 8016ae6:	4619      	mov	r1, r3
 8016ae8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8016aec:	f000 f9ec 	bl	8016ec8 <rcl_node_options_copy>
 8016af0:	6778      	str	r0, [r7, #116]	; 0x74
  if (RCL_RET_OK != ret) {
 8016af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	f040 80b2 	bne.w	8016c5e <rcl_node_init+0x33e>
    local_namespace_ = remapped_namespace;
  }
#endif // RCL_COMMAND_LINE_ENABLED

  // compute fully qualfied name of the node.
  if ('/' == local_namespace_[strlen(local_namespace_) - 1]) {
 8016afa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8016afc:	f7e9 fb92 	bl	8000224 <strlen>
 8016b00:	4603      	mov	r3, r0
 8016b02:	3b01      	subs	r3, #1
 8016b04:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016b06:	4413      	add	r3, r2
 8016b08:	781b      	ldrb	r3, [r3, #0]
 8016b0a:	2b2f      	cmp	r3, #47	; 0x2f
 8016b0c:	d113      	bne.n	8016b36 <rcl_node_init+0x216>
    node->impl->fq_name = rcutils_format_string(*allocator, "%s%s", local_namespace_, name);
 8016b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b10:	685c      	ldr	r4, [r3, #4]
 8016b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b16:	9204      	str	r2, [sp, #16]
 8016b18:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016b1a:	9203      	str	r2, [sp, #12]
 8016b1c:	4a57      	ldr	r2, [pc, #348]	; (8016c7c <rcl_node_init+0x35c>)
 8016b1e:	9202      	str	r2, [sp, #8]
 8016b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016b24:	9201      	str	r2, [sp, #4]
 8016b26:	691a      	ldr	r2, [r3, #16]
 8016b28:	9200      	str	r2, [sp, #0]
 8016b2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016b2c:	f005 f940 	bl	801bdb0 <rcutils_format_string_limit>
 8016b30:	4603      	mov	r3, r0
 8016b32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016b34:	e012      	b.n	8016b5c <rcl_node_init+0x23c>
  } else {
    node->impl->fq_name = rcutils_format_string(*allocator, "%s/%s", local_namespace_, name);
 8016b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b38:	685c      	ldr	r4, [r3, #4]
 8016b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b3e:	9204      	str	r2, [sp, #16]
 8016b40:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016b42:	9203      	str	r2, [sp, #12]
 8016b44:	4a4e      	ldr	r2, [pc, #312]	; (8016c80 <rcl_node_init+0x360>)
 8016b46:	9202      	str	r2, [sp, #8]
 8016b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016b4c:	9201      	str	r2, [sp, #4]
 8016b4e:	691a      	ldr	r2, [r3, #16]
 8016b50:	9200      	str	r2, [sp, #0]
 8016b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016b54:	f005 f92c 	bl	801bdb0 <rcutils_format_string_limit>
 8016b58:	4603      	mov	r3, r0
 8016b5a:	62e3      	str	r3, [r4, #44]	; 0x2c
  node->impl->logger_name = rcl_create_node_logger_name(name, local_namespace_, allocator);
  RCL_CHECK_FOR_NULL_WITH_MSG(
    node->impl->logger_name, "creating logger name failed", goto fail);
#endif // RCL_LOGGING_ENABLED

  domain_id = node->impl->options.domain_id;
 8016b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b5e:	685b      	ldr	r3, [r3, #4]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (RCL_DEFAULT_DOMAIN_ID == domain_id) {
 8016b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016b6a:	d107      	bne.n	8016b7c <rcl_node_init+0x25c>
    if (RCL_RET_OK != rcl_get_default_domain_id(&domain_id)) {
 8016b6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016b70:	4618      	mov	r0, r3
 8016b72:	f7fe ff67 	bl	8015a44 <rcl_get_default_domain_id>
 8016b76:	4603      	mov	r3, r0
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d172      	bne.n	8016c62 <rcl_node_init+0x342>
      goto fail;
    }
  }
  if (RMW_DEFAULT_DOMAIN_ID == domain_id) {
 8016b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016b82:	d101      	bne.n	8016b88 <rcl_node_init+0x268>
    domain_id = 0u;
 8016b84:	2300      	movs	r3, #0
 8016b86:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Using domain ID of '%zu'", domain_id);
  node->impl->actual_domain_id = domain_id;
 8016b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b8a:	685b      	ldr	r3, [r3, #4]
 8016b8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016b8e:	61da      	str	r2, [r3, #28]

  localhost_only = context->impl->init_options.impl->rmw_init_options.localhost_only;
 8016b90:	6a3b      	ldr	r3, [r7, #32]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	695b      	ldr	r3, [r3, #20]
 8016b96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016b9a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

  node->impl->rmw_node_handle = rmw_create_node(
    &(node->context->impl->rmw_context),
 8016b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	681b      	ldr	r3, [r3, #0]
  node->impl->rmw_node_handle = rmw_create_node(
 8016ba4:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8016ba8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016baa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016bae:	2b01      	cmp	r3, #1
 8016bb0:	bf0c      	ite	eq
 8016bb2:	2301      	moveq	r3, #1
 8016bb4:	2300      	movne	r3, #0
 8016bb6:	b2db      	uxtb	r3, r3
 8016bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016bba:	6854      	ldr	r4, [r2, #4]
 8016bbc:	9300      	str	r3, [sp, #0]
 8016bbe:	460b      	mov	r3, r1
 8016bc0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016bc4:	f007 fac2 	bl	801e14c <rmw_create_node>
 8016bc8:	4603      	mov	r3, r0
 8016bca:	6223      	str	r3, [r4, #32]
    name, local_namespace_, domain_id,
    localhost_only == RMW_LOCALHOST_ONLY_ENABLED);

  RCL_CHECK_FOR_NULL_WITH_MSG(
 8016bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bce:	685b      	ldr	r3, [r3, #4]
 8016bd0:	6a1b      	ldr	r3, [r3, #32]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d047      	beq.n	8016c66 <rcl_node_init+0x346>
    node->impl->rmw_node_handle, rmw_get_error_string().str, goto fail);
  // graph guard condition
  rmw_graph_guard_condition = rmw_node_get_graph_guard_condition(node->impl->rmw_node_handle);
 8016bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bd8:	685b      	ldr	r3, [r3, #4]
 8016bda:	6a1b      	ldr	r3, [r3, #32]
 8016bdc:	4618      	mov	r0, r3
 8016bde:	f007 fba7 	bl	801e330 <rmw_node_get_graph_guard_condition>
 8016be2:	66b8      	str	r0, [r7, #104]	; 0x68
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8016be4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d03f      	beq.n	8016c6a <rcl_node_init+0x34a>
    rmw_graph_guard_condition, rmw_get_error_string().str, goto fail);

  node->impl->graph_guard_condition = (rcl_guard_condition_t *)allocator->allocate(
 8016bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016bf0:	6911      	ldr	r1, [r2, #16]
 8016bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016bf4:	6854      	ldr	r4, [r2, #4]
 8016bf6:	2008      	movs	r0, #8
 8016bf8:	4798      	blx	r3
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	6263      	str	r3, [r4, #36]	; 0x24
    sizeof(rcl_guard_condition_t), allocator->state);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8016bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c00:	685b      	ldr	r3, [r3, #4]
 8016c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d032      	beq.n	8016c6e <rcl_node_init+0x34e>
    node->impl->graph_guard_condition,
    "allocating memory failed",
    goto fail);
  *node->impl->graph_guard_condition = rcl_get_zero_initialized_guard_condition();
 8016c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c0a:	685b      	ldr	r3, [r3, #4]
 8016c0c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016c0e:	463b      	mov	r3, r7
 8016c10:	4618      	mov	r0, r3
 8016c12:	f7ff f937 	bl	8015e84 <rcl_get_zero_initialized_guard_condition>
 8016c16:	4622      	mov	r2, r4
 8016c18:	463b      	mov	r3, r7
 8016c1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016c1e:	e882 0003 	stmia.w	r2, {r0, r1}
  graph_guard_condition_options.allocator = *allocator;
 8016c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c24:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8016c28:	461d      	mov	r5, r3
 8016c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016c2e:	682b      	ldr	r3, [r5, #0]
 8016c30:	6023      	str	r3, [r4, #0]
  ret = rcl_guard_condition_init_from_rmw(
    node->impl->graph_guard_condition,
 8016c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c34:	685b      	ldr	r3, [r3, #4]
  ret = rcl_guard_condition_init_from_rmw(
 8016c36:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8016c38:	466c      	mov	r4, sp
 8016c3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c46:	6a3a      	ldr	r2, [r7, #32]
 8016c48:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016c4a:	4628      	mov	r0, r5
 8016c4c:	f7ff f9ca 	bl	8015fe4 <rcl_guard_condition_init_from_rmw>
 8016c50:	6778      	str	r0, [r7, #116]	; 0x74
    rmw_graph_guard_condition,
    context,
    graph_guard_condition_options);
  if (ret != RCL_RET_OK) {
 8016c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d115      	bne.n	8016c84 <rcl_node_init+0x364>
      goto fail;
    }
  }
#endif // RCL_LOGGING_ENABLED
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Node initialized");
  ret = RCL_RET_OK;
 8016c58:	2300      	movs	r3, #0
 8016c5a:	677b      	str	r3, [r7, #116]	; 0x74
    rcl_node_init,
    (const void *)node,
    (const void *)rcl_node_get_rmw_handle(node),
    rcl_node_get_name(node),
    rcl_node_get_namespace(node));*/
  goto cleanup;
 8016c5c:	e05d      	b.n	8016d1a <rcl_node_init+0x3fa>
    goto fail;
 8016c5e:	bf00      	nop
 8016c60:	e011      	b.n	8016c86 <rcl_node_init+0x366>
      goto fail;
 8016c62:	bf00      	nop
 8016c64:	e00f      	b.n	8016c86 <rcl_node_init+0x366>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8016c66:	bf00      	nop
 8016c68:	e00d      	b.n	8016c86 <rcl_node_init+0x366>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8016c6a:	bf00      	nop
 8016c6c:	e00b      	b.n	8016c86 <rcl_node_init+0x366>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8016c6e:	bf00      	nop
 8016c70:	e009      	b.n	8016c86 <rcl_node_init+0x366>
 8016c72:	bf00      	nop
 8016c74:	080259b8 	.word	0x080259b8
 8016c78:	080259c4 	.word	0x080259c4
 8016c7c:	080259c8 	.word	0x080259c8
 8016c80:	080259d0 	.word	0x080259d0
    goto fail;
 8016c84:	bf00      	nop
fail:
  if (node->impl) {
 8016c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c88:	685b      	ldr	r3, [r3, #4]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d036      	beq.n	8016cfc <rcl_node_init+0x3dc>
        (ret != RCL_RET_OK && ret != RCL_RET_NOT_INIT),
        ROS_PACKAGE_NAME, "Failed to fini publisher for node: %i", ret);
      allocator->deallocate((char *)node->impl->logger_name, allocator->state);
    }
#endif // RCL_LOGGING_ENABLED
    if (node->impl->fq_name) {
 8016c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c90:	685b      	ldr	r3, [r3, #4]
 8016c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d008      	beq.n	8016caa <rcl_node_init+0x38a>
      allocator->deallocate((char *)node->impl->fq_name, allocator->state);
 8016c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c9a:	685b      	ldr	r3, [r3, #4]
 8016c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016c9e:	6852      	ldr	r2, [r2, #4]
 8016ca0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8016ca2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016ca4:	6912      	ldr	r2, [r2, #16]
 8016ca6:	4611      	mov	r1, r2
 8016ca8:	4798      	blx	r3
    }
    if (node->impl->rmw_node_handle) {
 8016caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cac:	685b      	ldr	r3, [r3, #4]
 8016cae:	6a1b      	ldr	r3, [r3, #32]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d006      	beq.n	8016cc2 <rcl_node_init+0x3a2>
      ret = rmw_destroy_node(node->impl->rmw_node_handle);
 8016cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cb6:	685b      	ldr	r3, [r3, #4]
 8016cb8:	6a1b      	ldr	r3, [r3, #32]
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f007 fa74 	bl	801e1a8 <rmw_destroy_node>
 8016cc0:	6778      	str	r0, [r7, #116]	; 0x74
          ROS_PACKAGE_NAME,
          "failed to fini rmw node in error recovery: %s", rmw_get_error_string().str
        );
      }
    }
    if (node->impl->graph_guard_condition) {
 8016cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cc4:	685b      	ldr	r3, [r3, #4]
 8016cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d00f      	beq.n	8016cec <rcl_node_init+0x3cc>
      ret = rcl_guard_condition_fini(node->impl->graph_guard_condition);
 8016ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cce:	685b      	ldr	r3, [r3, #4]
 8016cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f7ff f9a2 	bl	801601c <rcl_guard_condition_fini>
 8016cd8:	6778      	str	r0, [r7, #116]	; 0x74
        RCUTILS_LOG_ERROR_NAMED(
          ROS_PACKAGE_NAME,
          "failed to fini guard condition in error recovery: %s", rcl_get_error_string().str
        );
      }
      allocator->deallocate(node->impl->graph_guard_condition, allocator->state);
 8016cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016cdc:	685b      	ldr	r3, [r3, #4]
 8016cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016ce0:	6852      	ldr	r2, [r2, #4]
 8016ce2:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8016ce4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016ce6:	6912      	ldr	r2, [r2, #16]
 8016ce8:	4611      	mov	r1, r2
 8016cea:	4798      	blx	r3
          "failed to fini arguments in error recovery: %s", rcl_get_error_string().str
        );
      }
    }
#endif // RCL_COMMAND_LINE_ENABLED
    allocator->deallocate(node->impl, allocator->state);
 8016cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016cee:	685b      	ldr	r3, [r3, #4]
 8016cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016cf2:	6850      	ldr	r0, [r2, #4]
 8016cf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016cf6:	6912      	ldr	r2, [r2, #16]
 8016cf8:	4611      	mov	r1, r2
 8016cfa:	4798      	blx	r3
  }
  *node = rcl_get_zero_initialized_node();
 8016cfc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8016cfe:	463b      	mov	r3, r7
 8016d00:	4618      	mov	r0, r3
 8016d02:	f7ff fdfb 	bl	80168fc <rcl_get_zero_initialized_node>
 8016d06:	4622      	mov	r2, r4
 8016d08:	463b      	mov	r3, r7
 8016d0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016d0e:	e882 0003 	stmia.w	r2, {r0, r1}

  ret = fail_ret;
 8016d12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016d14:	677b      	str	r3, [r7, #116]	; 0x74
 8016d16:	e000      	b.n	8016d1a <rcl_node_init+0x3fa>
    goto cleanup;
 8016d18:	bf00      	nop
  // fall through from fail -> cleanup
cleanup:
  if (should_free_local_namespace_) {
 8016d1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d008      	beq.n	8016d34 <rcl_node_init+0x414>
    allocator->deallocate((char *)local_namespace_, allocator->state);
 8016d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d24:	685b      	ldr	r3, [r3, #4]
 8016d26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016d28:	6912      	ldr	r2, [r2, #16]
 8016d2a:	4611      	mov	r1, r2
 8016d2c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8016d2e:	4798      	blx	r3
    local_namespace_ = NULL;
 8016d30:	2300      	movs	r3, #0
 8016d32:	673b      	str	r3, [r7, #112]	; 0x70
  }
  if (NULL != remapped_node_name) {
 8016d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d006      	beq.n	8016d48 <rcl_node_init+0x428>
    allocator->deallocate(remapped_node_name, allocator->state);
 8016d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d3c:	685b      	ldr	r3, [r3, #4]
 8016d3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016d40:	6912      	ldr	r2, [r2, #16]
 8016d42:	4611      	mov	r1, r2
 8016d44:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8016d46:	4798      	blx	r3
  }
  return ret;
 8016d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	3778      	adds	r7, #120	; 0x78
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	bdb0      	pop	{r4, r5, r7, pc}
 8016d52:	bf00      	nop

08016d54 <rcl_node_is_valid_except_context>:
  return result;
}

bool
rcl_node_is_valid_except_context(const rcl_node_t * node)
{
 8016d54:	b480      	push	{r7}
 8016d56:	b083      	sub	sp, #12
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	6078      	str	r0, [r7, #4]
  RCL_CHECK_FOR_NULL_WITH_MSG(node, "rcl node pointer is invalid", return false);
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d101      	bne.n	8016d66 <rcl_node_is_valid_except_context+0x12>
 8016d62:	2300      	movs	r3, #0
 8016d64:	e00d      	b.n	8016d82 <rcl_node_is_valid_except_context+0x2e>
  RCL_CHECK_FOR_NULL_WITH_MSG(node->impl, "rcl node implementation is invalid", return false);
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	685b      	ldr	r3, [r3, #4]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d101      	bne.n	8016d72 <rcl_node_is_valid_except_context+0x1e>
 8016d6e:	2300      	movs	r3, #0
 8016d70:	e007      	b.n	8016d82 <rcl_node_is_valid_except_context+0x2e>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	685b      	ldr	r3, [r3, #4]
 8016d76:	6a1b      	ldr	r3, [r3, #32]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d101      	bne.n	8016d80 <rcl_node_is_valid_except_context+0x2c>
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	e000      	b.n	8016d82 <rcl_node_is_valid_except_context+0x2e>
    node->impl->rmw_node_handle, "rcl node's rmw handle is invalid", return false);
  return true;
 8016d80:	2301      	movs	r3, #1
}
 8016d82:	4618      	mov	r0, r3
 8016d84:	370c      	adds	r7, #12
 8016d86:	46bd      	mov	sp, r7
 8016d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d8c:	4770      	bx	lr

08016d8e <rcl_node_is_valid>:

bool
rcl_node_is_valid(const rcl_node_t * node)
{
 8016d8e:	b580      	push	{r7, lr}
 8016d90:	b084      	sub	sp, #16
 8016d92:	af00      	add	r7, sp, #0
 8016d94:	6078      	str	r0, [r7, #4]
  bool result = rcl_node_is_valid_except_context(node);
 8016d96:	6878      	ldr	r0, [r7, #4]
 8016d98:	f7ff ffdc 	bl	8016d54 <rcl_node_is_valid_except_context>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	73fb      	strb	r3, [r7, #15]
  if (!result) {
 8016da0:	7bfb      	ldrb	r3, [r7, #15]
 8016da2:	f083 0301 	eor.w	r3, r3, #1
 8016da6:	b2db      	uxtb	r3, r3
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d001      	beq.n	8016db0 <rcl_node_is_valid+0x22>
    return result;
 8016dac:	7bfb      	ldrb	r3, [r7, #15]
 8016dae:	e00d      	b.n	8016dcc <rcl_node_is_valid+0x3e>
  }
  if (!rcl_context_is_valid(node->context)) {
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	4618      	mov	r0, r3
 8016db6:	f7fe fd91 	bl	80158dc <rcl_context_is_valid>
 8016dba:	4603      	mov	r3, r0
 8016dbc:	f083 0301 	eor.w	r3, r3, #1
 8016dc0:	b2db      	uxtb	r3, r3
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d001      	beq.n	8016dca <rcl_node_is_valid+0x3c>
    RCL_SET_ERROR_MSG("rcl node's context is invalid");
    return false;
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	e000      	b.n	8016dcc <rcl_node_is_valid+0x3e>
  }
  return true;
 8016dca:	2301      	movs	r3, #1
}
 8016dcc:	4618      	mov	r0, r3
 8016dce:	3710      	adds	r7, #16
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	bd80      	pop	{r7, pc}

08016dd4 <rcl_node_get_name>:

const char *
rcl_node_get_name(const rcl_node_t * node)
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b082      	sub	sp, #8
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	6078      	str	r0, [r7, #4]
  if (!rcl_node_is_valid_except_context(node)) {
 8016ddc:	6878      	ldr	r0, [r7, #4]
 8016dde:	f7ff ffb9 	bl	8016d54 <rcl_node_is_valid_except_context>
 8016de2:	4603      	mov	r3, r0
 8016de4:	f083 0301 	eor.w	r3, r3, #1
 8016de8:	b2db      	uxtb	r3, r3
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d001      	beq.n	8016df2 <rcl_node_get_name+0x1e>
    return NULL;  // error already set
 8016dee:	2300      	movs	r3, #0
 8016df0:	e003      	b.n	8016dfa <rcl_node_get_name+0x26>
  }
  return node->impl->rmw_node_handle->name;
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	685b      	ldr	r3, [r3, #4]
 8016df6:	6a1b      	ldr	r3, [r3, #32]
 8016df8:	689b      	ldr	r3, [r3, #8]
}
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	3708      	adds	r7, #8
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	bd80      	pop	{r7, pc}

08016e02 <rcl_node_get_namespace>:

const char *
rcl_node_get_namespace(const rcl_node_t * node)
{
 8016e02:	b580      	push	{r7, lr}
 8016e04:	b082      	sub	sp, #8
 8016e06:	af00      	add	r7, sp, #0
 8016e08:	6078      	str	r0, [r7, #4]
  if (!rcl_node_is_valid_except_context(node)) {
 8016e0a:	6878      	ldr	r0, [r7, #4]
 8016e0c:	f7ff ffa2 	bl	8016d54 <rcl_node_is_valid_except_context>
 8016e10:	4603      	mov	r3, r0
 8016e12:	f083 0301 	eor.w	r3, r3, #1
 8016e16:	b2db      	uxtb	r3, r3
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d001      	beq.n	8016e20 <rcl_node_get_namespace+0x1e>
    return NULL;  // error already set
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	e003      	b.n	8016e28 <rcl_node_get_namespace+0x26>
  }
  return node->impl->rmw_node_handle->namespace_;
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	685b      	ldr	r3, [r3, #4]
 8016e24:	6a1b      	ldr	r3, [r3, #32]
 8016e26:	68db      	ldr	r3, [r3, #12]
}
 8016e28:	4618      	mov	r0, r3
 8016e2a:	3708      	adds	r7, #8
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	bd80      	pop	{r7, pc}

08016e30 <rcl_node_get_options>:
  return node->impl->fq_name;
}

const rcl_node_options_t *
rcl_node_get_options(const rcl_node_t * node)
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b082      	sub	sp, #8
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
  if (!rcl_node_is_valid_except_context(node)) {
 8016e38:	6878      	ldr	r0, [r7, #4]
 8016e3a:	f7ff ff8b 	bl	8016d54 <rcl_node_is_valid_except_context>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	f083 0301 	eor.w	r3, r3, #1
 8016e44:	b2db      	uxtb	r3, r3
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d001      	beq.n	8016e4e <rcl_node_get_options+0x1e>
    return NULL;  // error already set
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	e001      	b.n	8016e52 <rcl_node_get_options+0x22>
  }
  return &node->impl->options;
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	685b      	ldr	r3, [r3, #4]
}
 8016e52:	4618      	mov	r0, r3
 8016e54:	3708      	adds	r7, #8
 8016e56:	46bd      	mov	sp, r7
 8016e58:	bd80      	pop	{r7, pc}

08016e5a <rcl_node_get_rmw_handle>:
  return RCL_RET_OK;
}

rmw_node_t *
rcl_node_get_rmw_handle(const rcl_node_t * node)
{
 8016e5a:	b580      	push	{r7, lr}
 8016e5c:	b082      	sub	sp, #8
 8016e5e:	af00      	add	r7, sp, #0
 8016e60:	6078      	str	r0, [r7, #4]
  if (!rcl_node_is_valid_except_context(node)) {
 8016e62:	6878      	ldr	r0, [r7, #4]
 8016e64:	f7ff ff76 	bl	8016d54 <rcl_node_is_valid_except_context>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	f083 0301 	eor.w	r3, r3, #1
 8016e6e:	b2db      	uxtb	r3, r3
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d001      	beq.n	8016e78 <rcl_node_get_rmw_handle+0x1e>
    return NULL;  // error already set
 8016e74:	2300      	movs	r3, #0
 8016e76:	e002      	b.n	8016e7e <rcl_node_get_rmw_handle+0x24>
  }
  return node->impl->rmw_node_handle;
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	685b      	ldr	r3, [r3, #4]
 8016e7c:	6a1b      	ldr	r3, [r3, #32]
}
 8016e7e:	4618      	mov	r0, r3
 8016e80:	3708      	adds	r7, #8
 8016e82:	46bd      	mov	sp, r7
 8016e84:	bd80      	pop	{r7, pc}
	...

08016e88 <rcl_node_get_default_options>:
#include "rcl/logging_rosout.h"
#endif // RCL_LOGGING_ENABLED

rcl_node_options_t
rcl_node_get_default_options()
{
 8016e88:	b5b0      	push	{r4, r5, r7, lr}
 8016e8a:	b088      	sub	sp, #32
 8016e8c:	af00      	add	r7, sp, #0
 8016e8e:	61f8      	str	r0, [r7, #28]
    .domain_id = RCL_NODE_OPTIONS_DEFAULT_DOMAIN_ID,
    .use_global_arguments = true,
    .enable_rosout = true,
  };
  // Must set the allocator after because it is not a compile time constant.
  default_options.allocator = rcl_get_default_allocator();
 8016e90:	4c0c      	ldr	r4, [pc, #48]	; (8016ec4 <rcl_node_get_default_options+0x3c>)
 8016e92:	463b      	mov	r3, r7
 8016e94:	4618      	mov	r0, r3
 8016e96:	f004 fc55 	bl	801b744 <rcutils_get_default_allocator>
 8016e9a:	3404      	adds	r4, #4
 8016e9c:	463d      	mov	r5, r7
 8016e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ea2:	682b      	ldr	r3, [r5, #0]
 8016ea4:	6023      	str	r3, [r4, #0]
#ifdef RCL_COMMAND_LINE_ENABLED
  default_options.arguments = rcl_get_zero_initialized_arguments();
#endif // RCL_COMMAND_LINE_ENABLED
  return default_options;
 8016ea6:	69fb      	ldr	r3, [r7, #28]
 8016ea8:	4a06      	ldr	r2, [pc, #24]	; (8016ec4 <rcl_node_get_default_options+0x3c>)
 8016eaa:	461c      	mov	r4, r3
 8016eac:	4615      	mov	r5, r2
 8016eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016eb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016eb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8016eba:	69f8      	ldr	r0, [r7, #28]
 8016ebc:	3720      	adds	r7, #32
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8016ec2:	bf00      	nop
 8016ec4:	20000020 	.word	0x20000020

08016ec8 <rcl_node_options_copy>:

rcl_ret_t
rcl_node_options_copy(
  const rcl_node_options_t * options,
  rcl_node_options_t * options_out)
{
 8016ec8:	b4b0      	push	{r4, r5, r7}
 8016eca:	b083      	sub	sp, #12
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	6078      	str	r0, [r7, #4]
 8016ed0:	6039      	str	r1, [r7, #0]
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_INVALID_ARGUMENT);

  RCL_CHECK_ARGUMENT_FOR_NULL(options, RCL_RET_INVALID_ARGUMENT);
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d101      	bne.n	8016edc <rcl_node_options_copy+0x14>
 8016ed8:	230b      	movs	r3, #11
 8016eda:	e01f      	b.n	8016f1c <rcl_node_options_copy+0x54>
  RCL_CHECK_ARGUMENT_FOR_NULL(options_out, RCL_RET_INVALID_ARGUMENT);
 8016edc:	683b      	ldr	r3, [r7, #0]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d101      	bne.n	8016ee6 <rcl_node_options_copy+0x1e>
 8016ee2:	230b      	movs	r3, #11
 8016ee4:	e01a      	b.n	8016f1c <rcl_node_options_copy+0x54>
  if (options_out == options) {
 8016ee6:	683a      	ldr	r2, [r7, #0]
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	429a      	cmp	r2, r3
 8016eec:	d101      	bne.n	8016ef2 <rcl_node_options_copy+0x2a>
    RCL_SET_ERROR_MSG("Attempted to copy options into itself");
    return RCL_RET_INVALID_ARGUMENT;
 8016eee:	230b      	movs	r3, #11
 8016ef0:	e014      	b.n	8016f1c <rcl_node_options_copy+0x54>
    RCL_SET_ERROR_MSG("Options out must be zero initialized");
    return RCL_RET_INVALID_ARGUMENT;
  }
#endif // RCL_COMMAND_LINE_ENABLED

  options_out->domain_id = options->domain_id;
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	681a      	ldr	r2, [r3, #0]
 8016ef6:	683b      	ldr	r3, [r7, #0]
 8016ef8:	601a      	str	r2, [r3, #0]
  options_out->allocator = options->allocator;
 8016efa:	683a      	ldr	r2, [r7, #0]
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	1d14      	adds	r4, r2, #4
 8016f00:	1d1d      	adds	r5, r3, #4
 8016f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f06:	682b      	ldr	r3, [r5, #0]
 8016f08:	6023      	str	r3, [r4, #0]
  options_out->use_global_arguments = options->use_global_arguments;
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	7e1a      	ldrb	r2, [r3, #24]
 8016f0e:	683b      	ldr	r3, [r7, #0]
 8016f10:	761a      	strb	r2, [r3, #24]
  options_out->enable_rosout = options->enable_rosout;
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	7e5a      	ldrb	r2, [r3, #25]
 8016f16:	683b      	ldr	r3, [r7, #0]
 8016f18:	765a      	strb	r2, [r3, #25]
#ifdef RCL_COMMAND_LINE_ENABLED
  if (NULL != options->arguments.impl) {
    return rcl_arguments_copy(&(options->arguments), &(options_out->arguments));
  }
#endif // RCL_COMMAND_LINE_ENABLED
  return RCL_RET_OK;
 8016f1a:	2300      	movs	r3, #0
}
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	370c      	adds	r7, #12
 8016f20:	46bd      	mov	sp, r7
 8016f22:	bcb0      	pop	{r4, r5, r7}
 8016f24:	4770      	bx	lr
	...

08016f28 <rcl_get_zero_initialized_publisher>:
#include "./common.h"
#include "./publisher_impl.h"

rcl_publisher_t
rcl_get_zero_initialized_publisher()
{
 8016f28:	b480      	push	{r7}
 8016f2a:	af00      	add	r7, sp, #0
  static rcl_publisher_t null_publisher = {0};
  return null_publisher;
 8016f2c:	4b03      	ldr	r3, [pc, #12]	; (8016f3c <rcl_get_zero_initialized_publisher+0x14>)
 8016f2e:	681b      	ldr	r3, [r3, #0]
}
 8016f30:	4618      	mov	r0, r3
 8016f32:	46bd      	mov	sp, r7
 8016f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f38:	4770      	bx	lr
 8016f3a:	bf00      	nop
 8016f3c:	2000e50c 	.word	0x2000e50c

08016f40 <rcl_publisher_init>:
  const rcl_node_t * node,
  const rosidl_message_type_support_t * type_support,
  const char * topic_name,
  const rcl_publisher_options_t * options
)
{
 8016f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f44:	b09a      	sub	sp, #104	; 0x68
 8016f46:	af06      	add	r7, sp, #24
 8016f48:	60f8      	str	r0, [r7, #12]
 8016f4a:	60b9      	str	r1, [r7, #8]
 8016f4c:	607a      	str	r2, [r7, #4]
 8016f4e:	603b      	str	r3, [r7, #0]
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(RCL_RET_NODE_INVALID);
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(RCL_RET_BAD_ALLOC);
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(RCL_RET_ERROR);
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(RCL_RET_TOPIC_NAME_INVALID);

  rcl_ret_t fail_ret = RCL_RET_ERROR;
 8016f50:	2301      	movs	r3, #1
 8016f52:	647b      	str	r3, [r7, #68]	; 0x44

  // Check options and allocator first, so allocator can be used with errors.
  RCL_CHECK_ARGUMENT_FOR_NULL(options, RCL_RET_INVALID_ARGUMENT);
 8016f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d101      	bne.n	8016f5e <rcl_publisher_init+0x1e>
 8016f5a:	230b      	movs	r3, #11
 8016f5c:	e167      	b.n	801722e <rcl_publisher_init+0x2ee>
  rcl_allocator_t * allocator = (rcl_allocator_t *)&options->allocator;
 8016f5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016f60:	3350      	adds	r3, #80	; 0x50
 8016f62:	643b      	str	r3, [r7, #64]	; 0x40
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 8016f64:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8016f66:	f004 fc01 	bl	801b76c <rcutils_allocator_is_valid>
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	f083 0301 	eor.w	r3, r3, #1
 8016f70:	b2db      	uxtb	r3, r3
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d001      	beq.n	8016f7a <rcl_publisher_init+0x3a>
 8016f76:	230b      	movs	r3, #11
 8016f78:	e159      	b.n	801722e <rcl_publisher_init+0x2ee>

  RCL_CHECK_ARGUMENT_FOR_NULL(publisher, RCL_RET_INVALID_ARGUMENT);
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d101      	bne.n	8016f84 <rcl_publisher_init+0x44>
 8016f80:	230b      	movs	r3, #11
 8016f82:	e154      	b.n	801722e <rcl_publisher_init+0x2ee>
  if (publisher->impl) {
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d001      	beq.n	8016f90 <rcl_publisher_init+0x50>
    RCL_SET_ERROR_MSG("publisher already initialized, or memory was unintialized");
    return RCL_RET_ALREADY_INIT;
 8016f8c:	2364      	movs	r3, #100	; 0x64
 8016f8e:	e14e      	b.n	801722e <rcl_publisher_init+0x2ee>
  }
  if (!rcl_node_is_valid(node)) {
 8016f90:	68b8      	ldr	r0, [r7, #8]
 8016f92:	f7ff fefc 	bl	8016d8e <rcl_node_is_valid>
 8016f96:	4603      	mov	r3, r0
 8016f98:	f083 0301 	eor.w	r3, r3, #1
 8016f9c:	b2db      	uxtb	r3, r3
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d001      	beq.n	8016fa6 <rcl_publisher_init+0x66>
    return RCL_RET_NODE_INVALID;  // error already set
 8016fa2:	23c8      	movs	r3, #200	; 0xc8
 8016fa4:	e143      	b.n	801722e <rcl_publisher_init+0x2ee>
  }
  RCL_CHECK_ARGUMENT_FOR_NULL(type_support, RCL_RET_INVALID_ARGUMENT);
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d101      	bne.n	8016fb0 <rcl_publisher_init+0x70>
 8016fac:	230b      	movs	r3, #11
 8016fae:	e13e      	b.n	801722e <rcl_publisher_init+0x2ee>
  RCL_CHECK_ARGUMENT_FOR_NULL(topic_name, RCL_RET_INVALID_ARGUMENT);
 8016fb0:	683b      	ldr	r3, [r7, #0]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d101      	bne.n	8016fba <rcl_publisher_init+0x7a>
 8016fb6:	230b      	movs	r3, #11
 8016fb8:	e139      	b.n	801722e <rcl_publisher_init+0x2ee>
  RCUTILS_LOG_DEBUG_NAMED(
    ROS_PACKAGE_NAME, "Initializing publisher for topic name '%s'", topic_name);


  // Expand the given topic name.
  rcutils_allocator_t rcutils_allocator = *allocator;  // implicit conversion to rcutils version
 8016fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fbc:	f107 041c 	add.w	r4, r7, #28
 8016fc0:	461d      	mov	r5, r3
 8016fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016fc6:	682b      	ldr	r3, [r5, #0]
 8016fc8:	6023      	str	r3, [r4, #0]
  rcutils_string_map_t substitutions_map = rcutils_get_zero_initialized_string_map();
 8016fca:	f005 f90d 	bl	801c1e8 <rcutils_get_zero_initialized_string_map>
 8016fce:	4603      	mov	r3, r0
 8016fd0:	61bb      	str	r3, [r7, #24]
  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions_map, 0, rcutils_allocator);
 8016fd2:	f107 0518 	add.w	r5, r7, #24
 8016fd6:	466c      	mov	r4, sp
 8016fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016fdc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016fe0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016fe4:	f107 031c 	add.w	r3, r7, #28
 8016fe8:	cb0c      	ldmia	r3, {r2, r3}
 8016fea:	2100      	movs	r1, #0
 8016fec:	4628      	mov	r0, r5
 8016fee:	f005 f909 	bl	801c204 <rcutils_string_map_init>
 8016ff2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (rcutils_ret != RCUTILS_RET_OK) {
 8016ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d006      	beq.n	8017008 <rcl_publisher_init+0xc8>
    RCL_SET_ERROR_MSG(rcutils_get_error_string().str);
    if (rcutils_ret == RCUTILS_RET_BAD_ALLOC) {
 8016ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ffc:	2b0a      	cmp	r3, #10
 8016ffe:	d101      	bne.n	8017004 <rcl_publisher_init+0xc4>
      return RCL_RET_BAD_ALLOC;
 8017000:	230a      	movs	r3, #10
 8017002:	e114      	b.n	801722e <rcl_publisher_init+0x2ee>
    }
    return RCL_RET_ERROR;
 8017004:	2301      	movs	r3, #1
 8017006:	e112      	b.n	801722e <rcl_publisher_init+0x2ee>
  }
  rcl_ret_t ret = rcl_get_default_topic_name_substitutions(&substitutions_map);
 8017008:	f107 0318 	add.w	r3, r7, #24
 801700c:	4618      	mov	r0, r3
 801700e:	f7fe ff29 	bl	8015e64 <rcl_get_default_topic_name_substitutions>
 8017012:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (ret != RCL_RET_OK) {
 8017014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017016:	2b00      	cmp	r3, #0
 8017018:	d00c      	beq.n	8017034 <rcl_publisher_init+0xf4>
    rcutils_ret = rcutils_string_map_fini(&substitutions_map);
 801701a:	f107 0318 	add.w	r3, r7, #24
 801701e:	4618      	mov	r0, r3
 8017020:	f005 f954 	bl	801c2cc <rcutils_string_map_fini>
 8017024:	63f8      	str	r0, [r7, #60]	; 0x3c
        ROS_PACKAGE_NAME,
        "failed to fini string_map (%d) during error handling: %s",
        rcutils_ret,
        rcutils_get_error_string().str);
    }
    if (ret == RCL_RET_BAD_ALLOC) {
 8017026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017028:	2b0a      	cmp	r3, #10
 801702a:	d101      	bne.n	8017030 <rcl_publisher_init+0xf0>
      return ret;
 801702c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801702e:	e0fe      	b.n	801722e <rcl_publisher_init+0x2ee>
    }
    return RCL_RET_ERROR;
 8017030:	2301      	movs	r3, #1
 8017032:	e0fc      	b.n	801722e <rcl_publisher_init+0x2ee>
  }
  char * expanded_topic_name = NULL;
 8017034:	2300      	movs	r3, #0
 8017036:	617b      	str	r3, [r7, #20]
  char * remapped_topic_name = NULL;
 8017038:	2300      	movs	r3, #0
 801703a:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = rcl_expand_topic_name(
 801703c:	68b8      	ldr	r0, [r7, #8]
 801703e:	f7ff fec9 	bl	8016dd4 <rcl_node_get_name>
 8017042:	4680      	mov	r8, r0
 8017044:	68b8      	ldr	r0, [r7, #8]
 8017046:	f7ff fedc 	bl	8016e02 <rcl_node_get_namespace>
 801704a:	4684      	mov	ip, r0
 801704c:	f107 0618 	add.w	r6, r7, #24
 8017050:	f107 0314 	add.w	r3, r7, #20
 8017054:	9305      	str	r3, [sp, #20]
 8017056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017058:	466c      	mov	r4, sp
 801705a:	461d      	mov	r5, r3
 801705c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801705e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017060:	682b      	ldr	r3, [r5, #0]
 8017062:	6023      	str	r3, [r4, #0]
 8017064:	4633      	mov	r3, r6
 8017066:	4662      	mov	r2, ip
 8017068:	4641      	mov	r1, r8
 801706a:	6838      	ldr	r0, [r7, #0]
 801706c:	f7fe fd34 	bl	8015ad8 <rcl_expand_topic_name>
 8017070:	64f8      	str	r0, [r7, #76]	; 0x4c
    rcl_node_get_name(node),
    rcl_node_get_namespace(node),
    &substitutions_map,
    *allocator,
    &expanded_topic_name);
  rcutils_ret = rcutils_string_map_fini(&substitutions_map);
 8017072:	f107 0318 	add.w	r3, r7, #24
 8017076:	4618      	mov	r0, r3
 8017078:	f005 f928 	bl	801c2cc <rcutils_string_map_fini>
 801707c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (rcutils_ret != RCUTILS_RET_OK) {
 801707e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017080:	2b00      	cmp	r3, #0
 8017082:	d002      	beq.n	801708a <rcl_publisher_init+0x14a>
    RCL_SET_ERROR_MSG(rcutils_get_error_string().str);
    ret = RCL_RET_ERROR;
 8017084:	2301      	movs	r3, #1
 8017086:	64fb      	str	r3, [r7, #76]	; 0x4c
    goto cleanup;
 8017088:	e0bc      	b.n	8017204 <rcl_publisher_init+0x2c4>
  }
  if (ret != RCL_RET_OK) {
 801708a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801708c:	2b00      	cmp	r3, #0
 801708e:	d00b      	beq.n	80170a8 <rcl_publisher_init+0x168>
    if (ret == RCL_RET_TOPIC_NAME_INVALID || ret == RCL_RET_UNKNOWN_SUBSTITUTION) {
 8017090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017092:	2b67      	cmp	r3, #103	; 0x67
 8017094:	d002      	beq.n	801709c <rcl_publisher_init+0x15c>
 8017096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017098:	2b69      	cmp	r3, #105	; 0x69
 801709a:	d102      	bne.n	80170a2 <rcl_publisher_init+0x162>
      ret = RCL_RET_TOPIC_NAME_INVALID;
 801709c:	2367      	movs	r3, #103	; 0x67
 801709e:	64fb      	str	r3, [r7, #76]	; 0x4c
    } else {
      ret = RCL_RET_ERROR;
    }
    goto cleanup;
 80170a0:	e0b0      	b.n	8017204 <rcl_publisher_init+0x2c4>
      ret = RCL_RET_ERROR;
 80170a2:	2301      	movs	r3, #1
 80170a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    goto cleanup;
 80170a6:	e0ad      	b.n	8017204 <rcl_publisher_init+0x2c4>
  }
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Expanded topic name '%s'", expanded_topic_name);

  const rcl_node_options_t * node_options = rcl_node_get_options(node);
 80170a8:	68b8      	ldr	r0, [r7, #8]
 80170aa:	f7ff fec1 	bl	8016e30 <rcl_node_get_options>
 80170ae:	63b8      	str	r0, [r7, #56]	; 0x38
  if (NULL == node_options) {
 80170b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d102      	bne.n	80170bc <rcl_publisher_init+0x17c>
    ret = RCL_RET_ERROR;
 80170b6:	2301      	movs	r3, #1
 80170b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    goto cleanup;
 80170ba:	e0a3      	b.n	8017204 <rcl_publisher_init+0x2c4>
  } else if (NULL == remapped_topic_name) {
    remapped_topic_name = expanded_topic_name;
    expanded_topic_name = NULL;
  }
#else
  remapped_topic_name = (char *)allocator->allocate(strlen(expanded_topic_name) + 1, allocator->state);
 80170bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170be:	681c      	ldr	r4, [r3, #0]
 80170c0:	697b      	ldr	r3, [r7, #20]
 80170c2:	4618      	mov	r0, r3
 80170c4:	f7e9 f8ae 	bl	8000224 <strlen>
 80170c8:	4603      	mov	r3, r0
 80170ca:	1c5a      	adds	r2, r3, #1
 80170cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170ce:	691b      	ldr	r3, [r3, #16]
 80170d0:	4619      	mov	r1, r3
 80170d2:	4610      	mov	r0, r2
 80170d4:	47a0      	blx	r4
 80170d6:	64b8      	str	r0, [r7, #72]	; 0x48
  memcpy(remapped_topic_name, expanded_topic_name, strlen(expanded_topic_name) + 1);
 80170d8:	697c      	ldr	r4, [r7, #20]
 80170da:	697b      	ldr	r3, [r7, #20]
 80170dc:	4618      	mov	r0, r3
 80170de:	f7e9 f8a1 	bl	8000224 <strlen>
 80170e2:	4603      	mov	r3, r0
 80170e4:	3301      	adds	r3, #1
 80170e6:	461a      	mov	r2, r3
 80170e8:	4621      	mov	r1, r4
 80170ea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80170ec:	f009 fde8 	bl	8020cc0 <memcpy>
#endif // RCL_COMMAND_LINE_ENABLED

  // Validate the expanded topic name.
  int validation_result;
  rmw_ret_t rmw_ret = rmw_validate_full_topic_name(remapped_topic_name, &validation_result, NULL);
 80170f0:	f107 0310 	add.w	r3, r7, #16
 80170f4:	2200      	movs	r2, #0
 80170f6:	4619      	mov	r1, r3
 80170f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80170fa:	f005 fbe5 	bl	801c8c8 <rmw_validate_full_topic_name>
 80170fe:	6378      	str	r0, [r7, #52]	; 0x34
  if (rmw_ret != RMW_RET_OK) {
 8017100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017102:	2b00      	cmp	r3, #0
 8017104:	d002      	beq.n	801710c <rcl_publisher_init+0x1cc>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    ret = RCL_RET_ERROR;
 8017106:	2301      	movs	r3, #1
 8017108:	64fb      	str	r3, [r7, #76]	; 0x4c
    goto cleanup;
 801710a:	e07b      	b.n	8017204 <rcl_publisher_init+0x2c4>
  }
  if (validation_result != RMW_TOPIC_VALID) {
 801710c:	693b      	ldr	r3, [r7, #16]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d002      	beq.n	8017118 <rcl_publisher_init+0x1d8>
    RCL_SET_ERROR_MSG(rmw_full_topic_name_validation_result_string(validation_result));
    ret = RCL_RET_TOPIC_NAME_INVALID;
 8017112:	2367      	movs	r3, #103	; 0x67
 8017114:	64fb      	str	r3, [r7, #76]	; 0x4c
    goto cleanup;
 8017116:	e075      	b.n	8017204 <rcl_publisher_init+0x2c4>
  }
  // Allocate space for the implementation struct.
  publisher->impl = (rcl_publisher_impl_t *)allocator->allocate(
 8017118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801711e:	6912      	ldr	r2, [r2, #16]
 8017120:	4611      	mov	r1, r2
 8017122:	20c8      	movs	r0, #200	; 0xc8
 8017124:	4798      	blx	r3
 8017126:	4602      	mov	r2, r0
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	601a      	str	r2, [r3, #0]
    sizeof(rcl_publisher_impl_t), allocator->state);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d102      	bne.n	801713a <rcl_publisher_init+0x1fa>
 8017134:	230a      	movs	r3, #10
 8017136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017138:	e064      	b.n	8017204 <rcl_publisher_init+0x2c4>

  // Fill out implementation struct.
  // rmw handle (create rmw publisher)
  // TODO(wjwwood): pass along the allocator to rmw when it supports it
  publisher->impl->rmw_handle = rmw_create_publisher(
    rcl_node_get_rmw_handle(node),
 801713a:	68b8      	ldr	r0, [r7, #8]
 801713c:	f7ff fe8d 	bl	8016e5a <rcl_node_get_rmw_handle>
  publisher->impl->rmw_handle = rmw_create_publisher(
 8017140:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017144:	3364      	adds	r3, #100	; 0x64
 8017146:	68fa      	ldr	r2, [r7, #12]
 8017148:	6814      	ldr	r4, [r2, #0]
 801714a:	9300      	str	r3, [sp, #0]
 801714c:	460b      	mov	r3, r1
 801714e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017150:	6879      	ldr	r1, [r7, #4]
 8017152:	f007 f9e9 	bl	801e528 <rmw_create_publisher>
 8017156:	4603      	mov	r3, r0
 8017158:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    type_support,
    remapped_topic_name,
    &(options->qos),
    &(options->rmw_publisher_options));
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8017164:	2b00      	cmp	r3, #0
 8017166:	d028      	beq.n	80171ba <rcl_publisher_init+0x27a>
    publisher->impl->rmw_handle, rmw_get_error_string().str, goto fail);
  // get actual qos, and store it
  rmw_ret = rmw_publisher_get_actual_qos(
    publisher->impl->rmw_handle,
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    &publisher->impl->actual_qos);
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	681b      	ldr	r3, [r3, #0]
  rmw_ret = rmw_publisher_get_actual_qos(
 8017174:	3370      	adds	r3, #112	; 0x70
 8017176:	4619      	mov	r1, r3
 8017178:	4610      	mov	r0, r2
 801717a:	f007 fb29 	bl	801e7d0 <rmw_publisher_get_actual_qos>
 801717e:	6378      	str	r0, [r7, #52]	; 0x34
  if (RMW_RET_OK != rmw_ret) {
 8017180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017182:	2b00      	cmp	r3, #0
 8017184:	d002      	beq.n	801718c <rcl_publisher_init+0x24c>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    ret = RCL_RET_ERROR;
 8017186:	2301      	movs	r3, #1
 8017188:	64fb      	str	r3, [r7, #76]	; 0x4c
    goto fail;
 801718a:	e017      	b.n	80171bc <rcl_publisher_init+0x27c>
  }
  publisher->impl->actual_qos.avoid_ros_namespace_conventions =
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	681b      	ldr	r3, [r3, #0]
    options->qos.avoid_ros_namespace_conventions;
 8017190:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017192:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
  publisher->impl->actual_qos.avoid_ros_namespace_conventions =
 8017196:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
  // options
  publisher->impl->options = *options;
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	681a      	ldr	r2, [r3, #0]
 801719e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80171a0:	4610      	mov	r0, r2
 80171a2:	4619      	mov	r1, r3
 80171a4:	2370      	movs	r3, #112	; 0x70
 80171a6:	461a      	mov	r2, r3
 80171a8:	f009 fd8a 	bl	8020cc0 <memcpy>
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Publisher initialized");
  // context
  publisher->impl->context = node->context;
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	68ba      	ldr	r2, [r7, #8]
 80171b2:	6812      	ldr	r2, [r2, #0]
 80171b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    (const void *)publisher,
    (const void *)node,
    (const void *)publisher->impl->rmw_handle,
    remapped_topic_name,
    options->qos.depth);*/
  goto cleanup;
 80171b8:	e024      	b.n	8017204 <rcl_publisher_init+0x2c4>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 80171ba:	bf00      	nop
fail:
  if (publisher->impl) {
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d01d      	beq.n	8017200 <rcl_publisher_init+0x2c0>
    if (publisher->impl->rmw_handle) {
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d00c      	beq.n	80171ea <rcl_publisher_init+0x2aa>
      rmw_ret_t rmw_fail_ret = rmw_destroy_publisher(
 80171d0:	68b8      	ldr	r0, [r7, #8]
 80171d2:	f7ff fe42 	bl	8016e5a <rcl_node_get_rmw_handle>
 80171d6:	4602      	mov	r2, r0
        rcl_node_get_rmw_handle(node), publisher->impl->rmw_handle);
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	681b      	ldr	r3, [r3, #0]
      rmw_ret_t rmw_fail_ret = rmw_destroy_publisher(
 80171dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80171e0:	4619      	mov	r1, r3
 80171e2:	4610      	mov	r0, r2
 80171e4:	f007 fb06 	bl	801e7f4 <rmw_destroy_publisher>
 80171e8:	6338      	str	r0, [r7, #48]	; 0x30
        RCUTILS_SAFE_FWRITE_TO_STDERR(rmw_get_error_string().str);
        RCUTILS_SAFE_FWRITE_TO_STDERR("\n");
      }
    }

    allocator->deallocate(publisher->impl, allocator->state);
 80171ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80171ec:	685b      	ldr	r3, [r3, #4]
 80171ee:	68fa      	ldr	r2, [r7, #12]
 80171f0:	6810      	ldr	r0, [r2, #0]
 80171f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80171f4:	6912      	ldr	r2, [r2, #16]
 80171f6:	4611      	mov	r1, r2
 80171f8:	4798      	blx	r3
    publisher->impl = NULL;
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	2200      	movs	r2, #0
 80171fe:	601a      	str	r2, [r3, #0]
  }

  ret = fail_ret;
 8017200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017202:	64fb      	str	r3, [r7, #76]	; 0x4c
  // Fall through to cleanup
cleanup:
  if (NULL != expanded_topic_name) {
 8017204:	697b      	ldr	r3, [r7, #20]
 8017206:	2b00      	cmp	r3, #0
 8017208:	d006      	beq.n	8017218 <rcl_publisher_init+0x2d8>
    allocator->deallocate(expanded_topic_name, allocator->state);
 801720a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801720c:	685b      	ldr	r3, [r3, #4]
 801720e:	6978      	ldr	r0, [r7, #20]
 8017210:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017212:	6912      	ldr	r2, [r2, #16]
 8017214:	4611      	mov	r1, r2
 8017216:	4798      	blx	r3
  }
  if (NULL != remapped_topic_name) {
 8017218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801721a:	2b00      	cmp	r3, #0
 801721c:	d006      	beq.n	801722c <rcl_publisher_init+0x2ec>
    allocator->deallocate(remapped_topic_name, allocator->state);
 801721e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017220:	685b      	ldr	r3, [r3, #4]
 8017222:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017224:	6912      	ldr	r2, [r2, #16]
 8017226:	4611      	mov	r1, r2
 8017228:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801722a:	4798      	blx	r3
  }
  return ret;
 801722c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 801722e:	4618      	mov	r0, r3
 8017230:	3750      	adds	r7, #80	; 0x50
 8017232:	46bd      	mov	sp, r7
 8017234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017238 <rcl_publisher_get_default_options>:
  return result;
}

rcl_publisher_options_t
rcl_publisher_get_default_options()
{
 8017238:	b5b0      	push	{r4, r5, r7, lr}
 801723a:	b088      	sub	sp, #32
 801723c:	af00      	add	r7, sp, #0
 801723e:	61f8      	str	r0, [r7, #28]
  // !!! MAKE SURE THAT CHANGES TO THESE DEFAULTS ARE REFLECTED IN THE HEADER DOC STRING
  static rcl_publisher_options_t default_options;
  // Must set the allocator and qos after because they are not a compile time constant.
  default_options.qos = rmw_qos_profile_default;
 8017240:	4a15      	ldr	r2, [pc, #84]	; (8017298 <rcl_publisher_get_default_options+0x60>)
 8017242:	4b16      	ldr	r3, [pc, #88]	; (801729c <rcl_publisher_get_default_options+0x64>)
 8017244:	4610      	mov	r0, r2
 8017246:	4619      	mov	r1, r3
 8017248:	2350      	movs	r3, #80	; 0x50
 801724a:	461a      	mov	r2, r3
 801724c:	f009 fd38 	bl	8020cc0 <memcpy>
  default_options.allocator = rcl_get_default_allocator();
 8017250:	4c11      	ldr	r4, [pc, #68]	; (8017298 <rcl_publisher_get_default_options+0x60>)
 8017252:	463b      	mov	r3, r7
 8017254:	4618      	mov	r0, r3
 8017256:	f004 fa75 	bl	801b744 <rcutils_get_default_allocator>
 801725a:	3450      	adds	r4, #80	; 0x50
 801725c:	463d      	mov	r5, r7
 801725e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017262:	682b      	ldr	r3, [r5, #0]
 8017264:	6023      	str	r3, [r4, #0]
  default_options.rmw_publisher_options = rmw_get_default_publisher_options();
 8017266:	4c0c      	ldr	r4, [pc, #48]	; (8017298 <rcl_publisher_get_default_options+0x60>)
 8017268:	463b      	mov	r3, r7
 801726a:	4618      	mov	r0, r3
 801726c:	f005 faa0 	bl	801c7b0 <rmw_get_default_publisher_options>
 8017270:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8017274:	463a      	mov	r2, r7
 8017276:	e892 0003 	ldmia.w	r2, {r0, r1}
 801727a:	e883 0003 	stmia.w	r3, {r0, r1}
  return default_options;
 801727e:	69fb      	ldr	r3, [r7, #28]
 8017280:	4a05      	ldr	r2, [pc, #20]	; (8017298 <rcl_publisher_get_default_options+0x60>)
 8017282:	4618      	mov	r0, r3
 8017284:	4611      	mov	r1, r2
 8017286:	2370      	movs	r3, #112	; 0x70
 8017288:	461a      	mov	r2, r3
 801728a:	f009 fd19 	bl	8020cc0 <memcpy>
}
 801728e:	69f8      	ldr	r0, [r7, #28]
 8017290:	3720      	adds	r7, #32
 8017292:	46bd      	mov	sp, r7
 8017294:	bdb0      	pop	{r4, r5, r7, pc}
 8017296:	bf00      	nop
 8017298:	2000e510 	.word	0x2000e510
 801729c:	08027208 	.word	0x08027208

080172a0 <rcl_publish>:
rcl_ret_t
rcl_publish(
  const rcl_publisher_t * publisher,
  const void * ros_message,
  rmw_publisher_allocation_t * allocation)
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b084      	sub	sp, #16
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	60f8      	str	r0, [r7, #12]
 80172a8:	60b9      	str	r1, [r7, #8]
 80172aa:	607a      	str	r2, [r7, #4]
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(RCL_RET_PUBLISHER_INVALID);
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(RCL_RET_ERROR);

  if (!rcl_publisher_is_valid(publisher)) {
 80172ac:	68f8      	ldr	r0, [r7, #12]
 80172ae:	f000 f821 	bl	80172f4 <rcl_publisher_is_valid>
 80172b2:	4603      	mov	r3, r0
 80172b4:	f083 0301 	eor.w	r3, r3, #1
 80172b8:	b2db      	uxtb	r3, r3
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d002      	beq.n	80172c4 <rcl_publish+0x24>
    return RCL_RET_PUBLISHER_INVALID;  // error already set
 80172be:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80172c2:	e013      	b.n	80172ec <rcl_publish+0x4c>
  }
  RCL_CHECK_ARGUMENT_FOR_NULL(ros_message, RCL_RET_INVALID_ARGUMENT);
 80172c4:	68bb      	ldr	r3, [r7, #8]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d101      	bne.n	80172ce <rcl_publish+0x2e>
 80172ca:	230b      	movs	r3, #11
 80172cc:	e00e      	b.n	80172ec <rcl_publish+0x4c>
  if (rmw_publish(publisher->impl->rmw_handle, ros_message, allocation) != RMW_RET_OK) {
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80172d6:	687a      	ldr	r2, [r7, #4]
 80172d8:	68b9      	ldr	r1, [r7, #8]
 80172da:	4618      	mov	r0, r3
 80172dc:	f007 f858 	bl	801e390 <rmw_publish>
 80172e0:	4603      	mov	r3, r0
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d001      	beq.n	80172ea <rcl_publish+0x4a>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    return RCL_RET_ERROR;
 80172e6:	2301      	movs	r3, #1
 80172e8:	e000      	b.n	80172ec <rcl_publish+0x4c>
  }
  return RCL_RET_OK;
 80172ea:	2300      	movs	r3, #0
}
 80172ec:	4618      	mov	r0, r3
 80172ee:	3710      	adds	r7, #16
 80172f0:	46bd      	mov	sp, r7
 80172f2:	bd80      	pop	{r7, pc}

080172f4 <rcl_publisher_is_valid>:
  return publisher->impl->context;
}

bool
rcl_publisher_is_valid(const rcl_publisher_t * publisher)
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b082      	sub	sp, #8
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
  if (!rcl_publisher_is_valid_except_context(publisher)) {
 80172fc:	6878      	ldr	r0, [r7, #4]
 80172fe:	f000 f824 	bl	801734a <rcl_publisher_is_valid_except_context>
 8017302:	4603      	mov	r3, r0
 8017304:	f083 0301 	eor.w	r3, r3, #1
 8017308:	b2db      	uxtb	r3, r3
 801730a:	2b00      	cmp	r3, #0
 801730c:	d001      	beq.n	8017312 <rcl_publisher_is_valid+0x1e>
    return false;  // error already set
 801730e:	2300      	movs	r3, #0
 8017310:	e017      	b.n	8017342 <rcl_publisher_is_valid+0x4e>
  }
  if (!rcl_context_is_valid(publisher->impl->context)) {
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801731a:	4618      	mov	r0, r3
 801731c:	f7fe fade 	bl	80158dc <rcl_context_is_valid>
 8017320:	4603      	mov	r3, r0
 8017322:	f083 0301 	eor.w	r3, r3, #1
 8017326:	b2db      	uxtb	r3, r3
 8017328:	2b00      	cmp	r3, #0
 801732a:	d001      	beq.n	8017330 <rcl_publisher_is_valid+0x3c>
    RCL_SET_ERROR_MSG("publisher's context is invalid");
    return false;
 801732c:	2300      	movs	r3, #0
 801732e:	e008      	b.n	8017342 <rcl_publisher_is_valid+0x4e>
  }
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8017338:	2b00      	cmp	r3, #0
 801733a:	d101      	bne.n	8017340 <rcl_publisher_is_valid+0x4c>
 801733c:	2300      	movs	r3, #0
 801733e:	e000      	b.n	8017342 <rcl_publisher_is_valid+0x4e>
    publisher->impl->rmw_handle, "publisher's rmw handle is invalid", return false);
  return true;
 8017340:	2301      	movs	r3, #1
}
 8017342:	4618      	mov	r0, r3
 8017344:	3708      	adds	r7, #8
 8017346:	46bd      	mov	sp, r7
 8017348:	bd80      	pop	{r7, pc}

0801734a <rcl_publisher_is_valid_except_context>:

bool
rcl_publisher_is_valid_except_context(const rcl_publisher_t * publisher)
{
 801734a:	b480      	push	{r7}
 801734c:	b083      	sub	sp, #12
 801734e:	af00      	add	r7, sp, #0
 8017350:	6078      	str	r0, [r7, #4]
  RCL_CHECK_FOR_NULL_WITH_MSG(publisher, "publisher pointer is invalid", return false);
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d101      	bne.n	801735c <rcl_publisher_is_valid_except_context+0x12>
 8017358:	2300      	movs	r3, #0
 801735a:	e00e      	b.n	801737a <rcl_publisher_is_valid_except_context+0x30>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d101      	bne.n	8017368 <rcl_publisher_is_valid_except_context+0x1e>
 8017364:	2300      	movs	r3, #0
 8017366:	e008      	b.n	801737a <rcl_publisher_is_valid_except_context+0x30>
    publisher->impl, "publisher implementation is invalid", return false);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8017370:	2b00      	cmp	r3, #0
 8017372:	d101      	bne.n	8017378 <rcl_publisher_is_valid_except_context+0x2e>
 8017374:	2300      	movs	r3, #0
 8017376:	e000      	b.n	801737a <rcl_publisher_is_valid_except_context+0x30>
    publisher->impl->rmw_handle, "publisher's rmw handle is invalid", return false);
  return true;
 8017378:	2301      	movs	r3, #1
}
 801737a:	4618      	mov	r0, r3
 801737c:	370c      	adds	r7, #12
 801737e:	46bd      	mov	sp, r7
 8017380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017384:	4770      	bx	lr
	...

08017388 <rcl_rmw_implementation_identifier_check>:
  static void f(void) __attribute__((constructor)); \
  static void f(void)
#endif

rcl_ret_t rcl_rmw_implementation_identifier_check(void)
{
 8017388:	b590      	push	{r4, r7, lr}
 801738a:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 801738e:	af02      	add	r7, sp, #8
  // If the environment variable RMW_IMPLEMENTATION is set, or
  // the environment variable RCL_ASSERT_RMW_ID_MATCHES is set,
  // check that the result of `rmw_get_implementation_identifier` matches.
  rcl_ret_t ret = RCL_RET_OK;
 8017390:	2300      	movs	r3, #0
 8017392:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
  rcl_allocator_t allocator = rcl_get_default_allocator();
 8017396:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 801739a:	4618      	mov	r0, r3
 801739c:	f004 f9d2 	bl	801b744 <rcutils_get_default_allocator>
  char * expected_rmw_impl = NULL;
 80173a0:	2300      	movs	r3, #0
 80173a2:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
  const char * expected_rmw_impl_env = NULL;
 80173a6:	2300      	movs	r3, #0
 80173a8:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
  const char * get_env_error_str = rcutils_get_env(
 80173ac:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80173b0:	4619      	mov	r1, r3
 80173b2:	4867      	ldr	r0, [pc, #412]	; (8017550 <rcl_rmw_implementation_identifier_check+0x1c8>)
 80173b4:	f004 fd5c 	bl	801be70 <rcutils_get_env>
 80173b8:	f8c7 0420 	str.w	r0, [r7, #1056]	; 0x420
    RMW_IMPLEMENTATION_ENV_VAR_NAME,
    &expected_rmw_impl_env);
  if (NULL != get_env_error_str) {
 80173bc:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d001      	beq.n	80173c8 <rcl_rmw_implementation_identifier_check+0x40>
    RCL_SET_ERROR_MSG_WITH_FORMAT_STRING(
      "Error getting env var '" RCUTILS_STRINGIFY(RMW_IMPLEMENTATION_ENV_VAR_NAME) "': %s\n",
      get_env_error_str);
    return RCL_RET_ERROR;
 80173c4:	2301      	movs	r3, #1
 80173c6:	e0be      	b.n	8017546 <rcl_rmw_implementation_identifier_check+0x1be>
  }
  if (strlen(expected_rmw_impl_env) > 0) {
 80173c8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80173cc:	781b      	ldrb	r3, [r3, #0]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d016      	beq.n	8017400 <rcl_rmw_implementation_identifier_check+0x78>
    // Copy the environment variable so it doesn't get over-written by the next getenv call.
    expected_rmw_impl = rcutils_strdup(expected_rmw_impl_env, allocator);
 80173d2:	f8d7 4404 	ldr.w	r4, [r7, #1028]	; 0x404
 80173d6:	466a      	mov	r2, sp
 80173d8:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80173dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80173e0:	e882 0003 	stmia.w	r2, {r0, r1}
 80173e4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80173e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80173ea:	4620      	mov	r0, r4
 80173ec:	f004 fea4 	bl	801c138 <rcutils_strdup>
 80173f0:	f8c7 0428 	str.w	r0, [r7, #1064]	; 0x428
    if (!expected_rmw_impl) {
 80173f4:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d101      	bne.n	8017400 <rcl_rmw_implementation_identifier_check+0x78>
      RCL_SET_ERROR_MSG("allocation failed");
      return RCL_RET_BAD_ALLOC;
 80173fc:	230a      	movs	r3, #10
 80173fe:	e0a2      	b.n	8017546 <rcl_rmw_implementation_identifier_check+0x1be>
    }
  }

  char * asserted_rmw_impl = NULL;
 8017400:	2300      	movs	r3, #0
 8017402:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
  const char * asserted_rmw_impl_env = NULL;
 8017406:	2300      	movs	r3, #0
 8017408:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
  get_env_error_str = rcutils_get_env(
 801740c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8017410:	4619      	mov	r1, r3
 8017412:	4850      	ldr	r0, [pc, #320]	; (8017554 <rcl_rmw_implementation_identifier_check+0x1cc>)
 8017414:	f004 fd2c 	bl	801be70 <rcutils_get_env>
 8017418:	f8c7 0420 	str.w	r0, [r7, #1056]	; 0x420
    RCL_ASSERT_RMW_ID_MATCHES_ENV_VAR_NAME, &asserted_rmw_impl_env);
  if (NULL != get_env_error_str) {
 801741c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8017420:	2b00      	cmp	r3, #0
 8017422:	d003      	beq.n	801742c <rcl_rmw_implementation_identifier_check+0xa4>
    RCL_SET_ERROR_MSG_WITH_FORMAT_STRING(
      "Error getting env var '"
      RCUTILS_STRINGIFY(RCL_ASSERT_RMW_ID_MATCHES_ENV_VAR_NAME) "': %s\n",
      get_env_error_str);
    ret = RCL_RET_ERROR;
 8017424:	2301      	movs	r3, #1
 8017426:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    goto cleanup;
 801742a:	e07a      	b.n	8017522 <rcl_rmw_implementation_identifier_check+0x19a>
  }
  if (strlen(asserted_rmw_impl_env) > 0) {
 801742c:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8017430:	781b      	ldrb	r3, [r3, #0]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d018      	beq.n	8017468 <rcl_rmw_implementation_identifier_check+0xe0>
    // Copy the environment variable so it doesn't get over-written by the next getenv call.
    asserted_rmw_impl = rcutils_strdup(asserted_rmw_impl_env, allocator);
 8017436:	f8d7 4400 	ldr.w	r4, [r7, #1024]	; 0x400
 801743a:	466a      	mov	r2, sp
 801743c:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8017440:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017444:	e882 0003 	stmia.w	r2, {r0, r1}
 8017448:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 801744c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801744e:	4620      	mov	r0, r4
 8017450:	f004 fe72 	bl	801c138 <rcutils_strdup>
 8017454:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424
    if (!asserted_rmw_impl) {
 8017458:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801745c:	2b00      	cmp	r3, #0
 801745e:	d103      	bne.n	8017468 <rcl_rmw_implementation_identifier_check+0xe0>
      RCL_SET_ERROR_MSG("allocation failed");
      ret = RCL_RET_BAD_ALLOC;
 8017460:	230a      	movs	r3, #10
 8017462:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
      goto cleanup;
 8017466:	e05c      	b.n	8017522 <rcl_rmw_implementation_identifier_check+0x19a>
    }
  }

  // If both environment variables are set, and they do not match, print an error and exit.
  if (expected_rmw_impl && asserted_rmw_impl && strcmp(expected_rmw_impl, asserted_rmw_impl) != 0) {
 8017468:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 801746c:	2b00      	cmp	r3, #0
 801746e:	d010      	beq.n	8017492 <rcl_rmw_implementation_identifier_check+0x10a>
 8017470:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8017474:	2b00      	cmp	r3, #0
 8017476:	d00c      	beq.n	8017492 <rcl_rmw_implementation_identifier_check+0x10a>
 8017478:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
 801747c:	f8d7 0428 	ldr.w	r0, [r7, #1064]	; 0x428
 8017480:	f7e8 fec6 	bl	8000210 <strcmp>
 8017484:	4603      	mov	r3, r0
 8017486:	2b00      	cmp	r3, #0
 8017488:	d003      	beq.n	8017492 <rcl_rmw_implementation_identifier_check+0x10a>
    RCL_SET_ERROR_MSG_WITH_FORMAT_STRING(
      "Values of RMW_IMPLEMENTATION ('%s') and RCL_ASSERT_RMW_ID_MATCHES ('%s') environment "
      "variables do not match, exiting with %d.",
      expected_rmw_impl, asserted_rmw_impl, RCL_RET_ERROR
    );
    ret = RCL_RET_ERROR;
 801748a:	2301      	movs	r3, #1
 801748c:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    goto cleanup;
 8017490:	e047      	b.n	8017522 <rcl_rmw_implementation_identifier_check+0x19a>
  }

  // Collapse the expected_rmw_impl and asserted_rmw_impl variables so only expected_rmw_impl needs
  // to be used from now on.
  if (expected_rmw_impl && asserted_rmw_impl) {
 8017492:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8017496:	2b00      	cmp	r3, #0
 8017498:	d00f      	beq.n	80174ba <rcl_rmw_implementation_identifier_check+0x132>
 801749a:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d00b      	beq.n	80174ba <rcl_rmw_implementation_identifier_check+0x132>
    // The strings at this point must be equal.
    // No need for asserted_rmw_impl anymore, free the memory.
    allocator.deallocate(asserted_rmw_impl, allocator.state);
 80174a2:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80174a6:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 80174aa:	4611      	mov	r1, r2
 80174ac:	f8d7 0424 	ldr.w	r0, [r7, #1060]	; 0x424
 80174b0:	4798      	blx	r3
    asserted_rmw_impl = NULL;
 80174b2:	2300      	movs	r3, #0
 80174b4:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 80174b8:	e00a      	b.n	80174d0 <rcl_rmw_implementation_identifier_check+0x148>
  } else {
    // One or none are set.
    // If asserted_rmw_impl has contents, move it over to expected_rmw_impl.
    if (asserted_rmw_impl) {
 80174ba:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d006      	beq.n	80174d0 <rcl_rmw_implementation_identifier_check+0x148>
      expected_rmw_impl = asserted_rmw_impl;
 80174c2:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80174c6:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
      asserted_rmw_impl = NULL;
 80174ca:	2300      	movs	r3, #0
 80174cc:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
    }
  }

  // If either environment variable is set, and it does not match, print an error and exit.
  if (expected_rmw_impl) {
 80174d0:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d021      	beq.n	801751c <rcl_rmw_implementation_identifier_check+0x194>
    const char * actual_rmw_impl_id = rmw_get_implementation_identifier();
 80174d8:	f005 ffa0 	bl	801d41c <rmw_get_implementation_identifier>
 80174dc:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
    const rcutils_error_string_t rmw_error_msg = rcl_get_error_string();
 80174e0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80174e4:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 80174e8:	4618      	mov	r0, r3
 80174ea:	f004 fb9d 	bl	801bc28 <rcutils_get_error_string>
    rcl_reset_error();
 80174ee:	f004 fbfb 	bl	801bce8 <rcutils_reset_error>
    if (!actual_rmw_impl_id) {
 80174f2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d103      	bne.n	8017502 <rcl_rmw_implementation_identifier_check+0x17a>
        "(expected identifier of '%s'), with error message '%s', exiting with %d.",
        expected_rmw_impl,
        rmw_error_msg.str,
        RCL_RET_ERROR
      );
      ret = RCL_RET_ERROR;
 80174fa:	2301      	movs	r3, #1
 80174fc:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
      goto cleanup;
 8017500:	e00f      	b.n	8017522 <rcl_rmw_implementation_identifier_check+0x19a>
    }
    if (strcmp(actual_rmw_impl_id, expected_rmw_impl) != 0) {
 8017502:	f8d7 1428 	ldr.w	r1, [r7, #1064]	; 0x428
 8017506:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 801750a:	f7e8 fe81 	bl	8000210 <strcmp>
 801750e:	4603      	mov	r3, r0
 8017510:	2b00      	cmp	r3, #0
 8017512:	d003      	beq.n	801751c <rcl_rmw_implementation_identifier_check+0x194>
        "Expected RMW implementation identifier of '%s' but instead found '%s', exiting with %d.",
        expected_rmw_impl,
        actual_rmw_impl_id,
        RCL_RET_MISMATCHED_RMW_ID
      );
      ret = RCL_RET_MISMATCHED_RMW_ID;
 8017514:	2366      	movs	r3, #102	; 0x66
 8017516:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
      goto cleanup;
 801751a:	e002      	b.n	8017522 <rcl_rmw_implementation_identifier_check+0x19a>
    }
  }
  ret = RCL_RET_OK;
 801751c:	2300      	movs	r3, #0
 801751e:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
// fallthrough
cleanup:
  allocator.deallocate(expected_rmw_impl, allocator.state);
 8017522:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8017526:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 801752a:	4611      	mov	r1, r2
 801752c:	f8d7 0428 	ldr.w	r0, [r7, #1064]	; 0x428
 8017530:	4798      	blx	r3
  allocator.deallocate(asserted_rmw_impl, allocator.state);
 8017532:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8017536:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 801753a:	4611      	mov	r1, r2
 801753c:	f8d7 0424 	ldr.w	r0, [r7, #1060]	; 0x424
 8017540:	4798      	blx	r3
  return ret;
 8017542:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 8017546:	4618      	mov	r0, r3
 8017548:	f207 4734 	addw	r7, r7, #1076	; 0x434
 801754c:	46bd      	mov	sp, r7
 801754e:	bd90      	pop	{r4, r7, pc}
 8017550:	080259d8 	.word	0x080259d8
 8017554:	080259ec 	.word	0x080259ec

08017558 <initialize>:

INITIALIZER(initialize) {
 8017558:	b580      	push	{r7, lr}
 801755a:	b082      	sub	sp, #8
 801755c:	af00      	add	r7, sp, #0
  rcl_ret_t ret = rcl_rmw_implementation_identifier_check();
 801755e:	f7ff ff13 	bl	8017388 <rcl_rmw_implementation_identifier_check>
 8017562:	6078      	str	r0, [r7, #4]
  if (ret != RCL_RET_OK) {
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d002      	beq.n	8017570 <initialize+0x18>
    RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "%s\n", rcl_get_error_string().str);
    exit(ret);
 801756a:	6878      	ldr	r0, [r7, #4]
 801756c:	f009 f9fc 	bl	8020968 <exit>
  }
}
 8017570:	bf00      	nop
 8017572:	3708      	adds	r7, #8
 8017574:	46bd      	mov	sp, r7
 8017576:	bd80      	pop	{r7, pc}

08017578 <rcl_get_security_options_from_environment>:
rcl_ret_t
rcl_get_security_options_from_environment(
  const char * name,
  const rcutils_allocator_t * allocator,
  rmw_security_options_t * security_options)
{
 8017578:	b580      	push	{r7, lr}
 801757a:	b088      	sub	sp, #32
 801757c:	af00      	add	r7, sp, #0
 801757e:	60f8      	str	r0, [r7, #12]
 8017580:	60b9      	str	r1, [r7, #8]
 8017582:	607a      	str	r2, [r7, #4]
  bool use_security = false;
 8017584:	2300      	movs	r3, #0
 8017586:	75fb      	strb	r3, [r7, #23]
  rcl_ret_t ret = rcl_security_enabled(&use_security);
 8017588:	f107 0317 	add.w	r3, r7, #23
 801758c:	4618      	mov	r0, r3
 801758e:	f000 f833 	bl	80175f8 <rcl_security_enabled>
 8017592:	61f8      	str	r0, [r7, #28]
  if (RCL_RET_OK != ret) {
 8017594:	69fb      	ldr	r3, [r7, #28]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d001      	beq.n	801759e <rcl_get_security_options_from_environment+0x26>
    return ret;
 801759a:	69fb      	ldr	r3, [r7, #28]
 801759c:	e027      	b.n	80175ee <rcl_get_security_options_from_environment+0x76>
  }

  RCUTILS_LOG_DEBUG_NAMED(
    ROS_PACKAGE_NAME, "Using security: %s", use_security ? "true" : "false");

  if (!use_security) {
 801759e:	7dfb      	ldrb	r3, [r7, #23]
 80175a0:	f083 0301 	eor.w	r3, r3, #1
 80175a4:	b2db      	uxtb	r3, r3
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d004      	beq.n	80175b4 <rcl_get_security_options_from_environment+0x3c>
    security_options->enforce_security = RMW_SECURITY_ENFORCEMENT_PERMISSIVE;
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	2200      	movs	r2, #0
 80175ae:	701a      	strb	r2, [r3, #0]
    return RCL_RET_OK;
 80175b0:	2300      	movs	r3, #0
 80175b2:	e01c      	b.n	80175ee <rcl_get_security_options_from_environment+0x76>
  }

  ret = rcl_get_enforcement_policy(&security_options->enforce_security);
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	4618      	mov	r0, r3
 80175b8:	f000 f84e 	bl	8017658 <rcl_get_enforcement_policy>
 80175bc:	61f8      	str	r0, [r7, #28]
  if (RCL_RET_OK != ret) {
 80175be:	69fb      	ldr	r3, [r7, #28]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d001      	beq.n	80175c8 <rcl_get_security_options_from_environment+0x50>
    return ret;
 80175c4:	69fb      	ldr	r3, [r7, #28]
 80175c6:	e012      	b.n	80175ee <rcl_get_security_options_from_environment+0x76>
  }

  // File discovery magic here
  char * secure_root = rcl_get_secure_root(name, allocator);
 80175c8:	68b9      	ldr	r1, [r7, #8]
 80175ca:	68f8      	ldr	r0, [r7, #12]
 80175cc:	f000 f904 	bl	80177d8 <rcl_get_secure_root>
 80175d0:	61b8      	str	r0, [r7, #24]
  if (secure_root) {
 80175d2:	69bb      	ldr	r3, [r7, #24]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d003      	beq.n	80175e0 <rcl_get_security_options_from_environment+0x68>
    RCUTILS_LOG_INFO_NAMED(ROS_PACKAGE_NAME, "Found security directory: %s", secure_root);
    security_options->security_root_path = secure_root;
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	69ba      	ldr	r2, [r7, #24]
 80175dc:	605a      	str	r2, [r3, #4]
 80175de:	e005      	b.n	80175ec <rcl_get_security_options_from_environment+0x74>
  } else {
    if (RMW_SECURITY_ENFORCEMENT_ENFORCE == security_options->enforce_security) {
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	781b      	ldrb	r3, [r3, #0]
 80175e4:	2b01      	cmp	r3, #1
 80175e6:	d101      	bne.n	80175ec <rcl_get_security_options_from_environment+0x74>
      return RCL_RET_ERROR;
 80175e8:	2301      	movs	r3, #1
 80175ea:	e000      	b.n	80175ee <rcl_get_security_options_from_environment+0x76>
    }
  }
  return RCL_RET_OK;
 80175ec:	2300      	movs	r3, #0
}
 80175ee:	4618      	mov	r0, r3
 80175f0:	3720      	adds	r7, #32
 80175f2:	46bd      	mov	sp, r7
 80175f4:	bd80      	pop	{r7, pc}
	...

080175f8 <rcl_security_enabled>:

rcl_ret_t
rcl_security_enabled(bool * use_security)
{
 80175f8:	b580      	push	{r7, lr}
 80175fa:	b084      	sub	sp, #16
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	6078      	str	r0, [r7, #4]
  const char * ros_security_enable = NULL;
 8017600:	2300      	movs	r3, #0
 8017602:	60bb      	str	r3, [r7, #8]
  const char * get_env_error_str = NULL;
 8017604:	2300      	movs	r3, #0
 8017606:	60fb      	str	r3, [r7, #12]

  RCL_CHECK_ARGUMENT_FOR_NULL(use_security, RCL_RET_INVALID_ARGUMENT);
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d101      	bne.n	8017612 <rcl_security_enabled+0x1a>
 801760e:	230b      	movs	r3, #11
 8017610:	e019      	b.n	8017646 <rcl_security_enabled+0x4e>

  get_env_error_str = rcutils_get_env(ROS_SECURITY_ENABLE_VAR_NAME, &ros_security_enable);
 8017612:	f107 0308 	add.w	r3, r7, #8
 8017616:	4619      	mov	r1, r3
 8017618:	480d      	ldr	r0, [pc, #52]	; (8017650 <rcl_security_enabled+0x58>)
 801761a:	f004 fc29 	bl	801be70 <rcutils_get_env>
 801761e:	60f8      	str	r0, [r7, #12]
  if (NULL != get_env_error_str) {
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d001      	beq.n	801762a <rcl_security_enabled+0x32>
    RCL_SET_ERROR_MSG_WITH_FORMAT_STRING(
      "Error getting env var '" RCUTILS_STRINGIFY(ROS_SECURITY_ENABLE_VAR_NAME) "': %s\n",
      get_env_error_str);
    return RCL_RET_ERROR;
 8017626:	2301      	movs	r3, #1
 8017628:	e00d      	b.n	8017646 <rcl_security_enabled+0x4e>
  }

  *use_security = (0 == strcmp(ros_security_enable, "true"));
 801762a:	68bb      	ldr	r3, [r7, #8]
 801762c:	4909      	ldr	r1, [pc, #36]	; (8017654 <rcl_security_enabled+0x5c>)
 801762e:	4618      	mov	r0, r3
 8017630:	f7e8 fdee 	bl	8000210 <strcmp>
 8017634:	4603      	mov	r3, r0
 8017636:	2b00      	cmp	r3, #0
 8017638:	bf0c      	ite	eq
 801763a:	2301      	moveq	r3, #1
 801763c:	2300      	movne	r3, #0
 801763e:	b2da      	uxtb	r2, r3
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	701a      	strb	r2, [r3, #0]
  return RCL_RET_OK;
 8017644:	2300      	movs	r3, #0
}
 8017646:	4618      	mov	r0, r3
 8017648:	3710      	adds	r7, #16
 801764a:	46bd      	mov	sp, r7
 801764c:	bd80      	pop	{r7, pc}
 801764e:	bf00      	nop
 8017650:	08025a08 	.word	0x08025a08
 8017654:	08025a1c 	.word	0x08025a1c

08017658 <rcl_get_enforcement_policy>:

rcl_ret_t
rcl_get_enforcement_policy(rmw_security_enforcement_policy_t * policy)
{
 8017658:	b580      	push	{r7, lr}
 801765a:	b084      	sub	sp, #16
 801765c:	af00      	add	r7, sp, #0
 801765e:	6078      	str	r0, [r7, #4]
  const char * ros_enforce_security = NULL;
 8017660:	2300      	movs	r3, #0
 8017662:	60bb      	str	r3, [r7, #8]
  const char * get_env_error_str = NULL;
 8017664:	2300      	movs	r3, #0
 8017666:	60fb      	str	r3, [r7, #12]

  RCL_CHECK_ARGUMENT_FOR_NULL(policy, RCL_RET_INVALID_ARGUMENT);
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	2b00      	cmp	r3, #0
 801766c:	d101      	bne.n	8017672 <rcl_get_enforcement_policy+0x1a>
 801766e:	230b      	movs	r3, #11
 8017670:	e01a      	b.n	80176a8 <rcl_get_enforcement_policy+0x50>

  get_env_error_str = rcutils_get_env(ROS_SECURITY_STRATEGY_VAR_NAME, &ros_enforce_security);
 8017672:	f107 0308 	add.w	r3, r7, #8
 8017676:	4619      	mov	r1, r3
 8017678:	480d      	ldr	r0, [pc, #52]	; (80176b0 <rcl_get_enforcement_policy+0x58>)
 801767a:	f004 fbf9 	bl	801be70 <rcutils_get_env>
 801767e:	60f8      	str	r0, [r7, #12]
  if (NULL != get_env_error_str) {
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d001      	beq.n	801768a <rcl_get_enforcement_policy+0x32>
    RCL_SET_ERROR_MSG_WITH_FORMAT_STRING(
      "Error getting env var '" RCUTILS_STRINGIFY(ROS_SECURITY_STRATEGY_VAR_NAME) "': %s\n",
      get_env_error_str);
    return RCL_RET_ERROR;
 8017686:	2301      	movs	r3, #1
 8017688:	e00e      	b.n	80176a8 <rcl_get_enforcement_policy+0x50>
  }

  *policy = (0 == strcmp(ros_enforce_security, "Enforce")) ?
 801768a:	68bb      	ldr	r3, [r7, #8]
 801768c:	4909      	ldr	r1, [pc, #36]	; (80176b4 <rcl_get_enforcement_policy+0x5c>)
 801768e:	4618      	mov	r0, r3
 8017690:	f7e8 fdbe 	bl	8000210 <strcmp>
 8017694:	4603      	mov	r3, r0
    RMW_SECURITY_ENFORCEMENT_ENFORCE : RMW_SECURITY_ENFORCEMENT_PERMISSIVE;
 8017696:	2b00      	cmp	r3, #0
 8017698:	bf0c      	ite	eq
 801769a:	2301      	moveq	r3, #1
 801769c:	2300      	movne	r3, #0
 801769e:	b2db      	uxtb	r3, r3
 80176a0:	461a      	mov	r2, r3
  *policy = (0 == strcmp(ros_enforce_security, "Enforce")) ?
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	701a      	strb	r2, [r3, #0]
  return RCL_RET_OK;
 80176a6:	2300      	movs	r3, #0
}
 80176a8:	4618      	mov	r0, r3
 80176aa:	3710      	adds	r7, #16
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}
 80176b0:	08025a24 	.word	0x08025a24
 80176b4:	08025a3c 	.word	0x08025a3c

080176b8 <exact_match_lookup>:

char * exact_match_lookup(
  const char * name,
  const char * ros_secure_keystore_env,
  const rcl_allocator_t * allocator)
{
 80176b8:	b5b0      	push	{r4, r5, r7, lr}
 80176ba:	b08c      	sub	sp, #48	; 0x30
 80176bc:	af04      	add	r7, sp, #16
 80176be:	60f8      	str	r0, [r7, #12]
 80176c0:	60b9      	str	r1, [r7, #8]
 80176c2:	607a      	str	r2, [r7, #4]
  // Perform an exact match for the enclave name in directory <root dir>.
  char * secure_root = NULL;
 80176c4:	2300      	movs	r3, #0
 80176c6:	61fb      	str	r3, [r7, #28]
  char * enclaves_dir = NULL;
 80176c8:	2300      	movs	r3, #0
 80176ca:	61bb      	str	r3, [r7, #24]
  enclaves_dir = rcutils_join_path(ros_secure_keystore_env, "enclaves", *allocator);
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	466c      	mov	r4, sp
 80176d0:	f103 0208 	add.w	r2, r3, #8
 80176d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80176d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80176da:	cb0c      	ldmia	r3, {r2, r3}
 80176dc:	491f      	ldr	r1, [pc, #124]	; (801775c <exact_match_lookup+0xa4>)
 80176de:	68b8      	ldr	r0, [r7, #8]
 80176e0:	f004 fb43 	bl	801bd6a <rcutils_join_path>
 80176e4:	61b8      	str	r0, [r7, #24]
  // "/" case when root namespace is explicitly passed in
  if (0 == strcmp(name, "/")) {
 80176e6:	491e      	ldr	r1, [pc, #120]	; (8017760 <exact_match_lookup+0xa8>)
 80176e8:	68f8      	ldr	r0, [r7, #12]
 80176ea:	f7e8 fd91 	bl	8000210 <strcmp>
 80176ee:	4603      	mov	r3, r0
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d102      	bne.n	80176fa <exact_match_lookup+0x42>
    secure_root = enclaves_dir;
 80176f4:	69bb      	ldr	r3, [r7, #24]
 80176f6:	61fb      	str	r3, [r7, #28]
 80176f8:	e02b      	b.n	8017752 <exact_match_lookup+0x9a>
  } else {
    char * relative_path = NULL;
 80176fa:	2300      	movs	r3, #0
 80176fc:	617b      	str	r3, [r7, #20]
    // Get native path, ignore the leading forward slash
    // TODO(ros2team): remove the hard-coded length, use the length of the root namespace instead
    relative_path = rcutils_to_native_path(name + 1, *allocator);
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	1c5c      	adds	r4, r3, #1
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	466d      	mov	r5, sp
 8017706:	f103 020c 	add.w	r2, r3, #12
 801770a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801770e:	e885 0003 	stmia.w	r5, {r0, r1}
 8017712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017714:	4620      	mov	r0, r4
 8017716:	f004 fb3a 	bl	801bd8e <rcutils_to_native_path>
 801771a:	6178      	str	r0, [r7, #20]
    secure_root = rcutils_join_path(enclaves_dir, relative_path, *allocator);
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	466c      	mov	r4, sp
 8017720:	f103 0208 	add.w	r2, r3, #8
 8017724:	ca07      	ldmia	r2, {r0, r1, r2}
 8017726:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801772a:	cb0c      	ldmia	r3, {r2, r3}
 801772c:	6979      	ldr	r1, [r7, #20]
 801772e:	69b8      	ldr	r0, [r7, #24]
 8017730:	f004 fb1b 	bl	801bd6a <rcutils_join_path>
 8017734:	61f8      	str	r0, [r7, #28]
    allocator->deallocate(relative_path, allocator->state);
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	685b      	ldr	r3, [r3, #4]
 801773a:	687a      	ldr	r2, [r7, #4]
 801773c:	6912      	ldr	r2, [r2, #16]
 801773e:	4611      	mov	r1, r2
 8017740:	6978      	ldr	r0, [r7, #20]
 8017742:	4798      	blx	r3
    allocator->deallocate(enclaves_dir, allocator->state);
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	685b      	ldr	r3, [r3, #4]
 8017748:	687a      	ldr	r2, [r7, #4]
 801774a:	6912      	ldr	r2, [r2, #16]
 801774c:	4611      	mov	r1, r2
 801774e:	69b8      	ldr	r0, [r7, #24]
 8017750:	4798      	blx	r3
  }
  return secure_root;
 8017752:	69fb      	ldr	r3, [r7, #28]
}
 8017754:	4618      	mov	r0, r3
 8017756:	3720      	adds	r7, #32
 8017758:	46bd      	mov	sp, r7
 801775a:	bdb0      	pop	{r4, r5, r7, pc}
 801775c:	08025a44 	.word	0x08025a44
 8017760:	08025a50 	.word	0x08025a50

08017764 <dupenv>:

static const char *
dupenv(const char * name, const rcl_allocator_t * allocator, char ** value)
{
 8017764:	b5b0      	push	{r4, r5, r7, lr}
 8017766:	b088      	sub	sp, #32
 8017768:	af02      	add	r7, sp, #8
 801776a:	60f8      	str	r0, [r7, #12]
 801776c:	60b9      	str	r1, [r7, #8]
 801776e:	607a      	str	r2, [r7, #4]
  const char * buffer = NULL;
 8017770:	2300      	movs	r3, #0
 8017772:	613b      	str	r3, [r7, #16]
  const char * error = rcutils_get_env(name, &buffer);
 8017774:	f107 0310 	add.w	r3, r7, #16
 8017778:	4619      	mov	r1, r3
 801777a:	68f8      	ldr	r0, [r7, #12]
 801777c:	f004 fb78 	bl	801be70 <rcutils_get_env>
 8017780:	6178      	str	r0, [r7, #20]
  if (NULL != error) {
 8017782:	697b      	ldr	r3, [r7, #20]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d001      	beq.n	801778c <dupenv+0x28>
    return error;
 8017788:	697b      	ldr	r3, [r7, #20]
 801778a:	e01e      	b.n	80177ca <dupenv+0x66>
  }
  *value = NULL;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	2200      	movs	r2, #0
 8017790:	601a      	str	r2, [r3, #0]
  if (0 != strcmp("", buffer)) {
 8017792:	693b      	ldr	r3, [r7, #16]
 8017794:	781b      	ldrb	r3, [r3, #0]
 8017796:	425b      	negs	r3, r3
 8017798:	2b00      	cmp	r3, #0
 801779a:	d015      	beq.n	80177c8 <dupenv+0x64>
    *value = rcutils_strdup(buffer, *allocator);
 801779c:	693c      	ldr	r4, [r7, #16]
 801779e:	68bb      	ldr	r3, [r7, #8]
 80177a0:	466d      	mov	r5, sp
 80177a2:	f103 020c 	add.w	r2, r3, #12
 80177a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80177aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80177ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80177b0:	4620      	mov	r0, r4
 80177b2:	f004 fcc1 	bl	801c138 <rcutils_strdup>
 80177b6:	4602      	mov	r2, r0
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	601a      	str	r2, [r3, #0]
    if (NULL == *value) {
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d101      	bne.n	80177c8 <dupenv+0x64>
      return "string duplication failed";
 80177c4:	4b03      	ldr	r3, [pc, #12]	; (80177d4 <dupenv+0x70>)
 80177c6:	e000      	b.n	80177ca <dupenv+0x66>
    }
  }
  return NULL;
 80177c8:	2300      	movs	r3, #0
}
 80177ca:	4618      	mov	r0, r3
 80177cc:	3718      	adds	r7, #24
 80177ce:	46bd      	mov	sp, r7
 80177d0:	bdb0      	pop	{r4, r5, r7, pc}
 80177d2:	bf00      	nop
 80177d4:	08025a54 	.word	0x08025a54

080177d8 <rcl_get_secure_root>:

char * rcl_get_secure_root(
  const char * name,
  const rcl_allocator_t * allocator)
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b086      	sub	sp, #24
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]
 80177e0:	6039      	str	r1, [r7, #0]
  RCL_CHECK_ARGUMENT_FOR_NULL(name, NULL);
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d101      	bne.n	80177ec <rcl_get_secure_root+0x14>
 80177e8:	2300      	movs	r3, #0
 80177ea:	e069      	b.n	80178c0 <rcl_get_secure_root+0xe8>
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "allocator is invalid", return NULL);
 80177ec:	6838      	ldr	r0, [r7, #0]
 80177ee:	f003 ffbd 	bl	801b76c <rcutils_allocator_is_valid>
 80177f2:	4603      	mov	r3, r0
 80177f4:	f083 0301 	eor.w	r3, r3, #1
 80177f8:	b2db      	uxtb	r3, r3
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d001      	beq.n	8017802 <rcl_get_secure_root+0x2a>
 80177fe:	2300      	movs	r3, #0
 8017800:	e05e      	b.n	80178c0 <rcl_get_secure_root+0xe8>

  char * secure_root = NULL;
 8017802:	2300      	movs	r3, #0
 8017804:	617b      	str	r3, [r7, #20]
  char * ros_secure_keystore_env = NULL;
 8017806:	2300      	movs	r3, #0
 8017808:	60fb      	str	r3, [r7, #12]
  char * ros_secure_enclave_override_env = NULL;
 801780a:	2300      	movs	r3, #0
 801780c:	60bb      	str	r3, [r7, #8]

  // check keystore environment variable
  const char * error =
    dupenv(ROS_SECURITY_KEYSTORE_VAR_NAME, allocator, &ros_secure_keystore_env);
 801780e:	f107 030c 	add.w	r3, r7, #12
 8017812:	461a      	mov	r2, r3
 8017814:	6839      	ldr	r1, [r7, #0]
 8017816:	482c      	ldr	r0, [pc, #176]	; (80178c8 <rcl_get_secure_root+0xf0>)
 8017818:	f7ff ffa4 	bl	8017764 <dupenv>
 801781c:	6138      	str	r0, [r7, #16]
  if (NULL != error) {
 801781e:	693b      	ldr	r3, [r7, #16]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d001      	beq.n	8017828 <rcl_get_secure_root+0x50>
    RCL_SET_ERROR_MSG_WITH_FORMAT_STRING(
      "failed to get %s: %s", ROS_SECURITY_KEYSTORE_VAR_NAME, error);
    return NULL;
 8017824:	2300      	movs	r3, #0
 8017826:	e04b      	b.n	80178c0 <rcl_get_secure_root+0xe8>
  }

  if (NULL == ros_secure_keystore_env) {
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d101      	bne.n	8017832 <rcl_get_secure_root+0x5a>
    return NULL;  // environment variable was empty
 801782e:	2300      	movs	r3, #0
 8017830:	e046      	b.n	80178c0 <rcl_get_secure_root+0xe8>
  }

  // check enclave override environment variable
  error = dupenv(ROS_SECURITY_ENCLAVE_OVERRIDE, allocator, &ros_secure_enclave_override_env);
 8017832:	f107 0308 	add.w	r3, r7, #8
 8017836:	461a      	mov	r2, r3
 8017838:	6839      	ldr	r1, [r7, #0]
 801783a:	4824      	ldr	r0, [pc, #144]	; (80178cc <rcl_get_secure_root+0xf4>)
 801783c:	f7ff ff92 	bl	8017764 <dupenv>
 8017840:	6138      	str	r0, [r7, #16]
  if (NULL != error) {
 8017842:	693b      	ldr	r3, [r7, #16]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d127      	bne.n	8017898 <rcl_get_secure_root+0xc0>
      "failed to get %s: %s", ROS_SECURITY_ENCLAVE_OVERRIDE, error);
    goto leave_rcl_get_secure_root;
  }

  // given usable environment variables, overwrite with next lookup
  if (NULL != ros_secure_enclave_override_env) {
 8017848:	68bb      	ldr	r3, [r7, #8]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d007      	beq.n	801785e <rcl_get_secure_root+0x86>
    secure_root = exact_match_lookup(
 801784e:	68bb      	ldr	r3, [r7, #8]
 8017850:	68f9      	ldr	r1, [r7, #12]
 8017852:	683a      	ldr	r2, [r7, #0]
 8017854:	4618      	mov	r0, r3
 8017856:	f7ff ff2f 	bl	80176b8 <exact_match_lookup>
 801785a:	6178      	str	r0, [r7, #20]
 801785c:	e006      	b.n	801786c <rcl_get_secure_root+0x94>
      ros_secure_enclave_override_env,
      ros_secure_keystore_env,
      allocator);
  } else {
    secure_root = exact_match_lookup(
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	683a      	ldr	r2, [r7, #0]
 8017862:	4619      	mov	r1, r3
 8017864:	6878      	ldr	r0, [r7, #4]
 8017866:	f7ff ff27 	bl	80176b8 <exact_match_lookup>
 801786a:	6178      	str	r0, [r7, #20]
      name,
      ros_secure_keystore_env,
      allocator);
  }

  if (NULL == secure_root) {
 801786c:	697b      	ldr	r3, [r7, #20]
 801786e:	2b00      	cmp	r3, #0
 8017870:	d014      	beq.n	801789c <rcl_get_secure_root+0xc4>
      "SECURITY ERROR: unable to find a folder matching the name '%s' in '%s'. ",
      name, ros_secure_keystore_env);
    goto leave_rcl_get_secure_root;
  }

  if (!rcutils_is_directory(secure_root)) {
 8017872:	6978      	ldr	r0, [r7, #20]
 8017874:	f004 fa6e 	bl	801bd54 <rcutils_is_directory>
 8017878:	4603      	mov	r3, r0
 801787a:	f083 0301 	eor.w	r3, r3, #1
 801787e:	b2db      	uxtb	r3, r3
 8017880:	2b00      	cmp	r3, #0
 8017882:	d00d      	beq.n	80178a0 <rcl_get_secure_root+0xc8>
    RCL_SET_ERROR_MSG_WITH_FORMAT_STRING(
      "SECURITY ERROR: directory '%s' does not exist.", secure_root);
    allocator->deallocate(secure_root, allocator->state);
 8017884:	683b      	ldr	r3, [r7, #0]
 8017886:	685b      	ldr	r3, [r3, #4]
 8017888:	683a      	ldr	r2, [r7, #0]
 801788a:	6912      	ldr	r2, [r2, #16]
 801788c:	4611      	mov	r1, r2
 801788e:	6978      	ldr	r0, [r7, #20]
 8017890:	4798      	blx	r3
    secure_root = NULL;
 8017892:	2300      	movs	r3, #0
 8017894:	617b      	str	r3, [r7, #20]
 8017896:	e004      	b.n	80178a2 <rcl_get_secure_root+0xca>
    goto leave_rcl_get_secure_root;
 8017898:	bf00      	nop
 801789a:	e002      	b.n	80178a2 <rcl_get_secure_root+0xca>
    goto leave_rcl_get_secure_root;
 801789c:	bf00      	nop
 801789e:	e000      	b.n	80178a2 <rcl_get_secure_root+0xca>
  }

leave_rcl_get_secure_root:
 80178a0:	bf00      	nop
  allocator->deallocate(ros_secure_enclave_override_env, allocator->state);
 80178a2:	683b      	ldr	r3, [r7, #0]
 80178a4:	685b      	ldr	r3, [r3, #4]
 80178a6:	68b8      	ldr	r0, [r7, #8]
 80178a8:	683a      	ldr	r2, [r7, #0]
 80178aa:	6912      	ldr	r2, [r2, #16]
 80178ac:	4611      	mov	r1, r2
 80178ae:	4798      	blx	r3
  allocator->deallocate(ros_secure_keystore_env, allocator->state);
 80178b0:	683b      	ldr	r3, [r7, #0]
 80178b2:	685b      	ldr	r3, [r3, #4]
 80178b4:	68f8      	ldr	r0, [r7, #12]
 80178b6:	683a      	ldr	r2, [r7, #0]
 80178b8:	6912      	ldr	r2, [r2, #16]
 80178ba:	4611      	mov	r1, r2
 80178bc:	4798      	blx	r3
  return secure_root;
 80178be:	697b      	ldr	r3, [r7, #20]
}
 80178c0:	4618      	mov	r0, r3
 80178c2:	3718      	adds	r7, #24
 80178c4:	46bd      	mov	sp, r7
 80178c6:	bd80      	pop	{r7, pc}
 80178c8:	08025a70 	.word	0x08025a70
 80178cc:	08025a88 	.word	0x08025a88

080178d0 <rcl_service_get_options>:

#define _service_get_options(service) & service->impl->options

const rcl_service_options_t *
rcl_service_get_options(const rcl_service_t * service)
{
 80178d0:	b580      	push	{r7, lr}
 80178d2:	b082      	sub	sp, #8
 80178d4:	af00      	add	r7, sp, #0
 80178d6:	6078      	str	r0, [r7, #4]
  if (!rcl_service_is_valid(service)) {
 80178d8:	6878      	ldr	r0, [r7, #4]
 80178da:	f000 f8cb 	bl	8017a74 <rcl_service_is_valid>
 80178de:	4603      	mov	r3, r0
 80178e0:	f083 0301 	eor.w	r3, r3, #1
 80178e4:	b2db      	uxtb	r3, r3
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d001      	beq.n	80178ee <rcl_service_get_options+0x1e>
    return NULL;  // error already set
 80178ea:	2300      	movs	r3, #0
 80178ec:	e001      	b.n	80178f2 <rcl_service_get_options+0x22>
  }
  return _service_get_options(service);
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	681b      	ldr	r3, [r3, #0]
}
 80178f2:	4618      	mov	r0, r3
 80178f4:	3708      	adds	r7, #8
 80178f6:	46bd      	mov	sp, r7
 80178f8:	bd80      	pop	{r7, pc}

080178fa <rcl_service_get_rmw_handle>:

rmw_service_t *
rcl_service_get_rmw_handle(const rcl_service_t * service)
{
 80178fa:	b580      	push	{r7, lr}
 80178fc:	b082      	sub	sp, #8
 80178fe:	af00      	add	r7, sp, #0
 8017900:	6078      	str	r0, [r7, #4]
  if (!rcl_service_is_valid(service)) {
 8017902:	6878      	ldr	r0, [r7, #4]
 8017904:	f000 f8b6 	bl	8017a74 <rcl_service_is_valid>
 8017908:	4603      	mov	r3, r0
 801790a:	f083 0301 	eor.w	r3, r3, #1
 801790e:	b2db      	uxtb	r3, r3
 8017910:	2b00      	cmp	r3, #0
 8017912:	d001      	beq.n	8017918 <rcl_service_get_rmw_handle+0x1e>
    return NULL;  // error already set
 8017914:	2300      	movs	r3, #0
 8017916:	e002      	b.n	801791e <rcl_service_get_rmw_handle+0x24>
  }
  return service->impl->rmw_handle;
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801791e:	4618      	mov	r0, r3
 8017920:	3708      	adds	r7, #8
 8017922:	46bd      	mov	sp, r7
 8017924:	bd80      	pop	{r7, pc}

08017926 <rcl_take_request_with_info>:
rcl_ret_t
rcl_take_request_with_info(
  const rcl_service_t * service,
  rmw_service_info_t * request_header,
  void * ros_request)
{
 8017926:	b580      	push	{r7, lr}
 8017928:	b088      	sub	sp, #32
 801792a:	af00      	add	r7, sp, #0
 801792c:	60f8      	str	r0, [r7, #12]
 801792e:	60b9      	str	r1, [r7, #8]
 8017930:	607a      	str	r2, [r7, #4]
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Service server taking service request");
  if (!rcl_service_is_valid(service)) {
 8017932:	68f8      	ldr	r0, [r7, #12]
 8017934:	f000 f89e 	bl	8017a74 <rcl_service_is_valid>
 8017938:	4603      	mov	r3, r0
 801793a:	f083 0301 	eor.w	r3, r3, #1
 801793e:	b2db      	uxtb	r3, r3
 8017940:	2b00      	cmp	r3, #0
 8017942:	d002      	beq.n	801794a <rcl_take_request_with_info+0x24>
    return RCL_RET_SERVICE_INVALID;  // error already set
 8017944:	f44f 7316 	mov.w	r3, #600	; 0x258
 8017948:	e032      	b.n	80179b0 <rcl_take_request_with_info+0x8a>
  }
  RCL_CHECK_ARGUMENT_FOR_NULL(request_header, RCL_RET_INVALID_ARGUMENT);
 801794a:	68bb      	ldr	r3, [r7, #8]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d101      	bne.n	8017954 <rcl_take_request_with_info+0x2e>
 8017950:	230b      	movs	r3, #11
 8017952:	e02d      	b.n	80179b0 <rcl_take_request_with_info+0x8a>
  RCL_CHECK_ARGUMENT_FOR_NULL(ros_request, RCL_RET_INVALID_ARGUMENT);
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d101      	bne.n	801795e <rcl_take_request_with_info+0x38>
 801795a:	230b      	movs	r3, #11
 801795c:	e028      	b.n	80179b0 <rcl_take_request_with_info+0x8a>
  const rcl_service_options_t * options = rcl_service_get_options(service);
 801795e:	68f8      	ldr	r0, [r7, #12]
 8017960:	f7ff ffb6 	bl	80178d0 <rcl_service_get_options>
 8017964:	61f8      	str	r0, [r7, #28]
  RCL_CHECK_FOR_NULL_WITH_MSG(options, "Failed to get service options", return RCL_RET_ERROR);
 8017966:	69fb      	ldr	r3, [r7, #28]
 8017968:	2b00      	cmp	r3, #0
 801796a:	d101      	bne.n	8017970 <rcl_take_request_with_info+0x4a>
 801796c:	2301      	movs	r3, #1
 801796e:	e01f      	b.n	80179b0 <rcl_take_request_with_info+0x8a>

  bool taken = false;
 8017970:	2300      	movs	r3, #0
 8017972:	75fb      	strb	r3, [r7, #23]
  rmw_ret_t ret = rmw_take_request(
    service->impl->rmw_handle, request_header, ros_request, &taken);
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	6e98      	ldr	r0, [r3, #104]	; 0x68
  rmw_ret_t ret = rmw_take_request(
 801797a:	f107 0317 	add.w	r3, r7, #23
 801797e:	687a      	ldr	r2, [r7, #4]
 8017980:	68b9      	ldr	r1, [r7, #8]
 8017982:	f006 ffdd 	bl	801e940 <rmw_take_request>
 8017986:	61b8      	str	r0, [r7, #24]
  if (RMW_RET_OK != ret) {
 8017988:	69bb      	ldr	r3, [r7, #24]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d006      	beq.n	801799c <rcl_take_request_with_info+0x76>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    if (RMW_RET_BAD_ALLOC == ret) {
 801798e:	69bb      	ldr	r3, [r7, #24]
 8017990:	2b0a      	cmp	r3, #10
 8017992:	d101      	bne.n	8017998 <rcl_take_request_with_info+0x72>
      return RCL_RET_BAD_ALLOC;
 8017994:	230a      	movs	r3, #10
 8017996:	e00b      	b.n	80179b0 <rcl_take_request_with_info+0x8a>
    }
    return RCL_RET_ERROR;
 8017998:	2301      	movs	r3, #1
 801799a:	e009      	b.n	80179b0 <rcl_take_request_with_info+0x8a>
  }
  RCUTILS_LOG_DEBUG_NAMED(
    ROS_PACKAGE_NAME, "Service take request succeeded: %s", taken ? "true" : "false");
  if (!taken) {
 801799c:	7dfb      	ldrb	r3, [r7, #23]
 801799e:	f083 0301 	eor.w	r3, r3, #1
 80179a2:	b2db      	uxtb	r3, r3
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d002      	beq.n	80179ae <rcl_take_request_with_info+0x88>
    return RCL_RET_SERVICE_TAKE_FAILED;
 80179a8:	f240 2359 	movw	r3, #601	; 0x259
 80179ac:	e000      	b.n	80179b0 <rcl_take_request_with_info+0x8a>
  }
  return RCL_RET_OK;
 80179ae:	2300      	movs	r3, #0
}
 80179b0:	4618      	mov	r0, r3
 80179b2:	3720      	adds	r7, #32
 80179b4:	46bd      	mov	sp, r7
 80179b6:	bd80      	pop	{r7, pc}

080179b8 <rcl_take_request>:
rcl_ret_t
rcl_take_request(
  const rcl_service_t * service,
  rmw_request_id_t * request_header,
  void * ros_request)
{
 80179b8:	b5b0      	push	{r4, r5, r7, lr}
 80179ba:	b090      	sub	sp, #64	; 0x40
 80179bc:	af00      	add	r7, sp, #0
 80179be:	60f8      	str	r0, [r7, #12]
 80179c0:	60b9      	str	r1, [r7, #8]
 80179c2:	607a      	str	r2, [r7, #4]
  rmw_service_info_t header;
  header.request_id = *request_header;
 80179c4:	68bb      	ldr	r3, [r7, #8]
 80179c6:	f107 0420 	add.w	r4, r7, #32
 80179ca:	461d      	mov	r5, r3
 80179cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80179ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80179d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80179d4:	e884 0003 	stmia.w	r4, {r0, r1}
  rcl_ret_t ret = rcl_take_request_with_info(service, &header, ros_request);
 80179d8:	f107 0310 	add.w	r3, r7, #16
 80179dc:	687a      	ldr	r2, [r7, #4]
 80179de:	4619      	mov	r1, r3
 80179e0:	68f8      	ldr	r0, [r7, #12]
 80179e2:	f7ff ffa0 	bl	8017926 <rcl_take_request_with_info>
 80179e6:	63f8      	str	r0, [r7, #60]	; 0x3c
  *request_header = header.request_id;
 80179e8:	68bb      	ldr	r3, [r7, #8]
 80179ea:	461d      	mov	r5, r3
 80179ec:	f107 0420 	add.w	r4, r7, #32
 80179f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80179f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80179f8:	e885 0003 	stmia.w	r5, {r0, r1}
  return ret;
 80179fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80179fe:	4618      	mov	r0, r3
 8017a00:	3740      	adds	r7, #64	; 0x40
 8017a02:	46bd      	mov	sp, r7
 8017a04:	bdb0      	pop	{r4, r5, r7, pc}

08017a06 <rcl_send_response>:
rcl_ret_t
rcl_send_response(
  const rcl_service_t * service,
  rmw_request_id_t * request_header,
  void * ros_response)
{
 8017a06:	b580      	push	{r7, lr}
 8017a08:	b086      	sub	sp, #24
 8017a0a:	af00      	add	r7, sp, #0
 8017a0c:	60f8      	str	r0, [r7, #12]
 8017a0e:	60b9      	str	r1, [r7, #8]
 8017a10:	607a      	str	r2, [r7, #4]
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Sending service response");
  if (!rcl_service_is_valid(service)) {
 8017a12:	68f8      	ldr	r0, [r7, #12]
 8017a14:	f000 f82e 	bl	8017a74 <rcl_service_is_valid>
 8017a18:	4603      	mov	r3, r0
 8017a1a:	f083 0301 	eor.w	r3, r3, #1
 8017a1e:	b2db      	uxtb	r3, r3
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d002      	beq.n	8017a2a <rcl_send_response+0x24>
    return RCL_RET_SERVICE_INVALID;  // error already set
 8017a24:	f44f 7316 	mov.w	r3, #600	; 0x258
 8017a28:	e020      	b.n	8017a6c <rcl_send_response+0x66>
  }
  RCL_CHECK_ARGUMENT_FOR_NULL(request_header, RCL_RET_INVALID_ARGUMENT);
 8017a2a:	68bb      	ldr	r3, [r7, #8]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d101      	bne.n	8017a34 <rcl_send_response+0x2e>
 8017a30:	230b      	movs	r3, #11
 8017a32:	e01b      	b.n	8017a6c <rcl_send_response+0x66>
  RCL_CHECK_ARGUMENT_FOR_NULL(ros_response, RCL_RET_INVALID_ARGUMENT);
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d101      	bne.n	8017a3e <rcl_send_response+0x38>
 8017a3a:	230b      	movs	r3, #11
 8017a3c:	e016      	b.n	8017a6c <rcl_send_response+0x66>
  const rcl_service_options_t * options = rcl_service_get_options(service);
 8017a3e:	68f8      	ldr	r0, [r7, #12]
 8017a40:	f7ff ff46 	bl	80178d0 <rcl_service_get_options>
 8017a44:	6178      	str	r0, [r7, #20]
  RCL_CHECK_FOR_NULL_WITH_MSG(options, "Failed to get service options", return RCL_RET_ERROR);
 8017a46:	697b      	ldr	r3, [r7, #20]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d101      	bne.n	8017a50 <rcl_send_response+0x4a>
 8017a4c:	2301      	movs	r3, #1
 8017a4e:	e00d      	b.n	8017a6c <rcl_send_response+0x66>

  if (rmw_send_response(
      service->impl->rmw_handle, request_header, ros_response) != RMW_RET_OK)
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  if (rmw_send_response(
 8017a56:	687a      	ldr	r2, [r7, #4]
 8017a58:	68b9      	ldr	r1, [r7, #8]
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	f007 f81a 	bl	801ea94 <rmw_send_response>
 8017a60:	4603      	mov	r3, r0
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d001      	beq.n	8017a6a <rcl_send_response+0x64>
  {
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    return RCL_RET_ERROR;
 8017a66:	2301      	movs	r3, #1
 8017a68:	e000      	b.n	8017a6c <rcl_send_response+0x66>
  }
  return RCL_RET_OK;
 8017a6a:	2300      	movs	r3, #0
}
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	3718      	adds	r7, #24
 8017a70:	46bd      	mov	sp, r7
 8017a72:	bd80      	pop	{r7, pc}

08017a74 <rcl_service_is_valid>:

bool
rcl_service_is_valid(const rcl_service_t * service)
{
 8017a74:	b480      	push	{r7}
 8017a76:	b083      	sub	sp, #12
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
  RCL_CHECK_FOR_NULL_WITH_MSG(service, "service pointer is invalid", return false);
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d101      	bne.n	8017a86 <rcl_service_is_valid+0x12>
 8017a82:	2300      	movs	r3, #0
 8017a84:	e00d      	b.n	8017aa2 <rcl_service_is_valid+0x2e>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d101      	bne.n	8017a92 <rcl_service_is_valid+0x1e>
 8017a8e:	2300      	movs	r3, #0
 8017a90:	e007      	b.n	8017aa2 <rcl_service_is_valid+0x2e>
    service->impl, "service's implementation is invalid", return false);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d101      	bne.n	8017aa0 <rcl_service_is_valid+0x2c>
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	e000      	b.n	8017aa2 <rcl_service_is_valid+0x2e>
    service->impl->rmw_handle, "service's rmw handle is invalid", return false);
  return true;
 8017aa0:	2301      	movs	r3, #1
}
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	370c      	adds	r7, #12
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aac:	4770      	bx	lr
	...

08017ab0 <rcl_get_zero_initialized_subscription>:
#include "./subscription_impl.h"


rcl_subscription_t
rcl_get_zero_initialized_subscription()
{
 8017ab0:	b480      	push	{r7}
 8017ab2:	af00      	add	r7, sp, #0
  static rcl_subscription_t null_subscription = {0};
  return null_subscription;
 8017ab4:	4b03      	ldr	r3, [pc, #12]	; (8017ac4 <rcl_get_zero_initialized_subscription+0x14>)
 8017ab6:	681b      	ldr	r3, [r3, #0]
}
 8017ab8:	4618      	mov	r0, r3
 8017aba:	46bd      	mov	sp, r7
 8017abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac0:	4770      	bx	lr
 8017ac2:	bf00      	nop
 8017ac4:	2000e580 	.word	0x2000e580

08017ac8 <rcl_subscription_init>:
  const rcl_node_t * node,
  const rosidl_message_type_support_t * type_support,
  const char * topic_name,
  const rcl_subscription_options_t * options
)
{
 8017ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017acc:	b09a      	sub	sp, #104	; 0x68
 8017ace:	af06      	add	r7, sp, #24
 8017ad0:	60f8      	str	r0, [r7, #12]
 8017ad2:	60b9      	str	r1, [r7, #8]
 8017ad4:	607a      	str	r2, [r7, #4]
 8017ad6:	603b      	str	r3, [r7, #0]
  rcl_ret_t fail_ret = RCL_RET_ERROR;
 8017ad8:	2301      	movs	r3, #1
 8017ada:	647b      	str	r3, [r7, #68]	; 0x44

  // Check options and allocator first, so the allocator can be used in errors.
  RCL_CHECK_ARGUMENT_FOR_NULL(options, RCL_RET_INVALID_ARGUMENT);
 8017adc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d101      	bne.n	8017ae6 <rcl_subscription_init+0x1e>
 8017ae2:	230b      	movs	r3, #11
 8017ae4:	e163      	b.n	8017dae <rcl_subscription_init+0x2e6>
  rcl_allocator_t * allocator = (rcl_allocator_t *)&options->allocator;
 8017ae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017ae8:	3350      	adds	r3, #80	; 0x50
 8017aea:	643b      	str	r3, [r7, #64]	; 0x40
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 8017aec:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017aee:	f003 fe3d 	bl	801b76c <rcutils_allocator_is_valid>
 8017af2:	4603      	mov	r3, r0
 8017af4:	f083 0301 	eor.w	r3, r3, #1
 8017af8:	b2db      	uxtb	r3, r3
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d001      	beq.n	8017b02 <rcl_subscription_init+0x3a>
 8017afe:	230b      	movs	r3, #11
 8017b00:	e155      	b.n	8017dae <rcl_subscription_init+0x2e6>
  RCL_CHECK_ARGUMENT_FOR_NULL(subscription, RCL_RET_INVALID_ARGUMENT);
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d101      	bne.n	8017b0c <rcl_subscription_init+0x44>
 8017b08:	230b      	movs	r3, #11
 8017b0a:	e150      	b.n	8017dae <rcl_subscription_init+0x2e6>
  if (!rcl_node_is_valid(node)) {
 8017b0c:	68b8      	ldr	r0, [r7, #8]
 8017b0e:	f7ff f93e 	bl	8016d8e <rcl_node_is_valid>
 8017b12:	4603      	mov	r3, r0
 8017b14:	f083 0301 	eor.w	r3, r3, #1
 8017b18:	b2db      	uxtb	r3, r3
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d001      	beq.n	8017b22 <rcl_subscription_init+0x5a>
    return RCL_RET_NODE_INVALID;  // error already set
 8017b1e:	23c8      	movs	r3, #200	; 0xc8
 8017b20:	e145      	b.n	8017dae <rcl_subscription_init+0x2e6>
  }
  RCL_CHECK_ARGUMENT_FOR_NULL(type_support, RCL_RET_INVALID_ARGUMENT);
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d101      	bne.n	8017b2c <rcl_subscription_init+0x64>
 8017b28:	230b      	movs	r3, #11
 8017b2a:	e140      	b.n	8017dae <rcl_subscription_init+0x2e6>
  RCL_CHECK_ARGUMENT_FOR_NULL(topic_name, RCL_RET_INVALID_ARGUMENT);
 8017b2c:	683b      	ldr	r3, [r7, #0]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d101      	bne.n	8017b36 <rcl_subscription_init+0x6e>
 8017b32:	230b      	movs	r3, #11
 8017b34:	e13b      	b.n	8017dae <rcl_subscription_init+0x2e6>
  RCUTILS_LOG_DEBUG_NAMED(
    ROS_PACKAGE_NAME, "Initializing subscription for topic name '%s'", topic_name);
  if (subscription->impl) {
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d001      	beq.n	8017b42 <rcl_subscription_init+0x7a>
    RCL_SET_ERROR_MSG("subscription already initialized, or memory was uninitialized");
    return RCL_RET_ALREADY_INIT;
 8017b3e:	2364      	movs	r3, #100	; 0x64
 8017b40:	e135      	b.n	8017dae <rcl_subscription_init+0x2e6>
  }
  // Expand the given topic name.
  rcutils_allocator_t rcutils_allocator = *allocator;  // implicit conversion to rcutils version
 8017b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b44:	f107 041c 	add.w	r4, r7, #28
 8017b48:	461d      	mov	r5, r3
 8017b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017b4e:	682b      	ldr	r3, [r5, #0]
 8017b50:	6023      	str	r3, [r4, #0]
  rcutils_string_map_t substitutions_map = rcutils_get_zero_initialized_string_map();
 8017b52:	f004 fb49 	bl	801c1e8 <rcutils_get_zero_initialized_string_map>
 8017b56:	4603      	mov	r3, r0
 8017b58:	61bb      	str	r3, [r7, #24]
  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions_map, 0, rcutils_allocator);
 8017b5a:	f107 0518 	add.w	r5, r7, #24
 8017b5e:	466c      	mov	r4, sp
 8017b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017b64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017b68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017b6c:	f107 031c 	add.w	r3, r7, #28
 8017b70:	cb0c      	ldmia	r3, {r2, r3}
 8017b72:	2100      	movs	r1, #0
 8017b74:	4628      	mov	r0, r5
 8017b76:	f004 fb45 	bl	801c204 <rcutils_string_map_init>
 8017b7a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (rcutils_ret != RCUTILS_RET_OK) {
 8017b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d006      	beq.n	8017b90 <rcl_subscription_init+0xc8>
    RCL_SET_ERROR_MSG(rcutils_get_error_string().str);
    if (RCUTILS_RET_BAD_ALLOC == rcutils_ret) {
 8017b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b84:	2b0a      	cmp	r3, #10
 8017b86:	d101      	bne.n	8017b8c <rcl_subscription_init+0xc4>
      return RCL_RET_BAD_ALLOC;
 8017b88:	230a      	movs	r3, #10
 8017b8a:	e110      	b.n	8017dae <rcl_subscription_init+0x2e6>
    }
    return RCL_RET_ERROR;
 8017b8c:	2301      	movs	r3, #1
 8017b8e:	e10e      	b.n	8017dae <rcl_subscription_init+0x2e6>
  }
  rcl_ret_t ret = rcl_get_default_topic_name_substitutions(&substitutions_map);
 8017b90:	f107 0318 	add.w	r3, r7, #24
 8017b94:	4618      	mov	r0, r3
 8017b96:	f7fe f965 	bl	8015e64 <rcl_get_default_topic_name_substitutions>
 8017b9a:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (ret != RCL_RET_OK) {
 8017b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d00c      	beq.n	8017bbc <rcl_subscription_init+0xf4>
    rcutils_ret = rcutils_string_map_fini(&substitutions_map);
 8017ba2:	f107 0318 	add.w	r3, r7, #24
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	f004 fb90 	bl	801c2cc <rcutils_string_map_fini>
 8017bac:	63f8      	str	r0, [r7, #60]	; 0x3c
        ROS_PACKAGE_NAME,
        "failed to fini string_map (%d) during error handling: %s",
        rcutils_ret,
        rcutils_get_error_string().str);
    }
    if (RCL_RET_BAD_ALLOC == ret) {
 8017bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017bb0:	2b0a      	cmp	r3, #10
 8017bb2:	d101      	bne.n	8017bb8 <rcl_subscription_init+0xf0>
      return ret;
 8017bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017bb6:	e0fa      	b.n	8017dae <rcl_subscription_init+0x2e6>
    }
    return RCL_RET_ERROR;
 8017bb8:	2301      	movs	r3, #1
 8017bba:	e0f8      	b.n	8017dae <rcl_subscription_init+0x2e6>
  }
  char * expanded_topic_name = NULL;
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	617b      	str	r3, [r7, #20]
  char * remapped_topic_name = NULL;
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = rcl_expand_topic_name(
 8017bc4:	68b8      	ldr	r0, [r7, #8]
 8017bc6:	f7ff f905 	bl	8016dd4 <rcl_node_get_name>
 8017bca:	4680      	mov	r8, r0
 8017bcc:	68b8      	ldr	r0, [r7, #8]
 8017bce:	f7ff f918 	bl	8016e02 <rcl_node_get_namespace>
 8017bd2:	4684      	mov	ip, r0
 8017bd4:	f107 0618 	add.w	r6, r7, #24
 8017bd8:	f107 0314 	add.w	r3, r7, #20
 8017bdc:	9305      	str	r3, [sp, #20]
 8017bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017be0:	466c      	mov	r4, sp
 8017be2:	461d      	mov	r5, r3
 8017be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017be8:	682b      	ldr	r3, [r5, #0]
 8017bea:	6023      	str	r3, [r4, #0]
 8017bec:	4633      	mov	r3, r6
 8017bee:	4662      	mov	r2, ip
 8017bf0:	4641      	mov	r1, r8
 8017bf2:	6838      	ldr	r0, [r7, #0]
 8017bf4:	f7fd ff70 	bl	8015ad8 <rcl_expand_topic_name>
 8017bf8:	64f8      	str	r0, [r7, #76]	; 0x4c
    rcl_node_get_name(node),
    rcl_node_get_namespace(node),
    &substitutions_map,
    *allocator,
    &expanded_topic_name);
  rcutils_ret = rcutils_string_map_fini(&substitutions_map);
 8017bfa:	f107 0318 	add.w	r3, r7, #24
 8017bfe:	4618      	mov	r0, r3
 8017c00:	f004 fb64 	bl	801c2cc <rcutils_string_map_fini>
 8017c04:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (rcutils_ret != RCUTILS_RET_OK) {
 8017c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d002      	beq.n	8017c12 <rcl_subscription_init+0x14a>
    RCL_SET_ERROR_MSG(rcutils_get_error_string().str);
    ret = RCL_RET_ERROR;
 8017c0c:	2301      	movs	r3, #1
 8017c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    goto cleanup;
 8017c10:	e0b8      	b.n	8017d84 <rcl_subscription_init+0x2bc>
  }
  if (ret != RCL_RET_OK) {
 8017c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d00b      	beq.n	8017c30 <rcl_subscription_init+0x168>
    if (ret == RCL_RET_TOPIC_NAME_INVALID || ret == RCL_RET_UNKNOWN_SUBSTITUTION) {
 8017c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c1a:	2b67      	cmp	r3, #103	; 0x67
 8017c1c:	d002      	beq.n	8017c24 <rcl_subscription_init+0x15c>
 8017c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c20:	2b69      	cmp	r3, #105	; 0x69
 8017c22:	d102      	bne.n	8017c2a <rcl_subscription_init+0x162>
      ret = RCL_RET_TOPIC_NAME_INVALID;
 8017c24:	2367      	movs	r3, #103	; 0x67
 8017c26:	64fb      	str	r3, [r7, #76]	; 0x4c
    } else {
      ret = RCL_RET_ERROR;
    }
    goto cleanup;
 8017c28:	e0ac      	b.n	8017d84 <rcl_subscription_init+0x2bc>
      ret = RCL_RET_ERROR;
 8017c2a:	2301      	movs	r3, #1
 8017c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
    goto cleanup;
 8017c2e:	e0a9      	b.n	8017d84 <rcl_subscription_init+0x2bc>
  }
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Expanded topic name '%s'", expanded_topic_name);

  const rcl_node_options_t * node_options = rcl_node_get_options(node);
 8017c30:	68b8      	ldr	r0, [r7, #8]
 8017c32:	f7ff f8fd 	bl	8016e30 <rcl_node_get_options>
 8017c36:	63b8      	str	r0, [r7, #56]	; 0x38
  if (NULL == node_options) {
 8017c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d102      	bne.n	8017c44 <rcl_subscription_init+0x17c>
    ret = RCL_RET_ERROR;
 8017c3e:	2301      	movs	r3, #1
 8017c40:	64fb      	str	r3, [r7, #76]	; 0x4c
    goto cleanup;
 8017c42:	e09f      	b.n	8017d84 <rcl_subscription_init+0x2bc>
  } else if (NULL == remapped_topic_name) {
    remapped_topic_name = expanded_topic_name;
    expanded_topic_name = NULL;
  }
#else
  remapped_topic_name = (char *)allocator->allocate(strlen(expanded_topic_name) + 1, allocator->state);
 8017c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c46:	681c      	ldr	r4, [r3, #0]
 8017c48:	697b      	ldr	r3, [r7, #20]
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	f7e8 faea 	bl	8000224 <strlen>
 8017c50:	4603      	mov	r3, r0
 8017c52:	1c5a      	adds	r2, r3, #1
 8017c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c56:	691b      	ldr	r3, [r3, #16]
 8017c58:	4619      	mov	r1, r3
 8017c5a:	4610      	mov	r0, r2
 8017c5c:	47a0      	blx	r4
 8017c5e:	64b8      	str	r0, [r7, #72]	; 0x48
  memcpy(remapped_topic_name, expanded_topic_name, strlen(expanded_topic_name) + 1);
 8017c60:	697c      	ldr	r4, [r7, #20]
 8017c62:	697b      	ldr	r3, [r7, #20]
 8017c64:	4618      	mov	r0, r3
 8017c66:	f7e8 fadd 	bl	8000224 <strlen>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	3301      	adds	r3, #1
 8017c6e:	461a      	mov	r2, r3
 8017c70:	4621      	mov	r1, r4
 8017c72:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8017c74:	f009 f824 	bl	8020cc0 <memcpy>
#endif // RCL_COMMAND_LINE_ENABLED

  // Validate the expanded topic name.
  int validation_result;
  rmw_ret_t rmw_ret = rmw_validate_full_topic_name(remapped_topic_name, &validation_result, NULL);
 8017c78:	f107 0310 	add.w	r3, r7, #16
 8017c7c:	2200      	movs	r2, #0
 8017c7e:	4619      	mov	r1, r3
 8017c80:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8017c82:	f004 fe21 	bl	801c8c8 <rmw_validate_full_topic_name>
 8017c86:	6378      	str	r0, [r7, #52]	; 0x34
  if (rmw_ret != RMW_RET_OK) {
 8017c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d002      	beq.n	8017c94 <rcl_subscription_init+0x1cc>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    ret = RCL_RET_ERROR;
 8017c8e:	2301      	movs	r3, #1
 8017c90:	64fb      	str	r3, [r7, #76]	; 0x4c
    goto cleanup;
 8017c92:	e077      	b.n	8017d84 <rcl_subscription_init+0x2bc>
  }
  if (validation_result != RMW_TOPIC_VALID) {
 8017c94:	693b      	ldr	r3, [r7, #16]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d002      	beq.n	8017ca0 <rcl_subscription_init+0x1d8>
    RCL_SET_ERROR_MSG(rmw_full_topic_name_validation_result_string(validation_result));
    ret = RCL_RET_TOPIC_NAME_INVALID;
 8017c9a:	2367      	movs	r3, #103	; 0x67
 8017c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    goto cleanup;
 8017c9e:	e071      	b.n	8017d84 <rcl_subscription_init+0x2bc>
  }
  // Allocate memory for the implementation struct.
  subscription->impl = (rcl_subscription_impl_t *)allocator->allocate(
 8017ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017ca6:	6912      	ldr	r2, [r2, #16]
 8017ca8:	4611      	mov	r1, r2
 8017caa:	20c8      	movs	r0, #200	; 0xc8
 8017cac:	4798      	blx	r3
 8017cae:	4602      	mov	r2, r0
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	601a      	str	r2, [r3, #0]
    sizeof(rcl_subscription_impl_t), allocator->state);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d102      	bne.n	8017cc2 <rcl_subscription_init+0x1fa>
 8017cbc:	230a      	movs	r3, #10
 8017cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017cc0:	e060      	b.n	8017d84 <rcl_subscription_init+0x2bc>
    subscription->impl, "allocating memory failed", ret = RCL_RET_BAD_ALLOC; goto cleanup);
  // Fill out the implemenation struct.
  // rmw_handle
  // TODO(wjwwood): pass allocator once supported in rmw api.
  subscription->impl->rmw_handle = rmw_create_subscription(
    rcl_node_get_rmw_handle(node),
 8017cc2:	68b8      	ldr	r0, [r7, #8]
 8017cc4:	f7ff f8c9 	bl	8016e5a <rcl_node_get_rmw_handle>
  subscription->impl->rmw_handle = rmw_create_subscription(
 8017cc8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017cca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017ccc:	3364      	adds	r3, #100	; 0x64
 8017cce:	68fa      	ldr	r2, [r7, #12]
 8017cd0:	6814      	ldr	r4, [r2, #0]
 8017cd2:	9300      	str	r3, [sp, #0]
 8017cd4:	460b      	mov	r3, r1
 8017cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017cd8:	6879      	ldr	r1, [r7, #4]
 8017cda:	f007 f86f 	bl	801edbc <rmw_create_subscription>
 8017cde:	4603      	mov	r3, r0
 8017ce0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    type_support,
    remapped_topic_name,
    &(options->qos),
    &(options->rmw_subscription_options));
  if (!subscription->impl->rmw_handle) {
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d024      	beq.n	8017d3a <rcl_subscription_init+0x272>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    goto fail;
  }
  // get actual qos, and store it
  rmw_ret = rmw_subscription_get_actual_qos(
    subscription->impl->rmw_handle,
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    &subscription->impl->actual_qos);
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	681b      	ldr	r3, [r3, #0]
  rmw_ret = rmw_subscription_get_actual_qos(
 8017cfc:	3370      	adds	r3, #112	; 0x70
 8017cfe:	4619      	mov	r1, r3
 8017d00:	4610      	mov	r0, r2
 8017d02:	f007 f9b9 	bl	801f078 <rmw_subscription_get_actual_qos>
 8017d06:	6378      	str	r0, [r7, #52]	; 0x34
  if (RMW_RET_OK != rmw_ret) {
 8017d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d002      	beq.n	8017d14 <rcl_subscription_init+0x24c>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    ret = RCL_RET_ERROR;
 8017d0e:	2301      	movs	r3, #1
 8017d10:	64fb      	str	r3, [r7, #76]	; 0x4c
    goto fail;
 8017d12:	e013      	b.n	8017d3c <rcl_subscription_init+0x274>
  }
  subscription->impl->actual_qos.avoid_ros_namespace_conventions =
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	681b      	ldr	r3, [r3, #0]
    options->qos.avoid_ros_namespace_conventions;
 8017d18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017d1a:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
  subscription->impl->actual_qos.avoid_ros_namespace_conventions =
 8017d1e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
  // options
  subscription->impl->options = *options;
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	681a      	ldr	r2, [r3, #0]
 8017d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017d28:	4610      	mov	r0, r2
 8017d2a:	4619      	mov	r1, r3
 8017d2c:	2370      	movs	r3, #112	; 0x70
 8017d2e:	461a      	mov	r2, r3
 8017d30:	f008 ffc6 	bl	8020cc0 <memcpy>
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Subscription initialized");
  ret = RCL_RET_OK;
 8017d34:	2300      	movs	r3, #0
 8017d36:	64fb      	str	r3, [r7, #76]	; 0x4c
    (const void *)subscription,
    (const void *)node,
    (const void *)subscription->impl->rmw_handle,
    remapped_topic_name,
    options->qos.depth);*/
  goto cleanup;
 8017d38:	e024      	b.n	8017d84 <rcl_subscription_init+0x2bc>
    goto fail;
 8017d3a:	bf00      	nop
fail:
  if (subscription->impl) {
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d01d      	beq.n	8017d80 <rcl_subscription_init+0x2b8>
    if (subscription->impl->rmw_handle) {
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d00c      	beq.n	8017d6a <rcl_subscription_init+0x2a2>
      rmw_ret_t rmw_fail_ret = rmw_destroy_subscription(
 8017d50:	68b8      	ldr	r0, [r7, #8]
 8017d52:	f7ff f882 	bl	8016e5a <rcl_node_get_rmw_handle>
 8017d56:	4602      	mov	r2, r0
        rcl_node_get_rmw_handle(node), subscription->impl->rmw_handle);
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	681b      	ldr	r3, [r3, #0]
      rmw_ret_t rmw_fail_ret = rmw_destroy_subscription(
 8017d5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8017d60:	4619      	mov	r1, r3
 8017d62:	4610      	mov	r0, r2
 8017d64:	f007 f99a 	bl	801f09c <rmw_destroy_subscription>
 8017d68:	6338      	str	r0, [r7, #48]	; 0x30
        RCUTILS_SAFE_FWRITE_TO_STDERR(rmw_get_error_string().str);
        RCUTILS_SAFE_FWRITE_TO_STDERR("\n");
      }
    }

    allocator->deallocate(subscription->impl, allocator->state);
 8017d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d6c:	685b      	ldr	r3, [r3, #4]
 8017d6e:	68fa      	ldr	r2, [r7, #12]
 8017d70:	6810      	ldr	r0, [r2, #0]
 8017d72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017d74:	6912      	ldr	r2, [r2, #16]
 8017d76:	4611      	mov	r1, r2
 8017d78:	4798      	blx	r3
    subscription->impl = NULL;
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	2200      	movs	r2, #0
 8017d7e:	601a      	str	r2, [r3, #0]
  }
  ret = fail_ret;
 8017d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  // Fall through to cleanup
cleanup:
  if (NULL != expanded_topic_name) {
 8017d84:	697b      	ldr	r3, [r7, #20]
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d006      	beq.n	8017d98 <rcl_subscription_init+0x2d0>
    allocator->deallocate(expanded_topic_name, allocator->state);
 8017d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d8c:	685b      	ldr	r3, [r3, #4]
 8017d8e:	6978      	ldr	r0, [r7, #20]
 8017d90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017d92:	6912      	ldr	r2, [r2, #16]
 8017d94:	4611      	mov	r1, r2
 8017d96:	4798      	blx	r3
  }
  if (NULL != remapped_topic_name) {
 8017d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d006      	beq.n	8017dac <rcl_subscription_init+0x2e4>
    allocator->deallocate(remapped_topic_name, allocator->state);
 8017d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017da0:	685b      	ldr	r3, [r3, #4]
 8017da2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017da4:	6912      	ldr	r2, [r2, #16]
 8017da6:	4611      	mov	r1, r2
 8017da8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8017daa:	4798      	blx	r3
  }
  return ret;
 8017dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8017dae:	4618      	mov	r0, r3
 8017db0:	3750      	adds	r7, #80	; 0x50
 8017db2:	46bd      	mov	sp, r7
 8017db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017db8 <rcl_subscription_get_default_options>:
  return result;
}

rcl_subscription_options_t
rcl_subscription_get_default_options()
{
 8017db8:	b5b0      	push	{r4, r5, r7, lr}
 8017dba:	b088      	sub	sp, #32
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	61f8      	str	r0, [r7, #28]
  // !!! MAKE SURE THAT CHANGES TO THESE DEFAULTS ARE REFLECTED IN THE HEADER DOC STRING
  static rcl_subscription_options_t default_options;
  // Must set these after declaration because they are not a compile time constants.
  default_options.qos = rmw_qos_profile_default;
 8017dc0:	4a15      	ldr	r2, [pc, #84]	; (8017e18 <rcl_subscription_get_default_options+0x60>)
 8017dc2:	4b16      	ldr	r3, [pc, #88]	; (8017e1c <rcl_subscription_get_default_options+0x64>)
 8017dc4:	4610      	mov	r0, r2
 8017dc6:	4619      	mov	r1, r3
 8017dc8:	2350      	movs	r3, #80	; 0x50
 8017dca:	461a      	mov	r2, r3
 8017dcc:	f008 ff78 	bl	8020cc0 <memcpy>
  default_options.allocator = rcl_get_default_allocator();
 8017dd0:	4c11      	ldr	r4, [pc, #68]	; (8017e18 <rcl_subscription_get_default_options+0x60>)
 8017dd2:	463b      	mov	r3, r7
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	f003 fcb5 	bl	801b744 <rcutils_get_default_allocator>
 8017dda:	3450      	adds	r4, #80	; 0x50
 8017ddc:	463d      	mov	r5, r7
 8017dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017de2:	682b      	ldr	r3, [r5, #0]
 8017de4:	6023      	str	r3, [r4, #0]
  default_options.rmw_subscription_options = rmw_get_default_subscription_options();
 8017de6:	4c0c      	ldr	r4, [pc, #48]	; (8017e18 <rcl_subscription_get_default_options+0x60>)
 8017de8:	463b      	mov	r3, r7
 8017dea:	4618      	mov	r0, r3
 8017dec:	f004 fd0c 	bl	801c808 <rmw_get_default_subscription_options>
 8017df0:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8017df4:	463a      	mov	r2, r7
 8017df6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017dfa:	e883 0003 	stmia.w	r3, {r0, r1}
  return default_options;
 8017dfe:	69fb      	ldr	r3, [r7, #28]
 8017e00:	4a05      	ldr	r2, [pc, #20]	; (8017e18 <rcl_subscription_get_default_options+0x60>)
 8017e02:	4618      	mov	r0, r3
 8017e04:	4611      	mov	r1, r2
 8017e06:	2370      	movs	r3, #112	; 0x70
 8017e08:	461a      	mov	r2, r3
 8017e0a:	f008 ff59 	bl	8020cc0 <memcpy>
}
 8017e0e:	69f8      	ldr	r0, [r7, #28]
 8017e10:	3720      	adds	r7, #32
 8017e12:	46bd      	mov	sp, r7
 8017e14:	bdb0      	pop	{r4, r5, r7, pc}
 8017e16:	bf00      	nop
 8017e18:	2000e588 	.word	0x2000e588
 8017e1c:	08027258 	.word	0x08027258

08017e20 <rcl_take>:
  const rcl_subscription_t * subscription,
  void * ros_message,
  rmw_message_info_t * message_info,
  rmw_subscription_allocation_t * allocation
)
{
 8017e20:	b5b0      	push	{r4, r5, r7, lr}
 8017e22:	b0a2      	sub	sp, #136	; 0x88
 8017e24:	af02      	add	r7, sp, #8
 8017e26:	63f8      	str	r0, [r7, #60]	; 0x3c
 8017e28:	63b9      	str	r1, [r7, #56]	; 0x38
 8017e2a:	637a      	str	r2, [r7, #52]	; 0x34
 8017e2c:	633b      	str	r3, [r7, #48]	; 0x30
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Subscription taking message");
  if (!rcl_subscription_is_valid(subscription)) {
 8017e2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017e30:	f000 f863 	bl	8017efa <rcl_subscription_is_valid>
 8017e34:	4603      	mov	r3, r0
 8017e36:	f083 0301 	eor.w	r3, r3, #1
 8017e3a:	b2db      	uxtb	r3, r3
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d002      	beq.n	8017e46 <rcl_take+0x26>
    return RCL_RET_SUBSCRIPTION_INVALID;  // error message already set
 8017e40:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8017e44:	e03e      	b.n	8017ec4 <rcl_take+0xa4>
  }
  RCL_CHECK_ARGUMENT_FOR_NULL(ros_message, RCL_RET_INVALID_ARGUMENT);
 8017e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d101      	bne.n	8017e50 <rcl_take+0x30>
 8017e4c:	230b      	movs	r3, #11
 8017e4e:	e039      	b.n	8017ec4 <rcl_take+0xa4>

  // If message_info is NULL, use a place holder which can be discarded.
  rmw_message_info_t dummy_message_info;
  rmw_message_info_t * message_info_local = message_info ? message_info : &dummy_message_info;
 8017e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d102      	bne.n	8017e5c <rcl_take+0x3c>
 8017e56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017e5a:	e000      	b.n	8017e5e <rcl_take+0x3e>
 8017e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  *message_info_local = rmw_get_zero_initialized_message_info();
 8017e60:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8017e62:	463b      	mov	r3, r7
 8017e64:	4618      	mov	r0, r3
 8017e66:	f004 fce7 	bl	801c838 <rmw_get_zero_initialized_message_info>
 8017e6a:	4625      	mov	r5, r4
 8017e6c:	463c      	mov	r4, r7
 8017e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017e76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017e7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  // Call rmw_take_with_info.
  bool taken = false;
 8017e7e:	2300      	movs	r3, #0
 8017e80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  rmw_ret_t ret = rmw_take_with_info(
    subscription->impl->rmw_handle, ros_message, &taken, message_info_local, allocation);
 8017e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
  rmw_ret_t ret = rmw_take_with_info(
 8017e8c:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8017e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e92:	9300      	str	r3, [sp, #0]
 8017e94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017e96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017e98:	f007 f9a2 	bl	801f1e0 <rmw_take_with_info>
 8017e9c:	67b8      	str	r0, [r7, #120]	; 0x78
  if (ret != RMW_RET_OK) {
 8017e9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d004      	beq.n	8017eae <rcl_take+0x8e>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    return rcl_convert_rmw_ret_to_rcl_ret(ret);
 8017ea4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8017ea6:	f7fd fc8d 	bl	80157c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	e00a      	b.n	8017ec4 <rcl_take+0xa4>
  }
  RCUTILS_LOG_DEBUG_NAMED(
    ROS_PACKAGE_NAME, "Subscription take succeeded: %s", taken ? "true" : "false");
  if (!taken) {
 8017eae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017eb2:	f083 0301 	eor.w	r3, r3, #1
 8017eb6:	b2db      	uxtb	r3, r3
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d002      	beq.n	8017ec2 <rcl_take+0xa2>
    return RCL_RET_SUBSCRIPTION_TAKE_FAILED;
 8017ebc:	f240 1391 	movw	r3, #401	; 0x191
 8017ec0:	e000      	b.n	8017ec4 <rcl_take+0xa4>
  }
  return RCL_RET_OK;
 8017ec2:	2300      	movs	r3, #0
}
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	3780      	adds	r7, #128	; 0x80
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	bdb0      	pop	{r4, r5, r7, pc}

08017ecc <rcl_subscription_get_rmw_handle>:
  return _subscription_get_options(subscription);
}

rmw_subscription_t *
rcl_subscription_get_rmw_handle(const rcl_subscription_t * subscription)
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b082      	sub	sp, #8
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
  if (!rcl_subscription_is_valid(subscription)) {
 8017ed4:	6878      	ldr	r0, [r7, #4]
 8017ed6:	f000 f810 	bl	8017efa <rcl_subscription_is_valid>
 8017eda:	4603      	mov	r3, r0
 8017edc:	f083 0301 	eor.w	r3, r3, #1
 8017ee0:	b2db      	uxtb	r3, r3
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d001      	beq.n	8017eea <rcl_subscription_get_rmw_handle+0x1e>
    return NULL;  // error already  set
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	e003      	b.n	8017ef2 <rcl_subscription_get_rmw_handle+0x26>
  }
  return subscription->impl->rmw_handle;
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
}
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	3708      	adds	r7, #8
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	bd80      	pop	{r7, pc}

08017efa <rcl_subscription_is_valid>:

bool
rcl_subscription_is_valid(const rcl_subscription_t * subscription)
{
 8017efa:	b480      	push	{r7}
 8017efc:	b083      	sub	sp, #12
 8017efe:	af00      	add	r7, sp, #0
 8017f00:	6078      	str	r0, [r7, #4]
  RCL_CHECK_FOR_NULL_WITH_MSG(subscription, "subscription pointer is invalid", return false);
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d101      	bne.n	8017f0c <rcl_subscription_is_valid+0x12>
 8017f08:	2300      	movs	r3, #0
 8017f0a:	e00e      	b.n	8017f2a <rcl_subscription_is_valid+0x30>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d101      	bne.n	8017f18 <rcl_subscription_is_valid+0x1e>
 8017f14:	2300      	movs	r3, #0
 8017f16:	e008      	b.n	8017f2a <rcl_subscription_is_valid+0x30>
    subscription->impl, "subscription's implementation is invalid", return false);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d101      	bne.n	8017f28 <rcl_subscription_is_valid+0x2e>
 8017f24:	2300      	movs	r3, #0
 8017f26:	e000      	b.n	8017f2a <rcl_subscription_is_valid+0x30>
    subscription->impl->rmw_handle, "subscription's rmw handle is invalid", return false);
  return true;
 8017f28:	2301      	movs	r3, #1
}
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	370c      	adds	r7, #12
 8017f2e:	46bd      	mov	sp, r7
 8017f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f34:	4770      	bx	lr

08017f36 <rcutils_atomic_load_uint64_t>:
{
 8017f36:	b580      	push	{r7, lr}
 8017f38:	b084      	sub	sp, #16
 8017f3a:	af00      	add	r7, sp, #0
 8017f3c:	6078      	str	r0, [r7, #4]
  uint64_t result = 0;
 8017f3e:	f04f 0200 	mov.w	r2, #0
 8017f42:	f04f 0300 	mov.w	r3, #0
 8017f46:	e9c7 2302 	strd	r2, r3, [r7, #8]
  rcutils_atomic_load(a_uint64_t, result);
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	2105      	movs	r1, #5
 8017f4e:	4618      	mov	r0, r3
 8017f50:	f003 fc95 	bl	801b87e <__atomic_load_8>
 8017f54:	4602      	mov	r2, r0
 8017f56:	460b      	mov	r3, r1
 8017f58:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return result;
 8017f5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8017f60:	4610      	mov	r0, r2
 8017f62:	4619      	mov	r1, r3
 8017f64:	3710      	adds	r7, #16
 8017f66:	46bd      	mov	sp, r7
 8017f68:	bd80      	pop	{r7, pc}

08017f6a <rcl_get_steady_time>:
} rcl_ros_clock_storage_t;

// Implementation only
static rcl_ret_t
rcl_get_steady_time(void * data, rcl_time_point_value_t * current_time)
{
 8017f6a:	b580      	push	{r7, lr}
 8017f6c:	b082      	sub	sp, #8
 8017f6e:	af00      	add	r7, sp, #0
 8017f70:	6078      	str	r0, [r7, #4]
 8017f72:	6039      	str	r1, [r7, #0]
  (void)data;  // unused
  return rcutils_steady_time_now(current_time);
 8017f74:	6838      	ldr	r0, [r7, #0]
 8017f76:	f004 fb97 	bl	801c6a8 <rcutils_steady_time_now>
 8017f7a:	4603      	mov	r3, r0
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	3708      	adds	r7, #8
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}

08017f84 <rcl_get_system_time>:

// Implementation only
static rcl_ret_t
rcl_get_system_time(void * data, rcl_time_point_value_t * current_time)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b082      	sub	sp, #8
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
 8017f8c:	6039      	str	r1, [r7, #0]
  (void)data;  // unused
  return rcutils_system_time_now(current_time);
 8017f8e:	6838      	ldr	r0, [r7, #0]
 8017f90:	f004 fb4c 	bl	801c62c <rcutils_system_time_now>
 8017f94:	4603      	mov	r3, r0
}
 8017f96:	4618      	mov	r0, r3
 8017f98:	3708      	adds	r7, #8
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	bd80      	pop	{r7, pc}

08017f9e <rcl_init_generic_clock>:

// Internal method for zeroing values on init, assumes clock is valid
static void
rcl_init_generic_clock(rcl_clock_t * clock, rcl_allocator_t * allocator)
{
 8017f9e:	b4b0      	push	{r4, r5, r7}
 8017fa0:	b083      	sub	sp, #12
 8017fa2:	af00      	add	r7, sp, #0
 8017fa4:	6078      	str	r0, [r7, #4]
 8017fa6:	6039      	str	r1, [r7, #0]
  clock->type = RCL_CLOCK_UNINITIALIZED;
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	2200      	movs	r2, #0
 8017fac:	701a      	strb	r2, [r3, #0]
  clock->jump_callbacks = NULL;
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	2200      	movs	r2, #0
 8017fb2:	605a      	str	r2, [r3, #4]
  clock->num_jump_callbacks = 0u;
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	2200      	movs	r2, #0
 8017fb8:	609a      	str	r2, [r3, #8]
  clock->get_now = NULL;
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	2200      	movs	r2, #0
 8017fbe:	60da      	str	r2, [r3, #12]
  clock->data = NULL;
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	2200      	movs	r2, #0
 8017fc4:	611a      	str	r2, [r3, #16]
  clock->allocator = *allocator;
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	683a      	ldr	r2, [r7, #0]
 8017fca:	f103 0414 	add.w	r4, r3, #20
 8017fce:	4615      	mov	r5, r2
 8017fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017fd4:	682b      	ldr	r3, [r5, #0]
 8017fd6:	6023      	str	r3, [r4, #0]
}
 8017fd8:	bf00      	nop
 8017fda:	370c      	adds	r7, #12
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	bcb0      	pop	{r4, r5, r7}
 8017fe0:	4770      	bx	lr

08017fe2 <rcl_get_ros_time>:

// The function used to get the current ros time.
// This is in the implementation only
static rcl_ret_t
rcl_get_ros_time(void * data, rcl_time_point_value_t * current_time)
{
 8017fe2:	b580      	push	{r7, lr}
 8017fe4:	b084      	sub	sp, #16
 8017fe6:	af00      	add	r7, sp, #0
 8017fe8:	6078      	str	r0, [r7, #4]
 8017fea:	6039      	str	r1, [r7, #0]
  rcl_ros_clock_storage_t * t = (rcl_ros_clock_storage_t *)data;
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	60fb      	str	r3, [r7, #12]
  if (!t->active) {
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	7a1b      	ldrb	r3, [r3, #8]
 8017ff4:	f083 0301 	eor.w	r3, r3, #1
 8017ff8:	b2db      	uxtb	r3, r3
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d005      	beq.n	801800a <rcl_get_ros_time+0x28>
    return rcl_get_system_time(data, current_time);
 8017ffe:	6839      	ldr	r1, [r7, #0]
 8018000:	6878      	ldr	r0, [r7, #4]
 8018002:	f7ff ffbf 	bl	8017f84 <rcl_get_system_time>
 8018006:	4603      	mov	r3, r0
 8018008:	e009      	b.n	801801e <rcl_get_ros_time+0x3c>
  }
  *current_time = rcutils_atomic_load_uint64_t(&(t->current_time));
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	4618      	mov	r0, r3
 801800e:	f7ff ff92 	bl	8017f36 <rcutils_atomic_load_uint64_t>
 8018012:	4602      	mov	r2, r0
 8018014:	460b      	mov	r3, r1
 8018016:	6839      	ldr	r1, [r7, #0]
 8018018:	e9c1 2300 	strd	r2, r3, [r1]
  return RCL_RET_OK;
 801801c:	2300      	movs	r3, #0
}
 801801e:	4618      	mov	r0, r3
 8018020:	3710      	adds	r7, #16
 8018022:	46bd      	mov	sp, r7
 8018024:	bd80      	pop	{r7, pc}
	...

08018028 <rcl_clock_init>:

rcl_ret_t
rcl_clock_init(
  enum rcl_clock_type_t clock_type, rcl_clock_t * clock,
  rcl_allocator_t * allocator)
{
 8018028:	b580      	push	{r7, lr}
 801802a:	b084      	sub	sp, #16
 801802c:	af00      	add	r7, sp, #0
 801802e:	4603      	mov	r3, r0
 8018030:	60b9      	str	r1, [r7, #8]
 8018032:	607a      	str	r2, [r7, #4]
 8018034:	73fb      	strb	r3, [r7, #15]
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 8018036:	6878      	ldr	r0, [r7, #4]
 8018038:	f003 fb98 	bl	801b76c <rcutils_allocator_is_valid>
 801803c:	4603      	mov	r3, r0
 801803e:	f083 0301 	eor.w	r3, r3, #1
 8018042:	b2db      	uxtb	r3, r3
 8018044:	2b00      	cmp	r3, #0
 8018046:	d001      	beq.n	801804c <rcl_clock_init+0x24>
 8018048:	230b      	movs	r3, #11
 801804a:	e02b      	b.n	80180a4 <rcl_clock_init+0x7c>
  switch (clock_type) {
 801804c:	7bfb      	ldrb	r3, [r7, #15]
 801804e:	2b03      	cmp	r3, #3
 8018050:	d827      	bhi.n	80180a2 <rcl_clock_init+0x7a>
 8018052:	a201      	add	r2, pc, #4	; (adr r2, 8018058 <rcl_clock_init+0x30>)
 8018054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018058:	08018069 	.word	0x08018069
 801805c:	0801807f 	.word	0x0801807f
 8018060:	0801808b 	.word	0x0801808b
 8018064:	08018097 	.word	0x08018097
    case RCL_CLOCK_UNINITIALIZED:
      RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 8018068:	68bb      	ldr	r3, [r7, #8]
 801806a:	2b00      	cmp	r3, #0
 801806c:	d101      	bne.n	8018072 <rcl_clock_init+0x4a>
 801806e:	230b      	movs	r3, #11
 8018070:	e018      	b.n	80180a4 <rcl_clock_init+0x7c>
      rcl_init_generic_clock(clock, allocator);
 8018072:	6879      	ldr	r1, [r7, #4]
 8018074:	68b8      	ldr	r0, [r7, #8]
 8018076:	f7ff ff92 	bl	8017f9e <rcl_init_generic_clock>
      return RCL_RET_OK;
 801807a:	2300      	movs	r3, #0
 801807c:	e012      	b.n	80180a4 <rcl_clock_init+0x7c>
    case RCL_ROS_TIME:
      return rcl_ros_clock_init(clock, allocator);
 801807e:	6879      	ldr	r1, [r7, #4]
 8018080:	68b8      	ldr	r0, [r7, #8]
 8018082:	f000 f813 	bl	80180ac <rcl_ros_clock_init>
 8018086:	4603      	mov	r3, r0
 8018088:	e00c      	b.n	80180a4 <rcl_clock_init+0x7c>
    case RCL_SYSTEM_TIME:
      return rcl_system_clock_init(clock, allocator);
 801808a:	6879      	ldr	r1, [r7, #4]
 801808c:	68b8      	ldr	r0, [r7, #8]
 801808e:	f000 f86b 	bl	8018168 <rcl_system_clock_init>
 8018092:	4603      	mov	r3, r0
 8018094:	e006      	b.n	80180a4 <rcl_clock_init+0x7c>
    case RCL_STEADY_TIME:
      return rcl_steady_clock_init(clock, allocator);
 8018096:	6879      	ldr	r1, [r7, #4]
 8018098:	68b8      	ldr	r0, [r7, #8]
 801809a:	f000 f845 	bl	8018128 <rcl_steady_clock_init>
 801809e:	4603      	mov	r3, r0
 80180a0:	e000      	b.n	80180a4 <rcl_clock_init+0x7c>
    default:
      return RCL_RET_INVALID_ARGUMENT;
 80180a2:	230b      	movs	r3, #11
  }
}
 80180a4:	4618      	mov	r0, r3
 80180a6:	3710      	adds	r7, #16
 80180a8:	46bd      	mov	sp, r7
 80180aa:	bd80      	pop	{r7, pc}

080180ac <rcl_ros_clock_init>:

rcl_ret_t
rcl_ros_clock_init(
  rcl_clock_t * clock,
  rcl_allocator_t * allocator)
{
 80180ac:	b580      	push	{r7, lr}
 80180ae:	b084      	sub	sp, #16
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]
 80180b4:	6039      	str	r1, [r7, #0]
  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d101      	bne.n	80180c0 <rcl_ros_clock_init+0x14>
 80180bc:	230b      	movs	r3, #11
 80180be:	e02c      	b.n	801811a <rcl_ros_clock_init+0x6e>
  RCL_CHECK_ARGUMENT_FOR_NULL(allocator, RCL_RET_INVALID_ARGUMENT);
 80180c0:	683b      	ldr	r3, [r7, #0]
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d101      	bne.n	80180ca <rcl_ros_clock_init+0x1e>
 80180c6:	230b      	movs	r3, #11
 80180c8:	e027      	b.n	801811a <rcl_ros_clock_init+0x6e>
  rcl_init_generic_clock(clock, allocator);
 80180ca:	6839      	ldr	r1, [r7, #0]
 80180cc:	6878      	ldr	r0, [r7, #4]
 80180ce:	f7ff ff66 	bl	8017f9e <rcl_init_generic_clock>
  clock->data = allocator->allocate(sizeof(rcl_ros_clock_storage_t), allocator->state);
 80180d2:	683b      	ldr	r3, [r7, #0]
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	683a      	ldr	r2, [r7, #0]
 80180d8:	6912      	ldr	r2, [r2, #16]
 80180da:	4611      	mov	r1, r2
 80180dc:	2010      	movs	r0, #16
 80180de:	4798      	blx	r3
 80180e0:	4602      	mov	r2, r0
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	611a      	str	r2, [r3, #16]
  if (NULL == clock->data) {
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	691b      	ldr	r3, [r3, #16]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d101      	bne.n	80180f2 <rcl_ros_clock_init+0x46>
    RCL_SET_ERROR_MSG("allocating memory failed");
    return RCL_RET_BAD_ALLOC;
 80180ee:	230a      	movs	r3, #10
 80180f0:	e013      	b.n	801811a <rcl_ros_clock_init+0x6e>
  }

  rcl_ros_clock_storage_t * storage = (rcl_ros_clock_storage_t *)clock->data;
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	691b      	ldr	r3, [r3, #16]
 80180f6:	60fb      	str	r3, [r7, #12]
  // 0 is a special value meaning time has not been set
  atomic_init(&(storage->current_time), 0);
 80180f8:	68f9      	ldr	r1, [r7, #12]
 80180fa:	f04f 0200 	mov.w	r2, #0
 80180fe:	f04f 0300 	mov.w	r3, #0
 8018102:	e9c1 2300 	strd	r2, r3, [r1]
  storage->active = false;
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	2200      	movs	r2, #0
 801810a:	721a      	strb	r2, [r3, #8]
  clock->get_now = rcl_get_ros_time;
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	4a05      	ldr	r2, [pc, #20]	; (8018124 <rcl_ros_clock_init+0x78>)
 8018110:	60da      	str	r2, [r3, #12]
  clock->type = RCL_ROS_TIME;
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	2201      	movs	r2, #1
 8018116:	701a      	strb	r2, [r3, #0]
  return RCL_RET_OK;
 8018118:	2300      	movs	r3, #0
}
 801811a:	4618      	mov	r0, r3
 801811c:	3710      	adds	r7, #16
 801811e:	46bd      	mov	sp, r7
 8018120:	bd80      	pop	{r7, pc}
 8018122:	bf00      	nop
 8018124:	08017fe3 	.word	0x08017fe3

08018128 <rcl_steady_clock_init>:

rcl_ret_t
rcl_steady_clock_init(
  rcl_clock_t * clock,
  rcl_allocator_t * allocator)
{
 8018128:	b580      	push	{r7, lr}
 801812a:	b082      	sub	sp, #8
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
 8018130:	6039      	str	r1, [r7, #0]
  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d101      	bne.n	801813c <rcl_steady_clock_init+0x14>
 8018138:	230b      	movs	r3, #11
 801813a:	e00f      	b.n	801815c <rcl_steady_clock_init+0x34>
  RCL_CHECK_ARGUMENT_FOR_NULL(allocator, RCL_RET_INVALID_ARGUMENT);
 801813c:	683b      	ldr	r3, [r7, #0]
 801813e:	2b00      	cmp	r3, #0
 8018140:	d101      	bne.n	8018146 <rcl_steady_clock_init+0x1e>
 8018142:	230b      	movs	r3, #11
 8018144:	e00a      	b.n	801815c <rcl_steady_clock_init+0x34>
  rcl_init_generic_clock(clock, allocator);
 8018146:	6839      	ldr	r1, [r7, #0]
 8018148:	6878      	ldr	r0, [r7, #4]
 801814a:	f7ff ff28 	bl	8017f9e <rcl_init_generic_clock>
  clock->get_now = rcl_get_steady_time;
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	4a04      	ldr	r2, [pc, #16]	; (8018164 <rcl_steady_clock_init+0x3c>)
 8018152:	60da      	str	r2, [r3, #12]
  clock->type = RCL_STEADY_TIME;
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	2203      	movs	r2, #3
 8018158:	701a      	strb	r2, [r3, #0]
  return RCL_RET_OK;
 801815a:	2300      	movs	r3, #0
}
 801815c:	4618      	mov	r0, r3
 801815e:	3708      	adds	r7, #8
 8018160:	46bd      	mov	sp, r7
 8018162:	bd80      	pop	{r7, pc}
 8018164:	08017f6b 	.word	0x08017f6b

08018168 <rcl_system_clock_init>:

rcl_ret_t
rcl_system_clock_init(
  rcl_clock_t * clock,
  rcl_allocator_t * allocator)
{
 8018168:	b580      	push	{r7, lr}
 801816a:	b082      	sub	sp, #8
 801816c:	af00      	add	r7, sp, #0
 801816e:	6078      	str	r0, [r7, #4]
 8018170:	6039      	str	r1, [r7, #0]
  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d101      	bne.n	801817c <rcl_system_clock_init+0x14>
 8018178:	230b      	movs	r3, #11
 801817a:	e00f      	b.n	801819c <rcl_system_clock_init+0x34>
  RCL_CHECK_ARGUMENT_FOR_NULL(allocator, RCL_RET_INVALID_ARGUMENT);
 801817c:	683b      	ldr	r3, [r7, #0]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d101      	bne.n	8018186 <rcl_system_clock_init+0x1e>
 8018182:	230b      	movs	r3, #11
 8018184:	e00a      	b.n	801819c <rcl_system_clock_init+0x34>
  rcl_init_generic_clock(clock, allocator);
 8018186:	6839      	ldr	r1, [r7, #0]
 8018188:	6878      	ldr	r0, [r7, #4]
 801818a:	f7ff ff08 	bl	8017f9e <rcl_init_generic_clock>
  clock->get_now = rcl_get_system_time;
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	4a04      	ldr	r2, [pc, #16]	; (80181a4 <rcl_system_clock_init+0x3c>)
 8018192:	60da      	str	r2, [r3, #12]
  clock->type = RCL_SYSTEM_TIME;
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	2202      	movs	r2, #2
 8018198:	701a      	strb	r2, [r3, #0]
  return RCL_RET_OK;
 801819a:	2300      	movs	r3, #0
}
 801819c:	4618      	mov	r0, r3
 801819e:	3708      	adds	r7, #8
 80181a0:	46bd      	mov	sp, r7
 80181a2:	bd80      	pop	{r7, pc}
 80181a4:	08017f85 	.word	0x08017f85

080181a8 <rcl_clock_get_now>:
  return RCL_RET_OK;
}

rcl_ret_t
rcl_clock_get_now(rcl_clock_t * clock, rcl_time_point_value_t * time_point_value)
{
 80181a8:	b580      	push	{r7, lr}
 80181aa:	b082      	sub	sp, #8
 80181ac:	af00      	add	r7, sp, #0
 80181ae:	6078      	str	r0, [r7, #4]
 80181b0:	6039      	str	r1, [r7, #0]
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(RCL_RET_INVALID_ARGUMENT);
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(RCL_RET_ERROR);

  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d101      	bne.n	80181bc <rcl_clock_get_now+0x14>
 80181b8:	230b      	movs	r3, #11
 80181ba:	e016      	b.n	80181ea <rcl_clock_get_now+0x42>
  RCL_CHECK_ARGUMENT_FOR_NULL(time_point_value, RCL_RET_INVALID_ARGUMENT);
 80181bc:	683b      	ldr	r3, [r7, #0]
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d101      	bne.n	80181c6 <rcl_clock_get_now+0x1e>
 80181c2:	230b      	movs	r3, #11
 80181c4:	e011      	b.n	80181ea <rcl_clock_get_now+0x42>
  if (clock->type && clock->get_now) {
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	781b      	ldrb	r3, [r3, #0]
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d00c      	beq.n	80181e8 <rcl_clock_get_now+0x40>
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	68db      	ldr	r3, [r3, #12]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d008      	beq.n	80181e8 <rcl_clock_get_now+0x40>
    return clock->get_now(clock->data, time_point_value);
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	68db      	ldr	r3, [r3, #12]
 80181da:	687a      	ldr	r2, [r7, #4]
 80181dc:	6912      	ldr	r2, [r2, #16]
 80181de:	6839      	ldr	r1, [r7, #0]
 80181e0:	4610      	mov	r0, r2
 80181e2:	4798      	blx	r3
 80181e4:	4603      	mov	r3, r0
 80181e6:	e000      	b.n	80181ea <rcl_clock_get_now+0x42>
  }
  RCL_SET_ERROR_MSG("Clock is not initialized or does not have get_now registered.");
  return RCL_RET_ERROR;
 80181e8:	2301      	movs	r3, #1
}
 80181ea:	4618      	mov	r0, r3
 80181ec:	3708      	adds	r7, #8
 80181ee:	46bd      	mov	sp, r7
 80181f0:	bd80      	pop	{r7, pc}

080181f2 <rcl_clock_add_jump_callback>:

rcl_ret_t
rcl_clock_add_jump_callback(
  rcl_clock_t * clock, rcl_jump_threshold_t threshold, rcl_jump_callback_t callback,
  void * user_data)
{
 80181f2:	b082      	sub	sp, #8
 80181f4:	b5b0      	push	{r4, r5, r7, lr}
 80181f6:	b086      	sub	sp, #24
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	6078      	str	r0, [r7, #4]
 80181fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8018200:	e881 000c 	stmia.w	r1, {r2, r3}
  // Make sure parameters are valid
  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	2b00      	cmp	r3, #0
 8018208:	d101      	bne.n	801820e <rcl_clock_add_jump_callback+0x1c>
 801820a:	230b      	movs	r3, #11
 801820c:	e087      	b.n	801831e <rcl_clock_add_jump_callback+0x12c>
  RCL_CHECK_ALLOCATOR_WITH_MSG(
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	3314      	adds	r3, #20
 8018212:	4618      	mov	r0, r3
 8018214:	f003 faaa 	bl	801b76c <rcutils_allocator_is_valid>
 8018218:	4603      	mov	r3, r0
 801821a:	f083 0301 	eor.w	r3, r3, #1
 801821e:	b2db      	uxtb	r3, r3
 8018220:	2b00      	cmp	r3, #0
 8018222:	d001      	beq.n	8018228 <rcl_clock_add_jump_callback+0x36>
 8018224:	230b      	movs	r3, #11
 8018226:	e07a      	b.n	801831e <rcl_clock_add_jump_callback+0x12c>
    &(clock->allocator), "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_ARGUMENT_FOR_NULL(callback, RCL_RET_INVALID_ARGUMENT);
 8018228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801822a:	2b00      	cmp	r3, #0
 801822c:	d101      	bne.n	8018232 <rcl_clock_add_jump_callback+0x40>
 801822e:	230b      	movs	r3, #11
 8018230:	e075      	b.n	801831e <rcl_clock_add_jump_callback+0x12c>
  if (threshold.min_forward.nanoseconds < 0) {
 8018232:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8018236:	2b00      	cmp	r3, #0
 8018238:	da01      	bge.n	801823e <rcl_clock_add_jump_callback+0x4c>
    RCL_SET_ERROR_MSG("forward jump threshold must be positive or zero");
    return RCL_RET_INVALID_ARGUMENT;
 801823a:	230b      	movs	r3, #11
 801823c:	e06f      	b.n	801831e <rcl_clock_add_jump_callback+0x12c>
  }
  if (threshold.min_backward.nanoseconds > 0) {
 801823e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8018242:	2a01      	cmp	r2, #1
 8018244:	f173 0300 	sbcs.w	r3, r3, #0
 8018248:	db01      	blt.n	801824e <rcl_clock_add_jump_callback+0x5c>
    RCL_SET_ERROR_MSG("backward jump threshold must be negative or zero");
    return RCL_RET_INVALID_ARGUMENT;
 801824a:	230b      	movs	r3, #11
 801824c:	e067      	b.n	801831e <rcl_clock_add_jump_callback+0x12c>
  }

  // Callback/user_data pair must be unique
  for (size_t cb_idx = 0; cb_idx < clock->num_jump_callbacks; ++cb_idx) {
 801824e:	2300      	movs	r3, #0
 8018250:	617b      	str	r3, [r7, #20]
 8018252:	e017      	b.n	8018284 <rcl_clock_add_jump_callback+0x92>
    const rcl_jump_callback_info_t * info = &(clock->jump_callbacks[cb_idx]);
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	6859      	ldr	r1, [r3, #4]
 8018258:	697a      	ldr	r2, [r7, #20]
 801825a:	4613      	mov	r3, r2
 801825c:	009b      	lsls	r3, r3, #2
 801825e:	4413      	add	r3, r2
 8018260:	00db      	lsls	r3, r3, #3
 8018262:	440b      	add	r3, r1
 8018264:	60fb      	str	r3, [r7, #12]
    if (info->callback == callback && info->user_data == user_data) {
 8018266:	68fb      	ldr	r3, [r7, #12]
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801826c:	429a      	cmp	r2, r3
 801826e:	d106      	bne.n	801827e <rcl_clock_add_jump_callback+0x8c>
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	6a1b      	ldr	r3, [r3, #32]
 8018274:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018276:	429a      	cmp	r2, r3
 8018278:	d101      	bne.n	801827e <rcl_clock_add_jump_callback+0x8c>
      RCL_SET_ERROR_MSG("callback/user_data are already added to this clock");
      return RCL_RET_ERROR;
 801827a:	2301      	movs	r3, #1
 801827c:	e04f      	b.n	801831e <rcl_clock_add_jump_callback+0x12c>
  for (size_t cb_idx = 0; cb_idx < clock->num_jump_callbacks; ++cb_idx) {
 801827e:	697b      	ldr	r3, [r7, #20]
 8018280:	3301      	adds	r3, #1
 8018282:	617b      	str	r3, [r7, #20]
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	689b      	ldr	r3, [r3, #8]
 8018288:	697a      	ldr	r2, [r7, #20]
 801828a:	429a      	cmp	r2, r3
 801828c:	d3e2      	bcc.n	8018254 <rcl_clock_add_jump_callback+0x62>
    }
  }

  // Add the new callback, increasing the size of the callback list
  rcl_jump_callback_info_t * callbacks = clock->allocator.reallocate(
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	69dc      	ldr	r4, [r3, #28]
    clock->jump_callbacks, sizeof(rcl_jump_callback_info_t) * (clock->num_jump_callbacks + 1),
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	6858      	ldr	r0, [r3, #4]
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	689b      	ldr	r3, [r3, #8]
  rcl_jump_callback_info_t * callbacks = clock->allocator.reallocate(
 801829a:	1c5a      	adds	r2, r3, #1
 801829c:	4613      	mov	r3, r2
 801829e:	009b      	lsls	r3, r3, #2
 80182a0:	4413      	add	r3, r2
 80182a2:	00db      	lsls	r3, r3, #3
 80182a4:	4619      	mov	r1, r3
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182aa:	461a      	mov	r2, r3
 80182ac:	47a0      	blx	r4
 80182ae:	6138      	str	r0, [r7, #16]
    clock->allocator.state);
  if (NULL == callbacks) {
 80182b0:	693b      	ldr	r3, [r7, #16]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d101      	bne.n	80182ba <rcl_clock_add_jump_callback+0xc8>
    RCL_SET_ERROR_MSG("Failed to realloc jump callbacks");
    return RCL_RET_BAD_ALLOC;
 80182b6:	230a      	movs	r3, #10
 80182b8:	e031      	b.n	801831e <rcl_clock_add_jump_callback+0x12c>
  }
  clock->jump_callbacks = callbacks;
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	693a      	ldr	r2, [r7, #16]
 80182be:	605a      	str	r2, [r3, #4]
  clock->jump_callbacks[clock->num_jump_callbacks].callback = callback;
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	6859      	ldr	r1, [r3, #4]
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	689a      	ldr	r2, [r3, #8]
 80182c8:	4613      	mov	r3, r2
 80182ca:	009b      	lsls	r3, r3, #2
 80182cc:	4413      	add	r3, r2
 80182ce:	00db      	lsls	r3, r3, #3
 80182d0:	440b      	add	r3, r1
 80182d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80182d4:	601a      	str	r2, [r3, #0]
  clock->jump_callbacks[clock->num_jump_callbacks].threshold = threshold;
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	6859      	ldr	r1, [r3, #4]
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	689a      	ldr	r2, [r3, #8]
 80182de:	4613      	mov	r3, r2
 80182e0:	009b      	lsls	r3, r3, #2
 80182e2:	4413      	add	r3, r2
 80182e4:	00db      	lsls	r3, r3, #3
 80182e6:	440b      	add	r3, r1
 80182e8:	f103 0408 	add.w	r4, r3, #8
 80182ec:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80182f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80182f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80182f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80182f8:	e884 0003 	stmia.w	r4, {r0, r1}
  clock->jump_callbacks[clock->num_jump_callbacks].user_data = user_data;
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	6859      	ldr	r1, [r3, #4]
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	689a      	ldr	r2, [r3, #8]
 8018304:	4613      	mov	r3, r2
 8018306:	009b      	lsls	r3, r3, #2
 8018308:	4413      	add	r3, r2
 801830a:	00db      	lsls	r3, r3, #3
 801830c:	440b      	add	r3, r1
 801830e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018310:	621a      	str	r2, [r3, #32]
  ++(clock->num_jump_callbacks);
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	689b      	ldr	r3, [r3, #8]
 8018316:	1c5a      	adds	r2, r3, #1
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	609a      	str	r2, [r3, #8]
  return RCL_RET_OK;
 801831c:	2300      	movs	r3, #0
}
 801831e:	4618      	mov	r0, r3
 8018320:	3718      	adds	r7, #24
 8018322:	46bd      	mov	sp, r7
 8018324:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8018328:	b002      	add	sp, #8
 801832a:	4770      	bx	lr

0801832c <rcl_clock_remove_jump_callback>:

rcl_ret_t
rcl_clock_remove_jump_callback(
  rcl_clock_t * clock, rcl_jump_callback_t callback, void * user_data)
{
 801832c:	b5b0      	push	{r4, r5, r7, lr}
 801832e:	b088      	sub	sp, #32
 8018330:	af00      	add	r7, sp, #0
 8018332:	60f8      	str	r0, [r7, #12]
 8018334:	60b9      	str	r1, [r7, #8]
 8018336:	607a      	str	r2, [r7, #4]
  // Make sure parameters are valid
  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d101      	bne.n	8018342 <rcl_clock_remove_jump_callback+0x16>
 801833e:	230b      	movs	r3, #11
 8018340:	e081      	b.n	8018446 <rcl_clock_remove_jump_callback+0x11a>
  RCL_CHECK_ALLOCATOR_WITH_MSG(
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	3314      	adds	r3, #20
 8018346:	4618      	mov	r0, r3
 8018348:	f003 fa10 	bl	801b76c <rcutils_allocator_is_valid>
 801834c:	4603      	mov	r3, r0
 801834e:	f083 0301 	eor.w	r3, r3, #1
 8018352:	b2db      	uxtb	r3, r3
 8018354:	2b00      	cmp	r3, #0
 8018356:	d001      	beq.n	801835c <rcl_clock_remove_jump_callback+0x30>
 8018358:	230b      	movs	r3, #11
 801835a:	e074      	b.n	8018446 <rcl_clock_remove_jump_callback+0x11a>
    &(clock->allocator), "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_ARGUMENT_FOR_NULL(callback, RCL_RET_INVALID_ARGUMENT);
 801835c:	68bb      	ldr	r3, [r7, #8]
 801835e:	2b00      	cmp	r3, #0
 8018360:	d101      	bne.n	8018366 <rcl_clock_remove_jump_callback+0x3a>
 8018362:	230b      	movs	r3, #11
 8018364:	e06f      	b.n	8018446 <rcl_clock_remove_jump_callback+0x11a>

  // Delete callback if found, moving all callbacks after back one
  bool found_callback = false;
 8018366:	2300      	movs	r3, #0
 8018368:	77fb      	strb	r3, [r7, #31]
  for (size_t cb_idx = 0; cb_idx < clock->num_jump_callbacks; ++cb_idx) {
 801836a:	2300      	movs	r3, #0
 801836c:	61bb      	str	r3, [r7, #24]
 801836e:	e02f      	b.n	80183d0 <rcl_clock_remove_jump_callback+0xa4>
    const rcl_jump_callback_info_t * info = &(clock->jump_callbacks[cb_idx]);
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	6859      	ldr	r1, [r3, #4]
 8018374:	69ba      	ldr	r2, [r7, #24]
 8018376:	4613      	mov	r3, r2
 8018378:	009b      	lsls	r3, r3, #2
 801837a:	4413      	add	r3, r2
 801837c:	00db      	lsls	r3, r3, #3
 801837e:	440b      	add	r3, r1
 8018380:	613b      	str	r3, [r7, #16]
    if (found_callback) {
 8018382:	7ffb      	ldrb	r3, [r7, #31]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d014      	beq.n	80183b2 <rcl_clock_remove_jump_callback+0x86>
      clock->jump_callbacks[cb_idx - 1] = *info;
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	6859      	ldr	r1, [r3, #4]
 801838c:	69ba      	ldr	r2, [r7, #24]
 801838e:	4613      	mov	r3, r2
 8018390:	009b      	lsls	r3, r3, #2
 8018392:	4413      	add	r3, r2
 8018394:	00db      	lsls	r3, r3, #3
 8018396:	3b28      	subs	r3, #40	; 0x28
 8018398:	18ca      	adds	r2, r1, r3
 801839a:	693b      	ldr	r3, [r7, #16]
 801839c:	4614      	mov	r4, r2
 801839e:	461d      	mov	r5, r3
 80183a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80183a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80183a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80183ac:	e884 0003 	stmia.w	r4, {r0, r1}
 80183b0:	e00b      	b.n	80183ca <rcl_clock_remove_jump_callback+0x9e>
    } else if (info->callback == callback && info->user_data == user_data) {
 80183b2:	693b      	ldr	r3, [r7, #16]
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	68ba      	ldr	r2, [r7, #8]
 80183b8:	429a      	cmp	r2, r3
 80183ba:	d106      	bne.n	80183ca <rcl_clock_remove_jump_callback+0x9e>
 80183bc:	693b      	ldr	r3, [r7, #16]
 80183be:	6a1b      	ldr	r3, [r3, #32]
 80183c0:	687a      	ldr	r2, [r7, #4]
 80183c2:	429a      	cmp	r2, r3
 80183c4:	d101      	bne.n	80183ca <rcl_clock_remove_jump_callback+0x9e>
      found_callback = true;
 80183c6:	2301      	movs	r3, #1
 80183c8:	77fb      	strb	r3, [r7, #31]
  for (size_t cb_idx = 0; cb_idx < clock->num_jump_callbacks; ++cb_idx) {
 80183ca:	69bb      	ldr	r3, [r7, #24]
 80183cc:	3301      	adds	r3, #1
 80183ce:	61bb      	str	r3, [r7, #24]
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	689b      	ldr	r3, [r3, #8]
 80183d4:	69ba      	ldr	r2, [r7, #24]
 80183d6:	429a      	cmp	r2, r3
 80183d8:	d3ca      	bcc.n	8018370 <rcl_clock_remove_jump_callback+0x44>
    }
  }
  if (!found_callback) {
 80183da:	7ffb      	ldrb	r3, [r7, #31]
 80183dc:	f083 0301 	eor.w	r3, r3, #1
 80183e0:	b2db      	uxtb	r3, r3
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d001      	beq.n	80183ea <rcl_clock_remove_jump_callback+0xbe>
    RCL_SET_ERROR_MSG("jump callback was not found");
    return RCL_RET_ERROR;
 80183e6:	2301      	movs	r3, #1
 80183e8:	e02d      	b.n	8018446 <rcl_clock_remove_jump_callback+0x11a>
  }

  // Shrink size of the callback array
  if (--(clock->num_jump_callbacks) == 0) {
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	689b      	ldr	r3, [r3, #8]
 80183ee:	1e5a      	subs	r2, r3, #1
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	609a      	str	r2, [r3, #8]
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	689b      	ldr	r3, [r3, #8]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d10b      	bne.n	8018414 <rcl_clock_remove_jump_callback+0xe8>
    clock->allocator.deallocate(clock->jump_callbacks, clock->allocator.state);
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	699b      	ldr	r3, [r3, #24]
 8018400:	68fa      	ldr	r2, [r7, #12]
 8018402:	6850      	ldr	r0, [r2, #4]
 8018404:	68fa      	ldr	r2, [r7, #12]
 8018406:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018408:	4611      	mov	r1, r2
 801840a:	4798      	blx	r3
    clock->jump_callbacks = NULL;
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	2200      	movs	r2, #0
 8018410:	605a      	str	r2, [r3, #4]
 8018412:	e017      	b.n	8018444 <rcl_clock_remove_jump_callback+0x118>
  } else {
    rcl_jump_callback_info_t * callbacks = clock->allocator.reallocate(
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	69dc      	ldr	r4, [r3, #28]
      clock->jump_callbacks, sizeof(rcl_jump_callback_info_t) * clock->num_jump_callbacks,
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	6858      	ldr	r0, [r3, #4]
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	689a      	ldr	r2, [r3, #8]
    rcl_jump_callback_info_t * callbacks = clock->allocator.reallocate(
 8018420:	4613      	mov	r3, r2
 8018422:	009b      	lsls	r3, r3, #2
 8018424:	4413      	add	r3, r2
 8018426:	00db      	lsls	r3, r3, #3
 8018428:	4619      	mov	r1, r3
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801842e:	461a      	mov	r2, r3
 8018430:	47a0      	blx	r4
 8018432:	6178      	str	r0, [r7, #20]
      clock->allocator.state);
    if (NULL == callbacks) {
 8018434:	697b      	ldr	r3, [r7, #20]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d101      	bne.n	801843e <rcl_clock_remove_jump_callback+0x112>
      RCL_SET_ERROR_MSG("Failed to shrink jump callbacks");
      return RCL_RET_BAD_ALLOC;
 801843a:	230a      	movs	r3, #10
 801843c:	e003      	b.n	8018446 <rcl_clock_remove_jump_callback+0x11a>
    }
    clock->jump_callbacks = callbacks;
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	697a      	ldr	r2, [r7, #20]
 8018442:	605a      	str	r2, [r3, #4]
  }
  return RCL_RET_OK;
 8018444:	2300      	movs	r3, #0
}
 8018446:	4618      	mov	r0, r3
 8018448:	3720      	adds	r7, #32
 801844a:	46bd      	mov	sp, r7
 801844c:	bdb0      	pop	{r4, r5, r7, pc}

0801844e <rcutils_atomic_load_bool>:
{
 801844e:	b480      	push	{r7}
 8018450:	b085      	sub	sp, #20
 8018452:	af00      	add	r7, sp, #0
 8018454:	6078      	str	r0, [r7, #4]
  bool result = false;
 8018456:	2300      	movs	r3, #0
 8018458:	73fb      	strb	r3, [r7, #15]
  rcutils_atomic_load(a_bool, result);
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	f3bf 8f5b 	dmb	ish
 8018460:	781b      	ldrb	r3, [r3, #0]
 8018462:	f3bf 8f5b 	dmb	ish
 8018466:	b2db      	uxtb	r3, r3
 8018468:	2b00      	cmp	r3, #0
 801846a:	bf14      	ite	ne
 801846c:	2301      	movne	r3, #1
 801846e:	2300      	moveq	r3, #0
 8018470:	73fb      	strb	r3, [r7, #15]
  return result;
 8018472:	7bfb      	ldrb	r3, [r7, #15]
}
 8018474:	4618      	mov	r0, r3
 8018476:	3714      	adds	r7, #20
 8018478:	46bd      	mov	sp, r7
 801847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847e:	4770      	bx	lr

08018480 <rcutils_atomic_load_int64_t>:
{
 8018480:	b580      	push	{r7, lr}
 8018482:	b084      	sub	sp, #16
 8018484:	af00      	add	r7, sp, #0
 8018486:	6078      	str	r0, [r7, #4]
  int64_t result = 0;
 8018488:	f04f 0200 	mov.w	r2, #0
 801848c:	f04f 0300 	mov.w	r3, #0
 8018490:	e9c7 2302 	strd	r2, r3, [r7, #8]
  rcutils_atomic_load(a_int64_t, result);
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	2105      	movs	r1, #5
 8018498:	4618      	mov	r0, r3
 801849a:	f003 f9f0 	bl	801b87e <__atomic_load_8>
 801849e:	4602      	mov	r2, r0
 80184a0:	460b      	mov	r3, r1
 80184a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return result;
 80184a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80184aa:	4610      	mov	r0, r2
 80184ac:	4619      	mov	r1, r3
 80184ae:	3710      	adds	r7, #16
 80184b0:	46bd      	mov	sp, r7
 80184b2:	bd80      	pop	{r7, pc}

080184b4 <rcutils_atomic_load_uint64_t>:
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b084      	sub	sp, #16
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	6078      	str	r0, [r7, #4]
  uint64_t result = 0;
 80184bc:	f04f 0200 	mov.w	r2, #0
 80184c0:	f04f 0300 	mov.w	r3, #0
 80184c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  rcutils_atomic_load(a_uint64_t, result);
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	2105      	movs	r1, #5
 80184cc:	4618      	mov	r0, r3
 80184ce:	f003 f9d6 	bl	801b87e <__atomic_load_8>
 80184d2:	4602      	mov	r2, r0
 80184d4:	460b      	mov	r3, r1
 80184d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return result;
 80184da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80184de:	4610      	mov	r0, r2
 80184e0:	4619      	mov	r1, r3
 80184e2:	3710      	adds	r7, #16
 80184e4:	46bd      	mov	sp, r7
 80184e6:	bd80      	pop	{r7, pc}

080184e8 <rcutils_atomic_load_uintptr_t>:
{
 80184e8:	b480      	push	{r7}
 80184ea:	b085      	sub	sp, #20
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]
  uintptr_t result = 0;
 80184f0:	2300      	movs	r3, #0
 80184f2:	60fb      	str	r3, [r7, #12]
  rcutils_atomic_load(a_uintptr_t, result);
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	f3bf 8f5b 	dmb	ish
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	60fb      	str	r3, [r7, #12]
 80184fe:	f3bf 8f5b 	dmb	ish
  return result;
 8018502:	68fb      	ldr	r3, [r7, #12]
}
 8018504:	4618      	mov	r0, r3
 8018506:	3714      	adds	r7, #20
 8018508:	46bd      	mov	sp, r7
 801850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801850e:	4770      	bx	lr

08018510 <rcutils_atomic_exchange_int64_t>:
{
 8018510:	b580      	push	{r7, lr}
 8018512:	b088      	sub	sp, #32
 8018514:	af02      	add	r7, sp, #8
 8018516:	60f8      	str	r0, [r7, #12]
 8018518:	e9c7 2300 	strd	r2, r3, [r7]
  rcutils_atomic_exchange(a_int64_t, result, desired);
 801851c:	68f9      	ldr	r1, [r7, #12]
 801851e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018522:	2005      	movs	r0, #5
 8018524:	9000      	str	r0, [sp, #0]
 8018526:	4608      	mov	r0, r1
 8018528:	f003 f9d5 	bl	801b8d6 <__atomic_exchange_8>
 801852c:	4602      	mov	r2, r0
 801852e:	460b      	mov	r3, r1
 8018530:	e9c7 2304 	strd	r2, r3, [r7, #16]
  return result;
 8018534:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8018538:	4610      	mov	r0, r2
 801853a:	4619      	mov	r1, r3
 801853c:	3718      	adds	r7, #24
 801853e:	46bd      	mov	sp, r7
 8018540:	bd80      	pop	{r7, pc}
	...

08018544 <rcl_get_zero_initialized_timer>:
  rcl_allocator_t allocator;
} rcl_timer_impl_t;

rcl_timer_t
rcl_get_zero_initialized_timer()
{
 8018544:	b480      	push	{r7}
 8018546:	af00      	add	r7, sp, #0
  static rcl_timer_t null_timer = {0};
  return null_timer;
 8018548:	4b03      	ldr	r3, [pc, #12]	; (8018558 <rcl_get_zero_initialized_timer+0x14>)
 801854a:	681b      	ldr	r3, [r3, #0]
}
 801854c:	4618      	mov	r0, r3
 801854e:	46bd      	mov	sp, r7
 8018550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018554:	4770      	bx	lr
 8018556:	bf00      	nop
 8018558:	2000e5f8 	.word	0x2000e5f8

0801855c <_rcl_timer_time_jump>:

void _rcl_timer_time_jump(
  const struct rcl_time_jump_t * time_jump,
  bool before_jump,
  void * user_data)
{
 801855c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018560:	b09b      	sub	sp, #108	; 0x6c
 8018562:	af02      	add	r7, sp, #8
 8018564:	61f8      	str	r0, [r7, #28]
 8018566:	460b      	mov	r3, r1
 8018568:	617a      	str	r2, [r7, #20]
 801856a:	76fb      	strb	r3, [r7, #27]
  rcl_timer_t * timer = (rcl_timer_t *)user_data;
 801856c:	697b      	ldr	r3, [r7, #20]
 801856e:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (before_jump) {
 8018570:	7efb      	ldrb	r3, [r7, #27]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d037      	beq.n	80185e6 <_rcl_timer_time_jump+0x8a>
    if (RCL_ROS_TIME_ACTIVATED == time_jump->clock_change ||
 8018576:	69fb      	ldr	r3, [r7, #28]
 8018578:	781b      	ldrb	r3, [r3, #0]
 801857a:	2b02      	cmp	r3, #2
 801857c:	d004      	beq.n	8018588 <_rcl_timer_time_jump+0x2c>
      RCL_ROS_TIME_DEACTIVATED == time_jump->clock_change)
 801857e:	69fb      	ldr	r3, [r7, #28]
 8018580:	781b      	ldrb	r3, [r3, #0]
    if (RCL_ROS_TIME_ACTIVATED == time_jump->clock_change ||
 8018582:	2b03      	cmp	r3, #3
 8018584:	f040 80df 	bne.w	8018746 <_rcl_timer_time_jump+0x1ea>
    {
      rcl_time_point_value_t now;
      if (RCL_RET_OK != rcl_clock_get_now(timer->impl->clock, &now)) {
 8018588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018592:	4611      	mov	r1, r2
 8018594:	4618      	mov	r0, r3
 8018596:	f7ff fe07 	bl	80181a8 <rcl_clock_get_now>
 801859a:	4603      	mov	r3, r0
 801859c:	2b00      	cmp	r3, #0
 801859e:	f040 80c9 	bne.w	8018734 <_rcl_timer_time_jump+0x1d8>
        RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "Failed to get current time in jump callback");
        return;
      }
      // Source of time is changing, but the timer has ellapsed some portion of its period
      // Save ellapsed duration pre jump so the timer only waits the remainder in the new epoch
      if (0 == now) {
 80185a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80185a6:	4313      	orrs	r3, r2
 80185a8:	f000 80c6 	beq.w	8018738 <_rcl_timer_time_jump+0x1dc>
        // No time credit if clock is uninitialized
        return;
      }
      const int64_t next_call_time = rcutils_atomic_load_int64_t(&timer->impl->next_call_time);
 80185ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	3328      	adds	r3, #40	; 0x28
 80185b2:	4618      	mov	r0, r3
 80185b4:	f7ff ff64 	bl	8018480 <rcutils_atomic_load_int64_t>
 80185b8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
      rcutils_atomic_store(&timer->impl->time_credit, next_call_time - now);
 80185bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80185c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80185c8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80185cc:	1a85      	subs	r5, r0, r2
 80185ce:	60bd      	str	r5, [r7, #8]
 80185d0:	eb61 0303 	sbc.w	r3, r1, r3
 80185d4:	60fb      	str	r3, [r7, #12]
 80185d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80185da:	2105      	movs	r1, #5
 80185dc:	9100      	str	r1, [sp, #0]
 80185de:	4620      	mov	r0, r4
 80185e0:	f003 f964 	bl	801b8ac <__atomic_store_8>
 80185e4:	e0af      	b.n	8018746 <_rcl_timer_time_jump+0x1ea>
    }
  } else {
    rcl_time_point_value_t now;
    if (RCL_RET_OK != rcl_clock_get_now(timer->impl->clock, &now)) {
 80185e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	f107 0220 	add.w	r2, r7, #32
 80185f0:	4611      	mov	r1, r2
 80185f2:	4618      	mov	r0, r3
 80185f4:	f7ff fdd8 	bl	80181a8 <rcl_clock_get_now>
 80185f8:	4603      	mov	r3, r0
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	f040 809e 	bne.w	801873c <_rcl_timer_time_jump+0x1e0>
      RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "Failed to get current time in jump callback");
      return;
    }
    const int64_t last_call_time = rcutils_atomic_load_int64_t(&timer->impl->last_call_time);
 8018600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	3320      	adds	r3, #32
 8018606:	4618      	mov	r0, r3
 8018608:	f7ff ff3a 	bl	8018480 <rcutils_atomic_load_int64_t>
 801860c:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
    const int64_t next_call_time = rcutils_atomic_load_int64_t(&timer->impl->next_call_time);
 8018610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	3328      	adds	r3, #40	; 0x28
 8018616:	4618      	mov	r0, r3
 8018618:	f7ff ff32 	bl	8018480 <rcutils_atomic_load_int64_t>
 801861c:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
    const int64_t period = rcutils_atomic_load_uint64_t(&timer->impl->period);
 8018620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	3318      	adds	r3, #24
 8018626:	4618      	mov	r0, r3
 8018628:	f7ff ff44 	bl	80184b4 <rcutils_atomic_load_uint64_t>
 801862c:	4602      	mov	r2, r0
 801862e:	460b      	mov	r3, r1
 8018630:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if (RCL_ROS_TIME_ACTIVATED == time_jump->clock_change ||
 8018634:	69fb      	ldr	r3, [r7, #28]
 8018636:	781b      	ldrb	r3, [r3, #0]
 8018638:	2b02      	cmp	r3, #2
 801863a:	d003      	beq.n	8018644 <_rcl_timer_time_jump+0xe8>
      RCL_ROS_TIME_DEACTIVATED == time_jump->clock_change)
 801863c:	69fb      	ldr	r3, [r7, #28]
 801863e:	781b      	ldrb	r3, [r3, #0]
    if (RCL_ROS_TIME_ACTIVATED == time_jump->clock_change ||
 8018640:	2b03      	cmp	r3, #3
 8018642:	d141      	bne.n	80186c8 <_rcl_timer_time_jump+0x16c>
    {
      // ROS time activated or deactivated
      if (0 == now) {
 8018644:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8018648:	4313      	orrs	r3, r2
 801864a:	d079      	beq.n	8018740 <_rcl_timer_time_jump+0x1e4>
        // Can't apply time credit if clock is uninitialized
        return;
      }
      int64_t time_credit = rcutils_atomic_exchange_int64_t(&timer->impl->time_credit, 0);
 801864c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018654:	f04f 0200 	mov.w	r2, #0
 8018658:	f04f 0300 	mov.w	r3, #0
 801865c:	4608      	mov	r0, r1
 801865e:	f7ff ff57 	bl	8018510 <rcutils_atomic_exchange_int64_t>
 8018662:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
      if (time_credit) {
 8018666:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801866a:	4313      	orrs	r3, r2
 801866c:	d06a      	beq.n	8018744 <_rcl_timer_time_jump+0x1e8>
        // set times in new epoch so timer only waits the remainder of the period
        rcutils_atomic_store(&timer->impl->next_call_time, now - time_credit + period);
 801866e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8018676:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801867a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801867e:	1a84      	subs	r4, r0, r2
 8018680:	eb61 0503 	sbc.w	r5, r1, r3
 8018684:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8018688:	18a1      	adds	r1, r4, r2
 801868a:	6039      	str	r1, [r7, #0]
 801868c:	eb45 0303 	adc.w	r3, r5, r3
 8018690:	607b      	str	r3, [r7, #4]
 8018692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018696:	2105      	movs	r1, #5
 8018698:	9100      	str	r1, [sp, #0]
 801869a:	4630      	mov	r0, r6
 801869c:	f003 f906 	bl	801b8ac <__atomic_store_8>
        rcutils_atomic_store(&timer->impl->last_call_time, now - time_credit);
 80186a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	f103 0420 	add.w	r4, r3, #32
 80186a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80186ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80186b0:	ebb0 0a02 	subs.w	sl, r0, r2
 80186b4:	eb61 0b03 	sbc.w	fp, r1, r3
 80186b8:	4652      	mov	r2, sl
 80186ba:	465b      	mov	r3, fp
 80186bc:	2105      	movs	r1, #5
 80186be:	9100      	str	r1, [sp, #0]
 80186c0:	4620      	mov	r0, r4
 80186c2:	f003 f8f3 	bl	801b8ac <__atomic_store_8>
    {
 80186c6:	e03d      	b.n	8018744 <_rcl_timer_time_jump+0x1e8>
      }
    } else if (next_call_time <= now) {
 80186c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80186cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80186d0:	4290      	cmp	r0, r2
 80186d2:	eb71 0303 	sbcs.w	r3, r1, r3
 80186d6:	db06      	blt.n	80186e6 <_rcl_timer_time_jump+0x18a>
      // Post Forward jump and timer is ready
      if (RCL_RET_OK != rcl_trigger_guard_condition(&timer->impl->guard_condition)) {
 80186d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	3308      	adds	r3, #8
 80186de:	4618      	mov	r0, r3
 80186e0:	f7fd fcf6 	bl	80160d0 <rcl_trigger_guard_condition>
 80186e4:	e02f      	b.n	8018746 <_rcl_timer_time_jump+0x1ea>
        RCUTILS_LOG_ERROR_NAMED(
          ROS_PACKAGE_NAME, "Failed to get trigger guard condition in jump callback");
      }
    } else if (now < last_call_time) {
 80186e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80186ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80186ee:	4290      	cmp	r0, r2
 80186f0:	eb71 0303 	sbcs.w	r3, r1, r3
 80186f4:	da27      	bge.n	8018746 <_rcl_timer_time_jump+0x1ea>
      // Post backwards time jump that went further back than 1 period
      // next callback should happen after 1 period
      rcutils_atomic_store(&timer->impl->next_call_time, now + period);
 80186f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80186fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8018702:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8018706:	eb10 0802 	adds.w	r8, r0, r2
 801870a:	eb41 0903 	adc.w	r9, r1, r3
 801870e:	4642      	mov	r2, r8
 8018710:	464b      	mov	r3, r9
 8018712:	2105      	movs	r1, #5
 8018714:	9100      	str	r1, [sp, #0]
 8018716:	4620      	mov	r0, r4
 8018718:	f003 f8c8 	bl	801b8ac <__atomic_store_8>
      rcutils_atomic_store(&timer->impl->last_call_time, now);
 801871c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	f103 0120 	add.w	r1, r3, #32
 8018724:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8018728:	2005      	movs	r0, #5
 801872a:	9000      	str	r0, [sp, #0]
 801872c:	4608      	mov	r0, r1
 801872e:	f003 f8bd 	bl	801b8ac <__atomic_store_8>
      return;
 8018732:	e008      	b.n	8018746 <_rcl_timer_time_jump+0x1ea>
        return;
 8018734:	bf00      	nop
 8018736:	e006      	b.n	8018746 <_rcl_timer_time_jump+0x1ea>
        return;
 8018738:	bf00      	nop
 801873a:	e004      	b.n	8018746 <_rcl_timer_time_jump+0x1ea>
      return;
 801873c:	bf00      	nop
 801873e:	e002      	b.n	8018746 <_rcl_timer_time_jump+0x1ea>
        return;
 8018740:	bf00      	nop
 8018742:	e000      	b.n	8018746 <_rcl_timer_time_jump+0x1ea>
    {
 8018744:	bf00      	nop
    }
  }
}
 8018746:	3764      	adds	r7, #100	; 0x64
 8018748:	46bd      	mov	sp, r7
 801874a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018750 <rcl_timer_init>:
  rcl_clock_t * clock,
  rcl_context_t * context,
  int64_t period,
  const rcl_timer_callback_t callback,
  rcl_allocator_t allocator)
{
 8018750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018752:	b0b1      	sub	sp, #196	; 0xc4
 8018754:	af06      	add	r7, sp, #24
 8018756:	6178      	str	r0, [r7, #20]
 8018758:	6139      	str	r1, [r7, #16]
 801875a:	60fa      	str	r2, [r7, #12]
  RCL_CHECK_ALLOCATOR_WITH_MSG(&allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 801875c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8018760:	4618      	mov	r0, r3
 8018762:	f003 f803 	bl	801b76c <rcutils_allocator_is_valid>
 8018766:	4603      	mov	r3, r0
 8018768:	f083 0301 	eor.w	r3, r3, #1
 801876c:	b2db      	uxtb	r3, r3
 801876e:	2b00      	cmp	r3, #0
 8018770:	d001      	beq.n	8018776 <rcl_timer_init+0x26>
 8018772:	230b      	movs	r3, #11
 8018774:	e0ce      	b.n	8018914 <rcl_timer_init+0x1c4>
  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
 8018776:	697b      	ldr	r3, [r7, #20]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d101      	bne.n	8018780 <rcl_timer_init+0x30>
 801877c:	230b      	movs	r3, #11
 801877e:	e0c9      	b.n	8018914 <rcl_timer_init+0x1c4>
  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 8018780:	693b      	ldr	r3, [r7, #16]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d101      	bne.n	801878a <rcl_timer_init+0x3a>
 8018786:	230b      	movs	r3, #11
 8018788:	e0c4      	b.n	8018914 <rcl_timer_init+0x1c4>
  if (period < 0) {
 801878a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 801878e:	2b00      	cmp	r3, #0
 8018790:	da01      	bge.n	8018796 <rcl_timer_init+0x46>
    RCL_SET_ERROR_MSG("timer period must be non-negative");
    return RCL_RET_INVALID_ARGUMENT;
 8018792:	230b      	movs	r3, #11
 8018794:	e0be      	b.n	8018914 <rcl_timer_init+0x1c4>
  }
  RCUTILS_LOG_DEBUG_NAMED(
    ROS_PACKAGE_NAME, "Initializing timer with period: %" PRIu64 "ns", period);
  if (timer->impl) {
 8018796:	697b      	ldr	r3, [r7, #20]
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	2b00      	cmp	r3, #0
 801879c:	d001      	beq.n	80187a2 <rcl_timer_init+0x52>
    RCL_SET_ERROR_MSG("timer already initialized, or memory was uninitialized");
    return RCL_RET_ALREADY_INIT;
 801879e:	2364      	movs	r3, #100	; 0x64
 80187a0:	e0b8      	b.n	8018914 <rcl_timer_init+0x1c4>
  }
  rcl_time_point_value_t now;
  rcl_ret_t now_ret = rcl_clock_get_now(clock, &now);
 80187a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80187a6:	4619      	mov	r1, r3
 80187a8:	6938      	ldr	r0, [r7, #16]
 80187aa:	f7ff fcfd 	bl	80181a8 <rcl_clock_get_now>
 80187ae:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  if (now_ret != RCL_RET_OK) {
 80187b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d002      	beq.n	80187c0 <rcl_timer_init+0x70>
    return now_ret;  // rcl error state should already be set.
 80187ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80187be:	e0a9      	b.n	8018914 <rcl_timer_init+0x1c4>
  }
  rcl_timer_impl_t impl;
  impl.clock = clock;
 80187c0:	693b      	ldr	r3, [r7, #16]
 80187c2:	64bb      	str	r3, [r7, #72]	; 0x48
  impl.context = context;
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  impl.guard_condition = rcl_get_zero_initialized_guard_condition();
 80187c8:	463b      	mov	r3, r7
 80187ca:	4618      	mov	r0, r3
 80187cc:	f7fd fb5a 	bl	8015e84 <rcl_get_zero_initialized_guard_condition>
 80187d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80187d4:	463a      	mov	r2, r7
 80187d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80187da:	e883 0003 	stmia.w	r3, {r0, r1}
  rcl_guard_condition_options_t options = rcl_guard_condition_get_default_options();
 80187de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7fd fc56 	bl	8016094 <rcl_guard_condition_get_default_options>
  rcl_ret_t ret = rcl_guard_condition_init(&(impl.guard_condition), context, options);
 80187e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80187ec:	f103 0c08 	add.w	ip, r3, #8
 80187f0:	466e      	mov	r6, sp
 80187f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80187f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80187fa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80187fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018802:	cb0c      	ldmia	r3, {r2, r3}
 8018804:	68f9      	ldr	r1, [r7, #12]
 8018806:	4660      	mov	r0, ip
 8018808:	f7fd fbce 	bl	8015fa8 <rcl_guard_condition_init>
 801880c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  if (RCL_RET_OK != ret) {
 8018810:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018814:	2b00      	cmp	r3, #0
 8018816:	d002      	beq.n	801881e <rcl_timer_init+0xce>
    return ret;
 8018818:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801881c:	e07a      	b.n	8018914 <rcl_timer_init+0x1c4>
  }
  if (RCL_ROS_TIME == impl.clock->type) {
 801881e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018820:	781b      	ldrb	r3, [r3, #0]
 8018822:	2b01      	cmp	r3, #1
 8018824:	d12c      	bne.n	8018880 <rcl_timer_init+0x130>
    rcl_jump_threshold_t threshold;
    threshold.on_clock_change = true;
 8018826:	2301      	movs	r3, #1
 8018828:	763b      	strb	r3, [r7, #24]
    threshold.min_forward.nanoseconds = 1;
 801882a:	f04f 0201 	mov.w	r2, #1
 801882e:	f04f 0300 	mov.w	r3, #0
 8018832:	e9c7 2308 	strd	r2, r3, [r7, #32]
    threshold.min_backward.nanoseconds = -1;
 8018836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801883a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801883e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    ret = rcl_clock_add_jump_callback(clock, threshold, _rcl_timer_time_jump, timer);
 8018842:	697b      	ldr	r3, [r7, #20]
 8018844:	9305      	str	r3, [sp, #20]
 8018846:	4b35      	ldr	r3, [pc, #212]	; (801891c <rcl_timer_init+0x1cc>)
 8018848:	9304      	str	r3, [sp, #16]
 801884a:	466e      	mov	r6, sp
 801884c:	f107 0320 	add.w	r3, r7, #32
 8018850:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018852:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8018856:	f107 0318 	add.w	r3, r7, #24
 801885a:	cb0c      	ldmia	r3, {r2, r3}
 801885c:	6938      	ldr	r0, [r7, #16]
 801885e:	f7ff fcc8 	bl	80181f2 <rcl_clock_add_jump_callback>
 8018862:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    if (RCL_RET_OK != ret) {
 8018866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801886a:	2b00      	cmp	r3, #0
 801886c:	d008      	beq.n	8018880 <rcl_timer_init+0x130>
      if (RCL_RET_OK != rcl_guard_condition_fini(&(impl.guard_condition))) {
 801886e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018872:	3308      	adds	r3, #8
 8018874:	4618      	mov	r0, r3
 8018876:	f7fd fbd1 	bl	801601c <rcl_guard_condition_fini>
        // Should be impossible
        RCUTILS_LOG_ERROR_NAMED(
          ROS_PACKAGE_NAME, "Failed to fini guard condition after failing to add jump callback");
      }
      return ret;
 801887a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801887e:	e049      	b.n	8018914 <rcl_timer_init+0x1c4>
    }
  }
  atomic_init(&impl.callback, (uintptr_t)callback);
 8018880:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018884:	65bb      	str	r3, [r7, #88]	; 0x58
  atomic_init(&impl.period, period);
 8018886:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 801888a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  atomic_init(&impl.time_credit, 0);
 801888e:	f04f 0200 	mov.w	r2, #0
 8018892:	f04f 0300 	mov.w	r3, #0
 8018896:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  atomic_init(&impl.last_call_time, now);
 801889a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 801889e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  atomic_init(&impl.next_call_time, now + period);
 80188a2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80188a6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80188aa:	1884      	adds	r4, r0, r2
 80188ac:	eb41 0503 	adc.w	r5, r1, r3
 80188b0:	e9c7 451c 	strd	r4, r5, [r7, #112]	; 0x70
  atomic_init(&impl.canceled, false);
 80188b4:	2300      	movs	r3, #0
 80188b6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  impl.allocator = allocator;
 80188ba:	f107 0484 	add.w	r4, r7, #132	; 0x84
 80188be:	f107 05cc 	add.w	r5, r7, #204	; 0xcc
 80188c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80188c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80188c6:	682b      	ldr	r3, [r5, #0]
 80188c8:	6023      	str	r3, [r4, #0]
  timer->impl = (rcl_timer_impl_t *)allocator.allocate(sizeof(rcl_timer_impl_t), allocator.state);
 80188ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80188ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80188d2:	4611      	mov	r1, r2
 80188d4:	2050      	movs	r0, #80	; 0x50
 80188d6:	4798      	blx	r3
 80188d8:	4602      	mov	r2, r0
 80188da:	697b      	ldr	r3, [r7, #20]
 80188dc:	601a      	str	r2, [r3, #0]
  if (NULL == timer->impl) {
 80188de:	697b      	ldr	r3, [r7, #20]
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d10c      	bne.n	8018900 <rcl_timer_init+0x1b0>
    if (RCL_RET_OK != rcl_guard_condition_fini(&(impl.guard_condition))) {
 80188e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80188ea:	3308      	adds	r3, #8
 80188ec:	4618      	mov	r0, r3
 80188ee:	f7fd fb95 	bl	801601c <rcl_guard_condition_fini>
      // Should be impossible
      RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "Failed to fini guard condition after bad alloc");
    }
    if (RCL_RET_OK != rcl_clock_remove_jump_callback(clock, _rcl_timer_time_jump, timer)) {
 80188f2:	697a      	ldr	r2, [r7, #20]
 80188f4:	4909      	ldr	r1, [pc, #36]	; (801891c <rcl_timer_init+0x1cc>)
 80188f6:	6938      	ldr	r0, [r7, #16]
 80188f8:	f7ff fd18 	bl	801832c <rcl_clock_remove_jump_callback>
      // Should be impossible
      RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "Failed to remove callback after bad alloc");
    }

    RCL_SET_ERROR_MSG("allocating memory failed");
    return RCL_RET_BAD_ALLOC;
 80188fc:	230a      	movs	r3, #10
 80188fe:	e009      	b.n	8018914 <rcl_timer_init+0x1c4>
  }
  *timer->impl = impl;
 8018900:	697b      	ldr	r3, [r7, #20]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	4618      	mov	r0, r3
 8018906:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801890a:	2250      	movs	r2, #80	; 0x50
 801890c:	4619      	mov	r1, r3
 801890e:	f008 f9d7 	bl	8020cc0 <memcpy>
  /*TRACEPOINT(rcl_timer_init, (const void *)timer, period);*/
  return RCL_RET_OK;
 8018912:	2300      	movs	r3, #0
}
 8018914:	4618      	mov	r0, r3
 8018916:	37ac      	adds	r7, #172	; 0xac
 8018918:	46bd      	mov	sp, r7
 801891a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801891c:	0801855d 	.word	0x0801855d

08018920 <rcl_timer_call>:
  return RCL_RET_OK;
}

rcl_ret_t
rcl_timer_call(rcl_timer_t * timer)
{
 8018920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018924:	b09e      	sub	sp, #120	; 0x78
 8018926:	af02      	add	r7, sp, #8
 8018928:	6278      	str	r0, [r7, #36]	; 0x24
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Calling timer");
  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
 801892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801892c:	2b00      	cmp	r3, #0
 801892e:	d101      	bne.n	8018934 <rcl_timer_call+0x14>
 8018930:	230b      	movs	r3, #11
 8018932:	e0bb      	b.n	8018aac <rcl_timer_call+0x18c>
  if (rcutils_atomic_load_bool(&timer->impl->canceled)) {
 8018934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	3338      	adds	r3, #56	; 0x38
 801893a:	4618      	mov	r0, r3
 801893c:	f7ff fd87 	bl	801844e <rcutils_atomic_load_bool>
 8018940:	4603      	mov	r3, r0
 8018942:	2b00      	cmp	r3, #0
 8018944:	d002      	beq.n	801894c <rcl_timer_call+0x2c>
    RCL_SET_ERROR_MSG("timer is canceled");
    return RCL_RET_TIMER_CANCELED;
 8018946:	f240 3321 	movw	r3, #801	; 0x321
 801894a:	e0af      	b.n	8018aac <rcl_timer_call+0x18c>
  }
  rcl_time_point_value_t now;
  rcl_ret_t now_ret = rcl_clock_get_now(timer->impl->clock, &now);
 801894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	681a      	ldr	r2, [r3, #0]
 8018952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018956:	4619      	mov	r1, r3
 8018958:	4610      	mov	r0, r2
 801895a:	f7ff fc25 	bl	80181a8 <rcl_clock_get_now>
 801895e:	6678      	str	r0, [r7, #100]	; 0x64
  if (now_ret != RCL_RET_OK) {
 8018960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018962:	2b00      	cmp	r3, #0
 8018964:	d001      	beq.n	801896a <rcl_timer_call+0x4a>
    return now_ret;  // rcl error state should already be set.
 8018966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018968:	e0a0      	b.n	8018aac <rcl_timer_call+0x18c>
  }
  if (now < 0) {
 801896a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801896e:	2b00      	cmp	r3, #0
 8018970:	da01      	bge.n	8018976 <rcl_timer_call+0x56>
    RCL_SET_ERROR_MSG("clock now returned negative time point value");
    return RCL_RET_ERROR;
 8018972:	2301      	movs	r3, #1
 8018974:	e09a      	b.n	8018aac <rcl_timer_call+0x18c>
  }
  rcl_time_point_value_t previous_ns =
    rcutils_atomic_exchange_int64_t(&timer->impl->last_call_time, now);
 8018976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	f103 0120 	add.w	r1, r3, #32
 801897e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8018982:	4608      	mov	r0, r1
 8018984:	f7ff fdc4 	bl	8018510 <rcutils_atomic_exchange_int64_t>
 8018988:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
  rcl_timer_callback_t typed_callback =
    (rcl_timer_callback_t)rcutils_atomic_load_uintptr_t(&timer->impl->callback);
 801898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	3310      	adds	r3, #16
 8018992:	4618      	mov	r0, r3
 8018994:	f7ff fda8 	bl	80184e8 <rcutils_atomic_load_uintptr_t>
 8018998:	4603      	mov	r3, r0
  rcl_timer_callback_t typed_callback =
 801899a:	657b      	str	r3, [r7, #84]	; 0x54

  int64_t next_call_time = rcutils_atomic_load_int64_t(&timer->impl->next_call_time);
 801899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	3328      	adds	r3, #40	; 0x28
 80189a2:	4618      	mov	r0, r3
 80189a4:	f7ff fd6c 	bl	8018480 <rcutils_atomic_load_int64_t>
 80189a8:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
  int64_t period = rcutils_atomic_load_uint64_t(&timer->impl->period);
 80189ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	3318      	adds	r3, #24
 80189b2:	4618      	mov	r0, r3
 80189b4:	f7ff fd7e 	bl	80184b4 <rcutils_atomic_load_uint64_t>
 80189b8:	4602      	mov	r2, r0
 80189ba:	460b      	mov	r3, r1
 80189bc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  // always move the next call time by exactly period forward
  // don't use now as the base to avoid extending each cycle by the time
  // between the timer being ready and the callback being triggered
  next_call_time += period;
 80189c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80189c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80189c8:	eb10 0802 	adds.w	r8, r0, r2
 80189cc:	eb41 0903 	adc.w	r9, r1, r3
 80189d0:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
  // in case the timer has missed at least once cycle
  if (next_call_time < now) {
 80189d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80189d8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80189dc:	4282      	cmp	r2, r0
 80189de:	418b      	sbcs	r3, r1
 80189e0:	da43      	bge.n	8018a6a <rcl_timer_call+0x14a>
    if (0 == period) {
 80189e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80189e6:	4313      	orrs	r3, r2
 80189e8:	d104      	bne.n	80189f4 <rcl_timer_call+0xd4>
      // a timer with a period of zero is considered always ready
      next_call_time = now;
 80189ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80189ee:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80189f2:	e03a      	b.n	8018a6a <rcl_timer_call+0x14a>
    } else {
      // move the next call time forward by as many periods as necessary
      int64_t now_ahead = now - next_call_time;
 80189f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80189f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80189fc:	ebb0 0a02 	subs.w	sl, r0, r2
 8018a00:	eb61 0b03 	sbc.w	fp, r1, r3
 8018a04:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
      // rounding up without overflow
      int64_t periods_ahead = 1 + (now_ahead - 1) / period;
 8018a08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8018a0c:	1e51      	subs	r1, r2, #1
 8018a0e:	61b9      	str	r1, [r7, #24]
 8018a10:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8018a14:	61fb      	str	r3, [r7, #28]
 8018a16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8018a1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8018a1e:	f7e8 f963 	bl	8000ce8 <__aeabi_ldivmod>
 8018a22:	4602      	mov	r2, r0
 8018a24:	460b      	mov	r3, r1
 8018a26:	1c51      	adds	r1, r2, #1
 8018a28:	6139      	str	r1, [r7, #16]
 8018a2a:	f143 0300 	adc.w	r3, r3, #0
 8018a2e:	617b      	str	r3, [r7, #20]
 8018a30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018a34:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      next_call_time += periods_ahead * period;
 8018a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018a3c:	fb03 f202 	mul.w	r2, r3, r2
 8018a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018a44:	fb01 f303 	mul.w	r3, r1, r3
 8018a48:	4413      	add	r3, r2
 8018a4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018a4e:	fba1 4502 	umull	r4, r5, r1, r2
 8018a52:	442b      	add	r3, r5
 8018a54:	461d      	mov	r5, r3
 8018a56:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8018a5a:	1911      	adds	r1, r2, r4
 8018a5c:	60b9      	str	r1, [r7, #8]
 8018a5e:	416b      	adcs	r3, r5
 8018a60:	60fb      	str	r3, [r7, #12]
 8018a62:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8018a66:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    }
  }
  rcutils_atomic_store(&timer->impl->next_call_time, next_call_time);
 8018a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8018a72:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8018a76:	2005      	movs	r0, #5
 8018a78:	9000      	str	r0, [sp, #0]
 8018a7a:	4608      	mov	r0, r1
 8018a7c:	f002 ff16 	bl	801b8ac <__atomic_store_8>

  if (typed_callback != NULL) {
 8018a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d011      	beq.n	8018aaa <rcl_timer_call+0x18a>
    int64_t since_last_call = now - previous_ns;
 8018a86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8018a8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8018a8e:	1a84      	subs	r4, r0, r2
 8018a90:	603c      	str	r4, [r7, #0]
 8018a92:	eb61 0303 	sbc.w	r3, r1, r3
 8018a96:	607b      	str	r3, [r7, #4]
 8018a98:	e9d7 3400 	ldrd	r3, r4, [r7]
 8018a9c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    typed_callback(timer, since_last_call);
 8018aa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018aa2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8018aa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018aa8:	4788      	blx	r1
  }
  return RCL_RET_OK;
 8018aaa:	2300      	movs	r3, #0
}
 8018aac:	4618      	mov	r0, r3
 8018aae:	3770      	adds	r7, #112	; 0x70
 8018ab0:	46bd      	mov	sp, r7
 8018ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08018ab6 <rcl_timer_is_ready>:

rcl_ret_t
rcl_timer_is_ready(const rcl_timer_t * timer, bool * is_ready)
{
 8018ab6:	b580      	push	{r7, lr}
 8018ab8:	b086      	sub	sp, #24
 8018aba:	af00      	add	r7, sp, #0
 8018abc:	6078      	str	r0, [r7, #4]
 8018abe:	6039      	str	r1, [r7, #0]
  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d101      	bne.n	8018aca <rcl_timer_is_ready+0x14>
 8018ac6:	230b      	movs	r3, #11
 8018ac8:	e02b      	b.n	8018b22 <rcl_timer_is_ready+0x6c>
  RCL_CHECK_ARGUMENT_FOR_NULL(is_ready, RCL_RET_INVALID_ARGUMENT);
 8018aca:	683b      	ldr	r3, [r7, #0]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d101      	bne.n	8018ad4 <rcl_timer_is_ready+0x1e>
 8018ad0:	230b      	movs	r3, #11
 8018ad2:	e026      	b.n	8018b22 <rcl_timer_is_ready+0x6c>
  int64_t time_until_next_call;
  rcl_ret_t ret = rcl_timer_get_time_until_next_call(timer, &time_until_next_call);
 8018ad4:	f107 0308 	add.w	r3, r7, #8
 8018ad8:	4619      	mov	r1, r3
 8018ada:	6878      	ldr	r0, [r7, #4]
 8018adc:	f000 f825 	bl	8018b2a <rcl_timer_get_time_until_next_call>
 8018ae0:	6178      	str	r0, [r7, #20]
  if (ret != RCL_RET_OK) {
 8018ae2:	697b      	ldr	r3, [r7, #20]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d001      	beq.n	8018aec <rcl_timer_is_ready+0x36>
    return ret;  // rcl error state should already be set.
 8018ae8:	697b      	ldr	r3, [r7, #20]
 8018aea:	e01a      	b.n	8018b22 <rcl_timer_is_ready+0x6c>
  }
  *is_ready = (time_until_next_call <= 0) && !rcutils_atomic_load_bool(&timer->impl->canceled);
 8018aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8018af0:	2a01      	cmp	r2, #1
 8018af2:	f173 0300 	sbcs.w	r3, r3, #0
 8018af6:	da0d      	bge.n	8018b14 <rcl_timer_is_ready+0x5e>
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	3338      	adds	r3, #56	; 0x38
 8018afe:	4618      	mov	r0, r3
 8018b00:	f7ff fca5 	bl	801844e <rcutils_atomic_load_bool>
 8018b04:	4603      	mov	r3, r0
 8018b06:	f083 0301 	eor.w	r3, r3, #1
 8018b0a:	b2db      	uxtb	r3, r3
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d001      	beq.n	8018b14 <rcl_timer_is_ready+0x5e>
 8018b10:	2301      	movs	r3, #1
 8018b12:	e000      	b.n	8018b16 <rcl_timer_is_ready+0x60>
 8018b14:	2300      	movs	r3, #0
 8018b16:	f003 0301 	and.w	r3, r3, #1
 8018b1a:	b2da      	uxtb	r2, r3
 8018b1c:	683b      	ldr	r3, [r7, #0]
 8018b1e:	701a      	strb	r2, [r3, #0]
  return RCL_RET_OK;
 8018b20:	2300      	movs	r3, #0
}
 8018b22:	4618      	mov	r0, r3
 8018b24:	3718      	adds	r7, #24
 8018b26:	46bd      	mov	sp, r7
 8018b28:	bd80      	pop	{r7, pc}

08018b2a <rcl_timer_get_time_until_next_call>:

rcl_ret_t
rcl_timer_get_time_until_next_call(const rcl_timer_t * timer, int64_t * time_until_next_call)
{
 8018b2a:	b5b0      	push	{r4, r5, r7, lr}
 8018b2c:	b086      	sub	sp, #24
 8018b2e:	af00      	add	r7, sp, #0
 8018b30:	6078      	str	r0, [r7, #4]
 8018b32:	6039      	str	r1, [r7, #0]
  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d101      	bne.n	8018b3e <rcl_timer_get_time_until_next_call+0x14>
 8018b3a:	230b      	movs	r3, #11
 8018b3c:	e022      	b.n	8018b84 <rcl_timer_get_time_until_next_call+0x5a>
  RCL_CHECK_ARGUMENT_FOR_NULL(time_until_next_call, RCL_RET_INVALID_ARGUMENT);
 8018b3e:	683b      	ldr	r3, [r7, #0]
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d101      	bne.n	8018b48 <rcl_timer_get_time_until_next_call+0x1e>
 8018b44:	230b      	movs	r3, #11
 8018b46:	e01d      	b.n	8018b84 <rcl_timer_get_time_until_next_call+0x5a>
  rcl_time_point_value_t now;
  rcl_ret_t ret = rcl_clock_get_now(timer->impl->clock, &now);
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	f107 0208 	add.w	r2, r7, #8
 8018b52:	4611      	mov	r1, r2
 8018b54:	4618      	mov	r0, r3
 8018b56:	f7ff fb27 	bl	80181a8 <rcl_clock_get_now>
 8018b5a:	6178      	str	r0, [r7, #20]
  if (ret != RCL_RET_OK) {
 8018b5c:	697b      	ldr	r3, [r7, #20]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d001      	beq.n	8018b66 <rcl_timer_get_time_until_next_call+0x3c>
    return ret;  // rcl error state should already be set.
 8018b62:	697b      	ldr	r3, [r7, #20]
 8018b64:	e00e      	b.n	8018b84 <rcl_timer_get_time_until_next_call+0x5a>
  }
  *time_until_next_call =
    rcutils_atomic_load_int64_t(&timer->impl->next_call_time) - now;
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	3328      	adds	r3, #40	; 0x28
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	f7ff fc87 	bl	8018480 <rcutils_atomic_load_int64_t>
 8018b72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8018b76:	1a84      	subs	r4, r0, r2
 8018b78:	eb61 0503 	sbc.w	r5, r1, r3
  *time_until_next_call =
 8018b7c:	683b      	ldr	r3, [r7, #0]
 8018b7e:	e9c3 4500 	strd	r4, r5, [r3]
  return RCL_RET_OK;
 8018b82:	2300      	movs	r3, #0
}
 8018b84:	4618      	mov	r0, r3
 8018b86:	3718      	adds	r7, #24
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	bdb0      	pop	{r4, r5, r7, pc}

08018b8c <rcl_timer_is_canceled>:
  return RCL_RET_OK;
}

rcl_ret_t
rcl_timer_is_canceled(const rcl_timer_t * timer, bool * is_canceled)
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b082      	sub	sp, #8
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	6078      	str	r0, [r7, #4]
 8018b94:	6039      	str	r1, [r7, #0]
  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d101      	bne.n	8018ba0 <rcl_timer_is_canceled+0x14>
 8018b9c:	230b      	movs	r3, #11
 8018b9e:	e00f      	b.n	8018bc0 <rcl_timer_is_canceled+0x34>
  RCL_CHECK_ARGUMENT_FOR_NULL(is_canceled, RCL_RET_INVALID_ARGUMENT);
 8018ba0:	683b      	ldr	r3, [r7, #0]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d101      	bne.n	8018baa <rcl_timer_is_canceled+0x1e>
 8018ba6:	230b      	movs	r3, #11
 8018ba8:	e00a      	b.n	8018bc0 <rcl_timer_is_canceled+0x34>
  *is_canceled = rcutils_atomic_load_bool(&timer->impl->canceled);
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	3338      	adds	r3, #56	; 0x38
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	f7ff fc4c 	bl	801844e <rcutils_atomic_load_bool>
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	461a      	mov	r2, r3
 8018bba:	683b      	ldr	r3, [r7, #0]
 8018bbc:	701a      	strb	r2, [r3, #0]
  return RCL_RET_OK;
 8018bbe:	2300      	movs	r3, #0
}
 8018bc0:	4618      	mov	r0, r3
 8018bc2:	3708      	adds	r7, #8
 8018bc4:	46bd      	mov	sp, r7
 8018bc6:	bd80      	pop	{r7, pc}

08018bc8 <rcl_timer_get_guard_condition>:
  return &timer->impl->allocator;
}

rcl_guard_condition_t *
rcl_timer_get_guard_condition(const rcl_timer_t * timer)
{
 8018bc8:	b480      	push	{r7}
 8018bca:	b083      	sub	sp, #12
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	6078      	str	r0, [r7, #4]
  if (NULL == timer || NULL == timer->impl || NULL == timer->impl->guard_condition.impl) {
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d008      	beq.n	8018be8 <rcl_timer_get_guard_condition+0x20>
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d004      	beq.n	8018be8 <rcl_timer_get_guard_condition+0x20>
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	68db      	ldr	r3, [r3, #12]
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d101      	bne.n	8018bec <rcl_timer_get_guard_condition+0x24>
    return NULL;
 8018be8:	2300      	movs	r3, #0
 8018bea:	e002      	b.n	8018bf2 <rcl_timer_get_guard_condition+0x2a>
  }
  return &timer->impl->guard_condition;
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	3308      	adds	r3, #8
}
 8018bf2:	4618      	mov	r0, r3
 8018bf4:	370c      	adds	r7, #12
 8018bf6:	46bd      	mov	sp, r7
 8018bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bfc:	4770      	bx	lr

08018bfe <rcl_validate_enclave_name>:
rcl_ret_t
rcl_validate_enclave_name(
  const char * enclave,
  int * validation_result,
  size_t * invalid_index)
{
 8018bfe:	b580      	push	{r7, lr}
 8018c00:	b084      	sub	sp, #16
 8018c02:	af00      	add	r7, sp, #0
 8018c04:	60f8      	str	r0, [r7, #12]
 8018c06:	60b9      	str	r1, [r7, #8]
 8018c08:	607a      	str	r2, [r7, #4]
  RCL_CHECK_ARGUMENT_FOR_NULL(enclave, RCL_RET_INVALID_ARGUMENT);
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d101      	bne.n	8018c14 <rcl_validate_enclave_name+0x16>
 8018c10:	230b      	movs	r3, #11
 8018c12:	e009      	b.n	8018c28 <rcl_validate_enclave_name+0x2a>
  return rcl_validate_enclave_name_with_size(
 8018c14:	68f8      	ldr	r0, [r7, #12]
 8018c16:	f7e7 fb05 	bl	8000224 <strlen>
 8018c1a:	4601      	mov	r1, r0
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	68ba      	ldr	r2, [r7, #8]
 8018c20:	68f8      	ldr	r0, [r7, #12]
 8018c22:	f000 f805 	bl	8018c30 <rcl_validate_enclave_name_with_size>
 8018c26:	4603      	mov	r3, r0
    enclave, strlen(enclave), validation_result, invalid_index);
}
 8018c28:	4618      	mov	r0, r3
 8018c2a:	3710      	adds	r7, #16
 8018c2c:	46bd      	mov	sp, r7
 8018c2e:	bd80      	pop	{r7, pc}

08018c30 <rcl_validate_enclave_name_with_size>:
rcl_validate_enclave_name_with_size(
  const char * enclave,
  size_t enclave_length,
  int * validation_result,
  size_t * invalid_index)
{
 8018c30:	b590      	push	{r4, r7, lr}
 8018c32:	b0c9      	sub	sp, #292	; 0x124
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8018c3a:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8018c3e:	6020      	str	r0, [r4, #0]
 8018c40:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8018c44:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8018c48:	6001      	str	r1, [r0, #0]
 8018c4a:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8018c4e:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8018c52:	600a      	str	r2, [r1, #0]
 8018c54:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8018c58:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8018c5c:	6013      	str	r3, [r2, #0]
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_INVALID_ARGUMENT);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_ERROR);

  RCL_CHECK_ARGUMENT_FOR_NULL(enclave, RCL_RET_INVALID_ARGUMENT);
 8018c5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018c62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d101      	bne.n	8018c70 <rcl_validate_enclave_name_with_size+0x40>
 8018c6c:	230b      	movs	r3, #11
 8018c6e:	e0c1      	b.n	8018df4 <rcl_validate_enclave_name_with_size+0x1c4>
  RCL_CHECK_ARGUMENT_FOR_NULL(validation_result, RCL_RET_INVALID_ARGUMENT);
 8018c70:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018c74:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d101      	bne.n	8018c82 <rcl_validate_enclave_name_with_size+0x52>
 8018c7e:	230b      	movs	r3, #11
 8018c80:	e0b8      	b.n	8018df4 <rcl_validate_enclave_name_with_size+0x1c4>

  int tmp_validation_result;
  size_t tmp_invalid_index;
  rmw_ret_t ret = rmw_validate_namespace_with_size(
 8018c82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8018c86:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8018c8a:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8018c8e:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8018c92:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8018c96:	f5a0 708a 	sub.w	r0, r0, #276	; 0x114
 8018c9a:	6809      	ldr	r1, [r1, #0]
 8018c9c:	6800      	ldr	r0, [r0, #0]
 8018c9e:	f003 ff13 	bl	801cac8 <rmw_validate_namespace_with_size>
 8018ca2:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
    enclave, enclave_length, &tmp_validation_result, &tmp_invalid_index);
  if (ret != RMW_RET_OK) {
 8018ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d005      	beq.n	8018cba <rcl_validate_enclave_name_with_size+0x8a>
    return rcl_convert_rmw_ret_to_rcl_ret(ret);
 8018cae:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8018cb2:	f7fc fd87 	bl	80157c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8018cb6:	4603      	mov	r3, r0
 8018cb8:	e09c      	b.n	8018df4 <rcl_validate_enclave_name_with_size+0x1c4>
  }

  if (tmp_validation_result != RMW_NAMESPACE_VALID &&
 8018cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d066      	beq.n	8018d90 <rcl_validate_enclave_name_with_size+0x160>
    tmp_validation_result != RMW_NAMESPACE_INVALID_TOO_LONG)
 8018cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
  if (tmp_validation_result != RMW_NAMESPACE_VALID &&
 8018cc6:	2b07      	cmp	r3, #7
 8018cc8:	d062      	beq.n	8018d90 <rcl_validate_enclave_name_with_size+0x160>
  {
    switch (tmp_validation_result) {
 8018cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8018cce:	3b01      	subs	r3, #1
 8018cd0:	2b05      	cmp	r3, #5
 8018cd2:	d83f      	bhi.n	8018d54 <rcl_validate_enclave_name_with_size+0x124>
 8018cd4:	a201      	add	r2, pc, #4	; (adr r2, 8018cdc <rcl_validate_enclave_name_with_size+0xac>)
 8018cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cda:	bf00      	nop
 8018cdc:	08018cf5 	.word	0x08018cf5
 8018ce0:	08018d05 	.word	0x08018d05
 8018ce4:	08018d15 	.word	0x08018d15
 8018ce8:	08018d25 	.word	0x08018d25
 8018cec:	08018d35 	.word	0x08018d35
 8018cf0:	08018d45 	.word	0x08018d45
      case RMW_NAMESPACE_INVALID_IS_EMPTY_STRING:
        *validation_result = RCL_ENCLAVE_NAME_INVALID_IS_EMPTY_STRING;
 8018cf4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018cf8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	2201      	movs	r2, #1
 8018d00:	601a      	str	r2, [r3, #0]
        break;
 8018d02:	e034      	b.n	8018d6e <rcl_validate_enclave_name_with_size+0x13e>
      case RMW_NAMESPACE_INVALID_NOT_ABSOLUTE:
        *validation_result = RCL_ENCLAVE_NAME_INVALID_NOT_ABSOLUTE;
 8018d04:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018d08:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	2202      	movs	r2, #2
 8018d10:	601a      	str	r2, [r3, #0]
        break;
 8018d12:	e02c      	b.n	8018d6e <rcl_validate_enclave_name_with_size+0x13e>
      case RMW_NAMESPACE_INVALID_ENDS_WITH_FORWARD_SLASH:
        *validation_result = RCL_ENCLAVE_NAME_INVALID_ENDS_WITH_FORWARD_SLASH;
 8018d14:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018d18:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	2203      	movs	r2, #3
 8018d20:	601a      	str	r2, [r3, #0]
        break;
 8018d22:	e024      	b.n	8018d6e <rcl_validate_enclave_name_with_size+0x13e>
      case RMW_NAMESPACE_INVALID_CONTAINS_UNALLOWED_CHARACTERS:
        *validation_result = RCL_ENCLAVE_NAME_INVALID_CONTAINS_UNALLOWED_CHARACTERS;
 8018d24:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018d28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	2204      	movs	r2, #4
 8018d30:	601a      	str	r2, [r3, #0]
        break;
 8018d32:	e01c      	b.n	8018d6e <rcl_validate_enclave_name_with_size+0x13e>
      case RMW_NAMESPACE_INVALID_CONTAINS_REPEATED_FORWARD_SLASH:
        *validation_result = RCL_ENCLAVE_NAME_INVALID_CONTAINS_REPEATED_FORWARD_SLASH;
 8018d34:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018d38:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	2205      	movs	r2, #5
 8018d40:	601a      	str	r2, [r3, #0]
        break;
 8018d42:	e014      	b.n	8018d6e <rcl_validate_enclave_name_with_size+0x13e>
      case RMW_NAMESPACE_INVALID_NAME_TOKEN_STARTS_WITH_NUMBER:
        *validation_result = RCL_ENCLAVE_NAME_INVALID_NAME_TOKEN_STARTS_WITH_NUMBER;
 8018d44:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018d48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	2206      	movs	r2, #6
 8018d50:	601a      	str	r2, [r3, #0]
        break;
 8018d52:	e00c      	b.n	8018d6e <rcl_validate_enclave_name_with_size+0x13e>
      default:
        {
          char default_err_msg[256];
          // explicitly not taking return value which is number of bytes written
          int ret = rcutils_snprintf(
 8018d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8018d58:	f107 0010 	add.w	r0, r7, #16
 8018d5c:	4a28      	ldr	r2, [pc, #160]	; (8018e00 <rcl_validate_enclave_name_with_size+0x1d0>)
 8018d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018d62:	f003 f997 	bl	801c094 <rcutils_snprintf>
 8018d66:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
              "rcutils_snprintf() failed while reporting an unknown validation result");
          } else {
            RCL_SET_ERROR_MSG(default_err_msg);
          }
        }
        return RCL_RET_ERROR;
 8018d6a:	2301      	movs	r3, #1
 8018d6c:	e042      	b.n	8018df4 <rcl_validate_enclave_name_with_size+0x1c4>
    }
    if (invalid_index) {
 8018d6e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018d72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d007      	beq.n	8018d8c <rcl_validate_enclave_name_with_size+0x15c>
      *invalid_index = tmp_invalid_index;
 8018d7c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8018d80:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018d84:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	601a      	str	r2, [r3, #0]
    }
    return RCL_RET_OK;
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	e031      	b.n	8018df4 <rcl_validate_enclave_name_with_size+0x1c4>
  }

  // enclave might be longer that namespace length, check false positives and correct
  if (RMW_NAMESPACE_INVALID_TOO_LONG == tmp_validation_result) {
 8018d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8018d94:	2b07      	cmp	r3, #7
 8018d96:	d125      	bne.n	8018de4 <rcl_validate_enclave_name_with_size+0x1b4>
    if (RCL_ENCLAVE_NAME_MAX_LENGTH >= enclave_length) {
 8018d98:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018d9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	2bff      	cmp	r3, #255	; 0xff
 8018da4:	d807      	bhi.n	8018db6 <rcl_validate_enclave_name_with_size+0x186>
      *validation_result = RCL_ENCLAVE_NAME_VALID;
 8018da6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018daa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	2200      	movs	r2, #0
 8018db2:	601a      	str	r2, [r3, #0]
 8018db4:	e014      	b.n	8018de0 <rcl_validate_enclave_name_with_size+0x1b0>
    } else {
      *validation_result = RCL_ENCLAVE_NAME_INVALID_TOO_LONG;
 8018db6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018dba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	2207      	movs	r2, #7
 8018dc2:	601a      	str	r2, [r3, #0]
      if (invalid_index) {
 8018dc4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018dc8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d006      	beq.n	8018de0 <rcl_validate_enclave_name_with_size+0x1b0>
        *invalid_index = RCL_ENCLAVE_NAME_MAX_LENGTH - 1;
 8018dd2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018dd6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	22fe      	movs	r2, #254	; 0xfe
 8018dde:	601a      	str	r2, [r3, #0]
      }
    }
    return RCL_RET_OK;
 8018de0:	2300      	movs	r3, #0
 8018de2:	e007      	b.n	8018df4 <rcl_validate_enclave_name_with_size+0x1c4>
  }

  // everything was ok, set result to valid namespace, avoid setting invalid_index, and return
  *validation_result = RCL_ENCLAVE_NAME_VALID;
 8018de4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018de8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	2200      	movs	r2, #0
 8018df0:	601a      	str	r2, [r3, #0]
  return RCL_RET_OK;
 8018df2:	2300      	movs	r3, #0
}
 8018df4:	4618      	mov	r0, r3
 8018df6:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8018dfa:	46bd      	mov	sp, r7
 8018dfc:	bd90      	pop	{r4, r7, pc}
 8018dfe:	bf00      	nop
 8018e00:	08025aa8 	.word	0x08025aa8

08018e04 <rcutils_isalnum_no_locale>:

/// Custom isalnum() which is not affected by locale.
static inline
bool
rcutils_isalnum_no_locale(char c)
{
 8018e04:	b480      	push	{r7}
 8018e06:	b083      	sub	sp, #12
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	71fb      	strb	r3, [r7, #7]
  // if in '0', ..., '9', then ok
  if (c >= 0x30 /*0*/ && c <= 0x39 /*9*/) {
 8018e0e:	79fb      	ldrb	r3, [r7, #7]
 8018e10:	2b2f      	cmp	r3, #47	; 0x2f
 8018e12:	d904      	bls.n	8018e1e <rcutils_isalnum_no_locale+0x1a>
 8018e14:	79fb      	ldrb	r3, [r7, #7]
 8018e16:	2b39      	cmp	r3, #57	; 0x39
 8018e18:	d801      	bhi.n	8018e1e <rcutils_isalnum_no_locale+0x1a>
    return true;
 8018e1a:	2301      	movs	r3, #1
 8018e1c:	e010      	b.n	8018e40 <rcutils_isalnum_no_locale+0x3c>
  }
  // if in 'A', ..., 'Z', then ok
  if (c >= 0x41 /*A*/ && c <= 0x5a /*Z*/) {
 8018e1e:	79fb      	ldrb	r3, [r7, #7]
 8018e20:	2b40      	cmp	r3, #64	; 0x40
 8018e22:	d904      	bls.n	8018e2e <rcutils_isalnum_no_locale+0x2a>
 8018e24:	79fb      	ldrb	r3, [r7, #7]
 8018e26:	2b5a      	cmp	r3, #90	; 0x5a
 8018e28:	d801      	bhi.n	8018e2e <rcutils_isalnum_no_locale+0x2a>
    return true;
 8018e2a:	2301      	movs	r3, #1
 8018e2c:	e008      	b.n	8018e40 <rcutils_isalnum_no_locale+0x3c>
  }
  // if in 'a', ..., 'z', then ok
  if (c >= 0x61 /*a*/ && c <= 0x7a /*z*/) {
 8018e2e:	79fb      	ldrb	r3, [r7, #7]
 8018e30:	2b60      	cmp	r3, #96	; 0x60
 8018e32:	d904      	bls.n	8018e3e <rcutils_isalnum_no_locale+0x3a>
 8018e34:	79fb      	ldrb	r3, [r7, #7]
 8018e36:	2b7a      	cmp	r3, #122	; 0x7a
 8018e38:	d801      	bhi.n	8018e3e <rcutils_isalnum_no_locale+0x3a>
    return true;
 8018e3a:	2301      	movs	r3, #1
 8018e3c:	e000      	b.n	8018e40 <rcutils_isalnum_no_locale+0x3c>
  }
  return false;
 8018e3e:	2300      	movs	r3, #0
}
 8018e40:	4618      	mov	r0, r3
 8018e42:	370c      	adds	r7, #12
 8018e44:	46bd      	mov	sp, r7
 8018e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e4a:	4770      	bx	lr

08018e4c <rcl_validate_topic_name>:
rcl_ret_t
rcl_validate_topic_name(
  const char * topic_name,
  int * validation_result,
  size_t * invalid_index)
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b084      	sub	sp, #16
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	60f8      	str	r0, [r7, #12]
 8018e54:	60b9      	str	r1, [r7, #8]
 8018e56:	607a      	str	r2, [r7, #4]
  RCL_CHECK_ARGUMENT_FOR_NULL(topic_name, RCL_RET_INVALID_ARGUMENT);
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d101      	bne.n	8018e62 <rcl_validate_topic_name+0x16>
 8018e5e:	230b      	movs	r3, #11
 8018e60:	e009      	b.n	8018e76 <rcl_validate_topic_name+0x2a>
  return rcl_validate_topic_name_with_size(
 8018e62:	68f8      	ldr	r0, [r7, #12]
 8018e64:	f7e7 f9de 	bl	8000224 <strlen>
 8018e68:	4601      	mov	r1, r0
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	68ba      	ldr	r2, [r7, #8]
 8018e6e:	68f8      	ldr	r0, [r7, #12]
 8018e70:	f000 f806 	bl	8018e80 <rcl_validate_topic_name_with_size>
 8018e74:	4603      	mov	r3, r0
    topic_name, strlen(topic_name), validation_result, invalid_index);
}
 8018e76:	4618      	mov	r0, r3
 8018e78:	3710      	adds	r7, #16
 8018e7a:	46bd      	mov	sp, r7
 8018e7c:	bd80      	pop	{r7, pc}
	...

08018e80 <rcl_validate_topic_name_with_size>:
rcl_validate_topic_name_with_size(
  const char * topic_name,
  size_t topic_name_length,
  int * validation_result,
  size_t * invalid_index)
{
 8018e80:	b580      	push	{r7, lr}
 8018e82:	b088      	sub	sp, #32
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	60f8      	str	r0, [r7, #12]
 8018e88:	60b9      	str	r1, [r7, #8]
 8018e8a:	607a      	str	r2, [r7, #4]
 8018e8c:	603b      	str	r3, [r7, #0]
  RCL_CHECK_ARGUMENT_FOR_NULL(topic_name, RCL_RET_INVALID_ARGUMENT);
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d101      	bne.n	8018e98 <rcl_validate_topic_name_with_size+0x18>
 8018e94:	230b      	movs	r3, #11
 8018e96:	e147      	b.n	8019128 <rcl_validate_topic_name_with_size+0x2a8>
  RCL_CHECK_ARGUMENT_FOR_NULL(validation_result, RCL_RET_INVALID_ARGUMENT);
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d101      	bne.n	8018ea2 <rcl_validate_topic_name_with_size+0x22>
 8018e9e:	230b      	movs	r3, #11
 8018ea0:	e142      	b.n	8019128 <rcl_validate_topic_name_with_size+0x2a8>

  if (topic_name_length == 0) {
 8018ea2:	68bb      	ldr	r3, [r7, #8]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d10a      	bne.n	8018ebe <rcl_validate_topic_name_with_size+0x3e>
    *validation_result = RCL_TOPIC_NAME_INVALID_IS_EMPTY_STRING;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	2201      	movs	r2, #1
 8018eac:	601a      	str	r2, [r3, #0]
    if (invalid_index) {
 8018eae:	683b      	ldr	r3, [r7, #0]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d002      	beq.n	8018eba <rcl_validate_topic_name_with_size+0x3a>
      *invalid_index = 0;
 8018eb4:	683b      	ldr	r3, [r7, #0]
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	601a      	str	r2, [r3, #0]
    }
    return RCL_RET_OK;
 8018eba:	2300      	movs	r3, #0
 8018ebc:	e134      	b.n	8019128 <rcl_validate_topic_name_with_size+0x2a8>
  }
  // check that the first character is not a number
  if (isdigit(topic_name[0]) != 0) {
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	781b      	ldrb	r3, [r3, #0]
 8018ec2:	3301      	adds	r3, #1
 8018ec4:	4a91      	ldr	r2, [pc, #580]	; (801910c <rcl_validate_topic_name_with_size+0x28c>)
 8018ec6:	4413      	add	r3, r2
 8018ec8:	781b      	ldrb	r3, [r3, #0]
 8018eca:	f003 0304 	and.w	r3, r3, #4
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d00a      	beq.n	8018ee8 <rcl_validate_topic_name_with_size+0x68>
    // this is the case where the topic is relative and the first token starts with a number
    // e.g. 7foo/bar is invalid
    *validation_result = RCL_TOPIC_NAME_INVALID_NAME_TOKEN_STARTS_WITH_NUMBER;
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	2204      	movs	r2, #4
 8018ed6:	601a      	str	r2, [r3, #0]
    if (invalid_index) {
 8018ed8:	683b      	ldr	r3, [r7, #0]
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d002      	beq.n	8018ee4 <rcl_validate_topic_name_with_size+0x64>
      *invalid_index = 0;
 8018ede:	683b      	ldr	r3, [r7, #0]
 8018ee0:	2200      	movs	r2, #0
 8018ee2:	601a      	str	r2, [r3, #0]
    }
    return RCL_RET_OK;
 8018ee4:	2300      	movs	r3, #0
 8018ee6:	e11f      	b.n	8019128 <rcl_validate_topic_name_with_size+0x2a8>
  }
  // note topic_name_length is >= 1 at this point
  if (topic_name[topic_name_length - 1] == '/') {
 8018ee8:	68bb      	ldr	r3, [r7, #8]
 8018eea:	3b01      	subs	r3, #1
 8018eec:	68fa      	ldr	r2, [r7, #12]
 8018eee:	4413      	add	r3, r2
 8018ef0:	781b      	ldrb	r3, [r3, #0]
 8018ef2:	2b2f      	cmp	r3, #47	; 0x2f
 8018ef4:	d10b      	bne.n	8018f0e <rcl_validate_topic_name_with_size+0x8e>
    // catches both "/foo/" and "/"
    *validation_result = RCL_TOPIC_NAME_INVALID_ENDS_WITH_FORWARD_SLASH;
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	2202      	movs	r2, #2
 8018efa:	601a      	str	r2, [r3, #0]
    if (invalid_index) {
 8018efc:	683b      	ldr	r3, [r7, #0]
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d003      	beq.n	8018f0a <rcl_validate_topic_name_with_size+0x8a>
      *invalid_index = topic_name_length - 1;
 8018f02:	68bb      	ldr	r3, [r7, #8]
 8018f04:	1e5a      	subs	r2, r3, #1
 8018f06:	683b      	ldr	r3, [r7, #0]
 8018f08:	601a      	str	r2, [r3, #0]
    }
    return RCL_RET_OK;
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	e10c      	b.n	8019128 <rcl_validate_topic_name_with_size+0x2a8>
  }
  // check for unallowed characters, nested and unmatched {} too
  bool in_open_curly_brace = false;
 8018f0e:	2300      	movs	r3, #0
 8018f10:	77fb      	strb	r3, [r7, #31]
  size_t opening_curly_brace_index = 0;
 8018f12:	2300      	movs	r3, #0
 8018f14:	61bb      	str	r3, [r7, #24]
  for (size_t i = 0; i < topic_name_length; ++i) {
 8018f16:	2300      	movs	r3, #0
 8018f18:	617b      	str	r3, [r7, #20]
 8018f1a:	e0ab      	b.n	8019074 <rcl_validate_topic_name_with_size+0x1f4>
    if (rcutils_isalnum_no_locale(topic_name[i])) {
 8018f1c:	68fa      	ldr	r2, [r7, #12]
 8018f1e:	697b      	ldr	r3, [r7, #20]
 8018f20:	4413      	add	r3, r2
 8018f22:	781b      	ldrb	r3, [r3, #0]
 8018f24:	4618      	mov	r0, r3
 8018f26:	f7ff ff6d 	bl	8018e04 <rcutils_isalnum_no_locale>
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d024      	beq.n	8018f7a <rcl_validate_topic_name_with_size+0xfa>
      // if within curly braces and the first character is a number, error
      // e.g. foo/{4bar} is invalid
      if (
        isdigit(topic_name[i]) != 0 &&
 8018f30:	68fa      	ldr	r2, [r7, #12]
 8018f32:	697b      	ldr	r3, [r7, #20]
 8018f34:	4413      	add	r3, r2
 8018f36:	781b      	ldrb	r3, [r3, #0]
 8018f38:	3301      	adds	r3, #1
 8018f3a:	4a74      	ldr	r2, [pc, #464]	; (801910c <rcl_validate_topic_name_with_size+0x28c>)
 8018f3c:	4413      	add	r3, r2
 8018f3e:	781b      	ldrb	r3, [r3, #0]
 8018f40:	f003 0304 	and.w	r3, r3, #4
      if (
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	f000 808b 	beq.w	8019060 <rcl_validate_topic_name_with_size+0x1e0>
        isdigit(topic_name[i]) != 0 &&
 8018f4a:	7ffb      	ldrb	r3, [r7, #31]
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	f000 8087 	beq.w	8019060 <rcl_validate_topic_name_with_size+0x1e0>
        in_open_curly_brace &&
 8018f52:	697b      	ldr	r3, [r7, #20]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	f000 8083 	beq.w	8019060 <rcl_validate_topic_name_with_size+0x1e0>
        i > 0 &&
        (i - 1 == opening_curly_brace_index))
 8018f5a:	697b      	ldr	r3, [r7, #20]
 8018f5c:	3b01      	subs	r3, #1
        i > 0 &&
 8018f5e:	69ba      	ldr	r2, [r7, #24]
 8018f60:	429a      	cmp	r2, r3
 8018f62:	d17d      	bne.n	8019060 <rcl_validate_topic_name_with_size+0x1e0>
      {
        *validation_result = RCL_TOPIC_NAME_INVALID_SUBSTITUTION_STARTS_WITH_NUMBER;
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	2209      	movs	r2, #9
 8018f68:	601a      	str	r2, [r3, #0]
        if (invalid_index) {
 8018f6a:	683b      	ldr	r3, [r7, #0]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d002      	beq.n	8018f76 <rcl_validate_topic_name_with_size+0xf6>
          *invalid_index = i;
 8018f70:	683b      	ldr	r3, [r7, #0]
 8018f72:	697a      	ldr	r2, [r7, #20]
 8018f74:	601a      	str	r2, [r3, #0]
        }
        return RCL_RET_OK;
 8018f76:	2300      	movs	r3, #0
 8018f78:	e0d6      	b.n	8019128 <rcl_validate_topic_name_with_size+0x2a8>
      }
      // if it is an alpha numeric character, i.e. [0-9|A-Z|a-z], continue
      continue;
    } else if (topic_name[i] == '_') {
 8018f7a:	68fa      	ldr	r2, [r7, #12]
 8018f7c:	697b      	ldr	r3, [r7, #20]
 8018f7e:	4413      	add	r3, r2
 8018f80:	781b      	ldrb	r3, [r3, #0]
 8018f82:	2b5f      	cmp	r3, #95	; 0x5f
 8018f84:	d06e      	beq.n	8019064 <rcl_validate_topic_name_with_size+0x1e4>
      // if it is an underscore, continue
      continue;
    } else if (topic_name[i] == '/') {
 8018f86:	68fa      	ldr	r2, [r7, #12]
 8018f88:	697b      	ldr	r3, [r7, #20]
 8018f8a:	4413      	add	r3, r2
 8018f8c:	781b      	ldrb	r3, [r3, #0]
 8018f8e:	2b2f      	cmp	r3, #47	; 0x2f
 8018f90:	d10d      	bne.n	8018fae <rcl_validate_topic_name_with_size+0x12e>
      // if it is a forward slash within {}, error
      if (in_open_curly_brace) {
 8018f92:	7ffb      	ldrb	r3, [r7, #31]
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d067      	beq.n	8019068 <rcl_validate_topic_name_with_size+0x1e8>
        *validation_result = RCL_TOPIC_NAME_INVALID_SUBSTITUTION_CONTAINS_UNALLOWED_CHARACTERS;
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	2208      	movs	r2, #8
 8018f9c:	601a      	str	r2, [r3, #0]
        if (invalid_index) {
 8018f9e:	683b      	ldr	r3, [r7, #0]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d002      	beq.n	8018faa <rcl_validate_topic_name_with_size+0x12a>
          *invalid_index = i;
 8018fa4:	683b      	ldr	r3, [r7, #0]
 8018fa6:	697a      	ldr	r2, [r7, #20]
 8018fa8:	601a      	str	r2, [r3, #0]
        }
        return RCL_RET_OK;
 8018faa:	2300      	movs	r3, #0
 8018fac:	e0bc      	b.n	8019128 <rcl_validate_topic_name_with_size+0x2a8>
      }
      // if it is a forward slash outside of {}, continue
      continue;
    } else if (topic_name[i] == '~') {
 8018fae:	68fa      	ldr	r2, [r7, #12]
 8018fb0:	697b      	ldr	r3, [r7, #20]
 8018fb2:	4413      	add	r3, r2
 8018fb4:	781b      	ldrb	r3, [r3, #0]
 8018fb6:	2b7e      	cmp	r3, #126	; 0x7e
 8018fb8:	d10d      	bne.n	8018fd6 <rcl_validate_topic_name_with_size+0x156>
      // if it is a tilde not in the first position, validation fails
      if (i != 0) {
 8018fba:	697b      	ldr	r3, [r7, #20]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d055      	beq.n	801906c <rcl_validate_topic_name_with_size+0x1ec>
        *validation_result = RCL_TOPIC_NAME_INVALID_MISPLACED_TILDE;
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	2206      	movs	r2, #6
 8018fc4:	601a      	str	r2, [r3, #0]
        if (invalid_index) {
 8018fc6:	683b      	ldr	r3, [r7, #0]
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d002      	beq.n	8018fd2 <rcl_validate_topic_name_with_size+0x152>
          *invalid_index = i;
 8018fcc:	683b      	ldr	r3, [r7, #0]
 8018fce:	697a      	ldr	r2, [r7, #20]
 8018fd0:	601a      	str	r2, [r3, #0]
        }
        return RCL_RET_OK;
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	e0a8      	b.n	8019128 <rcl_validate_topic_name_with_size+0x2a8>
      }
      // if it is a tilde in the first position, continue
      continue;
    } else if (topic_name[i] == '{') {
 8018fd6:	68fa      	ldr	r2, [r7, #12]
 8018fd8:	697b      	ldr	r3, [r7, #20]
 8018fda:	4413      	add	r3, r2
 8018fdc:	781b      	ldrb	r3, [r3, #0]
 8018fde:	2b7b      	cmp	r3, #123	; 0x7b
 8018fe0:	d112      	bne.n	8019008 <rcl_validate_topic_name_with_size+0x188>
      opening_curly_brace_index = i;
 8018fe2:	697b      	ldr	r3, [r7, #20]
 8018fe4:	61bb      	str	r3, [r7, #24]
      // if starting a nested curly brace, error
      // e.g. foo/{{bar}_baz} is invalid
      //           ^
      if (in_open_curly_brace) {
 8018fe6:	7ffb      	ldrb	r3, [r7, #31]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d00a      	beq.n	8019002 <rcl_validate_topic_name_with_size+0x182>
        *validation_result = RCL_TOPIC_NAME_INVALID_SUBSTITUTION_CONTAINS_UNALLOWED_CHARACTERS;
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	2208      	movs	r2, #8
 8018ff0:	601a      	str	r2, [r3, #0]
        if (invalid_index) {
 8018ff2:	683b      	ldr	r3, [r7, #0]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d002      	beq.n	8018ffe <rcl_validate_topic_name_with_size+0x17e>
          *invalid_index = i;
 8018ff8:	683b      	ldr	r3, [r7, #0]
 8018ffa:	697a      	ldr	r2, [r7, #20]
 8018ffc:	601a      	str	r2, [r3, #0]
        }
        return RCL_RET_OK;
 8018ffe:	2300      	movs	r3, #0
 8019000:	e092      	b.n	8019128 <rcl_validate_topic_name_with_size+0x2a8>
      }
      in_open_curly_brace = true;
 8019002:	2301      	movs	r3, #1
 8019004:	77fb      	strb	r3, [r7, #31]
      // if it is a new, open curly brace, continue
      continue;
 8019006:	e032      	b.n	801906e <rcl_validate_topic_name_with_size+0x1ee>
    } else if (topic_name[i] == '}') {
 8019008:	68fa      	ldr	r2, [r7, #12]
 801900a:	697b      	ldr	r3, [r7, #20]
 801900c:	4413      	add	r3, r2
 801900e:	781b      	ldrb	r3, [r3, #0]
 8019010:	2b7d      	cmp	r3, #125	; 0x7d
 8019012:	d113      	bne.n	801903c <rcl_validate_topic_name_with_size+0x1bc>
      // if not preceded by a {, error
      if (!in_open_curly_brace) {
 8019014:	7ffb      	ldrb	r3, [r7, #31]
 8019016:	f083 0301 	eor.w	r3, r3, #1
 801901a:	b2db      	uxtb	r3, r3
 801901c:	2b00      	cmp	r3, #0
 801901e:	d00a      	beq.n	8019036 <rcl_validate_topic_name_with_size+0x1b6>
        *validation_result = RCL_TOPIC_NAME_INVALID_UNMATCHED_CURLY_BRACE;
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	2205      	movs	r2, #5
 8019024:	601a      	str	r2, [r3, #0]
        if (invalid_index) {
 8019026:	683b      	ldr	r3, [r7, #0]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d002      	beq.n	8019032 <rcl_validate_topic_name_with_size+0x1b2>
          *invalid_index = i;
 801902c:	683b      	ldr	r3, [r7, #0]
 801902e:	697a      	ldr	r2, [r7, #20]
 8019030:	601a      	str	r2, [r3, #0]
        }
        return RCL_RET_OK;
 8019032:	2300      	movs	r3, #0
 8019034:	e078      	b.n	8019128 <rcl_validate_topic_name_with_size+0x2a8>
      }
      in_open_curly_brace = false;
 8019036:	2300      	movs	r3, #0
 8019038:	77fb      	strb	r3, [r7, #31]
      // if it is a closing curly brace, continue
      continue;
 801903a:	e018      	b.n	801906e <rcl_validate_topic_name_with_size+0x1ee>
    } else {
      // if it is none of these, then it is an unallowed character in a topic name
      if (in_open_curly_brace) {
 801903c:	7ffb      	ldrb	r3, [r7, #31]
 801903e:	2b00      	cmp	r3, #0
 8019040:	d003      	beq.n	801904a <rcl_validate_topic_name_with_size+0x1ca>
        *validation_result = RCL_TOPIC_NAME_INVALID_SUBSTITUTION_CONTAINS_UNALLOWED_CHARACTERS;
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	2208      	movs	r2, #8
 8019046:	601a      	str	r2, [r3, #0]
 8019048:	e002      	b.n	8019050 <rcl_validate_topic_name_with_size+0x1d0>
      } else {
        *validation_result = RCL_TOPIC_NAME_INVALID_CONTAINS_UNALLOWED_CHARACTERS;
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	2203      	movs	r2, #3
 801904e:	601a      	str	r2, [r3, #0]
      }
      if (invalid_index) {
 8019050:	683b      	ldr	r3, [r7, #0]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d002      	beq.n	801905c <rcl_validate_topic_name_with_size+0x1dc>
        *invalid_index = i;
 8019056:	683b      	ldr	r3, [r7, #0]
 8019058:	697a      	ldr	r2, [r7, #20]
 801905a:	601a      	str	r2, [r3, #0]
      }
      return RCL_RET_OK;
 801905c:	2300      	movs	r3, #0
 801905e:	e063      	b.n	8019128 <rcl_validate_topic_name_with_size+0x2a8>
      continue;
 8019060:	bf00      	nop
 8019062:	e004      	b.n	801906e <rcl_validate_topic_name_with_size+0x1ee>
      continue;
 8019064:	bf00      	nop
 8019066:	e002      	b.n	801906e <rcl_validate_topic_name_with_size+0x1ee>
      continue;
 8019068:	bf00      	nop
 801906a:	e000      	b.n	801906e <rcl_validate_topic_name_with_size+0x1ee>
      continue;
 801906c:	bf00      	nop
  for (size_t i = 0; i < topic_name_length; ++i) {
 801906e:	697b      	ldr	r3, [r7, #20]
 8019070:	3301      	adds	r3, #1
 8019072:	617b      	str	r3, [r7, #20]
 8019074:	697a      	ldr	r2, [r7, #20]
 8019076:	68bb      	ldr	r3, [r7, #8]
 8019078:	429a      	cmp	r2, r3
 801907a:	f4ff af4f 	bcc.w	8018f1c <rcl_validate_topic_name_with_size+0x9c>
    }
  }
  // check to make sure substitutions were properly closed
  if (in_open_curly_brace) {
 801907e:	7ffb      	ldrb	r3, [r7, #31]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d00a      	beq.n	801909a <rcl_validate_topic_name_with_size+0x21a>
    // case where a substitution is never closed, e.g. 'foo/{bar'
    *validation_result = RCL_TOPIC_NAME_INVALID_UNMATCHED_CURLY_BRACE;
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	2205      	movs	r2, #5
 8019088:	601a      	str	r2, [r3, #0]
    if (invalid_index) {
 801908a:	683b      	ldr	r3, [r7, #0]
 801908c:	2b00      	cmp	r3, #0
 801908e:	d002      	beq.n	8019096 <rcl_validate_topic_name_with_size+0x216>
      *invalid_index = opening_curly_brace_index;
 8019090:	683b      	ldr	r3, [r7, #0]
 8019092:	69ba      	ldr	r2, [r7, #24]
 8019094:	601a      	str	r2, [r3, #0]
    }
    return RCL_RET_OK;
 8019096:	2300      	movs	r3, #0
 8019098:	e046      	b.n	8019128 <rcl_validate_topic_name_with_size+0x2a8>
  }
  // check for tokens (other than the first) that start with a number
  for (size_t i = 0; i < topic_name_length; ++i) {
 801909a:	2300      	movs	r3, #0
 801909c:	613b      	str	r3, [r7, #16]
 801909e:	e03b      	b.n	8019118 <rcl_validate_topic_name_with_size+0x298>
    if (i == topic_name_length - 1) {
 80190a0:	68bb      	ldr	r3, [r7, #8]
 80190a2:	3b01      	subs	r3, #1
 80190a4:	693a      	ldr	r2, [r7, #16]
 80190a6:	429a      	cmp	r2, r3
 80190a8:	d032      	beq.n	8019110 <rcl_validate_topic_name_with_size+0x290>
      // if this is the last character, then nothing to check
      continue;
    }
    // past this point, assuming i+1 is a valid index
    if (topic_name[i] == '/') {
 80190aa:	68fa      	ldr	r2, [r7, #12]
 80190ac:	693b      	ldr	r3, [r7, #16]
 80190ae:	4413      	add	r3, r2
 80190b0:	781b      	ldrb	r3, [r3, #0]
 80190b2:	2b2f      	cmp	r3, #47	; 0x2f
 80190b4:	d118      	bne.n	80190e8 <rcl_validate_topic_name_with_size+0x268>
      if (isdigit(topic_name[i + 1]) != 0) {
 80190b6:	693b      	ldr	r3, [r7, #16]
 80190b8:	3301      	adds	r3, #1
 80190ba:	68fa      	ldr	r2, [r7, #12]
 80190bc:	4413      	add	r3, r2
 80190be:	781b      	ldrb	r3, [r3, #0]
 80190c0:	3301      	adds	r3, #1
 80190c2:	4a12      	ldr	r2, [pc, #72]	; (801910c <rcl_validate_topic_name_with_size+0x28c>)
 80190c4:	4413      	add	r3, r2
 80190c6:	781b      	ldrb	r3, [r3, #0]
 80190c8:	f003 0304 	and.w	r3, r3, #4
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d020      	beq.n	8019112 <rcl_validate_topic_name_with_size+0x292>
        // this is the case where a '/' if followed by a number, i.e. [0-9]
        *validation_result = RCL_TOPIC_NAME_INVALID_NAME_TOKEN_STARTS_WITH_NUMBER;
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	2204      	movs	r2, #4
 80190d4:	601a      	str	r2, [r3, #0]
        if (invalid_index) {
 80190d6:	683b      	ldr	r3, [r7, #0]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d003      	beq.n	80190e4 <rcl_validate_topic_name_with_size+0x264>
          *invalid_index = i + 1;
 80190dc:	693b      	ldr	r3, [r7, #16]
 80190de:	1c5a      	adds	r2, r3, #1
 80190e0:	683b      	ldr	r3, [r7, #0]
 80190e2:	601a      	str	r2, [r3, #0]
        }
        return RCL_RET_OK;
 80190e4:	2300      	movs	r3, #0
 80190e6:	e01f      	b.n	8019128 <rcl_validate_topic_name_with_size+0x2a8>
      }
    } else if (i == 1 && topic_name[0] == '~') {
 80190e8:	693b      	ldr	r3, [r7, #16]
 80190ea:	2b01      	cmp	r3, #1
 80190ec:	d111      	bne.n	8019112 <rcl_validate_topic_name_with_size+0x292>
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	781b      	ldrb	r3, [r3, #0]
 80190f2:	2b7e      	cmp	r3, #126	; 0x7e
 80190f4:	d10d      	bne.n	8019112 <rcl_validate_topic_name_with_size+0x292>
      // special case where first character is ~ but second character is not /
      // e.g. ~foo is invalid
      *validation_result = RCL_TOPIC_NAME_INVALID_TILDE_NOT_FOLLOWED_BY_FORWARD_SLASH;
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	2207      	movs	r2, #7
 80190fa:	601a      	str	r2, [r3, #0]
      if (invalid_index) {
 80190fc:	683b      	ldr	r3, [r7, #0]
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d002      	beq.n	8019108 <rcl_validate_topic_name_with_size+0x288>
        *invalid_index = 1;
 8019102:	683b      	ldr	r3, [r7, #0]
 8019104:	2201      	movs	r2, #1
 8019106:	601a      	str	r2, [r3, #0]
      }
      return RCL_RET_OK;
 8019108:	2300      	movs	r3, #0
 801910a:	e00d      	b.n	8019128 <rcl_validate_topic_name_with_size+0x2a8>
 801910c:	080275da 	.word	0x080275da
      continue;
 8019110:	bf00      	nop
  for (size_t i = 0; i < topic_name_length; ++i) {
 8019112:	693b      	ldr	r3, [r7, #16]
 8019114:	3301      	adds	r3, #1
 8019116:	613b      	str	r3, [r7, #16]
 8019118:	693a      	ldr	r2, [r7, #16]
 801911a:	68bb      	ldr	r3, [r7, #8]
 801911c:	429a      	cmp	r2, r3
 801911e:	d3bf      	bcc.n	80190a0 <rcl_validate_topic_name_with_size+0x220>
    }
  }
  // everything was ok, set result to valid topic, avoid setting invalid_index, and return
  *validation_result = RCL_TOPIC_NAME_VALID;
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	2200      	movs	r2, #0
 8019124:	601a      	str	r2, [r3, #0]
  return RCL_RET_OK;
 8019126:	2300      	movs	r3, #0
}
 8019128:	4618      	mov	r0, r3
 801912a:	3720      	adds	r7, #32
 801912c:	46bd      	mov	sp, r7
 801912e:	bd80      	pop	{r7, pc}

08019130 <rcl_get_zero_initialized_wait_set>:
  rcl_allocator_t allocator;
} rcl_wait_set_impl_t;

rcl_wait_set_t
rcl_get_zero_initialized_wait_set()
{
 8019130:	b4b0      	push	{r4, r5, r7}
 8019132:	b083      	sub	sp, #12
 8019134:	af00      	add	r7, sp, #0
 8019136:	6078      	str	r0, [r7, #4]
    .size_of_timers = 0,
    .events = NULL,
    .size_of_events = 0,
    .impl = NULL,
  };
  return null_wait_set;
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	4a08      	ldr	r2, [pc, #32]	; (801915c <rcl_get_zero_initialized_wait_set+0x2c>)
 801913c:	461c      	mov	r4, r3
 801913e:	4615      	mov	r5, r2
 8019140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801914a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801914c:	682b      	ldr	r3, [r5, #0]
 801914e:	6023      	str	r3, [r4, #0]
}
 8019150:	6878      	ldr	r0, [r7, #4]
 8019152:	370c      	adds	r7, #12
 8019154:	46bd      	mov	sp, r7
 8019156:	bcb0      	pop	{r4, r5, r7}
 8019158:	4770      	bx	lr
 801915a:	bf00      	nop
 801915c:	2000e5fc 	.word	0x2000e5fc

08019160 <__wait_set_clean_up>:
  return wait_set && wait_set->impl;
}*/

static void
__wait_set_clean_up(rcl_wait_set_t * wait_set)
{
 8019160:	b580      	push	{r7, lr}
 8019162:	b088      	sub	sp, #32
 8019164:	af04      	add	r7, sp, #16
 8019166:	6078      	str	r0, [r7, #4]
  rcl_ret_t ret = rcl_wait_set_resize(wait_set, 0, 0, 0, 0, 0, 0);
 8019168:	2300      	movs	r3, #0
 801916a:	9302      	str	r3, [sp, #8]
 801916c:	2300      	movs	r3, #0
 801916e:	9301      	str	r3, [sp, #4]
 8019170:	2300      	movs	r3, #0
 8019172:	9300      	str	r3, [sp, #0]
 8019174:	2300      	movs	r3, #0
 8019176:	2200      	movs	r2, #0
 8019178:	2100      	movs	r1, #0
 801917a:	6878      	ldr	r0, [r7, #4]
 801917c:	f000 fa4b 	bl	8019616 <rcl_wait_set_resize>
 8019180:	60f8      	str	r0, [r7, #12]
  (void)ret;  // NO LINT
  assert(RCL_RET_OK == ret);  // Defensive, shouldn't fail with size 0.
 8019182:	68fb      	ldr	r3, [r7, #12]
 8019184:	2b00      	cmp	r3, #0
 8019186:	d005      	beq.n	8019194 <__wait_set_clean_up+0x34>
 8019188:	4b0d      	ldr	r3, [pc, #52]	; (80191c0 <__wait_set_clean_up+0x60>)
 801918a:	4a0e      	ldr	r2, [pc, #56]	; (80191c4 <__wait_set_clean_up+0x64>)
 801918c:	215f      	movs	r1, #95	; 0x5f
 801918e:	480e      	ldr	r0, [pc, #56]	; (80191c8 <__wait_set_clean_up+0x68>)
 8019190:	f007 fbbe 	bl	8020910 <__assert_func>
  if (wait_set->impl) {
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019198:	2b00      	cmp	r3, #0
 801919a:	d00c      	beq.n	80191b6 <__wait_set_clean_up+0x56>
    wait_set->impl->allocator.deallocate(wait_set->impl, wait_set->impl->allocator.state);
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80191a2:	687a      	ldr	r2, [r7, #4]
 80191a4:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80191a6:	687a      	ldr	r2, [r7, #4]
 80191a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80191aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80191ac:	4611      	mov	r1, r2
 80191ae:	4798      	blx	r3
    wait_set->impl = NULL;
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	2200      	movs	r2, #0
 80191b4:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80191b6:	bf00      	nop
 80191b8:	3710      	adds	r7, #16
 80191ba:	46bd      	mov	sp, r7
 80191bc:	bd80      	pop	{r7, pc}
 80191be:	bf00      	nop
 80191c0:	08025ccc 	.word	0x08025ccc
 80191c4:	080272a8 	.word	0x080272a8
 80191c8:	08025ce0 	.word	0x08025ce0

080191cc <rcl_wait_set_init>:
  size_t number_of_clients,
  size_t number_of_services,
  size_t number_of_events,
  rcl_context_t * context,
  rcl_allocator_t allocator)
{
 80191cc:	b5b0      	push	{r4, r5, r7, lr}
 80191ce:	b08c      	sub	sp, #48	; 0x30
 80191d0:	af04      	add	r7, sp, #16
 80191d2:	60f8      	str	r0, [r7, #12]
 80191d4:	60b9      	str	r1, [r7, #8]
 80191d6:	607a      	str	r2, [r7, #4]
 80191d8:	603b      	str	r3, [r7, #0]
  RCUTILS_LOG_DEBUG_NAMED(
    ROS_PACKAGE_NAME, "Initializing wait set with "
    "'%zu' subscriptions, '%zu' guard conditions, '%zu' timers, '%zu' clients, '%zu' services",
    number_of_subscriptions, number_of_guard_conditions, number_of_timers, number_of_clients,
    number_of_services);
  rcl_ret_t fail_ret = RCL_RET_ERROR;
 80191da:	2301      	movs	r3, #1
 80191dc:	61fb      	str	r3, [r7, #28]

  RCL_CHECK_ALLOCATOR_WITH_MSG(&allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 80191de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80191e2:	4618      	mov	r0, r3
 80191e4:	f002 fac2 	bl	801b76c <rcutils_allocator_is_valid>
 80191e8:	4603      	mov	r3, r0
 80191ea:	f083 0301 	eor.w	r3, r3, #1
 80191ee:	b2db      	uxtb	r3, r3
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d001      	beq.n	80191f8 <rcl_wait_set_init+0x2c>
 80191f4:	230b      	movs	r3, #11
 80191f6:	e0b0      	b.n	801935a <rcl_wait_set_init+0x18e>
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	d101      	bne.n	8019202 <rcl_wait_set_init+0x36>
 80191fe:	230b      	movs	r3, #11
 8019200:	e0ab      	b.n	801935a <rcl_wait_set_init+0x18e>
  if (rcl_wait_set_is_valid(wait_set)) {
 8019202:	68f8      	ldr	r0, [r7, #12]
 8019204:	f002 f979 	bl	801b4fa <rcl_wait_set_is_valid>
 8019208:	4603      	mov	r3, r0
 801920a:	2b00      	cmp	r3, #0
 801920c:	d001      	beq.n	8019212 <rcl_wait_set_init+0x46>
    RCL_SET_ERROR_MSG("wait_set already initialized, or memory was uninitialized.");
    return RCL_RET_ALREADY_INIT;
 801920e:	2364      	movs	r3, #100	; 0x64
 8019210:	e0a3      	b.n	801935a <rcl_wait_set_init+0x18e>
  }
  // Make sure rcl has been initialized.
  RCL_CHECK_ARGUMENT_FOR_NULL(context, RCL_RET_INVALID_ARGUMENT);
 8019212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019214:	2b00      	cmp	r3, #0
 8019216:	d101      	bne.n	801921c <rcl_wait_set_init+0x50>
 8019218:	230b      	movs	r3, #11
 801921a:	e09e      	b.n	801935a <rcl_wait_set_init+0x18e>
  if (!rcl_context_is_valid(context)) {
 801921c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801921e:	f7fc fb5d 	bl	80158dc <rcl_context_is_valid>
 8019222:	4603      	mov	r3, r0
 8019224:	f083 0301 	eor.w	r3, r3, #1
 8019228:	b2db      	uxtb	r3, r3
 801922a:	2b00      	cmp	r3, #0
 801922c:	d001      	beq.n	8019232 <rcl_wait_set_init+0x66>
    RCL_SET_ERROR_MSG(
      "the given context is not valid, "
      "either rcl_init() was not called or rcl_shutdown() was called.");
    return RCL_RET_NOT_INIT;
 801922e:	2365      	movs	r3, #101	; 0x65
 8019230:	e093      	b.n	801935a <rcl_wait_set_init+0x18e>
  }
  // Allocate space for the implementation struct.
  wait_set->impl = (rcl_wait_set_impl_t *)allocator.allocate(
 8019232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019234:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019236:	4611      	mov	r1, r2
 8019238:	205c      	movs	r0, #92	; 0x5c
 801923a:	4798      	blx	r3
 801923c:	4602      	mov	r2, r0
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	631a      	str	r2, [r3, #48]	; 0x30
    sizeof(rcl_wait_set_impl_t), allocator.state);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019246:	2b00      	cmp	r3, #0
 8019248:	d101      	bne.n	801924e <rcl_wait_set_init+0x82>
 801924a:	230a      	movs	r3, #10
 801924c:	e085      	b.n	801935a <rcl_wait_set_init+0x18e>
    wait_set->impl, "allocating memory failed", return RCL_RET_BAD_ALLOC);
  memset(wait_set->impl, 0, sizeof(rcl_wait_set_impl_t));
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019252:	225c      	movs	r2, #92	; 0x5c
 8019254:	2100      	movs	r1, #0
 8019256:	4618      	mov	r0, r3
 8019258:	f007 fd5a 	bl	8020d10 <memset>
  wait_set->impl->rmw_subscriptions.subscribers = NULL;
 801925c:	68fb      	ldr	r3, [r7, #12]
 801925e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019260:	2200      	movs	r2, #0
 8019262:	609a      	str	r2, [r3, #8]
  wait_set->impl->rmw_subscriptions.subscriber_count = 0;
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019268:	2200      	movs	r2, #0
 801926a:	605a      	str	r2, [r3, #4]
  wait_set->impl->rmw_guard_conditions.guard_conditions = NULL;
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019270:	2200      	movs	r2, #0
 8019272:	615a      	str	r2, [r3, #20]
  wait_set->impl->rmw_guard_conditions.guard_condition_count = 0;
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019278:	2200      	movs	r2, #0
 801927a:	611a      	str	r2, [r3, #16]
  wait_set->impl->rmw_clients.clients = NULL;
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019280:	2200      	movs	r2, #0
 8019282:	621a      	str	r2, [r3, #32]
  wait_set->impl->rmw_clients.client_count = 0;
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019288:	2200      	movs	r2, #0
 801928a:	61da      	str	r2, [r3, #28]
  wait_set->impl->rmw_services.services = NULL;
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019290:	2200      	movs	r2, #0
 8019292:	62da      	str	r2, [r3, #44]	; 0x2c
  wait_set->impl->rmw_services.service_count = 0;
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019298:	2200      	movs	r2, #0
 801929a:	629a      	str	r2, [r3, #40]	; 0x28
  wait_set->impl->rmw_events.events = NULL;
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192a0:	2200      	movs	r2, #0
 80192a2:	639a      	str	r2, [r3, #56]	; 0x38
  wait_set->impl->rmw_events.event_count = 0;
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192a8:	2200      	movs	r2, #0
 80192aa:	635a      	str	r2, [r3, #52]	; 0x34
  // Set context.
  wait_set->impl->context = context;
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80192b2:	645a      	str	r2, [r3, #68]	; 0x44
  // Set allocator.
  wait_set->impl->allocator = allocator;
 80192b4:	68fb      	ldr	r3, [r7, #12]
 80192b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192b8:	f103 0448 	add.w	r4, r3, #72	; 0x48
 80192bc:	f107 0540 	add.w	r5, r7, #64	; 0x40
 80192c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80192c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80192c4:	682b      	ldr	r3, [r5, #0]
 80192c6:	6023      	str	r3, [r4, #0]

  size_t num_conditions =
    (2 * number_of_subscriptions) +
 80192c8:	68bb      	ldr	r3, [r7, #8]
 80192ca:	005a      	lsls	r2, r3, #1
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	441a      	add	r2, r3
    number_of_guard_conditions +
 80192d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192d2:	441a      	add	r2, r3
    number_of_clients +
 80192d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192d6:	4413      	add	r3, r2
  size_t num_conditions =
 80192d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80192da:	4413      	add	r3, r2
 80192dc:	61bb      	str	r3, [r7, #24]
    number_of_services +
    number_of_events;

  wait_set->impl->rmw_wait_set = rmw_create_wait_set(&(context->impl->rmw_context), num_conditions);
 80192de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80192ea:	69b9      	ldr	r1, [r7, #24]
 80192ec:	4610      	mov	r0, r2
 80192ee:	f006 fa1f 	bl	801f730 <rmw_create_wait_set>
 80192f2:	4603      	mov	r3, r0
 80192f4:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (!wait_set->impl->rmw_wait_set) {
 80192f6:	68fb      	ldr	r3, [r7, #12]
 80192f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d014      	beq.n	801932a <rcl_wait_set_init+0x15e>
    goto fail;
  }

  // Initialize subscription space.
  rcl_ret_t ret = rcl_wait_set_resize(
 8019300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019302:	9302      	str	r3, [sp, #8]
 8019304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019306:	9301      	str	r3, [sp, #4]
 8019308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801930a:	9300      	str	r3, [sp, #0]
 801930c:	683b      	ldr	r3, [r7, #0]
 801930e:	687a      	ldr	r2, [r7, #4]
 8019310:	68b9      	ldr	r1, [r7, #8]
 8019312:	68f8      	ldr	r0, [r7, #12]
 8019314:	f000 f97f 	bl	8019616 <rcl_wait_set_resize>
 8019318:	6178      	str	r0, [r7, #20]
    wait_set, number_of_subscriptions, number_of_guard_conditions, number_of_timers,
    number_of_clients, number_of_services, number_of_events);
  if (RCL_RET_OK != ret) {
 801931a:	697b      	ldr	r3, [r7, #20]
 801931c:	2b00      	cmp	r3, #0
 801931e:	d002      	beq.n	8019326 <rcl_wait_set_init+0x15a>
    fail_ret = ret;
 8019320:	697b      	ldr	r3, [r7, #20]
 8019322:	61fb      	str	r3, [r7, #28]
    goto fail;
 8019324:	e002      	b.n	801932c <rcl_wait_set_init+0x160>
  }
  return RCL_RET_OK;
 8019326:	2300      	movs	r3, #0
 8019328:	e017      	b.n	801935a <rcl_wait_set_init+0x18e>
    goto fail;
 801932a:	bf00      	nop
fail:
  if (rcl_wait_set_is_valid(wait_set)) {
 801932c:	68f8      	ldr	r0, [r7, #12]
 801932e:	f002 f8e4 	bl	801b4fa <rcl_wait_set_is_valid>
 8019332:	4603      	mov	r3, r0
 8019334:	2b00      	cmp	r3, #0
 8019336:	d00c      	beq.n	8019352 <rcl_wait_set_init+0x186>
    rmw_ret_t ret = rmw_destroy_wait_set(wait_set->impl->rmw_wait_set);
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801933c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801933e:	4618      	mov	r0, r3
 8019340:	f006 fa10 	bl	801f764 <rmw_destroy_wait_set>
 8019344:	6138      	str	r0, [r7, #16]
    if (ret != RMW_RET_OK) {
 8019346:	693b      	ldr	r3, [r7, #16]
 8019348:	2b00      	cmp	r3, #0
 801934a:	d002      	beq.n	8019352 <rcl_wait_set_init+0x186>
      fail_ret = RCL_RET_WAIT_SET_INVALID;
 801934c:	f44f 7361 	mov.w	r3, #900	; 0x384
 8019350:	61fb      	str	r3, [r7, #28]
    }
  }
  __wait_set_clean_up(wait_set);
 8019352:	68f8      	ldr	r0, [r7, #12]
 8019354:	f7ff ff04 	bl	8019160 <__wait_set_clean_up>
  return fail_ret;
 8019358:	69fb      	ldr	r3, [r7, #28]
}
 801935a:	4618      	mov	r0, r3
 801935c:	3720      	adds	r7, #32
 801935e:	46bd      	mov	sp, r7
 8019360:	bdb0      	pop	{r4, r5, r7, pc}

08019362 <rcl_wait_set_fini>:

rcl_ret_t
rcl_wait_set_fini(rcl_wait_set_t * wait_set)
{
 8019362:	b580      	push	{r7, lr}
 8019364:	b084      	sub	sp, #16
 8019366:	af00      	add	r7, sp, #0
 8019368:	6078      	str	r0, [r7, #4]
  rcl_ret_t result = RCL_RET_OK;
 801936a:	2300      	movs	r3, #0
 801936c:	60fb      	str	r3, [r7, #12]
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d101      	bne.n	8019378 <rcl_wait_set_fini+0x16>
 8019374:	230b      	movs	r3, #11
 8019376:	e016      	b.n	80193a6 <rcl_wait_set_fini+0x44>

  if (rcl_wait_set_is_valid(wait_set)) {
 8019378:	6878      	ldr	r0, [r7, #4]
 801937a:	f002 f8be 	bl	801b4fa <rcl_wait_set_is_valid>
 801937e:	4603      	mov	r3, r0
 8019380:	2b00      	cmp	r3, #0
 8019382:	d00f      	beq.n	80193a4 <rcl_wait_set_fini+0x42>
    rmw_ret_t ret = rmw_destroy_wait_set(wait_set->impl->rmw_wait_set);
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801938a:	4618      	mov	r0, r3
 801938c:	f006 f9ea 	bl	801f764 <rmw_destroy_wait_set>
 8019390:	60b8      	str	r0, [r7, #8]
    if (ret != RMW_RET_OK) {
 8019392:	68bb      	ldr	r3, [r7, #8]
 8019394:	2b00      	cmp	r3, #0
 8019396:	d002      	beq.n	801939e <rcl_wait_set_fini+0x3c>
      RCL_SET_ERROR_MSG(rmw_get_error_string().str);
      result = RCL_RET_WAIT_SET_INVALID;
 8019398:	f44f 7361 	mov.w	r3, #900	; 0x384
 801939c:	60fb      	str	r3, [r7, #12]
    }
    __wait_set_clean_up(wait_set);
 801939e:	6878      	ldr	r0, [r7, #4]
 80193a0:	f7ff fede 	bl	8019160 <__wait_set_clean_up>
  }
  return result;
 80193a4:	68fb      	ldr	r3, [r7, #12]
}
 80193a6:	4618      	mov	r0, r3
 80193a8:	3710      	adds	r7, #16
 80193aa:	46bd      	mov	sp, r7
 80193ac:	bd80      	pop	{r7, pc}

080193ae <rcl_wait_set_add_subscription>:
rcl_ret_t
rcl_wait_set_add_subscription(
  rcl_wait_set_t * wait_set,
  const rcl_subscription_t * subscription,
  size_t * index)
{
 80193ae:	b580      	push	{r7, lr}
 80193b0:	b086      	sub	sp, #24
 80193b2:	af00      	add	r7, sp, #0
 80193b4:	60f8      	str	r0, [r7, #12]
 80193b6:	60b9      	str	r1, [r7, #8]
 80193b8:	607a      	str	r2, [r7, #4]
  SET_ADD(subscription)
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d101      	bne.n	80193c4 <rcl_wait_set_add_subscription+0x16>
 80193c0:	230b      	movs	r3, #11
 80193c2:	e045      	b.n	8019450 <rcl_wait_set_add_subscription+0xa2>
 80193c4:	68f8      	ldr	r0, [r7, #12]
 80193c6:	f002 f898 	bl	801b4fa <rcl_wait_set_is_valid>
 80193ca:	4603      	mov	r3, r0
 80193cc:	f083 0301 	eor.w	r3, r3, #1
 80193d0:	b2db      	uxtb	r3, r3
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d002      	beq.n	80193dc <rcl_wait_set_add_subscription+0x2e>
 80193d6:	f44f 7361 	mov.w	r3, #900	; 0x384
 80193da:	e039      	b.n	8019450 <rcl_wait_set_add_subscription+0xa2>
 80193dc:	68bb      	ldr	r3, [r7, #8]
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d101      	bne.n	80193e6 <rcl_wait_set_add_subscription+0x38>
 80193e2:	230b      	movs	r3, #11
 80193e4:	e034      	b.n	8019450 <rcl_wait_set_add_subscription+0xa2>
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80193ea:	681a      	ldr	r2, [r3, #0]
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	685b      	ldr	r3, [r3, #4]
 80193f0:	429a      	cmp	r2, r3
 80193f2:	d302      	bcc.n	80193fa <rcl_wait_set_add_subscription+0x4c>
 80193f4:	f240 3386 	movw	r3, #902	; 0x386
 80193f8:	e02a      	b.n	8019450 <rcl_wait_set_add_subscription+0xa2>
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80193fe:	6813      	ldr	r3, [r2, #0]
 8019400:	1c59      	adds	r1, r3, #1
 8019402:	6011      	str	r1, [r2, #0]
 8019404:	617b      	str	r3, [r7, #20]
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	681a      	ldr	r2, [r3, #0]
 801940a:	697b      	ldr	r3, [r7, #20]
 801940c:	009b      	lsls	r3, r3, #2
 801940e:	4413      	add	r3, r2
 8019410:	68ba      	ldr	r2, [r7, #8]
 8019412:	601a      	str	r2, [r3, #0]
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d002      	beq.n	8019420 <rcl_wait_set_add_subscription+0x72>
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	697a      	ldr	r2, [r7, #20]
 801941e:	601a      	str	r2, [r3, #0]
  SET_ADD_RMW(subscription, rmw_subscriptions.subscribers, rmw_subscriptions.subscriber_count)
 8019420:	68b8      	ldr	r0, [r7, #8]
 8019422:	f7fe fd53 	bl	8017ecc <rcl_subscription_get_rmw_handle>
 8019426:	6138      	str	r0, [r7, #16]
 8019428:	693b      	ldr	r3, [r7, #16]
 801942a:	2b00      	cmp	r3, #0
 801942c:	d101      	bne.n	8019432 <rcl_wait_set_add_subscription+0x84>
 801942e:	2301      	movs	r3, #1
 8019430:	e00e      	b.n	8019450 <rcl_wait_set_add_subscription+0xa2>
 8019432:	68fb      	ldr	r3, [r7, #12]
 8019434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019436:	689a      	ldr	r2, [r3, #8]
 8019438:	697b      	ldr	r3, [r7, #20]
 801943a:	009b      	lsls	r3, r3, #2
 801943c:	4413      	add	r3, r2
 801943e:	693a      	ldr	r2, [r7, #16]
 8019440:	6852      	ldr	r2, [r2, #4]
 8019442:	601a      	str	r2, [r3, #0]
 8019444:	68fb      	ldr	r3, [r7, #12]
 8019446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019448:	685a      	ldr	r2, [r3, #4]
 801944a:	3201      	adds	r2, #1
 801944c:	605a      	str	r2, [r3, #4]
  return RCL_RET_OK;
 801944e:	2300      	movs	r3, #0
}
 8019450:	4618      	mov	r0, r3
 8019452:	3718      	adds	r7, #24
 8019454:	46bd      	mov	sp, r7
 8019456:	bd80      	pop	{r7, pc}

08019458 <rcl_wait_set_clear>:
 * Sets all of the entries in the underlying rmw array to null, and sets the
 * count in the rmw array to 0.
 */
rcl_ret_t
rcl_wait_set_clear(rcl_wait_set_t * wait_set)
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b082      	sub	sp, #8
 801945c:	af00      	add	r7, sp, #0
 801945e:	6078      	str	r0, [r7, #4]
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d101      	bne.n	801946a <rcl_wait_set_clear+0x12>
 8019466:	230b      	movs	r3, #11
 8019468:	e0d1      	b.n	801960e <rcl_wait_set_clear+0x1b6>
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set->impl, RCL_RET_WAIT_SET_INVALID);
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801946e:	2b00      	cmp	r3, #0
 8019470:	d102      	bne.n	8019478 <rcl_wait_set_clear+0x20>
 8019472:	f44f 7361 	mov.w	r3, #900	; 0x384
 8019476:	e0ca      	b.n	801960e <rcl_wait_set_clear+0x1b6>

  SET_CLEAR(subscription);
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d00c      	beq.n	801949a <rcl_wait_set_clear+0x42>
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	6818      	ldr	r0, [r3, #0]
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	685b      	ldr	r3, [r3, #4]
 8019488:	009b      	lsls	r3, r3, #2
 801948a:	461a      	mov	r2, r3
 801948c:	2100      	movs	r1, #0
 801948e:	f007 fc3f 	bl	8020d10 <memset>
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019496:	2200      	movs	r2, #0
 8019498:	601a      	str	r2, [r3, #0]
  SET_CLEAR(guard_condition);
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	689b      	ldr	r3, [r3, #8]
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d00c      	beq.n	80194bc <rcl_wait_set_clear+0x64>
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	6898      	ldr	r0, [r3, #8]
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	68db      	ldr	r3, [r3, #12]
 80194aa:	009b      	lsls	r3, r3, #2
 80194ac:	461a      	mov	r2, r3
 80194ae:	2100      	movs	r1, #0
 80194b0:	f007 fc2e 	bl	8020d10 <memset>
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80194b8:	2200      	movs	r2, #0
 80194ba:	60da      	str	r2, [r3, #12]
  SET_CLEAR(client);
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	699b      	ldr	r3, [r3, #24]
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d00c      	beq.n	80194de <rcl_wait_set_clear+0x86>
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	6998      	ldr	r0, [r3, #24]
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	69db      	ldr	r3, [r3, #28]
 80194cc:	009b      	lsls	r3, r3, #2
 80194ce:	461a      	mov	r2, r3
 80194d0:	2100      	movs	r1, #0
 80194d2:	f007 fc1d 	bl	8020d10 <memset>
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80194da:	2200      	movs	r2, #0
 80194dc:	619a      	str	r2, [r3, #24]
  SET_CLEAR(service);
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	6a1b      	ldr	r3, [r3, #32]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d00c      	beq.n	8019500 <rcl_wait_set_clear+0xa8>
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	6a18      	ldr	r0, [r3, #32]
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194ee:	009b      	lsls	r3, r3, #2
 80194f0:	461a      	mov	r2, r3
 80194f2:	2100      	movs	r1, #0
 80194f4:	f007 fc0c 	bl	8020d10 <memset>
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80194fc:	2200      	movs	r2, #0
 80194fe:	625a      	str	r2, [r3, #36]	; 0x24
  SET_CLEAR(event);
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019504:	2b00      	cmp	r3, #0
 8019506:	d00c      	beq.n	8019522 <rcl_wait_set_clear+0xca>
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019510:	009b      	lsls	r3, r3, #2
 8019512:	461a      	mov	r2, r3
 8019514:	2100      	movs	r1, #0
 8019516:	f007 fbfb 	bl	8020d10 <memset>
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801951e:	2200      	movs	r2, #0
 8019520:	631a      	str	r2, [r3, #48]	; 0x30
  SET_CLEAR(timer);
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	691b      	ldr	r3, [r3, #16]
 8019526:	2b00      	cmp	r3, #0
 8019528:	d00c      	beq.n	8019544 <rcl_wait_set_clear+0xec>
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	6918      	ldr	r0, [r3, #16]
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	695b      	ldr	r3, [r3, #20]
 8019532:	009b      	lsls	r3, r3, #2
 8019534:	461a      	mov	r2, r3
 8019536:	2100      	movs	r1, #0
 8019538:	f007 fbea 	bl	8020d10 <memset>
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019540:	2200      	movs	r2, #0
 8019542:	641a      	str	r2, [r3, #64]	; 0x40

  SET_CLEAR_RMW(
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019548:	689b      	ldr	r3, [r3, #8]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d00e      	beq.n	801956c <rcl_wait_set_clear+0x114>
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019552:	6898      	ldr	r0, [r3, #8]
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019558:	685b      	ldr	r3, [r3, #4]
 801955a:	009b      	lsls	r3, r3, #2
 801955c:	461a      	mov	r2, r3
 801955e:	2100      	movs	r1, #0
 8019560:	f007 fbd6 	bl	8020d10 <memset>
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019568:	2200      	movs	r2, #0
 801956a:	605a      	str	r2, [r3, #4]
    subscription,
    rmw_subscriptions.subscribers,
    rmw_subscriptions.subscriber_count);
  SET_CLEAR_RMW(
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019570:	695b      	ldr	r3, [r3, #20]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d00e      	beq.n	8019594 <rcl_wait_set_clear+0x13c>
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801957a:	6958      	ldr	r0, [r3, #20]
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019580:	691b      	ldr	r3, [r3, #16]
 8019582:	009b      	lsls	r3, r3, #2
 8019584:	461a      	mov	r2, r3
 8019586:	2100      	movs	r1, #0
 8019588:	f007 fbc2 	bl	8020d10 <memset>
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019590:	2200      	movs	r2, #0
 8019592:	611a      	str	r2, [r3, #16]
    guard_condition,
    rmw_guard_conditions.guard_conditions,
    rmw_guard_conditions.guard_condition_count);
  SET_CLEAR_RMW(
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019598:	6a1b      	ldr	r3, [r3, #32]
 801959a:	2b00      	cmp	r3, #0
 801959c:	d00e      	beq.n	80195bc <rcl_wait_set_clear+0x164>
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195a2:	6a18      	ldr	r0, [r3, #32]
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195a8:	69db      	ldr	r3, [r3, #28]
 80195aa:	009b      	lsls	r3, r3, #2
 80195ac:	461a      	mov	r2, r3
 80195ae:	2100      	movs	r1, #0
 80195b0:	f007 fbae 	bl	8020d10 <memset>
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195b8:	2200      	movs	r2, #0
 80195ba:	61da      	str	r2, [r3, #28]
    clients,
    rmw_clients.clients,
    rmw_clients.client_count);
  SET_CLEAR_RMW(
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d00e      	beq.n	80195e4 <rcl_wait_set_clear+0x18c>
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195d2:	009b      	lsls	r3, r3, #2
 80195d4:	461a      	mov	r2, r3
 80195d6:	2100      	movs	r1, #0
 80195d8:	f007 fb9a 	bl	8020d10 <memset>
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195e0:	2200      	movs	r2, #0
 80195e2:	629a      	str	r2, [r3, #40]	; 0x28
    services,
    rmw_services.services,
    rmw_services.service_count);
  SET_CLEAR_RMW(
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d00e      	beq.n	801960c <rcl_wait_set_clear+0x1b4>
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195fa:	009b      	lsls	r3, r3, #2
 80195fc:	461a      	mov	r2, r3
 80195fe:	2100      	movs	r1, #0
 8019600:	f007 fb86 	bl	8020d10 <memset>
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019608:	2200      	movs	r2, #0
 801960a:	635a      	str	r2, [r3, #52]	; 0x34
    events,
    rmw_events.events,
    rmw_events.event_count);

  return RCL_RET_OK;
 801960c:	2300      	movs	r3, #0
}
 801960e:	4618      	mov	r0, r3
 8019610:	3708      	adds	r7, #8
 8019612:	46bd      	mov	sp, r7
 8019614:	bd80      	pop	{r7, pc}

08019616 <rcl_wait_set_resize>:
  size_t guard_conditions_size,
  size_t timers_size,
  size_t clients_size,
  size_t services_size,
  size_t events_size)
{
 8019616:	b5b0      	push	{r4, r5, r7, lr}
 8019618:	b0a4      	sub	sp, #144	; 0x90
 801961a:	af00      	add	r7, sp, #0
 801961c:	60f8      	str	r0, [r7, #12]
 801961e:	60b9      	str	r1, [r7, #8]
 8019620:	607a      	str	r2, [r7, #4]
 8019622:	603b      	str	r3, [r7, #0]
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	2b00      	cmp	r3, #0
 8019628:	d101      	bne.n	801962e <rcl_wait_set_resize+0x18>
 801962a:	230b      	movs	r3, #11
 801962c:	e2f9      	b.n	8019c22 <rcl_wait_set_resize+0x60c>
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set->impl, RCL_RET_WAIT_SET_INVALID);
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019632:	2b00      	cmp	r3, #0
 8019634:	d102      	bne.n	801963c <rcl_wait_set_resize+0x26>
 8019636:	f44f 7361 	mov.w	r3, #900	; 0x384
 801963a:	e2f2      	b.n	8019c22 <rcl_wait_set_resize+0x60c>
  SET_RESIZE(
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019640:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8019644:	f103 0548 	add.w	r5, r3, #72	; 0x48
 8019648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801964a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801964c:	682b      	ldr	r3, [r5, #0]
 801964e:	6023      	str	r3, [r4, #0]
 8019650:	68fb      	ldr	r3, [r7, #12]
 8019652:	2200      	movs	r2, #0
 8019654:	605a      	str	r2, [r3, #4]
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801965a:	2200      	movs	r2, #0
 801965c:	601a      	str	r2, [r3, #0]
 801965e:	68bb      	ldr	r3, [r7, #8]
 8019660:	2b00      	cmp	r3, #0
 8019662:	d123      	bne.n	80196ac <rcl_wait_set_resize+0x96>
 8019664:	68fb      	ldr	r3, [r7, #12]
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d009      	beq.n	8019680 <rcl_wait_set_resize+0x6a>
 801966c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801966e:	68fa      	ldr	r2, [r7, #12]
 8019670:	6812      	ldr	r2, [r2, #0]
 8019672:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8019676:	4610      	mov	r0, r2
 8019678:	4798      	blx	r3
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	2200      	movs	r2, #0
 801967e:	601a      	str	r2, [r3, #0]
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019684:	689b      	ldr	r3, [r3, #8]
 8019686:	2b00      	cmp	r3, #0
 8019688:	d05b      	beq.n	8019742 <rcl_wait_set_resize+0x12c>
 801968a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801968c:	68fa      	ldr	r2, [r7, #12]
 801968e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8019690:	6892      	ldr	r2, [r2, #8]
 8019692:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8019696:	4610      	mov	r0, r2
 8019698:	4798      	blx	r3
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801969e:	2200      	movs	r2, #0
 80196a0:	609a      	str	r2, [r3, #8]
 80196a2:	68fb      	ldr	r3, [r7, #12]
 80196a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80196a6:	2200      	movs	r2, #0
 80196a8:	605a      	str	r2, [r3, #4]
 80196aa:	e04a      	b.n	8019742 <rcl_wait_set_resize+0x12c>
 80196ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80196ae:	68fa      	ldr	r2, [r7, #12]
 80196b0:	6810      	ldr	r0, [r2, #0]
 80196b2:	68ba      	ldr	r2, [r7, #8]
 80196b4:	0091      	lsls	r1, r2, #2
 80196b6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80196ba:	4798      	blx	r3
 80196bc:	4602      	mov	r2, r0
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	601a      	str	r2, [r3, #0]
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d101      	bne.n	80196ce <rcl_wait_set_resize+0xb8>
 80196ca:	230a      	movs	r3, #10
 80196cc:	e2a9      	b.n	8019c22 <rcl_wait_set_resize+0x60c>
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	6818      	ldr	r0, [r3, #0]
 80196d2:	68bb      	ldr	r3, [r7, #8]
 80196d4:	009b      	lsls	r3, r3, #2
 80196d6:	461a      	mov	r2, r3
 80196d8:	2100      	movs	r1, #0
 80196da:	f007 fb19 	bl	8020d10 <memset>
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	68ba      	ldr	r2, [r7, #8]
 80196e2:	605a      	str	r2, [r3, #4]
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80196e8:	2200      	movs	r2, #0
 80196ea:	605a      	str	r2, [r3, #4]
 80196ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80196ee:	68fa      	ldr	r2, [r7, #12]
 80196f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80196f2:	6890      	ldr	r0, [r2, #8]
 80196f4:	68ba      	ldr	r2, [r7, #8]
 80196f6:	0091      	lsls	r1, r2, #2
 80196f8:	f8d7 5084 	ldr.w	r5, [r7, #132]	; 0x84
 80196fc:	68fa      	ldr	r2, [r7, #12]
 80196fe:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8019700:	462a      	mov	r2, r5
 8019702:	4798      	blx	r3
 8019704:	4603      	mov	r3, r0
 8019706:	60a3      	str	r3, [r4, #8]
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801970c:	689b      	ldr	r3, [r3, #8]
 801970e:	2b00      	cmp	r3, #0
 8019710:	d10e      	bne.n	8019730 <rcl_wait_set_resize+0x11a>
 8019712:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019714:	68fa      	ldr	r2, [r7, #12]
 8019716:	6812      	ldr	r2, [r2, #0]
 8019718:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801971c:	4610      	mov	r0, r2
 801971e:	4798      	blx	r3
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	2200      	movs	r2, #0
 8019724:	601a      	str	r2, [r3, #0]
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	2200      	movs	r2, #0
 801972a:	605a      	str	r2, [r3, #4]
 801972c:	230a      	movs	r3, #10
 801972e:	e278      	b.n	8019c22 <rcl_wait_set_resize+0x60c>
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019734:	6898      	ldr	r0, [r3, #8]
 8019736:	68bb      	ldr	r3, [r7, #8]
 8019738:	009b      	lsls	r3, r3, #2
 801973a:	461a      	mov	r2, r3
 801973c:	2100      	movs	r1, #0
 801973e:	f007 fae7 	bl	8020d10 <memset>
      rmw_subscriptions.subscribers, rmw_subscriptions.subscriber_count),
    SET_RESIZE_RMW_REALLOC(
      subscription, rmw_subscriptions.subscribers, rmw_subscriptions.subscriber_count)
  );
  // Guard condition RCL size is the resize amount given
  SET_RESIZE(guard_condition,;,;);  // NOLINT
 8019742:	68fb      	ldr	r3, [r7, #12]
 8019744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019746:	f107 0460 	add.w	r4, r7, #96	; 0x60
 801974a:	f103 0548 	add.w	r5, r3, #72	; 0x48
 801974e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019752:	682b      	ldr	r3, [r5, #0]
 8019754:	6023      	str	r3, [r4, #0]
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	2200      	movs	r2, #0
 801975a:	60da      	str	r2, [r3, #12]
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019760:	2200      	movs	r2, #0
 8019762:	60da      	str	r2, [r3, #12]
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	2b00      	cmp	r3, #0
 8019768:	d10d      	bne.n	8019786 <rcl_wait_set_resize+0x170>
 801976a:	68fb      	ldr	r3, [r7, #12]
 801976c:	689b      	ldr	r3, [r3, #8]
 801976e:	2b00      	cmp	r3, #0
 8019770:	d024      	beq.n	80197bc <rcl_wait_set_resize+0x1a6>
 8019772:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019774:	68fa      	ldr	r2, [r7, #12]
 8019776:	6892      	ldr	r2, [r2, #8]
 8019778:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801977a:	4610      	mov	r0, r2
 801977c:	4798      	blx	r3
 801977e:	68fb      	ldr	r3, [r7, #12]
 8019780:	2200      	movs	r2, #0
 8019782:	609a      	str	r2, [r3, #8]
 8019784:	e01a      	b.n	80197bc <rcl_wait_set_resize+0x1a6>
 8019786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019788:	68fa      	ldr	r2, [r7, #12]
 801978a:	6890      	ldr	r0, [r2, #8]
 801978c:	687a      	ldr	r2, [r7, #4]
 801978e:	0091      	lsls	r1, r2, #2
 8019790:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019792:	4798      	blx	r3
 8019794:	4602      	mov	r2, r0
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	609a      	str	r2, [r3, #8]
 801979a:	68fb      	ldr	r3, [r7, #12]
 801979c:	689b      	ldr	r3, [r3, #8]
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d101      	bne.n	80197a6 <rcl_wait_set_resize+0x190>
 80197a2:	230a      	movs	r3, #10
 80197a4:	e23d      	b.n	8019c22 <rcl_wait_set_resize+0x60c>
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	6898      	ldr	r0, [r3, #8]
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	009b      	lsls	r3, r3, #2
 80197ae:	461a      	mov	r2, r3
 80197b0:	2100      	movs	r1, #0
 80197b2:	f007 faad 	bl	8020d10 <memset>
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	687a      	ldr	r2, [r7, #4]
 80197ba:	60da      	str	r2, [r3, #12]

  // Guard condition RMW size needs to be guard conditions + timers
  rmw_guard_conditions_t * rmw_gcs = &(wait_set->impl->rmw_guard_conditions);
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80197c0:	3310      	adds	r3, #16
 80197c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const size_t num_rmw_gc = guard_conditions_size + timers_size;
 80197c6:	687a      	ldr	r2, [r7, #4]
 80197c8:	683b      	ldr	r3, [r7, #0]
 80197ca:	4413      	add	r3, r2
 80197cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  // Clear added guard conditions
  rmw_gcs->guard_condition_count = 0u;
 80197d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80197d4:	2200      	movs	r2, #0
 80197d6:	601a      	str	r2, [r3, #0]
  if (0u == num_rmw_gc) {
 80197d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d114      	bne.n	801980a <rcl_wait_set_resize+0x1f4>
    if (rmw_gcs->guard_conditions) {
 80197e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80197e4:	685b      	ldr	r3, [r3, #4]
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d051      	beq.n	801988e <rcl_wait_set_resize+0x278>
      wait_set->impl->allocator.deallocate(
 80197ea:	68fb      	ldr	r3, [r7, #12]
 80197ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80197ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        (void *)rmw_gcs->guard_conditions, wait_set->impl->allocator.state);
 80197f0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80197f4:	6850      	ldr	r0, [r2, #4]
 80197f6:	68fa      	ldr	r2, [r7, #12]
 80197f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
      wait_set->impl->allocator.deallocate(
 80197fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80197fc:	4611      	mov	r1, r2
 80197fe:	4798      	blx	r3
      rmw_gcs->guard_conditions = NULL;
 8019800:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019804:	2200      	movs	r2, #0
 8019806:	605a      	str	r2, [r3, #4]
 8019808:	e041      	b.n	801988e <rcl_wait_set_resize+0x278>
    }
  } else {
    rmw_gcs->guard_conditions = (void **)wait_set->impl->allocator.reallocate(
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801980e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      rmw_gcs->guard_conditions, sizeof(void *) * num_rmw_gc, wait_set->impl->allocator.state);
 8019810:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019814:	6850      	ldr	r0, [r2, #4]
    rmw_gcs->guard_conditions = (void **)wait_set->impl->allocator.reallocate(
 8019816:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801981a:	0091      	lsls	r1, r2, #2
      rmw_gcs->guard_conditions, sizeof(void *) * num_rmw_gc, wait_set->impl->allocator.state);
 801981c:	68fa      	ldr	r2, [r7, #12]
 801981e:	6b12      	ldr	r2, [r2, #48]	; 0x30
    rmw_gcs->guard_conditions = (void **)wait_set->impl->allocator.reallocate(
 8019820:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8019822:	4798      	blx	r3
 8019824:	4602      	mov	r2, r0
 8019826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801982a:	605a      	str	r2, [r3, #4]
    if (!rmw_gcs->guard_conditions) {
 801982c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019830:	685b      	ldr	r3, [r3, #4]
 8019832:	2b00      	cmp	r3, #0
 8019834:	d121      	bne.n	801987a <rcl_wait_set_resize+0x264>
      // Deallocate rcl arrays to match unallocated rmw guard conditions
      wait_set->impl->allocator.deallocate(
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801983a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        (void *)wait_set->guard_conditions, wait_set->impl->allocator.state);
 801983c:	68fa      	ldr	r2, [r7, #12]
 801983e:	6890      	ldr	r0, [r2, #8]
 8019840:	68fa      	ldr	r2, [r7, #12]
 8019842:	6b12      	ldr	r2, [r2, #48]	; 0x30
      wait_set->impl->allocator.deallocate(
 8019844:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8019846:	4611      	mov	r1, r2
 8019848:	4798      	blx	r3
      wait_set->size_of_guard_conditions = 0u;
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	2200      	movs	r2, #0
 801984e:	60da      	str	r2, [r3, #12]
      wait_set->guard_conditions = NULL;
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	2200      	movs	r2, #0
 8019854:	609a      	str	r2, [r3, #8]
      wait_set->impl->allocator.deallocate(
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801985a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        (void *)wait_set->timers, wait_set->impl->allocator.state);
 801985c:	68fa      	ldr	r2, [r7, #12]
 801985e:	6910      	ldr	r0, [r2, #16]
 8019860:	68fa      	ldr	r2, [r7, #12]
 8019862:	6b12      	ldr	r2, [r2, #48]	; 0x30
      wait_set->impl->allocator.deallocate(
 8019864:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8019866:	4611      	mov	r1, r2
 8019868:	4798      	blx	r3
      wait_set->size_of_timers = 0u;
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	2200      	movs	r2, #0
 801986e:	615a      	str	r2, [r3, #20]
      wait_set->timers = NULL;
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	2200      	movs	r2, #0
 8019874:	611a      	str	r2, [r3, #16]
      RCL_SET_ERROR_MSG("allocating memory failed");
      return RCL_RET_BAD_ALLOC;
 8019876:	230a      	movs	r3, #10
 8019878:	e1d3      	b.n	8019c22 <rcl_wait_set_resize+0x60c>
    }
    memset(rmw_gcs->guard_conditions, 0, sizeof(void *) * num_rmw_gc);
 801987a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801987e:	6858      	ldr	r0, [r3, #4]
 8019880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019884:	009b      	lsls	r3, r3, #2
 8019886:	461a      	mov	r2, r3
 8019888:	2100      	movs	r1, #0
 801988a:	f007 fa41 	bl	8020d10 <memset>
  }

  SET_RESIZE(timer,;,;);  // NOLINT
 801988e:	68fb      	ldr	r3, [r7, #12]
 8019890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019892:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8019896:	f103 0548 	add.w	r5, r3, #72	; 0x48
 801989a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801989c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801989e:	682b      	ldr	r3, [r5, #0]
 80198a0:	6023      	str	r3, [r4, #0]
 80198a2:	68fb      	ldr	r3, [r7, #12]
 80198a4:	2200      	movs	r2, #0
 80198a6:	615a      	str	r2, [r3, #20]
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80198ac:	2200      	movs	r2, #0
 80198ae:	641a      	str	r2, [r3, #64]	; 0x40
 80198b0:	683b      	ldr	r3, [r7, #0]
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d10d      	bne.n	80198d2 <rcl_wait_set_resize+0x2bc>
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	691b      	ldr	r3, [r3, #16]
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d024      	beq.n	8019908 <rcl_wait_set_resize+0x2f2>
 80198be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80198c0:	68fa      	ldr	r2, [r7, #12]
 80198c2:	6912      	ldr	r2, [r2, #16]
 80198c4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80198c6:	4610      	mov	r0, r2
 80198c8:	4798      	blx	r3
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	2200      	movs	r2, #0
 80198ce:	611a      	str	r2, [r3, #16]
 80198d0:	e01a      	b.n	8019908 <rcl_wait_set_resize+0x2f2>
 80198d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198d4:	68fa      	ldr	r2, [r7, #12]
 80198d6:	6910      	ldr	r0, [r2, #16]
 80198d8:	683a      	ldr	r2, [r7, #0]
 80198da:	0091      	lsls	r1, r2, #2
 80198dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80198de:	4798      	blx	r3
 80198e0:	4602      	mov	r2, r0
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	611a      	str	r2, [r3, #16]
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	691b      	ldr	r3, [r3, #16]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d101      	bne.n	80198f2 <rcl_wait_set_resize+0x2dc>
 80198ee:	230a      	movs	r3, #10
 80198f0:	e197      	b.n	8019c22 <rcl_wait_set_resize+0x60c>
 80198f2:	68fb      	ldr	r3, [r7, #12]
 80198f4:	6918      	ldr	r0, [r3, #16]
 80198f6:	683b      	ldr	r3, [r7, #0]
 80198f8:	009b      	lsls	r3, r3, #2
 80198fa:	461a      	mov	r2, r3
 80198fc:	2100      	movs	r1, #0
 80198fe:	f007 fa07 	bl	8020d10 <memset>
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	683a      	ldr	r2, [r7, #0]
 8019906:	615a      	str	r2, [r3, #20]
  SET_RESIZE(
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801990c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8019910:	f103 0548 	add.w	r5, r3, #72	; 0x48
 8019914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019918:	682b      	ldr	r3, [r5, #0]
 801991a:	6023      	str	r3, [r4, #0]
 801991c:	68fb      	ldr	r3, [r7, #12]
 801991e:	2200      	movs	r2, #0
 8019920:	61da      	str	r2, [r3, #28]
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019926:	2200      	movs	r2, #0
 8019928:	619a      	str	r2, [r3, #24]
 801992a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801992e:	2b00      	cmp	r3, #0
 8019930:	d121      	bne.n	8019976 <rcl_wait_set_resize+0x360>
 8019932:	68fb      	ldr	r3, [r7, #12]
 8019934:	699b      	ldr	r3, [r3, #24]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d008      	beq.n	801994c <rcl_wait_set_resize+0x336>
 801993a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801993c:	68fa      	ldr	r2, [r7, #12]
 801993e:	6992      	ldr	r2, [r2, #24]
 8019940:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8019942:	4610      	mov	r0, r2
 8019944:	4798      	blx	r3
 8019946:	68fb      	ldr	r3, [r7, #12]
 8019948:	2200      	movs	r2, #0
 801994a:	619a      	str	r2, [r3, #24]
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019950:	6a1b      	ldr	r3, [r3, #32]
 8019952:	2b00      	cmp	r3, #0
 8019954:	d05c      	beq.n	8019a10 <rcl_wait_set_resize+0x3fa>
 8019956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019958:	68fa      	ldr	r2, [r7, #12]
 801995a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801995c:	6a12      	ldr	r2, [r2, #32]
 801995e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8019960:	4610      	mov	r0, r2
 8019962:	4798      	blx	r3
 8019964:	68fb      	ldr	r3, [r7, #12]
 8019966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019968:	2200      	movs	r2, #0
 801996a:	621a      	str	r2, [r3, #32]
 801996c:	68fb      	ldr	r3, [r7, #12]
 801996e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019970:	2200      	movs	r2, #0
 8019972:	61da      	str	r2, [r3, #28]
 8019974:	e04c      	b.n	8019a10 <rcl_wait_set_resize+0x3fa>
 8019976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019978:	68fa      	ldr	r2, [r7, #12]
 801997a:	6990      	ldr	r0, [r2, #24]
 801997c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8019980:	0091      	lsls	r1, r2, #2
 8019982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019984:	4798      	blx	r3
 8019986:	4602      	mov	r2, r0
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	619a      	str	r2, [r3, #24]
 801998c:	68fb      	ldr	r3, [r7, #12]
 801998e:	699b      	ldr	r3, [r3, #24]
 8019990:	2b00      	cmp	r3, #0
 8019992:	d101      	bne.n	8019998 <rcl_wait_set_resize+0x382>
 8019994:	230a      	movs	r3, #10
 8019996:	e144      	b.n	8019c22 <rcl_wait_set_resize+0x60c>
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	6998      	ldr	r0, [r3, #24]
 801999c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80199a0:	009b      	lsls	r3, r3, #2
 80199a2:	461a      	mov	r2, r3
 80199a4:	2100      	movs	r1, #0
 80199a6:	f007 f9b3 	bl	8020d10 <memset>
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80199b0:	61da      	str	r2, [r3, #28]
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80199b6:	2200      	movs	r2, #0
 80199b8:	61da      	str	r2, [r3, #28]
 80199ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80199bc:	68fa      	ldr	r2, [r7, #12]
 80199be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80199c0:	6a10      	ldr	r0, [r2, #32]
 80199c2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80199c6:	0091      	lsls	r1, r2, #2
 80199c8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80199ca:	68fa      	ldr	r2, [r7, #12]
 80199cc:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80199ce:	462a      	mov	r2, r5
 80199d0:	4798      	blx	r3
 80199d2:	4603      	mov	r3, r0
 80199d4:	6223      	str	r3, [r4, #32]
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80199da:	6a1b      	ldr	r3, [r3, #32]
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d10d      	bne.n	80199fc <rcl_wait_set_resize+0x3e6>
 80199e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199e2:	68fa      	ldr	r2, [r7, #12]
 80199e4:	6992      	ldr	r2, [r2, #24]
 80199e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80199e8:	4610      	mov	r0, r2
 80199ea:	4798      	blx	r3
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	2200      	movs	r2, #0
 80199f0:	619a      	str	r2, [r3, #24]
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	2200      	movs	r2, #0
 80199f6:	61da      	str	r2, [r3, #28]
 80199f8:	230a      	movs	r3, #10
 80199fa:	e112      	b.n	8019c22 <rcl_wait_set_resize+0x60c>
 80199fc:	68fb      	ldr	r3, [r7, #12]
 80199fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a00:	6a18      	ldr	r0, [r3, #32]
 8019a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019a06:	009b      	lsls	r3, r3, #2
 8019a08:	461a      	mov	r2, r3
 8019a0a:	2100      	movs	r1, #0
 8019a0c:	f007 f980 	bl	8020d10 <memset>
    SET_RESIZE_RMW_DEALLOC(
      rmw_clients.clients, rmw_clients.client_count),
    SET_RESIZE_RMW_REALLOC(
      client, rmw_clients.clients, rmw_clients.client_count)
  );
  SET_RESIZE(
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a14:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8019a18:	f103 0548 	add.w	r5, r3, #72	; 0x48
 8019a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019a20:	682b      	ldr	r3, [r5, #0]
 8019a22:	6023      	str	r3, [r4, #0]
 8019a24:	68fb      	ldr	r3, [r7, #12]
 8019a26:	2200      	movs	r2, #0
 8019a28:	625a      	str	r2, [r3, #36]	; 0x24
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a2e:	2200      	movs	r2, #0
 8019a30:	625a      	str	r2, [r3, #36]	; 0x24
 8019a32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d121      	bne.n	8019a7e <rcl_wait_set_resize+0x468>
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	6a1b      	ldr	r3, [r3, #32]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d008      	beq.n	8019a54 <rcl_wait_set_resize+0x43e>
 8019a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a44:	68fa      	ldr	r2, [r7, #12]
 8019a46:	6a12      	ldr	r2, [r2, #32]
 8019a48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019a4a:	4610      	mov	r0, r2
 8019a4c:	4798      	blx	r3
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	2200      	movs	r2, #0
 8019a52:	621a      	str	r2, [r3, #32]
 8019a54:	68fb      	ldr	r3, [r7, #12]
 8019a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d05c      	beq.n	8019b18 <rcl_wait_set_resize+0x502>
 8019a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a60:	68fa      	ldr	r2, [r7, #12]
 8019a62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8019a64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8019a66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019a68:	4610      	mov	r0, r2
 8019a6a:	4798      	blx	r3
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a70:	2200      	movs	r2, #0
 8019a72:	62da      	str	r2, [r3, #44]	; 0x2c
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a78:	2200      	movs	r2, #0
 8019a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8019a7c:	e04c      	b.n	8019b18 <rcl_wait_set_resize+0x502>
 8019a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a80:	68fa      	ldr	r2, [r7, #12]
 8019a82:	6a10      	ldr	r0, [r2, #32]
 8019a84:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019a88:	0091      	lsls	r1, r2, #2
 8019a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019a8c:	4798      	blx	r3
 8019a8e:	4602      	mov	r2, r0
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	621a      	str	r2, [r3, #32]
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	6a1b      	ldr	r3, [r3, #32]
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d101      	bne.n	8019aa0 <rcl_wait_set_resize+0x48a>
 8019a9c:	230a      	movs	r3, #10
 8019a9e:	e0c0      	b.n	8019c22 <rcl_wait_set_resize+0x60c>
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	6a18      	ldr	r0, [r3, #32]
 8019aa4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019aa8:	009b      	lsls	r3, r3, #2
 8019aaa:	461a      	mov	r2, r3
 8019aac:	2100      	movs	r1, #0
 8019aae:	f007 f92f 	bl	8020d10 <memset>
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019ab8:	625a      	str	r2, [r3, #36]	; 0x24
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019abe:	2200      	movs	r2, #0
 8019ac0:	629a      	str	r2, [r3, #40]	; 0x28
 8019ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ac4:	68fa      	ldr	r2, [r7, #12]
 8019ac6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8019ac8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8019aca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019ace:	0091      	lsls	r1, r2, #2
 8019ad0:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8019ad2:	68fa      	ldr	r2, [r7, #12]
 8019ad4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8019ad6:	462a      	mov	r2, r5
 8019ad8:	4798      	blx	r3
 8019ada:	4603      	mov	r3, r0
 8019adc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d10d      	bne.n	8019b04 <rcl_wait_set_resize+0x4ee>
 8019ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019aea:	68fa      	ldr	r2, [r7, #12]
 8019aec:	6a12      	ldr	r2, [r2, #32]
 8019aee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019af0:	4610      	mov	r0, r2
 8019af2:	4798      	blx	r3
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	2200      	movs	r2, #0
 8019af8:	621a      	str	r2, [r3, #32]
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	2200      	movs	r2, #0
 8019afe:	625a      	str	r2, [r3, #36]	; 0x24
 8019b00:	230a      	movs	r3, #10
 8019b02:	e08e      	b.n	8019c22 <rcl_wait_set_resize+0x60c>
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b08:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8019b0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019b0e:	009b      	lsls	r3, r3, #2
 8019b10:	461a      	mov	r2, r3
 8019b12:	2100      	movs	r1, #0
 8019b14:	f007 f8fc 	bl	8020d10 <memset>
    SET_RESIZE_RMW_DEALLOC(
      rmw_services.services, rmw_services.service_count),
    SET_RESIZE_RMW_REALLOC(
      service, rmw_services.services, rmw_services.service_count)
  );
  SET_RESIZE(
 8019b18:	68fb      	ldr	r3, [r7, #12]
 8019b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b1c:	f107 0410 	add.w	r4, r7, #16
 8019b20:	f103 0548 	add.w	r5, r3, #72	; 0x48
 8019b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019b28:	682b      	ldr	r3, [r5, #0]
 8019b2a:	6023      	str	r3, [r4, #0]
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	2200      	movs	r2, #0
 8019b30:	62da      	str	r2, [r3, #44]	; 0x2c
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b36:	2200      	movs	r2, #0
 8019b38:	631a      	str	r2, [r3, #48]	; 0x30
 8019b3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d121      	bne.n	8019b86 <rcl_wait_set_resize+0x570>
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d008      	beq.n	8019b5c <rcl_wait_set_resize+0x546>
 8019b4a:	697b      	ldr	r3, [r7, #20]
 8019b4c:	68fa      	ldr	r2, [r7, #12]
 8019b4e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8019b50:	6a39      	ldr	r1, [r7, #32]
 8019b52:	4610      	mov	r0, r2
 8019b54:	4798      	blx	r3
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	2200      	movs	r2, #0
 8019b5a:	629a      	str	r2, [r3, #40]	; 0x28
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d05c      	beq.n	8019c20 <rcl_wait_set_resize+0x60a>
 8019b66:	697b      	ldr	r3, [r7, #20]
 8019b68:	68fa      	ldr	r2, [r7, #12]
 8019b6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8019b6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8019b6e:	6a39      	ldr	r1, [r7, #32]
 8019b70:	4610      	mov	r0, r2
 8019b72:	4798      	blx	r3
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b78:	2200      	movs	r2, #0
 8019b7a:	639a      	str	r2, [r3, #56]	; 0x38
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b80:	2200      	movs	r2, #0
 8019b82:	635a      	str	r2, [r3, #52]	; 0x34
 8019b84:	e04c      	b.n	8019c20 <rcl_wait_set_resize+0x60a>
 8019b86:	69bb      	ldr	r3, [r7, #24]
 8019b88:	68fa      	ldr	r2, [r7, #12]
 8019b8a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8019b8c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8019b90:	0091      	lsls	r1, r2, #2
 8019b92:	6a3a      	ldr	r2, [r7, #32]
 8019b94:	4798      	blx	r3
 8019b96:	4602      	mov	r2, r0
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	629a      	str	r2, [r3, #40]	; 0x28
 8019b9c:	68fb      	ldr	r3, [r7, #12]
 8019b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	d101      	bne.n	8019ba8 <rcl_wait_set_resize+0x592>
 8019ba4:	230a      	movs	r3, #10
 8019ba6:	e03c      	b.n	8019c22 <rcl_wait_set_resize+0x60c>
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8019bac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019bb0:	009b      	lsls	r3, r3, #2
 8019bb2:	461a      	mov	r2, r3
 8019bb4:	2100      	movs	r1, #0
 8019bb6:	f007 f8ab 	bl	8020d10 <memset>
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8019bc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019bc6:	2200      	movs	r2, #0
 8019bc8:	635a      	str	r2, [r3, #52]	; 0x34
 8019bca:	69bb      	ldr	r3, [r7, #24]
 8019bcc:	68fa      	ldr	r2, [r7, #12]
 8019bce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8019bd0:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8019bd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8019bd6:	0091      	lsls	r1, r2, #2
 8019bd8:	6a3d      	ldr	r5, [r7, #32]
 8019bda:	68fa      	ldr	r2, [r7, #12]
 8019bdc:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8019bde:	462a      	mov	r2, r5
 8019be0:	4798      	blx	r3
 8019be2:	4603      	mov	r3, r0
 8019be4:	63a3      	str	r3, [r4, #56]	; 0x38
 8019be6:	68fb      	ldr	r3, [r7, #12]
 8019be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d10d      	bne.n	8019c0c <rcl_wait_set_resize+0x5f6>
 8019bf0:	697b      	ldr	r3, [r7, #20]
 8019bf2:	68fa      	ldr	r2, [r7, #12]
 8019bf4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8019bf6:	6a39      	ldr	r1, [r7, #32]
 8019bf8:	4610      	mov	r0, r2
 8019bfa:	4798      	blx	r3
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	2200      	movs	r2, #0
 8019c00:	629a      	str	r2, [r3, #40]	; 0x28
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	2200      	movs	r2, #0
 8019c06:	62da      	str	r2, [r3, #44]	; 0x2c
 8019c08:	230a      	movs	r3, #10
 8019c0a:	e00a      	b.n	8019c22 <rcl_wait_set_resize+0x60c>
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019c10:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8019c12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019c16:	009b      	lsls	r3, r3, #2
 8019c18:	461a      	mov	r2, r3
 8019c1a:	2100      	movs	r1, #0
 8019c1c:	f007 f878 	bl	8020d10 <memset>
      rmw_events.events, rmw_events.event_count),
    SET_RESIZE_RMW_REALLOC(
      event, rmw_events.events, rmw_events.event_count)
  );

  return RCL_RET_OK;
 8019c20:	2300      	movs	r3, #0
}
 8019c22:	4618      	mov	r0, r3
 8019c24:	3790      	adds	r7, #144	; 0x90
 8019c26:	46bd      	mov	sp, r7
 8019c28:	bdb0      	pop	{r4, r5, r7, pc}

08019c2a <rcl_wait_set_add_guard_condition>:
rcl_ret_t
rcl_wait_set_add_guard_condition(
  rcl_wait_set_t * wait_set,
  const rcl_guard_condition_t * guard_condition,
  size_t * index)
{
 8019c2a:	b580      	push	{r7, lr}
 8019c2c:	b086      	sub	sp, #24
 8019c2e:	af00      	add	r7, sp, #0
 8019c30:	60f8      	str	r0, [r7, #12]
 8019c32:	60b9      	str	r1, [r7, #8]
 8019c34:	607a      	str	r2, [r7, #4]
  SET_ADD(guard_condition)
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d101      	bne.n	8019c40 <rcl_wait_set_add_guard_condition+0x16>
 8019c3c:	230b      	movs	r3, #11
 8019c3e:	e045      	b.n	8019ccc <rcl_wait_set_add_guard_condition+0xa2>
 8019c40:	68f8      	ldr	r0, [r7, #12]
 8019c42:	f001 fc5a 	bl	801b4fa <rcl_wait_set_is_valid>
 8019c46:	4603      	mov	r3, r0
 8019c48:	f083 0301 	eor.w	r3, r3, #1
 8019c4c:	b2db      	uxtb	r3, r3
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d002      	beq.n	8019c58 <rcl_wait_set_add_guard_condition+0x2e>
 8019c52:	f44f 7361 	mov.w	r3, #900	; 0x384
 8019c56:	e039      	b.n	8019ccc <rcl_wait_set_add_guard_condition+0xa2>
 8019c58:	68bb      	ldr	r3, [r7, #8]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d101      	bne.n	8019c62 <rcl_wait_set_add_guard_condition+0x38>
 8019c5e:	230b      	movs	r3, #11
 8019c60:	e034      	b.n	8019ccc <rcl_wait_set_add_guard_condition+0xa2>
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019c66:	68da      	ldr	r2, [r3, #12]
 8019c68:	68fb      	ldr	r3, [r7, #12]
 8019c6a:	68db      	ldr	r3, [r3, #12]
 8019c6c:	429a      	cmp	r2, r3
 8019c6e:	d302      	bcc.n	8019c76 <rcl_wait_set_add_guard_condition+0x4c>
 8019c70:	f240 3386 	movw	r3, #902	; 0x386
 8019c74:	e02a      	b.n	8019ccc <rcl_wait_set_add_guard_condition+0xa2>
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019c7a:	68d3      	ldr	r3, [r2, #12]
 8019c7c:	1c59      	adds	r1, r3, #1
 8019c7e:	60d1      	str	r1, [r2, #12]
 8019c80:	617b      	str	r3, [r7, #20]
 8019c82:	68fb      	ldr	r3, [r7, #12]
 8019c84:	689a      	ldr	r2, [r3, #8]
 8019c86:	697b      	ldr	r3, [r7, #20]
 8019c88:	009b      	lsls	r3, r3, #2
 8019c8a:	4413      	add	r3, r2
 8019c8c:	68ba      	ldr	r2, [r7, #8]
 8019c8e:	601a      	str	r2, [r3, #0]
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d002      	beq.n	8019c9c <rcl_wait_set_add_guard_condition+0x72>
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	697a      	ldr	r2, [r7, #20]
 8019c9a:	601a      	str	r2, [r3, #0]
  SET_ADD_RMW(
 8019c9c:	68b8      	ldr	r0, [r7, #8]
 8019c9e:	f7fc fa4c 	bl	801613a <rcl_guard_condition_get_rmw_handle>
 8019ca2:	6138      	str	r0, [r7, #16]
 8019ca4:	693b      	ldr	r3, [r7, #16]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d101      	bne.n	8019cae <rcl_wait_set_add_guard_condition+0x84>
 8019caa:	2301      	movs	r3, #1
 8019cac:	e00e      	b.n	8019ccc <rcl_wait_set_add_guard_condition+0xa2>
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019cb2:	695a      	ldr	r2, [r3, #20]
 8019cb4:	697b      	ldr	r3, [r7, #20]
 8019cb6:	009b      	lsls	r3, r3, #2
 8019cb8:	4413      	add	r3, r2
 8019cba:	693a      	ldr	r2, [r7, #16]
 8019cbc:	6852      	ldr	r2, [r2, #4]
 8019cbe:	601a      	str	r2, [r3, #0]
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019cc4:	691a      	ldr	r2, [r3, #16]
 8019cc6:	3201      	adds	r2, #1
 8019cc8:	611a      	str	r2, [r3, #16]
    guard_condition, rmw_guard_conditions.guard_conditions,
    rmw_guard_conditions.guard_condition_count)

  return RCL_RET_OK;
 8019cca:	2300      	movs	r3, #0
}
 8019ccc:	4618      	mov	r0, r3
 8019cce:	3718      	adds	r7, #24
 8019cd0:	46bd      	mov	sp, r7
 8019cd2:	bd80      	pop	{r7, pc}

08019cd4 <rcl_wait_set_add_timer>:
rcl_ret_t
rcl_wait_set_add_timer(
  rcl_wait_set_t * wait_set,
  const rcl_timer_t * timer,
  size_t * index)
{
 8019cd4:	b580      	push	{r7, lr}
 8019cd6:	b088      	sub	sp, #32
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	60f8      	str	r0, [r7, #12]
 8019cdc:	60b9      	str	r1, [r7, #8]
 8019cde:	607a      	str	r2, [r7, #4]
  SET_ADD(timer)
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d101      	bne.n	8019cea <rcl_wait_set_add_timer+0x16>
 8019ce6:	230b      	movs	r3, #11
 8019ce8:	e04f      	b.n	8019d8a <rcl_wait_set_add_timer+0xb6>
 8019cea:	68f8      	ldr	r0, [r7, #12]
 8019cec:	f001 fc05 	bl	801b4fa <rcl_wait_set_is_valid>
 8019cf0:	4603      	mov	r3, r0
 8019cf2:	f083 0301 	eor.w	r3, r3, #1
 8019cf6:	b2db      	uxtb	r3, r3
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d002      	beq.n	8019d02 <rcl_wait_set_add_timer+0x2e>
 8019cfc:	f44f 7361 	mov.w	r3, #900	; 0x384
 8019d00:	e043      	b.n	8019d8a <rcl_wait_set_add_timer+0xb6>
 8019d02:	68bb      	ldr	r3, [r7, #8]
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d101      	bne.n	8019d0c <rcl_wait_set_add_timer+0x38>
 8019d08:	230b      	movs	r3, #11
 8019d0a:	e03e      	b.n	8019d8a <rcl_wait_set_add_timer+0xb6>
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	695b      	ldr	r3, [r3, #20]
 8019d16:	429a      	cmp	r2, r3
 8019d18:	d302      	bcc.n	8019d20 <rcl_wait_set_add_timer+0x4c>
 8019d1a:	f240 3386 	movw	r3, #902	; 0x386
 8019d1e:	e034      	b.n	8019d8a <rcl_wait_set_add_timer+0xb6>
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019d24:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8019d26:	1c59      	adds	r1, r3, #1
 8019d28:	6411      	str	r1, [r2, #64]	; 0x40
 8019d2a:	61fb      	str	r3, [r7, #28]
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	691a      	ldr	r2, [r3, #16]
 8019d30:	69fb      	ldr	r3, [r7, #28]
 8019d32:	009b      	lsls	r3, r3, #2
 8019d34:	4413      	add	r3, r2
 8019d36:	68ba      	ldr	r2, [r7, #8]
 8019d38:	601a      	str	r2, [r3, #0]
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d002      	beq.n	8019d46 <rcl_wait_set_add_timer+0x72>
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	69fa      	ldr	r2, [r7, #28]
 8019d44:	601a      	str	r2, [r3, #0]
  // Add timer guard conditions to end of rmw guard condtion set.
  rcl_guard_condition_t * guard_condition = rcl_timer_get_guard_condition(timer);
 8019d46:	68b8      	ldr	r0, [r7, #8]
 8019d48:	f7fe ff3e 	bl	8018bc8 <rcl_timer_get_guard_condition>
 8019d4c:	61b8      	str	r0, [r7, #24]
  if (NULL != guard_condition) {
 8019d4e:	69bb      	ldr	r3, [r7, #24]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d019      	beq.n	8019d88 <rcl_wait_set_add_timer+0xb4>
    // rcl_wait() will take care of moving these backwards and setting guard_condition_count.
    const size_t index = wait_set->size_of_guard_conditions + (wait_set->impl->timer_index - 1);
 8019d54:	68fb      	ldr	r3, [r7, #12]
 8019d56:	68da      	ldr	r2, [r3, #12]
 8019d58:	68fb      	ldr	r3, [r7, #12]
 8019d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d5e:	4413      	add	r3, r2
 8019d60:	3b01      	subs	r3, #1
 8019d62:	617b      	str	r3, [r7, #20]
    rmw_guard_condition_t * rmw_handle = rcl_guard_condition_get_rmw_handle(guard_condition);
 8019d64:	69b8      	ldr	r0, [r7, #24]
 8019d66:	f7fc f9e8 	bl	801613a <rcl_guard_condition_get_rmw_handle>
 8019d6a:	6138      	str	r0, [r7, #16]
    RCL_CHECK_FOR_NULL_WITH_MSG(
 8019d6c:	693b      	ldr	r3, [r7, #16]
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d101      	bne.n	8019d76 <rcl_wait_set_add_timer+0xa2>
 8019d72:	2301      	movs	r3, #1
 8019d74:	e009      	b.n	8019d8a <rcl_wait_set_add_timer+0xb6>
      rmw_handle, rcl_get_error_string().str, return RCL_RET_ERROR);
    wait_set->impl->rmw_guard_conditions.guard_conditions[index] = rmw_handle->data;
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d7a:	695a      	ldr	r2, [r3, #20]
 8019d7c:	697b      	ldr	r3, [r7, #20]
 8019d7e:	009b      	lsls	r3, r3, #2
 8019d80:	4413      	add	r3, r2
 8019d82:	693a      	ldr	r2, [r7, #16]
 8019d84:	6852      	ldr	r2, [r2, #4]
 8019d86:	601a      	str	r2, [r3, #0]
  }
  return RCL_RET_OK;
 8019d88:	2300      	movs	r3, #0
}
 8019d8a:	4618      	mov	r0, r3
 8019d8c:	3720      	adds	r7, #32
 8019d8e:	46bd      	mov	sp, r7
 8019d90:	bd80      	pop	{r7, pc}

08019d92 <rcl_wait_set_add_client>:
rcl_ret_t
rcl_wait_set_add_client(
  rcl_wait_set_t * wait_set,
  const rcl_client_t * client,
  size_t * index)
{
 8019d92:	b580      	push	{r7, lr}
 8019d94:	b086      	sub	sp, #24
 8019d96:	af00      	add	r7, sp, #0
 8019d98:	60f8      	str	r0, [r7, #12]
 8019d9a:	60b9      	str	r1, [r7, #8]
 8019d9c:	607a      	str	r2, [r7, #4]
  SET_ADD(client)
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d101      	bne.n	8019da8 <rcl_wait_set_add_client+0x16>
 8019da4:	230b      	movs	r3, #11
 8019da6:	e045      	b.n	8019e34 <rcl_wait_set_add_client+0xa2>
 8019da8:	68f8      	ldr	r0, [r7, #12]
 8019daa:	f001 fba6 	bl	801b4fa <rcl_wait_set_is_valid>
 8019dae:	4603      	mov	r3, r0
 8019db0:	f083 0301 	eor.w	r3, r3, #1
 8019db4:	b2db      	uxtb	r3, r3
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d002      	beq.n	8019dc0 <rcl_wait_set_add_client+0x2e>
 8019dba:	f44f 7361 	mov.w	r3, #900	; 0x384
 8019dbe:	e039      	b.n	8019e34 <rcl_wait_set_add_client+0xa2>
 8019dc0:	68bb      	ldr	r3, [r7, #8]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d101      	bne.n	8019dca <rcl_wait_set_add_client+0x38>
 8019dc6:	230b      	movs	r3, #11
 8019dc8:	e034      	b.n	8019e34 <rcl_wait_set_add_client+0xa2>
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019dce:	699a      	ldr	r2, [r3, #24]
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	69db      	ldr	r3, [r3, #28]
 8019dd4:	429a      	cmp	r2, r3
 8019dd6:	d302      	bcc.n	8019dde <rcl_wait_set_add_client+0x4c>
 8019dd8:	f240 3386 	movw	r3, #902	; 0x386
 8019ddc:	e02a      	b.n	8019e34 <rcl_wait_set_add_client+0xa2>
 8019dde:	68fb      	ldr	r3, [r7, #12]
 8019de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019de2:	6993      	ldr	r3, [r2, #24]
 8019de4:	1c59      	adds	r1, r3, #1
 8019de6:	6191      	str	r1, [r2, #24]
 8019de8:	617b      	str	r3, [r7, #20]
 8019dea:	68fb      	ldr	r3, [r7, #12]
 8019dec:	699a      	ldr	r2, [r3, #24]
 8019dee:	697b      	ldr	r3, [r7, #20]
 8019df0:	009b      	lsls	r3, r3, #2
 8019df2:	4413      	add	r3, r2
 8019df4:	68ba      	ldr	r2, [r7, #8]
 8019df6:	601a      	str	r2, [r3, #0]
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d002      	beq.n	8019e04 <rcl_wait_set_add_client+0x72>
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	697a      	ldr	r2, [r7, #20]
 8019e02:	601a      	str	r2, [r3, #0]
  SET_ADD_RMW(client, rmw_clients.clients, rmw_clients.client_count)
 8019e04:	68b8      	ldr	r0, [r7, #8]
 8019e06:	f7fb fc3b 	bl	8015680 <rcl_client_get_rmw_handle>
 8019e0a:	6138      	str	r0, [r7, #16]
 8019e0c:	693b      	ldr	r3, [r7, #16]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d101      	bne.n	8019e16 <rcl_wait_set_add_client+0x84>
 8019e12:	2301      	movs	r3, #1
 8019e14:	e00e      	b.n	8019e34 <rcl_wait_set_add_client+0xa2>
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e1a:	6a1a      	ldr	r2, [r3, #32]
 8019e1c:	697b      	ldr	r3, [r7, #20]
 8019e1e:	009b      	lsls	r3, r3, #2
 8019e20:	4413      	add	r3, r2
 8019e22:	693a      	ldr	r2, [r7, #16]
 8019e24:	6852      	ldr	r2, [r2, #4]
 8019e26:	601a      	str	r2, [r3, #0]
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e2c:	69da      	ldr	r2, [r3, #28]
 8019e2e:	3201      	adds	r2, #1
 8019e30:	61da      	str	r2, [r3, #28]
  return RCL_RET_OK;
 8019e32:	2300      	movs	r3, #0
}
 8019e34:	4618      	mov	r0, r3
 8019e36:	3718      	adds	r7, #24
 8019e38:	46bd      	mov	sp, r7
 8019e3a:	bd80      	pop	{r7, pc}

08019e3c <rcl_wait_set_add_service>:
rcl_ret_t
rcl_wait_set_add_service(
  rcl_wait_set_t * wait_set,
  const rcl_service_t * service,
  size_t * index)
{
 8019e3c:	b580      	push	{r7, lr}
 8019e3e:	b086      	sub	sp, #24
 8019e40:	af00      	add	r7, sp, #0
 8019e42:	60f8      	str	r0, [r7, #12]
 8019e44:	60b9      	str	r1, [r7, #8]
 8019e46:	607a      	str	r2, [r7, #4]
  SET_ADD(service)
 8019e48:	68fb      	ldr	r3, [r7, #12]
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d101      	bne.n	8019e52 <rcl_wait_set_add_service+0x16>
 8019e4e:	230b      	movs	r3, #11
 8019e50:	e045      	b.n	8019ede <rcl_wait_set_add_service+0xa2>
 8019e52:	68f8      	ldr	r0, [r7, #12]
 8019e54:	f001 fb51 	bl	801b4fa <rcl_wait_set_is_valid>
 8019e58:	4603      	mov	r3, r0
 8019e5a:	f083 0301 	eor.w	r3, r3, #1
 8019e5e:	b2db      	uxtb	r3, r3
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d002      	beq.n	8019e6a <rcl_wait_set_add_service+0x2e>
 8019e64:	f44f 7361 	mov.w	r3, #900	; 0x384
 8019e68:	e039      	b.n	8019ede <rcl_wait_set_add_service+0xa2>
 8019e6a:	68bb      	ldr	r3, [r7, #8]
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d101      	bne.n	8019e74 <rcl_wait_set_add_service+0x38>
 8019e70:	230b      	movs	r3, #11
 8019e72:	e034      	b.n	8019ede <rcl_wait_set_add_service+0xa2>
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e7e:	429a      	cmp	r2, r3
 8019e80:	d302      	bcc.n	8019e88 <rcl_wait_set_add_service+0x4c>
 8019e82:	f240 3386 	movw	r3, #902	; 0x386
 8019e86:	e02a      	b.n	8019ede <rcl_wait_set_add_service+0xa2>
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019e8c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8019e8e:	1c59      	adds	r1, r3, #1
 8019e90:	6251      	str	r1, [r2, #36]	; 0x24
 8019e92:	617b      	str	r3, [r7, #20]
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	6a1a      	ldr	r2, [r3, #32]
 8019e98:	697b      	ldr	r3, [r7, #20]
 8019e9a:	009b      	lsls	r3, r3, #2
 8019e9c:	4413      	add	r3, r2
 8019e9e:	68ba      	ldr	r2, [r7, #8]
 8019ea0:	601a      	str	r2, [r3, #0]
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d002      	beq.n	8019eae <rcl_wait_set_add_service+0x72>
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	697a      	ldr	r2, [r7, #20]
 8019eac:	601a      	str	r2, [r3, #0]
  SET_ADD_RMW(service, rmw_services.services, rmw_services.service_count)
 8019eae:	68b8      	ldr	r0, [r7, #8]
 8019eb0:	f7fd fd23 	bl	80178fa <rcl_service_get_rmw_handle>
 8019eb4:	6138      	str	r0, [r7, #16]
 8019eb6:	693b      	ldr	r3, [r7, #16]
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d101      	bne.n	8019ec0 <rcl_wait_set_add_service+0x84>
 8019ebc:	2301      	movs	r3, #1
 8019ebe:	e00e      	b.n	8019ede <rcl_wait_set_add_service+0xa2>
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ec6:	697b      	ldr	r3, [r7, #20]
 8019ec8:	009b      	lsls	r3, r3, #2
 8019eca:	4413      	add	r3, r2
 8019ecc:	693a      	ldr	r2, [r7, #16]
 8019ece:	6852      	ldr	r2, [r2, #4]
 8019ed0:	601a      	str	r2, [r3, #0]
 8019ed2:	68fb      	ldr	r3, [r7, #12]
 8019ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ed6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019ed8:	3201      	adds	r2, #1
 8019eda:	629a      	str	r2, [r3, #40]	; 0x28
  return RCL_RET_OK;
 8019edc:	2300      	movs	r3, #0
}
 8019ede:	4618      	mov	r0, r3
 8019ee0:	3718      	adds	r7, #24
 8019ee2:	46bd      	mov	sp, r7
 8019ee4:	bd80      	pop	{r7, pc}
	...

08019ee8 <rcl_wait>:
  return RCL_RET_OK;
}

rcl_ret_t
rcl_wait(rcl_wait_set_t * wait_set, int64_t timeout)
{
 8019ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019eec:	b0a1      	sub	sp, #132	; 0x84
 8019eee:	af04      	add	r7, sp, #16
 8019ef0:	60f8      	str	r0, [r7, #12]
 8019ef2:	e9c7 2300 	strd	r2, r3, [r7]
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d101      	bne.n	8019f00 <rcl_wait+0x18>
 8019efc:	230b      	movs	r3, #11
 8019efe:	e238      	b.n	801a372 <rcl_wait+0x48a>
  if (!rcl_wait_set_is_valid(wait_set)) {
 8019f00:	68f8      	ldr	r0, [r7, #12]
 8019f02:	f001 fafa 	bl	801b4fa <rcl_wait_set_is_valid>
 8019f06:	4603      	mov	r3, r0
 8019f08:	f083 0301 	eor.w	r3, r3, #1
 8019f0c:	b2db      	uxtb	r3, r3
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d002      	beq.n	8019f18 <rcl_wait+0x30>
    RCL_SET_ERROR_MSG("wait set is invalid");
    return RCL_RET_WAIT_SET_INVALID;
 8019f12:	f44f 7361 	mov.w	r3, #900	; 0x384
 8019f16:	e22c      	b.n	801a372 <rcl_wait+0x48a>
  }
  if (
    wait_set->size_of_subscriptions == 0 &&
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	685b      	ldr	r3, [r3, #4]
  if (
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d116      	bne.n	8019f4e <rcl_wait+0x66>
    wait_set->size_of_guard_conditions == 0 &&
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	68db      	ldr	r3, [r3, #12]
    wait_set->size_of_subscriptions == 0 &&
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d112      	bne.n	8019f4e <rcl_wait+0x66>
    wait_set->size_of_timers == 0 &&
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	695b      	ldr	r3, [r3, #20]
    wait_set->size_of_guard_conditions == 0 &&
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d10e      	bne.n	8019f4e <rcl_wait+0x66>
    wait_set->size_of_clients == 0 &&
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	69db      	ldr	r3, [r3, #28]
    wait_set->size_of_timers == 0 &&
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d10a      	bne.n	8019f4e <rcl_wait+0x66>
    wait_set->size_of_services == 0 &&
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    wait_set->size_of_clients == 0 &&
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d106      	bne.n	8019f4e <rcl_wait+0x66>
    wait_set->size_of_events == 0)
 8019f40:	68fb      	ldr	r3, [r7, #12]
 8019f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    wait_set->size_of_services == 0 &&
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d102      	bne.n	8019f4e <rcl_wait+0x66>
  {
    RCL_SET_ERROR_MSG("wait set is empty");
    return RCL_RET_WAIT_SET_EMPTY;
 8019f48:	f240 3385 	movw	r3, #901	; 0x385
 8019f4c:	e211      	b.n	801a372 <rcl_wait+0x48a>
  }
  // Calculate the timeout argument.
  // By default, set the timer to block indefinitely if none of the below conditions are met.
  rmw_time_t * timeout_argument = NULL;
 8019f4e:	2300      	movs	r3, #0
 8019f50:	66fb      	str	r3, [r7, #108]	; 0x6c
  rmw_time_t temporary_timeout_storage;

  bool is_timer_timeout = false;
 8019f52:	2300      	movs	r3, #0
 8019f54:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  int64_t min_timeout = timeout > 0 ? timeout : INT64_MAX;
 8019f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019f5c:	2a01      	cmp	r2, #1
 8019f5e:	f173 0300 	sbcs.w	r3, r3, #0
 8019f62:	db02      	blt.n	8019f6a <rcl_wait+0x82>
 8019f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019f68:	e003      	b.n	8019f72 <rcl_wait+0x8a>
 8019f6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019f6e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019f72:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  {  // scope to prevent i from colliding below
    uint64_t i = 0;
 8019f76:	f04f 0200 	mov.w	r2, #0
 8019f7a:	f04f 0300 	mov.w	r3, #0
 8019f7e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    for (i = 0; i < wait_set->impl->timer_index; ++i) {
 8019f82:	f04f 0200 	mov.w	r2, #0
 8019f86:	f04f 0300 	mov.w	r3, #0
 8019f8a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8019f8e:	e07c      	b.n	801a08a <rcl_wait+0x1a2>
      if (!wait_set->timers[i]) {
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	691a      	ldr	r2, [r3, #16]
 8019f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019f96:	009b      	lsls	r3, r3, #2
 8019f98:	4413      	add	r3, r2
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d06b      	beq.n	801a078 <rcl_wait+0x190>
        continue;  // Skip NULL timers.
      }
      rmw_guard_conditions_t * rmw_gcs = &(wait_set->impl->rmw_guard_conditions);
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019fa4:	3310      	adds	r3, #16
 8019fa6:	643b      	str	r3, [r7, #64]	; 0x40
      size_t gc_idx = wait_set->size_of_guard_conditions + i;
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	68da      	ldr	r2, [r3, #12]
 8019fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019fae:	4413      	add	r3, r2
 8019fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
      if (NULL != rmw_gcs->guard_conditions[gc_idx]) {
 8019fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019fb4:	685a      	ldr	r2, [r3, #4]
 8019fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019fb8:	009b      	lsls	r3, r3, #2
 8019fba:	4413      	add	r3, r2
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d011      	beq.n	8019fe6 <rcl_wait+0xfe>
        // This timer has a guard condition, so move it to make a legal wait set.
        rmw_gcs->guard_conditions[rmw_gcs->guard_condition_count] =
          rmw_gcs->guard_conditions[gc_idx];
 8019fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019fc4:	685a      	ldr	r2, [r3, #4]
 8019fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019fc8:	009b      	lsls	r3, r3, #2
 8019fca:	441a      	add	r2, r3
        rmw_gcs->guard_conditions[rmw_gcs->guard_condition_count] =
 8019fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019fce:	6859      	ldr	r1, [r3, #4]
 8019fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	009b      	lsls	r3, r3, #2
 8019fd6:	440b      	add	r3, r1
          rmw_gcs->guard_conditions[gc_idx];
 8019fd8:	6812      	ldr	r2, [r2, #0]
        rmw_gcs->guard_conditions[rmw_gcs->guard_condition_count] =
 8019fda:	601a      	str	r2, [r3, #0]
        ++(rmw_gcs->guard_condition_count);
 8019fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019fde:	681b      	ldr	r3, [r3, #0]
 8019fe0:	1c5a      	adds	r2, r3, #1
 8019fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019fe4:	601a      	str	r2, [r3, #0]
      }
      bool is_canceled = false;
 8019fe6:	2300      	movs	r3, #0
 8019fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      rcl_ret_t ret = rcl_timer_is_canceled(wait_set->timers[i], &is_canceled);
 8019fec:	68fb      	ldr	r3, [r7, #12]
 8019fee:	691a      	ldr	r2, [r3, #16]
 8019ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019ff2:	009b      	lsls	r3, r3, #2
 8019ff4:	4413      	add	r3, r2
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8019ffc:	4611      	mov	r1, r2
 8019ffe:	4618      	mov	r0, r3
 801a000:	f7fe fdc4 	bl	8018b8c <rcl_timer_is_canceled>
 801a004:	63b8      	str	r0, [r7, #56]	; 0x38
      if (ret != RCL_RET_OK) {
 801a006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d001      	beq.n	801a010 <rcl_wait+0x128>
        return ret;  // The rcl error state should already be set.
 801a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a00e:	e1b0      	b.n	801a372 <rcl_wait+0x48a>
      }
      if (is_canceled) {
 801a010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a014:	2b00      	cmp	r3, #0
 801a016:	d007      	beq.n	801a028 <rcl_wait+0x140>
        wait_set->timers[i] = NULL;
 801a018:	68fb      	ldr	r3, [r7, #12]
 801a01a:	691a      	ldr	r2, [r3, #16]
 801a01c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a01e:	009b      	lsls	r3, r3, #2
 801a020:	4413      	add	r3, r2
 801a022:	2200      	movs	r2, #0
 801a024:	601a      	str	r2, [r3, #0]
        continue;
 801a026:	e028      	b.n	801a07a <rcl_wait+0x192>
      }
      // use timer time to to set the rmw_wait timeout
      // TODO(sloretz) fix spurious wake-ups on ROS_TIME timers with ROS_TIME enabled
      int64_t timer_timeout = INT64_MAX;
 801a028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a02c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a030:	e9c7 2306 	strd	r2, r3, [r7, #24]
      ret = rcl_timer_get_time_until_next_call(wait_set->timers[i], &timer_timeout);
 801a034:	68fb      	ldr	r3, [r7, #12]
 801a036:	691a      	ldr	r2, [r3, #16]
 801a038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a03a:	009b      	lsls	r3, r3, #2
 801a03c:	4413      	add	r3, r2
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	f107 0218 	add.w	r2, r7, #24
 801a044:	4611      	mov	r1, r2
 801a046:	4618      	mov	r0, r3
 801a048:	f7fe fd6f 	bl	8018b2a <rcl_timer_get_time_until_next_call>
 801a04c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (ret != RCL_RET_OK) {
 801a04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a050:	2b00      	cmp	r3, #0
 801a052:	d001      	beq.n	801a058 <rcl_wait+0x170>
        return ret;  // The rcl error state should already be set.
 801a054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a056:	e18c      	b.n	801a372 <rcl_wait+0x48a>
      }
      if (timer_timeout < min_timeout) {
 801a058:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801a05c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801a060:	4290      	cmp	r0, r2
 801a062:	eb71 0303 	sbcs.w	r3, r1, r3
 801a066:	da08      	bge.n	801a07a <rcl_wait+0x192>
        is_timer_timeout = true;
 801a068:	2301      	movs	r3, #1
 801a06a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        min_timeout = timer_timeout;
 801a06e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a072:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 801a076:	e000      	b.n	801a07a <rcl_wait+0x192>
        continue;  // Skip NULL timers.
 801a078:	bf00      	nop
    for (i = 0; i < wait_set->impl->timer_index; ++i) {
 801a07a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801a07e:	f112 0801 	adds.w	r8, r2, #1
 801a082:	f143 0900 	adc.w	r9, r3, #0
 801a086:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
 801a08a:	68fb      	ldr	r3, [r7, #12]
 801a08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a090:	2200      	movs	r2, #0
 801a092:	461c      	mov	r4, r3
 801a094:	4615      	mov	r5, r2
 801a096:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801a09a:	42a2      	cmp	r2, r4
 801a09c:	41ab      	sbcs	r3, r5
 801a09e:	f4ff af77 	bcc.w	8019f90 <rcl_wait+0xa8>
      }
    }
  }

  if (timeout == 0) {
 801a0a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a0a6:	4313      	orrs	r3, r2
 801a0a8:	d10f      	bne.n	801a0ca <rcl_wait+0x1e2>
    // Then it is non-blocking, so set the temporary storage to 0, 0 and pass it.
    temporary_timeout_storage.sec = 0;
 801a0aa:	f04f 0200 	mov.w	r2, #0
 801a0ae:	f04f 0300 	mov.w	r3, #0
 801a0b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    temporary_timeout_storage.nsec = 0;
 801a0b6:	f04f 0200 	mov.w	r2, #0
 801a0ba:	f04f 0300 	mov.w	r3, #0
 801a0be:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    timeout_argument = &temporary_timeout_storage;
 801a0c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a0c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 801a0c8:	e02a      	b.n	801a120 <rcl_wait+0x238>
  } else if (timeout > 0 || is_timer_timeout) {
 801a0ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a0ce:	2a01      	cmp	r2, #1
 801a0d0:	f173 0300 	sbcs.w	r3, r3, #0
 801a0d4:	da03      	bge.n	801a0de <rcl_wait+0x1f6>
 801a0d6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d020      	beq.n	801a120 <rcl_wait+0x238>
    // If min_timeout was negative, we need to wake up immediately.
    if (min_timeout < 0) {
 801a0de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	da05      	bge.n	801a0f2 <rcl_wait+0x20a>
      min_timeout = 0;
 801a0e6:	f04f 0200 	mov.w	r2, #0
 801a0ea:	f04f 0300 	mov.w	r3, #0
 801a0ee:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    }
    temporary_timeout_storage.sec = RCL_NS_TO_S(min_timeout);
 801a0f2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801a0f6:	a3a2      	add	r3, pc, #648	; (adr r3, 801a380 <rcl_wait+0x498>)
 801a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0fc:	f7e6 fdf4 	bl	8000ce8 <__aeabi_ldivmod>
 801a100:	4602      	mov	r2, r0
 801a102:	460b      	mov	r3, r1
 801a104:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    temporary_timeout_storage.nsec = min_timeout % 1000000000;
 801a108:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801a10c:	a39c      	add	r3, pc, #624	; (adr r3, 801a380 <rcl_wait+0x498>)
 801a10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a112:	f7e6 fde9 	bl	8000ce8 <__aeabi_ldivmod>
 801a116:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    timeout_argument = &temporary_timeout_storage;
 801a11a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a11e:	66fb      	str	r3, [r7, #108]	; 0x6c
    ROS_PACKAGE_NAME, "Timeout calculated based on next scheduled timer: %s",
    is_timer_timeout ? "true" : "false");

  // Wait.
  rmw_ret_t ret = rmw_wait(
    &wait_set->impl->rmw_subscriptions,
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  rmw_ret_t ret = rmw_wait(
 801a124:	1d18      	adds	r0, r3, #4
    &wait_set->impl->rmw_guard_conditions,
 801a126:	68fb      	ldr	r3, [r7, #12]
 801a128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  rmw_ret_t ret = rmw_wait(
 801a12a:	f103 0410 	add.w	r4, r3, #16
    &wait_set->impl->rmw_services,
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  rmw_ret_t ret = rmw_wait(
 801a132:	f103 0528 	add.w	r5, r3, #40	; 0x28
    &wait_set->impl->rmw_clients,
 801a136:	68fb      	ldr	r3, [r7, #12]
 801a138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  rmw_ret_t ret = rmw_wait(
 801a13a:	f103 061c 	add.w	r6, r3, #28
    &wait_set->impl->rmw_events,
 801a13e:	68fb      	ldr	r3, [r7, #12]
 801a140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  rmw_ret_t ret = rmw_wait(
 801a142:	3334      	adds	r3, #52	; 0x34
    wait_set->impl->rmw_wait_set,
 801a144:	68fa      	ldr	r2, [r7, #12]
 801a146:	6b12      	ldr	r2, [r2, #48]	; 0x30
  rmw_ret_t ret = rmw_wait(
 801a148:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801a14a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801a14c:	9102      	str	r1, [sp, #8]
 801a14e:	9201      	str	r2, [sp, #4]
 801a150:	9300      	str	r3, [sp, #0]
 801a152:	4633      	mov	r3, r6
 801a154:	462a      	mov	r2, r5
 801a156:	4621      	mov	r1, r4
 801a158:	f005 f900 	bl	801f35c <rmw_wait>
 801a15c:	6538      	str	r0, [r7, #80]	; 0x50
  // We now update our handles accordingly.

  // Check for ready timers
  // and set not ready timers (which includes canceled timers) to NULL.
  size_t i;
  for (i = 0; i < wait_set->impl->timer_index; ++i) {
 801a15e:	2300      	movs	r3, #0
 801a160:	657b      	str	r3, [r7, #84]	; 0x54
 801a162:	e02d      	b.n	801a1c0 <rcl_wait+0x2d8>
    if (!wait_set->timers[i]) {
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	691a      	ldr	r2, [r3, #16]
 801a168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a16a:	009b      	lsls	r3, r3, #2
 801a16c:	4413      	add	r3, r2
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d021      	beq.n	801a1b8 <rcl_wait+0x2d0>
      continue;
    }
    bool is_ready = false;
 801a174:	2300      	movs	r3, #0
 801a176:	75fb      	strb	r3, [r7, #23]
    rcl_ret_t ret = rcl_timer_is_ready(wait_set->timers[i], &is_ready);
 801a178:	68fb      	ldr	r3, [r7, #12]
 801a17a:	691a      	ldr	r2, [r3, #16]
 801a17c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a17e:	009b      	lsls	r3, r3, #2
 801a180:	4413      	add	r3, r2
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	f107 0217 	add.w	r2, r7, #23
 801a188:	4611      	mov	r1, r2
 801a18a:	4618      	mov	r0, r3
 801a18c:	f7fe fc93 	bl	8018ab6 <rcl_timer_is_ready>
 801a190:	6478      	str	r0, [r7, #68]	; 0x44
    if (ret != RCL_RET_OK) {
 801a192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a194:	2b00      	cmp	r3, #0
 801a196:	d001      	beq.n	801a19c <rcl_wait+0x2b4>
      return ret;  // The rcl error state should already be set.
 801a198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a19a:	e0ea      	b.n	801a372 <rcl_wait+0x48a>
    }
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(is_ready, ROS_PACKAGE_NAME, "Timer in wait set is ready");
    if (!is_ready) {
 801a19c:	7dfb      	ldrb	r3, [r7, #23]
 801a19e:	f083 0301 	eor.w	r3, r3, #1
 801a1a2:	b2db      	uxtb	r3, r3
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d008      	beq.n	801a1ba <rcl_wait+0x2d2>
      wait_set->timers[i] = NULL;
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	691a      	ldr	r2, [r3, #16]
 801a1ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1ae:	009b      	lsls	r3, r3, #2
 801a1b0:	4413      	add	r3, r2
 801a1b2:	2200      	movs	r2, #0
 801a1b4:	601a      	str	r2, [r3, #0]
 801a1b6:	e000      	b.n	801a1ba <rcl_wait+0x2d2>
      continue;
 801a1b8:	bf00      	nop
  for (i = 0; i < wait_set->impl->timer_index; ++i) {
 801a1ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1bc:	3301      	adds	r3, #1
 801a1be:	657b      	str	r3, [r7, #84]	; 0x54
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a1c8:	429a      	cmp	r2, r3
 801a1ca:	d3cb      	bcc.n	801a164 <rcl_wait+0x27c>
    }
  }
  // Check for timeout, return RCL_RET_TIMEOUT only if it wasn't a timer.
  if (ret != RMW_RET_OK && ret != RMW_RET_TIMEOUT) {
 801a1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d004      	beq.n	801a1dc <rcl_wait+0x2f4>
 801a1d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1d4:	2b02      	cmp	r3, #2
 801a1d6:	d001      	beq.n	801a1dc <rcl_wait+0x2f4>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    return RCL_RET_ERROR;
 801a1d8:	2301      	movs	r3, #1
 801a1da:	e0ca      	b.n	801a372 <rcl_wait+0x48a>
  }
  // Set corresponding rcl subscription handles NULL.
  for (i = 0; i < wait_set->size_of_subscriptions; ++i) {
 801a1dc:	2300      	movs	r3, #0
 801a1de:	657b      	str	r3, [r7, #84]	; 0x54
 801a1e0:	e01d      	b.n	801a21e <rcl_wait+0x336>
    bool is_ready = wait_set->impl->rmw_subscriptions.subscribers[i] != NULL;
 801a1e2:	68fb      	ldr	r3, [r7, #12]
 801a1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1e6:	689a      	ldr	r2, [r3, #8]
 801a1e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1ea:	009b      	lsls	r3, r3, #2
 801a1ec:	4413      	add	r3, r2
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	bf14      	ite	ne
 801a1f4:	2301      	movne	r3, #1
 801a1f6:	2300      	moveq	r3, #0
 801a1f8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(
      is_ready, ROS_PACKAGE_NAME, "Subscription in wait set is ready");
    if (!is_ready) {
 801a1fc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801a200:	f083 0301 	eor.w	r3, r3, #1
 801a204:	b2db      	uxtb	r3, r3
 801a206:	2b00      	cmp	r3, #0
 801a208:	d006      	beq.n	801a218 <rcl_wait+0x330>
      wait_set->subscriptions[i] = NULL;
 801a20a:	68fb      	ldr	r3, [r7, #12]
 801a20c:	681a      	ldr	r2, [r3, #0]
 801a20e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a210:	009b      	lsls	r3, r3, #2
 801a212:	4413      	add	r3, r2
 801a214:	2200      	movs	r2, #0
 801a216:	601a      	str	r2, [r3, #0]
  for (i = 0; i < wait_set->size_of_subscriptions; ++i) {
 801a218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a21a:	3301      	adds	r3, #1
 801a21c:	657b      	str	r3, [r7, #84]	; 0x54
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	685b      	ldr	r3, [r3, #4]
 801a222:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a224:	429a      	cmp	r2, r3
 801a226:	d3dc      	bcc.n	801a1e2 <rcl_wait+0x2fa>
    }
  }
  // Set corresponding rcl guard_condition handles NULL.
  for (i = 0; i < wait_set->size_of_guard_conditions; ++i) {
 801a228:	2300      	movs	r3, #0
 801a22a:	657b      	str	r3, [r7, #84]	; 0x54
 801a22c:	e01d      	b.n	801a26a <rcl_wait+0x382>
    bool is_ready = wait_set->impl->rmw_guard_conditions.guard_conditions[i] != NULL;
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a232:	695a      	ldr	r2, [r3, #20]
 801a234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a236:	009b      	lsls	r3, r3, #2
 801a238:	4413      	add	r3, r2
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	bf14      	ite	ne
 801a240:	2301      	movne	r3, #1
 801a242:	2300      	moveq	r3, #0
 801a244:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(
      is_ready, ROS_PACKAGE_NAME, "Guard condition in wait set is ready");
    if (!is_ready) {
 801a248:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801a24c:	f083 0301 	eor.w	r3, r3, #1
 801a250:	b2db      	uxtb	r3, r3
 801a252:	2b00      	cmp	r3, #0
 801a254:	d006      	beq.n	801a264 <rcl_wait+0x37c>
      wait_set->guard_conditions[i] = NULL;
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	689a      	ldr	r2, [r3, #8]
 801a25a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a25c:	009b      	lsls	r3, r3, #2
 801a25e:	4413      	add	r3, r2
 801a260:	2200      	movs	r2, #0
 801a262:	601a      	str	r2, [r3, #0]
  for (i = 0; i < wait_set->size_of_guard_conditions; ++i) {
 801a264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a266:	3301      	adds	r3, #1
 801a268:	657b      	str	r3, [r7, #84]	; 0x54
 801a26a:	68fb      	ldr	r3, [r7, #12]
 801a26c:	68db      	ldr	r3, [r3, #12]
 801a26e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a270:	429a      	cmp	r2, r3
 801a272:	d3dc      	bcc.n	801a22e <rcl_wait+0x346>
    }
  }
  // Set corresponding rcl client handles NULL.
  for (i = 0; i < wait_set->size_of_clients; ++i) {
 801a274:	2300      	movs	r3, #0
 801a276:	657b      	str	r3, [r7, #84]	; 0x54
 801a278:	e01d      	b.n	801a2b6 <rcl_wait+0x3ce>
    bool is_ready = wait_set->impl->rmw_clients.clients[i] != NULL;
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a27e:	6a1a      	ldr	r2, [r3, #32]
 801a280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a282:	009b      	lsls	r3, r3, #2
 801a284:	4413      	add	r3, r2
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	2b00      	cmp	r3, #0
 801a28a:	bf14      	ite	ne
 801a28c:	2301      	movne	r3, #1
 801a28e:	2300      	moveq	r3, #0
 801a290:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(is_ready, ROS_PACKAGE_NAME, "Client in wait set is ready");
    if (!is_ready) {
 801a294:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 801a298:	f083 0301 	eor.w	r3, r3, #1
 801a29c:	b2db      	uxtb	r3, r3
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d006      	beq.n	801a2b0 <rcl_wait+0x3c8>
      wait_set->clients[i] = NULL;
 801a2a2:	68fb      	ldr	r3, [r7, #12]
 801a2a4:	699a      	ldr	r2, [r3, #24]
 801a2a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2a8:	009b      	lsls	r3, r3, #2
 801a2aa:	4413      	add	r3, r2
 801a2ac:	2200      	movs	r2, #0
 801a2ae:	601a      	str	r2, [r3, #0]
  for (i = 0; i < wait_set->size_of_clients; ++i) {
 801a2b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2b2:	3301      	adds	r3, #1
 801a2b4:	657b      	str	r3, [r7, #84]	; 0x54
 801a2b6:	68fb      	ldr	r3, [r7, #12]
 801a2b8:	69db      	ldr	r3, [r3, #28]
 801a2ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a2bc:	429a      	cmp	r2, r3
 801a2be:	d3dc      	bcc.n	801a27a <rcl_wait+0x392>
    }
  }
  // Set corresponding rcl service handles NULL.
  for (i = 0; i < wait_set->size_of_services; ++i) {
 801a2c0:	2300      	movs	r3, #0
 801a2c2:	657b      	str	r3, [r7, #84]	; 0x54
 801a2c4:	e01d      	b.n	801a302 <rcl_wait+0x41a>
    bool is_ready = wait_set->impl->rmw_services.services[i] != NULL;
 801a2c6:	68fb      	ldr	r3, [r7, #12]
 801a2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a2ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2ce:	009b      	lsls	r3, r3, #2
 801a2d0:	4413      	add	r3, r2
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	bf14      	ite	ne
 801a2d8:	2301      	movne	r3, #1
 801a2da:	2300      	moveq	r3, #0
 801a2dc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(is_ready, ROS_PACKAGE_NAME, "Service in wait set is ready");
    if (!is_ready) {
 801a2e0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 801a2e4:	f083 0301 	eor.w	r3, r3, #1
 801a2e8:	b2db      	uxtb	r3, r3
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d006      	beq.n	801a2fc <rcl_wait+0x414>
      wait_set->services[i] = NULL;
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	6a1a      	ldr	r2, [r3, #32]
 801a2f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2f4:	009b      	lsls	r3, r3, #2
 801a2f6:	4413      	add	r3, r2
 801a2f8:	2200      	movs	r2, #0
 801a2fa:	601a      	str	r2, [r3, #0]
  for (i = 0; i < wait_set->size_of_services; ++i) {
 801a2fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2fe:	3301      	adds	r3, #1
 801a300:	657b      	str	r3, [r7, #84]	; 0x54
 801a302:	68fb      	ldr	r3, [r7, #12]
 801a304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a306:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a308:	429a      	cmp	r2, r3
 801a30a:	d3dc      	bcc.n	801a2c6 <rcl_wait+0x3de>
    }
  }
  // Set corresponding rcl event handles NULL.
  for (i = 0; i < wait_set->size_of_events; ++i) {
 801a30c:	2300      	movs	r3, #0
 801a30e:	657b      	str	r3, [r7, #84]	; 0x54
 801a310:	e01d      	b.n	801a34e <rcl_wait+0x466>
    bool is_ready = wait_set->impl->rmw_events.events[i] != NULL;
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a31a:	009b      	lsls	r3, r3, #2
 801a31c:	4413      	add	r3, r2
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	2b00      	cmp	r3, #0
 801a322:	bf14      	ite	ne
 801a324:	2301      	movne	r3, #1
 801a326:	2300      	moveq	r3, #0
 801a328:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(is_ready, ROS_PACKAGE_NAME, "Event in wait set is ready");
    if (!is_ready) {
 801a32c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a330:	f083 0301 	eor.w	r3, r3, #1
 801a334:	b2db      	uxtb	r3, r3
 801a336:	2b00      	cmp	r3, #0
 801a338:	d006      	beq.n	801a348 <rcl_wait+0x460>
      wait_set->events[i] = NULL;
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a33e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a340:	009b      	lsls	r3, r3, #2
 801a342:	4413      	add	r3, r2
 801a344:	2200      	movs	r2, #0
 801a346:	601a      	str	r2, [r3, #0]
  for (i = 0; i < wait_set->size_of_events; ++i) {
 801a348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a34a:	3301      	adds	r3, #1
 801a34c:	657b      	str	r3, [r7, #84]	; 0x54
 801a34e:	68fb      	ldr	r3, [r7, #12]
 801a350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a352:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a354:	429a      	cmp	r2, r3
 801a356:	d3dc      	bcc.n	801a312 <rcl_wait+0x42a>
    }
  }

  if (RMW_RET_TIMEOUT == ret && !is_timer_timeout) {
 801a358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a35a:	2b02      	cmp	r3, #2
 801a35c:	d108      	bne.n	801a370 <rcl_wait+0x488>
 801a35e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801a362:	f083 0301 	eor.w	r3, r3, #1
 801a366:	b2db      	uxtb	r3, r3
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d001      	beq.n	801a370 <rcl_wait+0x488>
    return RCL_RET_TIMEOUT;
 801a36c:	2302      	movs	r3, #2
 801a36e:	e000      	b.n	801a372 <rcl_wait+0x48a>
  }
  return RCL_RET_OK;
 801a370:	2300      	movs	r3, #0
}
 801a372:	4618      	mov	r0, r3
 801a374:	3774      	adds	r7, #116	; 0x74
 801a376:	46bd      	mov	sp, r7
 801a378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a37c:	f3af 8000 	nop.w
 801a380:	3b9aca00 	.word	0x3b9aca00
 801a384:	00000000 	.word	0x00000000

0801a388 <_rclc_executor_is_valid>:
// executor = rclc_executor_get_zero_initialized_executor();
// then handles==NULL or not (e.g. properly initialized)
static
bool
_rclc_executor_is_valid(rclc_executor_t * executor)
{
 801a388:	b480      	push	{r7}
 801a38a:	b083      	sub	sp, #12
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	6078      	str	r0, [r7, #4]
  RCL_CHECK_FOR_NULL_WITH_MSG(executor, "executor pointer is invalid", return false);
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	2b00      	cmp	r3, #0
 801a394:	d101      	bne.n	801a39a <_rclc_executor_is_valid+0x12>
 801a396:	2300      	movs	r3, #0
 801a398:	e012      	b.n	801a3c0 <_rclc_executor_is_valid+0x38>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	685b      	ldr	r3, [r3, #4]
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d101      	bne.n	801a3a6 <_rclc_executor_is_valid+0x1e>
 801a3a2:	2300      	movs	r3, #0
 801a3a4:	e00c      	b.n	801a3c0 <_rclc_executor_is_valid+0x38>
    executor->handles, "handle pointer is invalid", return false);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	691b      	ldr	r3, [r3, #16]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d101      	bne.n	801a3b2 <_rclc_executor_is_valid+0x2a>
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	e006      	b.n	801a3c0 <_rclc_executor_is_valid+0x38>
    executor->allocator, "allocator pointer is invalid", return false);
  if (executor->max_handles == 0) {
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	689b      	ldr	r3, [r3, #8]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d101      	bne.n	801a3be <_rclc_executor_is_valid+0x36>
    return false;
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	e000      	b.n	801a3c0 <_rclc_executor_is_valid+0x38>
  }

  return true;
 801a3be:	2301      	movs	r3, #1
}
 801a3c0:	4618      	mov	r0, r3
 801a3c2:	370c      	adds	r7, #12
 801a3c4:	46bd      	mov	sp, r7
 801a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ca:	4770      	bx	lr

0801a3cc <rclc_executor_get_zero_initialized_executor>:

// wait_set and rclc_executor_handle_size_t are structs and cannot be statically
// initialized here.
rclc_executor_t
rclc_executor_get_zero_initialized_executor()
{
 801a3cc:	b580      	push	{r7, lr}
 801a3ce:	b082      	sub	sp, #8
 801a3d0:	af00      	add	r7, sp, #0
 801a3d2:	6078      	str	r0, [r7, #4]
    .timeout_ns = 0,
    .invocation_time = 0,
    .trigger_function = NULL,
    .trigger_object = NULL
  };
  return null_executor;
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	4a05      	ldr	r2, [pc, #20]	; (801a3ec <rclc_executor_get_zero_initialized_executor+0x20>)
 801a3d8:	4618      	mov	r0, r3
 801a3da:	4611      	mov	r1, r2
 801a3dc:	2380      	movs	r3, #128	; 0x80
 801a3de:	461a      	mov	r2, r3
 801a3e0:	f006 fc6e 	bl	8020cc0 <memcpy>
}
 801a3e4:	6878      	ldr	r0, [r7, #4]
 801a3e6:	3708      	adds	r7, #8
 801a3e8:	46bd      	mov	sp, r7
 801a3ea:	bd80      	pop	{r7, pc}
 801a3ec:	2000e630 	.word	0x2000e630

0801a3f0 <rclc_executor_init>:
rclc_executor_init(
  rclc_executor_t * executor,
  rcl_context_t * context,
  const size_t number_of_handles,
  const rcl_allocator_t * allocator)
{
 801a3f0:	b5b0      	push	{r4, r5, r7, lr}
 801a3f2:	b0a6      	sub	sp, #152	; 0x98
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 801a3fa:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 801a3fe:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801a402:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCL_CHECK_FOR_NULL_WITH_MSG(executor, "executor is NULL", return RCL_RET_INVALID_ARGUMENT);
 801a406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d101      	bne.n	801a412 <rclc_executor_init+0x22>
 801a40e:	230b      	movs	r3, #11
 801a410:	e096      	b.n	801a540 <rclc_executor_init+0x150>
  RCL_CHECK_FOR_NULL_WITH_MSG(context, "context is NULL", return RCL_RET_INVALID_ARGUMENT);
 801a412:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a416:	2b00      	cmp	r3, #0
 801a418:	d101      	bne.n	801a41e <rclc_executor_init+0x2e>
 801a41a:	230b      	movs	r3, #11
 801a41c:	e090      	b.n	801a540 <rclc_executor_init+0x150>
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "allocator is NULL", return RCL_RET_INVALID_ARGUMENT);
 801a41e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801a422:	f001 f9a3 	bl	801b76c <rcutils_allocator_is_valid>
 801a426:	4603      	mov	r3, r0
 801a428:	f083 0301 	eor.w	r3, r3, #1
 801a42c:	b2db      	uxtb	r3, r3
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d001      	beq.n	801a436 <rclc_executor_init+0x46>
 801a432:	230b      	movs	r3, #11
 801a434:	e084      	b.n	801a540 <rclc_executor_init+0x150>

  if (number_of_handles == 0) {
 801a436:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d101      	bne.n	801a442 <rclc_executor_init+0x52>
    RCL_SET_ERROR_MSG("number_of_handles is 0. Must be larger or equal to 1");
    return RCL_RET_INVALID_ARGUMENT;
 801a43e:	230b      	movs	r3, #11
 801a440:	e07e      	b.n	801a540 <rclc_executor_init+0x150>
  }

  rcl_ret_t ret = RCL_RET_OK;
 801a442:	2300      	movs	r3, #0
 801a444:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  (*executor) = rclc_executor_get_zero_initialized_executor();
 801a448:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 801a44c:	463b      	mov	r3, r7
 801a44e:	4618      	mov	r0, r3
 801a450:	f7ff ffbc 	bl	801a3cc <rclc_executor_get_zero_initialized_executor>
 801a454:	4620      	mov	r0, r4
 801a456:	463b      	mov	r3, r7
 801a458:	2280      	movs	r2, #128	; 0x80
 801a45a:	4619      	mov	r1, r3
 801a45c:	f006 fc30 	bl	8020cc0 <memcpy>
  executor->context = context;
 801a460:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a464:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a468:	601a      	str	r2, [r3, #0]
  executor->max_handles = number_of_handles;
 801a46a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a46e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801a472:	609a      	str	r2, [r3, #8]
  executor->index = 0;
 801a474:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a478:	2200      	movs	r2, #0
 801a47a:	60da      	str	r2, [r3, #12]
  executor->wait_set = rcl_get_zero_initialized_wait_set();
 801a47c:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 801a480:	463b      	mov	r3, r7
 801a482:	4618      	mov	r0, r3
 801a484:	f7fe fe54 	bl	8019130 <rcl_get_zero_initialized_wait_set>
 801a488:	3414      	adds	r4, #20
 801a48a:	463d      	mov	r5, r7
 801a48c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a48e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a498:	682b      	ldr	r3, [r5, #0]
 801a49a:	6023      	str	r3, [r4, #0]
  executor->allocator = allocator;
 801a49c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a4a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801a4a4:	611a      	str	r2, [r3, #16]
  executor->timeout_ns = DEFAULT_WAIT_TIMEOUT_NS;
 801a4a6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801a4aa:	a328      	add	r3, pc, #160	; (adr r3, 801a54c <rclc_executor_init+0x15c>)
 801a4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4b0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
  // allocate memory for the array
  executor->handles =
    executor->allocator->allocate(
 801a4b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a4b8:	691b      	ldr	r3, [r3, #16]
 801a4ba:	681b      	ldr	r3, [r3, #0]
 801a4bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801a4c0:	0190      	lsls	r0, r2, #6
    (number_of_handles * sizeof(rclc_executor_handle_t)),
    executor->allocator->state);
 801a4c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801a4c6:	6912      	ldr	r2, [r2, #16]
    executor->allocator->allocate(
 801a4c8:	6912      	ldr	r2, [r2, #16]
 801a4ca:	4611      	mov	r1, r2
 801a4cc:	4798      	blx	r3
 801a4ce:	4602      	mov	r2, r0
  executor->handles =
 801a4d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a4d4:	605a      	str	r2, [r3, #4]
  if (NULL == executor->handles) {
 801a4d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a4da:	685b      	ldr	r3, [r3, #4]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d101      	bne.n	801a4e4 <rclc_executor_init+0xf4>
    RCL_SET_ERROR_MSG("Could not allocate memory for 'handles'.");
    return RCL_RET_BAD_ALLOC;
 801a4e0:	230a      	movs	r3, #10
 801a4e2:	e02d      	b.n	801a540 <rclc_executor_init+0x150>
  }

  // initialize handle
  for (size_t i = 0; i < number_of_handles; i++) {
 801a4e4:	2300      	movs	r3, #0
 801a4e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801a4ea:	e010      	b.n	801a50e <rclc_executor_init+0x11e>
    rclc_executor_handle_init(&executor->handles[i], number_of_handles);
 801a4ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a4f0:	685a      	ldr	r2, [r3, #4]
 801a4f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a4f6:	019b      	lsls	r3, r3, #6
 801a4f8:	4413      	add	r3, r2
 801a4fa:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801a4fe:	4618      	mov	r0, r3
 801a500:	f000 fe23 	bl	801b14a <rclc_executor_handle_init>
  for (size_t i = 0; i < number_of_handles; i++) {
 801a504:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a508:	3301      	adds	r3, #1
 801a50a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801a50e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801a512:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a516:	429a      	cmp	r2, r3
 801a518:	d3e8      	bcc.n	801a4ec <rclc_executor_init+0xfc>
  }

  // initialize #counts for handle types
  rclc_executor_handle_counters_zero_init(&executor->info);
 801a51a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a51e:	3348      	adds	r3, #72	; 0x48
 801a520:	4618      	mov	r0, r3
 801a522:	f000 fdff 	bl	801b124 <rclc_executor_handle_counters_zero_init>

  // default: trigger_any which corresponds to the ROS2 rclcpp Executor semantics
  //          start processing if any handle has new data/or is ready
  rclc_executor_set_trigger(executor, rclc_executor_trigger_any, NULL);
 801a526:	2200      	movs	r2, #0
 801a528:	4907      	ldr	r1, [pc, #28]	; (801a548 <rclc_executor_init+0x158>)
 801a52a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 801a52e:	f000 fdb1 	bl	801b094 <rclc_executor_set_trigger>

  // default semantics
  rclc_executor_set_semantics(executor, RCLCPP_EXECUTOR);
 801a532:	2100      	movs	r1, #0
 801a534:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 801a538:	f000 f80c 	bl	801a554 <rclc_executor_set_semantics>

  return ret;
 801a53c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 801a540:	4618      	mov	r0, r3
 801a542:	3798      	adds	r7, #152	; 0x98
 801a544:	46bd      	mov	sp, r7
 801a546:	bdb0      	pop	{r4, r5, r7, pc}
 801a548:	0801b0c5 	.word	0x0801b0c5
 801a54c:	3b9aca00 	.word	0x3b9aca00
 801a550:	00000000 	.word	0x00000000

0801a554 <rclc_executor_set_semantics>:
  return ret;
}

rcl_ret_t
rclc_executor_set_semantics(rclc_executor_t * executor, rclc_executor_semantics_t semantics)
{
 801a554:	b580      	push	{r7, lr}
 801a556:	b084      	sub	sp, #16
 801a558:	af00      	add	r7, sp, #0
 801a55a:	6078      	str	r0, [r7, #4]
 801a55c:	460b      	mov	r3, r1
 801a55e:	70fb      	strb	r3, [r7, #3]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	2b00      	cmp	r3, #0
 801a564:	d101      	bne.n	801a56a <rclc_executor_set_semantics+0x16>
 801a566:	230b      	movs	r3, #11
 801a568:	e00e      	b.n	801a588 <rclc_executor_set_semantics+0x34>
    executor, "executor is null pointer", return RCL_RET_INVALID_ARGUMENT);
  rcl_ret_t ret = RCL_RET_OK;
 801a56a:	2300      	movs	r3, #0
 801a56c:	60fb      	str	r3, [r7, #12]
  if (_rclc_executor_is_valid(executor)) {
 801a56e:	6878      	ldr	r0, [r7, #4]
 801a570:	f7ff ff0a 	bl	801a388 <_rclc_executor_is_valid>
 801a574:	4603      	mov	r3, r0
 801a576:	2b00      	cmp	r3, #0
 801a578:	d005      	beq.n	801a586 <rclc_executor_set_semantics+0x32>
    executor->data_comm_semantics = semantics;
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	78fa      	ldrb	r2, [r7, #3]
 801a57e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  } else {
    RCL_SET_ERROR_MSG("executor not initialized.");
    return RCL_RET_ERROR;
  }
  return ret;
 801a582:	68fb      	ldr	r3, [r7, #12]
 801a584:	e000      	b.n	801a588 <rclc_executor_set_semantics+0x34>
    return RCL_RET_ERROR;
 801a586:	2301      	movs	r3, #1
}
 801a588:	4618      	mov	r0, r3
 801a58a:	3710      	adds	r7, #16
 801a58c:	46bd      	mov	sp, r7
 801a58e:	bd80      	pop	{r7, pc}

0801a590 <rclc_executor_add_subscription>:
  rclc_executor_t * executor,
  rcl_subscription_t * subscription,
  void * msg,
  rclc_subscription_callback_t callback,
  rclc_executor_handle_invocation_t invocation)
{
 801a590:	b580      	push	{r7, lr}
 801a592:	b086      	sub	sp, #24
 801a594:	af00      	add	r7, sp, #0
 801a596:	60f8      	str	r0, [r7, #12]
 801a598:	60b9      	str	r1, [r7, #8]
 801a59a:	607a      	str	r2, [r7, #4]
 801a59c:	603b      	str	r3, [r7, #0]
  RCL_CHECK_ARGUMENT_FOR_NULL(executor, RCL_RET_INVALID_ARGUMENT);
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d101      	bne.n	801a5a8 <rclc_executor_add_subscription+0x18>
 801a5a4:	230b      	movs	r3, #11
 801a5a6:	e070      	b.n	801a68a <rclc_executor_add_subscription+0xfa>
  RCL_CHECK_ARGUMENT_FOR_NULL(subscription, RCL_RET_INVALID_ARGUMENT);
 801a5a8:	68bb      	ldr	r3, [r7, #8]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d101      	bne.n	801a5b2 <rclc_executor_add_subscription+0x22>
 801a5ae:	230b      	movs	r3, #11
 801a5b0:	e06b      	b.n	801a68a <rclc_executor_add_subscription+0xfa>
  RCL_CHECK_ARGUMENT_FOR_NULL(msg, RCL_RET_INVALID_ARGUMENT);
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d101      	bne.n	801a5bc <rclc_executor_add_subscription+0x2c>
 801a5b8:	230b      	movs	r3, #11
 801a5ba:	e066      	b.n	801a68a <rclc_executor_add_subscription+0xfa>
  RCL_CHECK_ARGUMENT_FOR_NULL(callback, RCL_RET_INVALID_ARGUMENT);
 801a5bc:	683b      	ldr	r3, [r7, #0]
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d101      	bne.n	801a5c6 <rclc_executor_add_subscription+0x36>
 801a5c2:	230b      	movs	r3, #11
 801a5c4:	e061      	b.n	801a68a <rclc_executor_add_subscription+0xfa>
  rcl_ret_t ret = RCL_RET_OK;
 801a5c6:	2300      	movs	r3, #0
 801a5c8:	617b      	str	r3, [r7, #20]
  // array bound check
  if (executor->index >= executor->max_handles) {
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	68da      	ldr	r2, [r3, #12]
 801a5ce:	68fb      	ldr	r3, [r7, #12]
 801a5d0:	689b      	ldr	r3, [r3, #8]
 801a5d2:	429a      	cmp	r2, r3
 801a5d4:	d301      	bcc.n	801a5da <rclc_executor_add_subscription+0x4a>
    RCL_SET_ERROR_MSG("Buffer overflow of 'executor->handles'. Increase 'max_handles'");
    return RCL_RET_ERROR;
 801a5d6:	2301      	movs	r3, #1
 801a5d8:	e057      	b.n	801a68a <rclc_executor_add_subscription+0xfa>
  }

  // assign data fields
  executor->handles[executor->index].type = SUBSCRIPTION;
 801a5da:	68fb      	ldr	r3, [r7, #12]
 801a5dc:	685a      	ldr	r2, [r3, #4]
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	68db      	ldr	r3, [r3, #12]
 801a5e2:	019b      	lsls	r3, r3, #6
 801a5e4:	4413      	add	r3, r2
 801a5e6:	2200      	movs	r2, #0
 801a5e8:	701a      	strb	r2, [r3, #0]
  executor->handles[executor->index].subscription = subscription;
 801a5ea:	68fb      	ldr	r3, [r7, #12]
 801a5ec:	685a      	ldr	r2, [r3, #4]
 801a5ee:	68fb      	ldr	r3, [r7, #12]
 801a5f0:	68db      	ldr	r3, [r3, #12]
 801a5f2:	019b      	lsls	r3, r3, #6
 801a5f4:	4413      	add	r3, r2
 801a5f6:	68ba      	ldr	r2, [r7, #8]
 801a5f8:	605a      	str	r2, [r3, #4]
  executor->handles[executor->index].data = msg;
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	685a      	ldr	r2, [r3, #4]
 801a5fe:	68fb      	ldr	r3, [r7, #12]
 801a600:	68db      	ldr	r3, [r3, #12]
 801a602:	019b      	lsls	r3, r3, #6
 801a604:	4413      	add	r3, r2
 801a606:	687a      	ldr	r2, [r7, #4]
 801a608:	609a      	str	r2, [r3, #8]
  executor->handles[executor->index].subscription_callback = callback;
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	685a      	ldr	r2, [r3, #4]
 801a60e:	68fb      	ldr	r3, [r7, #12]
 801a610:	68db      	ldr	r3, [r3, #12]
 801a612:	019b      	lsls	r3, r3, #6
 801a614:	4413      	add	r3, r2
 801a616:	683a      	ldr	r2, [r7, #0]
 801a618:	631a      	str	r2, [r3, #48]	; 0x30
  executor->handles[executor->index].invocation = invocation;
 801a61a:	68fb      	ldr	r3, [r7, #12]
 801a61c:	685a      	ldr	r2, [r3, #4]
 801a61e:	68fb      	ldr	r3, [r7, #12]
 801a620:	68db      	ldr	r3, [r3, #12]
 801a622:	019b      	lsls	r3, r3, #6
 801a624:	4413      	add	r3, r2
 801a626:	f897 2020 	ldrb.w	r2, [r7, #32]
 801a62a:	705a      	strb	r2, [r3, #1]
  executor->handles[executor->index].initialized = true;
 801a62c:	68fb      	ldr	r3, [r7, #12]
 801a62e:	685a      	ldr	r2, [r3, #4]
 801a630:	68fb      	ldr	r3, [r7, #12]
 801a632:	68db      	ldr	r3, [r3, #12]
 801a634:	019b      	lsls	r3, r3, #6
 801a636:	4413      	add	r3, r2
 801a638:	2201      	movs	r2, #1
 801a63a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  executor->handles[executor->index].callback_context = NULL;
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	685a      	ldr	r2, [r3, #4]
 801a642:	68fb      	ldr	r3, [r7, #12]
 801a644:	68db      	ldr	r3, [r3, #12]
 801a646:	019b      	lsls	r3, r3, #6
 801a648:	4413      	add	r3, r2
 801a64a:	2200      	movs	r2, #0
 801a64c:	62da      	str	r2, [r3, #44]	; 0x2c

  // increase index of handle array
  executor->index++;
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	68db      	ldr	r3, [r3, #12]
 801a652:	1c5a      	adds	r2, r3, #1
 801a654:	68fb      	ldr	r3, [r7, #12]
 801a656:	60da      	str	r2, [r3, #12]

  // invalidate wait_set so that in next spin_some() call the
  // 'executor->wait_set' is updated accordingly
  if (rcl_wait_set_is_valid(&executor->wait_set)) {
 801a658:	68fb      	ldr	r3, [r7, #12]
 801a65a:	3314      	adds	r3, #20
 801a65c:	4618      	mov	r0, r3
 801a65e:	f000 ff4c 	bl	801b4fa <rcl_wait_set_is_valid>
 801a662:	4603      	mov	r3, r0
 801a664:	2b00      	cmp	r3, #0
 801a666:	d00a      	beq.n	801a67e <rclc_executor_add_subscription+0xee>
    ret = rcl_wait_set_fini(&executor->wait_set);
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	3314      	adds	r3, #20
 801a66c:	4618      	mov	r0, r3
 801a66e:	f7fe fe78 	bl	8019362 <rcl_wait_set_fini>
 801a672:	6178      	str	r0, [r7, #20]
    if (RCL_RET_OK != ret) {
 801a674:	697b      	ldr	r3, [r7, #20]
 801a676:	2b00      	cmp	r3, #0
 801a678:	d001      	beq.n	801a67e <rclc_executor_add_subscription+0xee>
      RCL_SET_ERROR_MSG("Could not reset wait_set in rclc_executor_add_subscription.");
      return ret;
 801a67a:	697b      	ldr	r3, [r7, #20]
 801a67c:	e005      	b.n	801a68a <rclc_executor_add_subscription+0xfa>
    }
  }

  executor->info.number_of_subscriptions++;
 801a67e:	68fb      	ldr	r3, [r7, #12]
 801a680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a682:	1c5a      	adds	r2, r3, #1
 801a684:	68fb      	ldr	r3, [r7, #12]
 801a686:	649a      	str	r2, [r3, #72]	; 0x48

  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Added a subscription.");
  return ret;
 801a688:	697b      	ldr	r3, [r7, #20]
}
 801a68a:	4618      	mov	r0, r3
 801a68c:	3718      	adds	r7, #24
 801a68e:	46bd      	mov	sp, r7
 801a690:	bd80      	pop	{r7, pc}

0801a692 <rclc_executor_add_timer>:

rcl_ret_t
rclc_executor_add_timer(
  rclc_executor_t * executor,
  rcl_timer_t * timer)
{
 801a692:	b580      	push	{r7, lr}
 801a694:	b084      	sub	sp, #16
 801a696:	af00      	add	r7, sp, #0
 801a698:	6078      	str	r0, [r7, #4]
 801a69a:	6039      	str	r1, [r7, #0]
  rcl_ret_t ret = RCL_RET_OK;
 801a69c:	2300      	movs	r3, #0
 801a69e:	60fb      	str	r3, [r7, #12]

  RCL_CHECK_ARGUMENT_FOR_NULL(executor, RCL_RET_INVALID_ARGUMENT);
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d101      	bne.n	801a6aa <rclc_executor_add_timer+0x18>
 801a6a6:	230b      	movs	r3, #11
 801a6a8:	e055      	b.n	801a756 <rclc_executor_add_timer+0xc4>
  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
 801a6aa:	683b      	ldr	r3, [r7, #0]
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d101      	bne.n	801a6b4 <rclc_executor_add_timer+0x22>
 801a6b0:	230b      	movs	r3, #11
 801a6b2:	e050      	b.n	801a756 <rclc_executor_add_timer+0xc4>

  // array bound check
  if (executor->index >= executor->max_handles) {
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	68da      	ldr	r2, [r3, #12]
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	689b      	ldr	r3, [r3, #8]
 801a6bc:	429a      	cmp	r2, r3
 801a6be:	d303      	bcc.n	801a6c8 <rclc_executor_add_timer+0x36>
    rcl_ret_t ret = RCL_RET_ERROR;     // TODO(jst3si) better name : rclc_RET_BUFFER_OVERFLOW
 801a6c0:	2301      	movs	r3, #1
 801a6c2:	60bb      	str	r3, [r7, #8]
    RCL_SET_ERROR_MSG("Buffer overflow of 'executor->handles'. Increase 'max_handles'");
    return ret;
 801a6c4:	68bb      	ldr	r3, [r7, #8]
 801a6c6:	e046      	b.n	801a756 <rclc_executor_add_timer+0xc4>
  }

  // assign data fields
  executor->handles[executor->index].type = TIMER;
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	685a      	ldr	r2, [r3, #4]
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	68db      	ldr	r3, [r3, #12]
 801a6d0:	019b      	lsls	r3, r3, #6
 801a6d2:	4413      	add	r3, r2
 801a6d4:	2202      	movs	r2, #2
 801a6d6:	701a      	strb	r2, [r3, #0]
  executor->handles[executor->index].timer = timer;
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	685a      	ldr	r2, [r3, #4]
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	68db      	ldr	r3, [r3, #12]
 801a6e0:	019b      	lsls	r3, r3, #6
 801a6e2:	4413      	add	r3, r2
 801a6e4:	683a      	ldr	r2, [r7, #0]
 801a6e6:	605a      	str	r2, [r3, #4]
  executor->handles[executor->index].invocation = ON_NEW_DATA;  // i.e. when timer elapsed
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	685a      	ldr	r2, [r3, #4]
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	68db      	ldr	r3, [r3, #12]
 801a6f0:	019b      	lsls	r3, r3, #6
 801a6f2:	4413      	add	r3, r2
 801a6f4:	2200      	movs	r2, #0
 801a6f6:	705a      	strb	r2, [r3, #1]
  executor->handles[executor->index].initialized = true;
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	685a      	ldr	r2, [r3, #4]
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	68db      	ldr	r3, [r3, #12]
 801a700:	019b      	lsls	r3, r3, #6
 801a702:	4413      	add	r3, r2
 801a704:	2201      	movs	r2, #1
 801a706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  executor->handles[executor->index].callback_context = NULL;
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	685a      	ldr	r2, [r3, #4]
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	68db      	ldr	r3, [r3, #12]
 801a712:	019b      	lsls	r3, r3, #6
 801a714:	4413      	add	r3, r2
 801a716:	2200      	movs	r2, #0
 801a718:	62da      	str	r2, [r3, #44]	; 0x2c

  // increase index of handle array
  executor->index++;
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	68db      	ldr	r3, [r3, #12]
 801a71e:	1c5a      	adds	r2, r3, #1
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	60da      	str	r2, [r3, #12]

  // invalidate wait_set so that in next spin_some() call the
  // 'executor->wait_set' is updated accordingly
  if (rcl_wait_set_is_valid(&executor->wait_set)) {
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	3314      	adds	r3, #20
 801a728:	4618      	mov	r0, r3
 801a72a:	f000 fee6 	bl	801b4fa <rcl_wait_set_is_valid>
 801a72e:	4603      	mov	r3, r0
 801a730:	2b00      	cmp	r3, #0
 801a732:	d00a      	beq.n	801a74a <rclc_executor_add_timer+0xb8>
    ret = rcl_wait_set_fini(&executor->wait_set);
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	3314      	adds	r3, #20
 801a738:	4618      	mov	r0, r3
 801a73a:	f7fe fe12 	bl	8019362 <rcl_wait_set_fini>
 801a73e:	60f8      	str	r0, [r7, #12]
    if (RCL_RET_OK != ret) {
 801a740:	68fb      	ldr	r3, [r7, #12]
 801a742:	2b00      	cmp	r3, #0
 801a744:	d001      	beq.n	801a74a <rclc_executor_add_timer+0xb8>
      RCL_SET_ERROR_MSG("Could not reset wait_set in rclc_executor_add_timer function.");
      return ret;
 801a746:	68fb      	ldr	r3, [r7, #12]
 801a748:	e005      	b.n	801a756 <rclc_executor_add_timer+0xc4>
    }
  }
  executor->info.number_of_timers++;
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a74e:	1c5a      	adds	r2, r3, #1
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	64da      	str	r2, [r3, #76]	; 0x4c
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Added a timer.");
  return ret;
 801a754:	68fb      	ldr	r3, [r7, #12]
}
 801a756:	4618      	mov	r0, r3
 801a758:	3710      	adds	r7, #16
 801a75a:	46bd      	mov	sp, r7
 801a75c:	bd80      	pop	{r7, pc}
	...

0801a760 <_rclc_check_for_new_data>:
}

static
rcl_ret_t
_rclc_check_for_new_data(rclc_executor_handle_t * handle, rcl_wait_set_t * wait_set)
{
 801a760:	b480      	push	{r7}
 801a762:	b085      	sub	sp, #20
 801a764:	af00      	add	r7, sp, #0
 801a766:	6078      	str	r0, [r7, #4]
 801a768:	6039      	str	r1, [r7, #0]
  RCL_CHECK_ARGUMENT_FOR_NULL(handle, RCL_RET_INVALID_ARGUMENT);
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d101      	bne.n	801a774 <_rclc_check_for_new_data+0x14>
 801a770:	230b      	movs	r3, #11
 801a772:	e076      	b.n	801a862 <_rclc_check_for_new_data+0x102>
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 801a774:	683b      	ldr	r3, [r7, #0]
 801a776:	2b00      	cmp	r3, #0
 801a778:	d101      	bne.n	801a77e <_rclc_check_for_new_data+0x1e>
 801a77a:	230b      	movs	r3, #11
 801a77c:	e071      	b.n	801a862 <_rclc_check_for_new_data+0x102>
  rcl_ret_t rc = RCL_RET_OK;
 801a77e:	2300      	movs	r3, #0
 801a780:	60fb      	str	r3, [r7, #12]

  switch (handle->type) {
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	781b      	ldrb	r3, [r3, #0]
 801a786:	2b08      	cmp	r3, #8
 801a788:	d864      	bhi.n	801a854 <_rclc_check_for_new_data+0xf4>
 801a78a:	a201      	add	r2, pc, #4	; (adr r2, 801a790 <_rclc_check_for_new_data+0x30>)
 801a78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a790:	0801a7b5 	.word	0x0801a7b5
 801a794:	0801a7b5 	.word	0x0801a7b5
 801a798:	0801a7d5 	.word	0x0801a7d5
 801a79c:	0801a815 	.word	0x0801a815
 801a7a0:	0801a815 	.word	0x0801a815
 801a7a4:	0801a7f5 	.word	0x0801a7f5
 801a7a8:	0801a7f5 	.word	0x0801a7f5
 801a7ac:	0801a7f5 	.word	0x0801a7f5
 801a7b0:	0801a835 	.word	0x0801a835
    case SUBSCRIPTION:
    case SUBSCRIPTION_WITH_CONTEXT:
      handle->data_available = (NULL != wait_set->subscriptions[handle->index]);
 801a7b4:	683b      	ldr	r3, [r7, #0]
 801a7b6:	681a      	ldr	r2, [r3, #0]
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a7bc:	009b      	lsls	r3, r3, #2
 801a7be:	4413      	add	r3, r2
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	bf14      	ite	ne
 801a7c6:	2301      	movne	r3, #1
 801a7c8:	2300      	moveq	r3, #0
 801a7ca:	b2da      	uxtb	r2, r3
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      break;
 801a7d2:	e045      	b.n	801a860 <_rclc_check_for_new_data+0x100>

    case TIMER:
      // case TIMER_WITH_CONTEXT:
      handle->data_available = (NULL != wait_set->timers[handle->index]);
 801a7d4:	683b      	ldr	r3, [r7, #0]
 801a7d6:	691a      	ldr	r2, [r3, #16]
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a7dc:	009b      	lsls	r3, r3, #2
 801a7de:	4413      	add	r3, r2
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	bf14      	ite	ne
 801a7e6:	2301      	movne	r3, #1
 801a7e8:	2300      	moveq	r3, #0
 801a7ea:	b2da      	uxtb	r2, r3
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      break;
 801a7f2:	e035      	b.n	801a860 <_rclc_check_for_new_data+0x100>

    case SERVICE:
    case SERVICE_WITH_REQUEST_ID:
    case SERVICE_WITH_CONTEXT:
      handle->data_available = (NULL != wait_set->services[handle->index]);
 801a7f4:	683b      	ldr	r3, [r7, #0]
 801a7f6:	6a1a      	ldr	r2, [r3, #32]
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a7fc:	009b      	lsls	r3, r3, #2
 801a7fe:	4413      	add	r3, r2
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	2b00      	cmp	r3, #0
 801a804:	bf14      	ite	ne
 801a806:	2301      	movne	r3, #1
 801a808:	2300      	moveq	r3, #0
 801a80a:	b2da      	uxtb	r2, r3
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      break;
 801a812:	e025      	b.n	801a860 <_rclc_check_for_new_data+0x100>

    case CLIENT:
    case CLIENT_WITH_REQUEST_ID:
      // case CLIENT_WITH_CONTEXT:
      handle->data_available = (NULL != wait_set->clients[handle->index]);
 801a814:	683b      	ldr	r3, [r7, #0]
 801a816:	699a      	ldr	r2, [r3, #24]
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a81c:	009b      	lsls	r3, r3, #2
 801a81e:	4413      	add	r3, r2
 801a820:	681b      	ldr	r3, [r3, #0]
 801a822:	2b00      	cmp	r3, #0
 801a824:	bf14      	ite	ne
 801a826:	2301      	movne	r3, #1
 801a828:	2300      	moveq	r3, #0
 801a82a:	b2da      	uxtb	r2, r3
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      break;
 801a832:	e015      	b.n	801a860 <_rclc_check_for_new_data+0x100>

    case GUARD_CONDITION:
      // case GUARD_CONDITION_WITH_CONTEXT:
      handle->data_available = (NULL != wait_set->guard_conditions[handle->index]);
 801a834:	683b      	ldr	r3, [r7, #0]
 801a836:	689a      	ldr	r2, [r3, #8]
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a83c:	009b      	lsls	r3, r3, #2
 801a83e:	4413      	add	r3, r2
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	2b00      	cmp	r3, #0
 801a844:	bf14      	ite	ne
 801a846:	2301      	movne	r3, #1
 801a848:	2300      	moveq	r3, #0
 801a84a:	b2da      	uxtb	r2, r3
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      break;
 801a852:	e005      	b.n	801a860 <_rclc_check_for_new_data+0x100>

    default:
      handle->data_available = false;
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	2200      	movs	r2, #0
 801a858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      RCUTILS_LOG_DEBUG_NAMED(
        ROS_PACKAGE_NAME, "Error in _rclc_check_for_new_data:wait_set unknwon handle type: %d",
        handle->type);
      return RCL_RET_ERROR;
 801a85c:	2301      	movs	r3, #1
 801a85e:	e000      	b.n	801a862 <_rclc_check_for_new_data+0x102>
  }    // switch-case
  return rc;
 801a860:	68fb      	ldr	r3, [r7, #12]
}
 801a862:	4618      	mov	r0, r3
 801a864:	3714      	adds	r7, #20
 801a866:	46bd      	mov	sp, r7
 801a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a86c:	4770      	bx	lr
 801a86e:	bf00      	nop

0801a870 <_rclc_take_new_data>:

static
rcl_ret_t
_rclc_take_new_data(rclc_executor_handle_t * handle, rcl_wait_set_t * wait_set)
{
 801a870:	b580      	push	{r7, lr}
 801a872:	b090      	sub	sp, #64	; 0x40
 801a874:	af00      	add	r7, sp, #0
 801a876:	6078      	str	r0, [r7, #4]
 801a878:	6039      	str	r1, [r7, #0]
  RCL_CHECK_ARGUMENT_FOR_NULL(handle, RCL_RET_INVALID_ARGUMENT);
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d101      	bne.n	801a884 <_rclc_take_new_data+0x14>
 801a880:	230b      	movs	r3, #11
 801a882:	e09c      	b.n	801a9be <_rclc_take_new_data+0x14e>
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 801a884:	683b      	ldr	r3, [r7, #0]
 801a886:	2b00      	cmp	r3, #0
 801a888:	d101      	bne.n	801a88e <_rclc_take_new_data+0x1e>
 801a88a:	230b      	movs	r3, #11
 801a88c:	e097      	b.n	801a9be <_rclc_take_new_data+0x14e>
  rcl_ret_t rc = RCL_RET_OK;
 801a88e:	2300      	movs	r3, #0
 801a890:	63fb      	str	r3, [r7, #60]	; 0x3c

  switch (handle->type) {
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	781b      	ldrb	r3, [r3, #0]
 801a896:	2b08      	cmp	r3, #8
 801a898:	f200 8087 	bhi.w	801a9aa <_rclc_take_new_data+0x13a>
 801a89c:	a201      	add	r2, pc, #4	; (adr r2, 801a8a4 <_rclc_take_new_data+0x34>)
 801a89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a8a2:	bf00      	nop
 801a8a4:	0801a8c9 	.word	0x0801a8c9
 801a8a8:	0801a8c9 	.word	0x0801a8c9
 801a8ac:	0801a9af 	.word	0x0801a9af
 801a8b0:	0801a96b 	.word	0x0801a96b
 801a8b4:	0801a96b 	.word	0x0801a96b
 801a8b8:	0801a919 	.word	0x0801a919
 801a8bc:	0801a919 	.word	0x0801a919
 801a8c0:	0801a919 	.word	0x0801a919
 801a8c4:	0801a9af 	.word	0x0801a9af
    case SUBSCRIPTION:
    case SUBSCRIPTION_WITH_CONTEXT:
      if (wait_set->subscriptions[handle->index]) {
 801a8c8:	683b      	ldr	r3, [r7, #0]
 801a8ca:	681a      	ldr	r2, [r3, #0]
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a8d0:	009b      	lsls	r3, r3, #2
 801a8d2:	4413      	add	r3, r2
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d06b      	beq.n	801a9b2 <_rclc_take_new_data+0x142>
        rmw_message_info_t messageInfo;
        rc = rcl_take(
          handle->subscription, handle->data, &messageInfo,
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	6858      	ldr	r0, [r3, #4]
        rc = rcl_take(
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	6899      	ldr	r1, [r3, #8]
 801a8e2:	f107 0208 	add.w	r2, r7, #8
 801a8e6:	2300      	movs	r3, #0
 801a8e8:	f7fd fa9a 	bl	8017e20 <rcl_take>
 801a8ec:	63f8      	str	r0, [r7, #60]	; 0x3c
          NULL);
        if (rc != RCL_RET_OK) {
 801a8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d05e      	beq.n	801a9b2 <_rclc_take_new_data+0x142>
          // rcl_take might return this error even with successfull rcl_wait
          if (rc != RCL_RET_SUBSCRIPTION_TAKE_FAILED) {
 801a8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a8f6:	f240 1291 	movw	r2, #401	; 0x191
 801a8fa:	4293      	cmp	r3, r2
 801a8fc:	d001      	beq.n	801a902 <_rclc_take_new_data+0x92>
            PRINT_RCLC_ERROR(rclc_take_new_data, rcl_take);
 801a8fe:	f001 f9f3 	bl	801bce8 <rcutils_reset_error>
            RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "Error number: %d", rc);
          }
          // invalidate that data is available, because rcl_take failed
          if (rc == RCL_RET_SUBSCRIPTION_TAKE_FAILED) {
 801a902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a904:	f240 1291 	movw	r2, #401	; 0x191
 801a908:	4293      	cmp	r3, r2
 801a90a:	d103      	bne.n	801a914 <_rclc_take_new_data+0xa4>
            handle->data_available = false;
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	2200      	movs	r2, #0
 801a910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
          }
          return rc;
 801a914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a916:	e052      	b.n	801a9be <_rclc_take_new_data+0x14e>
      break;

    case SERVICE:
    case SERVICE_WITH_REQUEST_ID:
    case SERVICE_WITH_CONTEXT:
      if (wait_set->services[handle->index]) {
 801a918:	683b      	ldr	r3, [r7, #0]
 801a91a:	6a1a      	ldr	r2, [r3, #32]
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a920:	009b      	lsls	r3, r3, #2
 801a922:	4413      	add	r3, r2
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	2b00      	cmp	r3, #0
 801a928:	d045      	beq.n	801a9b6 <_rclc_take_new_data+0x146>
        rc = rcl_take_request(
          handle->service, &handle->req_id, handle->data);
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	6858      	ldr	r0, [r3, #4]
        rc = rcl_take_request(
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	f103 0110 	add.w	r1, r3, #16
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	689b      	ldr	r3, [r3, #8]
 801a938:	461a      	mov	r2, r3
 801a93a:	f7fd f83d 	bl	80179b8 <rcl_take_request>
 801a93e:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (rc != RCL_RET_OK) {
 801a940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a942:	2b00      	cmp	r3, #0
 801a944:	d037      	beq.n	801a9b6 <_rclc_take_new_data+0x146>
          // rcl_take_request might return this error even with successfull rcl_wait
          if (rc != RCL_RET_SERVICE_TAKE_FAILED) {
 801a946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a948:	f240 2259 	movw	r2, #601	; 0x259
 801a94c:	4293      	cmp	r3, r2
 801a94e:	d001      	beq.n	801a954 <_rclc_take_new_data+0xe4>
            PRINT_RCLC_ERROR(rclc_take_new_data, rcl_take_request);
 801a950:	f001 f9ca 	bl	801bce8 <rcutils_reset_error>
            RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "Error number: %d", rc);
          }
          // invalidate that data is available, because rcl_take failed
          if (rc == RCL_RET_SERVICE_TAKE_FAILED) {
 801a954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a956:	f240 2259 	movw	r2, #601	; 0x259
 801a95a:	4293      	cmp	r3, r2
 801a95c:	d103      	bne.n	801a966 <_rclc_take_new_data+0xf6>
            handle->data_available = false;
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	2200      	movs	r2, #0
 801a962:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
          }
          return rc;
 801a966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a968:	e029      	b.n	801a9be <_rclc_take_new_data+0x14e>
      break;

    case CLIENT:
    case CLIENT_WITH_REQUEST_ID:
      // case CLIENT_WITH_CONTEXT:
      if (wait_set->clients[handle->index]) {
 801a96a:	683b      	ldr	r3, [r7, #0]
 801a96c:	699a      	ldr	r2, [r3, #24]
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a972:	009b      	lsls	r3, r3, #2
 801a974:	4413      	add	r3, r2
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	2b00      	cmp	r3, #0
 801a97a:	d01e      	beq.n	801a9ba <_rclc_take_new_data+0x14a>
        rc = rcl_take_response(
          handle->client, &handle->req_id, handle->data);
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	6858      	ldr	r0, [r3, #4]
        rc = rcl_take_response(
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	f103 0110 	add.w	r1, r3, #16
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	689b      	ldr	r3, [r3, #8]
 801a98a:	461a      	mov	r2, r3
 801a98c:	f7fa fed6 	bl	801573c <rcl_take_response>
 801a990:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (rc != RCL_RET_OK) {
 801a992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a994:	2b00      	cmp	r3, #0
 801a996:	d010      	beq.n	801a9ba <_rclc_take_new_data+0x14a>
          // rcl_take_response might return this error even with successfull rcl_wait
          if (rc != RCL_RET_CLIENT_TAKE_FAILED) {
 801a998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a99a:	f240 12f5 	movw	r2, #501	; 0x1f5
 801a99e:	4293      	cmp	r3, r2
 801a9a0:	d001      	beq.n	801a9a6 <_rclc_take_new_data+0x136>
            PRINT_RCLC_ERROR(rclc_take_new_data, rcl_take_response);
 801a9a2:	f001 f9a1 	bl	801bce8 <rcutils_reset_error>
            RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "Error number: %d", rc);
          }
          return rc;
 801a9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a9a8:	e009      	b.n	801a9be <_rclc_take_new_data+0x14e>

    default:
      RCUTILS_LOG_DEBUG_NAMED(
        ROS_PACKAGE_NAME, "Error in _rclc_take_new_data:wait_set unknwon handle type: %d",
        handle->type);
      return RCL_RET_ERROR;
 801a9aa:	2301      	movs	r3, #1
 801a9ac:	e007      	b.n	801a9be <_rclc_take_new_data+0x14e>
      break;
 801a9ae:	bf00      	nop
 801a9b0:	e004      	b.n	801a9bc <_rclc_take_new_data+0x14c>
      break;
 801a9b2:	bf00      	nop
 801a9b4:	e002      	b.n	801a9bc <_rclc_take_new_data+0x14c>
      break;
 801a9b6:	bf00      	nop
 801a9b8:	e000      	b.n	801a9bc <_rclc_take_new_data+0x14c>
      break;
 801a9ba:	bf00      	nop
  }    // switch-case
  return rc;
 801a9bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801a9be:	4618      	mov	r0, r3
 801a9c0:	3740      	adds	r7, #64	; 0x40
 801a9c2:	46bd      	mov	sp, r7
 801a9c4:	bd80      	pop	{r7, pc}
 801a9c6:	bf00      	nop

0801a9c8 <_rclc_execute>:
// todo change parametes (rclc_executor_handle_t * handle)

static
rcl_ret_t
_rclc_execute(rclc_executor_handle_t * handle)
{
 801a9c8:	b580      	push	{r7, lr}
 801a9ca:	b084      	sub	sp, #16
 801a9cc:	af00      	add	r7, sp, #0
 801a9ce:	6078      	str	r0, [r7, #4]
  RCL_CHECK_ARGUMENT_FOR_NULL(handle, RCL_RET_INVALID_ARGUMENT);
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d101      	bne.n	801a9da <_rclc_execute+0x12>
 801a9d6:	230b      	movs	r3, #11
 801a9d8:	e0c6      	b.n	801ab68 <_rclc_execute+0x1a0>
  rcl_ret_t rc = RCL_RET_OK;
 801a9da:	2300      	movs	r3, #0
 801a9dc:	60fb      	str	r3, [r7, #12]
  bool invoke_callback = false;
 801a9de:	2300      	movs	r3, #0
 801a9e0:	72fb      	strb	r3, [r7, #11]

  // determine, if callback shall be called
  if (handle->invocation == ON_NEW_DATA &&
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	785b      	ldrb	r3, [r3, #1]
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d106      	bne.n	801a9f8 <_rclc_execute+0x30>
    handle->data_available == true)
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
  if (handle->invocation == ON_NEW_DATA &&
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d001      	beq.n	801a9f8 <_rclc_execute+0x30>
  {
    invoke_callback = true;
 801a9f4:	2301      	movs	r3, #1
 801a9f6:	72fb      	strb	r3, [r7, #11]
  }

  if (handle->invocation == ALWAYS) {
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	785b      	ldrb	r3, [r3, #1]
 801a9fc:	2b01      	cmp	r3, #1
 801a9fe:	d101      	bne.n	801aa04 <_rclc_execute+0x3c>
    invoke_callback = true;
 801aa00:	2301      	movs	r3, #1
 801aa02:	72fb      	strb	r3, [r7, #11]
  }

  // execute callback
  if (invoke_callback) {
 801aa04:	7afb      	ldrb	r3, [r7, #11]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	f000 80a8 	beq.w	801ab5c <_rclc_execute+0x194>
    switch (handle->type) {
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	781b      	ldrb	r3, [r3, #0]
 801aa10:	2b08      	cmp	r3, #8
 801aa12:	f200 80a1 	bhi.w	801ab58 <_rclc_execute+0x190>
 801aa16:	a201      	add	r2, pc, #4	; (adr r2, 801aa1c <_rclc_execute+0x54>)
 801aa18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aa1c:	0801aa41 	.word	0x0801aa41
 801aa20:	0801aa63 	.word	0x0801aa63
 801aa24:	0801aa8f 	.word	0x0801aa8f
 801aa28:	0801ab31 	.word	0x0801ab31
 801aa2c:	0801ab3f 	.word	0x0801ab3f
 801aa30:	0801aab9 	.word	0x0801aab9
 801aa34:	0801aab9 	.word	0x0801aab9
 801aa38:	0801aab9 	.word	0x0801aab9
 801aa3c:	0801ab51 	.word	0x0801ab51
      case SUBSCRIPTION:
        if (handle->data_available) {
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d006      	beq.n	801aa58 <_rclc_execute+0x90>
          handle->subscription_callback(handle->data);
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa4e:	687a      	ldr	r2, [r7, #4]
 801aa50:	6892      	ldr	r2, [r2, #8]
 801aa52:	4610      	mov	r0, r2
 801aa54:	4798      	blx	r3
        } else {
          handle->subscription_callback(NULL);
        }
        break;
 801aa56:	e086      	b.n	801ab66 <_rclc_execute+0x19e>
          handle->subscription_callback(NULL);
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa5c:	2000      	movs	r0, #0
 801aa5e:	4798      	blx	r3
        break;
 801aa60:	e081      	b.n	801ab66 <_rclc_execute+0x19e>

      case SUBSCRIPTION_WITH_CONTEXT:
        if (handle->data_available) {
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d008      	beq.n	801aa7e <_rclc_execute+0xb6>
          handle->subscription_callback_with_context(
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            handle->data,
 801aa70:	687a      	ldr	r2, [r7, #4]
 801aa72:	6890      	ldr	r0, [r2, #8]
          handle->subscription_callback_with_context(
 801aa74:	687a      	ldr	r2, [r7, #4]
 801aa76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801aa78:	4611      	mov	r1, r2
 801aa7a:	4798      	blx	r3
        } else {
          handle->subscription_callback_with_context(
            NULL,
            handle->callback_context);
        }
        break;
 801aa7c:	e073      	b.n	801ab66 <_rclc_execute+0x19e>
          handle->subscription_callback_with_context(
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa82:	687a      	ldr	r2, [r7, #4]
 801aa84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801aa86:	4611      	mov	r1, r2
 801aa88:	2000      	movs	r0, #0
 801aa8a:	4798      	blx	r3
        break;
 801aa8c:	e06b      	b.n	801ab66 <_rclc_execute+0x19e>

      case TIMER:
        // case TIMER_WITH_CONTEXT:
        rc = rcl_timer_call(handle->timer);
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	685b      	ldr	r3, [r3, #4]
 801aa92:	4618      	mov	r0, r3
 801aa94:	f7fd ff44 	bl	8018920 <rcl_timer_call>
 801aa98:	60f8      	str	r0, [r7, #12]

        // cancled timer are not handled, return success
        if (rc == RCL_RET_TIMER_CANCELED) {
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	f240 3221 	movw	r2, #801	; 0x321
 801aaa0:	4293      	cmp	r3, r2
 801aaa2:	d102      	bne.n	801aaaa <_rclc_execute+0xe2>
          rc = RCL_RET_OK;
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	60fb      	str	r3, [r7, #12]
          break;
 801aaa8:	e05d      	b.n	801ab66 <_rclc_execute+0x19e>
        }

        if (rc != RCL_RET_OK) {
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d057      	beq.n	801ab60 <_rclc_execute+0x198>
          PRINT_RCLC_ERROR(rclc_execute, rcl_timer_call);
 801aab0:	f001 f91a 	bl	801bce8 <rcutils_reset_error>
          return rc;
 801aab4:	68fb      	ldr	r3, [r7, #12]
 801aab6:	e057      	b.n	801ab68 <_rclc_execute+0x1a0>

      case SERVICE:
      case SERVICE_WITH_REQUEST_ID:
      case SERVICE_WITH_CONTEXT:
        // differentiate user-side service types
        switch (handle->type) {
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	781b      	ldrb	r3, [r3, #0]
 801aabc:	2b07      	cmp	r3, #7
 801aabe:	d01a      	beq.n	801aaf6 <_rclc_execute+0x12e>
 801aac0:	2b07      	cmp	r3, #7
 801aac2:	dc22      	bgt.n	801ab0a <_rclc_execute+0x142>
 801aac4:	2b05      	cmp	r3, #5
 801aac6:	d002      	beq.n	801aace <_rclc_execute+0x106>
 801aac8:	2b06      	cmp	r3, #6
 801aaca:	d009      	beq.n	801aae0 <_rclc_execute+0x118>
              handle->data,
              handle->data_response_msg,
              handle->callback_context);
            break;
          default:
            break;  // flow can't reach here
 801aacc:	e01d      	b.n	801ab0a <_rclc_execute+0x142>
            handle->service_callback(
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              handle->data,
 801aad2:	687a      	ldr	r2, [r7, #4]
 801aad4:	6890      	ldr	r0, [r2, #8]
            handle->service_callback(
 801aad6:	687a      	ldr	r2, [r7, #4]
 801aad8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801aada:	4611      	mov	r1, r2
 801aadc:	4798      	blx	r3
            break;
 801aade:	e015      	b.n	801ab0c <_rclc_execute+0x144>
            handle->service_callback_with_reqid(
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              handle->data,
 801aae4:	687a      	ldr	r2, [r7, #4]
 801aae6:	6890      	ldr	r0, [r2, #8]
            handle->service_callback_with_reqid(
 801aae8:	687a      	ldr	r2, [r7, #4]
 801aaea:	f102 0110 	add.w	r1, r2, #16
 801aaee:	687a      	ldr	r2, [r7, #4]
 801aaf0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801aaf2:	4798      	blx	r3
            break;
 801aaf4:	e00a      	b.n	801ab0c <_rclc_execute+0x144>
            handle->service_callback_with_context(
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              handle->data,
 801aafa:	687a      	ldr	r2, [r7, #4]
 801aafc:	6890      	ldr	r0, [r2, #8]
            handle->service_callback_with_context(
 801aafe:	687a      	ldr	r2, [r7, #4]
 801ab00:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801ab02:	687a      	ldr	r2, [r7, #4]
 801ab04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801ab06:	4798      	blx	r3
            break;
 801ab08:	e000      	b.n	801ab0c <_rclc_execute+0x144>
            break;  // flow can't reach here
 801ab0a:	bf00      	nop
        }
        // handle rcl-side services
        rc = rcl_send_response(handle->service, &handle->req_id, handle->data_response_msg);
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	6858      	ldr	r0, [r3, #4]
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	f103 0110 	add.w	r1, r3, #16
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab1a:	461a      	mov	r2, r3
 801ab1c:	f7fc ff73 	bl	8017a06 <rcl_send_response>
 801ab20:	60f8      	str	r0, [r7, #12]
        if (rc != RCL_RET_OK) {
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	d01d      	beq.n	801ab64 <_rclc_execute+0x19c>
          PRINT_RCLC_ERROR(rclc_execute, rcl_send_response);
 801ab28:	f001 f8de 	bl	801bce8 <rcutils_reset_error>
          return rc;
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	e01b      	b.n	801ab68 <_rclc_execute+0x1a0>
        }
        break;

      case CLIENT:
        handle->client_callback(handle->data);
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ab34:	687a      	ldr	r2, [r7, #4]
 801ab36:	6892      	ldr	r2, [r2, #8]
 801ab38:	4610      	mov	r0, r2
 801ab3a:	4798      	blx	r3
        break;
 801ab3c:	e013      	b.n	801ab66 <_rclc_execute+0x19e>

      case CLIENT_WITH_REQUEST_ID:
        handle->client_callback_with_reqid(handle->data, &handle->req_id);
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ab42:	687a      	ldr	r2, [r7, #4]
 801ab44:	6890      	ldr	r0, [r2, #8]
 801ab46:	687a      	ldr	r2, [r7, #4]
 801ab48:	3210      	adds	r2, #16
 801ab4a:	4611      	mov	r1, r2
 801ab4c:	4798      	blx	r3
        break;
 801ab4e:	e00a      	b.n	801ab66 <_rclc_execute+0x19e>

      // case CLIENT_WITH_CONTEXT:   //TODO
      //   break;

      case GUARD_CONDITION:
        handle->gc_callback();
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ab54:	4798      	blx	r3
        break;
 801ab56:	e006      	b.n	801ab66 <_rclc_execute+0x19e>

      default:
        RCUTILS_LOG_DEBUG_NAMED(
          ROS_PACKAGE_NAME, "Error in _rclc_execute: unknwon handle type: %d",
          handle->type);
        return RCL_RET_ERROR;
 801ab58:	2301      	movs	r3, #1
 801ab5a:	e005      	b.n	801ab68 <_rclc_execute+0x1a0>
    }   // switch-case
  }
 801ab5c:	bf00      	nop
 801ab5e:	e002      	b.n	801ab66 <_rclc_execute+0x19e>
        break;
 801ab60:	bf00      	nop
 801ab62:	e000      	b.n	801ab66 <_rclc_execute+0x19e>
        break;
 801ab64:	bf00      	nop

  return rc;
 801ab66:	68fb      	ldr	r3, [r7, #12]
}
 801ab68:	4618      	mov	r0, r3
 801ab6a:	3710      	adds	r7, #16
 801ab6c:	46bd      	mov	sp, r7
 801ab6e:	bd80      	pop	{r7, pc}

0801ab70 <_rclc_default_scheduling>:


static
rcl_ret_t
_rclc_default_scheduling(rclc_executor_t * executor)
{
 801ab70:	b580      	push	{r7, lr}
 801ab72:	b086      	sub	sp, #24
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	6078      	str	r0, [r7, #4]
  RCL_CHECK_ARGUMENT_FOR_NULL(executor, RCL_RET_INVALID_ARGUMENT);
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	d101      	bne.n	801ab82 <_rclc_default_scheduling+0x12>
 801ab7e:	230b      	movs	r3, #11
 801ab80:	e075      	b.n	801ac6e <_rclc_default_scheduling+0xfe>
  rcl_ret_t rc = RCL_RET_OK;
 801ab82:	2300      	movs	r3, #0
 801ab84:	617b      	str	r3, [r7, #20]

  for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 801ab86:	2300      	movs	r3, #0
 801ab88:	613b      	str	r3, [r7, #16]
 801ab8a:	e018      	b.n	801abbe <_rclc_default_scheduling+0x4e>
    rc = _rclc_check_for_new_data(&executor->handles[i], &executor->wait_set);
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	685a      	ldr	r2, [r3, #4]
 801ab90:	693b      	ldr	r3, [r7, #16]
 801ab92:	019b      	lsls	r3, r3, #6
 801ab94:	441a      	add	r2, r3
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	3314      	adds	r3, #20
 801ab9a:	4619      	mov	r1, r3
 801ab9c:	4610      	mov	r0, r2
 801ab9e:	f7ff fddf 	bl	801a760 <_rclc_check_for_new_data>
 801aba2:	6178      	str	r0, [r7, #20]
    if ((rc != RCL_RET_OK) && (rc != RCL_RET_SUBSCRIPTION_TAKE_FAILED)) {
 801aba4:	697b      	ldr	r3, [r7, #20]
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d006      	beq.n	801abb8 <_rclc_default_scheduling+0x48>
 801abaa:	697b      	ldr	r3, [r7, #20]
 801abac:	f240 1291 	movw	r2, #401	; 0x191
 801abb0:	4293      	cmp	r3, r2
 801abb2:	d001      	beq.n	801abb8 <_rclc_default_scheduling+0x48>
      return rc;
 801abb4:	697b      	ldr	r3, [r7, #20]
 801abb6:	e05a      	b.n	801ac6e <_rclc_default_scheduling+0xfe>
  for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 801abb8:	693b      	ldr	r3, [r7, #16]
 801abba:	3301      	adds	r3, #1
 801abbc:	613b      	str	r3, [r7, #16]
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	689b      	ldr	r3, [r3, #8]
 801abc2:	693a      	ldr	r2, [r7, #16]
 801abc4:	429a      	cmp	r2, r3
 801abc6:	d208      	bcs.n	801abda <_rclc_default_scheduling+0x6a>
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	685a      	ldr	r2, [r3, #4]
 801abcc:	693b      	ldr	r3, [r7, #16]
 801abce:	019b      	lsls	r3, r3, #6
 801abd0:	4413      	add	r3, r2
 801abd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d1d8      	bne.n	801ab8c <_rclc_default_scheduling+0x1c>
    }
  }
  // if the trigger condition is fullfilled, fetch data and execute
  if (executor->trigger_function(
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801abde:	687a      	ldr	r2, [r7, #4]
 801abe0:	6850      	ldr	r0, [r2, #4]
 801abe2:	687a      	ldr	r2, [r7, #4]
 801abe4:	6891      	ldr	r1, [r2, #8]
 801abe6:	687a      	ldr	r2, [r7, #4]
 801abe8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801abea:	4798      	blx	r3
 801abec:	4603      	mov	r3, r0
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d03c      	beq.n	801ac6c <_rclc_default_scheduling+0xfc>
      executor->handles, executor->max_handles,
      executor->trigger_object))
  {
    // take new input data from DDS-queue and execute the corresponding callback of the handle
    for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 801abf2:	2300      	movs	r3, #0
 801abf4:	60fb      	str	r3, [r7, #12]
 801abf6:	e02b      	b.n	801ac50 <_rclc_default_scheduling+0xe0>
      rc = _rclc_take_new_data(&executor->handles[i], &executor->wait_set);
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	685a      	ldr	r2, [r3, #4]
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	019b      	lsls	r3, r3, #6
 801ac00:	441a      	add	r2, r3
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	3314      	adds	r3, #20
 801ac06:	4619      	mov	r1, r3
 801ac08:	4610      	mov	r0, r2
 801ac0a:	f7ff fe31 	bl	801a870 <_rclc_take_new_data>
 801ac0e:	6178      	str	r0, [r7, #20]
      if ((rc != RCL_RET_OK) && (rc != RCL_RET_SUBSCRIPTION_TAKE_FAILED) &&
 801ac10:	697b      	ldr	r3, [r7, #20]
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	d00b      	beq.n	801ac2e <_rclc_default_scheduling+0xbe>
 801ac16:	697b      	ldr	r3, [r7, #20]
 801ac18:	f240 1291 	movw	r2, #401	; 0x191
 801ac1c:	4293      	cmp	r3, r2
 801ac1e:	d006      	beq.n	801ac2e <_rclc_default_scheduling+0xbe>
 801ac20:	697b      	ldr	r3, [r7, #20]
 801ac22:	f240 2259 	movw	r2, #601	; 0x259
 801ac26:	4293      	cmp	r3, r2
 801ac28:	d001      	beq.n	801ac2e <_rclc_default_scheduling+0xbe>
        (rc != RCL_RET_SERVICE_TAKE_FAILED))
      {
        return rc;
 801ac2a:	697b      	ldr	r3, [r7, #20]
 801ac2c:	e01f      	b.n	801ac6e <_rclc_default_scheduling+0xfe>
      }
      rc = _rclc_execute(&executor->handles[i]);
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	685a      	ldr	r2, [r3, #4]
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	019b      	lsls	r3, r3, #6
 801ac36:	4413      	add	r3, r2
 801ac38:	4618      	mov	r0, r3
 801ac3a:	f7ff fec5 	bl	801a9c8 <_rclc_execute>
 801ac3e:	6178      	str	r0, [r7, #20]
      if (rc != RCL_RET_OK) {
 801ac40:	697b      	ldr	r3, [r7, #20]
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d001      	beq.n	801ac4a <_rclc_default_scheduling+0xda>
        return rc;
 801ac46:	697b      	ldr	r3, [r7, #20]
 801ac48:	e011      	b.n	801ac6e <_rclc_default_scheduling+0xfe>
    for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 801ac4a:	68fb      	ldr	r3, [r7, #12]
 801ac4c:	3301      	adds	r3, #1
 801ac4e:	60fb      	str	r3, [r7, #12]
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	689b      	ldr	r3, [r3, #8]
 801ac54:	68fa      	ldr	r2, [r7, #12]
 801ac56:	429a      	cmp	r2, r3
 801ac58:	d208      	bcs.n	801ac6c <_rclc_default_scheduling+0xfc>
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	685a      	ldr	r2, [r3, #4]
 801ac5e:	68fb      	ldr	r3, [r7, #12]
 801ac60:	019b      	lsls	r3, r3, #6
 801ac62:	4413      	add	r3, r2
 801ac64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	d1c5      	bne.n	801abf8 <_rclc_default_scheduling+0x88>
      }
    }
  }
  return rc;
 801ac6c:	697b      	ldr	r3, [r7, #20]
}
 801ac6e:	4618      	mov	r0, r3
 801ac70:	3718      	adds	r7, #24
 801ac72:	46bd      	mov	sp, r7
 801ac74:	bd80      	pop	{r7, pc}

0801ac76 <_rclc_let_scheduling>:

static
rcl_ret_t
_rclc_let_scheduling(rclc_executor_t * executor)
{
 801ac76:	b580      	push	{r7, lr}
 801ac78:	b086      	sub	sp, #24
 801ac7a:	af00      	add	r7, sp, #0
 801ac7c:	6078      	str	r0, [r7, #4]
  RCL_CHECK_ARGUMENT_FOR_NULL(executor, RCL_RET_INVALID_ARGUMENT);
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d101      	bne.n	801ac88 <_rclc_let_scheduling+0x12>
 801ac84:	230b      	movs	r3, #11
 801ac86:	e084      	b.n	801ad92 <_rclc_let_scheduling+0x11c>
  rcl_ret_t rc = RCL_RET_OK;
 801ac88:	2300      	movs	r3, #0
 801ac8a:	617b      	str	r3, [r7, #20]
  //    processed by the callbacks 'in this round' because all input data is read in the
  //    beginning and the incoming messages were copied.

  // step 0: check for available input data from DDS queue
  // complexity: O(n) where n denotes the number of handles
  for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 801ac8c:	2300      	movs	r3, #0
 801ac8e:	613b      	str	r3, [r7, #16]
 801ac90:	e018      	b.n	801acc4 <_rclc_let_scheduling+0x4e>
    rc = _rclc_check_for_new_data(&executor->handles[i], &executor->wait_set);
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	685a      	ldr	r2, [r3, #4]
 801ac96:	693b      	ldr	r3, [r7, #16]
 801ac98:	019b      	lsls	r3, r3, #6
 801ac9a:	441a      	add	r2, r3
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	3314      	adds	r3, #20
 801aca0:	4619      	mov	r1, r3
 801aca2:	4610      	mov	r0, r2
 801aca4:	f7ff fd5c 	bl	801a760 <_rclc_check_for_new_data>
 801aca8:	6178      	str	r0, [r7, #20]
    if ((rc != RCL_RET_OK) && (rc != RCL_RET_SUBSCRIPTION_TAKE_FAILED)) {
 801acaa:	697b      	ldr	r3, [r7, #20]
 801acac:	2b00      	cmp	r3, #0
 801acae:	d006      	beq.n	801acbe <_rclc_let_scheduling+0x48>
 801acb0:	697b      	ldr	r3, [r7, #20]
 801acb2:	f240 1291 	movw	r2, #401	; 0x191
 801acb6:	4293      	cmp	r3, r2
 801acb8:	d001      	beq.n	801acbe <_rclc_let_scheduling+0x48>
      return rc;
 801acba:	697b      	ldr	r3, [r7, #20]
 801acbc:	e069      	b.n	801ad92 <_rclc_let_scheduling+0x11c>
  for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 801acbe:	693b      	ldr	r3, [r7, #16]
 801acc0:	3301      	adds	r3, #1
 801acc2:	613b      	str	r3, [r7, #16]
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	689b      	ldr	r3, [r3, #8]
 801acc8:	693a      	ldr	r2, [r7, #16]
 801acca:	429a      	cmp	r2, r3
 801accc:	d208      	bcs.n	801ace0 <_rclc_let_scheduling+0x6a>
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	685a      	ldr	r2, [r3, #4]
 801acd2:	693b      	ldr	r3, [r7, #16]
 801acd4:	019b      	lsls	r3, r3, #6
 801acd6:	4413      	add	r3, r2
 801acd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d1d8      	bne.n	801ac92 <_rclc_let_scheduling+0x1c>
    }
  }

  // if the trigger condition is fullfilled, fetch data and execute
  // complexity: O(n) where n denotes the number of handles
  if (executor->trigger_function(
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ace4:	687a      	ldr	r2, [r7, #4]
 801ace6:	6850      	ldr	r0, [r2, #4]
 801ace8:	687a      	ldr	r2, [r7, #4]
 801acea:	6891      	ldr	r1, [r2, #8]
 801acec:	687a      	ldr	r2, [r7, #4]
 801acee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801acf0:	4798      	blx	r3
 801acf2:	4603      	mov	r3, r0
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d04b      	beq.n	801ad90 <_rclc_let_scheduling+0x11a>
      executor->handles, executor->max_handles,
      executor->trigger_object))
  {
    // step 1: read input data
    for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 801acf8:	2300      	movs	r3, #0
 801acfa:	60fb      	str	r3, [r7, #12]
 801acfc:	e018      	b.n	801ad30 <_rclc_let_scheduling+0xba>
      rc = _rclc_take_new_data(&executor->handles[i], &executor->wait_set);
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	685a      	ldr	r2, [r3, #4]
 801ad02:	68fb      	ldr	r3, [r7, #12]
 801ad04:	019b      	lsls	r3, r3, #6
 801ad06:	441a      	add	r2, r3
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	3314      	adds	r3, #20
 801ad0c:	4619      	mov	r1, r3
 801ad0e:	4610      	mov	r0, r2
 801ad10:	f7ff fdae 	bl	801a870 <_rclc_take_new_data>
 801ad14:	6178      	str	r0, [r7, #20]
      if ((rc != RCL_RET_OK) && (rc != RCL_RET_SUBSCRIPTION_TAKE_FAILED)) {
 801ad16:	697b      	ldr	r3, [r7, #20]
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d006      	beq.n	801ad2a <_rclc_let_scheduling+0xb4>
 801ad1c:	697b      	ldr	r3, [r7, #20]
 801ad1e:	f240 1291 	movw	r2, #401	; 0x191
 801ad22:	4293      	cmp	r3, r2
 801ad24:	d001      	beq.n	801ad2a <_rclc_let_scheduling+0xb4>
        return rc;
 801ad26:	697b      	ldr	r3, [r7, #20]
 801ad28:	e033      	b.n	801ad92 <_rclc_let_scheduling+0x11c>
    for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 801ad2a:	68fb      	ldr	r3, [r7, #12]
 801ad2c:	3301      	adds	r3, #1
 801ad2e:	60fb      	str	r3, [r7, #12]
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	689b      	ldr	r3, [r3, #8]
 801ad34:	68fa      	ldr	r2, [r7, #12]
 801ad36:	429a      	cmp	r2, r3
 801ad38:	d208      	bcs.n	801ad4c <_rclc_let_scheduling+0xd6>
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	685a      	ldr	r2, [r3, #4]
 801ad3e:	68fb      	ldr	r3, [r7, #12]
 801ad40:	019b      	lsls	r3, r3, #6
 801ad42:	4413      	add	r3, r2
 801ad44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d1d8      	bne.n	801acfe <_rclc_let_scheduling+0x88>
      }
    }

    // step 2:  process (execute)
    for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 801ad4c:	2300      	movs	r3, #0
 801ad4e:	60bb      	str	r3, [r7, #8]
 801ad50:	e010      	b.n	801ad74 <_rclc_let_scheduling+0xfe>
      rc = _rclc_execute(&executor->handles[i]);
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	685a      	ldr	r2, [r3, #4]
 801ad56:	68bb      	ldr	r3, [r7, #8]
 801ad58:	019b      	lsls	r3, r3, #6
 801ad5a:	4413      	add	r3, r2
 801ad5c:	4618      	mov	r0, r3
 801ad5e:	f7ff fe33 	bl	801a9c8 <_rclc_execute>
 801ad62:	6178      	str	r0, [r7, #20]
      if (rc != RCL_RET_OK) {
 801ad64:	697b      	ldr	r3, [r7, #20]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d001      	beq.n	801ad6e <_rclc_let_scheduling+0xf8>
        return rc;
 801ad6a:	697b      	ldr	r3, [r7, #20]
 801ad6c:	e011      	b.n	801ad92 <_rclc_let_scheduling+0x11c>
    for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 801ad6e:	68bb      	ldr	r3, [r7, #8]
 801ad70:	3301      	adds	r3, #1
 801ad72:	60bb      	str	r3, [r7, #8]
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	689b      	ldr	r3, [r3, #8]
 801ad78:	68ba      	ldr	r2, [r7, #8]
 801ad7a:	429a      	cmp	r2, r3
 801ad7c:	d208      	bcs.n	801ad90 <_rclc_let_scheduling+0x11a>
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	685a      	ldr	r2, [r3, #4]
 801ad82:	68bb      	ldr	r3, [r7, #8]
 801ad84:	019b      	lsls	r3, r3, #6
 801ad86:	4413      	add	r3, r2
 801ad88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d1e0      	bne.n	801ad52 <_rclc_let_scheduling+0xdc>
      }
    }
  }
  return rc;
 801ad90:	697b      	ldr	r3, [r7, #20]
}
 801ad92:	4618      	mov	r0, r3
 801ad94:	3718      	adds	r7, #24
 801ad96:	46bd      	mov	sp, r7
 801ad98:	bd80      	pop	{r7, pc}

0801ad9a <rclc_executor_prepare>:

rcl_ret_t
rclc_executor_prepare(rclc_executor_t * executor)
{
 801ad9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad9c:	b0a3      	sub	sp, #140	; 0x8c
 801ad9e:	af0a      	add	r7, sp, #40	; 0x28
 801ada0:	6578      	str	r0, [r7, #84]	; 0x54
  rcl_ret_t rc = RCL_RET_OK;
 801ada2:	2300      	movs	r3, #0
 801ada4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCL_CHECK_ARGUMENT_FOR_NULL(executor, RCL_RET_INVALID_ARGUMENT);
 801ada6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d101      	bne.n	801adb0 <rclc_executor_prepare+0x16>
 801adac:	230b      	movs	r3, #11
 801adae:	e05b      	b.n	801ae68 <rclc_executor_prepare+0xce>

  // initialize wait_set if
  // (1) this is the first invocation of executor_spin_some()
  // (2) executor_add_timer() or executor_add_subscription() has been called.
  //     i.e. a new timer or subscription has been added to the Executor.
  if (!rcl_wait_set_is_valid(&executor->wait_set)) {
 801adb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801adb2:	3314      	adds	r3, #20
 801adb4:	4618      	mov	r0, r3
 801adb6:	f000 fba0 	bl	801b4fa <rcl_wait_set_is_valid>
 801adba:	4603      	mov	r3, r0
 801adbc:	f083 0301 	eor.w	r3, r3, #1
 801adc0:	b2db      	uxtb	r3, r3
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d04f      	beq.n	801ae66 <rclc_executor_prepare+0xcc>
    // calling wait_set on zero_initialized wait_set multiple times is ok.
    rcl_ret_t rc = rcl_wait_set_fini(&executor->wait_set);
 801adc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801adc8:	3314      	adds	r3, #20
 801adca:	4618      	mov	r0, r3
 801adcc:	f7fe fac9 	bl	8019362 <rcl_wait_set_fini>
 801add0:	65b8      	str	r0, [r7, #88]	; 0x58
    if (rc != RCL_RET_OK) {
 801add2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801add4:	2b00      	cmp	r3, #0
 801add6:	d001      	beq.n	801addc <rclc_executor_prepare+0x42>
      PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_fini);
 801add8:	f000 ff86 	bl	801bce8 <rcutils_reset_error>
    }
    // initialize wait_set
    executor->wait_set = rcl_get_zero_initialized_wait_set();
 801addc:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801adde:	f107 0318 	add.w	r3, r7, #24
 801ade2:	4618      	mov	r0, r3
 801ade4:	f7fe f9a4 	bl	8019130 <rcl_get_zero_initialized_wait_set>
 801ade8:	3414      	adds	r4, #20
 801adea:	f107 0518 	add.w	r5, r7, #24
 801adee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801adf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801adf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801adf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801adf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801adf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801adfa:	682b      	ldr	r3, [r5, #0]
 801adfc:	6023      	str	r3, [r4, #0]
    // create sufficient memory space for all handles in the wait_set
    rc = rcl_wait_set_init(
 801adfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ae00:	f103 0c14 	add.w	ip, r3, #20
 801ae04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ae06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ae08:	617b      	str	r3, [r7, #20]
 801ae0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ae0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ae0e:	613a      	str	r2, [r7, #16]
 801ae10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ae12:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801ae14:	60f8      	str	r0, [r7, #12]
 801ae16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ae18:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 801ae1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ae1c:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 801ae1e:	60bc      	str	r4, [r7, #8]
 801ae20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ae22:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 801ae24:	607d      	str	r5, [r7, #4]
 801ae26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ae28:	6819      	ldr	r1, [r3, #0]
 801ae2a:	6039      	str	r1, [r7, #0]
      &executor->wait_set, executor->info.number_of_subscriptions,
      executor->info.number_of_guard_conditions, executor->info.number_of_timers,
      executor->info.number_of_clients, executor->info.number_of_services,
      executor->info.number_of_events,
      executor->context,
      *executor->allocator);
 801ae2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ae2e:	691b      	ldr	r3, [r3, #16]
    rc = rcl_wait_set_init(
 801ae30:	ac04      	add	r4, sp, #16
 801ae32:	461d      	mov	r5, r3
 801ae34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ae36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ae38:	682b      	ldr	r3, [r5, #0]
 801ae3a:	6023      	str	r3, [r4, #0]
 801ae3c:	6839      	ldr	r1, [r7, #0]
 801ae3e:	9103      	str	r1, [sp, #12]
 801ae40:	687d      	ldr	r5, [r7, #4]
 801ae42:	9502      	str	r5, [sp, #8]
 801ae44:	68bc      	ldr	r4, [r7, #8]
 801ae46:	9401      	str	r4, [sp, #4]
 801ae48:	9600      	str	r6, [sp, #0]
 801ae4a:	68fb      	ldr	r3, [r7, #12]
 801ae4c:	693a      	ldr	r2, [r7, #16]
 801ae4e:	6979      	ldr	r1, [r7, #20]
 801ae50:	4660      	mov	r0, ip
 801ae52:	f7fe f9bb 	bl	80191cc <rcl_wait_set_init>
 801ae56:	65b8      	str	r0, [r7, #88]	; 0x58

    if (rc != RCL_RET_OK) {
 801ae58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d003      	beq.n	801ae66 <rclc_executor_prepare+0xcc>
      PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_init);
 801ae5e:	f000 ff43 	bl	801bce8 <rcutils_reset_error>
      return rc;
 801ae62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ae64:	e000      	b.n	801ae68 <rclc_executor_prepare+0xce>
    }
  }

  return rc;
 801ae66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 801ae68:	4618      	mov	r0, r3
 801ae6a:	3764      	adds	r7, #100	; 0x64
 801ae6c:	46bd      	mov	sp, r7
 801ae6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ae70 <rclc_executor_spin_some>:

rcl_ret_t
rclc_executor_spin_some(rclc_executor_t * executor, const uint64_t timeout_ns)
{
 801ae70:	b580      	push	{r7, lr}
 801ae72:	b086      	sub	sp, #24
 801ae74:	af00      	add	r7, sp, #0
 801ae76:	60f8      	str	r0, [r7, #12]
 801ae78:	e9c7 2300 	strd	r2, r3, [r7]
  rcl_ret_t rc = RCL_RET_OK;
 801ae7c:	2300      	movs	r3, #0
 801ae7e:	617b      	str	r3, [r7, #20]
  RCL_CHECK_ARGUMENT_FOR_NULL(executor, RCL_RET_INVALID_ARGUMENT);
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d101      	bne.n	801ae8a <rclc_executor_spin_some+0x1a>
 801ae86:	230b      	movs	r3, #11
 801ae88:	e100      	b.n	801b08c <rclc_executor_spin_some+0x21c>
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "spin_some");

  if (!rcl_context_is_valid(executor->context)) {
 801ae8a:	68fb      	ldr	r3, [r7, #12]
 801ae8c:	681b      	ldr	r3, [r3, #0]
 801ae8e:	4618      	mov	r0, r3
 801ae90:	f7fa fd24 	bl	80158dc <rcl_context_is_valid>
 801ae94:	4603      	mov	r3, r0
 801ae96:	f083 0301 	eor.w	r3, r3, #1
 801ae9a:	b2db      	uxtb	r3, r3
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d003      	beq.n	801aea8 <rclc_executor_spin_some+0x38>
    PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_context_not_valid);
 801aea0:	f000 ff22 	bl	801bce8 <rcutils_reset_error>
    return RCL_RET_ERROR;
 801aea4:	2301      	movs	r3, #1
 801aea6:	e0f1      	b.n	801b08c <rclc_executor_spin_some+0x21c>
  }

  rclc_executor_prepare(executor);
 801aea8:	68f8      	ldr	r0, [r7, #12]
 801aeaa:	f7ff ff76 	bl	801ad9a <rclc_executor_prepare>

  // set rmw fields to NULL
  rc = rcl_wait_set_clear(&executor->wait_set);
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	3314      	adds	r3, #20
 801aeb2:	4618      	mov	r0, r3
 801aeb4:	f7fe fad0 	bl	8019458 <rcl_wait_set_clear>
 801aeb8:	6178      	str	r0, [r7, #20]
  if (rc != RCL_RET_OK) {
 801aeba:	697b      	ldr	r3, [r7, #20]
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	d003      	beq.n	801aec8 <rclc_executor_spin_some+0x58>
    PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_clear);
 801aec0:	f000 ff12 	bl	801bce8 <rcutils_reset_error>
    return rc;
 801aec4:	697b      	ldr	r3, [r7, #20]
 801aec6:	e0e1      	b.n	801b08c <rclc_executor_spin_some+0x21c>
  }

  // (jst3si) put in a sub-function - for improved readability
  // add handles to wait_set
  for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 801aec8:	2300      	movs	r3, #0
 801aeca:	613b      	str	r3, [r7, #16]
 801aecc:	e0b0      	b.n	801b030 <rclc_executor_spin_some+0x1c0>
    RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "wait_set_add_* %d", executor->handles[i].type);
    switch (executor->handles[i].type) {
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	685a      	ldr	r2, [r3, #4]
 801aed2:	693b      	ldr	r3, [r7, #16]
 801aed4:	019b      	lsls	r3, r3, #6
 801aed6:	4413      	add	r3, r2
 801aed8:	781b      	ldrb	r3, [r3, #0]
 801aeda:	2b08      	cmp	r3, #8
 801aedc:	f200 8098 	bhi.w	801b010 <rclc_executor_spin_some+0x1a0>
 801aee0:	a201      	add	r2, pc, #4	; (adr r2, 801aee8 <rclc_executor_spin_some+0x78>)
 801aee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aee6:	bf00      	nop
 801aee8:	0801af0d 	.word	0x0801af0d
 801aeec:	0801af0d 	.word	0x0801af0d
 801aef0:	0801af41 	.word	0x0801af41
 801aef4:	0801afa9 	.word	0x0801afa9
 801aef8:	0801afa9 	.word	0x0801afa9
 801aefc:	0801af75 	.word	0x0801af75
 801af00:	0801af75 	.word	0x0801af75
 801af04:	0801af75 	.word	0x0801af75
 801af08:	0801afdd 	.word	0x0801afdd
      case SUBSCRIPTION:
      case SUBSCRIPTION_WITH_CONTEXT:
        // add subscription to wait_set and save index
        rc = rcl_wait_set_add_subscription(
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	f103 0014 	add.w	r0, r3, #20
          &executor->wait_set, executor->handles[i].subscription,
 801af12:	68fb      	ldr	r3, [r7, #12]
 801af14:	685a      	ldr	r2, [r3, #4]
 801af16:	693b      	ldr	r3, [r7, #16]
 801af18:	019b      	lsls	r3, r3, #6
 801af1a:	4413      	add	r3, r2
 801af1c:	6859      	ldr	r1, [r3, #4]
          &executor->handles[i].index);
 801af1e:	68fb      	ldr	r3, [r7, #12]
 801af20:	685a      	ldr	r2, [r3, #4]
 801af22:	693b      	ldr	r3, [r7, #16]
 801af24:	019b      	lsls	r3, r3, #6
 801af26:	4413      	add	r3, r2
        rc = rcl_wait_set_add_subscription(
 801af28:	3334      	adds	r3, #52	; 0x34
 801af2a:	461a      	mov	r2, r3
 801af2c:	f7fe fa3f 	bl	80193ae <rcl_wait_set_add_subscription>
 801af30:	6178      	str	r0, [r7, #20]
        if (rc == RCL_RET_OK) {
 801af32:	697b      	ldr	r3, [r7, #20]
 801af34:	2b00      	cmp	r3, #0
 801af36:	d06f      	beq.n	801b018 <rclc_executor_spin_some+0x1a8>
          RCUTILS_LOG_DEBUG_NAMED(
            ROS_PACKAGE_NAME,
            "Subscription added to wait_set_subscription[%ld]",
            executor->handles[i].index);
        } else {
          PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_add_subscription);
 801af38:	f000 fed6 	bl	801bce8 <rcutils_reset_error>
          return rc;
 801af3c:	697b      	ldr	r3, [r7, #20]
 801af3e:	e0a5      	b.n	801b08c <rclc_executor_spin_some+0x21c>
        break;

      case TIMER:
        // case TIMER_WITH_CONTEXT:
        // add timer to wait_set and save index
        rc = rcl_wait_set_add_timer(
 801af40:	68fb      	ldr	r3, [r7, #12]
 801af42:	f103 0014 	add.w	r0, r3, #20
          &executor->wait_set, executor->handles[i].timer,
 801af46:	68fb      	ldr	r3, [r7, #12]
 801af48:	685a      	ldr	r2, [r3, #4]
 801af4a:	693b      	ldr	r3, [r7, #16]
 801af4c:	019b      	lsls	r3, r3, #6
 801af4e:	4413      	add	r3, r2
 801af50:	6859      	ldr	r1, [r3, #4]
          &executor->handles[i].index);
 801af52:	68fb      	ldr	r3, [r7, #12]
 801af54:	685a      	ldr	r2, [r3, #4]
 801af56:	693b      	ldr	r3, [r7, #16]
 801af58:	019b      	lsls	r3, r3, #6
 801af5a:	4413      	add	r3, r2
        rc = rcl_wait_set_add_timer(
 801af5c:	3334      	adds	r3, #52	; 0x34
 801af5e:	461a      	mov	r2, r3
 801af60:	f7fe feb8 	bl	8019cd4 <rcl_wait_set_add_timer>
 801af64:	6178      	str	r0, [r7, #20]
        if (rc == RCL_RET_OK) {
 801af66:	697b      	ldr	r3, [r7, #20]
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d057      	beq.n	801b01c <rclc_executor_spin_some+0x1ac>
          RCUTILS_LOG_DEBUG_NAMED(
            ROS_PACKAGE_NAME, "Timer added to wait_set_timers[%ld]",
            executor->handles[i].index);
        } else {
          PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_add_timer);
 801af6c:	f000 febc 	bl	801bce8 <rcutils_reset_error>
          return rc;
 801af70:	697b      	ldr	r3, [r7, #20]
 801af72:	e08b      	b.n	801b08c <rclc_executor_spin_some+0x21c>

      case SERVICE:
      case SERVICE_WITH_REQUEST_ID:
      case SERVICE_WITH_CONTEXT:
        // add service to wait_set and save index
        rc = rcl_wait_set_add_service(
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	f103 0014 	add.w	r0, r3, #20
          &executor->wait_set, executor->handles[i].service,
 801af7a:	68fb      	ldr	r3, [r7, #12]
 801af7c:	685a      	ldr	r2, [r3, #4]
 801af7e:	693b      	ldr	r3, [r7, #16]
 801af80:	019b      	lsls	r3, r3, #6
 801af82:	4413      	add	r3, r2
 801af84:	6859      	ldr	r1, [r3, #4]
          &executor->handles[i].index);
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	685a      	ldr	r2, [r3, #4]
 801af8a:	693b      	ldr	r3, [r7, #16]
 801af8c:	019b      	lsls	r3, r3, #6
 801af8e:	4413      	add	r3, r2
        rc = rcl_wait_set_add_service(
 801af90:	3334      	adds	r3, #52	; 0x34
 801af92:	461a      	mov	r2, r3
 801af94:	f7fe ff52 	bl	8019e3c <rcl_wait_set_add_service>
 801af98:	6178      	str	r0, [r7, #20]
        if (rc == RCL_RET_OK) {
 801af9a:	697b      	ldr	r3, [r7, #20]
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d03f      	beq.n	801b020 <rclc_executor_spin_some+0x1b0>
          RCUTILS_LOG_DEBUG_NAMED(
            ROS_PACKAGE_NAME, "Service added to wait_set_service[%ld]",
            executor->handles[i].index);
        } else {
          PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_add_service);
 801afa0:	f000 fea2 	bl	801bce8 <rcutils_reset_error>
          return rc;
 801afa4:	697b      	ldr	r3, [r7, #20]
 801afa6:	e071      	b.n	801b08c <rclc_executor_spin_some+0x21c>

      case CLIENT:
      case CLIENT_WITH_REQUEST_ID:
        // case CLIENT_WITH_CONTEXT:
        // add client to wait_set and save index
        rc = rcl_wait_set_add_client(
 801afa8:	68fb      	ldr	r3, [r7, #12]
 801afaa:	f103 0014 	add.w	r0, r3, #20
          &executor->wait_set, executor->handles[i].client,
 801afae:	68fb      	ldr	r3, [r7, #12]
 801afb0:	685a      	ldr	r2, [r3, #4]
 801afb2:	693b      	ldr	r3, [r7, #16]
 801afb4:	019b      	lsls	r3, r3, #6
 801afb6:	4413      	add	r3, r2
 801afb8:	6859      	ldr	r1, [r3, #4]
          &executor->handles[i].index);
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	685a      	ldr	r2, [r3, #4]
 801afbe:	693b      	ldr	r3, [r7, #16]
 801afc0:	019b      	lsls	r3, r3, #6
 801afc2:	4413      	add	r3, r2
        rc = rcl_wait_set_add_client(
 801afc4:	3334      	adds	r3, #52	; 0x34
 801afc6:	461a      	mov	r2, r3
 801afc8:	f7fe fee3 	bl	8019d92 <rcl_wait_set_add_client>
 801afcc:	6178      	str	r0, [r7, #20]
        if (rc == RCL_RET_OK) {
 801afce:	697b      	ldr	r3, [r7, #20]
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	d027      	beq.n	801b024 <rclc_executor_spin_some+0x1b4>
          RCUTILS_LOG_DEBUG_NAMED(
            ROS_PACKAGE_NAME, "Client added to wait_set_client[%ld]",
            executor->handles[i].index);
        } else {
          PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_add_client);
 801afd4:	f000 fe88 	bl	801bce8 <rcutils_reset_error>
          return rc;
 801afd8:	697b      	ldr	r3, [r7, #20]
 801afda:	e057      	b.n	801b08c <rclc_executor_spin_some+0x21c>
        break;

      case GUARD_CONDITION:
        // case GUARD_CONDITION_WITH_CONTEXT:
        // add guard_condition to wait_set and save index
        rc = rcl_wait_set_add_guard_condition(
 801afdc:	68fb      	ldr	r3, [r7, #12]
 801afde:	f103 0014 	add.w	r0, r3, #20
          &executor->wait_set, executor->handles[i].gc,
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	685a      	ldr	r2, [r3, #4]
 801afe6:	693b      	ldr	r3, [r7, #16]
 801afe8:	019b      	lsls	r3, r3, #6
 801afea:	4413      	add	r3, r2
 801afec:	6859      	ldr	r1, [r3, #4]
          &executor->handles[i].index);
 801afee:	68fb      	ldr	r3, [r7, #12]
 801aff0:	685a      	ldr	r2, [r3, #4]
 801aff2:	693b      	ldr	r3, [r7, #16]
 801aff4:	019b      	lsls	r3, r3, #6
 801aff6:	4413      	add	r3, r2
        rc = rcl_wait_set_add_guard_condition(
 801aff8:	3334      	adds	r3, #52	; 0x34
 801affa:	461a      	mov	r2, r3
 801affc:	f7fe fe15 	bl	8019c2a <rcl_wait_set_add_guard_condition>
 801b000:	6178      	str	r0, [r7, #20]
        if (rc == RCL_RET_OK) {
 801b002:	697b      	ldr	r3, [r7, #20]
 801b004:	2b00      	cmp	r3, #0
 801b006:	d00f      	beq.n	801b028 <rclc_executor_spin_some+0x1b8>
          RCUTILS_LOG_DEBUG_NAMED(
            ROS_PACKAGE_NAME, "Guard_condition added to wait_set_client[%ld]",
            executor->handles[i].index);
        } else {
          PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_add_guard_condition);
 801b008:	f000 fe6e 	bl	801bce8 <rcutils_reset_error>
          return rc;
 801b00c:	697b      	ldr	r3, [r7, #20]
 801b00e:	e03d      	b.n	801b08c <rclc_executor_spin_some+0x21c>

      default:
        RCUTILS_LOG_DEBUG_NAMED(
          ROS_PACKAGE_NAME, "Error: unknown handle type: %d",
          executor->handles[i].type);
        PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_add_unknown_handle);
 801b010:	f000 fe6a 	bl	801bce8 <rcutils_reset_error>
        return RCL_RET_ERROR;
 801b014:	2301      	movs	r3, #1
 801b016:	e039      	b.n	801b08c <rclc_executor_spin_some+0x21c>
        break;
 801b018:	bf00      	nop
 801b01a:	e006      	b.n	801b02a <rclc_executor_spin_some+0x1ba>
        break;
 801b01c:	bf00      	nop
 801b01e:	e004      	b.n	801b02a <rclc_executor_spin_some+0x1ba>
        break;
 801b020:	bf00      	nop
 801b022:	e002      	b.n	801b02a <rclc_executor_spin_some+0x1ba>
        break;
 801b024:	bf00      	nop
 801b026:	e000      	b.n	801b02a <rclc_executor_spin_some+0x1ba>
        break;
 801b028:	bf00      	nop
  for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 801b02a:	693b      	ldr	r3, [r7, #16]
 801b02c:	3301      	adds	r3, #1
 801b02e:	613b      	str	r3, [r7, #16]
 801b030:	68fb      	ldr	r3, [r7, #12]
 801b032:	689b      	ldr	r3, [r3, #8]
 801b034:	693a      	ldr	r2, [r7, #16]
 801b036:	429a      	cmp	r2, r3
 801b038:	d209      	bcs.n	801b04e <rclc_executor_spin_some+0x1de>
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	685a      	ldr	r2, [r3, #4]
 801b03e:	693b      	ldr	r3, [r7, #16]
 801b040:	019b      	lsls	r3, r3, #6
 801b042:	4413      	add	r3, r2
 801b044:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b048:	2b00      	cmp	r3, #0
 801b04a:	f47f af40 	bne.w	801aece <rclc_executor_spin_some+0x5e>
    }
  }

  // wait up to 'timeout_ns' to receive notification about which handles reveived
  // new data from DDS queue.
  rc = rcl_wait(&executor->wait_set, timeout_ns);
 801b04e:	68fb      	ldr	r3, [r7, #12]
 801b050:	f103 0114 	add.w	r1, r3, #20
 801b054:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b058:	4608      	mov	r0, r1
 801b05a:	f7fe ff45 	bl	8019ee8 <rcl_wait>
 801b05e:	6178      	str	r0, [r7, #20]
  RCLC_UNUSED(rc);

  // based on semantics process input data
  switch (executor->data_comm_semantics) {
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801b066:	2b00      	cmp	r3, #0
 801b068:	d006      	beq.n	801b078 <rclc_executor_spin_some+0x208>
 801b06a:	2b01      	cmp	r3, #1
 801b06c:	d109      	bne.n	801b082 <rclc_executor_spin_some+0x212>
    case LET:
      rc = _rclc_let_scheduling(executor);
 801b06e:	68f8      	ldr	r0, [r7, #12]
 801b070:	f7ff fe01 	bl	801ac76 <_rclc_let_scheduling>
 801b074:	6178      	str	r0, [r7, #20]
      break;
 801b076:	e008      	b.n	801b08a <rclc_executor_spin_some+0x21a>
    case RCLCPP_EXECUTOR:
      rc = _rclc_default_scheduling(executor);
 801b078:	68f8      	ldr	r0, [r7, #12]
 801b07a:	f7ff fd79 	bl	801ab70 <_rclc_default_scheduling>
 801b07e:	6178      	str	r0, [r7, #20]
      break;
 801b080:	e003      	b.n	801b08a <rclc_executor_spin_some+0x21a>
    default:
      PRINT_RCLC_ERROR(rclc_executor_spin_some, unknown_semantics);
 801b082:	f000 fe31 	bl	801bce8 <rcutils_reset_error>
      return RCL_RET_ERROR;
 801b086:	2301      	movs	r3, #1
 801b088:	e000      	b.n	801b08c <rclc_executor_spin_some+0x21c>
  }

  return rc;
 801b08a:	697b      	ldr	r3, [r7, #20]
}
 801b08c:	4618      	mov	r0, r3
 801b08e:	3718      	adds	r7, #24
 801b090:	46bd      	mov	sp, r7
 801b092:	bd80      	pop	{r7, pc}

0801b094 <rclc_executor_set_trigger>:
rcl_ret_t
rclc_executor_set_trigger(
  rclc_executor_t * executor,
  rclc_executor_trigger_t trigger_function,
  void * trigger_object)
{
 801b094:	b480      	push	{r7}
 801b096:	b085      	sub	sp, #20
 801b098:	af00      	add	r7, sp, #0
 801b09a:	60f8      	str	r0, [r7, #12]
 801b09c:	60b9      	str	r1, [r7, #8]
 801b09e:	607a      	str	r2, [r7, #4]
  RCL_CHECK_ARGUMENT_FOR_NULL(executor, RCL_RET_INVALID_ARGUMENT);
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	d101      	bne.n	801b0aa <rclc_executor_set_trigger+0x16>
 801b0a6:	230b      	movs	r3, #11
 801b0a8:	e006      	b.n	801b0b8 <rclc_executor_set_trigger+0x24>
  executor->trigger_function = trigger_function;
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	68ba      	ldr	r2, [r7, #8]
 801b0ae:	671a      	str	r2, [r3, #112]	; 0x70
  executor->trigger_object = trigger_object;
 801b0b0:	68fb      	ldr	r3, [r7, #12]
 801b0b2:	687a      	ldr	r2, [r7, #4]
 801b0b4:	675a      	str	r2, [r3, #116]	; 0x74
  return RCL_RET_OK;
 801b0b6:	2300      	movs	r3, #0
}
 801b0b8:	4618      	mov	r0, r3
 801b0ba:	3714      	adds	r7, #20
 801b0bc:	46bd      	mov	sp, r7
 801b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0c2:	4770      	bx	lr

0801b0c4 <rclc_executor_trigger_any>:
  }
  return true;
}

bool rclc_executor_trigger_any(rclc_executor_handle_t * handles, unsigned int size, void * obj)
{
 801b0c4:	b480      	push	{r7}
 801b0c6:	b087      	sub	sp, #28
 801b0c8:	af00      	add	r7, sp, #0
 801b0ca:	60f8      	str	r0, [r7, #12]
 801b0cc:	60b9      	str	r1, [r7, #8]
 801b0ce:	607a      	str	r2, [r7, #4]
  RCL_CHECK_FOR_NULL_WITH_MSG(handles, "handles is NULL", return false);
 801b0d0:	68fb      	ldr	r3, [r7, #12]
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	d101      	bne.n	801b0da <rclc_executor_trigger_any+0x16>
 801b0d6:	2300      	movs	r3, #0
 801b0d8:	e01e      	b.n	801b118 <rclc_executor_trigger_any+0x54>
  RCLC_UNUSED(obj);
  // did not use (i<size && handles[i].initialized) as loop-condition
  // because for last index i==size this would result in out-of-bound access
  for (unsigned int i = 0; i < size; i++) {
 801b0da:	2300      	movs	r3, #0
 801b0dc:	617b      	str	r3, [r7, #20]
 801b0de:	e014      	b.n	801b10a <rclc_executor_trigger_any+0x46>
    if (handles[i].initialized) {
 801b0e0:	697b      	ldr	r3, [r7, #20]
 801b0e2:	019b      	lsls	r3, r3, #6
 801b0e4:	68fa      	ldr	r2, [r7, #12]
 801b0e6:	4413      	add	r3, r2
 801b0e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d011      	beq.n	801b114 <rclc_executor_trigger_any+0x50>
      if (handles[i].data_available == true) {
 801b0f0:	697b      	ldr	r3, [r7, #20]
 801b0f2:	019b      	lsls	r3, r3, #6
 801b0f4:	68fa      	ldr	r2, [r7, #12]
 801b0f6:	4413      	add	r3, r2
 801b0f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d001      	beq.n	801b104 <rclc_executor_trigger_any+0x40>
        return true;
 801b100:	2301      	movs	r3, #1
 801b102:	e009      	b.n	801b118 <rclc_executor_trigger_any+0x54>
  for (unsigned int i = 0; i < size; i++) {
 801b104:	697b      	ldr	r3, [r7, #20]
 801b106:	3301      	adds	r3, #1
 801b108:	617b      	str	r3, [r7, #20]
 801b10a:	697a      	ldr	r2, [r7, #20]
 801b10c:	68bb      	ldr	r3, [r7, #8]
 801b10e:	429a      	cmp	r2, r3
 801b110:	d3e6      	bcc.n	801b0e0 <rclc_executor_trigger_any+0x1c>
 801b112:	e000      	b.n	801b116 <rclc_executor_trigger_any+0x52>
      }
    } else {
      break;
 801b114:	bf00      	nop
    }
  }
  return false;
 801b116:	2300      	movs	r3, #0
}
 801b118:	4618      	mov	r0, r3
 801b11a:	371c      	adds	r7, #28
 801b11c:	46bd      	mov	sp, r7
 801b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b122:	4770      	bx	lr

0801b124 <rclc_executor_handle_counters_zero_init>:


// initialization of handle_counters object
rcl_ret_t
rclc_executor_handle_counters_zero_init(rclc_executor_handle_counters_t * handle_counters)
{
 801b124:	b580      	push	{r7, lr}
 801b126:	b082      	sub	sp, #8
 801b128:	af00      	add	r7, sp, #0
 801b12a:	6078      	str	r0, [r7, #4]
  RCL_CHECK_ARGUMENT_FOR_NULL(handle_counters, RCL_RET_INVALID_ARGUMENT);
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d101      	bne.n	801b136 <rclc_executor_handle_counters_zero_init+0x12>
 801b132:	230b      	movs	r3, #11
 801b134:	e005      	b.n	801b142 <rclc_executor_handle_counters_zero_init+0x1e>
  memset(handle_counters, 0, sizeof(rclc_executor_handle_counters_t));
 801b136:	2218      	movs	r2, #24
 801b138:	2100      	movs	r1, #0
 801b13a:	6878      	ldr	r0, [r7, #4]
 801b13c:	f005 fde8 	bl	8020d10 <memset>
  return RCL_RET_OK;
 801b140:	2300      	movs	r3, #0
}
 801b142:	4618      	mov	r0, r3
 801b144:	3708      	adds	r7, #8
 801b146:	46bd      	mov	sp, r7
 801b148:	bd80      	pop	{r7, pc}

0801b14a <rclc_executor_handle_init>:
// initialization of handle object
rcl_ret_t
rclc_executor_handle_init(
  rclc_executor_handle_t * handle,
  size_t max_handles)
{
 801b14a:	b480      	push	{r7}
 801b14c:	b083      	sub	sp, #12
 801b14e:	af00      	add	r7, sp, #0
 801b150:	6078      	str	r0, [r7, #4]
 801b152:	6039      	str	r1, [r7, #0]
  RCL_CHECK_ARGUMENT_FOR_NULL(handle, RCL_RET_INVALID_ARGUMENT);
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	2b00      	cmp	r3, #0
 801b158:	d101      	bne.n	801b15e <rclc_executor_handle_init+0x14>
 801b15a:	230b      	movs	r3, #11
 801b15c:	e02c      	b.n	801b1b8 <rclc_executor_handle_init+0x6e>
  handle->type = NONE;
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	2209      	movs	r2, #9
 801b162:	701a      	strb	r2, [r3, #0]
  handle->invocation = ON_NEW_DATA;
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	2200      	movs	r2, #0
 801b168:	705a      	strb	r2, [r3, #1]
  // Note, the pointer to subscription, timer, service, client, gc is a union
  // and a single NULL assignment should be sufficient.
  handle->subscription = NULL;
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	2200      	movs	r2, #0
 801b16e:	605a      	str	r2, [r3, #4]
  handle->timer = NULL;
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	2200      	movs	r2, #0
 801b174:	605a      	str	r2, [r3, #4]
  handle->service = NULL;
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	2200      	movs	r2, #0
 801b17a:	605a      	str	r2, [r3, #4]
  handle->client = NULL;
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	2200      	movs	r2, #0
 801b180:	605a      	str	r2, [r3, #4]
  handle->gc = NULL;
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	2200      	movs	r2, #0
 801b186:	605a      	str	r2, [r3, #4]

  handle->data = NULL;
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	2200      	movs	r2, #0
 801b18c:	609a      	str	r2, [r3, #8]
  handle->data_response_msg = NULL;
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	2200      	movs	r2, #0
 801b192:	629a      	str	r2, [r3, #40]	; 0x28
  handle->callback_context = NULL;
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	2200      	movs	r2, #0
 801b198:	62da      	str	r2, [r3, #44]	; 0x2c

  handle->subscription_callback = NULL;
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	2200      	movs	r2, #0
 801b19e:	631a      	str	r2, [r3, #48]	; 0x30
  //   handle->service_callback == NULL;
  //   handle->client_callback == NULL;
  //   handle->gc_callback == NULL
  //   ...

  handle->index = max_handles;
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	683a      	ldr	r2, [r7, #0]
 801b1a4:	635a      	str	r2, [r3, #52]	; 0x34
  handle->initialized = false;
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	2200      	movs	r2, #0
 801b1aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  handle->data_available = false;
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	2200      	movs	r2, #0
 801b1b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  return RCL_RET_OK;
 801b1b6:	2300      	movs	r3, #0
}
 801b1b8:	4618      	mov	r0, r3
 801b1ba:	370c      	adds	r7, #12
 801b1bc:	46bd      	mov	sp, r7
 801b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1c2:	4770      	bx	lr

0801b1c4 <rclc_support_init>:
rclc_support_init(
  rclc_support_t * support,
  int argc,
  char const * const * argv,
  rcl_allocator_t * allocator)
{
 801b1c4:	b5b0      	push	{r4, r5, r7, lr}
 801b1c6:	b088      	sub	sp, #32
 801b1c8:	af02      	add	r7, sp, #8
 801b1ca:	60f8      	str	r0, [r7, #12]
 801b1cc:	60b9      	str	r1, [r7, #8]
 801b1ce:	607a      	str	r2, [r7, #4]
 801b1d0:	603b      	str	r3, [r7, #0]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b1d2:	68fb      	ldr	r3, [r7, #12]
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	d101      	bne.n	801b1dc <rclc_support_init+0x18>
 801b1d8:	230b      	movs	r3, #11
 801b1da:	e036      	b.n	801b24a <rclc_support_init+0x86>
    support, "support is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b1dc:	683b      	ldr	r3, [r7, #0]
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	d101      	bne.n	801b1e6 <rclc_support_init+0x22>
 801b1e2:	230b      	movs	r3, #11
 801b1e4:	e031      	b.n	801b24a <rclc_support_init+0x86>
    allocator, "allocator is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  rcl_ret_t rc = RCL_RET_OK;
 801b1e6:	2300      	movs	r3, #0
 801b1e8:	617b      	str	r3, [r7, #20]

  rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 801b1ea:	f7fb f9af 	bl	801654c <rcl_get_zero_initialized_init_options>
 801b1ee:	4603      	mov	r3, r0
 801b1f0:	613b      	str	r3, [r7, #16]
  rc = rcl_init_options_init(&init_options, (*allocator) );
 801b1f2:	683b      	ldr	r3, [r7, #0]
 801b1f4:	f107 0410 	add.w	r4, r7, #16
 801b1f8:	466d      	mov	r5, sp
 801b1fa:	f103 020c 	add.w	r2, r3, #12
 801b1fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b202:	e885 0003 	stmia.w	r5, {r0, r1}
 801b206:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b208:	4620      	mov	r0, r4
 801b20a:	f7fb f9a7 	bl	801655c <rcl_init_options_init>
 801b20e:	6178      	str	r0, [r7, #20]
  if (rc != RCL_RET_OK) {
 801b210:	697b      	ldr	r3, [r7, #20]
 801b212:	2b00      	cmp	r3, #0
 801b214:	d003      	beq.n	801b21e <rclc_support_init+0x5a>
    PRINT_RCLC_ERROR(rclc_support_init, rcl_init_options_init);
 801b216:	f000 fd67 	bl	801bce8 <rcutils_reset_error>
    return rc;
 801b21a:	697b      	ldr	r3, [r7, #20]
 801b21c:	e015      	b.n	801b24a <rclc_support_init+0x86>
  }

  rc = rclc_support_init_with_options(support, argc, argv, &init_options, allocator);
 801b21e:	f107 0210 	add.w	r2, r7, #16
 801b222:	683b      	ldr	r3, [r7, #0]
 801b224:	9300      	str	r3, [sp, #0]
 801b226:	4613      	mov	r3, r2
 801b228:	687a      	ldr	r2, [r7, #4]
 801b22a:	68b9      	ldr	r1, [r7, #8]
 801b22c:	68f8      	ldr	r0, [r7, #12]
 801b22e:	f000 f810 	bl	801b252 <rclc_support_init_with_options>
 801b232:	6178      	str	r0, [r7, #20]
  if (rcl_init_options_fini(&init_options) != RCL_RET_OK) {
 801b234:	f107 0310 	add.w	r3, r7, #16
 801b238:	4618      	mov	r0, r3
 801b23a:	f7fb faec 	bl	8016816 <rcl_init_options_fini>
 801b23e:	4603      	mov	r3, r0
 801b240:	2b00      	cmp	r3, #0
 801b242:	d001      	beq.n	801b248 <rclc_support_init+0x84>
    PRINT_RCLC_ERROR(rclc_support_init, rcl_init_options_fini);
 801b244:	f000 fd50 	bl	801bce8 <rcutils_reset_error>
  }

  return rc;
 801b248:	697b      	ldr	r3, [r7, #20]
}
 801b24a:	4618      	mov	r0, r3
 801b24c:	3718      	adds	r7, #24
 801b24e:	46bd      	mov	sp, r7
 801b250:	bdb0      	pop	{r4, r5, r7, pc}

0801b252 <rclc_support_init_with_options>:
  rclc_support_t * support,
  int argc,
  char const * const * argv,
  rcl_init_options_t * init_options,
  rcl_allocator_t * allocator)
{
 801b252:	b590      	push	{r4, r7, lr}
 801b254:	b08b      	sub	sp, #44	; 0x2c
 801b256:	af00      	add	r7, sp, #0
 801b258:	61f8      	str	r0, [r7, #28]
 801b25a:	61b9      	str	r1, [r7, #24]
 801b25c:	617a      	str	r2, [r7, #20]
 801b25e:	613b      	str	r3, [r7, #16]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b260:	69fb      	ldr	r3, [r7, #28]
 801b262:	2b00      	cmp	r3, #0
 801b264:	d101      	bne.n	801b26a <rclc_support_init_with_options+0x18>
 801b266:	230b      	movs	r3, #11
 801b268:	e048      	b.n	801b2fc <rclc_support_init_with_options+0xaa>
    support, "support is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b26a:	693b      	ldr	r3, [r7, #16]
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d101      	bne.n	801b274 <rclc_support_init_with_options+0x22>
 801b270:	230b      	movs	r3, #11
 801b272:	e043      	b.n	801b2fc <rclc_support_init_with_options+0xaa>
    init_options, "init_options is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b276:	2b00      	cmp	r3, #0
 801b278:	d101      	bne.n	801b27e <rclc_support_init_with_options+0x2c>
 801b27a:	230b      	movs	r3, #11
 801b27c:	e03e      	b.n	801b2fc <rclc_support_init_with_options+0xaa>
    allocator, "allocator is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  rcl_ret_t rc = RCL_RET_OK;
 801b27e:	2300      	movs	r3, #0
 801b280:	627b      	str	r3, [r7, #36]	; 0x24

  support->init_options = rcl_get_zero_initialized_init_options();
 801b282:	69fc      	ldr	r4, [r7, #28]
 801b284:	f7fb f962 	bl	801654c <rcl_get_zero_initialized_init_options>
 801b288:	6020      	str	r0, [r4, #0]
  rc = rcl_init_options_copy(init_options, &support->init_options);
 801b28a:	69fb      	ldr	r3, [r7, #28]
 801b28c:	4619      	mov	r1, r3
 801b28e:	6938      	ldr	r0, [r7, #16]
 801b290:	f7fb f9d6 	bl	8016640 <rcl_init_options_copy>
 801b294:	6278      	str	r0, [r7, #36]	; 0x24
  if (rc != RCL_RET_OK) {
 801b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d003      	beq.n	801b2a4 <rclc_support_init_with_options+0x52>
    PRINT_RCLC_ERROR(rclc_init, rcl_init_options_copy);
 801b29c:	f000 fd24 	bl	801bce8 <rcutils_reset_error>
    return rc;
 801b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2a2:	e02b      	b.n	801b2fc <rclc_support_init_with_options+0xaa>
  }

  support->context = rcl_get_zero_initialized_context();
 801b2a4:	69fc      	ldr	r4, [r7, #28]
 801b2a6:	463b      	mov	r3, r7
 801b2a8:	4618      	mov	r0, r3
 801b2aa:	f7fa fae3 	bl	8015874 <rcl_get_zero_initialized_context>
 801b2ae:	3408      	adds	r4, #8
 801b2b0:	463b      	mov	r3, r7
 801b2b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b2b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  rc = rcl_init(argc, argv, &support->init_options, &support->context);
 801b2b8:	69fa      	ldr	r2, [r7, #28]
 801b2ba:	69fb      	ldr	r3, [r7, #28]
 801b2bc:	3308      	adds	r3, #8
 801b2be:	6979      	ldr	r1, [r7, #20]
 801b2c0:	69b8      	ldr	r0, [r7, #24]
 801b2c2:	f7fa ff67 	bl	8016194 <rcl_init>
 801b2c6:	6278      	str	r0, [r7, #36]	; 0x24
  if (rc != RCL_RET_OK) {
 801b2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d003      	beq.n	801b2d6 <rclc_support_init_with_options+0x84>
    PRINT_RCLC_ERROR(rclc_init, rcl_init);
 801b2ce:	f000 fd0b 	bl	801bce8 <rcutils_reset_error>
    return rc;
 801b2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2d4:	e012      	b.n	801b2fc <rclc_support_init_with_options+0xaa>
  }
  support->allocator = allocator;
 801b2d6:	69fb      	ldr	r3, [r7, #28]
 801b2d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b2da:	619a      	str	r2, [r3, #24]

  rc = rcl_clock_init(RCL_STEADY_TIME, &support->clock, support->allocator);
 801b2dc:	69fb      	ldr	r3, [r7, #28]
 801b2de:	f103 011c 	add.w	r1, r3, #28
 801b2e2:	69fb      	ldr	r3, [r7, #28]
 801b2e4:	699b      	ldr	r3, [r3, #24]
 801b2e6:	461a      	mov	r2, r3
 801b2e8:	2003      	movs	r0, #3
 801b2ea:	f7fc fe9d 	bl	8018028 <rcl_clock_init>
 801b2ee:	6278      	str	r0, [r7, #36]	; 0x24
  if (rc != RCL_RET_OK) {
 801b2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d001      	beq.n	801b2fa <rclc_support_init_with_options+0xa8>
    PRINT_RCLC_ERROR(rclc_init, rcl_clock_init);
 801b2f6:	f000 fcf7 	bl	801bce8 <rcutils_reset_error>
  }
  return rc;
 801b2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b2fc:	4618      	mov	r0, r3
 801b2fe:	372c      	adds	r7, #44	; 0x2c
 801b300:	46bd      	mov	sp, r7
 801b302:	bd90      	pop	{r4, r7, pc}

0801b304 <rclc_node_init_default>:
rclc_node_init_default(
  rcl_node_t * node,
  const char * name,
  const char * namespace_,
  rclc_support_t * support)
{
 801b304:	b590      	push	{r4, r7, lr}
 801b306:	b091      	sub	sp, #68	; 0x44
 801b308:	af02      	add	r7, sp, #8
 801b30a:	6178      	str	r0, [r7, #20]
 801b30c:	6139      	str	r1, [r7, #16]
 801b30e:	60fa      	str	r2, [r7, #12]
 801b310:	60bb      	str	r3, [r7, #8]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b312:	697b      	ldr	r3, [r7, #20]
 801b314:	2b00      	cmp	r3, #0
 801b316:	d101      	bne.n	801b31c <rclc_node_init_default+0x18>
 801b318:	230b      	movs	r3, #11
 801b31a:	e030      	b.n	801b37e <rclc_node_init_default+0x7a>
    node, "node is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b31c:	693b      	ldr	r3, [r7, #16]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d101      	bne.n	801b326 <rclc_node_init_default+0x22>
 801b322:	230b      	movs	r3, #11
 801b324:	e02b      	b.n	801b37e <rclc_node_init_default+0x7a>
    name, "name is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b326:	68fb      	ldr	r3, [r7, #12]
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d101      	bne.n	801b330 <rclc_node_init_default+0x2c>
 801b32c:	230b      	movs	r3, #11
 801b32e:	e026      	b.n	801b37e <rclc_node_init_default+0x7a>
    namespace_, "namespace_ is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b330:	68bb      	ldr	r3, [r7, #8]
 801b332:	2b00      	cmp	r3, #0
 801b334:	d101      	bne.n	801b33a <rclc_node_init_default+0x36>
 801b336:	230b      	movs	r3, #11
 801b338:	e021      	b.n	801b37e <rclc_node_init_default+0x7a>
    support, "support is a null pointer", return RCL_RET_INVALID_ARGUMENT);

  rcl_ret_t rc = RCL_RET_OK;
 801b33a:	2300      	movs	r3, #0
 801b33c:	637b      	str	r3, [r7, #52]	; 0x34
  (*node) = rcl_get_zero_initialized_node();
 801b33e:	697c      	ldr	r4, [r7, #20]
 801b340:	463b      	mov	r3, r7
 801b342:	4618      	mov	r0, r3
 801b344:	f7fb fada 	bl	80168fc <rcl_get_zero_initialized_node>
 801b348:	4622      	mov	r2, r4
 801b34a:	463b      	mov	r3, r7
 801b34c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b350:	e882 0003 	stmia.w	r2, {r0, r1}
  rcl_node_options_t node_ops = rcl_node_get_default_options();
 801b354:	f107 0318 	add.w	r3, r7, #24
 801b358:	4618      	mov	r0, r3
 801b35a:	f7fb fd95 	bl	8016e88 <rcl_node_get_default_options>
  rc = rclc_node_init_with_options(
 801b35e:	f107 0318 	add.w	r3, r7, #24
 801b362:	9300      	str	r3, [sp, #0]
 801b364:	68bb      	ldr	r3, [r7, #8]
 801b366:	68fa      	ldr	r2, [r7, #12]
 801b368:	6939      	ldr	r1, [r7, #16]
 801b36a:	6978      	ldr	r0, [r7, #20]
 801b36c:	f000 f80b 	bl	801b386 <rclc_node_init_with_options>
 801b370:	6378      	str	r0, [r7, #52]	; 0x34
    node,
    name,
    namespace_,
    support,
    &node_ops);
  if (rc != RCL_RET_OK) {
 801b372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b374:	2b00      	cmp	r3, #0
 801b376:	d001      	beq.n	801b37c <rclc_node_init_default+0x78>
    PRINT_RCLC_WARN(rclc_node_init_default, rclc_node_init_with_options);
 801b378:	f000 fcb6 	bl	801bce8 <rcutils_reset_error>
  }
  return rc;
 801b37c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801b37e:	4618      	mov	r0, r3
 801b380:	373c      	adds	r7, #60	; 0x3c
 801b382:	46bd      	mov	sp, r7
 801b384:	bd90      	pop	{r4, r7, pc}

0801b386 <rclc_node_init_with_options>:
  rcl_node_t * node,
  const char * name,
  const char * namespace_,
  rclc_support_t * support,
  rcl_node_options_t * node_ops)
{
 801b386:	b590      	push	{r4, r7, lr}
 801b388:	b08b      	sub	sp, #44	; 0x2c
 801b38a:	af02      	add	r7, sp, #8
 801b38c:	6178      	str	r0, [r7, #20]
 801b38e:	6139      	str	r1, [r7, #16]
 801b390:	60fa      	str	r2, [r7, #12]
 801b392:	60bb      	str	r3, [r7, #8]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b394:	697b      	ldr	r3, [r7, #20]
 801b396:	2b00      	cmp	r3, #0
 801b398:	d101      	bne.n	801b39e <rclc_node_init_with_options+0x18>
 801b39a:	230b      	movs	r3, #11
 801b39c:	e032      	b.n	801b404 <rclc_node_init_with_options+0x7e>
    node, "node is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b39e:	693b      	ldr	r3, [r7, #16]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d101      	bne.n	801b3a8 <rclc_node_init_with_options+0x22>
 801b3a4:	230b      	movs	r3, #11
 801b3a6:	e02d      	b.n	801b404 <rclc_node_init_with_options+0x7e>
    name, "name is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b3a8:	68fb      	ldr	r3, [r7, #12]
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d101      	bne.n	801b3b2 <rclc_node_init_with_options+0x2c>
 801b3ae:	230b      	movs	r3, #11
 801b3b0:	e028      	b.n	801b404 <rclc_node_init_with_options+0x7e>
    namespace_, "namespace_ is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b3b2:	68bb      	ldr	r3, [r7, #8]
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d101      	bne.n	801b3bc <rclc_node_init_with_options+0x36>
 801b3b8:	230b      	movs	r3, #11
 801b3ba:	e023      	b.n	801b404 <rclc_node_init_with_options+0x7e>
    support, "support is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d101      	bne.n	801b3c6 <rclc_node_init_with_options+0x40>
 801b3c2:	230b      	movs	r3, #11
 801b3c4:	e01e      	b.n	801b404 <rclc_node_init_with_options+0x7e>
    node_ops, "support is a null pointer", return RCL_RET_INVALID_ARGUMENT);

  rcl_ret_t rc = RCL_RET_OK;
 801b3c6:	2300      	movs	r3, #0
 801b3c8:	61fb      	str	r3, [r7, #28]
  (*node) = rcl_get_zero_initialized_node();
 801b3ca:	697c      	ldr	r4, [r7, #20]
 801b3cc:	463b      	mov	r3, r7
 801b3ce:	4618      	mov	r0, r3
 801b3d0:	f7fb fa94 	bl	80168fc <rcl_get_zero_initialized_node>
 801b3d4:	4622      	mov	r2, r4
 801b3d6:	463b      	mov	r3, r7
 801b3d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b3dc:	e882 0003 	stmia.w	r2, {r0, r1}
  rc = rcl_node_init(
 801b3e0:	68bb      	ldr	r3, [r7, #8]
 801b3e2:	f103 0208 	add.w	r2, r3, #8
 801b3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3e8:	9300      	str	r3, [sp, #0]
 801b3ea:	4613      	mov	r3, r2
 801b3ec:	68fa      	ldr	r2, [r7, #12]
 801b3ee:	6939      	ldr	r1, [r7, #16]
 801b3f0:	6978      	ldr	r0, [r7, #20]
 801b3f2:	f7fb fa95 	bl	8016920 <rcl_node_init>
 801b3f6:	61f8      	str	r0, [r7, #28]
    node,
    name,
    namespace_,
    &support->context,
    node_ops);
  if (rc != RCL_RET_OK) {
 801b3f8:	69fb      	ldr	r3, [r7, #28]
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d001      	beq.n	801b402 <rclc_node_init_with_options+0x7c>
    PRINT_RCLC_WARN(rclc_node_init_with_options, rcl_node_init);
 801b3fe:	f000 fc73 	bl	801bce8 <rcutils_reset_error>
  }
  return rc;
 801b402:	69fb      	ldr	r3, [r7, #28]
}
 801b404:	4618      	mov	r0, r3
 801b406:	3724      	adds	r7, #36	; 0x24
 801b408:	46bd      	mov	sp, r7
 801b40a:	bd90      	pop	{r4, r7, pc}

0801b40c <rclc_publisher_init_default>:
rclc_publisher_init_default(
  rcl_publisher_t * publisher,
  const rcl_node_t * node,
  const rosidl_message_type_support_t * type_support,
  const char * topic_name)
{
 801b40c:	b580      	push	{r7, lr}
 801b40e:	b086      	sub	sp, #24
 801b410:	af02      	add	r7, sp, #8
 801b412:	60f8      	str	r0, [r7, #12]
 801b414:	60b9      	str	r1, [r7, #8]
 801b416:	607a      	str	r2, [r7, #4]
 801b418:	603b      	str	r3, [r7, #0]
  return rclc_publisher_init(
 801b41a:	4b06      	ldr	r3, [pc, #24]	; (801b434 <rclc_publisher_init_default+0x28>)
 801b41c:	9300      	str	r3, [sp, #0]
 801b41e:	683b      	ldr	r3, [r7, #0]
 801b420:	687a      	ldr	r2, [r7, #4]
 801b422:	68b9      	ldr	r1, [r7, #8]
 801b424:	68f8      	ldr	r0, [r7, #12]
 801b426:	f000 f81d 	bl	801b464 <rclc_publisher_init>
 801b42a:	4603      	mov	r3, r0
    publisher, node, type_support, topic_name,
    &rmw_qos_profile_default);
}
 801b42c:	4618      	mov	r0, r3
 801b42e:	3710      	adds	r7, #16
 801b430:	46bd      	mov	sp, r7
 801b432:	bd80      	pop	{r7, pc}
 801b434:	08027310 	.word	0x08027310

0801b438 <rclc_publisher_init_best_effort>:
rclc_publisher_init_best_effort(
  rcl_publisher_t * publisher,
  const rcl_node_t * node,
  const rosidl_message_type_support_t * type_support,
  const char * topic_name)
{
 801b438:	b580      	push	{r7, lr}
 801b43a:	b086      	sub	sp, #24
 801b43c:	af02      	add	r7, sp, #8
 801b43e:	60f8      	str	r0, [r7, #12]
 801b440:	60b9      	str	r1, [r7, #8]
 801b442:	607a      	str	r2, [r7, #4]
 801b444:	603b      	str	r3, [r7, #0]
  return rclc_publisher_init(
 801b446:	4b06      	ldr	r3, [pc, #24]	; (801b460 <rclc_publisher_init_best_effort+0x28>)
 801b448:	9300      	str	r3, [sp, #0]
 801b44a:	683b      	ldr	r3, [r7, #0]
 801b44c:	687a      	ldr	r2, [r7, #4]
 801b44e:	68b9      	ldr	r1, [r7, #8]
 801b450:	68f8      	ldr	r0, [r7, #12]
 801b452:	f000 f807 	bl	801b464 <rclc_publisher_init>
 801b456:	4603      	mov	r3, r0
    publisher, node, type_support, topic_name,
    &rmw_qos_profile_sensor_data);
}
 801b458:	4618      	mov	r0, r3
 801b45a:	3710      	adds	r7, #16
 801b45c:	46bd      	mov	sp, r7
 801b45e:	bd80      	pop	{r7, pc}
 801b460:	080272c0 	.word	0x080272c0

0801b464 <rclc_publisher_init>:
  rcl_publisher_t * publisher,
  const rcl_node_t * node,
  const rosidl_message_type_support_t * type_support,
  const char * topic_name,
  const rmw_qos_profile_t * qos_profile)
{
 801b464:	b580      	push	{r7, lr}
 801b466:	b0a4      	sub	sp, #144	; 0x90
 801b468:	af02      	add	r7, sp, #8
 801b46a:	60f8      	str	r0, [r7, #12]
 801b46c:	60b9      	str	r1, [r7, #8]
 801b46e:	607a      	str	r2, [r7, #4]
 801b470:	603b      	str	r3, [r7, #0]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b472:	68fb      	ldr	r3, [r7, #12]
 801b474:	2b00      	cmp	r3, #0
 801b476:	d101      	bne.n	801b47c <rclc_publisher_init+0x18>
 801b478:	230b      	movs	r3, #11
 801b47a:	e03a      	b.n	801b4f2 <rclc_publisher_init+0x8e>
    publisher, "publisher is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b47c:	68bb      	ldr	r3, [r7, #8]
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d101      	bne.n	801b486 <rclc_publisher_init+0x22>
 801b482:	230b      	movs	r3, #11
 801b484:	e035      	b.n	801b4f2 <rclc_publisher_init+0x8e>
    node, "node is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d101      	bne.n	801b490 <rclc_publisher_init+0x2c>
 801b48c:	230b      	movs	r3, #11
 801b48e:	e030      	b.n	801b4f2 <rclc_publisher_init+0x8e>
    type_support, "type_support is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b490:	683b      	ldr	r3, [r7, #0]
 801b492:	2b00      	cmp	r3, #0
 801b494:	d101      	bne.n	801b49a <rclc_publisher_init+0x36>
 801b496:	230b      	movs	r3, #11
 801b498:	e02b      	b.n	801b4f2 <rclc_publisher_init+0x8e>
    topic_name, "topic_name is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b49a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d101      	bne.n	801b4a6 <rclc_publisher_init+0x42>
 801b4a2:	230b      	movs	r3, #11
 801b4a4:	e025      	b.n	801b4f2 <rclc_publisher_init+0x8e>
    qos_profile, "qos_profile is a null pointer", return RCL_RET_INVALID_ARGUMENT);

  (*publisher) = rcl_get_zero_initialized_publisher();
 801b4a6:	f7fb fd3f 	bl	8016f28 <rcl_get_zero_initialized_publisher>
 801b4aa:	4602      	mov	r2, r0
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	601a      	str	r2, [r3, #0]
  rcl_publisher_options_t pub_opt = rcl_publisher_get_default_options();
 801b4b0:	f107 0310 	add.w	r3, r7, #16
 801b4b4:	4618      	mov	r0, r3
 801b4b6:	f7fb febf 	bl	8017238 <rcl_publisher_get_default_options>
  pub_opt.qos = *qos_profile;
 801b4ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801b4be:	f107 0310 	add.w	r3, r7, #16
 801b4c2:	4611      	mov	r1, r2
 801b4c4:	2250      	movs	r2, #80	; 0x50
 801b4c6:	4618      	mov	r0, r3
 801b4c8:	f005 fbfa 	bl	8020cc0 <memcpy>
  rcl_ret_t rc = rcl_publisher_init(
 801b4cc:	f107 0310 	add.w	r3, r7, #16
 801b4d0:	9300      	str	r3, [sp, #0]
 801b4d2:	683b      	ldr	r3, [r7, #0]
 801b4d4:	687a      	ldr	r2, [r7, #4]
 801b4d6:	68b9      	ldr	r1, [r7, #8]
 801b4d8:	68f8      	ldr	r0, [r7, #12]
 801b4da:	f7fb fd31 	bl	8016f40 <rcl_publisher_init>
 801b4de:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    publisher,
    node,
    type_support,
    topic_name,
    &pub_opt);
  if (rc != RCL_RET_OK) {
 801b4e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d001      	beq.n	801b4ee <rclc_publisher_init+0x8a>
    PRINT_RCLC_ERROR(rclc_publisher_init_best_effort, rcl_publisher_init);
 801b4ea:	f000 fbfd 	bl	801bce8 <rcutils_reset_error>
  }
  return rc;
 801b4ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
}
 801b4f2:	4618      	mov	r0, r3
 801b4f4:	3788      	adds	r7, #136	; 0x88
 801b4f6:	46bd      	mov	sp, r7
 801b4f8:	bd80      	pop	{r7, pc}

0801b4fa <rcl_wait_set_is_valid>:

#include "./rcl_wait_set_is_valid_backport.h"

bool
rcl_wait_set_is_valid(const rcl_wait_set_t * wait_set)
{
 801b4fa:	b480      	push	{r7}
 801b4fc:	b083      	sub	sp, #12
 801b4fe:	af00      	add	r7, sp, #0
 801b500:	6078      	str	r0, [r7, #4]
  return wait_set && wait_set->impl;
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	2b00      	cmp	r3, #0
 801b506:	d005      	beq.n	801b514 <rcl_wait_set_is_valid+0x1a>
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d001      	beq.n	801b514 <rcl_wait_set_is_valid+0x1a>
 801b510:	2301      	movs	r3, #1
 801b512:	e000      	b.n	801b516 <rcl_wait_set_is_valid+0x1c>
 801b514:	2300      	movs	r3, #0
 801b516:	f003 0301 	and.w	r3, r3, #1
 801b51a:	b2db      	uxtb	r3, r3
}
 801b51c:	4618      	mov	r0, r3
 801b51e:	370c      	adds	r7, #12
 801b520:	46bd      	mov	sp, r7
 801b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b526:	4770      	bx	lr

0801b528 <rclc_subscription_init_best_effort>:
rclc_subscription_init_best_effort(
  rcl_subscription_t * subscription,
  rcl_node_t * node,
  const rosidl_message_type_support_t * type_support,
  const char * topic_name)
{
 801b528:	b580      	push	{r7, lr}
 801b52a:	b086      	sub	sp, #24
 801b52c:	af02      	add	r7, sp, #8
 801b52e:	60f8      	str	r0, [r7, #12]
 801b530:	60b9      	str	r1, [r7, #8]
 801b532:	607a      	str	r2, [r7, #4]
 801b534:	603b      	str	r3, [r7, #0]
  return rclc_subscription_init(
 801b536:	4b06      	ldr	r3, [pc, #24]	; (801b550 <rclc_subscription_init_best_effort+0x28>)
 801b538:	9300      	str	r3, [sp, #0]
 801b53a:	683b      	ldr	r3, [r7, #0]
 801b53c:	687a      	ldr	r2, [r7, #4]
 801b53e:	68b9      	ldr	r1, [r7, #8]
 801b540:	68f8      	ldr	r0, [r7, #12]
 801b542:	f000 f807 	bl	801b554 <rclc_subscription_init>
 801b546:	4603      	mov	r3, r0
    subscription, node, type_support, topic_name,
    &rmw_qos_profile_sensor_data);
}
 801b548:	4618      	mov	r0, r3
 801b54a:	3710      	adds	r7, #16
 801b54c:	46bd      	mov	sp, r7
 801b54e:	bd80      	pop	{r7, pc}
 801b550:	08027360 	.word	0x08027360

0801b554 <rclc_subscription_init>:
  rcl_subscription_t * subscription,
  rcl_node_t * node,
  const rosidl_message_type_support_t * type_support,
  const char * topic_name,
  const rmw_qos_profile_t * qos_profile)
{
 801b554:	b580      	push	{r7, lr}
 801b556:	b0a4      	sub	sp, #144	; 0x90
 801b558:	af02      	add	r7, sp, #8
 801b55a:	60f8      	str	r0, [r7, #12]
 801b55c:	60b9      	str	r1, [r7, #8]
 801b55e:	607a      	str	r2, [r7, #4]
 801b560:	603b      	str	r3, [r7, #0]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b562:	68fb      	ldr	r3, [r7, #12]
 801b564:	2b00      	cmp	r3, #0
 801b566:	d101      	bne.n	801b56c <rclc_subscription_init+0x18>
 801b568:	230b      	movs	r3, #11
 801b56a:	e03a      	b.n	801b5e2 <rclc_subscription_init+0x8e>
    subscription, "subscription is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b56c:	68bb      	ldr	r3, [r7, #8]
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d101      	bne.n	801b576 <rclc_subscription_init+0x22>
 801b572:	230b      	movs	r3, #11
 801b574:	e035      	b.n	801b5e2 <rclc_subscription_init+0x8e>
    node, "node is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d101      	bne.n	801b580 <rclc_subscription_init+0x2c>
 801b57c:	230b      	movs	r3, #11
 801b57e:	e030      	b.n	801b5e2 <rclc_subscription_init+0x8e>
    type_support, "type_support is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b580:	683b      	ldr	r3, [r7, #0]
 801b582:	2b00      	cmp	r3, #0
 801b584:	d101      	bne.n	801b58a <rclc_subscription_init+0x36>
 801b586:	230b      	movs	r3, #11
 801b588:	e02b      	b.n	801b5e2 <rclc_subscription_init+0x8e>
    topic_name, "topic_name is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b58a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d101      	bne.n	801b596 <rclc_subscription_init+0x42>
 801b592:	230b      	movs	r3, #11
 801b594:	e025      	b.n	801b5e2 <rclc_subscription_init+0x8e>
    qos_profile, "qos_profile is a null pointer", return RCL_RET_INVALID_ARGUMENT);

  (*subscription) = rcl_get_zero_initialized_subscription();
 801b596:	f7fc fa8b 	bl	8017ab0 <rcl_get_zero_initialized_subscription>
 801b59a:	4602      	mov	r2, r0
 801b59c:	68fb      	ldr	r3, [r7, #12]
 801b59e:	601a      	str	r2, [r3, #0]
  rcl_subscription_options_t sub_opt = rcl_subscription_get_default_options();
 801b5a0:	f107 0310 	add.w	r3, r7, #16
 801b5a4:	4618      	mov	r0, r3
 801b5a6:	f7fc fc07 	bl	8017db8 <rcl_subscription_get_default_options>
  sub_opt.qos = *qos_profile;
 801b5aa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801b5ae:	f107 0310 	add.w	r3, r7, #16
 801b5b2:	4611      	mov	r1, r2
 801b5b4:	2250      	movs	r2, #80	; 0x50
 801b5b6:	4618      	mov	r0, r3
 801b5b8:	f005 fb82 	bl	8020cc0 <memcpy>
  rcl_ret_t rc = rcl_subscription_init(
 801b5bc:	f107 0310 	add.w	r3, r7, #16
 801b5c0:	9300      	str	r3, [sp, #0]
 801b5c2:	683b      	ldr	r3, [r7, #0]
 801b5c4:	687a      	ldr	r2, [r7, #4]
 801b5c6:	68b9      	ldr	r1, [r7, #8]
 801b5c8:	68f8      	ldr	r0, [r7, #12]
 801b5ca:	f7fc fa7d 	bl	8017ac8 <rcl_subscription_init>
 801b5ce:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    subscription,
    node,
    type_support,
    topic_name,
    &sub_opt);
  if (rc != RCL_RET_OK) {
 801b5d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b5d6:	2b00      	cmp	r3, #0
 801b5d8:	d001      	beq.n	801b5de <rclc_subscription_init+0x8a>
    PRINT_RCLC_ERROR(rclc_subscription_init_best_effort, rcl_subscription_init);
 801b5da:	f000 fb85 	bl	801bce8 <rcutils_reset_error>
  }
  return rc;
 801b5de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
}
 801b5e2:	4618      	mov	r0, r3
 801b5e4:	3788      	adds	r7, #136	; 0x88
 801b5e6:	46bd      	mov	sp, r7
 801b5e8:	bd80      	pop	{r7, pc}

0801b5ea <rclc_timer_init_default>:
rclc_timer_init_default(
  rcl_timer_t * timer,
  rclc_support_t * support,
  const uint64_t timeout_ns,
  const rcl_timer_callback_t callback)
{
 801b5ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b5ee:	b08f      	sub	sp, #60	; 0x3c
 801b5f0:	af08      	add	r7, sp, #32
 801b5f2:	60f8      	str	r0, [r7, #12]
 801b5f4:	60b9      	str	r1, [r7, #8]
 801b5f6:	e9c7 2300 	strd	r2, r3, [r7]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b5fa:	68fb      	ldr	r3, [r7, #12]
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d101      	bne.n	801b604 <rclc_timer_init_default+0x1a>
 801b600:	230b      	movs	r3, #11
 801b602:	e029      	b.n	801b658 <rclc_timer_init_default+0x6e>
    timer, "timer is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801b604:	68bb      	ldr	r3, [r7, #8]
 801b606:	2b00      	cmp	r3, #0
 801b608:	d101      	bne.n	801b60e <rclc_timer_init_default+0x24>
 801b60a:	230b      	movs	r3, #11
 801b60c:	e024      	b.n	801b658 <rclc_timer_init_default+0x6e>
    support, "support is a null pointer", return RCL_RET_INVALID_ARGUMENT);

  (*timer) = rcl_get_zero_initialized_timer();
 801b60e:	f7fc ff99 	bl	8018544 <rcl_get_zero_initialized_timer>
 801b612:	4602      	mov	r2, r0
 801b614:	68fb      	ldr	r3, [r7, #12]
 801b616:	601a      	str	r2, [r3, #0]
  rcl_ret_t rc = rcl_timer_init(
 801b618:	68bb      	ldr	r3, [r7, #8]
 801b61a:	f103 061c 	add.w	r6, r3, #28
 801b61e:	68bb      	ldr	r3, [r7, #8]
 801b620:	f103 0c08 	add.w	ip, r3, #8
 801b624:	e9d7 8900 	ldrd	r8, r9, [r7]
    timer,
    &support->clock,
    &support->context,
    timeout_ns,
    callback,
    (*support->allocator));
 801b628:	68bb      	ldr	r3, [r7, #8]
 801b62a:	699b      	ldr	r3, [r3, #24]
  rcl_ret_t rc = rcl_timer_init(
 801b62c:	ac03      	add	r4, sp, #12
 801b62e:	461d      	mov	r5, r3
 801b630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b634:	682b      	ldr	r3, [r5, #0]
 801b636:	6023      	str	r3, [r4, #0]
 801b638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b63a:	9302      	str	r3, [sp, #8]
 801b63c:	e9cd 8900 	strd	r8, r9, [sp]
 801b640:	4662      	mov	r2, ip
 801b642:	4631      	mov	r1, r6
 801b644:	68f8      	ldr	r0, [r7, #12]
 801b646:	f7fd f883 	bl	8018750 <rcl_timer_init>
 801b64a:	6178      	str	r0, [r7, #20]
  if (rc != RCL_RET_OK) {
 801b64c:	697b      	ldr	r3, [r7, #20]
 801b64e:	2b00      	cmp	r3, #0
 801b650:	d001      	beq.n	801b656 <rclc_timer_init_default+0x6c>
    PRINT_RCLC_ERROR(rclc_timer_init_default, rcl_timer_init);
 801b652:	f000 fb49 	bl	801bce8 <rcutils_reset_error>
  } else {
    RCUTILS_LOG_INFO("Created a timer with period %ld ms.\n", timeout_ns / 1000000);
  }
  return rc;
 801b656:	697b      	ldr	r3, [r7, #20]
}
 801b658:	4618      	mov	r0, r3
 801b65a:	371c      	adds	r7, #28
 801b65c:	46bd      	mov	sp, r7
 801b65e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801b662 <__default_allocate>:
#define RCUTILS_REPORT_ERROR_HANDLING_ERRORS 1
#endif

static void *
__default_allocate(size_t size, void * state)
{
 801b662:	b580      	push	{r7, lr}
 801b664:	b082      	sub	sp, #8
 801b666:	af00      	add	r7, sp, #0
 801b668:	6078      	str	r0, [r7, #4]
 801b66a:	6039      	str	r1, [r7, #0]
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(NULL);

  RCUTILS_UNUSED(state);
  return malloc(size);
 801b66c:	6878      	ldr	r0, [r7, #4]
 801b66e:	f005 fb07 	bl	8020c80 <malloc>
 801b672:	4603      	mov	r3, r0
}
 801b674:	4618      	mov	r0, r3
 801b676:	3708      	adds	r7, #8
 801b678:	46bd      	mov	sp, r7
 801b67a:	bd80      	pop	{r7, pc}

0801b67c <__default_deallocate>:

static void
__default_deallocate(void * pointer, void * state)
{
 801b67c:	b580      	push	{r7, lr}
 801b67e:	b082      	sub	sp, #8
 801b680:	af00      	add	r7, sp, #0
 801b682:	6078      	str	r0, [r7, #4]
 801b684:	6039      	str	r1, [r7, #0]
  RCUTILS_UNUSED(state);
  free(pointer);
 801b686:	6878      	ldr	r0, [r7, #4]
 801b688:	f005 fb02 	bl	8020c90 <free>
}
 801b68c:	bf00      	nop
 801b68e:	3708      	adds	r7, #8
 801b690:	46bd      	mov	sp, r7
 801b692:	bd80      	pop	{r7, pc}

0801b694 <__default_reallocate>:

static void *
__default_reallocate(void * pointer, size_t size, void * state)
{
 801b694:	b580      	push	{r7, lr}
 801b696:	b084      	sub	sp, #16
 801b698:	af00      	add	r7, sp, #0
 801b69a:	60f8      	str	r0, [r7, #12]
 801b69c:	60b9      	str	r1, [r7, #8]
 801b69e:	607a      	str	r2, [r7, #4]
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(NULL);

  RCUTILS_UNUSED(state);
  return realloc(pointer, size);
 801b6a0:	68b9      	ldr	r1, [r7, #8]
 801b6a2:	68f8      	ldr	r0, [r7, #12]
 801b6a4:	f006 fcc0 	bl	8022028 <realloc>
 801b6a8:	4603      	mov	r3, r0
}
 801b6aa:	4618      	mov	r0, r3
 801b6ac:	3710      	adds	r7, #16
 801b6ae:	46bd      	mov	sp, r7
 801b6b0:	bd80      	pop	{r7, pc}

0801b6b2 <__default_zero_allocate>:

static void *
__default_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state)
{
 801b6b2:	b580      	push	{r7, lr}
 801b6b4:	b084      	sub	sp, #16
 801b6b6:	af00      	add	r7, sp, #0
 801b6b8:	60f8      	str	r0, [r7, #12]
 801b6ba:	60b9      	str	r1, [r7, #8]
 801b6bc:	607a      	str	r2, [r7, #4]
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(NULL);

  RCUTILS_UNUSED(state);
  return calloc(number_of_elements, size_of_element);
 801b6be:	68b9      	ldr	r1, [r7, #8]
 801b6c0:	68f8      	ldr	r0, [r7, #12]
 801b6c2:	f005 f943 	bl	802094c <calloc>
 801b6c6:	4603      	mov	r3, r0
}
 801b6c8:	4618      	mov	r0, r3
 801b6ca:	3710      	adds	r7, #16
 801b6cc:	46bd      	mov	sp, r7
 801b6ce:	bd80      	pop	{r7, pc}

0801b6d0 <rcutils_get_zero_initialized_allocator>:

rcutils_allocator_t
rcutils_get_zero_initialized_allocator(void)
{
 801b6d0:	b4b0      	push	{r4, r5, r7}
 801b6d2:	b083      	sub	sp, #12
 801b6d4:	af00      	add	r7, sp, #0
 801b6d6:	6078      	str	r0, [r7, #4]
    .deallocate = NULL,
    .reallocate = NULL,
    .zero_allocate = NULL,
    .state = NULL,
  };
  return zero_allocator;
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	4a06      	ldr	r2, [pc, #24]	; (801b6f4 <rcutils_get_zero_initialized_allocator+0x24>)
 801b6dc:	461c      	mov	r4, r3
 801b6de:	4615      	mov	r5, r2
 801b6e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b6e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b6e4:	682b      	ldr	r3, [r5, #0]
 801b6e6:	6023      	str	r3, [r4, #0]
}
 801b6e8:	6878      	ldr	r0, [r7, #4]
 801b6ea:	370c      	adds	r7, #12
 801b6ec:	46bd      	mov	sp, r7
 801b6ee:	bcb0      	pop	{r4, r5, r7}
 801b6f0:	4770      	bx	lr
 801b6f2:	bf00      	nop
 801b6f4:	2000e6b0 	.word	0x2000e6b0

0801b6f8 <rcutils_set_default_allocator>:
    .zero_allocate = __default_zero_allocate,
    .state = NULL,
  };

bool
rcutils_set_default_allocator(rcutils_allocator_t * allocator){
 801b6f8:	b580      	push	{r7, lr}
 801b6fa:	b082      	sub	sp, #8
 801b6fc:	af00      	add	r7, sp, #0
 801b6fe:	6078      	str	r0, [r7, #4]
  if (rcutils_allocator_is_valid(allocator))
 801b700:	6878      	ldr	r0, [r7, #4]
 801b702:	f000 f833 	bl	801b76c <rcutils_allocator_is_valid>
 801b706:	4603      	mov	r3, r0
 801b708:	2b00      	cmp	r3, #0
 801b70a:	d014      	beq.n	801b736 <rcutils_set_default_allocator+0x3e>
  {
    default_allocator.allocate = allocator->allocate;
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	4a0b      	ldr	r2, [pc, #44]	; (801b740 <rcutils_set_default_allocator+0x48>)
 801b712:	6013      	str	r3, [r2, #0]
    default_allocator.deallocate = allocator->deallocate;
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	685b      	ldr	r3, [r3, #4]
 801b718:	4a09      	ldr	r2, [pc, #36]	; (801b740 <rcutils_set_default_allocator+0x48>)
 801b71a:	6053      	str	r3, [r2, #4]
    default_allocator.reallocate = allocator->reallocate;
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	689b      	ldr	r3, [r3, #8]
 801b720:	4a07      	ldr	r2, [pc, #28]	; (801b740 <rcutils_set_default_allocator+0x48>)
 801b722:	6093      	str	r3, [r2, #8]
    default_allocator.zero_allocate = allocator->zero_allocate;
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	68db      	ldr	r3, [r3, #12]
 801b728:	4a05      	ldr	r2, [pc, #20]	; (801b740 <rcutils_set_default_allocator+0x48>)
 801b72a:	60d3      	str	r3, [r2, #12]
    default_allocator.state = NULL;
 801b72c:	4b04      	ldr	r3, [pc, #16]	; (801b740 <rcutils_set_default_allocator+0x48>)
 801b72e:	2200      	movs	r2, #0
 801b730:	611a      	str	r2, [r3, #16]
    return true;
 801b732:	2301      	movs	r3, #1
 801b734:	e000      	b.n	801b738 <rcutils_set_default_allocator+0x40>
  }
  return false;
 801b736:	2300      	movs	r3, #0
}
 801b738:	4618      	mov	r0, r3
 801b73a:	3708      	adds	r7, #8
 801b73c:	46bd      	mov	sp, r7
 801b73e:	bd80      	pop	{r7, pc}
 801b740:	2000003c 	.word	0x2000003c

0801b744 <rcutils_get_default_allocator>:

rcutils_allocator_t
rcutils_get_default_allocator()
{
 801b744:	b4b0      	push	{r4, r5, r7}
 801b746:	b083      	sub	sp, #12
 801b748:	af00      	add	r7, sp, #0
 801b74a:	6078      	str	r0, [r7, #4]
  return default_allocator;
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	4a06      	ldr	r2, [pc, #24]	; (801b768 <rcutils_get_default_allocator+0x24>)
 801b750:	461c      	mov	r4, r3
 801b752:	4615      	mov	r5, r2
 801b754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b758:	682b      	ldr	r3, [r5, #0]
 801b75a:	6023      	str	r3, [r4, #0]
}
 801b75c:	6878      	ldr	r0, [r7, #4]
 801b75e:	370c      	adds	r7, #12
 801b760:	46bd      	mov	sp, r7
 801b762:	bcb0      	pop	{r4, r5, r7}
 801b764:	4770      	bx	lr
 801b766:	bf00      	nop
 801b768:	2000003c 	.word	0x2000003c

0801b76c <rcutils_allocator_is_valid>:

bool
rcutils_allocator_is_valid(const rcutils_allocator_t * allocator)
{
 801b76c:	b480      	push	{r7}
 801b76e:	b083      	sub	sp, #12
 801b770:	af00      	add	r7, sp, #0
 801b772:	6078      	str	r0, [r7, #4]
  if (
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	2b00      	cmp	r3, #0
 801b778:	d00f      	beq.n	801b79a <rcutils_allocator_is_valid+0x2e>
    NULL == allocator ||
    NULL == allocator->allocate ||
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	681b      	ldr	r3, [r3, #0]
    NULL == allocator ||
 801b77e:	2b00      	cmp	r3, #0
 801b780:	d00b      	beq.n	801b79a <rcutils_allocator_is_valid+0x2e>
    NULL == allocator->deallocate ||
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	685b      	ldr	r3, [r3, #4]
    NULL == allocator->allocate ||
 801b786:	2b00      	cmp	r3, #0
 801b788:	d007      	beq.n	801b79a <rcutils_allocator_is_valid+0x2e>
    NULL == allocator->zero_allocate ||
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	68db      	ldr	r3, [r3, #12]
    NULL == allocator->deallocate ||
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d003      	beq.n	801b79a <rcutils_allocator_is_valid+0x2e>
    NULL == allocator->reallocate)
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	689b      	ldr	r3, [r3, #8]
    NULL == allocator->zero_allocate ||
 801b796:	2b00      	cmp	r3, #0
 801b798:	d101      	bne.n	801b79e <rcutils_allocator_is_valid+0x32>
  {
    return false;
 801b79a:	2300      	movs	r3, #0
 801b79c:	e000      	b.n	801b7a0 <rcutils_allocator_is_valid+0x34>
  }
  return true;
 801b79e:	2301      	movs	r3, #1
}
 801b7a0:	4618      	mov	r0, r3
 801b7a2:	370c      	adds	r7, #12
 801b7a4:	46bd      	mov	sp, r7
 801b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7aa:	4770      	bx	lr

0801b7ac <get_memory_lock>:
#include <stdbool.h>

#define FLAGS_LEN	23

static bool * get_memory_lock(void *address)
{
 801b7ac:	b480      	push	{r7}
 801b7ae:	b085      	sub	sp, #20
 801b7b0:	af00      	add	r7, sp, #0
 801b7b2:	6078      	str	r0, [r7, #4]
  static bool memory_locks[FLAGS_LEN] = { 0 };
  uintptr_t a = (uintptr_t)(address);
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	60fb      	str	r3, [r7, #12]

  // Public domain hash function taken from http://burtleburtle.net/bob/hash/integer.html
  a = (a ^ 61) ^ (a >> 16);
 801b7b8:	68fb      	ldr	r3, [r7, #12]
 801b7ba:	0c1a      	lsrs	r2, r3, #16
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	4053      	eors	r3, r2
 801b7c0:	f083 033d 	eor.w	r3, r3, #61	; 0x3d
 801b7c4:	60fb      	str	r3, [r7, #12]
  a = a + (a << 3);
 801b7c6:	68fb      	ldr	r3, [r7, #12]
 801b7c8:	00db      	lsls	r3, r3, #3
 801b7ca:	68fa      	ldr	r2, [r7, #12]
 801b7cc:	4413      	add	r3, r2
 801b7ce:	60fb      	str	r3, [r7, #12]
  a = a ^ (a >> 4);
 801b7d0:	68fb      	ldr	r3, [r7, #12]
 801b7d2:	091b      	lsrs	r3, r3, #4
 801b7d4:	68fa      	ldr	r2, [r7, #12]
 801b7d6:	4053      	eors	r3, r2
 801b7d8:	60fb      	str	r3, [r7, #12]
  a = a * 0x27d4eb2d;
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	4a0e      	ldr	r2, [pc, #56]	; (801b818 <get_memory_lock+0x6c>)
 801b7de:	fb02 f303 	mul.w	r3, r2, r3
 801b7e2:	60fb      	str	r3, [r7, #12]
  a = a ^ (a >> 15);
 801b7e4:	68fb      	ldr	r3, [r7, #12]
 801b7e6:	0bdb      	lsrs	r3, r3, #15
 801b7e8:	68fa      	ldr	r2, [r7, #12]
 801b7ea:	4053      	eors	r3, r2
 801b7ec:	60fb      	str	r3, [r7, #12]

  a = a % FLAGS_LEN;
 801b7ee:	68f9      	ldr	r1, [r7, #12]
 801b7f0:	4b0a      	ldr	r3, [pc, #40]	; (801b81c <get_memory_lock+0x70>)
 801b7f2:	fba3 2301 	umull	r2, r3, r3, r1
 801b7f6:	091a      	lsrs	r2, r3, #4
 801b7f8:	4613      	mov	r3, r2
 801b7fa:	005b      	lsls	r3, r3, #1
 801b7fc:	4413      	add	r3, r2
 801b7fe:	00db      	lsls	r3, r3, #3
 801b800:	1a9b      	subs	r3, r3, r2
 801b802:	1acb      	subs	r3, r1, r3
 801b804:	60fb      	str	r3, [r7, #12]
  return memory_locks + a;
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	4a05      	ldr	r2, [pc, #20]	; (801b820 <get_memory_lock+0x74>)
 801b80a:	4413      	add	r3, r2
}
 801b80c:	4618      	mov	r0, r3
 801b80e:	3714      	adds	r7, #20
 801b810:	46bd      	mov	sp, r7
 801b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b816:	4770      	bx	lr
 801b818:	27d4eb2d 	.word	0x27d4eb2d
 801b81c:	b21642c9 	.word	0xb21642c9
 801b820:	2000e6c4 	.word	0x2000e6c4

0801b824 <lock_memory>:

void lock_memory(uint64_t *address){
 801b824:	b580      	push	{r7, lr}
 801b826:	b084      	sub	sp, #16
 801b828:	af00      	add	r7, sp, #0
 801b82a:	6078      	str	r0, [r7, #4]
  bool * memory_lock = get_memory_lock(address);
 801b82c:	6878      	ldr	r0, [r7, #4]
 801b82e:	f7ff ffbd 	bl	801b7ac <get_memory_lock>
 801b832:	60f8      	str	r0, [r7, #12]

  while (__atomic_test_and_set(memory_lock, __ATOMIC_ACQUIRE) == 1);
 801b834:	bf00      	nop
 801b836:	68fb      	ldr	r3, [r7, #12]
 801b838:	2201      	movs	r2, #1
 801b83a:	4611      	mov	r1, r2
 801b83c:	e8d3 2f4f 	ldrexb	r2, [r3]
 801b840:	e8c3 1f40 	strexb	r0, r1, [r3]
 801b844:	2800      	cmp	r0, #0
 801b846:	d1f9      	bne.n	801b83c <lock_memory+0x18>
 801b848:	f3bf 8f5b 	dmb	ish
 801b84c:	b2d3      	uxtb	r3, r2
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d1f1      	bne.n	801b836 <lock_memory+0x12>
}
 801b852:	bf00      	nop
 801b854:	bf00      	nop
 801b856:	3710      	adds	r7, #16
 801b858:	46bd      	mov	sp, r7
 801b85a:	bd80      	pop	{r7, pc}

0801b85c <unlock_memory>:

void unlock_memory(uint64_t *address){
 801b85c:	b580      	push	{r7, lr}
 801b85e:	b084      	sub	sp, #16
 801b860:	af00      	add	r7, sp, #0
 801b862:	6078      	str	r0, [r7, #4]
  bool * memory_lock = get_memory_lock(address);
 801b864:	6878      	ldr	r0, [r7, #4]
 801b866:	f7ff ffa1 	bl	801b7ac <get_memory_lock>
 801b86a:	60f8      	str	r0, [r7, #12]

  __atomic_clear(memory_lock, __ATOMIC_RELEASE);
 801b86c:	68fb      	ldr	r3, [r7, #12]
 801b86e:	f3bf 8f5b 	dmb	ish
 801b872:	2200      	movs	r2, #0
 801b874:	701a      	strb	r2, [r3, #0]
}
 801b876:	bf00      	nop
 801b878:	3710      	adds	r7, #16
 801b87a:	46bd      	mov	sp, r7
 801b87c:	bd80      	pop	{r7, pc}

0801b87e <__atomic_load_8>:

uint64_t __atomic_load_8(uint64_t *mem, int model) { 
 801b87e:	b580      	push	{r7, lr}
 801b880:	b084      	sub	sp, #16
 801b882:	af00      	add	r7, sp, #0
 801b884:	6078      	str	r0, [r7, #4]
 801b886:	6039      	str	r1, [r7, #0]
  (void) model;

  lock_memory(mem); 
 801b888:	6878      	ldr	r0, [r7, #4]
 801b88a:	f7ff ffcb 	bl	801b824 <lock_memory>
  uint64_t ret = *mem; 
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b894:	e9c7 2302 	strd	r2, r3, [r7, #8]
  unlock_memory(mem); 
 801b898:	6878      	ldr	r0, [r7, #4]
 801b89a:	f7ff ffdf 	bl	801b85c <unlock_memory>
  return ret; 
 801b89e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 801b8a2:	4610      	mov	r0, r2
 801b8a4:	4619      	mov	r1, r3
 801b8a6:	3710      	adds	r7, #16
 801b8a8:	46bd      	mov	sp, r7
 801b8aa:	bd80      	pop	{r7, pc}

0801b8ac <__atomic_store_8>:

void __atomic_store_8(uint64_t *mem, uint64_t val, int model) { 
 801b8ac:	b580      	push	{r7, lr}
 801b8ae:	b084      	sub	sp, #16
 801b8b0:	af00      	add	r7, sp, #0
 801b8b2:	60f8      	str	r0, [r7, #12]
 801b8b4:	e9c7 2300 	strd	r2, r3, [r7]
  (void) model;

  lock_memory(mem); 
 801b8b8:	68f8      	ldr	r0, [r7, #12]
 801b8ba:	f7ff ffb3 	bl	801b824 <lock_memory>
  *mem = val; 
 801b8be:	68f9      	ldr	r1, [r7, #12]
 801b8c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b8c4:	e9c1 2300 	strd	r2, r3, [r1]
  unlock_memory(mem); 
 801b8c8:	68f8      	ldr	r0, [r7, #12]
 801b8ca:	f7ff ffc7 	bl	801b85c <unlock_memory>
}
 801b8ce:	bf00      	nop
 801b8d0:	3710      	adds	r7, #16
 801b8d2:	46bd      	mov	sp, r7
 801b8d4:	bd80      	pop	{r7, pc}

0801b8d6 <__atomic_exchange_8>:

uint64_t __atomic_exchange_8(uint64_t *mem, uint64_t val, int model) { 
 801b8d6:	b580      	push	{r7, lr}
 801b8d8:	b086      	sub	sp, #24
 801b8da:	af00      	add	r7, sp, #0
 801b8dc:	60f8      	str	r0, [r7, #12]
 801b8de:	e9c7 2300 	strd	r2, r3, [r7]
  (void) model;

  lock_memory(mem); 
 801b8e2:	68f8      	ldr	r0, [r7, #12]
 801b8e4:	f7ff ff9e 	bl	801b824 <lock_memory>
  uint64_t ret = *mem; 
 801b8e8:	68fb      	ldr	r3, [r7, #12]
 801b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
  *mem = val; 
 801b8f2:	68f9      	ldr	r1, [r7, #12]
 801b8f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b8f8:	e9c1 2300 	strd	r2, r3, [r1]
  unlock_memory(mem); 
 801b8fc:	68f8      	ldr	r0, [r7, #12]
 801b8fe:	f7ff ffad 	bl	801b85c <unlock_memory>
  return ret; 
 801b902:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 801b906:	4610      	mov	r0, r2
 801b908:	4619      	mov	r1, r3
 801b90a:	3718      	adds	r7, #24
 801b90c:	46bd      	mov	sp, r7
 801b90e:	bd80      	pop	{r7, pc}

0801b910 <__atomic_fetch_add_8>:

uint64_t __atomic_fetch_add_8(uint64_t *mem, uint64_t val, int model) { 
 801b910:	b5b0      	push	{r4, r5, r7, lr}
 801b912:	b086      	sub	sp, #24
 801b914:	af00      	add	r7, sp, #0
 801b916:	60f8      	str	r0, [r7, #12]
 801b918:	e9c7 2300 	strd	r2, r3, [r7]
  (void) model;

  lock_memory(mem); 
 801b91c:	68f8      	ldr	r0, [r7, #12]
 801b91e:	f7ff ff81 	bl	801b824 <lock_memory>
  uint64_t ret = *mem; 
 801b922:	68fb      	ldr	r3, [r7, #12]
 801b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b928:	e9c7 2304 	strd	r2, r3, [r7, #16]
  *mem += val; 
 801b92c:	68fb      	ldr	r3, [r7, #12]
 801b92e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b932:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b936:	1884      	adds	r4, r0, r2
 801b938:	eb41 0503 	adc.w	r5, r1, r3
 801b93c:	68fb      	ldr	r3, [r7, #12]
 801b93e:	e9c3 4500 	strd	r4, r5, [r3]
  unlock_memory(mem); 
 801b942:	68f8      	ldr	r0, [r7, #12]
 801b944:	f7ff ff8a 	bl	801b85c <unlock_memory>
  return ret; 
 801b948:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 801b94c:	4610      	mov	r0, r2
 801b94e:	4619      	mov	r1, r3
 801b950:	3718      	adds	r7, #24
 801b952:	46bd      	mov	sp, r7
 801b954:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801b958 <__rcutils_copy_string>:

// do not use externally, internal function which is only to be used by error_handling.c
static
size_t
__rcutils_copy_string(char * dst, size_t dst_size, const char * src)
{
 801b958:	b580      	push	{r7, lr}
 801b95a:	b086      	sub	sp, #24
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	60f8      	str	r0, [r7, #12]
 801b960:	60b9      	str	r1, [r7, #8]
 801b962:	607a      	str	r2, [r7, #4]
  assert(dst != NULL);
 801b964:	68fb      	ldr	r3, [r7, #12]
 801b966:	2b00      	cmp	r3, #0
 801b968:	d105      	bne.n	801b976 <__rcutils_copy_string+0x1e>
 801b96a:	4b1a      	ldr	r3, [pc, #104]	; (801b9d4 <__rcutils_copy_string+0x7c>)
 801b96c:	4a1a      	ldr	r2, [pc, #104]	; (801b9d8 <__rcutils_copy_string+0x80>)
 801b96e:	2135      	movs	r1, #53	; 0x35
 801b970:	481a      	ldr	r0, [pc, #104]	; (801b9dc <__rcutils_copy_string+0x84>)
 801b972:	f004 ffcd 	bl	8020910 <__assert_func>
  assert(dst_size > 0);
 801b976:	68bb      	ldr	r3, [r7, #8]
 801b978:	2b00      	cmp	r3, #0
 801b97a:	d105      	bne.n	801b988 <__rcutils_copy_string+0x30>
 801b97c:	4b18      	ldr	r3, [pc, #96]	; (801b9e0 <__rcutils_copy_string+0x88>)
 801b97e:	4a16      	ldr	r2, [pc, #88]	; (801b9d8 <__rcutils_copy_string+0x80>)
 801b980:	2136      	movs	r1, #54	; 0x36
 801b982:	4816      	ldr	r0, [pc, #88]	; (801b9dc <__rcutils_copy_string+0x84>)
 801b984:	f004 ffc4 	bl	8020910 <__assert_func>
  assert(src != NULL);
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d105      	bne.n	801b99a <__rcutils_copy_string+0x42>
 801b98e:	4b15      	ldr	r3, [pc, #84]	; (801b9e4 <__rcutils_copy_string+0x8c>)
 801b990:	4a11      	ldr	r2, [pc, #68]	; (801b9d8 <__rcutils_copy_string+0x80>)
 801b992:	2137      	movs	r1, #55	; 0x37
 801b994:	4811      	ldr	r0, [pc, #68]	; (801b9dc <__rcutils_copy_string+0x84>)
 801b996:	f004 ffbb 	bl	8020910 <__assert_func>
  // doesn't matter how long src actually is if it is longer than dst, so limit to dst + 1
  size_t src_length = strnlen(src, dst_size);
 801b99a:	68b9      	ldr	r1, [r7, #8]
 801b99c:	6878      	ldr	r0, [r7, #4]
 801b99e:	f006 fc21 	bl	80221e4 <strnlen>
 801b9a2:	6138      	str	r0, [r7, #16]
  size_t size_to_copy = src_length;
 801b9a4:	693b      	ldr	r3, [r7, #16]
 801b9a6:	617b      	str	r3, [r7, #20]
  // the destination must be one byte bigger to store the NULL terminating character
  if (src_length >= dst_size) {
 801b9a8:	693a      	ldr	r2, [r7, #16]
 801b9aa:	68bb      	ldr	r3, [r7, #8]
 801b9ac:	429a      	cmp	r2, r3
 801b9ae:	d302      	bcc.n	801b9b6 <__rcutils_copy_string+0x5e>
    size_to_copy = dst_size - 1;
 801b9b0:	68bb      	ldr	r3, [r7, #8]
 801b9b2:	3b01      	subs	r3, #1
 801b9b4:	617b      	str	r3, [r7, #20]
      "[rcutils|error_handling.c:" RCUTILS_STRINGIFY(__LINE__)
      "] memmove_s failed, the error string may be malformed\n");
# endif
  }
#else
  (void)memmove(dst, src, size_to_copy);
 801b9b6:	697a      	ldr	r2, [r7, #20]
 801b9b8:	6879      	ldr	r1, [r7, #4]
 801b9ba:	68f8      	ldr	r0, [r7, #12]
 801b9bc:	f005 f98e 	bl	8020cdc <memmove>
#endif
  dst[size_to_copy] = '\0';
 801b9c0:	68fa      	ldr	r2, [r7, #12]
 801b9c2:	697b      	ldr	r3, [r7, #20]
 801b9c4:	4413      	add	r3, r2
 801b9c6:	2200      	movs	r2, #0
 801b9c8:	701a      	strb	r2, [r3, #0]
  return size_to_copy;
 801b9ca:	697b      	ldr	r3, [r7, #20]
}
 801b9cc:	4618      	mov	r0, r3
 801b9ce:	3718      	adds	r7, #24
 801b9d0:	46bd      	mov	sp, r7
 801b9d2:	bd80      	pop	{r7, pc}
 801b9d4:	08025cfc 	.word	0x08025cfc
 801b9d8:	080273b0 	.word	0x080273b0
 801b9dc:	08025d08 	.word	0x08025d08
 801b9e0:	08025d3c 	.word	0x08025d3c
 801b9e4:	08025d4c 	.word	0x08025d4c

0801b9e8 <__rcutils_reverse_str>:

// do not use externally, internal function which is only to be used by error_handling.c
static
void
__rcutils_reverse_str(char * string_in, size_t string_len)
{
 801b9e8:	b580      	push	{r7, lr}
 801b9ea:	b086      	sub	sp, #24
 801b9ec:	af00      	add	r7, sp, #0
 801b9ee:	6078      	str	r0, [r7, #4]
 801b9f0:	6039      	str	r1, [r7, #0]
  assert(string_in != NULL);
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	d105      	bne.n	801ba04 <__rcutils_reverse_str+0x1c>
 801b9f8:	4b17      	ldr	r3, [pc, #92]	; (801ba58 <__rcutils_reverse_str+0x70>)
 801b9fa:	4a18      	ldr	r2, [pc, #96]	; (801ba5c <__rcutils_reverse_str+0x74>)
 801b9fc:	215d      	movs	r1, #93	; 0x5d
 801b9fe:	4818      	ldr	r0, [pc, #96]	; (801ba60 <__rcutils_reverse_str+0x78>)
 801ba00:	f004 ff86 	bl	8020910 <__assert_func>
  if (0 == string_len) {
 801ba04:	683b      	ldr	r3, [r7, #0]
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	d022      	beq.n	801ba50 <__rcutils_reverse_str+0x68>
    return;
  }
  size_t i = 0;
 801ba0a:	2300      	movs	r3, #0
 801ba0c:	617b      	str	r3, [r7, #20]
  size_t j = string_len - 1;
 801ba0e:	683b      	ldr	r3, [r7, #0]
 801ba10:	3b01      	subs	r3, #1
 801ba12:	613b      	str	r3, [r7, #16]
  for (; i < j; i++, j--) {
 801ba14:	e017      	b.n	801ba46 <__rcutils_reverse_str+0x5e>
    char c = string_in[i];
 801ba16:	687a      	ldr	r2, [r7, #4]
 801ba18:	697b      	ldr	r3, [r7, #20]
 801ba1a:	4413      	add	r3, r2
 801ba1c:	781b      	ldrb	r3, [r3, #0]
 801ba1e:	73fb      	strb	r3, [r7, #15]
    string_in[i] = string_in[j];
 801ba20:	687a      	ldr	r2, [r7, #4]
 801ba22:	693b      	ldr	r3, [r7, #16]
 801ba24:	441a      	add	r2, r3
 801ba26:	6879      	ldr	r1, [r7, #4]
 801ba28:	697b      	ldr	r3, [r7, #20]
 801ba2a:	440b      	add	r3, r1
 801ba2c:	7812      	ldrb	r2, [r2, #0]
 801ba2e:	701a      	strb	r2, [r3, #0]
    string_in[j] = c;
 801ba30:	687a      	ldr	r2, [r7, #4]
 801ba32:	693b      	ldr	r3, [r7, #16]
 801ba34:	4413      	add	r3, r2
 801ba36:	7bfa      	ldrb	r2, [r7, #15]
 801ba38:	701a      	strb	r2, [r3, #0]
  for (; i < j; i++, j--) {
 801ba3a:	697b      	ldr	r3, [r7, #20]
 801ba3c:	3301      	adds	r3, #1
 801ba3e:	617b      	str	r3, [r7, #20]
 801ba40:	693b      	ldr	r3, [r7, #16]
 801ba42:	3b01      	subs	r3, #1
 801ba44:	613b      	str	r3, [r7, #16]
 801ba46:	697a      	ldr	r2, [r7, #20]
 801ba48:	693b      	ldr	r3, [r7, #16]
 801ba4a:	429a      	cmp	r2, r3
 801ba4c:	d3e3      	bcc.n	801ba16 <__rcutils_reverse_str+0x2e>
 801ba4e:	e000      	b.n	801ba52 <__rcutils_reverse_str+0x6a>
    return;
 801ba50:	bf00      	nop
  }
}
 801ba52:	3718      	adds	r7, #24
 801ba54:	46bd      	mov	sp, r7
 801ba56:	bd80      	pop	{r7, pc}
 801ba58:	08025d58 	.word	0x08025d58
 801ba5c:	080273c8 	.word	0x080273c8
 801ba60:	08025d08 	.word	0x08025d08

0801ba64 <__rcutils_convert_uint64_t_into_c_str>:

// do not use externally, internal function which is only to be used by error_handling.c
static
void
__rcutils_convert_uint64_t_into_c_str(uint64_t number, char * buffer, size_t buffer_size)
{
 801ba64:	b580      	push	{r7, lr}
 801ba66:	b086      	sub	sp, #24
 801ba68:	af00      	add	r7, sp, #0
 801ba6a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 801ba6e:	607a      	str	r2, [r7, #4]
 801ba70:	603b      	str	r3, [r7, #0]
  assert(buffer != NULL);
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d105      	bne.n	801ba84 <__rcutils_convert_uint64_t_into_c_str+0x20>
 801ba78:	4b27      	ldr	r3, [pc, #156]	; (801bb18 <__rcutils_convert_uint64_t_into_c_str+0xb4>)
 801ba7a:	4a28      	ldr	r2, [pc, #160]	; (801bb1c <__rcutils_convert_uint64_t_into_c_str+0xb8>)
 801ba7c:	216f      	movs	r1, #111	; 0x6f
 801ba7e:	4828      	ldr	r0, [pc, #160]	; (801bb20 <__rcutils_convert_uint64_t_into_c_str+0xbc>)
 801ba80:	f004 ff46 	bl	8020910 <__assert_func>
  assert(buffer_size >= 21);
 801ba84:	683b      	ldr	r3, [r7, #0]
 801ba86:	2b14      	cmp	r3, #20
 801ba88:	d805      	bhi.n	801ba96 <__rcutils_convert_uint64_t_into_c_str+0x32>
 801ba8a:	4b26      	ldr	r3, [pc, #152]	; (801bb24 <__rcutils_convert_uint64_t_into_c_str+0xc0>)
 801ba8c:	4a23      	ldr	r2, [pc, #140]	; (801bb1c <__rcutils_convert_uint64_t_into_c_str+0xb8>)
 801ba8e:	2170      	movs	r1, #112	; 0x70
 801ba90:	4823      	ldr	r0, [pc, #140]	; (801bb20 <__rcutils_convert_uint64_t_into_c_str+0xbc>)
 801ba92:	f004 ff3d 	bl	8020910 <__assert_func>
  (void)buffer_size;  // prevent warning in release builds where there is no assert(...)
  size_t i = 0;
 801ba96:	2300      	movs	r3, #0
 801ba98:	617b      	str	r3, [r7, #20]

  // if number is 0, short circuit
  if (number == 0) {
 801ba9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801ba9e:	4313      	orrs	r3, r2
 801baa0:	d124      	bne.n	801baec <__rcutils_convert_uint64_t_into_c_str+0x88>
    buffer[0] = '0';
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	2230      	movs	r2, #48	; 0x30
 801baa6:	701a      	strb	r2, [r3, #0]
    buffer[1] = '\0';
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	3301      	adds	r3, #1
 801baac:	2200      	movs	r2, #0
 801baae:	701a      	strb	r2, [r3, #0]
    return;
 801bab0:	e02e      	b.n	801bb10 <__rcutils_convert_uint64_t_into_c_str+0xac>
  }

  // add the modulo 10 to the string and then integer divide by 10 until 0
  while (number != 0) {
    buffer[i++] = (char)(number % 10 + '0');
 801bab2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801bab6:	f04f 020a 	mov.w	r2, #10
 801baba:	f04f 0300 	mov.w	r3, #0
 801babe:	f7e5 f963 	bl	8000d88 <__aeabi_uldivmod>
 801bac2:	b2d2      	uxtb	r2, r2
 801bac4:	697b      	ldr	r3, [r7, #20]
 801bac6:	1c59      	adds	r1, r3, #1
 801bac8:	6179      	str	r1, [r7, #20]
 801baca:	6879      	ldr	r1, [r7, #4]
 801bacc:	440b      	add	r3, r1
 801bace:	3230      	adds	r2, #48	; 0x30
 801bad0:	b2d2      	uxtb	r2, r2
 801bad2:	701a      	strb	r2, [r3, #0]
    number = number / 10;
 801bad4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801bad8:	f04f 020a 	mov.w	r2, #10
 801badc:	f04f 0300 	mov.w	r3, #0
 801bae0:	f7e5 f952 	bl	8000d88 <__aeabi_uldivmod>
 801bae4:	4602      	mov	r2, r0
 801bae6:	460b      	mov	r3, r1
 801bae8:	e9c7 2302 	strd	r2, r3, [r7, #8]
  while (number != 0) {
 801baec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801baf0:	4313      	orrs	r3, r2
 801baf2:	d1de      	bne.n	801bab2 <__rcutils_convert_uint64_t_into_c_str+0x4e>
  }

  // null terminate
  buffer[i] = '\0';
 801baf4:	687a      	ldr	r2, [r7, #4]
 801baf6:	697b      	ldr	r3, [r7, #20]
 801baf8:	4413      	add	r3, r2
 801bafa:	2200      	movs	r2, #0
 801bafc:	701a      	strb	r2, [r3, #0]

  // reverse the string in place
  __rcutils_reverse_str(buffer, strnlen(buffer, 21));
 801bafe:	2115      	movs	r1, #21
 801bb00:	6878      	ldr	r0, [r7, #4]
 801bb02:	f006 fb6f 	bl	80221e4 <strnlen>
 801bb06:	4603      	mov	r3, r0
 801bb08:	4619      	mov	r1, r3
 801bb0a:	6878      	ldr	r0, [r7, #4]
 801bb0c:	f7ff ff6c 	bl	801b9e8 <__rcutils_reverse_str>
}
 801bb10:	3718      	adds	r7, #24
 801bb12:	46bd      	mov	sp, r7
 801bb14:	bd80      	pop	{r7, pc}
 801bb16:	bf00      	nop
 801bb18:	08025d6c 	.word	0x08025d6c
 801bb1c:	080273e0 	.word	0x080273e0
 801bb20:	08025d08 	.word	0x08025d08
 801bb24:	08025d7c 	.word	0x08025d7c

0801bb28 <__rcutils_format_error_string>:
static
void
__rcutils_format_error_string(
  rcutils_error_string_t * error_string,
  const rcutils_error_state_t * error_state)
{
 801bb28:	b580      	push	{r7, lr}
 801bb2a:	b08c      	sub	sp, #48	; 0x30
 801bb2c:	af00      	add	r7, sp, #0
 801bb2e:	6078      	str	r0, [r7, #4]
 801bb30:	6039      	str	r1, [r7, #0]
  assert(error_string != NULL);
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d105      	bne.n	801bb44 <__rcutils_format_error_string+0x1c>
 801bb38:	4b35      	ldr	r3, [pc, #212]	; (801bc10 <__rcutils_format_error_string+0xe8>)
 801bb3a:	4a36      	ldr	r2, [pc, #216]	; (801bc14 <__rcutils_format_error_string+0xec>)
 801bb3c:	218f      	movs	r1, #143	; 0x8f
 801bb3e:	4836      	ldr	r0, [pc, #216]	; (801bc18 <__rcutils_format_error_string+0xf0>)
 801bb40:	f004 fee6 	bl	8020910 <__assert_func>
  assert(error_state != NULL);
 801bb44:	683b      	ldr	r3, [r7, #0]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d105      	bne.n	801bb56 <__rcutils_format_error_string+0x2e>
 801bb4a:	4b34      	ldr	r3, [pc, #208]	; (801bc1c <__rcutils_format_error_string+0xf4>)
 801bb4c:	4a31      	ldr	r2, [pc, #196]	; (801bc14 <__rcutils_format_error_string+0xec>)
 801bb4e:	2190      	movs	r1, #144	; 0x90
 801bb50:	4831      	ldr	r0, [pc, #196]	; (801bc18 <__rcutils_format_error_string+0xf0>)
 801bb52:	f004 fedd 	bl	8020910 <__assert_func>
      sizeof(error_state->file) +
      sizeof(format_2) - 1 /* minus the null-term */ +
      sizeof(line_number_buffer) - 1 /* minus the null-term */ +
      1  // null terminator
    ), "math error in static string formatting");
  char * offset = error_string->str;
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t bytes_left = sizeof(error_string->str);
 801bb5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bb5e:	62bb      	str	r3, [r7, #40]	; 0x28
  size_t written = __rcutils_copy_string(offset, bytes_left, error_state->message);
 801bb60:	683b      	ldr	r3, [r7, #0]
 801bb62:	461a      	mov	r2, r3
 801bb64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bb66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bb68:	f7ff fef6 	bl	801b958 <__rcutils_copy_string>
 801bb6c:	6278      	str	r0, [r7, #36]	; 0x24
  offset += written;
 801bb6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb72:	4413      	add	r3, r2
 801bb74:	62fb      	str	r3, [r7, #44]	; 0x2c
  bytes_left -= written;
 801bb76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb7a:	1ad3      	subs	r3, r2, r3
 801bb7c:	62bb      	str	r3, [r7, #40]	; 0x28
  written = __rcutils_copy_string(offset, bytes_left, format_1);
 801bb7e:	4a28      	ldr	r2, [pc, #160]	; (801bc20 <__rcutils_format_error_string+0xf8>)
 801bb80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bb82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bb84:	f7ff fee8 	bl	801b958 <__rcutils_copy_string>
 801bb88:	6278      	str	r0, [r7, #36]	; 0x24
  offset += written;
 801bb8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb8e:	4413      	add	r3, r2
 801bb90:	62fb      	str	r3, [r7, #44]	; 0x2c
  bytes_left -= written;
 801bb92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb96:	1ad3      	subs	r3, r2, r3
 801bb98:	62bb      	str	r3, [r7, #40]	; 0x28
  written = __rcutils_copy_string(offset, bytes_left, error_state->file);
 801bb9a:	683b      	ldr	r3, [r7, #0]
 801bb9c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801bba0:	461a      	mov	r2, r3
 801bba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bba4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bba6:	f7ff fed7 	bl	801b958 <__rcutils_copy_string>
 801bbaa:	6278      	str	r0, [r7, #36]	; 0x24
  offset += written;
 801bbac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbb0:	4413      	add	r3, r2
 801bbb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  bytes_left -= written;
 801bbb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbb8:	1ad3      	subs	r3, r2, r3
 801bbba:	62bb      	str	r3, [r7, #40]	; 0x28
  written = __rcutils_copy_string(offset, bytes_left, format_2);
 801bbbc:	4a19      	ldr	r2, [pc, #100]	; (801bc24 <__rcutils_format_error_string+0xfc>)
 801bbbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bbc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bbc2:	f7ff fec9 	bl	801b958 <__rcutils_copy_string>
 801bbc6:	6278      	str	r0, [r7, #36]	; 0x24
  offset += written;
 801bbc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbcc:	4413      	add	r3, r2
 801bbce:	62fb      	str	r3, [r7, #44]	; 0x2c
  bytes_left -= written;
 801bbd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbd4:	1ad3      	subs	r3, r2, r3
 801bbd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __rcutils_convert_uint64_t_into_c_str(
 801bbd8:	683b      	ldr	r3, [r7, #0]
 801bbda:	e9d3 01fa 	ldrd	r0, r1, [r3, #1000]	; 0x3e8
 801bbde:	f107 020c 	add.w	r2, r7, #12
 801bbe2:	2315      	movs	r3, #21
 801bbe4:	f7ff ff3e 	bl	801ba64 <__rcutils_convert_uint64_t_into_c_str>
    error_state->line_number, line_number_buffer, sizeof(line_number_buffer));
  written = __rcutils_copy_string(offset, bytes_left, line_number_buffer);
 801bbe8:	f107 030c 	add.w	r3, r7, #12
 801bbec:	461a      	mov	r2, r3
 801bbee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bbf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bbf2:	f7ff feb1 	bl	801b958 <__rcutils_copy_string>
 801bbf6:	6278      	str	r0, [r7, #36]	; 0x24
  offset += written;
 801bbf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbfc:	4413      	add	r3, r2
 801bbfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  offset[0] = '\0';
 801bc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc02:	2200      	movs	r2, #0
 801bc04:	701a      	strb	r2, [r3, #0]
}
 801bc06:	bf00      	nop
 801bc08:	3730      	adds	r7, #48	; 0x30
 801bc0a:	46bd      	mov	sp, r7
 801bc0c:	bd80      	pop	{r7, pc}
 801bc0e:	bf00      	nop
 801bc10:	08025d90 	.word	0x08025d90
 801bc14:	08027408 	.word	0x08027408
 801bc18:	08025d08 	.word	0x08025d08
 801bc1c:	08025da8 	.word	0x08025da8
 801bc20:	08027428 	.word	0x08027428
 801bc24:	08027430 	.word	0x08027430

0801bc28 <rcutils_get_error_string>:
  return &gtls_rcutils_error_state;
}

rcutils_error_string_t
rcutils_get_error_string(void)
{
 801bc28:	b590      	push	{r4, r7, lr}
 801bc2a:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 801bc2e:	af00      	add	r7, sp, #0
 801bc30:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 801bc34:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 801bc38:	6018      	str	r0, [r3, #0]
  if (!gtls_rcutils_error_is_set) {
 801bc3a:	4826      	ldr	r0, [pc, #152]	; (801bcd4 <rcutils_get_error_string+0xac>)
 801bc3c:	f7e5 fa8a 	bl	8001154 <__emutls_get_address>
 801bc40:	4603      	mov	r3, r0
 801bc42:	781b      	ldrb	r3, [r3, #0]
 801bc44:	f083 0301 	eor.w	r3, r3, #1
 801bc48:	b2db      	uxtb	r3, r3
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	d00d      	beq.n	801bc6a <rcutils_get_error_string+0x42>
    return (rcutils_error_string_t) {"error not set"};  // NOLINT(readability/braces)
 801bc4e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 801bc52:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	4a1f      	ldr	r2, [pc, #124]	; (801bcd8 <rcutils_get_error_string+0xb0>)
 801bc5a:	4618      	mov	r0, r3
 801bc5c:	4611      	mov	r1, r2
 801bc5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bc62:	461a      	mov	r2, r3
 801bc64:	f005 f82c 	bl	8020cc0 <memcpy>
  if (!gtls_rcutils_error_string_is_formatted) {
    __rcutils_format_error_string(&gtls_rcutils_error_string, &gtls_rcutils_error_state);
    gtls_rcutils_error_string_is_formatted = true;
  }
  return gtls_rcutils_error_string;
}
 801bc68:	e02b      	b.n	801bcc2 <rcutils_get_error_string+0x9a>
  if (!gtls_rcutils_error_string_is_formatted) {
 801bc6a:	481c      	ldr	r0, [pc, #112]	; (801bcdc <rcutils_get_error_string+0xb4>)
 801bc6c:	f7e5 fa72 	bl	8001154 <__emutls_get_address>
 801bc70:	4603      	mov	r3, r0
 801bc72:	781b      	ldrb	r3, [r3, #0]
 801bc74:	f083 0301 	eor.w	r3, r3, #1
 801bc78:	b2db      	uxtb	r3, r3
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d011      	beq.n	801bca2 <rcutils_get_error_string+0x7a>
    __rcutils_format_error_string(&gtls_rcutils_error_string, &gtls_rcutils_error_state);
 801bc7e:	4818      	ldr	r0, [pc, #96]	; (801bce0 <rcutils_get_error_string+0xb8>)
 801bc80:	f7e5 fa68 	bl	8001154 <__emutls_get_address>
 801bc84:	4604      	mov	r4, r0
 801bc86:	4817      	ldr	r0, [pc, #92]	; (801bce4 <rcutils_get_error_string+0xbc>)
 801bc88:	f7e5 fa64 	bl	8001154 <__emutls_get_address>
 801bc8c:	4603      	mov	r3, r0
 801bc8e:	4619      	mov	r1, r3
 801bc90:	4620      	mov	r0, r4
 801bc92:	f7ff ff49 	bl	801bb28 <__rcutils_format_error_string>
    gtls_rcutils_error_string_is_formatted = true;
 801bc96:	4811      	ldr	r0, [pc, #68]	; (801bcdc <rcutils_get_error_string+0xb4>)
 801bc98:	f7e5 fa5c 	bl	8001154 <__emutls_get_address>
 801bc9c:	4603      	mov	r3, r0
 801bc9e:	2201      	movs	r2, #1
 801bca0:	701a      	strb	r2, [r3, #0]
  return gtls_rcutils_error_string;
 801bca2:	480f      	ldr	r0, [pc, #60]	; (801bce0 <rcutils_get_error_string+0xb8>)
 801bca4:	f7e5 fa56 	bl	8001154 <__emutls_get_address>
 801bca8:	4602      	mov	r2, r0
 801bcaa:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 801bcae:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 801bcb2:	681b      	ldr	r3, [r3, #0]
 801bcb4:	4618      	mov	r0, r3
 801bcb6:	4611      	mov	r1, r2
 801bcb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bcbc:	461a      	mov	r2, r3
 801bcbe:	f004 ffff 	bl	8020cc0 <memcpy>
}
 801bcc2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 801bcc6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 801bcca:	6818      	ldr	r0, [r3, #0]
 801bccc:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 801bcd0:	46bd      	mov	sp, r7
 801bcd2:	bd90      	pop	{r4, r7, pc}
 801bcd4:	20000050 	.word	0x20000050
 801bcd8:	08026740 	.word	0x08026740
 801bcdc:	20000070 	.word	0x20000070
 801bce0:	20000060 	.word	0x20000060
 801bce4:	20000080 	.word	0x20000080

0801bce8 <rcutils_reset_error>:

void
rcutils_reset_error(void)
{
 801bce8:	b580      	push	{r7, lr}
 801bcea:	f5ad 6dfe 	sub.w	sp, sp, #2032	; 0x7f0
 801bcee:	af00      	add	r7, sp, #0
  gtls_rcutils_error_state = (const rcutils_error_state_t) {
 801bcf0:	4813      	ldr	r0, [pc, #76]	; (801bd40 <rcutils_reset_error+0x58>)
 801bcf2:	f7e5 fa2f 	bl	8001154 <__emutls_get_address>
 801bcf6:	4603      	mov	r3, r0
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 801bcfe:	461a      	mov	r2, r3
 801bd00:	2100      	movs	r1, #0
 801bd02:	f005 f805 	bl	8020d10 <memset>
    .message = {0}, .file = {0}, .line_number = 0
  };  // NOLINT(readability/braces)
  gtls_rcutils_error_string_is_formatted = false;
 801bd06:	480f      	ldr	r0, [pc, #60]	; (801bd44 <rcutils_reset_error+0x5c>)
 801bd08:	f7e5 fa24 	bl	8001154 <__emutls_get_address>
 801bd0c:	4603      	mov	r3, r0
 801bd0e:	2200      	movs	r2, #0
 801bd10:	701a      	strb	r2, [r3, #0]
  gtls_rcutils_error_string = (const rcutils_error_string_t) {
 801bd12:	480d      	ldr	r0, [pc, #52]	; (801bd48 <rcutils_reset_error+0x60>)
 801bd14:	f7e5 fa1e 	bl	8001154 <__emutls_get_address>
 801bd18:	4603      	mov	r3, r0
 801bd1a:	4a0c      	ldr	r2, [pc, #48]	; (801bd4c <rcutils_reset_error+0x64>)
 801bd1c:	4618      	mov	r0, r3
 801bd1e:	4611      	mov	r1, r2
 801bd20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bd24:	461a      	mov	r2, r3
 801bd26:	f004 ffcb 	bl	8020cc0 <memcpy>
    .str = "\0"
  };
  gtls_rcutils_error_is_set = false;
 801bd2a:	4809      	ldr	r0, [pc, #36]	; (801bd50 <rcutils_reset_error+0x68>)
 801bd2c:	f7e5 fa12 	bl	8001154 <__emutls_get_address>
 801bd30:	4603      	mov	r3, r0
 801bd32:	2200      	movs	r2, #0
 801bd34:	701a      	strb	r2, [r3, #0]
}
 801bd36:	bf00      	nop
 801bd38:	f507 67fe 	add.w	r7, r7, #2032	; 0x7f0
 801bd3c:	46bd      	mov	sp, r7
 801bd3e:	bd80      	pop	{r7, pc}
 801bd40:	20000080 	.word	0x20000080
 801bd44:	20000070 	.word	0x20000070
 801bd48:	20000060 	.word	0x20000060
 801bd4c:	08026340 	.word	0x08026340
 801bd50:	20000050 	.word	0x20000050

0801bd54 <rcutils_is_directory>:
#endif  // _RCUTILS_NO_FILESYSTEM
}

bool
rcutils_is_directory(const char * abs_path)
{
 801bd54:	b480      	push	{r7}
 801bd56:	b083      	sub	sp, #12
 801bd58:	af00      	add	r7, sp, #0
 801bd5a:	6078      	str	r0, [r7, #4]
#ifdef RCUTILS_NO_FILESYSTEM
  (void) abs_path;
  RCUTILS_SET_ERROR_MSG("not available filesystem");
  return false;
 801bd5c:	2300      	movs	r3, #0
  return (buf.st_mode & S_IFDIR) == S_IFDIR;
#else
  return S_ISDIR(buf.st_mode);
#endif  // _WIN32
#endif  // _RCUTILS_NO_FILESYSTEM
}
 801bd5e:	4618      	mov	r0, r3
 801bd60:	370c      	adds	r7, #12
 801bd62:	46bd      	mov	sp, r7
 801bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd68:	4770      	bx	lr

0801bd6a <rcutils_join_path>:
char *
rcutils_join_path(
  const char * left_hand_path,
  const char * right_hand_path,
  rcutils_allocator_t allocator)
{
 801bd6a:	b082      	sub	sp, #8
 801bd6c:	b480      	push	{r7}
 801bd6e:	b083      	sub	sp, #12
 801bd70:	af00      	add	r7, sp, #0
 801bd72:	6078      	str	r0, [r7, #4]
 801bd74:	6039      	str	r1, [r7, #0]
 801bd76:	f107 0110 	add.w	r1, r7, #16
 801bd7a:	e881 000c 	stmia.w	r1, {r2, r3}
#ifdef RCUTILS_NO_FILESYSTEM
  (void) left_hand_path;
  (void) right_hand_path;
  (void) allocator;
  RCUTILS_SET_ERROR_MSG("not available filesystem");
  return NULL;
 801bd7e:	2300      	movs	r3, #0
  return rcutils_format_string(
    allocator,
    "%s%s%s",
    left_hand_path, RCUTILS_PATH_DELIMITER, right_hand_path);
#endif  // _RCUTILS_NO_FILESYSTEM
}
 801bd80:	4618      	mov	r0, r3
 801bd82:	370c      	adds	r7, #12
 801bd84:	46bd      	mov	sp, r7
 801bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd8a:	b002      	add	sp, #8
 801bd8c:	4770      	bx	lr

0801bd8e <rcutils_to_native_path>:

char *
rcutils_to_native_path(
  const char * path,
  rcutils_allocator_t allocator)
{
 801bd8e:	b084      	sub	sp, #16
 801bd90:	b480      	push	{r7}
 801bd92:	b083      	sub	sp, #12
 801bd94:	af00      	add	r7, sp, #0
 801bd96:	6078      	str	r0, [r7, #4]
 801bd98:	f107 0014 	add.w	r0, r7, #20
 801bd9c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
#ifdef RCUTILS_NO_FILESYSTEM
  (void) path;
  (void) allocator;
  RCUTILS_SET_ERROR_MSG("not available filesystem");
  return NULL;
 801bda0:	2300      	movs	r3, #0
    return NULL;
  }

  return rcutils_repl_str(path, "/", RCUTILS_PATH_DELIMITER, &allocator);
#endif  // _RCUTILS_NO_FILESYSTEM
}
 801bda2:	4618      	mov	r0, r3
 801bda4:	370c      	adds	r7, #12
 801bda6:	46bd      	mov	sp, r7
 801bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdac:	b004      	add	sp, #16
 801bdae:	4770      	bx	lr

0801bdb0 <rcutils_format_string_limit>:
rcutils_format_string_limit(
  rcutils_allocator_t allocator,
  size_t limit,
  const char * format_string,
  ...)
{
 801bdb0:	b40f      	push	{r0, r1, r2, r3}
 801bdb2:	b580      	push	{r7, lr}
 801bdb4:	b086      	sub	sp, #24
 801bdb6:	af00      	add	r7, sp, #0
 801bdb8:	f107 0c20 	add.w	ip, r7, #32
 801bdbc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  if (NULL == format_string) {
 801bdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d101      	bne.n	801bdca <rcutils_format_string_limit+0x1a>
    return NULL;
 801bdc6:	2300      	movs	r3, #0
 801bdc8:	e04a      	b.n	801be60 <rcutils_format_string_limit+0xb0>
  }
  RCUTILS_CHECK_ALLOCATOR(&allocator, return NULL);
 801bdca:	f107 0020 	add.w	r0, r7, #32
 801bdce:	f7ff fccd 	bl	801b76c <rcutils_allocator_is_valid>
 801bdd2:	4603      	mov	r3, r0
 801bdd4:	f083 0301 	eor.w	r3, r3, #1
 801bdd8:	b2db      	uxtb	r3, r3
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d001      	beq.n	801bde2 <rcutils_format_string_limit+0x32>
 801bdde:	2300      	movs	r3, #0
 801bde0:	e03e      	b.n	801be60 <rcutils_format_string_limit+0xb0>
  // extract the variadic arguments twice, once for length calculatio and once for formatting.
  va_list args1;
  va_start(args1, format_string);
 801bde2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801bde6:	60bb      	str	r3, [r7, #8]
  va_list args2;
  va_copy(args2, args1);
 801bde8:	68bb      	ldr	r3, [r7, #8]
 801bdea:	607b      	str	r3, [r7, #4]
  // first calculate the output string
  size_t bytes_to_be_written = (size_t)rcutils_vsnprintf(NULL, 0, format_string, args1);
 801bdec:	68bb      	ldr	r3, [r7, #8]
 801bdee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bdf0:	2100      	movs	r1, #0
 801bdf2:	2000      	movs	r0, #0
 801bdf4:	f000 f966 	bl	801c0c4 <rcutils_vsnprintf>
 801bdf8:	4603      	mov	r3, r0
 801bdfa:	617b      	str	r3, [r7, #20]
  va_end(args1);
  if (bytes_to_be_written == (size_t)-1) {
 801bdfc:	697b      	ldr	r3, [r7, #20]
 801bdfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801be02:	d101      	bne.n	801be08 <rcutils_format_string_limit+0x58>
    va_end(args2);
    return NULL;
 801be04:	2300      	movs	r3, #0
 801be06:	e02b      	b.n	801be60 <rcutils_format_string_limit+0xb0>
  }
  // allocate space for the return string
  if (bytes_to_be_written + 1 > limit) {
 801be08:	697b      	ldr	r3, [r7, #20]
 801be0a:	3301      	adds	r3, #1
 801be0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801be0e:	429a      	cmp	r2, r3
 801be10:	d202      	bcs.n	801be18 <rcutils_format_string_limit+0x68>
    bytes_to_be_written = limit - 1;
 801be12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be14:	3b01      	subs	r3, #1
 801be16:	617b      	str	r3, [r7, #20]
  }
  char * output_string = allocator.allocate(bytes_to_be_written + 1, allocator.state);
 801be18:	6a3b      	ldr	r3, [r7, #32]
 801be1a:	697a      	ldr	r2, [r7, #20]
 801be1c:	3201      	adds	r2, #1
 801be1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801be20:	4610      	mov	r0, r2
 801be22:	4798      	blx	r3
 801be24:	6138      	str	r0, [r7, #16]
  if (NULL == output_string) {
 801be26:	693b      	ldr	r3, [r7, #16]
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d101      	bne.n	801be30 <rcutils_format_string_limit+0x80>
    va_end(args2);
    return NULL;
 801be2c:	2300      	movs	r3, #0
 801be2e:	e017      	b.n	801be60 <rcutils_format_string_limit+0xb0>
  }
  // format the string
  int ret = rcutils_vsnprintf(output_string, bytes_to_be_written + 1, format_string, args2);
 801be30:	697b      	ldr	r3, [r7, #20]
 801be32:	1c59      	adds	r1, r3, #1
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801be38:	6938      	ldr	r0, [r7, #16]
 801be3a:	f000 f943 	bl	801c0c4 <rcutils_vsnprintf>
 801be3e:	60f8      	str	r0, [r7, #12]
  if (0 > ret) {
 801be40:	68fb      	ldr	r3, [r7, #12]
 801be42:	2b00      	cmp	r3, #0
 801be44:	da06      	bge.n	801be54 <rcutils_format_string_limit+0xa4>
    allocator.deallocate(output_string, allocator.state);
 801be46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801be4a:	4611      	mov	r1, r2
 801be4c:	6938      	ldr	r0, [r7, #16]
 801be4e:	4798      	blx	r3
    va_end(args2);
    return NULL;
 801be50:	2300      	movs	r3, #0
 801be52:	e005      	b.n	801be60 <rcutils_format_string_limit+0xb0>
  }
  output_string[bytes_to_be_written] = '\0';
 801be54:	693a      	ldr	r2, [r7, #16]
 801be56:	697b      	ldr	r3, [r7, #20]
 801be58:	4413      	add	r3, r2
 801be5a:	2200      	movs	r2, #0
 801be5c:	701a      	strb	r2, [r3, #0]
  va_end(args2);
  return output_string;
 801be5e:	693b      	ldr	r3, [r7, #16]
}
 801be60:	4618      	mov	r0, r3
 801be62:	3718      	adds	r7, #24
 801be64:	46bd      	mov	sp, r7
 801be66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801be6a:	b004      	add	sp, #16
 801be6c:	4770      	bx	lr
	...

0801be70 <rcutils_get_env>:
#pragma warning(disable : 4996)
#endif

const char *
rcutils_get_env(const char * env_name, const char ** env_value)
{
 801be70:	b580      	push	{r7, lr}
 801be72:	b082      	sub	sp, #8
 801be74:	af00      	add	r7, sp, #0
 801be76:	6078      	str	r0, [r7, #4]
 801be78:	6039      	str	r1, [r7, #0]
  RCUTILS_CAN_RETURN_WITH_ERROR_OF("some string error");

  if (NULL == env_name) {
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d101      	bne.n	801be84 <rcutils_get_env+0x14>
    return "argument env_name is null";
 801be80:	4b0c      	ldr	r3, [pc, #48]	; (801beb4 <rcutils_get_env+0x44>)
 801be82:	e012      	b.n	801beaa <rcutils_get_env+0x3a>
  }
  if (NULL == env_value) {
 801be84:	683b      	ldr	r3, [r7, #0]
 801be86:	2b00      	cmp	r3, #0
 801be88:	d101      	bne.n	801be8e <rcutils_get_env+0x1e>
    return "argument env_value is null";
 801be8a:	4b0b      	ldr	r3, [pc, #44]	; (801beb8 <rcutils_get_env+0x48>)
 801be8c:	e00d      	b.n	801beaa <rcutils_get_env+0x3a>
  }

  // TODO(Suyash458): getenv is deprecated on Windows; consider using getenv_s instead
  *env_value = getenv(env_name);
 801be8e:	6878      	ldr	r0, [r7, #4]
 801be90:	f004 fe86 	bl	8020ba0 <getenv>
 801be94:	4602      	mov	r2, r0
 801be96:	683b      	ldr	r3, [r7, #0]
 801be98:	601a      	str	r2, [r3, #0]

  if (NULL == *env_value) {
 801be9a:	683b      	ldr	r3, [r7, #0]
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d102      	bne.n	801bea8 <rcutils_get_env+0x38>
    *env_value = "";
 801bea2:	683b      	ldr	r3, [r7, #0]
 801bea4:	4a05      	ldr	r2, [pc, #20]	; (801bebc <rcutils_get_env+0x4c>)
 801bea6:	601a      	str	r2, [r3, #0]
  }
  return NULL;
 801bea8:	2300      	movs	r3, #0
}
 801beaa:	4618      	mov	r0, r3
 801beac:	3708      	adds	r7, #8
 801beae:	46bd      	mov	sp, r7
 801beb0:	bd80      	pop	{r7, pc}
 801beb2:	bf00      	nop
 801beb4:	08026b40 	.word	0x08026b40
 801beb8:	08026b5c 	.word	0x08026b5c
 801bebc:	08026b78 	.word	0x08026b78

0801bec0 <rcutils_repl_str>:
rcutils_repl_str(
  const char * str,
  const char * from,
  const char * to,
  const rcutils_allocator_t * allocator)
{
 801bec0:	b590      	push	{r4, r7, lr}
 801bec2:	b097      	sub	sp, #92	; 0x5c
 801bec4:	af00      	add	r7, sp, #0
 801bec6:	60f8      	str	r0, [r7, #12]
 801bec8:	60b9      	str	r1, [r7, #8]
 801beca:	607a      	str	r2, [r7, #4]
 801becc:	603b      	str	r3, [r7, #0]
  /* Adjust each of the below values to suit your needs. */

  /* Increment positions cache size initially by this number. */
  size_t cache_sz_inc = 16;
 801bece:	2310      	movs	r3, #16
 801bed0:	657b      	str	r3, [r7, #84]	; 0x54
  /* Thereafter, each time capacity needs to be increased,
   * multiply the increment by this factor. */
  const size_t cache_sz_inc_factor = 3;
 801bed2:	2303      	movs	r3, #3
 801bed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* But never increment capacity by more than this number. */
  const size_t cache_sz_inc_max = 1048576;
 801bed6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801beda:	62bb      	str	r3, [r7, #40]	; 0x28

  char *pret, *ret = NULL;
 801bedc:	2300      	movs	r3, #0
 801bede:	64fb      	str	r3, [r7, #76]	; 0x4c
  const char *pstr2, *pstr = str;
 801bee0:	68fb      	ldr	r3, [r7, #12]
 801bee2:	64bb      	str	r3, [r7, #72]	; 0x48
  size_t i, count = 0;
 801bee4:	2300      	movs	r3, #0
 801bee6:	643b      	str	r3, [r7, #64]	; 0x40
  #if (__STDC_VERSION__ >= 199901L)
  uintptr_t *pos_cache_tmp, *pos_cache = NULL;
 801bee8:	2300      	movs	r3, #0
 801beea:	63fb      	str	r3, [r7, #60]	; 0x3c
  #else
  ptrdiff_t *pos_cache_tmp, *pos_cache = NULL;
  #endif
  size_t cache_sz = 0;
 801beec:	2300      	movs	r3, #0
 801beee:	63bb      	str	r3, [r7, #56]	; 0x38
  size_t cpylen, orglen, retlen, tolen, fromlen = strlen(from);
 801bef0:	68b8      	ldr	r0, [r7, #8]
 801bef2:	f7e4 f997 	bl	8000224 <strlen>
 801bef6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Find all matches and cache their positions. */
  while ((pstr2 = strstr(pstr, from)) != NULL) {
 801bef8:	e034      	b.n	801bf64 <rcutils_repl_str+0xa4>
    count++;
 801befa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801befc:	3301      	adds	r3, #1
 801befe:	643b      	str	r3, [r7, #64]	; 0x40

    /* Increase the cache size when necessary. */
    if (cache_sz < count) {
 801bf00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bf02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf04:	429a      	cmp	r2, r3
 801bf06:	d21d      	bcs.n	801bf44 <rcutils_repl_str+0x84>
      cache_sz += cache_sz_inc;
 801bf08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bf0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bf0c:	4413      	add	r3, r2
 801bf0e:	63bb      	str	r3, [r7, #56]	; 0x38
      pos_cache_tmp =
        allocator->reallocate(pos_cache, sizeof(*pos_cache) * cache_sz, allocator->state);
 801bf10:	683b      	ldr	r3, [r7, #0]
 801bf12:	689b      	ldr	r3, [r3, #8]
 801bf14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bf16:	0091      	lsls	r1, r2, #2
 801bf18:	683a      	ldr	r2, [r7, #0]
 801bf1a:	6912      	ldr	r2, [r2, #16]
 801bf1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801bf1e:	4798      	blx	r3
 801bf20:	6178      	str	r0, [r7, #20]
      if (pos_cache_tmp == NULL) {
 801bf22:	697b      	ldr	r3, [r7, #20]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	f000 80a6 	beq.w	801c076 <rcutils_repl_str+0x1b6>
        goto end_repl_str;
      } else {
        pos_cache = pos_cache_tmp;
 801bf2a:	697b      	ldr	r3, [r7, #20]
 801bf2c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      cache_sz_inc *= cache_sz_inc_factor;
 801bf2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bf30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf32:	fb02 f303 	mul.w	r3, r2, r3
 801bf36:	657b      	str	r3, [r7, #84]	; 0x54
      if (cache_sz_inc > cache_sz_inc_max) {
 801bf38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf3c:	429a      	cmp	r2, r3
 801bf3e:	d901      	bls.n	801bf44 <rcutils_repl_str+0x84>
        cache_sz_inc = cache_sz_inc_max;
 801bf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf42:	657b      	str	r3, [r7, #84]	; 0x54
      }
    }

    pos_cache[count-1] = (size_t)(pstr2 - str);
 801bf44:	6a3a      	ldr	r2, [r7, #32]
 801bf46:	68fb      	ldr	r3, [r7, #12]
 801bf48:	1ad1      	subs	r1, r2, r3
 801bf4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801bf50:	3b01      	subs	r3, #1
 801bf52:	009b      	lsls	r3, r3, #2
 801bf54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bf56:	4413      	add	r3, r2
 801bf58:	460a      	mov	r2, r1
 801bf5a:	601a      	str	r2, [r3, #0]
    pstr = pstr2 + fromlen;
 801bf5c:	6a3a      	ldr	r2, [r7, #32]
 801bf5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf60:	4413      	add	r3, r2
 801bf62:	64bb      	str	r3, [r7, #72]	; 0x48
  while ((pstr2 = strstr(pstr, from)) != NULL) {
 801bf64:	68b9      	ldr	r1, [r7, #8]
 801bf66:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801bf68:	f006 f948 	bl	80221fc <strstr>
 801bf6c:	6238      	str	r0, [r7, #32]
 801bf6e:	6a3b      	ldr	r3, [r7, #32]
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d1c2      	bne.n	801befa <rcutils_repl_str+0x3a>
  }

  orglen = (size_t)(pstr - str) + strlen(pstr);
 801bf74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801bf76:	68fb      	ldr	r3, [r7, #12]
 801bf78:	1ad3      	subs	r3, r2, r3
 801bf7a:	461c      	mov	r4, r3
 801bf7c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801bf7e:	f7e4 f951 	bl	8000224 <strlen>
 801bf82:	4603      	mov	r3, r0
 801bf84:	4423      	add	r3, r4
 801bf86:	61fb      	str	r3, [r7, #28]

  /* Allocate memory for the post-replacement string. */
  if (count > 0) {
 801bf88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d00d      	beq.n	801bfaa <rcutils_repl_str+0xea>
    tolen = strlen(to);
 801bf8e:	6878      	ldr	r0, [r7, #4]
 801bf90:	f7e4 f948 	bl	8000224 <strlen>
 801bf94:	6338      	str	r0, [r7, #48]	; 0x30
    retlen = orglen + (tolen - fromlen) * count;
 801bf96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf9a:	1ad3      	subs	r3, r2, r3
 801bf9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801bf9e:	fb02 f303 	mul.w	r3, r2, r3
 801bfa2:	69fa      	ldr	r2, [r7, #28]
 801bfa4:	4413      	add	r3, r2
 801bfa6:	637b      	str	r3, [r7, #52]	; 0x34
 801bfa8:	e001      	b.n	801bfae <rcutils_repl_str+0xee>
  } else {
    retlen = orglen;
 801bfaa:	69fb      	ldr	r3, [r7, #28]
 801bfac:	637b      	str	r3, [r7, #52]	; 0x34
  }
  ret = allocator->allocate(retlen + 1, allocator->state);
 801bfae:	683b      	ldr	r3, [r7, #0]
 801bfb0:	681b      	ldr	r3, [r3, #0]
 801bfb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bfb4:	1c50      	adds	r0, r2, #1
 801bfb6:	683a      	ldr	r2, [r7, #0]
 801bfb8:	6912      	ldr	r2, [r2, #16]
 801bfba:	4611      	mov	r1, r2
 801bfbc:	4798      	blx	r3
 801bfbe:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (ret == NULL) {
 801bfc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d059      	beq.n	801c07a <rcutils_repl_str+0x1ba>
    goto end_repl_str;
  }

  if (count == 0) {
 801bfc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d104      	bne.n	801bfd6 <rcutils_repl_str+0x116>
    /* If no matches, then just duplicate the string. */
#if defined(_MSC_VER)
# pragma warning(push)
# pragma warning(disable: 4996)  // strcpy may be unsafe
#endif
    strcpy(ret, str);  // NOLINT
 801bfcc:	68f9      	ldr	r1, [r7, #12]
 801bfce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801bfd0:	f006 f8ec 	bl	80221ac <strcpy>
 801bfd4:	e052      	b.n	801c07c <rcutils_repl_str+0x1bc>
# pragma warning(pop)
#endif
  } else {
    /* Otherwise, duplicate the string whilst performing
     * the replacements using the position cache. */
    pret = ret;
 801bfd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bfd8:	653b      	str	r3, [r7, #80]	; 0x50
    memcpy(pret, str, pos_cache[0]);
 801bfda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bfdc:	681b      	ldr	r3, [r3, #0]
 801bfde:	461a      	mov	r2, r3
 801bfe0:	68f9      	ldr	r1, [r7, #12]
 801bfe2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801bfe4:	f004 fe6c 	bl	8020cc0 <memcpy>
    pret += pos_cache[0];
 801bfe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bfea:	681b      	ldr	r3, [r3, #0]
 801bfec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801bfee:	4413      	add	r3, r2
 801bff0:	653b      	str	r3, [r7, #80]	; 0x50
    for (i = 0; i < count; i++) {
 801bff2:	2300      	movs	r3, #0
 801bff4:	647b      	str	r3, [r7, #68]	; 0x44
 801bff6:	e034      	b.n	801c062 <rcutils_repl_str+0x1a2>
      memcpy(pret, to, tolen);
 801bff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bffa:	6879      	ldr	r1, [r7, #4]
 801bffc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801bffe:	f004 fe5f 	bl	8020cc0 <memcpy>
      pret += tolen;
 801c002:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c006:	4413      	add	r3, r2
 801c008:	653b      	str	r3, [r7, #80]	; 0x50
      pstr = str + pos_cache[i] + fromlen;
 801c00a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c00c:	009b      	lsls	r3, r3, #2
 801c00e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c010:	4413      	add	r3, r2
 801c012:	681a      	ldr	r2, [r3, #0]
 801c014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c016:	4413      	add	r3, r2
 801c018:	68fa      	ldr	r2, [r7, #12]
 801c01a:	4413      	add	r3, r2
 801c01c:	64bb      	str	r3, [r7, #72]	; 0x48
      cpylen = (i == count-1 ? orglen : pos_cache[i+1]) - pos_cache[i] - fromlen;
 801c01e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c020:	3b01      	subs	r3, #1
 801c022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c024:	429a      	cmp	r2, r3
 801c026:	d006      	beq.n	801c036 <rcutils_repl_str+0x176>
 801c028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c02a:	3301      	adds	r3, #1
 801c02c:	009b      	lsls	r3, r3, #2
 801c02e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c030:	4413      	add	r3, r2
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	e000      	b.n	801c038 <rcutils_repl_str+0x178>
 801c036:	69fb      	ldr	r3, [r7, #28]
 801c038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c03a:	0092      	lsls	r2, r2, #2
 801c03c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c03e:	440a      	add	r2, r1
 801c040:	6812      	ldr	r2, [r2, #0]
 801c042:	1a9a      	subs	r2, r3, r2
 801c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c046:	1ad3      	subs	r3, r2, r3
 801c048:	61bb      	str	r3, [r7, #24]
      memcpy(pret, pstr, cpylen);
 801c04a:	69ba      	ldr	r2, [r7, #24]
 801c04c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801c04e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801c050:	f004 fe36 	bl	8020cc0 <memcpy>
      pret += cpylen;
 801c054:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c056:	69bb      	ldr	r3, [r7, #24]
 801c058:	4413      	add	r3, r2
 801c05a:	653b      	str	r3, [r7, #80]	; 0x50
    for (i = 0; i < count; i++) {
 801c05c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c05e:	3301      	adds	r3, #1
 801c060:	647b      	str	r3, [r7, #68]	; 0x44
 801c062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c066:	429a      	cmp	r2, r3
 801c068:	d3c6      	bcc.n	801bff8 <rcutils_repl_str+0x138>
    }
    ret[retlen] = '\0';
 801c06a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c06c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c06e:	4413      	add	r3, r2
 801c070:	2200      	movs	r2, #0
 801c072:	701a      	strb	r2, [r3, #0]
 801c074:	e002      	b.n	801c07c <rcutils_repl_str+0x1bc>
        goto end_repl_str;
 801c076:	bf00      	nop
 801c078:	e000      	b.n	801c07c <rcutils_repl_str+0x1bc>
    goto end_repl_str;
 801c07a:	bf00      	nop
  }

end_repl_str:
  /* Free the cache and return the post-replacement string,
   * which will be NULL in the event of an error. */
  allocator->deallocate(pos_cache, allocator->state);
 801c07c:	683b      	ldr	r3, [r7, #0]
 801c07e:	685b      	ldr	r3, [r3, #4]
 801c080:	683a      	ldr	r2, [r7, #0]
 801c082:	6912      	ldr	r2, [r2, #16]
 801c084:	4611      	mov	r1, r2
 801c086:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801c088:	4798      	blx	r3
  return ret;
 801c08a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 801c08c:	4618      	mov	r0, r3
 801c08e:	375c      	adds	r7, #92	; 0x5c
 801c090:	46bd      	mov	sp, r7
 801c092:	bd90      	pop	{r4, r7, pc}

0801c094 <rcutils_snprintf>:
#include <stdarg.h>
#include <stdio.h>

int
rcutils_snprintf(char * buffer, size_t buffer_size, const char * format, ...)
{
 801c094:	b40c      	push	{r2, r3}
 801c096:	b580      	push	{r7, lr}
 801c098:	b084      	sub	sp, #16
 801c09a:	af00      	add	r7, sp, #0
 801c09c:	6078      	str	r0, [r7, #4]
 801c09e:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 801c0a0:	f107 031c 	add.w	r3, r7, #28
 801c0a4:	60bb      	str	r3, [r7, #8]
  int ret = rcutils_vsnprintf(buffer, buffer_size, format, args);
 801c0a6:	68bb      	ldr	r3, [r7, #8]
 801c0a8:	69ba      	ldr	r2, [r7, #24]
 801c0aa:	6839      	ldr	r1, [r7, #0]
 801c0ac:	6878      	ldr	r0, [r7, #4]
 801c0ae:	f000 f809 	bl	801c0c4 <rcutils_vsnprintf>
 801c0b2:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return ret;
 801c0b4:	68fb      	ldr	r3, [r7, #12]
}
 801c0b6:	4618      	mov	r0, r3
 801c0b8:	3710      	adds	r7, #16
 801c0ba:	46bd      	mov	sp, r7
 801c0bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c0c0:	b002      	add	sp, #8
 801c0c2:	4770      	bx	lr

0801c0c4 <rcutils_vsnprintf>:

int
rcutils_vsnprintf(char * buffer, size_t buffer_size, const char * format, va_list args)
{
 801c0c4:	b580      	push	{r7, lr}
 801c0c6:	b086      	sub	sp, #24
 801c0c8:	af00      	add	r7, sp, #0
 801c0ca:	60f8      	str	r0, [r7, #12]
 801c0cc:	60b9      	str	r1, [r7, #8]
 801c0ce:	607a      	str	r2, [r7, #4]
 801c0d0:	603b      	str	r3, [r7, #0]
  RCUTILS_CAN_FAIL_WITH({errno = EINVAL; return -1;});

  if (NULL == format) {
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d107      	bne.n	801c0e8 <rcutils_vsnprintf+0x24>
    errno = EINVAL;
 801c0d8:	f004 fc40 	bl	802095c <__errno>
 801c0dc:	4603      	mov	r3, r0
 801c0de:	2216      	movs	r2, #22
 801c0e0:	601a      	str	r2, [r3, #0]
    return -1;
 801c0e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c0e6:	e023      	b.n	801c130 <rcutils_vsnprintf+0x6c>
  }
  if (NULL == buffer && 0 == buffer_size) {
 801c0e8:	68fb      	ldr	r3, [r7, #12]
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d10a      	bne.n	801c104 <rcutils_vsnprintf+0x40>
 801c0ee:	68bb      	ldr	r3, [r7, #8]
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d107      	bne.n	801c104 <rcutils_vsnprintf+0x40>
#ifndef _WIN32
    return vsnprintf(NULL, 0, format, args);
 801c0f4:	683b      	ldr	r3, [r7, #0]
 801c0f6:	687a      	ldr	r2, [r7, #4]
 801c0f8:	2100      	movs	r1, #0
 801c0fa:	2000      	movs	r0, #0
 801c0fc:	f006 ffe8 	bl	80230d0 <vsniprintf>
 801c100:	4603      	mov	r3, r0
 801c102:	e015      	b.n	801c130 <rcutils_vsnprintf+0x6c>
#else
    return _vscprintf(format, args);
#endif
  }
  if (NULL == buffer || 0 == buffer_size) {
 801c104:	68fb      	ldr	r3, [r7, #12]
 801c106:	2b00      	cmp	r3, #0
 801c108:	d002      	beq.n	801c110 <rcutils_vsnprintf+0x4c>
 801c10a:	68bb      	ldr	r3, [r7, #8]
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	d107      	bne.n	801c120 <rcutils_vsnprintf+0x5c>
    errno = EINVAL;
 801c110:	f004 fc24 	bl	802095c <__errno>
 801c114:	4603      	mov	r3, r0
 801c116:	2216      	movs	r2, #22
 801c118:	601a      	str	r2, [r3, #0]
    return -1;
 801c11a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c11e:	e007      	b.n	801c130 <rcutils_vsnprintf+0x6c>
  }
  int ret;
#ifndef _WIN32
  ret = vsnprintf(buffer, buffer_size, format, args);
 801c120:	683b      	ldr	r3, [r7, #0]
 801c122:	687a      	ldr	r2, [r7, #4]
 801c124:	68b9      	ldr	r1, [r7, #8]
 801c126:	68f8      	ldr	r0, [r7, #12]
 801c128:	f006 ffd2 	bl	80230d0 <vsniprintf>
 801c12c:	6178      	str	r0, [r7, #20]
  if (-1 == ret && 0 == errno) {
    // This is the case where truncation has occurred, return how long it would have been.
    return _vscprintf(format, args);
  }
#endif
  return ret;
 801c12e:	697b      	ldr	r3, [r7, #20]
}
 801c130:	4618      	mov	r0, r3
 801c132:	3718      	adds	r7, #24
 801c134:	46bd      	mov	sp, r7
 801c136:	bd80      	pop	{r7, pc}

0801c138 <rcutils_strdup>:
#include "rcutils/macros.h"


char *
rcutils_strdup(const char * str, rcutils_allocator_t allocator)
{
 801c138:	b084      	sub	sp, #16
 801c13a:	b5b0      	push	{r4, r5, r7, lr}
 801c13c:	b086      	sub	sp, #24
 801c13e:	af04      	add	r7, sp, #16
 801c140:	6078      	str	r0, [r7, #4]
 801c142:	f107 001c 	add.w	r0, r7, #28
 801c146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(NULL);

  if (NULL == str) {
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d101      	bne.n	801c154 <rcutils_strdup+0x1c>
    return NULL;
 801c150:	2300      	movs	r3, #0
 801c152:	e012      	b.n	801c17a <rcutils_strdup+0x42>
  }
  return rcutils_strndup(str, strlen(str), allocator);
 801c154:	6878      	ldr	r0, [r7, #4]
 801c156:	f7e4 f865 	bl	8000224 <strlen>
 801c15a:	4605      	mov	r5, r0
 801c15c:	466c      	mov	r4, sp
 801c15e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c162:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c166:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801c16a:	f107 031c 	add.w	r3, r7, #28
 801c16e:	cb0c      	ldmia	r3, {r2, r3}
 801c170:	4629      	mov	r1, r5
 801c172:	6878      	ldr	r0, [r7, #4]
 801c174:	f000 f808 	bl	801c188 <rcutils_strndup>
 801c178:	4603      	mov	r3, r0
}
 801c17a:	4618      	mov	r0, r3
 801c17c:	3708      	adds	r7, #8
 801c17e:	46bd      	mov	sp, r7
 801c180:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801c184:	b004      	add	sp, #16
 801c186:	4770      	bx	lr

0801c188 <rcutils_strndup>:

char *
rcutils_strndup(const char * str, size_t string_length, rcutils_allocator_t allocator)
{
 801c188:	b082      	sub	sp, #8
 801c18a:	b580      	push	{r7, lr}
 801c18c:	b084      	sub	sp, #16
 801c18e:	af00      	add	r7, sp, #0
 801c190:	6078      	str	r0, [r7, #4]
 801c192:	6039      	str	r1, [r7, #0]
 801c194:	f107 0118 	add.w	r1, r7, #24
 801c198:	e881 000c 	stmia.w	r1, {r2, r3}
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(NULL);

  if (NULL == str) {
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	d101      	bne.n	801c1a6 <rcutils_strndup+0x1e>
    return NULL;
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	e018      	b.n	801c1d8 <rcutils_strndup+0x50>
  }
  char * new_string = allocator.allocate(string_length + 1, allocator.state);
 801c1a6:	69bb      	ldr	r3, [r7, #24]
 801c1a8:	683a      	ldr	r2, [r7, #0]
 801c1aa:	3201      	adds	r2, #1
 801c1ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c1ae:	4610      	mov	r0, r2
 801c1b0:	4798      	blx	r3
 801c1b2:	60f8      	str	r0, [r7, #12]
  if (NULL == new_string) {
 801c1b4:	68fb      	ldr	r3, [r7, #12]
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	d101      	bne.n	801c1be <rcutils_strndup+0x36>
    return NULL;
 801c1ba:	2300      	movs	r3, #0
 801c1bc:	e00c      	b.n	801c1d8 <rcutils_strndup+0x50>
  }
  memcpy(new_string, str, string_length + 1);
 801c1be:	683b      	ldr	r3, [r7, #0]
 801c1c0:	3301      	adds	r3, #1
 801c1c2:	461a      	mov	r2, r3
 801c1c4:	6879      	ldr	r1, [r7, #4]
 801c1c6:	68f8      	ldr	r0, [r7, #12]
 801c1c8:	f004 fd7a 	bl	8020cc0 <memcpy>
  new_string[string_length] = '\0';
 801c1cc:	68fa      	ldr	r2, [r7, #12]
 801c1ce:	683b      	ldr	r3, [r7, #0]
 801c1d0:	4413      	add	r3, r2
 801c1d2:	2200      	movs	r2, #0
 801c1d4:	701a      	strb	r2, [r3, #0]
  return new_string;
 801c1d6:	68fb      	ldr	r3, [r7, #12]
}
 801c1d8:	4618      	mov	r0, r3
 801c1da:	3710      	adds	r7, #16
 801c1dc:	46bd      	mov	sp, r7
 801c1de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c1e2:	b002      	add	sp, #8
 801c1e4:	4770      	bx	lr
	...

0801c1e8 <rcutils_get_zero_initialized_string_map>:
  rcutils_allocator_t allocator;
} rcutils_string_map_impl_t;

rcutils_string_map_t
rcutils_get_zero_initialized_string_map(void)
{
 801c1e8:	b480      	push	{r7}
 801c1ea:	af00      	add	r7, sp, #0
  static rcutils_string_map_t zero_initialized_string_map;
  zero_initialized_string_map.impl = NULL;
 801c1ec:	4b04      	ldr	r3, [pc, #16]	; (801c200 <rcutils_get_zero_initialized_string_map+0x18>)
 801c1ee:	2200      	movs	r2, #0
 801c1f0:	601a      	str	r2, [r3, #0]
  return zero_initialized_string_map;
 801c1f2:	4b03      	ldr	r3, [pc, #12]	; (801c200 <rcutils_get_zero_initialized_string_map+0x18>)
 801c1f4:	681b      	ldr	r3, [r3, #0]
}
 801c1f6:	4618      	mov	r0, r3
 801c1f8:	46bd      	mov	sp, r7
 801c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1fe:	4770      	bx	lr
 801c200:	2000e6dc 	.word	0x2000e6dc

0801c204 <rcutils_string_map_init>:
rcutils_ret_t
rcutils_string_map_init(
  rcutils_string_map_t * string_map,
  size_t initial_capacity,
  rcutils_allocator_t allocator)
{
 801c204:	b082      	sub	sp, #8
 801c206:	b5b0      	push	{r4, r5, r7, lr}
 801c208:	b084      	sub	sp, #16
 801c20a:	af00      	add	r7, sp, #0
 801c20c:	6078      	str	r0, [r7, #4]
 801c20e:	6039      	str	r1, [r7, #0]
 801c210:	f107 0120 	add.w	r1, r7, #32
 801c214:	e881 000c 	stmia.w	r1, {r2, r3}
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(string_map, RCUTILS_RET_INVALID_ARGUMENT);
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d101      	bne.n	801c222 <rcutils_string_map_init+0x1e>
 801c21e:	230b      	movs	r3, #11
 801c220:	e04d      	b.n	801c2be <rcutils_string_map_init+0xba>
  if (string_map->impl != NULL) {
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	681b      	ldr	r3, [r3, #0]
 801c226:	2b00      	cmp	r3, #0
 801c228:	d001      	beq.n	801c22e <rcutils_string_map_init+0x2a>
    RCUTILS_SET_ERROR_MSG("string_map already initialized");
    return RCUTILS_RET_STRING_MAP_ALREADY_INIT;
 801c22a:	231e      	movs	r3, #30
 801c22c:	e047      	b.n	801c2be <rcutils_string_map_init+0xba>
  }
  RCUTILS_CHECK_ALLOCATOR_WITH_MSG(
 801c22e:	f107 0020 	add.w	r0, r7, #32
 801c232:	f7ff fa9b 	bl	801b76c <rcutils_allocator_is_valid>
 801c236:	4603      	mov	r3, r0
 801c238:	f083 0301 	eor.w	r3, r3, #1
 801c23c:	b2db      	uxtb	r3, r3
 801c23e:	2b00      	cmp	r3, #0
 801c240:	d001      	beq.n	801c246 <rcutils_string_map_init+0x42>
 801c242:	230b      	movs	r3, #11
 801c244:	e03b      	b.n	801c2be <rcutils_string_map_init+0xba>
    &allocator, "invalid allocator", return RCUTILS_RET_INVALID_ARGUMENT)
  string_map->impl = allocator.allocate(sizeof(rcutils_string_map_impl_t), allocator.state);
 801c246:	6a3b      	ldr	r3, [r7, #32]
 801c248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c24a:	4611      	mov	r1, r2
 801c24c:	2024      	movs	r0, #36	; 0x24
 801c24e:	4798      	blx	r3
 801c250:	4602      	mov	r2, r0
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	601a      	str	r2, [r3, #0]
  if (NULL == string_map->impl) {
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	d101      	bne.n	801c262 <rcutils_string_map_init+0x5e>
    RCUTILS_SET_ERROR_MSG("failed to allocate memory for string map impl struct");
    return RCUTILS_RET_BAD_ALLOC;
 801c25e:	230a      	movs	r3, #10
 801c260:	e02d      	b.n	801c2be <rcutils_string_map_init+0xba>
  }
  string_map->impl->keys = NULL;
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	2200      	movs	r2, #0
 801c268:	601a      	str	r2, [r3, #0]
  string_map->impl->values = NULL;
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	681b      	ldr	r3, [r3, #0]
 801c26e:	2200      	movs	r2, #0
 801c270:	605a      	str	r2, [r3, #4]
  string_map->impl->capacity = 0;
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	2200      	movs	r2, #0
 801c278:	609a      	str	r2, [r3, #8]
  string_map->impl->size = 0;
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	681b      	ldr	r3, [r3, #0]
 801c27e:	2200      	movs	r2, #0
 801c280:	60da      	str	r2, [r3, #12]
  string_map->impl->allocator = allocator;
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	681b      	ldr	r3, [r3, #0]
 801c286:	f103 0410 	add.w	r4, r3, #16
 801c28a:	f107 0520 	add.w	r5, r7, #32
 801c28e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c292:	682b      	ldr	r3, [r5, #0]
 801c294:	6023      	str	r3, [r4, #0]
  rcutils_ret_t ret = rcutils_string_map_reserve(string_map, initial_capacity);
 801c296:	6839      	ldr	r1, [r7, #0]
 801c298:	6878      	ldr	r0, [r7, #4]
 801c29a:	f000 f851 	bl	801c340 <rcutils_string_map_reserve>
 801c29e:	60f8      	str	r0, [r7, #12]
  if (ret != RCUTILS_RET_OK) {
 801c2a0:	68fb      	ldr	r3, [r7, #12]
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	d00a      	beq.n	801c2bc <rcutils_string_map_init+0xb8>
    // error mesage is already set, clean up and return the ret
    allocator.deallocate(string_map->impl, allocator.state);
 801c2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2a8:	687a      	ldr	r2, [r7, #4]
 801c2aa:	6812      	ldr	r2, [r2, #0]
 801c2ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c2ae:	4610      	mov	r0, r2
 801c2b0:	4798      	blx	r3
    string_map->impl = NULL;
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	2200      	movs	r2, #0
 801c2b6:	601a      	str	r2, [r3, #0]
    return ret;
 801c2b8:	68fb      	ldr	r3, [r7, #12]
 801c2ba:	e000      	b.n	801c2be <rcutils_string_map_init+0xba>
  }
  return RCUTILS_RET_OK;
 801c2bc:	2300      	movs	r3, #0
}
 801c2be:	4618      	mov	r0, r3
 801c2c0:	3710      	adds	r7, #16
 801c2c2:	46bd      	mov	sp, r7
 801c2c4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801c2c8:	b002      	add	sp, #8
 801c2ca:	4770      	bx	lr

0801c2cc <rcutils_string_map_fini>:

rcutils_ret_t
rcutils_string_map_fini(rcutils_string_map_t * string_map)
{
 801c2cc:	b5b0      	push	{r4, r5, r7, lr}
 801c2ce:	b088      	sub	sp, #32
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	6078      	str	r0, [r7, #4]
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(string_map, RCUTILS_RET_INVALID_ARGUMENT);
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d101      	bne.n	801c2de <rcutils_string_map_fini+0x12>
 801c2da:	230b      	movs	r3, #11
 801c2dc:	e02c      	b.n	801c338 <rcutils_string_map_fini+0x6c>
  if (NULL == string_map->impl) {
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	681b      	ldr	r3, [r3, #0]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d101      	bne.n	801c2ea <rcutils_string_map_fini+0x1e>
    return RCUTILS_RET_OK;
 801c2e6:	2300      	movs	r3, #0
 801c2e8:	e026      	b.n	801c338 <rcutils_string_map_fini+0x6c>
  }
  rcutils_ret_t ret = rcutils_string_map_clear(string_map);
 801c2ea:	6878      	ldr	r0, [r7, #4]
 801c2ec:	f000 f901 	bl	801c4f2 <rcutils_string_map_clear>
 801c2f0:	61f8      	str	r0, [r7, #28]
  if (ret != RCUTILS_RET_OK) {
 801c2f2:	69fb      	ldr	r3, [r7, #28]
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	d001      	beq.n	801c2fc <rcutils_string_map_fini+0x30>
    // error message already set
    return ret;
 801c2f8:	69fb      	ldr	r3, [r7, #28]
 801c2fa:	e01d      	b.n	801c338 <rcutils_string_map_fini+0x6c>
  }
  ret = rcutils_string_map_reserve(string_map, 0);
 801c2fc:	2100      	movs	r1, #0
 801c2fe:	6878      	ldr	r0, [r7, #4]
 801c300:	f000 f81e 	bl	801c340 <rcutils_string_map_reserve>
 801c304:	61f8      	str	r0, [r7, #28]
  if (ret != RCUTILS_RET_OK) {
 801c306:	69fb      	ldr	r3, [r7, #28]
 801c308:	2b00      	cmp	r3, #0
 801c30a:	d001      	beq.n	801c310 <rcutils_string_map_fini+0x44>
    // error message already set
    return ret;
 801c30c:	69fb      	ldr	r3, [r7, #28]
 801c30e:	e013      	b.n	801c338 <rcutils_string_map_fini+0x6c>
  }
  rcutils_allocator_t allocator = string_map->impl->allocator;
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	681b      	ldr	r3, [r3, #0]
 801c314:	f107 0408 	add.w	r4, r7, #8
 801c318:	f103 0510 	add.w	r5, r3, #16
 801c31c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c31e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c320:	682b      	ldr	r3, [r5, #0]
 801c322:	6023      	str	r3, [r4, #0]

  allocator.deallocate(string_map->impl, allocator.state);
 801c324:	68fb      	ldr	r3, [r7, #12]
 801c326:	687a      	ldr	r2, [r7, #4]
 801c328:	6812      	ldr	r2, [r2, #0]
 801c32a:	69b9      	ldr	r1, [r7, #24]
 801c32c:	4610      	mov	r0, r2
 801c32e:	4798      	blx	r3
  string_map->impl = NULL;
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	2200      	movs	r2, #0
 801c334:	601a      	str	r2, [r3, #0]

  return RCUTILS_RET_OK;
 801c336:	2300      	movs	r3, #0
}
 801c338:	4618      	mov	r0, r3
 801c33a:	3720      	adds	r7, #32
 801c33c:	46bd      	mov	sp, r7
 801c33e:	bdb0      	pop	{r4, r5, r7, pc}

0801c340 <rcutils_string_map_reserve>:
  return RCUTILS_RET_OK;
}

rcutils_ret_t
rcutils_string_map_reserve(rcutils_string_map_t * string_map, size_t capacity)
{
 801c340:	b5b0      	push	{r4, r5, r7, lr}
 801c342:	b08a      	sub	sp, #40	; 0x28
 801c344:	af00      	add	r7, sp, #0
 801c346:	6078      	str	r0, [r7, #4]
 801c348:	6039      	str	r1, [r7, #0]
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(string_map, RCUTILS_RET_INVALID_ARGUMENT);
 801c34a:	687b      	ldr	r3, [r7, #4]
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	d101      	bne.n	801c354 <rcutils_string_map_reserve+0x14>
 801c350:	230b      	movs	r3, #11
 801c352:	e091      	b.n	801c478 <rcutils_string_map_reserve+0x138>
  RCUTILS_CHECK_FOR_NULL_WITH_MSG(
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	2b00      	cmp	r3, #0
 801c35a:	d101      	bne.n	801c360 <rcutils_string_map_reserve+0x20>
 801c35c:	231f      	movs	r3, #31
 801c35e:	e08b      	b.n	801c478 <rcutils_string_map_reserve+0x138>
    string_map->impl, "invalid string map", return RCUTILS_RET_STRING_MAP_INVALID);
  rcutils_allocator_t allocator = string_map->impl->allocator;
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	681b      	ldr	r3, [r3, #0]
 801c364:	f107 0408 	add.w	r4, r7, #8
 801c368:	f103 0510 	add.w	r5, r3, #16
 801c36c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c36e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c370:	682b      	ldr	r3, [r5, #0]
 801c372:	6023      	str	r3, [r4, #0]
  // short circuit, if requested capacity is less than the size of the map
  if (capacity < string_map->impl->size) {
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	68db      	ldr	r3, [r3, #12]
 801c37a:	683a      	ldr	r2, [r7, #0]
 801c37c:	429a      	cmp	r2, r3
 801c37e:	d208      	bcs.n	801c392 <rcutils_string_map_reserve+0x52>
    // set the capacity to the current size instead
    return rcutils_string_map_reserve(string_map, string_map->impl->size);
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	681b      	ldr	r3, [r3, #0]
 801c384:	68db      	ldr	r3, [r3, #12]
 801c386:	4619      	mov	r1, r3
 801c388:	6878      	ldr	r0, [r7, #4]
 801c38a:	f7ff ffd9 	bl	801c340 <rcutils_string_map_reserve>
 801c38e:	4603      	mov	r3, r0
 801c390:	e072      	b.n	801c478 <rcutils_string_map_reserve+0x138>
  }
  if (capacity == string_map->impl->capacity) {
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	689b      	ldr	r3, [r3, #8]
 801c398:	683a      	ldr	r2, [r7, #0]
 801c39a:	429a      	cmp	r2, r3
 801c39c:	d101      	bne.n	801c3a2 <rcutils_string_map_reserve+0x62>
    // if requested capacity is equal to the current capacity, nothing to do
    return RCUTILS_RET_OK;
 801c39e:	2300      	movs	r3, #0
 801c3a0:	e06a      	b.n	801c478 <rcutils_string_map_reserve+0x138>
  } else if (capacity == 0) {
 801c3a2:	683b      	ldr	r3, [r7, #0]
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	d116      	bne.n	801c3d6 <rcutils_string_map_reserve+0x96>
    // if the requested capacity is zero, then make sure the existing keys and values are free'd
    allocator.deallocate(string_map->impl->keys, allocator.state);
 801c3a8:	68fb      	ldr	r3, [r7, #12]
 801c3aa:	687a      	ldr	r2, [r7, #4]
 801c3ac:	6812      	ldr	r2, [r2, #0]
 801c3ae:	6812      	ldr	r2, [r2, #0]
 801c3b0:	69b9      	ldr	r1, [r7, #24]
 801c3b2:	4610      	mov	r0, r2
 801c3b4:	4798      	blx	r3
    string_map->impl->keys = NULL;
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	681b      	ldr	r3, [r3, #0]
 801c3ba:	2200      	movs	r2, #0
 801c3bc:	601a      	str	r2, [r3, #0]
    allocator.deallocate(string_map->impl->values, allocator.state);
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	687a      	ldr	r2, [r7, #4]
 801c3c2:	6812      	ldr	r2, [r2, #0]
 801c3c4:	6852      	ldr	r2, [r2, #4]
 801c3c6:	69b9      	ldr	r1, [r7, #24]
 801c3c8:	4610      	mov	r0, r2
 801c3ca:	4798      	blx	r3
    string_map->impl->values = NULL;
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	681b      	ldr	r3, [r3, #0]
 801c3d0:	2200      	movs	r2, #0
 801c3d2:	605a      	str	r2, [r3, #4]
 801c3d4:	e04b      	b.n	801c46e <rcutils_string_map_reserve+0x12e>
    // if the capacity non-zero and different, use realloc to increase/shrink the size
    // note that realloc when the pointer is NULL is the same as malloc
    // note also that realloc will shrink the space if needed

    // ensure that reallocate won't overflow capacity
    if (capacity > (SIZE_MAX / sizeof(char *))) {
 801c3d6:	683b      	ldr	r3, [r7, #0]
 801c3d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c3dc:	d301      	bcc.n	801c3e2 <rcutils_string_map_reserve+0xa2>
      RCUTILS_SET_ERROR_MSG("requested capacity for string_map too large");
      return RCUTILS_RET_BAD_ALLOC;
 801c3de:	230a      	movs	r3, #10
 801c3e0:	e04a      	b.n	801c478 <rcutils_string_map_reserve+0x138>
    }

    // resize the keys, assigning the result only if it succeeds
    char ** new_keys =
      allocator.reallocate(string_map->impl->keys, capacity * sizeof(char *), allocator.state);
 801c3e2:	693b      	ldr	r3, [r7, #16]
 801c3e4:	687a      	ldr	r2, [r7, #4]
 801c3e6:	6812      	ldr	r2, [r2, #0]
 801c3e8:	6810      	ldr	r0, [r2, #0]
 801c3ea:	683a      	ldr	r2, [r7, #0]
 801c3ec:	0091      	lsls	r1, r2, #2
 801c3ee:	69ba      	ldr	r2, [r7, #24]
 801c3f0:	4798      	blx	r3
 801c3f2:	6238      	str	r0, [r7, #32]
    if (NULL == new_keys) {
 801c3f4:	6a3b      	ldr	r3, [r7, #32]
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d101      	bne.n	801c3fe <rcutils_string_map_reserve+0xbe>
      RCUTILS_SET_ERROR_MSG("failed to allocate memory for string_map keys");
      return RCUTILS_RET_BAD_ALLOC;
 801c3fa:	230a      	movs	r3, #10
 801c3fc:	e03c      	b.n	801c478 <rcutils_string_map_reserve+0x138>
    }
    string_map->impl->keys = new_keys;
 801c3fe:	687b      	ldr	r3, [r7, #4]
 801c400:	681b      	ldr	r3, [r3, #0]
 801c402:	6a3a      	ldr	r2, [r7, #32]
 801c404:	601a      	str	r2, [r3, #0]

    // resize the values, assigning the result only if it succeeds
    char ** new_values =
      allocator.reallocate(string_map->impl->values, capacity * sizeof(char *), allocator.state);
 801c406:	693b      	ldr	r3, [r7, #16]
 801c408:	687a      	ldr	r2, [r7, #4]
 801c40a:	6812      	ldr	r2, [r2, #0]
 801c40c:	6850      	ldr	r0, [r2, #4]
 801c40e:	683a      	ldr	r2, [r7, #0]
 801c410:	0091      	lsls	r1, r2, #2
 801c412:	69ba      	ldr	r2, [r7, #24]
 801c414:	4798      	blx	r3
 801c416:	61f8      	str	r0, [r7, #28]
    if (NULL == new_values) {
 801c418:	69fb      	ldr	r3, [r7, #28]
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d101      	bne.n	801c422 <rcutils_string_map_reserve+0xe2>
      RCUTILS_SET_ERROR_MSG("failed to allocate memory for string_map values");
      return RCUTILS_RET_BAD_ALLOC;
 801c41e:	230a      	movs	r3, #10
 801c420:	e02a      	b.n	801c478 <rcutils_string_map_reserve+0x138>
    }
    string_map->impl->values = new_values;
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	69fa      	ldr	r2, [r7, #28]
 801c428:	605a      	str	r2, [r3, #4]

    // zero out the new memory, if there is any (expanded instead of shrunk)
    if (capacity > string_map->impl->capacity) {
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	681b      	ldr	r3, [r3, #0]
 801c42e:	689b      	ldr	r3, [r3, #8]
 801c430:	683a      	ldr	r2, [r7, #0]
 801c432:	429a      	cmp	r2, r3
 801c434:	d91b      	bls.n	801c46e <rcutils_string_map_reserve+0x12e>
      size_t i = string_map->impl->capacity;
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	689b      	ldr	r3, [r3, #8]
 801c43c:	627b      	str	r3, [r7, #36]	; 0x24
      for (; i < capacity; ++i) {
 801c43e:	e012      	b.n	801c466 <rcutils_string_map_reserve+0x126>
        string_map->impl->keys[i] = NULL;
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	681a      	ldr	r2, [r3, #0]
 801c446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c448:	009b      	lsls	r3, r3, #2
 801c44a:	4413      	add	r3, r2
 801c44c:	2200      	movs	r2, #0
 801c44e:	601a      	str	r2, [r3, #0]
        string_map->impl->values[i] = NULL;
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	685a      	ldr	r2, [r3, #4]
 801c456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c458:	009b      	lsls	r3, r3, #2
 801c45a:	4413      	add	r3, r2
 801c45c:	2200      	movs	r2, #0
 801c45e:	601a      	str	r2, [r3, #0]
      for (; i < capacity; ++i) {
 801c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c462:	3301      	adds	r3, #1
 801c464:	627b      	str	r3, [r7, #36]	; 0x24
 801c466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c468:	683b      	ldr	r3, [r7, #0]
 801c46a:	429a      	cmp	r2, r3
 801c46c:	d3e8      	bcc.n	801c440 <rcutils_string_map_reserve+0x100>
      }
    }
    // falls through to normal function end
  }
  string_map->impl->capacity = capacity;
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	683a      	ldr	r2, [r7, #0]
 801c474:	609a      	str	r2, [r3, #8]
  return RCUTILS_RET_OK;
 801c476:	2300      	movs	r3, #0
}
 801c478:	4618      	mov	r0, r3
 801c47a:	3728      	adds	r7, #40	; 0x28
 801c47c:	46bd      	mov	sp, r7
 801c47e:	bdb0      	pop	{r4, r5, r7, pc}

0801c480 <__remove_key_and_value_at_index>:

static void
__remove_key_and_value_at_index(rcutils_string_map_impl_t * string_map_impl, size_t index)
{
 801c480:	b5b0      	push	{r4, r5, r7, lr}
 801c482:	b088      	sub	sp, #32
 801c484:	af00      	add	r7, sp, #0
 801c486:	6078      	str	r0, [r7, #4]
 801c488:	6039      	str	r1, [r7, #0]
  rcutils_allocator_t allocator = string_map_impl->allocator;
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	f107 040c 	add.w	r4, r7, #12
 801c490:	f103 0510 	add.w	r5, r3, #16
 801c494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c498:	682b      	ldr	r3, [r5, #0]
 801c49a:	6023      	str	r3, [r4, #0]
  allocator.deallocate(string_map_impl->keys[index], allocator.state);
 801c49c:	693b      	ldr	r3, [r7, #16]
 801c49e:	687a      	ldr	r2, [r7, #4]
 801c4a0:	6811      	ldr	r1, [r2, #0]
 801c4a2:	683a      	ldr	r2, [r7, #0]
 801c4a4:	0092      	lsls	r2, r2, #2
 801c4a6:	440a      	add	r2, r1
 801c4a8:	6812      	ldr	r2, [r2, #0]
 801c4aa:	69f9      	ldr	r1, [r7, #28]
 801c4ac:	4610      	mov	r0, r2
 801c4ae:	4798      	blx	r3
  string_map_impl->keys[index] = NULL;
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	681a      	ldr	r2, [r3, #0]
 801c4b4:	683b      	ldr	r3, [r7, #0]
 801c4b6:	009b      	lsls	r3, r3, #2
 801c4b8:	4413      	add	r3, r2
 801c4ba:	2200      	movs	r2, #0
 801c4bc:	601a      	str	r2, [r3, #0]
  allocator.deallocate(string_map_impl->values[index], allocator.state);
 801c4be:	693b      	ldr	r3, [r7, #16]
 801c4c0:	687a      	ldr	r2, [r7, #4]
 801c4c2:	6851      	ldr	r1, [r2, #4]
 801c4c4:	683a      	ldr	r2, [r7, #0]
 801c4c6:	0092      	lsls	r2, r2, #2
 801c4c8:	440a      	add	r2, r1
 801c4ca:	6812      	ldr	r2, [r2, #0]
 801c4cc:	69f9      	ldr	r1, [r7, #28]
 801c4ce:	4610      	mov	r0, r2
 801c4d0:	4798      	blx	r3
  string_map_impl->values[index] = NULL;
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	685a      	ldr	r2, [r3, #4]
 801c4d6:	683b      	ldr	r3, [r7, #0]
 801c4d8:	009b      	lsls	r3, r3, #2
 801c4da:	4413      	add	r3, r2
 801c4dc:	2200      	movs	r2, #0
 801c4de:	601a      	str	r2, [r3, #0]
  string_map_impl->size--;
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	68db      	ldr	r3, [r3, #12]
 801c4e4:	1e5a      	subs	r2, r3, #1
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	60da      	str	r2, [r3, #12]
}
 801c4ea:	bf00      	nop
 801c4ec:	3720      	adds	r7, #32
 801c4ee:	46bd      	mov	sp, r7
 801c4f0:	bdb0      	pop	{r4, r5, r7, pc}

0801c4f2 <rcutils_string_map_clear>:

rcutils_ret_t
rcutils_string_map_clear(rcutils_string_map_t * string_map)
{
 801c4f2:	b580      	push	{r7, lr}
 801c4f4:	b084      	sub	sp, #16
 801c4f6:	af00      	add	r7, sp, #0
 801c4f8:	6078      	str	r0, [r7, #4]
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(string_map, RCUTILS_RET_INVALID_ARGUMENT);
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d101      	bne.n	801c504 <rcutils_string_map_clear+0x12>
 801c500:	230b      	movs	r3, #11
 801c502:	e021      	b.n	801c548 <rcutils_string_map_clear+0x56>
  RCUTILS_CHECK_FOR_NULL_WITH_MSG(
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	681b      	ldr	r3, [r3, #0]
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d101      	bne.n	801c510 <rcutils_string_map_clear+0x1e>
 801c50c:	231f      	movs	r3, #31
 801c50e:	e01b      	b.n	801c548 <rcutils_string_map_clear+0x56>
    string_map->impl, "invalid string map", return RCUTILS_RET_STRING_MAP_INVALID);
  size_t i = 0;
 801c510:	2300      	movs	r3, #0
 801c512:	60fb      	str	r3, [r7, #12]
  for (; i < string_map->impl->capacity; ++i) {
 801c514:	e011      	b.n	801c53a <rcutils_string_map_clear+0x48>
    if (string_map->impl->keys[i] != NULL) {
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	681b      	ldr	r3, [r3, #0]
 801c51a:	681a      	ldr	r2, [r3, #0]
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	009b      	lsls	r3, r3, #2
 801c520:	4413      	add	r3, r2
 801c522:	681b      	ldr	r3, [r3, #0]
 801c524:	2b00      	cmp	r3, #0
 801c526:	d005      	beq.n	801c534 <rcutils_string_map_clear+0x42>
      __remove_key_and_value_at_index(string_map->impl, i);
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	68f9      	ldr	r1, [r7, #12]
 801c52e:	4618      	mov	r0, r3
 801c530:	f7ff ffa6 	bl	801c480 <__remove_key_and_value_at_index>
  for (; i < string_map->impl->capacity; ++i) {
 801c534:	68fb      	ldr	r3, [r7, #12]
 801c536:	3301      	adds	r3, #1
 801c538:	60fb      	str	r3, [r7, #12]
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	681b      	ldr	r3, [r3, #0]
 801c53e:	689b      	ldr	r3, [r3, #8]
 801c540:	68fa      	ldr	r2, [r7, #12]
 801c542:	429a      	cmp	r2, r3
 801c544:	d3e7      	bcc.n	801c516 <rcutils_string_map_clear+0x24>
    }
  }
  return RCUTILS_RET_OK;
 801c546:	2300      	movs	r3, #0
}
 801c548:	4618      	mov	r0, r3
 801c54a:	3710      	adds	r7, #16
 801c54c:	46bd      	mov	sp, r7
 801c54e:	bd80      	pop	{r7, pc}

0801c550 <__get_index_of_key_if_exists>:
__get_index_of_key_if_exists(
  rcutils_string_map_impl_t * string_map_impl,
  const char * key,
  size_t key_length,
  size_t * index)
{
 801c550:	b580      	push	{r7, lr}
 801c552:	b086      	sub	sp, #24
 801c554:	af00      	add	r7, sp, #0
 801c556:	60f8      	str	r0, [r7, #12]
 801c558:	60b9      	str	r1, [r7, #8]
 801c55a:	607a      	str	r2, [r7, #4]
 801c55c:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 801c55e:	2300      	movs	r3, #0
 801c560:	617b      	str	r3, [r7, #20]
  for (; i < string_map_impl->capacity; ++i) {
 801c562:	e02e      	b.n	801c5c2 <__get_index_of_key_if_exists+0x72>
    if (NULL == string_map_impl->keys[i]) {
 801c564:	68fb      	ldr	r3, [r7, #12]
 801c566:	681a      	ldr	r2, [r3, #0]
 801c568:	697b      	ldr	r3, [r7, #20]
 801c56a:	009b      	lsls	r3, r3, #2
 801c56c:	4413      	add	r3, r2
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	2b00      	cmp	r3, #0
 801c572:	d022      	beq.n	801c5ba <__get_index_of_key_if_exists+0x6a>
      continue;
    }
    size_t cmp_count = strlen(string_map_impl->keys[i]);
 801c574:	68fb      	ldr	r3, [r7, #12]
 801c576:	681a      	ldr	r2, [r3, #0]
 801c578:	697b      	ldr	r3, [r7, #20]
 801c57a:	009b      	lsls	r3, r3, #2
 801c57c:	4413      	add	r3, r2
 801c57e:	681b      	ldr	r3, [r3, #0]
 801c580:	4618      	mov	r0, r3
 801c582:	f7e3 fe4f 	bl	8000224 <strlen>
 801c586:	6138      	str	r0, [r7, #16]
    if (key_length > cmp_count) {
 801c588:	687a      	ldr	r2, [r7, #4]
 801c58a:	693b      	ldr	r3, [r7, #16]
 801c58c:	429a      	cmp	r2, r3
 801c58e:	d901      	bls.n	801c594 <__get_index_of_key_if_exists+0x44>
      cmp_count = key_length;
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	613b      	str	r3, [r7, #16]
    }
    if (strncmp(key, string_map_impl->keys[i], cmp_count) == 0) {
 801c594:	68fb      	ldr	r3, [r7, #12]
 801c596:	681a      	ldr	r2, [r3, #0]
 801c598:	697b      	ldr	r3, [r7, #20]
 801c59a:	009b      	lsls	r3, r3, #2
 801c59c:	4413      	add	r3, r2
 801c59e:	681b      	ldr	r3, [r3, #0]
 801c5a0:	693a      	ldr	r2, [r7, #16]
 801c5a2:	4619      	mov	r1, r3
 801c5a4:	68b8      	ldr	r0, [r7, #8]
 801c5a6:	f005 fe09 	bl	80221bc <strncmp>
 801c5aa:	4603      	mov	r3, r0
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d105      	bne.n	801c5bc <__get_index_of_key_if_exists+0x6c>
      *index = i;
 801c5b0:	683b      	ldr	r3, [r7, #0]
 801c5b2:	697a      	ldr	r2, [r7, #20]
 801c5b4:	601a      	str	r2, [r3, #0]
      return true;
 801c5b6:	2301      	movs	r3, #1
 801c5b8:	e009      	b.n	801c5ce <__get_index_of_key_if_exists+0x7e>
      continue;
 801c5ba:	bf00      	nop
  for (; i < string_map_impl->capacity; ++i) {
 801c5bc:	697b      	ldr	r3, [r7, #20]
 801c5be:	3301      	adds	r3, #1
 801c5c0:	617b      	str	r3, [r7, #20]
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	689b      	ldr	r3, [r3, #8]
 801c5c6:	697a      	ldr	r2, [r7, #20]
 801c5c8:	429a      	cmp	r2, r3
 801c5ca:	d3cb      	bcc.n	801c564 <__get_index_of_key_if_exists+0x14>
    }
  }
  return false;
 801c5cc:	2300      	movs	r3, #0
}
 801c5ce:	4618      	mov	r0, r3
 801c5d0:	3718      	adds	r7, #24
 801c5d2:	46bd      	mov	sp, r7
 801c5d4:	bd80      	pop	{r7, pc}

0801c5d6 <rcutils_string_map_getn>:
const char *
rcutils_string_map_getn(
  const rcutils_string_map_t * string_map,
  const char * key,
  size_t key_length)
{
 801c5d6:	b580      	push	{r7, lr}
 801c5d8:	b086      	sub	sp, #24
 801c5da:	af00      	add	r7, sp, #0
 801c5dc:	60f8      	str	r0, [r7, #12]
 801c5de:	60b9      	str	r1, [r7, #8]
 801c5e0:	607a      	str	r2, [r7, #4]
  if (NULL == string_map || NULL == string_map->impl || NULL == key) {
 801c5e2:	68fb      	ldr	r3, [r7, #12]
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d006      	beq.n	801c5f6 <rcutils_string_map_getn+0x20>
 801c5e8:	68fb      	ldr	r3, [r7, #12]
 801c5ea:	681b      	ldr	r3, [r3, #0]
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d002      	beq.n	801c5f6 <rcutils_string_map_getn+0x20>
 801c5f0:	68bb      	ldr	r3, [r7, #8]
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d101      	bne.n	801c5fa <rcutils_string_map_getn+0x24>
    return NULL;
 801c5f6:	2300      	movs	r3, #0
 801c5f8:	e013      	b.n	801c622 <rcutils_string_map_getn+0x4c>
  }
  size_t key_index;
  if (__get_index_of_key_if_exists(string_map->impl, key, key_length, &key_index)) {
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	6818      	ldr	r0, [r3, #0]
 801c5fe:	f107 0314 	add.w	r3, r7, #20
 801c602:	687a      	ldr	r2, [r7, #4]
 801c604:	68b9      	ldr	r1, [r7, #8]
 801c606:	f7ff ffa3 	bl	801c550 <__get_index_of_key_if_exists>
 801c60a:	4603      	mov	r3, r0
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	d007      	beq.n	801c620 <rcutils_string_map_getn+0x4a>
    return string_map->impl->values[key_index];
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	685a      	ldr	r2, [r3, #4]
 801c616:	697b      	ldr	r3, [r7, #20]
 801c618:	009b      	lsls	r3, r3, #2
 801c61a:	4413      	add	r3, r2
 801c61c:	681b      	ldr	r3, [r3, #0]
 801c61e:	e000      	b.n	801c622 <rcutils_string_map_getn+0x4c>
  }
  return NULL;
 801c620:	2300      	movs	r3, #0
}
 801c622:	4618      	mov	r0, r3
 801c624:	3718      	adds	r7, #24
 801c626:	46bd      	mov	sp, r7
 801c628:	bd80      	pop	{r7, pc}
	...

0801c62c <rcutils_system_time_now>:

#define __WOULD_BE_NEGATIVE(seconds, subseconds) (seconds < 0 || (subseconds < 0 && seconds == 0))

rcutils_ret_t
rcutils_system_time_now(rcutils_time_point_value_t * now)
{
 801c62c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c630:	b086      	sub	sp, #24
 801c632:	af00      	add	r7, sp, #0
 801c634:	6078      	str	r0, [r7, #4]
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(now, RCUTILS_RET_INVALID_ARGUMENT);
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d101      	bne.n	801c640 <rcutils_system_time_now+0x14>
 801c63c:	230b      	movs	r3, #11
 801c63e:	e02c      	b.n	801c69a <rcutils_system_time_now+0x6e>
  mach_port_deallocate(mach_task_self(), cclock);
  timespec_now.tv_sec = mts.tv_sec;
  timespec_now.tv_nsec = mts.tv_nsec;
#else  // defined(__MACH__)
  // Otherwise use clock_gettime.
  clock_gettime(CLOCK_REALTIME, &timespec_now);
 801c640:	f107 0308 	add.w	r3, r7, #8
 801c644:	4619      	mov	r1, r3
 801c646:	2001      	movs	r0, #1
 801c648:	f7ed fc1e 	bl	8009e88 <clock_gettime>
#endif  // defined(__MACH__)
  if (__WOULD_BE_NEGATIVE(timespec_now.tv_sec, timespec_now.tv_nsec)) {
 801c64c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c650:	2b00      	cmp	r3, #0
 801c652:	db06      	blt.n	801c662 <rcutils_system_time_now+0x36>
 801c654:	693b      	ldr	r3, [r7, #16]
 801c656:	2b00      	cmp	r3, #0
 801c658:	da05      	bge.n	801c666 <rcutils_system_time_now+0x3a>
 801c65a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c65e:	4313      	orrs	r3, r2
 801c660:	d101      	bne.n	801c666 <rcutils_system_time_now+0x3a>
    RCUTILS_SET_ERROR_MSG("unexpected negative time");
    return RCUTILS_RET_ERROR;
 801c662:	2302      	movs	r3, #2
 801c664:	e019      	b.n	801c69a <rcutils_system_time_now+0x6e>
  }
  *now = RCUTILS_S_TO_NS((int64_t)timespec_now.tv_sec) + timespec_now.tv_nsec;
 801c666:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c66a:	490e      	ldr	r1, [pc, #56]	; (801c6a4 <rcutils_system_time_now+0x78>)
 801c66c:	fb01 f003 	mul.w	r0, r1, r3
 801c670:	2100      	movs	r1, #0
 801c672:	fb02 f101 	mul.w	r1, r2, r1
 801c676:	4401      	add	r1, r0
 801c678:	480a      	ldr	r0, [pc, #40]	; (801c6a4 <rcutils_system_time_now+0x78>)
 801c67a:	fba2 4500 	umull	r4, r5, r2, r0
 801c67e:	194b      	adds	r3, r1, r5
 801c680:	461d      	mov	r5, r3
 801c682:	693b      	ldr	r3, [r7, #16]
 801c684:	17da      	asrs	r2, r3, #31
 801c686:	4698      	mov	r8, r3
 801c688:	4691      	mov	r9, r2
 801c68a:	eb14 0a08 	adds.w	sl, r4, r8
 801c68e:	eb45 0b09 	adc.w	fp, r5, r9
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	e9c3 ab00 	strd	sl, fp, [r3]
  return RCUTILS_RET_OK;
 801c698:	2300      	movs	r3, #0
}
 801c69a:	4618      	mov	r0, r3
 801c69c:	3718      	adds	r7, #24
 801c69e:	46bd      	mov	sp, r7
 801c6a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801c6a4:	3b9aca00 	.word	0x3b9aca00

0801c6a8 <rcutils_steady_time_now>:


rcutils_ret_t
rcutils_steady_time_now(rcutils_time_point_value_t * now)
{
 801c6a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c6ac:	b086      	sub	sp, #24
 801c6ae:	af00      	add	r7, sp, #0
 801c6b0:	6078      	str	r0, [r7, #4]
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(now, RCUTILS_RET_INVALID_ARGUMENT);
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	2b00      	cmp	r3, #0
 801c6b6:	d101      	bne.n	801c6bc <rcutils_steady_time_now+0x14>
 801c6b8:	230b      	movs	r3, #11
 801c6ba:	e02c      	b.n	801c716 <rcutils_steady_time_now+0x6e>
#else  // defined(__MACH__)
  // Otherwise use clock_gettime.
#if defined(CLOCK_MONOTONIC_RAW)
  clock_gettime(CLOCK_MONOTONIC_RAW, &timespec_now);
#else  // defined(CLOCK_MONOTONIC_RAW)
  clock_gettime(1, &timespec_now);
 801c6bc:	f107 0308 	add.w	r3, r7, #8
 801c6c0:	4619      	mov	r1, r3
 801c6c2:	2001      	movs	r0, #1
 801c6c4:	f7ed fbe0 	bl	8009e88 <clock_gettime>
#endif  // defined(CLOCK_MONOTONIC_RAW)
#endif  // defined(__MACH__)
  if (__WOULD_BE_NEGATIVE(timespec_now.tv_sec, timespec_now.tv_nsec)) {
 801c6c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c6cc:	2b00      	cmp	r3, #0
 801c6ce:	db06      	blt.n	801c6de <rcutils_steady_time_now+0x36>
 801c6d0:	693b      	ldr	r3, [r7, #16]
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	da05      	bge.n	801c6e2 <rcutils_steady_time_now+0x3a>
 801c6d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c6da:	4313      	orrs	r3, r2
 801c6dc:	d101      	bne.n	801c6e2 <rcutils_steady_time_now+0x3a>
    RCUTILS_SET_ERROR_MSG("unexpected negative time");
    return RCUTILS_RET_ERROR;
 801c6de:	2302      	movs	r3, #2
 801c6e0:	e019      	b.n	801c716 <rcutils_steady_time_now+0x6e>
  }
  *now = RCUTILS_S_TO_NS((int64_t)timespec_now.tv_sec) + timespec_now.tv_nsec;
 801c6e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c6e6:	490e      	ldr	r1, [pc, #56]	; (801c720 <rcutils_steady_time_now+0x78>)
 801c6e8:	fb01 f003 	mul.w	r0, r1, r3
 801c6ec:	2100      	movs	r1, #0
 801c6ee:	fb02 f101 	mul.w	r1, r2, r1
 801c6f2:	4401      	add	r1, r0
 801c6f4:	480a      	ldr	r0, [pc, #40]	; (801c720 <rcutils_steady_time_now+0x78>)
 801c6f6:	fba2 4500 	umull	r4, r5, r2, r0
 801c6fa:	194b      	adds	r3, r1, r5
 801c6fc:	461d      	mov	r5, r3
 801c6fe:	693b      	ldr	r3, [r7, #16]
 801c700:	17da      	asrs	r2, r3, #31
 801c702:	4698      	mov	r8, r3
 801c704:	4691      	mov	r9, r2
 801c706:	eb14 0a08 	adds.w	sl, r4, r8
 801c70a:	eb45 0b09 	adc.w	fp, r5, r9
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	e9c3 ab00 	strd	sl, fp, [r3]
  return RCUTILS_RET_OK;
 801c714:	2300      	movs	r3, #0
}
 801c716:	4618      	mov	r0, r3
 801c718:	3718      	adds	r7, #24
 801c71a:	46bd      	mov	sp, r7
 801c71c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801c720:	3b9aca00 	.word	0x3b9aca00

0801c724 <rmw_get_zero_initialized_context>:
{
#endif

rmw_context_t
rmw_get_zero_initialized_context(void)
{
 801c724:	b580      	push	{r7, lr}
 801c726:	b096      	sub	sp, #88	; 0x58
 801c728:	af00      	add	r7, sp, #0
 801c72a:	6078      	str	r0, [r7, #4]
  return (const rmw_context_t) {
 801c72c:	f04f 0200 	mov.w	r2, #0
 801c730:	f04f 0300 	mov.w	r3, #0
 801c734:	e9c7 2302 	strd	r2, r3, [r7, #8]
 801c738:	2300      	movs	r3, #0
 801c73a:	613b      	str	r3, [r7, #16]
           .instance_id = 0,
           .implementation_identifier = NULL,
           .options = rmw_get_zero_initialized_init_options(),
 801c73c:	f107 0318 	add.w	r3, r7, #24
 801c740:	4618      	mov	r0, r3
 801c742:	f000 f810 	bl	801c766 <rmw_get_zero_initialized_init_options>
  return (const rmw_context_t) {
 801c746:	2300      	movs	r3, #0
 801c748:	653b      	str	r3, [r7, #80]	; 0x50
 801c74a:	2300      	movs	r3, #0
 801c74c:	657b      	str	r3, [r7, #84]	; 0x54
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	4618      	mov	r0, r3
 801c752:	f107 0308 	add.w	r3, r7, #8
 801c756:	2250      	movs	r2, #80	; 0x50
 801c758:	4619      	mov	r1, r3
 801c75a:	f004 fab1 	bl	8020cc0 <memcpy>
           .actual_domain_id = 0u,
           .impl = NULL
  };  // NOLINT(readability/braces): false positive
}
 801c75e:	6878      	ldr	r0, [r7, #4]
 801c760:	3758      	adds	r7, #88	; 0x58
 801c762:	46bd      	mov	sp, r7
 801c764:	bd80      	pop	{r7, pc}

0801c766 <rmw_get_zero_initialized_init_options>:
{
#endif

rmw_init_options_t
rmw_get_zero_initialized_init_options(void)
{
 801c766:	b5b0      	push	{r4, r5, r7, lr}
 801c768:	b090      	sub	sp, #64	; 0x40
 801c76a:	af00      	add	r7, sp, #0
 801c76c:	6078      	str	r0, [r7, #4]
  return (const rmw_init_options_t) {
 801c76e:	f107 0308 	add.w	r3, r7, #8
 801c772:	2238      	movs	r2, #56	; 0x38
 801c774:	2100      	movs	r1, #0
 801c776:	4618      	mov	r0, r3
 801c778:	f004 faca 	bl	8020d10 <memset>
 801c77c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c780:	617b      	str	r3, [r7, #20]
           .localhost_only = RMW_LOCALHOST_ONLY_DEFAULT,
           .implementation_identifier = NULL,
           .impl = NULL,
           .instance_id = 0,
           .enclave = NULL,
           .security_options = rmw_get_default_security_options(),
 801c782:	f107 0318 	add.w	r3, r7, #24
 801c786:	4618      	mov	r0, r3
 801c788:	f000 f828 	bl	801c7dc <rmw_get_default_security_options>
  return (const rmw_init_options_t) {
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	461d      	mov	r5, r3
 801c790:	f107 0408 	add.w	r4, r7, #8
 801c794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c79a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c79c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c79e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c7a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 801c7a4:	e885 0003 	stmia.w	r5, {r0, r1}
  };  // NOLINT(readability/braces): false positive
}
 801c7a8:	6878      	ldr	r0, [r7, #4]
 801c7aa:	3740      	adds	r7, #64	; 0x40
 801c7ac:	46bd      	mov	sp, r7
 801c7ae:	bdb0      	pop	{r4, r5, r7, pc}

0801c7b0 <rmw_get_default_publisher_options>:
{
#endif

rmw_publisher_options_t
rmw_get_default_publisher_options(void)
{
 801c7b0:	b480      	push	{r7}
 801c7b2:	b085      	sub	sp, #20
 801c7b4:	af00      	add	r7, sp, #0
 801c7b6:	6078      	str	r0, [r7, #4]
  rmw_publisher_options_t publisher_options = {
 801c7b8:	2300      	movs	r3, #0
 801c7ba:	60bb      	str	r3, [r7, #8]
 801c7bc:	2300      	movs	r3, #0
 801c7be:	733b      	strb	r3, [r7, #12]
    .rmw_specific_publisher_payload = NULL,
    .require_unique_network_flow_endpoints = RMW_UNIQUE_NETWORK_FLOW_ENDPOINTS_NOT_REQUIRED,
  };
  return publisher_options;
 801c7c0:	687b      	ldr	r3, [r7, #4]
 801c7c2:	461a      	mov	r2, r3
 801c7c4:	f107 0308 	add.w	r3, r7, #8
 801c7c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c7cc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c7d0:	6878      	ldr	r0, [r7, #4]
 801c7d2:	3714      	adds	r7, #20
 801c7d4:	46bd      	mov	sp, r7
 801c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7da:	4770      	bx	lr

0801c7dc <rmw_get_default_security_options>:
  return zero_initialized_options;
}

rmw_security_options_t
rmw_get_default_security_options()
{
 801c7dc:	b480      	push	{r7}
 801c7de:	b085      	sub	sp, #20
 801c7e0:	af00      	add	r7, sp, #0
 801c7e2:	6078      	str	r0, [r7, #4]
  rmw_security_options_t default_options = {
 801c7e4:	2300      	movs	r3, #0
 801c7e6:	723b      	strb	r3, [r7, #8]
 801c7e8:	2300      	movs	r3, #0
 801c7ea:	60fb      	str	r3, [r7, #12]
    RMW_SECURITY_ENFORCEMENT_PERMISSIVE,
    NULL,
  };
  return default_options;
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	461a      	mov	r2, r3
 801c7f0:	f107 0308 	add.w	r3, r7, #8
 801c7f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c7f8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c7fc:	6878      	ldr	r0, [r7, #4]
 801c7fe:	3714      	adds	r7, #20
 801c800:	46bd      	mov	sp, r7
 801c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c806:	4770      	bx	lr

0801c808 <rmw_get_default_subscription_options>:
{
#endif

rmw_subscription_options_t
rmw_get_default_subscription_options(void)
{
 801c808:	b480      	push	{r7}
 801c80a:	b085      	sub	sp, #20
 801c80c:	af00      	add	r7, sp, #0
 801c80e:	6078      	str	r0, [r7, #4]
  rmw_subscription_options_t subscription_options = {
 801c810:	2300      	movs	r3, #0
 801c812:	60bb      	str	r3, [r7, #8]
 801c814:	2300      	movs	r3, #0
 801c816:	733b      	strb	r3, [r7, #12]
 801c818:	2300      	movs	r3, #0
 801c81a:	737b      	strb	r3, [r7, #13]
    .rmw_specific_subscription_payload = NULL,
    .ignore_local_publications = false,
    .require_unique_network_flow_endpoints = RMW_UNIQUE_NETWORK_FLOW_ENDPOINTS_NOT_REQUIRED,
  };
  return subscription_options;
 801c81c:	687b      	ldr	r3, [r7, #4]
 801c81e:	461a      	mov	r2, r3
 801c820:	f107 0308 	add.w	r3, r7, #8
 801c824:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c828:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c82c:	6878      	ldr	r0, [r7, #4]
 801c82e:	3714      	adds	r7, #20
 801c830:	46bd      	mov	sp, r7
 801c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c836:	4770      	bx	lr

0801c838 <rmw_get_zero_initialized_message_info>:

RMW_PUBLIC
RMW_WARN_UNUSED
rmw_message_info_t
rmw_get_zero_initialized_message_info(void)
{
 801c838:	b4b0      	push	{r4, r5, r7}
 801c83a:	b08f      	sub	sp, #60	; 0x3c
 801c83c:	af00      	add	r7, sp, #0
 801c83e:	6078      	str	r0, [r7, #4]
  rmw_message_info_t zero_initialized_message_info = {0, 0, {NULL, {0}}, false};
 801c840:	4b0e      	ldr	r3, [pc, #56]	; (801c87c <rmw_get_zero_initialized_message_info+0x44>)
 801c842:	f107 0408 	add.w	r4, r7, #8
 801c846:	461d      	mov	r5, r3
 801c848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c84a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c84c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c84e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c850:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801c854:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return zero_initialized_message_info;
 801c858:	687b      	ldr	r3, [r7, #4]
 801c85a:	461d      	mov	r5, r3
 801c85c:	f107 0408 	add.w	r4, r7, #8
 801c860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c868:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801c86c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 801c870:	6878      	ldr	r0, [r7, #4]
 801c872:	373c      	adds	r7, #60	; 0x3c
 801c874:	46bd      	mov	sp, r7
 801c876:	bcb0      	pop	{r4, r5, r7}
 801c878:	4770      	bx	lr
 801c87a:	bf00      	nop
 801c87c:	08026b88 	.word	0x08026b88

0801c880 <rcutils_isalnum_no_locale>:
{
 801c880:	b480      	push	{r7}
 801c882:	b083      	sub	sp, #12
 801c884:	af00      	add	r7, sp, #0
 801c886:	4603      	mov	r3, r0
 801c888:	71fb      	strb	r3, [r7, #7]
  if (c >= 0x30 /*0*/ && c <= 0x39 /*9*/) {
 801c88a:	79fb      	ldrb	r3, [r7, #7]
 801c88c:	2b2f      	cmp	r3, #47	; 0x2f
 801c88e:	d904      	bls.n	801c89a <rcutils_isalnum_no_locale+0x1a>
 801c890:	79fb      	ldrb	r3, [r7, #7]
 801c892:	2b39      	cmp	r3, #57	; 0x39
 801c894:	d801      	bhi.n	801c89a <rcutils_isalnum_no_locale+0x1a>
    return true;
 801c896:	2301      	movs	r3, #1
 801c898:	e010      	b.n	801c8bc <rcutils_isalnum_no_locale+0x3c>
  if (c >= 0x41 /*A*/ && c <= 0x5a /*Z*/) {
 801c89a:	79fb      	ldrb	r3, [r7, #7]
 801c89c:	2b40      	cmp	r3, #64	; 0x40
 801c89e:	d904      	bls.n	801c8aa <rcutils_isalnum_no_locale+0x2a>
 801c8a0:	79fb      	ldrb	r3, [r7, #7]
 801c8a2:	2b5a      	cmp	r3, #90	; 0x5a
 801c8a4:	d801      	bhi.n	801c8aa <rcutils_isalnum_no_locale+0x2a>
    return true;
 801c8a6:	2301      	movs	r3, #1
 801c8a8:	e008      	b.n	801c8bc <rcutils_isalnum_no_locale+0x3c>
  if (c >= 0x61 /*a*/ && c <= 0x7a /*z*/) {
 801c8aa:	79fb      	ldrb	r3, [r7, #7]
 801c8ac:	2b60      	cmp	r3, #96	; 0x60
 801c8ae:	d904      	bls.n	801c8ba <rcutils_isalnum_no_locale+0x3a>
 801c8b0:	79fb      	ldrb	r3, [r7, #7]
 801c8b2:	2b7a      	cmp	r3, #122	; 0x7a
 801c8b4:	d801      	bhi.n	801c8ba <rcutils_isalnum_no_locale+0x3a>
    return true;
 801c8b6:	2301      	movs	r3, #1
 801c8b8:	e000      	b.n	801c8bc <rcutils_isalnum_no_locale+0x3c>
  return false;
 801c8ba:	2300      	movs	r3, #0
}
 801c8bc:	4618      	mov	r0, r3
 801c8be:	370c      	adds	r7, #12
 801c8c0:	46bd      	mov	sp, r7
 801c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8c6:	4770      	bx	lr

0801c8c8 <rmw_validate_full_topic_name>:
rmw_ret_t
rmw_validate_full_topic_name(
  const char * topic_name,
  int * validation_result,
  size_t * invalid_index)
{
 801c8c8:	b580      	push	{r7, lr}
 801c8ca:	b084      	sub	sp, #16
 801c8cc:	af00      	add	r7, sp, #0
 801c8ce:	60f8      	str	r0, [r7, #12]
 801c8d0:	60b9      	str	r1, [r7, #8]
 801c8d2:	607a      	str	r2, [r7, #4]
  if (!topic_name) {
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d101      	bne.n	801c8de <rmw_validate_full_topic_name+0x16>
    return RMW_RET_INVALID_ARGUMENT;
 801c8da:	230b      	movs	r3, #11
 801c8dc:	e009      	b.n	801c8f2 <rmw_validate_full_topic_name+0x2a>
  }
  return rmw_validate_full_topic_name_with_size(
 801c8de:	68f8      	ldr	r0, [r7, #12]
 801c8e0:	f7e3 fca0 	bl	8000224 <strlen>
 801c8e4:	4601      	mov	r1, r0
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	68ba      	ldr	r2, [r7, #8]
 801c8ea:	68f8      	ldr	r0, [r7, #12]
 801c8ec:	f000 f806 	bl	801c8fc <rmw_validate_full_topic_name_with_size>
 801c8f0:	4603      	mov	r3, r0
    topic_name, strlen(topic_name), validation_result, invalid_index);
}
 801c8f2:	4618      	mov	r0, r3
 801c8f4:	3710      	adds	r7, #16
 801c8f6:	46bd      	mov	sp, r7
 801c8f8:	bd80      	pop	{r7, pc}
	...

0801c8fc <rmw_validate_full_topic_name_with_size>:
rmw_validate_full_topic_name_with_size(
  const char * topic_name,
  size_t topic_name_length,
  int * validation_result,
  size_t * invalid_index)
{
 801c8fc:	b580      	push	{r7, lr}
 801c8fe:	b086      	sub	sp, #24
 801c900:	af00      	add	r7, sp, #0
 801c902:	60f8      	str	r0, [r7, #12]
 801c904:	60b9      	str	r1, [r7, #8]
 801c906:	607a      	str	r2, [r7, #4]
 801c908:	603b      	str	r3, [r7, #0]
  if (!topic_name) {
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	d101      	bne.n	801c914 <rmw_validate_full_topic_name_with_size+0x18>
    return RMW_RET_INVALID_ARGUMENT;
 801c910:	230b      	movs	r3, #11
 801c912:	e0b8      	b.n	801ca86 <rmw_validate_full_topic_name_with_size+0x18a>
  }
  if (!validation_result) {
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	2b00      	cmp	r3, #0
 801c918:	d101      	bne.n	801c91e <rmw_validate_full_topic_name_with_size+0x22>
    return RMW_RET_INVALID_ARGUMENT;
 801c91a:	230b      	movs	r3, #11
 801c91c:	e0b3      	b.n	801ca86 <rmw_validate_full_topic_name_with_size+0x18a>
  }
  if (topic_name_length == 0) {
 801c91e:	68bb      	ldr	r3, [r7, #8]
 801c920:	2b00      	cmp	r3, #0
 801c922:	d10a      	bne.n	801c93a <rmw_validate_full_topic_name_with_size+0x3e>
    *validation_result = RMW_TOPIC_INVALID_IS_EMPTY_STRING;
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	2201      	movs	r2, #1
 801c928:	601a      	str	r2, [r3, #0]
    if (invalid_index) {
 801c92a:	683b      	ldr	r3, [r7, #0]
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d002      	beq.n	801c936 <rmw_validate_full_topic_name_with_size+0x3a>
      *invalid_index = 0;
 801c930:	683b      	ldr	r3, [r7, #0]
 801c932:	2200      	movs	r2, #0
 801c934:	601a      	str	r2, [r3, #0]
    }
    return RMW_RET_OK;
 801c936:	2300      	movs	r3, #0
 801c938:	e0a5      	b.n	801ca86 <rmw_validate_full_topic_name_with_size+0x18a>
  }
  if (topic_name[0] != '/') {
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	781b      	ldrb	r3, [r3, #0]
 801c93e:	2b2f      	cmp	r3, #47	; 0x2f
 801c940:	d00a      	beq.n	801c958 <rmw_validate_full_topic_name_with_size+0x5c>
    *validation_result = RMW_TOPIC_INVALID_NOT_ABSOLUTE;
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	2202      	movs	r2, #2
 801c946:	601a      	str	r2, [r3, #0]
    if (invalid_index) {
 801c948:	683b      	ldr	r3, [r7, #0]
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	d002      	beq.n	801c954 <rmw_validate_full_topic_name_with_size+0x58>
      *invalid_index = 0;
 801c94e:	683b      	ldr	r3, [r7, #0]
 801c950:	2200      	movs	r2, #0
 801c952:	601a      	str	r2, [r3, #0]
    }
    return RMW_RET_OK;
 801c954:	2300      	movs	r3, #0
 801c956:	e096      	b.n	801ca86 <rmw_validate_full_topic_name_with_size+0x18a>
  }
  // note topic_name_length is >= 1 at this point
  if (topic_name[topic_name_length - 1] == '/') {
 801c958:	68bb      	ldr	r3, [r7, #8]
 801c95a:	3b01      	subs	r3, #1
 801c95c:	68fa      	ldr	r2, [r7, #12]
 801c95e:	4413      	add	r3, r2
 801c960:	781b      	ldrb	r3, [r3, #0]
 801c962:	2b2f      	cmp	r3, #47	; 0x2f
 801c964:	d10b      	bne.n	801c97e <rmw_validate_full_topic_name_with_size+0x82>
    // catches both "/foo/" and "/"
    *validation_result = RMW_TOPIC_INVALID_ENDS_WITH_FORWARD_SLASH;
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	2203      	movs	r2, #3
 801c96a:	601a      	str	r2, [r3, #0]
    if (invalid_index) {
 801c96c:	683b      	ldr	r3, [r7, #0]
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d003      	beq.n	801c97a <rmw_validate_full_topic_name_with_size+0x7e>
      *invalid_index = topic_name_length - 1;
 801c972:	68bb      	ldr	r3, [r7, #8]
 801c974:	1e5a      	subs	r2, r3, #1
 801c976:	683b      	ldr	r3, [r7, #0]
 801c978:	601a      	str	r2, [r3, #0]
    }
    return RMW_RET_OK;
 801c97a:	2300      	movs	r3, #0
 801c97c:	e083      	b.n	801ca86 <rmw_validate_full_topic_name_with_size+0x18a>
  }
  // check for unallowed characters
  for (size_t i = 0; i < topic_name_length; ++i) {
 801c97e:	2300      	movs	r3, #0
 801c980:	617b      	str	r3, [r7, #20]
 801c982:	e028      	b.n	801c9d6 <rmw_validate_full_topic_name_with_size+0xda>
    if (rcutils_isalnum_no_locale(topic_name[i])) {
 801c984:	68fa      	ldr	r2, [r7, #12]
 801c986:	697b      	ldr	r3, [r7, #20]
 801c988:	4413      	add	r3, r2
 801c98a:	781b      	ldrb	r3, [r3, #0]
 801c98c:	4618      	mov	r0, r3
 801c98e:	f7ff ff77 	bl	801c880 <rcutils_isalnum_no_locale>
 801c992:	4603      	mov	r3, r0
 801c994:	2b00      	cmp	r3, #0
 801c996:	d116      	bne.n	801c9c6 <rmw_validate_full_topic_name_with_size+0xca>
      // if it is an alpha numeric character, i.e. [0-9|A-Z|a-z], continue
      continue;
    } else if (topic_name[i] == '_') {
 801c998:	68fa      	ldr	r2, [r7, #12]
 801c99a:	697b      	ldr	r3, [r7, #20]
 801c99c:	4413      	add	r3, r2
 801c99e:	781b      	ldrb	r3, [r3, #0]
 801c9a0:	2b5f      	cmp	r3, #95	; 0x5f
 801c9a2:	d012      	beq.n	801c9ca <rmw_validate_full_topic_name_with_size+0xce>
      // if it is an underscore, continue
      continue;
    } else if (topic_name[i] == '/') {
 801c9a4:	68fa      	ldr	r2, [r7, #12]
 801c9a6:	697b      	ldr	r3, [r7, #20]
 801c9a8:	4413      	add	r3, r2
 801c9aa:	781b      	ldrb	r3, [r3, #0]
 801c9ac:	2b2f      	cmp	r3, #47	; 0x2f
 801c9ae:	d00e      	beq.n	801c9ce <rmw_validate_full_topic_name_with_size+0xd2>
      // if it is a forward slash, continue
      continue;
    } else {
      // if it is none of these, then it is an unallowed character in a FQN topic name
      *validation_result = RMW_TOPIC_INVALID_CONTAINS_UNALLOWED_CHARACTERS;
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	2204      	movs	r2, #4
 801c9b4:	601a      	str	r2, [r3, #0]
      if (invalid_index) {
 801c9b6:	683b      	ldr	r3, [r7, #0]
 801c9b8:	2b00      	cmp	r3, #0
 801c9ba:	d002      	beq.n	801c9c2 <rmw_validate_full_topic_name_with_size+0xc6>
        *invalid_index = i;
 801c9bc:	683b      	ldr	r3, [r7, #0]
 801c9be:	697a      	ldr	r2, [r7, #20]
 801c9c0:	601a      	str	r2, [r3, #0]
      }
      return RMW_RET_OK;
 801c9c2:	2300      	movs	r3, #0
 801c9c4:	e05f      	b.n	801ca86 <rmw_validate_full_topic_name_with_size+0x18a>
      continue;
 801c9c6:	bf00      	nop
 801c9c8:	e002      	b.n	801c9d0 <rmw_validate_full_topic_name_with_size+0xd4>
      continue;
 801c9ca:	bf00      	nop
 801c9cc:	e000      	b.n	801c9d0 <rmw_validate_full_topic_name_with_size+0xd4>
      continue;
 801c9ce:	bf00      	nop
  for (size_t i = 0; i < topic_name_length; ++i) {
 801c9d0:	697b      	ldr	r3, [r7, #20]
 801c9d2:	3301      	adds	r3, #1
 801c9d4:	617b      	str	r3, [r7, #20]
 801c9d6:	697a      	ldr	r2, [r7, #20]
 801c9d8:	68bb      	ldr	r3, [r7, #8]
 801c9da:	429a      	cmp	r2, r3
 801c9dc:	d3d2      	bcc.n	801c984 <rmw_validate_full_topic_name_with_size+0x88>
    }
  }
  // check for double '/' and tokens that start with a number
  for (size_t i = 0; i < topic_name_length; ++i) {
 801c9de:	2300      	movs	r3, #0
 801c9e0:	613b      	str	r3, [r7, #16]
 801c9e2:	e03a      	b.n	801ca5a <rmw_validate_full_topic_name_with_size+0x15e>
    if (i == topic_name_length - 1) {
 801c9e4:	68bb      	ldr	r3, [r7, #8]
 801c9e6:	3b01      	subs	r3, #1
 801c9e8:	693a      	ldr	r2, [r7, #16]
 801c9ea:	429a      	cmp	r2, r3
 801c9ec:	d031      	beq.n	801ca52 <rmw_validate_full_topic_name_with_size+0x156>
      // if this is the last character, then nothing to check
      continue;
    }
    // past this point, assuming i+1 is a valid index
    if (topic_name[i] == '/') {
 801c9ee:	68fa      	ldr	r2, [r7, #12]
 801c9f0:	693b      	ldr	r3, [r7, #16]
 801c9f2:	4413      	add	r3, r2
 801c9f4:	781b      	ldrb	r3, [r3, #0]
 801c9f6:	2b2f      	cmp	r3, #47	; 0x2f
 801c9f8:	d12c      	bne.n	801ca54 <rmw_validate_full_topic_name_with_size+0x158>
      if (topic_name[i + 1] == '/') {
 801c9fa:	693b      	ldr	r3, [r7, #16]
 801c9fc:	3301      	adds	r3, #1
 801c9fe:	68fa      	ldr	r2, [r7, #12]
 801ca00:	4413      	add	r3, r2
 801ca02:	781b      	ldrb	r3, [r3, #0]
 801ca04:	2b2f      	cmp	r3, #47	; 0x2f
 801ca06:	d10b      	bne.n	801ca20 <rmw_validate_full_topic_name_with_size+0x124>
        *validation_result = RMW_TOPIC_INVALID_CONTAINS_REPEATED_FORWARD_SLASH;
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	2205      	movs	r2, #5
 801ca0c:	601a      	str	r2, [r3, #0]
        if (invalid_index) {
 801ca0e:	683b      	ldr	r3, [r7, #0]
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d003      	beq.n	801ca1c <rmw_validate_full_topic_name_with_size+0x120>
          *invalid_index = i + 1;
 801ca14:	693b      	ldr	r3, [r7, #16]
 801ca16:	1c5a      	adds	r2, r3, #1
 801ca18:	683b      	ldr	r3, [r7, #0]
 801ca1a:	601a      	str	r2, [r3, #0]
        }
        return RMW_RET_OK;
 801ca1c:	2300      	movs	r3, #0
 801ca1e:	e032      	b.n	801ca86 <rmw_validate_full_topic_name_with_size+0x18a>
      }
      if (isdigit(topic_name[i + 1]) != 0) {
 801ca20:	693b      	ldr	r3, [r7, #16]
 801ca22:	3301      	adds	r3, #1
 801ca24:	68fa      	ldr	r2, [r7, #12]
 801ca26:	4413      	add	r3, r2
 801ca28:	781b      	ldrb	r3, [r3, #0]
 801ca2a:	3301      	adds	r3, #1
 801ca2c:	4a18      	ldr	r2, [pc, #96]	; (801ca90 <rmw_validate_full_topic_name_with_size+0x194>)
 801ca2e:	4413      	add	r3, r2
 801ca30:	781b      	ldrb	r3, [r3, #0]
 801ca32:	f003 0304 	and.w	r3, r3, #4
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d00c      	beq.n	801ca54 <rmw_validate_full_topic_name_with_size+0x158>
        // this is the case where a '/' if followed by a number, i.e. [0-9]
        *validation_result = RMW_TOPIC_INVALID_NAME_TOKEN_STARTS_WITH_NUMBER;
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	2206      	movs	r2, #6
 801ca3e:	601a      	str	r2, [r3, #0]
        if (invalid_index) {
 801ca40:	683b      	ldr	r3, [r7, #0]
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	d003      	beq.n	801ca4e <rmw_validate_full_topic_name_with_size+0x152>
          *invalid_index = i + 1;
 801ca46:	693b      	ldr	r3, [r7, #16]
 801ca48:	1c5a      	adds	r2, r3, #1
 801ca4a:	683b      	ldr	r3, [r7, #0]
 801ca4c:	601a      	str	r2, [r3, #0]
        }
        return RMW_RET_OK;
 801ca4e:	2300      	movs	r3, #0
 801ca50:	e019      	b.n	801ca86 <rmw_validate_full_topic_name_with_size+0x18a>
      continue;
 801ca52:	bf00      	nop
  for (size_t i = 0; i < topic_name_length; ++i) {
 801ca54:	693b      	ldr	r3, [r7, #16]
 801ca56:	3301      	adds	r3, #1
 801ca58:	613b      	str	r3, [r7, #16]
 801ca5a:	693a      	ldr	r2, [r7, #16]
 801ca5c:	68bb      	ldr	r3, [r7, #8]
 801ca5e:	429a      	cmp	r2, r3
 801ca60:	d3c0      	bcc.n	801c9e4 <rmw_validate_full_topic_name_with_size+0xe8>
      }
    }
  }
  // check if the topic name is too long last, since it might be a soft invalidation
  if (topic_name_length > RMW_TOPIC_MAX_NAME_LENGTH) {
 801ca62:	68bb      	ldr	r3, [r7, #8]
 801ca64:	2bf7      	cmp	r3, #247	; 0xf7
 801ca66:	d90a      	bls.n	801ca7e <rmw_validate_full_topic_name_with_size+0x182>
    *validation_result = RMW_TOPIC_INVALID_TOO_LONG;
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	2207      	movs	r2, #7
 801ca6c:	601a      	str	r2, [r3, #0]
    if (invalid_index) {
 801ca6e:	683b      	ldr	r3, [r7, #0]
 801ca70:	2b00      	cmp	r3, #0
 801ca72:	d002      	beq.n	801ca7a <rmw_validate_full_topic_name_with_size+0x17e>
      *invalid_index = RMW_TOPIC_MAX_NAME_LENGTH - 1;
 801ca74:	683b      	ldr	r3, [r7, #0]
 801ca76:	22f6      	movs	r2, #246	; 0xf6
 801ca78:	601a      	str	r2, [r3, #0]
    }
    return RMW_RET_OK;
 801ca7a:	2300      	movs	r3, #0
 801ca7c:	e003      	b.n	801ca86 <rmw_validate_full_topic_name_with_size+0x18a>
  }
  // everything was ok, set result to valid topic, avoid setting invalid_index, and return
  *validation_result = RMW_TOPIC_VALID;
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	2200      	movs	r2, #0
 801ca82:	601a      	str	r2, [r3, #0]
  return RMW_RET_OK;
 801ca84:	2300      	movs	r3, #0
}
 801ca86:	4618      	mov	r0, r3
 801ca88:	3718      	adds	r7, #24
 801ca8a:	46bd      	mov	sp, r7
 801ca8c:	bd80      	pop	{r7, pc}
 801ca8e:	bf00      	nop
 801ca90:	080275da 	.word	0x080275da

0801ca94 <rmw_validate_namespace>:
rmw_ret_t
rmw_validate_namespace(
  const char * namespace_,
  int * validation_result,
  size_t * invalid_index)
{
 801ca94:	b580      	push	{r7, lr}
 801ca96:	b084      	sub	sp, #16
 801ca98:	af00      	add	r7, sp, #0
 801ca9a:	60f8      	str	r0, [r7, #12]
 801ca9c:	60b9      	str	r1, [r7, #8]
 801ca9e:	607a      	str	r2, [r7, #4]
  if (!namespace_) {
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d101      	bne.n	801caaa <rmw_validate_namespace+0x16>
    return RMW_RET_INVALID_ARGUMENT;
 801caa6:	230b      	movs	r3, #11
 801caa8:	e009      	b.n	801cabe <rmw_validate_namespace+0x2a>
  }
  return rmw_validate_namespace_with_size(
 801caaa:	68f8      	ldr	r0, [r7, #12]
 801caac:	f7e3 fbba 	bl	8000224 <strlen>
 801cab0:	4601      	mov	r1, r0
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	68ba      	ldr	r2, [r7, #8]
 801cab6:	68f8      	ldr	r0, [r7, #12]
 801cab8:	f000 f806 	bl	801cac8 <rmw_validate_namespace_with_size>
 801cabc:	4603      	mov	r3, r0
    namespace_, strlen(namespace_), validation_result, invalid_index);
}
 801cabe:	4618      	mov	r0, r3
 801cac0:	3710      	adds	r7, #16
 801cac2:	46bd      	mov	sp, r7
 801cac4:	bd80      	pop	{r7, pc}
	...

0801cac8 <rmw_validate_namespace_with_size>:
rmw_validate_namespace_with_size(
  const char * namespace_,
  size_t namespace_length,
  int * validation_result,
  size_t * invalid_index)
{
 801cac8:	b590      	push	{r4, r7, lr}
 801caca:	b0c9      	sub	sp, #292	; 0x124
 801cacc:	af00      	add	r7, sp, #0
 801cace:	f507 7490 	add.w	r4, r7, #288	; 0x120
 801cad2:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 801cad6:	6020      	str	r0, [r4, #0]
 801cad8:	f507 7090 	add.w	r0, r7, #288	; 0x120
 801cadc:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 801cae0:	6001      	str	r1, [r0, #0]
 801cae2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 801cae6:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 801caea:	600a      	str	r2, [r1, #0]
 801caec:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801caf0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 801caf4:	6013      	str	r3, [r2, #0]
  if (!namespace_) {
 801caf6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cafa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	d101      	bne.n	801cb08 <rmw_validate_namespace_with_size+0x40>
    return RMW_RET_INVALID_ARGUMENT;
 801cb04:	230b      	movs	r3, #11
 801cb06:	e0c5      	b.n	801cc94 <rmw_validate_namespace_with_size+0x1cc>
  }
  if (!validation_result) {
 801cb08:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cb0c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801cb10:	681b      	ldr	r3, [r3, #0]
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d101      	bne.n	801cb1a <rmw_validate_namespace_with_size+0x52>
    return RMW_RET_INVALID_ARGUMENT;
 801cb16:	230b      	movs	r3, #11
 801cb18:	e0bc      	b.n	801cc94 <rmw_validate_namespace_with_size+0x1cc>
  }

  // Special case for root namepsace
  if (namespace_length == 1 && namespace_[0] == '/') {
 801cb1a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cb1e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801cb22:	681b      	ldr	r3, [r3, #0]
 801cb24:	2b01      	cmp	r3, #1
 801cb26:	d110      	bne.n	801cb4a <rmw_validate_namespace_with_size+0x82>
 801cb28:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cb2c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801cb30:	681b      	ldr	r3, [r3, #0]
 801cb32:	781b      	ldrb	r3, [r3, #0]
 801cb34:	2b2f      	cmp	r3, #47	; 0x2f
 801cb36:	d108      	bne.n	801cb4a <rmw_validate_namespace_with_size+0x82>
    // Ok to return here, it is valid and will not exceed RMW_NAMESPACE_MAX_LENGTH.
    *validation_result = RMW_NAMESPACE_VALID;
 801cb38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cb3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	2200      	movs	r2, #0
 801cb44:	601a      	str	r2, [r3, #0]
    return RMW_RET_OK;
 801cb46:	2300      	movs	r3, #0
 801cb48:	e0a4      	b.n	801cc94 <rmw_validate_namespace_with_size+0x1cc>
  }

  // All other cases should pass the validate topic name test.
  int t_validation_result;
  size_t t_invalid_index;
  rmw_ret_t ret = rmw_validate_full_topic_name(namespace_, &t_validation_result, &t_invalid_index);
 801cb4a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801cb4e:	f507 718a 	add.w	r1, r7, #276	; 0x114
 801cb52:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cb56:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801cb5a:	6818      	ldr	r0, [r3, #0]
 801cb5c:	f7ff feb4 	bl	801c8c8 <rmw_validate_full_topic_name>
 801cb60:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  if (ret != RMW_RET_OK) {
 801cb64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	d002      	beq.n	801cb72 <rmw_validate_namespace_with_size+0xaa>
    // error already set
    return ret;
 801cb6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801cb70:	e090      	b.n	801cc94 <rmw_validate_namespace_with_size+0x1cc>
  }

  if (t_validation_result != RMW_TOPIC_VALID && t_validation_result != RMW_TOPIC_INVALID_TOO_LONG) {
 801cb72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d066      	beq.n	801cc48 <rmw_validate_namespace_with_size+0x180>
 801cb7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801cb7e:	2b07      	cmp	r3, #7
 801cb80:	d062      	beq.n	801cc48 <rmw_validate_namespace_with_size+0x180>
    switch (t_validation_result) {
 801cb82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801cb86:	3b01      	subs	r3, #1
 801cb88:	2b05      	cmp	r3, #5
 801cb8a:	d83f      	bhi.n	801cc0c <rmw_validate_namespace_with_size+0x144>
 801cb8c:	a201      	add	r2, pc, #4	; (adr r2, 801cb94 <rmw_validate_namespace_with_size+0xcc>)
 801cb8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb92:	bf00      	nop
 801cb94:	0801cbad 	.word	0x0801cbad
 801cb98:	0801cbbd 	.word	0x0801cbbd
 801cb9c:	0801cbcd 	.word	0x0801cbcd
 801cba0:	0801cbdd 	.word	0x0801cbdd
 801cba4:	0801cbed 	.word	0x0801cbed
 801cba8:	0801cbfd 	.word	0x0801cbfd
      case RMW_TOPIC_INVALID_IS_EMPTY_STRING:
        *validation_result = RMW_NAMESPACE_INVALID_IS_EMPTY_STRING;
 801cbac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cbb0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	2201      	movs	r2, #1
 801cbb8:	601a      	str	r2, [r3, #0]
        break;
 801cbba:	e034      	b.n	801cc26 <rmw_validate_namespace_with_size+0x15e>
      case RMW_TOPIC_INVALID_NOT_ABSOLUTE:
        *validation_result = RMW_NAMESPACE_INVALID_NOT_ABSOLUTE;
 801cbbc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cbc0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801cbc4:	681b      	ldr	r3, [r3, #0]
 801cbc6:	2202      	movs	r2, #2
 801cbc8:	601a      	str	r2, [r3, #0]
        break;
 801cbca:	e02c      	b.n	801cc26 <rmw_validate_namespace_with_size+0x15e>
      case RMW_TOPIC_INVALID_ENDS_WITH_FORWARD_SLASH:
        *validation_result = RMW_NAMESPACE_INVALID_ENDS_WITH_FORWARD_SLASH;
 801cbcc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cbd0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801cbd4:	681b      	ldr	r3, [r3, #0]
 801cbd6:	2203      	movs	r2, #3
 801cbd8:	601a      	str	r2, [r3, #0]
        break;
 801cbda:	e024      	b.n	801cc26 <rmw_validate_namespace_with_size+0x15e>
      case RMW_TOPIC_INVALID_CONTAINS_UNALLOWED_CHARACTERS:
        *validation_result = RMW_NAMESPACE_INVALID_CONTAINS_UNALLOWED_CHARACTERS;
 801cbdc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cbe0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801cbe4:	681b      	ldr	r3, [r3, #0]
 801cbe6:	2204      	movs	r2, #4
 801cbe8:	601a      	str	r2, [r3, #0]
        break;
 801cbea:	e01c      	b.n	801cc26 <rmw_validate_namespace_with_size+0x15e>
      case RMW_TOPIC_INVALID_CONTAINS_REPEATED_FORWARD_SLASH:
        *validation_result = RMW_NAMESPACE_INVALID_CONTAINS_REPEATED_FORWARD_SLASH;
 801cbec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cbf0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801cbf4:	681b      	ldr	r3, [r3, #0]
 801cbf6:	2205      	movs	r2, #5
 801cbf8:	601a      	str	r2, [r3, #0]
        break;
 801cbfa:	e014      	b.n	801cc26 <rmw_validate_namespace_with_size+0x15e>
      case RMW_TOPIC_INVALID_NAME_TOKEN_STARTS_WITH_NUMBER:
        *validation_result = RMW_NAMESPACE_INVALID_NAME_TOKEN_STARTS_WITH_NUMBER;
 801cbfc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cc00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801cc04:	681b      	ldr	r3, [r3, #0]
 801cc06:	2206      	movs	r2, #6
 801cc08:	601a      	str	r2, [r3, #0]
        break;
 801cc0a:	e00c      	b.n	801cc26 <rmw_validate_namespace_with_size+0x15e>
      default:
        {
          char default_err_msg[256];
          // explicitly not taking return value which is number of bytes written
          int ret = rcutils_snprintf(
 801cc0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801cc10:	f107 0010 	add.w	r0, r7, #16
 801cc14:	4a22      	ldr	r2, [pc, #136]	; (801cca0 <rmw_validate_namespace_with_size+0x1d8>)
 801cc16:	f44f 7180 	mov.w	r1, #256	; 0x100
 801cc1a:	f7ff fa3b 	bl	801c094 <rcutils_snprintf>
 801cc1e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
            RMW_SET_ERROR_MSG("rmw_validate_namespace(): rcutils_snprintf() failed");
          } else {
            RMW_SET_ERROR_MSG(default_err_msg);
          }
        }
        return RMW_RET_ERROR;
 801cc22:	2301      	movs	r3, #1
 801cc24:	e036      	b.n	801cc94 <rmw_validate_namespace_with_size+0x1cc>
    }
    if (invalid_index) {
 801cc26:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cc2a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	2b00      	cmp	r3, #0
 801cc32:	d007      	beq.n	801cc44 <rmw_validate_namespace_with_size+0x17c>
      *invalid_index = t_invalid_index;
 801cc34:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801cc38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cc3c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	601a      	str	r2, [r3, #0]
    }
    return RMW_RET_OK;
 801cc44:	2300      	movs	r3, #0
 801cc46:	e025      	b.n	801cc94 <rmw_validate_namespace_with_size+0x1cc>
  }

  // check if the namespace is too long last, since it might be a soft invalidation
  if (namespace_length > RMW_NAMESPACE_MAX_LENGTH) {
 801cc48:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cc4c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801cc50:	681b      	ldr	r3, [r3, #0]
 801cc52:	2bf5      	cmp	r3, #245	; 0xf5
 801cc54:	d916      	bls.n	801cc84 <rmw_validate_namespace_with_size+0x1bc>
    *validation_result = RMW_NAMESPACE_INVALID_TOO_LONG;
 801cc56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cc5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	2207      	movs	r2, #7
 801cc62:	601a      	str	r2, [r3, #0]
    if (invalid_index) {
 801cc64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cc68:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	d006      	beq.n	801cc80 <rmw_validate_namespace_with_size+0x1b8>
      *invalid_index = RMW_NAMESPACE_MAX_LENGTH - 1;
 801cc72:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cc76:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801cc7a:	681b      	ldr	r3, [r3, #0]
 801cc7c:	22f4      	movs	r2, #244	; 0xf4
 801cc7e:	601a      	str	r2, [r3, #0]
    }
    return RMW_RET_OK;
 801cc80:	2300      	movs	r3, #0
 801cc82:	e007      	b.n	801cc94 <rmw_validate_namespace_with_size+0x1cc>
  }

  // everything was ok, set result to valid namespace, avoid setting invalid_index, and return
  *validation_result = RMW_NAMESPACE_VALID;
 801cc84:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cc88:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	2200      	movs	r2, #0
 801cc90:	601a      	str	r2, [r3, #0]
  return RMW_RET_OK;
 801cc92:	2300      	movs	r3, #0
}
 801cc94:	4618      	mov	r0, r3
 801cc96:	f507 7792 	add.w	r7, r7, #292	; 0x124
 801cc9a:	46bd      	mov	sp, r7
 801cc9c:	bd90      	pop	{r4, r7, pc}
 801cc9e:	bf00      	nop
 801cca0:	08026bb8 	.word	0x08026bb8

0801cca4 <rmw_namespace_validation_result_string>:

const char *
rmw_namespace_validation_result_string(int validation_result)
{
 801cca4:	b480      	push	{r7}
 801cca6:	b083      	sub	sp, #12
 801cca8:	af00      	add	r7, sp, #0
 801ccaa:	6078      	str	r0, [r7, #4]
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	2b07      	cmp	r3, #7
 801ccb0:	d822      	bhi.n	801ccf8 <rmw_namespace_validation_result_string+0x54>
 801ccb2:	a201      	add	r2, pc, #4	; (adr r2, 801ccb8 <rmw_namespace_validation_result_string+0x14>)
 801ccb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ccb8:	0801ccd9 	.word	0x0801ccd9
 801ccbc:	0801ccdd 	.word	0x0801ccdd
 801ccc0:	0801cce1 	.word	0x0801cce1
 801ccc4:	0801cce5 	.word	0x0801cce5
 801ccc8:	0801cce9 	.word	0x0801cce9
 801cccc:	0801cced 	.word	0x0801cced
 801ccd0:	0801ccf1 	.word	0x0801ccf1
 801ccd4:	0801ccf5 	.word	0x0801ccf5
  switch (validation_result) {
    case RMW_NAMESPACE_VALID:
      return NULL;
 801ccd8:	2300      	movs	r3, #0
 801ccda:	e00e      	b.n	801ccfa <rmw_namespace_validation_result_string+0x56>
    case RMW_NAMESPACE_INVALID_IS_EMPTY_STRING:
      return "namespace must not be empty";
 801ccdc:	4b0a      	ldr	r3, [pc, #40]	; (801cd08 <rmw_namespace_validation_result_string+0x64>)
 801ccde:	e00c      	b.n	801ccfa <rmw_namespace_validation_result_string+0x56>
    case RMW_NAMESPACE_INVALID_NOT_ABSOLUTE:
      return "namespace must be absolute, it must lead with a '/'";
 801cce0:	4b0a      	ldr	r3, [pc, #40]	; (801cd0c <rmw_namespace_validation_result_string+0x68>)
 801cce2:	e00a      	b.n	801ccfa <rmw_namespace_validation_result_string+0x56>
    case RMW_NAMESPACE_INVALID_ENDS_WITH_FORWARD_SLASH:
      return "namespace must not end with a '/', unless only a '/'";
 801cce4:	4b0a      	ldr	r3, [pc, #40]	; (801cd10 <rmw_namespace_validation_result_string+0x6c>)
 801cce6:	e008      	b.n	801ccfa <rmw_namespace_validation_result_string+0x56>
    case RMW_NAMESPACE_INVALID_CONTAINS_UNALLOWED_CHARACTERS:
      return "namespace must not contain characters other than alphanumerics, '_', or '/'";
 801cce8:	4b0a      	ldr	r3, [pc, #40]	; (801cd14 <rmw_namespace_validation_result_string+0x70>)
 801ccea:	e006      	b.n	801ccfa <rmw_namespace_validation_result_string+0x56>
    case RMW_NAMESPACE_INVALID_CONTAINS_REPEATED_FORWARD_SLASH:
      return "namespace must not contain repeated '/'";
 801ccec:	4b0a      	ldr	r3, [pc, #40]	; (801cd18 <rmw_namespace_validation_result_string+0x74>)
 801ccee:	e004      	b.n	801ccfa <rmw_namespace_validation_result_string+0x56>
    case RMW_NAMESPACE_INVALID_NAME_TOKEN_STARTS_WITH_NUMBER:
      return "namespace must not have a token that starts with a number";
 801ccf0:	4b0a      	ldr	r3, [pc, #40]	; (801cd1c <rmw_namespace_validation_result_string+0x78>)
 801ccf2:	e002      	b.n	801ccfa <rmw_namespace_validation_result_string+0x56>
    case RMW_NAMESPACE_INVALID_TOO_LONG:
      return "namespace should not exceed '" RMW_STRINGIFY(RMW_NAMESPACE_MAX_NAME_LENGTH) "'";
 801ccf4:	4b0a      	ldr	r3, [pc, #40]	; (801cd20 <rmw_namespace_validation_result_string+0x7c>)
 801ccf6:	e000      	b.n	801ccfa <rmw_namespace_validation_result_string+0x56>
    default:
      return "unknown result code for rmw namespace validation";
 801ccf8:	4b0a      	ldr	r3, [pc, #40]	; (801cd24 <rmw_namespace_validation_result_string+0x80>)
  }
}
 801ccfa:	4618      	mov	r0, r3
 801ccfc:	370c      	adds	r7, #12
 801ccfe:	46bd      	mov	sp, r7
 801cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd04:	4770      	bx	lr
 801cd06:	bf00      	nop
 801cd08:	08026c08 	.word	0x08026c08
 801cd0c:	08026c24 	.word	0x08026c24
 801cd10:	08026c58 	.word	0x08026c58
 801cd14:	08026c90 	.word	0x08026c90
 801cd18:	08026cdc 	.word	0x08026cdc
 801cd1c:	08026d04 	.word	0x08026d04
 801cd20:	08026d40 	.word	0x08026d40
 801cd24:	08026d7c 	.word	0x08026d7c

0801cd28 <rcutils_isalnum_no_locale>:
{
 801cd28:	b480      	push	{r7}
 801cd2a:	b083      	sub	sp, #12
 801cd2c:	af00      	add	r7, sp, #0
 801cd2e:	4603      	mov	r3, r0
 801cd30:	71fb      	strb	r3, [r7, #7]
  if (c >= 0x30 /*0*/ && c <= 0x39 /*9*/) {
 801cd32:	79fb      	ldrb	r3, [r7, #7]
 801cd34:	2b2f      	cmp	r3, #47	; 0x2f
 801cd36:	d904      	bls.n	801cd42 <rcutils_isalnum_no_locale+0x1a>
 801cd38:	79fb      	ldrb	r3, [r7, #7]
 801cd3a:	2b39      	cmp	r3, #57	; 0x39
 801cd3c:	d801      	bhi.n	801cd42 <rcutils_isalnum_no_locale+0x1a>
    return true;
 801cd3e:	2301      	movs	r3, #1
 801cd40:	e010      	b.n	801cd64 <rcutils_isalnum_no_locale+0x3c>
  if (c >= 0x41 /*A*/ && c <= 0x5a /*Z*/) {
 801cd42:	79fb      	ldrb	r3, [r7, #7]
 801cd44:	2b40      	cmp	r3, #64	; 0x40
 801cd46:	d904      	bls.n	801cd52 <rcutils_isalnum_no_locale+0x2a>
 801cd48:	79fb      	ldrb	r3, [r7, #7]
 801cd4a:	2b5a      	cmp	r3, #90	; 0x5a
 801cd4c:	d801      	bhi.n	801cd52 <rcutils_isalnum_no_locale+0x2a>
    return true;
 801cd4e:	2301      	movs	r3, #1
 801cd50:	e008      	b.n	801cd64 <rcutils_isalnum_no_locale+0x3c>
  if (c >= 0x61 /*a*/ && c <= 0x7a /*z*/) {
 801cd52:	79fb      	ldrb	r3, [r7, #7]
 801cd54:	2b60      	cmp	r3, #96	; 0x60
 801cd56:	d904      	bls.n	801cd62 <rcutils_isalnum_no_locale+0x3a>
 801cd58:	79fb      	ldrb	r3, [r7, #7]
 801cd5a:	2b7a      	cmp	r3, #122	; 0x7a
 801cd5c:	d801      	bhi.n	801cd62 <rcutils_isalnum_no_locale+0x3a>
    return true;
 801cd5e:	2301      	movs	r3, #1
 801cd60:	e000      	b.n	801cd64 <rcutils_isalnum_no_locale+0x3c>
  return false;
 801cd62:	2300      	movs	r3, #0
}
 801cd64:	4618      	mov	r0, r3
 801cd66:	370c      	adds	r7, #12
 801cd68:	46bd      	mov	sp, r7
 801cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd6e:	4770      	bx	lr

0801cd70 <rmw_validate_node_name>:
rmw_ret_t
rmw_validate_node_name(
  const char * node_name,
  int * validation_result,
  size_t * invalid_index)
{
 801cd70:	b580      	push	{r7, lr}
 801cd72:	b084      	sub	sp, #16
 801cd74:	af00      	add	r7, sp, #0
 801cd76:	60f8      	str	r0, [r7, #12]
 801cd78:	60b9      	str	r1, [r7, #8]
 801cd7a:	607a      	str	r2, [r7, #4]
  if (!node_name) {
 801cd7c:	68fb      	ldr	r3, [r7, #12]
 801cd7e:	2b00      	cmp	r3, #0
 801cd80:	d101      	bne.n	801cd86 <rmw_validate_node_name+0x16>
    return RMW_RET_INVALID_ARGUMENT;
 801cd82:	230b      	movs	r3, #11
 801cd84:	e009      	b.n	801cd9a <rmw_validate_node_name+0x2a>
  }
  return rmw_validate_node_name_with_size(
 801cd86:	68f8      	ldr	r0, [r7, #12]
 801cd88:	f7e3 fa4c 	bl	8000224 <strlen>
 801cd8c:	4601      	mov	r1, r0
 801cd8e:	687b      	ldr	r3, [r7, #4]
 801cd90:	68ba      	ldr	r2, [r7, #8]
 801cd92:	68f8      	ldr	r0, [r7, #12]
 801cd94:	f000 f806 	bl	801cda4 <rmw_validate_node_name_with_size>
 801cd98:	4603      	mov	r3, r0
    node_name, strlen(node_name), validation_result, invalid_index);
}
 801cd9a:	4618      	mov	r0, r3
 801cd9c:	3710      	adds	r7, #16
 801cd9e:	46bd      	mov	sp, r7
 801cda0:	bd80      	pop	{r7, pc}
	...

0801cda4 <rmw_validate_node_name_with_size>:
rmw_validate_node_name_with_size(
  const char * node_name,
  size_t node_name_length,
  int * validation_result,
  size_t * invalid_index)
{
 801cda4:	b580      	push	{r7, lr}
 801cda6:	b086      	sub	sp, #24
 801cda8:	af00      	add	r7, sp, #0
 801cdaa:	60f8      	str	r0, [r7, #12]
 801cdac:	60b9      	str	r1, [r7, #8]
 801cdae:	607a      	str	r2, [r7, #4]
 801cdb0:	603b      	str	r3, [r7, #0]
  if (!node_name) {
 801cdb2:	68fb      	ldr	r3, [r7, #12]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d101      	bne.n	801cdbc <rmw_validate_node_name_with_size+0x18>
    return RMW_RET_INVALID_ARGUMENT;
 801cdb8:	230b      	movs	r3, #11
 801cdba:	e061      	b.n	801ce80 <rmw_validate_node_name_with_size+0xdc>
  }
  if (!validation_result) {
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d101      	bne.n	801cdc6 <rmw_validate_node_name_with_size+0x22>
    return RMW_RET_INVALID_ARGUMENT;
 801cdc2:	230b      	movs	r3, #11
 801cdc4:	e05c      	b.n	801ce80 <rmw_validate_node_name_with_size+0xdc>
  }
  if (node_name_length == 0) {
 801cdc6:	68bb      	ldr	r3, [r7, #8]
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d10a      	bne.n	801cde2 <rmw_validate_node_name_with_size+0x3e>
    *validation_result = RMW_NODE_NAME_INVALID_IS_EMPTY_STRING;
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	2201      	movs	r2, #1
 801cdd0:	601a      	str	r2, [r3, #0]
    if (invalid_index) {
 801cdd2:	683b      	ldr	r3, [r7, #0]
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	d002      	beq.n	801cdde <rmw_validate_node_name_with_size+0x3a>
      *invalid_index = 0;
 801cdd8:	683b      	ldr	r3, [r7, #0]
 801cdda:	2200      	movs	r2, #0
 801cddc:	601a      	str	r2, [r3, #0]
    }
    return RMW_RET_OK;
 801cdde:	2300      	movs	r3, #0
 801cde0:	e04e      	b.n	801ce80 <rmw_validate_node_name_with_size+0xdc>
  }
  // check for unallowed characters
  for (size_t i = 0; i < node_name_length; ++i) {
 801cde2:	2300      	movs	r3, #0
 801cde4:	617b      	str	r3, [r7, #20]
 801cde6:	e020      	b.n	801ce2a <rmw_validate_node_name_with_size+0x86>
    if (rcutils_isalnum_no_locale(node_name[i])) {
 801cde8:	68fa      	ldr	r2, [r7, #12]
 801cdea:	697b      	ldr	r3, [r7, #20]
 801cdec:	4413      	add	r3, r2
 801cdee:	781b      	ldrb	r3, [r3, #0]
 801cdf0:	4618      	mov	r0, r3
 801cdf2:	f7ff ff99 	bl	801cd28 <rcutils_isalnum_no_locale>
 801cdf6:	4603      	mov	r3, r0
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d110      	bne.n	801ce1e <rmw_validate_node_name_with_size+0x7a>
      // if it is an alpha numeric character, i.e. [0-9|A-Z|a-z], continue
      continue;
    } else if (node_name[i] == '_') {
 801cdfc:	68fa      	ldr	r2, [r7, #12]
 801cdfe:	697b      	ldr	r3, [r7, #20]
 801ce00:	4413      	add	r3, r2
 801ce02:	781b      	ldrb	r3, [r3, #0]
 801ce04:	2b5f      	cmp	r3, #95	; 0x5f
 801ce06:	d00c      	beq.n	801ce22 <rmw_validate_node_name_with_size+0x7e>
      // if it is an underscore, continue
      continue;
    } else {
      // if it is none of these, then it is an unallowed character in a node name
      *validation_result = RMW_NODE_NAME_INVALID_CONTAINS_UNALLOWED_CHARACTERS;
 801ce08:	687b      	ldr	r3, [r7, #4]
 801ce0a:	2202      	movs	r2, #2
 801ce0c:	601a      	str	r2, [r3, #0]
      if (invalid_index) {
 801ce0e:	683b      	ldr	r3, [r7, #0]
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d002      	beq.n	801ce1a <rmw_validate_node_name_with_size+0x76>
        *invalid_index = i;
 801ce14:	683b      	ldr	r3, [r7, #0]
 801ce16:	697a      	ldr	r2, [r7, #20]
 801ce18:	601a      	str	r2, [r3, #0]
      }
      return RMW_RET_OK;
 801ce1a:	2300      	movs	r3, #0
 801ce1c:	e030      	b.n	801ce80 <rmw_validate_node_name_with_size+0xdc>
      continue;
 801ce1e:	bf00      	nop
 801ce20:	e000      	b.n	801ce24 <rmw_validate_node_name_with_size+0x80>
      continue;
 801ce22:	bf00      	nop
  for (size_t i = 0; i < node_name_length; ++i) {
 801ce24:	697b      	ldr	r3, [r7, #20]
 801ce26:	3301      	adds	r3, #1
 801ce28:	617b      	str	r3, [r7, #20]
 801ce2a:	697a      	ldr	r2, [r7, #20]
 801ce2c:	68bb      	ldr	r3, [r7, #8]
 801ce2e:	429a      	cmp	r2, r3
 801ce30:	d3da      	bcc.n	801cde8 <rmw_validate_node_name_with_size+0x44>
    }
  }
  if (isdigit(node_name[0]) != 0) {
 801ce32:	68fb      	ldr	r3, [r7, #12]
 801ce34:	781b      	ldrb	r3, [r3, #0]
 801ce36:	3301      	adds	r3, #1
 801ce38:	4a13      	ldr	r2, [pc, #76]	; (801ce88 <rmw_validate_node_name_with_size+0xe4>)
 801ce3a:	4413      	add	r3, r2
 801ce3c:	781b      	ldrb	r3, [r3, #0]
 801ce3e:	f003 0304 	and.w	r3, r3, #4
 801ce42:	2b00      	cmp	r3, #0
 801ce44:	d00a      	beq.n	801ce5c <rmw_validate_node_name_with_size+0xb8>
    // this is the case where the name starts with a number, i.e. [0-9]
    *validation_result = RMW_NODE_NAME_INVALID_STARTS_WITH_NUMBER;
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	2203      	movs	r2, #3
 801ce4a:	601a      	str	r2, [r3, #0]
    if (invalid_index) {
 801ce4c:	683b      	ldr	r3, [r7, #0]
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	d002      	beq.n	801ce58 <rmw_validate_node_name_with_size+0xb4>
      *invalid_index = 0;
 801ce52:	683b      	ldr	r3, [r7, #0]
 801ce54:	2200      	movs	r2, #0
 801ce56:	601a      	str	r2, [r3, #0]
    }
    return RMW_RET_OK;
 801ce58:	2300      	movs	r3, #0
 801ce5a:	e011      	b.n	801ce80 <rmw_validate_node_name_with_size+0xdc>
  }
  // check if the node name is too long last, since it might be a soft invalidation
  if (node_name_length > RMW_NODE_NAME_MAX_NAME_LENGTH) {
 801ce5c:	68bb      	ldr	r3, [r7, #8]
 801ce5e:	2bff      	cmp	r3, #255	; 0xff
 801ce60:	d90a      	bls.n	801ce78 <rmw_validate_node_name_with_size+0xd4>
    *validation_result = RMW_NODE_NAME_INVALID_TOO_LONG;
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	2204      	movs	r2, #4
 801ce66:	601a      	str	r2, [r3, #0]
    if (invalid_index) {
 801ce68:	683b      	ldr	r3, [r7, #0]
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d002      	beq.n	801ce74 <rmw_validate_node_name_with_size+0xd0>
      *invalid_index = RMW_NODE_NAME_MAX_NAME_LENGTH - 1;
 801ce6e:	683b      	ldr	r3, [r7, #0]
 801ce70:	22fe      	movs	r2, #254	; 0xfe
 801ce72:	601a      	str	r2, [r3, #0]
    }
    return RMW_RET_OK;
 801ce74:	2300      	movs	r3, #0
 801ce76:	e003      	b.n	801ce80 <rmw_validate_node_name_with_size+0xdc>
  }
  // everything was ok, set result to valid node name, avoid setting invalid_index, and return
  *validation_result = RMW_NODE_NAME_VALID;
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	2200      	movs	r2, #0
 801ce7c:	601a      	str	r2, [r3, #0]
  return RMW_RET_OK;
 801ce7e:	2300      	movs	r3, #0
}
 801ce80:	4618      	mov	r0, r3
 801ce82:	3718      	adds	r7, #24
 801ce84:	46bd      	mov	sp, r7
 801ce86:	bd80      	pop	{r7, pc}
 801ce88:	080275da 	.word	0x080275da

0801ce8c <rmw_node_name_validation_result_string>:

const char *
rmw_node_name_validation_result_string(int validation_result)
{
 801ce8c:	b480      	push	{r7}
 801ce8e:	b083      	sub	sp, #12
 801ce90:	af00      	add	r7, sp, #0
 801ce92:	6078      	str	r0, [r7, #4]
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	2b04      	cmp	r3, #4
 801ce98:	d816      	bhi.n	801cec8 <rmw_node_name_validation_result_string+0x3c>
 801ce9a:	a201      	add	r2, pc, #4	; (adr r2, 801cea0 <rmw_node_name_validation_result_string+0x14>)
 801ce9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cea0:	0801ceb5 	.word	0x0801ceb5
 801cea4:	0801ceb9 	.word	0x0801ceb9
 801cea8:	0801cebd 	.word	0x0801cebd
 801ceac:	0801cec1 	.word	0x0801cec1
 801ceb0:	0801cec5 	.word	0x0801cec5
  switch (validation_result) {
    case RMW_NODE_NAME_VALID:
      return NULL;
 801ceb4:	2300      	movs	r3, #0
 801ceb6:	e008      	b.n	801ceca <rmw_node_name_validation_result_string+0x3e>
    case RMW_NODE_NAME_INVALID_IS_EMPTY_STRING:
      return "node name must not be empty";
 801ceb8:	4b07      	ldr	r3, [pc, #28]	; (801ced8 <rmw_node_name_validation_result_string+0x4c>)
 801ceba:	e006      	b.n	801ceca <rmw_node_name_validation_result_string+0x3e>
    case RMW_NODE_NAME_INVALID_CONTAINS_UNALLOWED_CHARACTERS:
      return "node name must not contain characters other than alphanumerics or '_'";
 801cebc:	4b07      	ldr	r3, [pc, #28]	; (801cedc <rmw_node_name_validation_result_string+0x50>)
 801cebe:	e004      	b.n	801ceca <rmw_node_name_validation_result_string+0x3e>
    case RMW_NODE_NAME_INVALID_STARTS_WITH_NUMBER:
      return "node name must not start with a number";
 801cec0:	4b07      	ldr	r3, [pc, #28]	; (801cee0 <rmw_node_name_validation_result_string+0x54>)
 801cec2:	e002      	b.n	801ceca <rmw_node_name_validation_result_string+0x3e>
    case RMW_NODE_NAME_INVALID_TOO_LONG:
      return
        "node name length should not exceed '" RMW_STRINGIFY(RMW_NODE_NAME_MAX_NAME_LENGTH) "'";
 801cec4:	4b07      	ldr	r3, [pc, #28]	; (801cee4 <rmw_node_name_validation_result_string+0x58>)
 801cec6:	e000      	b.n	801ceca <rmw_node_name_validation_result_string+0x3e>
    default:
      return "unknown result code for rmw node name validation";
 801cec8:	4b07      	ldr	r3, [pc, #28]	; (801cee8 <rmw_node_name_validation_result_string+0x5c>)
  }
}
 801ceca:	4618      	mov	r0, r3
 801cecc:	370c      	adds	r7, #12
 801cece:	46bd      	mov	sp, r7
 801ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ced4:	4770      	bx	lr
 801ced6:	bf00      	nop
 801ced8:	08026db0 	.word	0x08026db0
 801cedc:	08026dcc 	.word	0x08026dcc
 801cee0:	08026e14 	.word	0x08026e14
 801cee4:	08026e3c 	.word	0x08026e3c
 801cee8:	08026e68 	.word	0x08026e68

0801ceec <on_status>:
  struct uxrSession * session,
  uxrObjectId object_id,
  uint16_t request_id,
  uint8_t status,
  void * args)
{
 801ceec:	b480      	push	{r7}
 801ceee:	b085      	sub	sp, #20
 801cef0:	af00      	add	r7, sp, #0
 801cef2:	60f8      	str	r0, [r7, #12]
 801cef4:	60b9      	str	r1, [r7, #8]
 801cef6:	4611      	mov	r1, r2
 801cef8:	461a      	mov	r2, r3
 801cefa:	460b      	mov	r3, r1
 801cefc:	80fb      	strh	r3, [r7, #6]
 801cefe:	4613      	mov	r3, r2
 801cf00:	717b      	strb	r3, [r7, #5]
  (void)session;
  (void)object_id;
  (void)request_id;
  (void)status;
  (void)args;
}
 801cf02:	bf00      	nop
 801cf04:	3714      	adds	r7, #20
 801cf06:	46bd      	mov	sp, r7
 801cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf0c:	4770      	bx	lr
	...

0801cf10 <on_topic>:
  uint16_t request_id,
  uxrStreamId stream_id,
  struct ucdrBuffer * ub,
  uint16_t length,
  void * args)
{
 801cf10:	b590      	push	{r4, r7, lr}
 801cf12:	b09d      	sub	sp, #116	; 0x74
 801cf14:	af12      	add	r7, sp, #72	; 0x48
 801cf16:	60f8      	str	r0, [r7, #12]
 801cf18:	60b9      	str	r1, [r7, #8]
 801cf1a:	603b      	str	r3, [r7, #0]
 801cf1c:	4613      	mov	r3, r2
 801cf1e:	80fb      	strh	r3, [r7, #6]
  (void)session;
  (void)request_id;
  (void)stream_id;

#ifdef RMW_UXRCE_GRAPH
  rmw_context_impl_t * context_impl = (rmw_context_impl_t *)(args);
 801cf20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cf22:	623b      	str	r3, [r7, #32]
  rmw_graph_info_t * graph_info = &context_impl->graph_info;
 801cf24:	6a3b      	ldr	r3, [r7, #32]
 801cf26:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 801cf2a:	61fb      	str	r3, [r7, #28]

  if (object_id.id == graph_info->datareader_id.id &&
 801cf2c:	893a      	ldrh	r2, [r7, #8]
 801cf2e:	69fb      	ldr	r3, [r7, #28]
 801cf30:	8a9b      	ldrh	r3, [r3, #20]
 801cf32:	429a      	cmp	r2, r3
 801cf34:	d116      	bne.n	801cf64 <on_topic+0x54>
    object_id.type == graph_info->datareader_id.type)
 801cf36:	7aba      	ldrb	r2, [r7, #10]
 801cf38:	69fb      	ldr	r3, [r7, #28]
 801cf3a:	7d9b      	ldrb	r3, [r3, #22]
  if (object_id.id == graph_info->datareader_id.id &&
 801cf3c:	429a      	cmp	r2, r3
 801cf3e:	d111      	bne.n	801cf64 <on_topic+0x54>
  {
    graph_info->micro_buffer_length = (size_t)length;
 801cf40:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801cf42:	69fb      	ldr	r3, [r7, #28]
 801cf44:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    ucdr_deserialize_array_uint8_t(ub, graph_info->micro_buffer, length);
 801cf48:	69fb      	ldr	r3, [r7, #28]
 801cf4a:	3318      	adds	r3, #24
 801cf4c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801cf4e:	4619      	mov	r1, r3
 801cf50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801cf52:	f7ed fb86 	bl	800a662 <ucdr_deserialize_array_uint8_t>
    graph_info->initialized = true;
 801cf56:	69fb      	ldr	r3, [r7, #28]
 801cf58:	2201      	movs	r2, #1
 801cf5a:	701a      	strb	r2, [r3, #0]
    graph_info->has_changed = true;
 801cf5c:	69fb      	ldr	r3, [r7, #28]
 801cf5e:	2201      	movs	r2, #1
 801cf60:	705a      	strb	r2, [r3, #1]
    return;
 801cf62:	e05d      	b.n	801d020 <on_topic+0x110>
#else
  (void)args;
#endif  // RMW_UXRCE_GRAPH

  // Iterate along the allocated subscriptions
  rmw_uxrce_mempool_item_t * subscription_item = subscription_memory.allocateditems;
 801cf64:	4b30      	ldr	r3, [pc, #192]	; (801d028 <on_topic+0x118>)
 801cf66:	681b      	ldr	r3, [r3, #0]
 801cf68:	627b      	str	r3, [r7, #36]	; 0x24
  while (subscription_item != NULL) {
 801cf6a:	e056      	b.n	801d01a <on_topic+0x10a>
    rmw_uxrce_subscription_t * custom_subscription =
 801cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf6e:	68db      	ldr	r3, [r3, #12]
 801cf70:	61bb      	str	r3, [r7, #24]
      (rmw_uxrce_subscription_t *)subscription_item->data;

    // Check if topic is related to the subscription
    if ((custom_subscription->datareader_id.id == object_id.id) &&
 801cf72:	69bb      	ldr	r3, [r7, #24]
 801cf74:	8a9a      	ldrh	r2, [r3, #20]
 801cf76:	893b      	ldrh	r3, [r7, #8]
 801cf78:	429a      	cmp	r2, r3
 801cf7a:	d14b      	bne.n	801d014 <on_topic+0x104>
      (custom_subscription->datareader_id.type == object_id.type))
 801cf7c:	69bb      	ldr	r3, [r7, #24]
 801cf7e:	7d9a      	ldrb	r2, [r3, #22]
 801cf80:	7abb      	ldrb	r3, [r7, #10]
    if ((custom_subscription->datareader_id.id == object_id.id) &&
 801cf82:	429a      	cmp	r2, r3
 801cf84:	d146      	bne.n	801d014 <on_topic+0x104>
    {
      UXR_LOCK(&static_buffer_memory.mutex);
 801cf86:	4829      	ldr	r0, [pc, #164]	; (801d02c <on_topic+0x11c>)
 801cf88:	f7f6 fe51 	bl	8013c2e <uxr_lock>

      rmw_uxrce_mempool_item_t * memory_node = rmw_uxrce_get_static_input_buffer_for_entity(
 801cf8c:	69bc      	ldr	r4, [r7, #24]
 801cf8e:	4668      	mov	r0, sp
 801cf90:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801cf94:	2248      	movs	r2, #72	; 0x48
 801cf96:	4619      	mov	r1, r3
 801cf98:	f003 fe92 	bl	8020cc0 <memcpy>
 801cf9c:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801cfa0:	cb0c      	ldmia	r3, {r2, r3}
 801cfa2:	69b8      	ldr	r0, [r7, #24]
 801cfa4:	f003 f8e2 	bl	802016c <rmw_uxrce_get_static_input_buffer_for_entity>
 801cfa8:	6178      	str	r0, [r7, #20]
        custom_subscription, custom_subscription->qos);
      if (!memory_node) {
 801cfaa:	697b      	ldr	r3, [r7, #20]
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	d103      	bne.n	801cfb8 <on_topic+0xa8>
        UXR_UNLOCK(&static_buffer_memory.mutex);
 801cfb0:	481e      	ldr	r0, [pc, #120]	; (801d02c <on_topic+0x11c>)
 801cfb2:	f7f6 fe4b 	bl	8013c4c <uxr_unlock>
          .node = custom_subscription->owner_node->node_name,
          .node_namespace = custom_subscription->owner_node->node_namespace,
          .topic_name = custom_subscription->topic_name, .ucdr = ub,
          .size = length,
          .type_support.message_callbacks = custom_subscription->type_support_callbacks);
        return;
 801cfb6:	e033      	b.n	801d020 <on_topic+0x110>
      }

      rmw_uxrce_static_input_buffer_t * static_buffer =
 801cfb8:	697b      	ldr	r3, [r7, #20]
 801cfba:	68db      	ldr	r3, [r3, #12]
 801cfbc:	613b      	str	r3, [r7, #16]
        (rmw_uxrce_static_input_buffer_t *)memory_node->data;

      if (!ucdr_deserialize_array_uint8_t(
          ub,
          static_buffer->buffer,
 801cfbe:	693b      	ldr	r3, [r7, #16]
 801cfc0:	3310      	adds	r3, #16
      if (!ucdr_deserialize_array_uint8_t(
 801cfc2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801cfc4:	4619      	mov	r1, r3
 801cfc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801cfc8:	f7ed fb4b 	bl	800a662 <ucdr_deserialize_array_uint8_t>
 801cfcc:	4603      	mov	r3, r0
 801cfce:	f083 0301 	eor.w	r3, r3, #1
 801cfd2:	b2db      	uxtb	r3, r3
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	d004      	beq.n	801cfe2 <on_topic+0xd2>
          length))
      {
        put_memory(&static_buffer_memory, memory_node);
 801cfd8:	6979      	ldr	r1, [r7, #20]
 801cfda:	4815      	ldr	r0, [pc, #84]	; (801d030 <on_topic+0x120>)
 801cfdc:	f000 f96e 	bl	801d2bc <put_memory>
 801cfe0:	e014      	b.n	801d00c <on_topic+0xfc>
      } else {
        static_buffer->owner = (void *) custom_subscription;
 801cfe2:	693b      	ldr	r3, [r7, #16]
 801cfe4:	69ba      	ldr	r2, [r7, #24]
 801cfe6:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
        static_buffer->length = length;
 801cfea:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801cfec:	693b      	ldr	r3, [r7, #16]
 801cfee:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
        static_buffer->timestamp = rmw_uros_epoch_nanos();
 801cff2:	f003 fc69 	bl	80208c8 <rmw_uros_epoch_nanos>
 801cff6:	4602      	mov	r2, r0
 801cff8:	460b      	mov	r3, r1
 801cffa:	6939      	ldr	r1, [r7, #16]
 801cffc:	f501 6102 	add.w	r1, r1, #2080	; 0x820
 801d000:	e941 2302 	strd	r2, r3, [r1, #-8]
        static_buffer->entity_type = RMW_UXRCE_ENTITY_TYPE_SUBSCRIPTION;
 801d004:	693b      	ldr	r3, [r7, #16]
 801d006:	2205      	movs	r2, #5
 801d008:	f883 2820 	strb.w	r2, [r3, #2080]	; 0x820
      }

      UXR_UNLOCK(&static_buffer_memory.mutex);
 801d00c:	4807      	ldr	r0, [pc, #28]	; (801d02c <on_topic+0x11c>)
 801d00e:	f7f6 fe1d 	bl	8013c4c <uxr_unlock>
      return;
 801d012:	e005      	b.n	801d020 <on_topic+0x110>
    }
    subscription_item = subscription_item->next;
 801d014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d016:	689b      	ldr	r3, [r3, #8]
 801d018:	627b      	str	r3, [r7, #36]	; 0x24
  while (subscription_item != NULL) {
 801d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d1a5      	bne.n	801cf6c <on_topic+0x5c>
  }
}
 801d020:	372c      	adds	r7, #44	; 0x2c
 801d022:	46bd      	mov	sp, r7
 801d024:	bd90      	pop	{r4, r7, pc}
 801d026:	bf00      	nop
 801d028:	20010cc8 	.word	0x20010cc8
 801d02c:	200110d4 	.word	0x200110d4
 801d030:	200110c4 	.word	0x200110c4

0801d034 <on_request>:
  uint16_t request_id,
  SampleIdentity * sample_id,
  struct ucdrBuffer * ub,
  uint16_t length,
  void * args)
{
 801d034:	b5b0      	push	{r4, r5, r7, lr}
 801d036:	b09a      	sub	sp, #104	; 0x68
 801d038:	af12      	add	r7, sp, #72	; 0x48
 801d03a:	60f8      	str	r0, [r7, #12]
 801d03c:	60b9      	str	r1, [r7, #8]
 801d03e:	603b      	str	r3, [r7, #0]
 801d040:	4613      	mov	r3, r2
 801d042:	80fb      	strh	r3, [r7, #6]
  (void)session;
  (void)object_id;
  (void)args;

  // Iterate along the allocated services
  rmw_uxrce_mempool_item_t * service_item = service_memory.allocateditems;
 801d044:	4b33      	ldr	r3, [pc, #204]	; (801d114 <on_request+0xe0>)
 801d046:	681b      	ldr	r3, [r3, #0]
 801d048:	61fb      	str	r3, [r7, #28]
  while (service_item != NULL) {
 801d04a:	e05c      	b.n	801d106 <on_request+0xd2>
    // Check if request is related to the service
    rmw_uxrce_service_t * custom_service = (rmw_uxrce_service_t *)service_item->data;
 801d04c:	69fb      	ldr	r3, [r7, #28]
 801d04e:	68db      	ldr	r3, [r3, #12]
 801d050:	61bb      	str	r3, [r7, #24]
    if (custom_service->service_data_resquest == request_id) {
 801d052:	69bb      	ldr	r3, [r7, #24]
 801d054:	8b1b      	ldrh	r3, [r3, #24]
 801d056:	88fa      	ldrh	r2, [r7, #6]
 801d058:	429a      	cmp	r2, r3
 801d05a:	d151      	bne.n	801d100 <on_request+0xcc>
      UXR_LOCK(&static_buffer_memory.mutex);
 801d05c:	482e      	ldr	r0, [pc, #184]	; (801d118 <on_request+0xe4>)
 801d05e:	f7f6 fde6 	bl	8013c2e <uxr_lock>

      rmw_uxrce_mempool_item_t * memory_node = rmw_uxrce_get_static_input_buffer_for_entity(
 801d062:	69bc      	ldr	r4, [r7, #24]
 801d064:	4668      	mov	r0, sp
 801d066:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801d06a:	2248      	movs	r2, #72	; 0x48
 801d06c:	4619      	mov	r1, r3
 801d06e:	f003 fe27 	bl	8020cc0 <memcpy>
 801d072:	f104 0320 	add.w	r3, r4, #32
 801d076:	cb0c      	ldmia	r3, {r2, r3}
 801d078:	69b8      	ldr	r0, [r7, #24]
 801d07a:	f003 f877 	bl	802016c <rmw_uxrce_get_static_input_buffer_for_entity>
 801d07e:	6178      	str	r0, [r7, #20]
        custom_service, custom_service->qos);
      if (!memory_node) {
 801d080:	697b      	ldr	r3, [r7, #20]
 801d082:	2b00      	cmp	r3, #0
 801d084:	d103      	bne.n	801d08e <on_request+0x5a>
        UXR_UNLOCK(&static_buffer_memory.mutex);
 801d086:	4824      	ldr	r0, [pc, #144]	; (801d118 <on_request+0xe4>)
 801d088:	f7f6 fde0 	bl	8013c4c <uxr_unlock>
          .node = custom_service->owner_node->node_name,
          .node_namespace = custom_service->owner_node->node_namespace,
          .topic_name = custom_service->service_name, .ucdr = ub,
          .size = length,
          .type_support.service_callbacks = custom_service->type_support_callbacks);
        return;
 801d08c:	e03e      	b.n	801d10c <on_request+0xd8>
      }

      rmw_uxrce_static_input_buffer_t * static_buffer =
 801d08e:	697b      	ldr	r3, [r7, #20]
 801d090:	68db      	ldr	r3, [r3, #12]
 801d092:	613b      	str	r3, [r7, #16]
        (rmw_uxrce_static_input_buffer_t *)memory_node->data;

      if (!ucdr_deserialize_array_uint8_t(
          ub,
          static_buffer->buffer,
 801d094:	693b      	ldr	r3, [r7, #16]
 801d096:	3310      	adds	r3, #16
      if (!ucdr_deserialize_array_uint8_t(
 801d098:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801d09a:	4619      	mov	r1, r3
 801d09c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d09e:	f7ed fae0 	bl	800a662 <ucdr_deserialize_array_uint8_t>
 801d0a2:	4603      	mov	r3, r0
 801d0a4:	f083 0301 	eor.w	r3, r3, #1
 801d0a8:	b2db      	uxtb	r3, r3
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	d004      	beq.n	801d0b8 <on_request+0x84>
          length))
      {
        put_memory(&static_buffer_memory, memory_node);
 801d0ae:	6979      	ldr	r1, [r7, #20]
 801d0b0:	481a      	ldr	r0, [pc, #104]	; (801d11c <on_request+0xe8>)
 801d0b2:	f000 f903 	bl	801d2bc <put_memory>
 801d0b6:	e01f      	b.n	801d0f8 <on_request+0xc4>
      } else {
        static_buffer->owner = (void *) custom_service;
 801d0b8:	693b      	ldr	r3, [r7, #16]
 801d0ba:	69ba      	ldr	r2, [r7, #24]
 801d0bc:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
        static_buffer->length = length;
 801d0c0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801d0c2:	693b      	ldr	r3, [r7, #16]
 801d0c4:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
        static_buffer->related.sample_id = *sample_id;
 801d0c8:	693b      	ldr	r3, [r7, #16]
 801d0ca:	683a      	ldr	r2, [r7, #0]
 801d0cc:	f603 0428 	addw	r4, r3, #2088	; 0x828
 801d0d0:	4615      	mov	r5, r2
 801d0d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d0d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d0d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d0da:	e884 0003 	stmia.w	r4, {r0, r1}
        static_buffer->timestamp = rmw_uros_epoch_nanos();
 801d0de:	f003 fbf3 	bl	80208c8 <rmw_uros_epoch_nanos>
 801d0e2:	4602      	mov	r2, r0
 801d0e4:	460b      	mov	r3, r1
 801d0e6:	6939      	ldr	r1, [r7, #16]
 801d0e8:	f501 6102 	add.w	r1, r1, #2080	; 0x820
 801d0ec:	e941 2302 	strd	r2, r3, [r1, #-8]
        static_buffer->entity_type = RMW_UXRCE_ENTITY_TYPE_SERVICE;
 801d0f0:	693b      	ldr	r3, [r7, #16]
 801d0f2:	2203      	movs	r2, #3
 801d0f4:	f883 2820 	strb.w	r2, [r3, #2080]	; 0x820
      }

      UXR_UNLOCK(&static_buffer_memory.mutex);
 801d0f8:	4807      	ldr	r0, [pc, #28]	; (801d118 <on_request+0xe4>)
 801d0fa:	f7f6 fda7 	bl	8013c4c <uxr_unlock>

      return;
 801d0fe:	e005      	b.n	801d10c <on_request+0xd8>
    }
    service_item = service_item->next;
 801d100:	69fb      	ldr	r3, [r7, #28]
 801d102:	689b      	ldr	r3, [r3, #8]
 801d104:	61fb      	str	r3, [r7, #28]
  while (service_item != NULL) {
 801d106:	69fb      	ldr	r3, [r7, #28]
 801d108:	2b00      	cmp	r3, #0
 801d10a:	d19f      	bne.n	801d04c <on_request+0x18>
  }
}
 801d10c:	3720      	adds	r7, #32
 801d10e:	46bd      	mov	sp, r7
 801d110:	bdb0      	pop	{r4, r5, r7, pc}
 801d112:	bf00      	nop
 801d114:	20010f20 	.word	0x20010f20
 801d118:	200110d4 	.word	0x200110d4
 801d11c:	200110c4 	.word	0x200110c4

0801d120 <on_reply>:
  uint16_t request_id,
  uint16_t reply_id,
  struct ucdrBuffer * ub,
  uint16_t length,
  void * args)
{
 801d120:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 801d124:	b09b      	sub	sp, #108	; 0x6c
 801d126:	af12      	add	r7, sp, #72	; 0x48
 801d128:	60f8      	str	r0, [r7, #12]
 801d12a:	60b9      	str	r1, [r7, #8]
 801d12c:	4611      	mov	r1, r2
 801d12e:	461a      	mov	r2, r3
 801d130:	460b      	mov	r3, r1
 801d132:	80fb      	strh	r3, [r7, #6]
 801d134:	4613      	mov	r3, r2
 801d136:	80bb      	strh	r3, [r7, #4]
  (void)session;
  (void)object_id;
  (void)args;

  // Iterate along the allocated clients
  rmw_uxrce_mempool_item_t * client_item = client_memory.allocateditems;
 801d138:	4b32      	ldr	r3, [pc, #200]	; (801d204 <on_reply+0xe4>)
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	61fb      	str	r3, [r7, #28]
  while (client_item != NULL) {
 801d13e:	e05a      	b.n	801d1f6 <on_reply+0xd6>
    // Check if reply is related to the client
    rmw_uxrce_client_t * custom_client = (rmw_uxrce_client_t *)client_item->data;
 801d140:	69fb      	ldr	r3, [r7, #28]
 801d142:	68db      	ldr	r3, [r3, #12]
 801d144:	61bb      	str	r3, [r7, #24]
    if (custom_client->client_data_request == request_id) {
 801d146:	69bb      	ldr	r3, [r7, #24]
 801d148:	8b1b      	ldrh	r3, [r3, #24]
 801d14a:	88fa      	ldrh	r2, [r7, #6]
 801d14c:	429a      	cmp	r2, r3
 801d14e:	d14f      	bne.n	801d1f0 <on_reply+0xd0>
      UXR_LOCK(&static_buffer_memory.mutex);
 801d150:	482d      	ldr	r0, [pc, #180]	; (801d208 <on_reply+0xe8>)
 801d152:	f7f6 fd6c 	bl	8013c2e <uxr_lock>

      rmw_uxrce_mempool_item_t * memory_node = rmw_uxrce_get_static_input_buffer_for_entity(
 801d156:	69bc      	ldr	r4, [r7, #24]
 801d158:	4668      	mov	r0, sp
 801d15a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801d15e:	2248      	movs	r2, #72	; 0x48
 801d160:	4619      	mov	r1, r3
 801d162:	f003 fdad 	bl	8020cc0 <memcpy>
 801d166:	f104 0320 	add.w	r3, r4, #32
 801d16a:	cb0c      	ldmia	r3, {r2, r3}
 801d16c:	69b8      	ldr	r0, [r7, #24]
 801d16e:	f002 fffd 	bl	802016c <rmw_uxrce_get_static_input_buffer_for_entity>
 801d172:	6178      	str	r0, [r7, #20]
        custom_client, custom_client->qos);
      if (!memory_node) {
 801d174:	697b      	ldr	r3, [r7, #20]
 801d176:	2b00      	cmp	r3, #0
 801d178:	d103      	bne.n	801d182 <on_reply+0x62>
        UXR_UNLOCK(&static_buffer_memory.mutex);
 801d17a:	4823      	ldr	r0, [pc, #140]	; (801d208 <on_reply+0xe8>)
 801d17c:	f7f6 fd66 	bl	8013c4c <uxr_unlock>
          .node = custom_client->owner_node->node_name,
          .node_namespace = custom_client->owner_node->node_namespace,
          .topic_name = custom_client->service_name, .ucdr = ub,
          .size = length,
          .type_support.service_callbacks = custom_client->type_support_callbacks);
        return;
 801d180:	e03c      	b.n	801d1fc <on_reply+0xdc>
      }

      rmw_uxrce_static_input_buffer_t * static_buffer =
 801d182:	697b      	ldr	r3, [r7, #20]
 801d184:	68db      	ldr	r3, [r3, #12]
 801d186:	613b      	str	r3, [r7, #16]
        (rmw_uxrce_static_input_buffer_t *)memory_node->data;

      if (!ucdr_deserialize_array_uint8_t(
          ub,
          static_buffer->buffer,
 801d188:	693b      	ldr	r3, [r7, #16]
 801d18a:	3310      	adds	r3, #16
      if (!ucdr_deserialize_array_uint8_t(
 801d18c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801d18e:	4619      	mov	r1, r3
 801d190:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d192:	f7ed fa66 	bl	800a662 <ucdr_deserialize_array_uint8_t>
 801d196:	4603      	mov	r3, r0
 801d198:	f083 0301 	eor.w	r3, r3, #1
 801d19c:	b2db      	uxtb	r3, r3
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	d004      	beq.n	801d1ac <on_reply+0x8c>
          length))
      {
        put_memory(&static_buffer_memory, memory_node);
 801d1a2:	6979      	ldr	r1, [r7, #20]
 801d1a4:	4819      	ldr	r0, [pc, #100]	; (801d20c <on_reply+0xec>)
 801d1a6:	f000 f889 	bl	801d2bc <put_memory>
 801d1aa:	e01d      	b.n	801d1e8 <on_reply+0xc8>
      } else {
        static_buffer->owner = (void *) custom_client;
 801d1ac:	693b      	ldr	r3, [r7, #16]
 801d1ae:	69ba      	ldr	r2, [r7, #24]
 801d1b0:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
        static_buffer->length = length;
 801d1b4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801d1b6:	693b      	ldr	r3, [r7, #16]
 801d1b8:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
        static_buffer->related.reply_id = reply_id;
 801d1bc:	88bb      	ldrh	r3, [r7, #4]
 801d1be:	2200      	movs	r2, #0
 801d1c0:	4698      	mov	r8, r3
 801d1c2:	4691      	mov	r9, r2
 801d1c4:	693b      	ldr	r3, [r7, #16]
 801d1c6:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 801d1ca:	e943 8902 	strd	r8, r9, [r3, #-8]
        static_buffer->timestamp = rmw_uros_epoch_nanos();
 801d1ce:	f003 fb7b 	bl	80208c8 <rmw_uros_epoch_nanos>
 801d1d2:	4602      	mov	r2, r0
 801d1d4:	460b      	mov	r3, r1
 801d1d6:	6939      	ldr	r1, [r7, #16]
 801d1d8:	f501 6102 	add.w	r1, r1, #2080	; 0x820
 801d1dc:	e941 2302 	strd	r2, r3, [r1, #-8]
        static_buffer->entity_type = RMW_UXRCE_ENTITY_TYPE_CLIENT;
 801d1e0:	693b      	ldr	r3, [r7, #16]
 801d1e2:	2204      	movs	r2, #4
 801d1e4:	f883 2820 	strb.w	r2, [r3, #2080]	; 0x820
      }
      UXR_UNLOCK(&static_buffer_memory.mutex);
 801d1e8:	4807      	ldr	r0, [pc, #28]	; (801d208 <on_reply+0xe8>)
 801d1ea:	f7f6 fd2f 	bl	8013c4c <uxr_unlock>

      return;
 801d1ee:	e005      	b.n	801d1fc <on_reply+0xdc>
    }
    client_item = client_item->next;
 801d1f0:	69fb      	ldr	r3, [r7, #28]
 801d1f2:	689b      	ldr	r3, [r3, #8]
 801d1f4:	61fb      	str	r3, [r7, #28]
  while (client_item != NULL) {
 801d1f6:	69fb      	ldr	r3, [r7, #28]
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d1a1      	bne.n	801d140 <on_reply+0x20>
  }
}
 801d1fc:	3724      	adds	r7, #36	; 0x24
 801d1fe:	46bd      	mov	sp, r7
 801d200:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 801d204:	20010f88 	.word	0x20010f88
 801d208:	200110d4 	.word	0x200110d4
 801d20c:	200110c4 	.word	0x200110c4

0801d210 <has_memory>:

#include <uxr/client/profile/multithread/multithread.h>

bool has_memory(
  rmw_uxrce_mempool_t * mem)
{
 801d210:	b580      	push	{r7, lr}
 801d212:	b084      	sub	sp, #16
 801d214:	af00      	add	r7, sp, #0
 801d216:	6078      	str	r0, [r7, #4]
  UXR_LOCK(&mem->mutex);
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	3310      	adds	r3, #16
 801d21c:	4618      	mov	r0, r3
 801d21e:	f7f6 fd06 	bl	8013c2e <uxr_lock>
  bool rv = mem->freeitems != NULL ? true : false;
 801d222:	687b      	ldr	r3, [r7, #4]
 801d224:	685b      	ldr	r3, [r3, #4]
 801d226:	2b00      	cmp	r3, #0
 801d228:	bf14      	ite	ne
 801d22a:	2301      	movne	r3, #1
 801d22c:	2300      	moveq	r3, #0
 801d22e:	73fb      	strb	r3, [r7, #15]
  UXR_UNLOCK(&mem->mutex);
 801d230:	687b      	ldr	r3, [r7, #4]
 801d232:	3310      	adds	r3, #16
 801d234:	4618      	mov	r0, r3
 801d236:	f7f6 fd09 	bl	8013c4c <uxr_unlock>

  return rv;
 801d23a:	7bfb      	ldrb	r3, [r7, #15]
}
 801d23c:	4618      	mov	r0, r3
 801d23e:	3710      	adds	r7, #16
 801d240:	46bd      	mov	sp, r7
 801d242:	bd80      	pop	{r7, pc}

0801d244 <get_memory>:

rmw_uxrce_mempool_item_t * get_memory(
  rmw_uxrce_mempool_t * mem)
{
 801d244:	b580      	push	{r7, lr}
 801d246:	b084      	sub	sp, #16
 801d248:	af00      	add	r7, sp, #0
 801d24a:	6078      	str	r0, [r7, #4]
  UXR_LOCK(&mem->mutex);
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	3310      	adds	r3, #16
 801d250:	4618      	mov	r0, r3
 801d252:	f7f6 fcec 	bl	8013c2e <uxr_lock>

  rmw_uxrce_mempool_item_t * item = NULL;
 801d256:	2300      	movs	r3, #0
 801d258:	60fb      	str	r3, [r7, #12]

  if (has_memory(mem)) {
 801d25a:	6878      	ldr	r0, [r7, #4]
 801d25c:	f7ff ffd8 	bl	801d210 <has_memory>
 801d260:	4603      	mov	r3, r0
 801d262:	2b00      	cmp	r3, #0
 801d264:	d020      	beq.n	801d2a8 <get_memory+0x64>
    // Gets item from free pool
    item = mem->freeitems;
 801d266:	687b      	ldr	r3, [r7, #4]
 801d268:	685b      	ldr	r3, [r3, #4]
 801d26a:	60fb      	str	r3, [r7, #12]
    mem->freeitems = item->next;
 801d26c:	68fb      	ldr	r3, [r7, #12]
 801d26e:	689a      	ldr	r2, [r3, #8]
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	605a      	str	r2, [r3, #4]
    if (mem->freeitems) {
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	685b      	ldr	r3, [r3, #4]
 801d278:	2b00      	cmp	r3, #0
 801d27a:	d003      	beq.n	801d284 <get_memory+0x40>
      mem->freeitems->prev = NULL;
 801d27c:	687b      	ldr	r3, [r7, #4]
 801d27e:	685b      	ldr	r3, [r3, #4]
 801d280:	2200      	movs	r2, #0
 801d282:	605a      	str	r2, [r3, #4]
    }

    // Puts item in allocated pool
    item->next = mem->allocateditems;
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	681a      	ldr	r2, [r3, #0]
 801d288:	68fb      	ldr	r3, [r7, #12]
 801d28a:	609a      	str	r2, [r3, #8]
    if (item->next) {
 801d28c:	68fb      	ldr	r3, [r7, #12]
 801d28e:	689b      	ldr	r3, [r3, #8]
 801d290:	2b00      	cmp	r3, #0
 801d292:	d003      	beq.n	801d29c <get_memory+0x58>
      item->next->prev = item;
 801d294:	68fb      	ldr	r3, [r7, #12]
 801d296:	689b      	ldr	r3, [r3, #8]
 801d298:	68fa      	ldr	r2, [r7, #12]
 801d29a:	605a      	str	r2, [r3, #4]
    }
    item->prev = NULL;
 801d29c:	68fb      	ldr	r3, [r7, #12]
 801d29e:	2200      	movs	r2, #0
 801d2a0:	605a      	str	r2, [r3, #4]
    mem->allocateditems = item;
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	68fa      	ldr	r2, [r7, #12]
 801d2a6:	601a      	str	r2, [r3, #0]
    item->is_dynamic_memory = true;
    item = get_memory(mem);
#endif /* ifdef RMW_UXRCE_ALLOW_DYNAMIC_ALLOCATIONS */
  }

  UXR_UNLOCK(&mem->mutex);
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	3310      	adds	r3, #16
 801d2ac:	4618      	mov	r0, r3
 801d2ae:	f7f6 fccd 	bl	8013c4c <uxr_unlock>

  return item;
 801d2b2:	68fb      	ldr	r3, [r7, #12]
}
 801d2b4:	4618      	mov	r0, r3
 801d2b6:	3710      	adds	r7, #16
 801d2b8:	46bd      	mov	sp, r7
 801d2ba:	bd80      	pop	{r7, pc}

0801d2bc <put_memory>:

void put_memory(
  rmw_uxrce_mempool_t * mem,
  rmw_uxrce_mempool_item_t * item)
{
 801d2bc:	b580      	push	{r7, lr}
 801d2be:	b082      	sub	sp, #8
 801d2c0:	af00      	add	r7, sp, #0
 801d2c2:	6078      	str	r0, [r7, #4]
 801d2c4:	6039      	str	r1, [r7, #0]
  UXR_LOCK(&mem->mutex);
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	3310      	adds	r3, #16
 801d2ca:	4618      	mov	r0, r3
 801d2cc:	f7f6 fcaf 	bl	8013c2e <uxr_lock>

  // Gets item from allocated pool
  if (item->prev) {
 801d2d0:	683b      	ldr	r3, [r7, #0]
 801d2d2:	685b      	ldr	r3, [r3, #4]
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	d004      	beq.n	801d2e2 <put_memory+0x26>
    item->prev->next = item->next;
 801d2d8:	683b      	ldr	r3, [r7, #0]
 801d2da:	685b      	ldr	r3, [r3, #4]
 801d2dc:	683a      	ldr	r2, [r7, #0]
 801d2de:	6892      	ldr	r2, [r2, #8]
 801d2e0:	609a      	str	r2, [r3, #8]
  }
  if (item->next) {
 801d2e2:	683b      	ldr	r3, [r7, #0]
 801d2e4:	689b      	ldr	r3, [r3, #8]
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	d004      	beq.n	801d2f4 <put_memory+0x38>
    item->next->prev = item->prev;
 801d2ea:	683b      	ldr	r3, [r7, #0]
 801d2ec:	689b      	ldr	r3, [r3, #8]
 801d2ee:	683a      	ldr	r2, [r7, #0]
 801d2f0:	6852      	ldr	r2, [r2, #4]
 801d2f2:	605a      	str	r2, [r3, #4]
  }

  if (mem->allocateditems == item) {
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	681b      	ldr	r3, [r3, #0]
 801d2f8:	683a      	ldr	r2, [r7, #0]
 801d2fa:	429a      	cmp	r2, r3
 801d2fc:	d103      	bne.n	801d306 <put_memory+0x4a>
    mem->allocateditems = item->next;
 801d2fe:	683b      	ldr	r3, [r7, #0]
 801d300:	689a      	ldr	r2, [r3, #8]
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	601a      	str	r2, [r3, #0]
    return;
  }
#endif /* ifdef RMW_UXRCE_ALLOW_DYNAMIC_ALLOCATIONS */

  // Puts item in free pool
  item->next = mem->freeitems;
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	685a      	ldr	r2, [r3, #4]
 801d30a:	683b      	ldr	r3, [r7, #0]
 801d30c:	609a      	str	r2, [r3, #8]
  if (item->next) {
 801d30e:	683b      	ldr	r3, [r7, #0]
 801d310:	689b      	ldr	r3, [r3, #8]
 801d312:	2b00      	cmp	r3, #0
 801d314:	d003      	beq.n	801d31e <put_memory+0x62>
    item->next->prev = item;
 801d316:	683b      	ldr	r3, [r7, #0]
 801d318:	689b      	ldr	r3, [r3, #8]
 801d31a:	683a      	ldr	r2, [r7, #0]
 801d31c:	605a      	str	r2, [r3, #4]
  }
  item->prev = NULL;
 801d31e:	683b      	ldr	r3, [r7, #0]
 801d320:	2200      	movs	r2, #0
 801d322:	605a      	str	r2, [r3, #4]
  mem->freeitems = item;
 801d324:	687b      	ldr	r3, [r7, #4]
 801d326:	683a      	ldr	r2, [r7, #0]
 801d328:	605a      	str	r2, [r3, #4]

  UXR_UNLOCK(&mem->mutex);
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	3310      	adds	r3, #16
 801d32e:	4618      	mov	r0, r3
 801d330:	f7f6 fc8c 	bl	8013c4c <uxr_unlock>
}
 801d334:	bf00      	nop
 801d336:	3708      	adds	r7, #8
 801d338:	46bd      	mov	sp, r7
 801d33a:	bd80      	pop	{r7, pc}

0801d33c <rmw_destroy_client>:

rmw_ret_t
rmw_destroy_client(
  rmw_node_t * node,
  rmw_client_t * client)
{
 801d33c:	b580      	push	{r7, lr}
 801d33e:	b086      	sub	sp, #24
 801d340:	af00      	add	r7, sp, #0
 801d342:	6078      	str	r0, [r7, #4]
 801d344:	6039      	str	r1, [r7, #0]
  rmw_ret_t result_ret = RMW_RET_OK;
 801d346:	2300      	movs	r3, #0
 801d348:	617b      	str	r3, [r7, #20]
  if (!node) {
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	d102      	bne.n	801d356 <rmw_destroy_client+0x1a>
    RMW_UROS_TRACE_MESSAGE("node handle is null")
    result_ret = RMW_RET_ERROR;
 801d350:	2301      	movs	r3, #1
 801d352:	617b      	str	r3, [r7, #20]
 801d354:	e05d      	b.n	801d412 <rmw_destroy_client+0xd6>
  } else if (!is_uxrce_rmw_identifier_valid(node->implementation_identifier)) {
 801d356:	687b      	ldr	r3, [r7, #4]
 801d358:	681b      	ldr	r3, [r3, #0]
 801d35a:	4618      	mov	r0, r3
 801d35c:	f003 fa66 	bl	802082c <is_uxrce_rmw_identifier_valid>
 801d360:	4603      	mov	r3, r0
 801d362:	f083 0301 	eor.w	r3, r3, #1
 801d366:	b2db      	uxtb	r3, r3
 801d368:	2b00      	cmp	r3, #0
 801d36a:	d002      	beq.n	801d372 <rmw_destroy_client+0x36>
    RMW_UROS_TRACE_MESSAGE("node handle not from this implementation")
    result_ret = RMW_RET_ERROR;
 801d36c:	2301      	movs	r3, #1
 801d36e:	617b      	str	r3, [r7, #20]
 801d370:	e04f      	b.n	801d412 <rmw_destroy_client+0xd6>
  } else if (!node->data) {
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	685b      	ldr	r3, [r3, #4]
 801d376:	2b00      	cmp	r3, #0
 801d378:	d102      	bne.n	801d380 <rmw_destroy_client+0x44>
    RMW_UROS_TRACE_MESSAGE("node imp is null")
    result_ret = RMW_RET_ERROR;
 801d37a:	2301      	movs	r3, #1
 801d37c:	617b      	str	r3, [r7, #20]
 801d37e:	e048      	b.n	801d412 <rmw_destroy_client+0xd6>
  } else if (!client) {
 801d380:	683b      	ldr	r3, [r7, #0]
 801d382:	2b00      	cmp	r3, #0
 801d384:	d102      	bne.n	801d38c <rmw_destroy_client+0x50>
    RMW_UROS_TRACE_MESSAGE("client handle is null")
    result_ret = RMW_RET_ERROR;
 801d386:	2301      	movs	r3, #1
 801d388:	617b      	str	r3, [r7, #20]
 801d38a:	e042      	b.n	801d412 <rmw_destroy_client+0xd6>
  } else if (!is_uxrce_rmw_identifier_valid(client->implementation_identifier)) {
 801d38c:	683b      	ldr	r3, [r7, #0]
 801d38e:	681b      	ldr	r3, [r3, #0]
 801d390:	4618      	mov	r0, r3
 801d392:	f003 fa4b 	bl	802082c <is_uxrce_rmw_identifier_valid>
 801d396:	4603      	mov	r3, r0
 801d398:	f083 0301 	eor.w	r3, r3, #1
 801d39c:	b2db      	uxtb	r3, r3
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	d002      	beq.n	801d3a8 <rmw_destroy_client+0x6c>
    RMW_UROS_TRACE_MESSAGE("client handle not from this implementation")
    result_ret = RMW_RET_ERROR;
 801d3a2:	2301      	movs	r3, #1
 801d3a4:	617b      	str	r3, [r7, #20]
 801d3a6:	e034      	b.n	801d412 <rmw_destroy_client+0xd6>
  } else if (!client->data) {
 801d3a8:	683b      	ldr	r3, [r7, #0]
 801d3aa:	685b      	ldr	r3, [r3, #4]
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	d102      	bne.n	801d3b6 <rmw_destroy_client+0x7a>
    RMW_UROS_TRACE_MESSAGE("client imp is null")
    result_ret = RMW_RET_ERROR;
 801d3b0:	2301      	movs	r3, #1
 801d3b2:	617b      	str	r3, [r7, #20]
 801d3b4:	e02d      	b.n	801d412 <rmw_destroy_client+0xd6>
  } else {
    rmw_uxrce_node_t * custom_node = (rmw_uxrce_node_t *)node->data;
 801d3b6:	687b      	ldr	r3, [r7, #4]
 801d3b8:	685b      	ldr	r3, [r3, #4]
 801d3ba:	613b      	str	r3, [r7, #16]
    rmw_uxrce_client_t * custom_client = (rmw_uxrce_client_t *)client->data;
 801d3bc:	683b      	ldr	r3, [r7, #0]
 801d3be:	685b      	ldr	r3, [r3, #4]
 801d3c0:	60fb      	str	r3, [r7, #12]
    uint16_t delete_client =
      uxr_buffer_delete_entity(
      &custom_node->context->session,
 801d3c2:	693b      	ldr	r3, [r7, #16]
 801d3c4:	691b      	ldr	r3, [r3, #16]
      uxr_buffer_delete_entity(
 801d3c6:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
      *custom_node->context->destroy_stream,
 801d3ca:	693b      	ldr	r3, [r7, #16]
 801d3cc:	691b      	ldr	r3, [r3, #16]
 801d3ce:	f8d3 2da0 	ldr.w	r2, [r3, #3488]	; 0xda0
      uxr_buffer_delete_entity(
 801d3d2:	68fb      	ldr	r3, [r7, #12]
 801d3d4:	6812      	ldr	r2, [r2, #0]
 801d3d6:	4611      	mov	r1, r2
 801d3d8:	691a      	ldr	r2, [r3, #16]
 801d3da:	f7f1 fd83 	bl	800eee4 <uxr_buffer_delete_entity>
 801d3de:	4603      	mov	r3, r0
 801d3e0:	817b      	strh	r3, [r7, #10]
      custom_client->client_id);

    if (!run_xrce_session(
 801d3e2:	693b      	ldr	r3, [r7, #16]
 801d3e4:	6918      	ldr	r0, [r3, #16]
        custom_node->context, custom_node->context->destroy_stream, delete_client,
 801d3e6:	693b      	ldr	r3, [r7, #16]
 801d3e8:	691b      	ldr	r3, [r3, #16]
    if (!run_xrce_session(
 801d3ea:	f8d3 1da0 	ldr.w	r1, [r3, #3488]	; 0xda0
        custom_node->context->destroy_timeout))
 801d3ee:	693b      	ldr	r3, [r7, #16]
 801d3f0:	691b      	ldr	r3, [r3, #16]
    if (!run_xrce_session(
 801d3f2:	f8d3 3da8 	ldr.w	r3, [r3, #3496]	; 0xda8
 801d3f6:	897a      	ldrh	r2, [r7, #10]
 801d3f8:	f002 fff8 	bl	80203ec <run_xrce_session>
 801d3fc:	4603      	mov	r3, r0
 801d3fe:	f083 0301 	eor.w	r3, r3, #1
 801d402:	b2db      	uxtb	r3, r3
 801d404:	2b00      	cmp	r3, #0
 801d406:	d001      	beq.n	801d40c <rmw_destroy_client+0xd0>
    {
      result_ret = RMW_RET_TIMEOUT;
 801d408:	2302      	movs	r3, #2
 801d40a:	617b      	str	r3, [r7, #20]
    }
    rmw_uxrce_fini_client_memory(client);
 801d40c:	6838      	ldr	r0, [r7, #0]
 801d40e:	f002 fe3b 	bl	8020088 <rmw_uxrce_fini_client_memory>
  }

  return result_ret;
 801d412:	697b      	ldr	r3, [r7, #20]
}
 801d414:	4618      	mov	r0, r3
 801d416:	3718      	adds	r7, #24
 801d418:	46bd      	mov	sp, r7
 801d41a:	bd80      	pop	{r7, pc}

0801d41c <rmw_get_implementation_identifier>:
#include "./rmw_microros_internal/identifiers.h"
#include "./rmw_microros_internal/utils.h"

const char *
rmw_get_implementation_identifier()
{
 801d41c:	b480      	push	{r7}
 801d41e:	af00      	add	r7, sp, #0
  return eprosima_microxrcedds_identifier;
 801d420:	4b03      	ldr	r3, [pc, #12]	; (801d430 <rmw_get_implementation_identifier+0x14>)
 801d422:	681b      	ldr	r3, [r3, #0]
}
 801d424:	4618      	mov	r0, r3
 801d426:	46bd      	mov	sp, r7
 801d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d42c:	4770      	bx	lr
 801d42e:	bf00      	nop
 801d430:	08027434 	.word	0x08027434

0801d434 <rmw_graph_init>:
#include "./rmw_microros_internal/utils.h"

rmw_ret_t rmw_graph_init(
  rmw_context_impl_t * context,
  rmw_graph_info_t * graph_info)
{
 801d434:	b590      	push	{r4, r7, lr}
 801d436:	b0a9      	sub	sp, #164	; 0xa4
 801d438:	af02      	add	r7, sp, #8
 801d43a:	6078      	str	r0, [r7, #4]
 801d43c:	6039      	str	r1, [r7, #0]
  rmw_ret_t ret = RMW_RET_OK;
 801d43e:	2300      	movs	r3, #0
 801d440:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

  if (NULL == &context->session) {
 801d444:	687b      	ldr	r3, [r7, #4]
 801d446:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	d101      	bne.n	801d452 <rmw_graph_init+0x1e>
    //RMW_UROS_TRACE_MESSAGE("Cannot initializate graph context without a XRCE session");//-by srliu
    return RMW_RET_INVALID_ARGUMENT;
 801d44e:	230b      	movs	r3, #11
 801d450:	e139      	b.n	801d6c6 <rmw_graph_init+0x292>
  }

  // Init graph_info structure
  graph_info->initialized = false;
 801d452:	683b      	ldr	r3, [r7, #0]
 801d454:	2200      	movs	r2, #0
 801d456:	701a      	strb	r2, [r3, #0]
  graph_info->has_changed = false;
 801d458:	683b      	ldr	r3, [r7, #0]
 801d45a:	2200      	movs	r2, #0
 801d45c:	705a      	strb	r2, [r3, #1]
  graph_info->context = context;
 801d45e:	683b      	ldr	r3, [r7, #0]
 801d460:	687a      	ldr	r2, [r7, #4]
 801d462:	605a      	str	r2, [r3, #4]

  // Create micro-ROS graph participant
  graph_info->participant_id =
    uxr_object_id(context->id_participant++, UXR_PARTICIPANT_ID);
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d46a:	f8b3 3fac 	ldrh.w	r3, [r3, #4012]	; 0xfac
 801d46e:	1c5a      	adds	r2, r3, #1
 801d470:	b291      	uxth	r1, r2
 801d472:	687a      	ldr	r2, [r7, #4]
 801d474:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801d478:	f8a2 1fac 	strh.w	r1, [r2, #4012]	; 0xfac
 801d47c:	683c      	ldr	r4, [r7, #0]
 801d47e:	2101      	movs	r1, #1
 801d480:	4618      	mov	r0, r3
 801d482:	f7f2 fb5d 	bl	800fb40 <uxr_object_id>
 801d486:	4603      	mov	r3, r0
 801d488:	60a3      	str	r3, [r4, #8]
  size_t microros_domain_id = 0;  // TODO(jamoralp): shall this Domain ID be configurabe, user wise?
 801d48a:	2300      	movs	r3, #0
 801d48c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const char * graph_participant_name = "microros_graph";
 801d490:	4b8f      	ldr	r3, [pc, #572]	; (801d6d0 <rmw_graph_init+0x29c>)
 801d492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  uint16_t participant_req = uxr_buffer_create_participant_bin(
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
    &context->session,
    *context->creation_stream,
 801d49c:	687b      	ldr	r3, [r7, #4]
 801d49e:	f8d3 3d9c 	ldr.w	r3, [r3, #3484]	; 0xd9c
  uint16_t participant_req = uxr_buffer_create_participant_bin(
 801d4a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801d4a6:	b294      	uxth	r4, r2
 801d4a8:	683a      	ldr	r2, [r7, #0]
 801d4aa:	2106      	movs	r1, #6
 801d4ac:	9101      	str	r1, [sp, #4]
 801d4ae:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801d4b2:	9100      	str	r1, [sp, #0]
 801d4b4:	681b      	ldr	r3, [r3, #0]
 801d4b6:	4619      	mov	r1, r3
 801d4b8:	4623      	mov	r3, r4
 801d4ba:	6892      	ldr	r2, [r2, #8]
 801d4bc:	f7f1 fdd6 	bl	800f06c <uxr_buffer_create_participant_bin>
 801d4c0:	4603      	mov	r3, r0
 801d4c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    graph_participant_name,
    UXR_REPLACE | UXR_REUSE);

  // Set graph subscription QoS policies
  // TODO(jamoralp): most of these QoS are not even being used.
  const rmw_qos_profile_t graph_subscription_qos_policies =
 801d4c6:	4a83      	ldr	r2, [pc, #524]	; (801d6d4 <rmw_graph_init+0x2a0>)
 801d4c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d4cc:	4611      	mov	r1, r2
 801d4ce:	2250      	movs	r2, #80	; 0x50
 801d4d0:	4618      	mov	r0, r3
 801d4d2:	f003 fbf5 	bl	8020cc0 <memcpy>
    RMW_QOS_LIVELINESS_LEASE_DURATION_DEFAULT,
    true
  };

  // Create graph subscriber requests
  graph_info->subscriber_id = uxr_object_id(context->id_subscriber++, UXR_SUBSCRIBER_ID);
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d4dc:	f8b3 3fb4 	ldrh.w	r3, [r3, #4020]	; 0xfb4
 801d4e0:	1c5a      	adds	r2, r3, #1
 801d4e2:	b291      	uxth	r1, r2
 801d4e4:	687a      	ldr	r2, [r7, #4]
 801d4e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801d4ea:	f8a2 1fb4 	strh.w	r1, [r2, #4020]	; 0xfb4
 801d4ee:	683c      	ldr	r4, [r7, #0]
 801d4f0:	2104      	movs	r1, #4
 801d4f2:	4618      	mov	r0, r3
 801d4f4:	f7f2 fb24 	bl	800fb40 <uxr_object_id>
 801d4f8:	4603      	mov	r3, r0
 801d4fa:	60e3      	str	r3, [r4, #12]
  char subscriber_name[20];
  generate_name(&graph_info->subscriber_id, subscriber_name, sizeof(subscriber_name));
 801d4fc:	683b      	ldr	r3, [r7, #0]
 801d4fe:	330c      	adds	r3, #12
 801d500:	f107 011c 	add.w	r1, r7, #28
 801d504:	2214      	movs	r2, #20
 801d506:	4618      	mov	r0, r3
 801d508:	f002 ffe6 	bl	80204d8 <generate_name>
  if (!build_subscriber_xml(
 801d50c:	f107 031c 	add.w	r3, r7, #28
 801d510:	2264      	movs	r2, #100	; 0x64
 801d512:	4971      	ldr	r1, [pc, #452]	; (801d6d8 <rmw_graph_init+0x2a4>)
 801d514:	4618      	mov	r0, r3
 801d516:	f002 ffcf 	bl	80204b8 <build_subscriber_xml>
 801d51a:	4603      	mov	r3, r0
 801d51c:	2b00      	cmp	r3, #0
 801d51e:	d103      	bne.n	801d528 <rmw_graph_init+0xf4>
      subscriber_name, rmw_uxrce_entity_naming_buffer,
      sizeof(rmw_uxrce_entity_naming_buffer)))
  {
    //RMW_UROS_TRACE_MESSAGE("Failed to generate xml request for graph subscriber creation"); //-by srliu
    ret = RMW_RET_ERROR;
 801d520:	2301      	movs	r3, #1
 801d522:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    goto end;
 801d526:	e0cc      	b.n	801d6c2 <rmw_graph_init+0x28e>
  }

  uint16_t subscriber_req = uxr_buffer_create_subscriber_xml(
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
    &context->session, *context->creation_stream, graph_info->subscriber_id,
 801d52e:	687b      	ldr	r3, [r7, #4]
 801d530:	f8d3 1d9c 	ldr.w	r1, [r3, #3484]	; 0xd9c
  uint16_t subscriber_req = uxr_buffer_create_subscriber_xml(
 801d534:	683b      	ldr	r3, [r7, #0]
 801d536:	683a      	ldr	r2, [r7, #0]
 801d538:	2406      	movs	r4, #6
 801d53a:	9401      	str	r4, [sp, #4]
 801d53c:	4c66      	ldr	r4, [pc, #408]	; (801d6d8 <rmw_graph_init+0x2a4>)
 801d53e:	9400      	str	r4, [sp, #0]
 801d540:	680c      	ldr	r4, [r1, #0]
 801d542:	4621      	mov	r1, r4
 801d544:	689b      	ldr	r3, [r3, #8]
 801d546:	68d2      	ldr	r2, [r2, #12]
 801d548:	f7f2 fa37 	bl	800f9ba <uxr_buffer_create_subscriber_xml>
 801d54c:	4603      	mov	r3, r0
 801d54e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    graph_info->participant_id, rmw_uxrce_entity_naming_buffer, UXR_REPLACE | UXR_REUSE);

  graph_info->datareader_id = uxr_object_id(context->id_datareader++, UXR_DATAREADER_ID);
 801d552:	687b      	ldr	r3, [r7, #4]
 801d554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d558:	f8b3 3fb6 	ldrh.w	r3, [r3, #4022]	; 0xfb6
 801d55c:	1c5a      	adds	r2, r3, #1
 801d55e:	b291      	uxth	r1, r2
 801d560:	687a      	ldr	r2, [r7, #4]
 801d562:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801d566:	f8a2 1fb6 	strh.w	r1, [r2, #4022]	; 0xfb6
 801d56a:	683c      	ldr	r4, [r7, #0]
 801d56c:	2106      	movs	r1, #6
 801d56e:	4618      	mov	r0, r3
 801d570:	f7f2 fae6 	bl	800fb40 <uxr_object_id>
 801d574:	4603      	mov	r3, r0
 801d576:	6163      	str	r3, [r4, #20]
  const char * graph_topic_name = "ros_to_microros_graph";
 801d578:	4b58      	ldr	r3, [pc, #352]	; (801d6dc <rmw_graph_init+0x2a8>)
 801d57a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  //graph_info->graph_type_support =
  //  rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__micro_ros_msgs__msg__Graph(); //NOLINT

  // Create graph topic request
  graph_info->topic_id = uxr_object_id(context->id_topic++, UXR_TOPIC_ID);
 801d57e:	687b      	ldr	r3, [r7, #4]
 801d580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d584:	f8b3 3fae 	ldrh.w	r3, [r3, #4014]	; 0xfae
 801d588:	1c5a      	adds	r2, r3, #1
 801d58a:	b291      	uxth	r1, r2
 801d58c:	687a      	ldr	r2, [r7, #4]
 801d58e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801d592:	f8a2 1fae 	strh.w	r1, [r2, #4014]	; 0xfae
 801d596:	683c      	ldr	r4, [r7, #0]
 801d598:	2102      	movs	r1, #2
 801d59a:	4618      	mov	r0, r3
 801d59c:	f7f2 fad0 	bl	800fb40 <uxr_object_id>
 801d5a0:	4603      	mov	r3, r0
 801d5a2:	6123      	str	r3, [r4, #16]
  if (!build_topic_xml(
      graph_topic_name,
      (message_type_support_callbacks_t *)(graph_info->graph_type_support->data),
 801d5a4:	683b      	ldr	r3, [r7, #0]
 801d5a6:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 801d5aa:	6859      	ldr	r1, [r3, #4]
  if (!build_topic_xml(
 801d5ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801d5b0:	2364      	movs	r3, #100	; 0x64
 801d5b2:	9300      	str	r3, [sp, #0]
 801d5b4:	4b48      	ldr	r3, [pc, #288]	; (801d6d8 <rmw_graph_init+0x2a4>)
 801d5b6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801d5ba:	f003 f843 	bl	8020644 <build_topic_xml>
 801d5be:	4603      	mov	r3, r0
 801d5c0:	2b00      	cmp	r3, #0
 801d5c2:	d103      	bne.n	801d5cc <rmw_graph_init+0x198>
      &graph_subscription_qos_policies, rmw_uxrce_entity_naming_buffer,
      sizeof(rmw_uxrce_entity_naming_buffer)))
  {
    //RMW_UROS_TRACE_MESSAGE("Failed to generate xml request for graph topic creation");//-by srliu
    ret = RMW_RET_ERROR;
 801d5c4:	2301      	movs	r3, #1
 801d5c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    goto end;
 801d5ca:	e07a      	b.n	801d6c2 <rmw_graph_init+0x28e>
  }

  uint16_t topic_req = uxr_buffer_create_topic_xml(
 801d5cc:	687b      	ldr	r3, [r7, #4]
 801d5ce:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
    &context->session, *context->creation_stream, graph_info->topic_id,
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	f8d3 1d9c 	ldr.w	r1, [r3, #3484]	; 0xd9c
  uint16_t topic_req = uxr_buffer_create_topic_xml(
 801d5d8:	683b      	ldr	r3, [r7, #0]
 801d5da:	683a      	ldr	r2, [r7, #0]
 801d5dc:	2406      	movs	r4, #6
 801d5de:	9401      	str	r4, [sp, #4]
 801d5e0:	4c3d      	ldr	r4, [pc, #244]	; (801d6d8 <rmw_graph_init+0x2a4>)
 801d5e2:	9400      	str	r4, [sp, #0]
 801d5e4:	680c      	ldr	r4, [r1, #0]
 801d5e6:	4621      	mov	r1, r4
 801d5e8:	689b      	ldr	r3, [r3, #8]
 801d5ea:	6912      	ldr	r2, [r2, #16]
 801d5ec:	f7f2 f99c 	bl	800f928 <uxr_buffer_create_topic_xml>
 801d5f0:	4603      	mov	r3, r0
 801d5f2:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    graph_info->participant_id, rmw_uxrce_entity_naming_buffer, UXR_REPLACE | UXR_REUSE);

  // Create graph datareader request
  if (!build_datareader_xml(
      graph_topic_name,
      (message_type_support_callbacks_t *)(graph_info->graph_type_support->data),
 801d5f6:	683b      	ldr	r3, [r7, #0]
 801d5f8:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 801d5fc:	6859      	ldr	r1, [r3, #4]
  if (!build_datareader_xml(
 801d5fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801d602:	2364      	movs	r3, #100	; 0x64
 801d604:	9300      	str	r3, [sp, #0]
 801d606:	4b34      	ldr	r3, [pc, #208]	; (801d6d8 <rmw_graph_init+0x2a4>)
 801d608:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801d60c:	f003 f8f6 	bl	80207fc <build_datareader_xml>
 801d610:	4603      	mov	r3, r0
 801d612:	2b00      	cmp	r3, #0
 801d614:	d103      	bne.n	801d61e <rmw_graph_init+0x1ea>
      &graph_subscription_qos_policies, rmw_uxrce_entity_naming_buffer,
      sizeof(rmw_uxrce_entity_naming_buffer)))
  {
    //RMW_UROS_TRACE_MESSAGE("Failed to generate xml request for graph datareader creation");//-by srliu
    ret = RMW_RET_ERROR;
 801d616:	2301      	movs	r3, #1
 801d618:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    goto end;
 801d61c:	e051      	b.n	801d6c2 <rmw_graph_init+0x28e>
  }

  uint16_t datareader_req = uxr_buffer_create_datareader_xml(
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
    &context->session, *context->creation_stream, graph_info->datareader_id,
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	f8d3 1d9c 	ldr.w	r1, [r3, #3484]	; 0xd9c
  uint16_t datareader_req = uxr_buffer_create_datareader_xml(
 801d62a:	683b      	ldr	r3, [r7, #0]
 801d62c:	683a      	ldr	r2, [r7, #0]
 801d62e:	2406      	movs	r4, #6
 801d630:	9401      	str	r4, [sp, #4]
 801d632:	4c29      	ldr	r4, [pc, #164]	; (801d6d8 <rmw_graph_init+0x2a4>)
 801d634:	9400      	str	r4, [sp, #0]
 801d636:	680c      	ldr	r4, [r1, #0]
 801d638:	4621      	mov	r1, r4
 801d63a:	68db      	ldr	r3, [r3, #12]
 801d63c:	6952      	ldr	r2, [r2, #20]
 801d63e:	f7f2 fa05 	bl	800fa4c <uxr_buffer_create_datareader_xml>
 801d642:	4603      	mov	r3, r0
 801d644:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    graph_info->subscriber_id, rmw_uxrce_entity_naming_buffer, UXR_REPLACE | UXR_REUSE);

  // Run session
  uint16_t requests[] = {
 801d648:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801d64c:	82bb      	strh	r3, [r7, #20]
 801d64e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 801d652:	82fb      	strh	r3, [r7, #22]
 801d654:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 801d658:	833b      	strh	r3, [r7, #24]
 801d65a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 801d65e:	837b      	strh	r3, [r7, #26]
    participant_req, subscriber_req, topic_req, datareader_req
  };
  uint8_t status[sizeof(requests) / 2];

  if (!uxr_run_session_until_all_status(
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 801d666:	f107 0310 	add.w	r3, r7, #16
 801d66a:	f107 0214 	add.w	r2, r7, #20
 801d66e:	2104      	movs	r1, #4
 801d670:	9100      	str	r1, [sp, #0]
 801d672:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d676:	f7f2 ff83 	bl	8010580 <uxr_run_session_until_all_status>
 801d67a:	4603      	mov	r3, r0
 801d67c:	f083 0301 	eor.w	r3, r3, #1
 801d680:	b2db      	uxtb	r3, r3
 801d682:	2b00      	cmp	r3, #0
 801d684:	d003      	beq.n	801d68e <rmw_graph_init+0x25a>
      &context->session, 1000, requests, status, sizeof(status)))
  {
    //RMW_UROS_TRACE_MESSAGE("Issues creating Micro XRCE-DDS graph related entities");//-by srliu
    ret = RMW_RET_ERROR;
 801d686:	2301      	movs	r3, #1
 801d688:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    goto end;
 801d68c:	e019      	b.n	801d6c2 <rmw_graph_init+0x28e>
  }

  // Request data from topic: set delivery flow
  uxrDeliveryControl delivery_control;
  delivery_control.max_samples = UXR_MAX_SAMPLES_UNLIMITED;
 801d68e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d692:	813b      	strh	r3, [r7, #8]
  delivery_control.min_pace_period = 0;
 801d694:	2300      	movs	r3, #0
 801d696:	81fb      	strh	r3, [r7, #14]
  delivery_control.max_elapsed_time = UXR_MAX_ELAPSED_TIME_UNLIMITED;
 801d698:	2300      	movs	r3, #0
 801d69a:	817b      	strh	r3, [r7, #10]
  delivery_control.max_bytes_per_second = UXR_MAX_BYTES_PER_SECOND_UNLIMITED;
 801d69c:	2300      	movs	r3, #0
 801d69e:	81bb      	strh	r3, [r7, #12]

  uxr_buffer_request_data(
 801d6a0:	687b      	ldr	r3, [r7, #4]
 801d6a2:	f503 743e 	add.w	r4, r3, #760	; 0x2f8
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	683a      	ldr	r2, [r7, #0]
 801d6aa:	6879      	ldr	r1, [r7, #4]
 801d6ac:	f107 0008 	add.w	r0, r7, #8
 801d6b0:	9000      	str	r0, [sp, #0]
 801d6b2:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	; 0xd8c
 801d6b6:	6952      	ldr	r2, [r2, #20]
 801d6b8:	f8d1 1d90 	ldr.w	r1, [r1, #3472]	; 0xd90
 801d6bc:	4620      	mov	r0, r4
 801d6be:	f7f2 faa0 	bl	800fc02 <uxr_buffer_request_data>
    &context->session,
    context->reliable_output, graph_info->datareader_id,
    context->reliable_input, &delivery_control);

end:
  return ret;
 801d6c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 801d6c6:	4618      	mov	r0, r3
 801d6c8:	379c      	adds	r7, #156	; 0x9c
 801d6ca:	46bd      	mov	sp, r7
 801d6cc:	bd90      	pop	{r4, r7, pc}
 801d6ce:	bf00      	nop
 801d6d0:	08026eb8 	.word	0x08026eb8
 801d6d4:	08026ee0 	.word	0x08026ee0
 801d6d8:	2000e844 	.word	0x2000e844
 801d6dc:	08026ec8 	.word	0x08026ec8

0801d6e0 <rmw_create_guard_condition>:
#include "./rmw_microros_internal/error_handling_internal.h"

rmw_guard_condition_t *
rmw_create_guard_condition(
  rmw_context_t * context)
{
 801d6e0:	b580      	push	{r7, lr}
 801d6e2:	b084      	sub	sp, #16
 801d6e4:	af00      	add	r7, sp, #0
 801d6e6:	6078      	str	r0, [r7, #4]
  (void)context;

  rmw_uxrce_mempool_item_t * memory_node = get_memory(&guard_condition_memory);
 801d6e8:	480f      	ldr	r0, [pc, #60]	; (801d728 <rmw_create_guard_condition+0x48>)
 801d6ea:	f7ff fdab 	bl	801d244 <get_memory>
 801d6ee:	60f8      	str	r0, [r7, #12]
  if (!memory_node) {
 801d6f0:	68fb      	ldr	r3, [r7, #12]
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	d101      	bne.n	801d6fa <rmw_create_guard_condition+0x1a>
    RMW_UROS_TRACE_MESSAGE("Not available memory node")
    return NULL;
 801d6f6:	2300      	movs	r3, #0
 801d6f8:	e012      	b.n	801d720 <rmw_create_guard_condition+0x40>
  }
  rmw_uxrce_guard_condition_t * aux_guard_condition =
 801d6fa:	68fb      	ldr	r3, [r7, #12]
 801d6fc:	68db      	ldr	r3, [r3, #12]
 801d6fe:	60bb      	str	r3, [r7, #8]
    (rmw_uxrce_guard_condition_t *)memory_node->data;
  aux_guard_condition->hasTriggered = false;
 801d700:	68bb      	ldr	r3, [r7, #8]
 801d702:	2200      	movs	r2, #0
 801d704:	741a      	strb	r2, [r3, #16]
  aux_guard_condition->rmw_guard_condition.context = context;
 801d706:	68bb      	ldr	r3, [r7, #8]
 801d708:	687a      	ldr	r2, [r7, #4]
 801d70a:	61da      	str	r2, [r3, #28]
  aux_guard_condition->rmw_guard_condition.implementation_identifier =
    rmw_get_implementation_identifier();
 801d70c:	f7ff fe86 	bl	801d41c <rmw_get_implementation_identifier>
 801d710:	4602      	mov	r2, r0
  aux_guard_condition->rmw_guard_condition.implementation_identifier =
 801d712:	68bb      	ldr	r3, [r7, #8]
 801d714:	615a      	str	r2, [r3, #20]
  aux_guard_condition->rmw_guard_condition.data = aux_guard_condition;
 801d716:	68bb      	ldr	r3, [r7, #8]
 801d718:	68ba      	ldr	r2, [r7, #8]
 801d71a:	619a      	str	r2, [r3, #24]

  return &aux_guard_condition->rmw_guard_condition;
 801d71c:	68bb      	ldr	r3, [r7, #8]
 801d71e:	3314      	adds	r3, #20
}
 801d720:	4618      	mov	r0, r3
 801d722:	3710      	adds	r7, #16
 801d724:	46bd      	mov	sp, r7
 801d726:	bd80      	pop	{r7, pc}
 801d728:	20013400 	.word	0x20013400

0801d72c <rmw_destroy_guard_condition>:

rmw_ret_t
rmw_destroy_guard_condition(
  rmw_guard_condition_t * guard_condition)
{
 801d72c:	b580      	push	{r7, lr}
 801d72e:	b084      	sub	sp, #16
 801d730:	af00      	add	r7, sp, #0
 801d732:	6078      	str	r0, [r7, #4]
  rmw_uxrce_mempool_item_t * item = guard_condition_memory.allocateditems;
 801d734:	4b0e      	ldr	r3, [pc, #56]	; (801d770 <rmw_destroy_guard_condition+0x44>)
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	60fb      	str	r3, [r7, #12]

  while (NULL != item) {
 801d73a:	e010      	b.n	801d75e <rmw_destroy_guard_condition+0x32>
    rmw_uxrce_guard_condition_t * aux_guard_condition =
 801d73c:	68fb      	ldr	r3, [r7, #12]
 801d73e:	68db      	ldr	r3, [r3, #12]
 801d740:	60bb      	str	r3, [r7, #8]
      (rmw_uxrce_guard_condition_t *)item->data;
    if (&aux_guard_condition->rmw_guard_condition == guard_condition) {
 801d742:	68bb      	ldr	r3, [r7, #8]
 801d744:	3314      	adds	r3, #20
 801d746:	687a      	ldr	r2, [r7, #4]
 801d748:	429a      	cmp	r2, r3
 801d74a:	d105      	bne.n	801d758 <rmw_destroy_guard_condition+0x2c>
      put_memory(&guard_condition_memory, item);
 801d74c:	68f9      	ldr	r1, [r7, #12]
 801d74e:	4808      	ldr	r0, [pc, #32]	; (801d770 <rmw_destroy_guard_condition+0x44>)
 801d750:	f7ff fdb4 	bl	801d2bc <put_memory>
      return RMW_RET_OK;
 801d754:	2300      	movs	r3, #0
 801d756:	e006      	b.n	801d766 <rmw_destroy_guard_condition+0x3a>
    }
    item = item->next;
 801d758:	68fb      	ldr	r3, [r7, #12]
 801d75a:	689b      	ldr	r3, [r3, #8]
 801d75c:	60fb      	str	r3, [r7, #12]
  while (NULL != item) {
 801d75e:	68fb      	ldr	r3, [r7, #12]
 801d760:	2b00      	cmp	r3, #0
 801d762:	d1eb      	bne.n	801d73c <rmw_destroy_guard_condition+0x10>
  }

  return RMW_RET_ERROR;
 801d764:	2301      	movs	r3, #1
}
 801d766:	4618      	mov	r0, r3
 801d768:	3710      	adds	r7, #16
 801d76a:	46bd      	mov	sp, r7
 801d76c:	bd80      	pop	{r7, pc}
 801d76e:	bf00      	nop
 801d770:	20013400 	.word	0x20013400

0801d774 <rmw_init_options_init>:

rmw_ret_t
rmw_init_options_init(
  rmw_init_options_t * init_options,
  rcutils_allocator_t allocator)
{
 801d774:	b084      	sub	sp, #16
 801d776:	b5b0      	push	{r4, r5, r7, lr}
 801d778:	b084      	sub	sp, #16
 801d77a:	af00      	add	r7, sp, #0
 801d77c:	6078      	str	r0, [r7, #4]
 801d77e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801d782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  RMW_CHECK_ARGUMENT_FOR_NULL(init_options, RMW_RET_INVALID_ARGUMENT);
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	2b00      	cmp	r3, #0
 801d78a:	d101      	bne.n	801d790 <rmw_init_options_init+0x1c>
 801d78c:	230b      	movs	r3, #11
 801d78e:	e06d      	b.n	801d86c <rmw_init_options_init+0xf8>
  RCUTILS_CHECK_ALLOCATOR(&allocator, return RMW_RET_INVALID_ARGUMENT);
 801d790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d794:	4618      	mov	r0, r3
 801d796:	f7fd ffe9 	bl	801b76c <rcutils_allocator_is_valid>
 801d79a:	4603      	mov	r3, r0
 801d79c:	f083 0301 	eor.w	r3, r3, #1
 801d7a0:	b2db      	uxtb	r3, r3
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	d001      	beq.n	801d7aa <rmw_init_options_init+0x36>
 801d7a6:	230b      	movs	r3, #11
 801d7a8:	e060      	b.n	801d86c <rmw_init_options_init+0xf8>

  if (NULL != init_options->implementation_identifier) {
 801d7aa:	687b      	ldr	r3, [r7, #4]
 801d7ac:	689b      	ldr	r3, [r3, #8]
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	d001      	beq.n	801d7b6 <rmw_init_options_init+0x42>
    RMW_UROS_TRACE_MESSAGE("expected zero-initialized init_options")

    return RMW_RET_INVALID_ARGUMENT;
 801d7b2:	230b      	movs	r3, #11
 801d7b4:	e05a      	b.n	801d86c <rmw_init_options_init+0xf8>
  }

  init_options->instance_id = 0;
 801d7b6:	6879      	ldr	r1, [r7, #4]
 801d7b8:	f04f 0200 	mov.w	r2, #0
 801d7bc:	f04f 0300 	mov.w	r3, #0
 801d7c0:	e9c1 2300 	strd	r2, r3, [r1]
  init_options->implementation_identifier = eprosima_microxrcedds_identifier;
 801d7c4:	4b2d      	ldr	r3, [pc, #180]	; (801d87c <rmw_init_options_init+0x108>)
 801d7c6:	681a      	ldr	r2, [r3, #0]
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	609a      	str	r2, [r3, #8]
  init_options->allocator = allocator;
 801d7cc:	687b      	ldr	r3, [r7, #4]
 801d7ce:	f103 0420 	add.w	r4, r3, #32
 801d7d2:	f107 0524 	add.w	r5, r7, #36	; 0x24
 801d7d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d7d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d7da:	682b      	ldr	r3, [r5, #0]
 801d7dc:	6023      	str	r3, [r4, #0]
  init_options->enclave = "/";
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	4a27      	ldr	r2, [pc, #156]	; (801d880 <rmw_init_options_init+0x10c>)
 801d7e2:	61da      	str	r2, [r3, #28]

  // This can be call before rmw_init()
  rmw_uxrce_init_init_options_impl_memory(
 801d7e4:	2203      	movs	r2, #3
 801d7e6:	4927      	ldr	r1, [pc, #156]	; (801d884 <rmw_init_options_init+0x110>)
 801d7e8:	4827      	ldr	r0, [pc, #156]	; (801d888 <rmw_init_options_init+0x114>)
 801d7ea:	f002 fa7f 	bl	801fcec <rmw_uxrce_init_init_options_impl_memory>
    &init_options_memory, custom_init_options,
    RMW_UXRCE_MAX_OPTIONS);

  rmw_uxrce_mempool_item_t * memory_node = get_memory(&init_options_memory);
 801d7ee:	4826      	ldr	r0, [pc, #152]	; (801d888 <rmw_init_options_init+0x114>)
 801d7f0:	f7ff fd28 	bl	801d244 <get_memory>
 801d7f4:	60f8      	str	r0, [r7, #12]
  if (!memory_node) {
 801d7f6:	68fb      	ldr	r3, [r7, #12]
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	d101      	bne.n	801d800 <rmw_init_options_init+0x8c>
    RMW_UROS_TRACE_MESSAGE("Not available memory node")
    return RMW_RET_ERROR;
 801d7fc:	2301      	movs	r3, #1
 801d7fe:	e035      	b.n	801d86c <rmw_init_options_init+0xf8>
  }
  init_options->impl = memory_node->data;
 801d800:	68fb      	ldr	r3, [r7, #12]
 801d802:	68da      	ldr	r2, [r3, #12]
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	635a      	str	r2, [r3, #52]	; 0x34
  } else {
    RMW_UROS_TRACE_MESSAGE("default port configuration overflow")
    return RMW_RET_INVALID_ARGUMENT;
  }
#elif defined(RMW_UXRCE_TRANSPORT_CUSTOM)
  init_options->impl->transport_params.framing = rmw_uxrce_transport_default_params.framing;
 801d808:	687b      	ldr	r3, [r7, #4]
 801d80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d80c:	4a1f      	ldr	r2, [pc, #124]	; (801d88c <rmw_init_options_init+0x118>)
 801d80e:	7812      	ldrb	r2, [r2, #0]
 801d810:	741a      	strb	r2, [r3, #16]
  init_options->impl->transport_params.args = rmw_uxrce_transport_default_params.args;
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d816:	4a1d      	ldr	r2, [pc, #116]	; (801d88c <rmw_init_options_init+0x118>)
 801d818:	6852      	ldr	r2, [r2, #4]
 801d81a:	615a      	str	r2, [r3, #20]
  init_options->impl->transport_params.open_cb = rmw_uxrce_transport_default_params.open_cb;
 801d81c:	687b      	ldr	r3, [r7, #4]
 801d81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d820:	4a1a      	ldr	r2, [pc, #104]	; (801d88c <rmw_init_options_init+0x118>)
 801d822:	6892      	ldr	r2, [r2, #8]
 801d824:	619a      	str	r2, [r3, #24]
  init_options->impl->transport_params.close_cb = rmw_uxrce_transport_default_params.close_cb;
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d82a:	4a18      	ldr	r2, [pc, #96]	; (801d88c <rmw_init_options_init+0x118>)
 801d82c:	68d2      	ldr	r2, [r2, #12]
 801d82e:	61da      	str	r2, [r3, #28]
  init_options->impl->transport_params.write_cb = rmw_uxrce_transport_default_params.write_cb;
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d834:	4a15      	ldr	r2, [pc, #84]	; (801d88c <rmw_init_options_init+0x118>)
 801d836:	6912      	ldr	r2, [r2, #16]
 801d838:	621a      	str	r2, [r3, #32]
  init_options->impl->transport_params.read_cb = rmw_uxrce_transport_default_params.read_cb;
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d83e:	4a13      	ldr	r2, [pc, #76]	; (801d88c <rmw_init_options_init+0x118>)
 801d840:	6952      	ldr	r2, [r2, #20]
 801d842:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* if defined(RMW_UXRCE_TRANSPORT_SERIAL) */

  srand(uxr_nanos());
 801d844:	f7f7 fef2 	bl	801562c <uxr_nanos>
 801d848:	4602      	mov	r2, r0
 801d84a:	460b      	mov	r3, r1
 801d84c:	4613      	mov	r3, r2
 801d84e:	4618      	mov	r0, r3
 801d850:	f004 fb7e 	bl	8021f50 <srand>

  do {
    init_options->impl->transport_params.client_key = rand(); //NOLINT
 801d854:	f004 fbaa 	bl	8021fac <rand>
 801d858:	4602      	mov	r2, r0
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d85e:	629a      	str	r2, [r3, #40]	; 0x28
  } while (init_options->impl->transport_params.client_key == 0);
 801d860:	687b      	ldr	r3, [r7, #4]
 801d862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d866:	2b00      	cmp	r3, #0
 801d868:	d0f4      	beq.n	801d854 <rmw_init_options_init+0xe0>

  return RMW_RET_OK;
 801d86a:	2300      	movs	r3, #0
}
 801d86c:	4618      	mov	r0, r3
 801d86e:	3710      	adds	r7, #16
 801d870:	46bd      	mov	sp, r7
 801d872:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801d876:	b004      	add	sp, #16
 801d878:	4770      	bx	lr
 801d87a:	bf00      	nop
 801d87c:	08027434 	.word	0x08027434
 801d880:	08026f30 	.word	0x08026f30
 801d884:	2001328c 	.word	0x2001328c
 801d888:	20013228 	.word	0x20013228
 801d88c:	2001361c 	.word	0x2001361c

0801d890 <rmw_init_options_copy>:

rmw_ret_t
rmw_init_options_copy(
  const rmw_init_options_t * src,
  rmw_init_options_t * dst)
{
 801d890:	b5b0      	push	{r4, r5, r7, lr}
 801d892:	b086      	sub	sp, #24
 801d894:	af00      	add	r7, sp, #0
 801d896:	6078      	str	r0, [r7, #4]
 801d898:	6039      	str	r1, [r7, #0]
  RMW_CHECK_ARGUMENT_FOR_NULL(src, RMW_RET_INVALID_ARGUMENT);
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	d101      	bne.n	801d8a4 <rmw_init_options_copy+0x14>
 801d8a0:	230b      	movs	r3, #11
 801d8a2:	e040      	b.n	801d926 <rmw_init_options_copy+0x96>
  RMW_CHECK_ARGUMENT_FOR_NULL(dst, RMW_RET_INVALID_ARGUMENT);
 801d8a4:	683b      	ldr	r3, [r7, #0]
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d101      	bne.n	801d8ae <rmw_init_options_copy+0x1e>
 801d8aa:	230b      	movs	r3, #11
 801d8ac:	e03b      	b.n	801d926 <rmw_init_options_copy+0x96>
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	689b      	ldr	r3, [r3, #8]
 801d8b2:	2b00      	cmp	r3, #0
 801d8b4:	d00c      	beq.n	801d8d0 <rmw_init_options_copy+0x40>
 801d8b6:	687b      	ldr	r3, [r7, #4]
 801d8b8:	689b      	ldr	r3, [r3, #8]
 801d8ba:	4a1d      	ldr	r2, [pc, #116]	; (801d930 <rmw_init_options_copy+0xa0>)
 801d8bc:	6812      	ldr	r2, [r2, #0]
 801d8be:	4611      	mov	r1, r2
 801d8c0:	4618      	mov	r0, r3
 801d8c2:	f7e2 fca5 	bl	8000210 <strcmp>
 801d8c6:	4603      	mov	r3, r0
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	d001      	beq.n	801d8d0 <rmw_init_options_copy+0x40>
 801d8cc:	230c      	movs	r3, #12
 801d8ce:	e02a      	b.n	801d926 <rmw_init_options_copy+0x96>
    src->implementation_identifier,
    RMW_RET_INCORRECT_RMW_IMPLEMENTATION);
  if (NULL != dst->implementation_identifier) {
 801d8d0:	683b      	ldr	r3, [r7, #0]
 801d8d2:	689b      	ldr	r3, [r3, #8]
 801d8d4:	2b00      	cmp	r3, #0
 801d8d6:	d001      	beq.n	801d8dc <rmw_init_options_copy+0x4c>
    RMW_UROS_TRACE_MESSAGE("expected zero-initialized dst")

    return RMW_RET_INVALID_ARGUMENT;
 801d8d8:	230b      	movs	r3, #11
 801d8da:	e024      	b.n	801d926 <rmw_init_options_copy+0x96>
  }
  memcpy(dst, src, sizeof(rmw_init_options_t));
 801d8dc:	2238      	movs	r2, #56	; 0x38
 801d8de:	6879      	ldr	r1, [r7, #4]
 801d8e0:	6838      	ldr	r0, [r7, #0]
 801d8e2:	f003 f9ed 	bl	8020cc0 <memcpy>

  rmw_uxrce_mempool_item_t * memory_node = get_memory(&init_options_memory);
 801d8e6:	4813      	ldr	r0, [pc, #76]	; (801d934 <rmw_init_options_copy+0xa4>)
 801d8e8:	f7ff fcac 	bl	801d244 <get_memory>
 801d8ec:	6178      	str	r0, [r7, #20]
  if (!memory_node) {
 801d8ee:	697b      	ldr	r3, [r7, #20]
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	d101      	bne.n	801d8f8 <rmw_init_options_copy+0x68>
    RMW_UROS_TRACE_MESSAGE("Not available memory node")
    return RMW_RET_ERROR;
 801d8f4:	2301      	movs	r3, #1
 801d8f6:	e016      	b.n	801d926 <rmw_init_options_copy+0x96>
  }
  dst->impl = memory_node->data;
 801d8f8:	697b      	ldr	r3, [r7, #20]
 801d8fa:	68da      	ldr	r2, [r3, #12]
 801d8fc:	683b      	ldr	r3, [r7, #0]
 801d8fe:	635a      	str	r2, [r3, #52]	; 0x34

  rmw_uxrce_init_options_impl_t * dst_impl = dst->impl;
 801d900:	683b      	ldr	r3, [r7, #0]
 801d902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d904:	613b      	str	r3, [r7, #16]
  rmw_uxrce_init_options_impl_t * src_impl = src->impl;
 801d906:	687b      	ldr	r3, [r7, #4]
 801d908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d90a:	60fb      	str	r3, [r7, #12]

  dst_impl->transport_params = src_impl->transport_params;
 801d90c:	693a      	ldr	r2, [r7, #16]
 801d90e:	68fb      	ldr	r3, [r7, #12]
 801d910:	f102 0410 	add.w	r4, r2, #16
 801d914:	f103 0510 	add.w	r5, r3, #16
 801d918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d91a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d91c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d920:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  return RMW_RET_OK;
 801d924:	2300      	movs	r3, #0
}
 801d926:	4618      	mov	r0, r3
 801d928:	3718      	adds	r7, #24
 801d92a:	46bd      	mov	sp, r7
 801d92c:	bdb0      	pop	{r4, r5, r7, pc}
 801d92e:	bf00      	nop
 801d930:	08027434 	.word	0x08027434
 801d934:	20013228 	.word	0x20013228

0801d938 <rmw_init_options_fini>:

rmw_ret_t
rmw_init_options_fini(
  rmw_init_options_t * init_options)
{
 801d938:	b5b0      	push	{r4, r5, r7, lr}
 801d93a:	b092      	sub	sp, #72	; 0x48
 801d93c:	af00      	add	r7, sp, #0
 801d93e:	63f8      	str	r0, [r7, #60]	; 0x3c
  RMW_CHECK_ARGUMENT_FOR_NULL(init_options, RMW_RET_INVALID_ARGUMENT);
 801d940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d942:	2b00      	cmp	r3, #0
 801d944:	d101      	bne.n	801d94a <rmw_init_options_fini+0x12>
 801d946:	230b      	movs	r3, #11
 801d948:	e04b      	b.n	801d9e2 <rmw_init_options_fini+0xaa>
  RCUTILS_CHECK_ALLOCATOR(&(init_options->allocator), return RMW_RET_INVALID_ARGUMENT);
 801d94a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d94c:	3320      	adds	r3, #32
 801d94e:	4618      	mov	r0, r3
 801d950:	f7fd ff0c 	bl	801b76c <rcutils_allocator_is_valid>
 801d954:	4603      	mov	r3, r0
 801d956:	f083 0301 	eor.w	r3, r3, #1
 801d95a:	b2db      	uxtb	r3, r3
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	d001      	beq.n	801d964 <rmw_init_options_fini+0x2c>
 801d960:	230b      	movs	r3, #11
 801d962:	e03e      	b.n	801d9e2 <rmw_init_options_fini+0xaa>
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(
 801d964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d966:	689b      	ldr	r3, [r3, #8]
 801d968:	2b00      	cmp	r3, #0
 801d96a:	d00c      	beq.n	801d986 <rmw_init_options_fini+0x4e>
 801d96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d96e:	689b      	ldr	r3, [r3, #8]
 801d970:	4a1e      	ldr	r2, [pc, #120]	; (801d9ec <rmw_init_options_fini+0xb4>)
 801d972:	6812      	ldr	r2, [r2, #0]
 801d974:	4611      	mov	r1, r2
 801d976:	4618      	mov	r0, r3
 801d978:	f7e2 fc4a 	bl	8000210 <strcmp>
 801d97c:	4603      	mov	r3, r0
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d001      	beq.n	801d986 <rmw_init_options_fini+0x4e>
 801d982:	230c      	movs	r3, #12
 801d984:	e02d      	b.n	801d9e2 <rmw_init_options_fini+0xaa>
    init_options->implementation_identifier,
    RMW_RET_INCORRECT_RMW_IMPLEMENTATION);

  rmw_uxrce_mempool_item_t * item = init_options_memory.allocateditems;
 801d986:	4b1a      	ldr	r3, [pc, #104]	; (801d9f0 <rmw_init_options_fini+0xb8>)
 801d988:	681b      	ldr	r3, [r3, #0]
 801d98a:	647b      	str	r3, [r7, #68]	; 0x44

  while (NULL != item) {
 801d98c:	e00f      	b.n	801d9ae <rmw_init_options_fini+0x76>
    rmw_uxrce_init_options_impl_t * aux_init_options =
 801d98e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d990:	68db      	ldr	r3, [r3, #12]
 801d992:	643b      	str	r3, [r7, #64]	; 0x40
      (rmw_uxrce_init_options_impl_t *)item->data;
    if (aux_init_options == init_options->impl) {
 801d994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d998:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d99a:	429a      	cmp	r2, r3
 801d99c:	d104      	bne.n	801d9a8 <rmw_init_options_fini+0x70>
      put_memory(&init_options_memory, item);
 801d99e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801d9a0:	4813      	ldr	r0, [pc, #76]	; (801d9f0 <rmw_init_options_fini+0xb8>)
 801d9a2:	f7ff fc8b 	bl	801d2bc <put_memory>
      break;
 801d9a6:	e005      	b.n	801d9b4 <rmw_init_options_fini+0x7c>
    }
    item = item->next;
 801d9a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d9aa:	689b      	ldr	r3, [r3, #8]
 801d9ac:	647b      	str	r3, [r7, #68]	; 0x44
  while (NULL != item) {
 801d9ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d1ec      	bne.n	801d98e <rmw_init_options_fini+0x56>
  }

  if (NULL == item) {
 801d9b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d9b6:	2b00      	cmp	r3, #0
 801d9b8:	d101      	bne.n	801d9be <rmw_init_options_fini+0x86>
    return RMW_RET_ERROR;
 801d9ba:	2301      	movs	r3, #1
 801d9bc:	e011      	b.n	801d9e2 <rmw_init_options_fini+0xaa>
  }


  *init_options = rmw_get_zero_initialized_init_options();
 801d9be:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 801d9c0:	463b      	mov	r3, r7
 801d9c2:	4618      	mov	r0, r3
 801d9c4:	f7fe fecf 	bl	801c766 <rmw_get_zero_initialized_init_options>
 801d9c8:	4625      	mov	r5, r4
 801d9ca:	463c      	mov	r4, r7
 801d9cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d9ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d9d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d9d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d9d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d9d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d9d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 801d9dc:	e885 0003 	stmia.w	r5, {r0, r1}

  return RMW_RET_OK;
 801d9e0:	2300      	movs	r3, #0
}
 801d9e2:	4618      	mov	r0, r3
 801d9e4:	3748      	adds	r7, #72	; 0x48
 801d9e6:	46bd      	mov	sp, r7
 801d9e8:	bdb0      	pop	{r4, r5, r7, pc}
 801d9ea:	bf00      	nop
 801d9ec:	08027434 	.word	0x08027434
 801d9f0:	20013228 	.word	0x20013228

0801d9f4 <rmw_init>:

rmw_ret_t
rmw_init(
  const rmw_init_options_t * options,
  rmw_context_t * context)
{
 801d9f4:	b5b0      	push	{r4, r5, r7, lr}
 801d9f6:	b088      	sub	sp, #32
 801d9f8:	af02      	add	r7, sp, #8
 801d9fa:	6078      	str	r0, [r7, #4]
 801d9fc:	6039      	str	r1, [r7, #0]
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(options, RMW_RET_INVALID_ARGUMENT);
 801d9fe:	687b      	ldr	r3, [r7, #4]
 801da00:	2b00      	cmp	r3, #0
 801da02:	d101      	bne.n	801da08 <rmw_init+0x14>
 801da04:	230b      	movs	r3, #11
 801da06:	e1c6      	b.n	801dd96 <rmw_init+0x3a2>
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(context, RMW_RET_INVALID_ARGUMENT);
 801da08:	683b      	ldr	r3, [r7, #0]
 801da0a:	2b00      	cmp	r3, #0
 801da0c:	d101      	bne.n	801da12 <rmw_init+0x1e>
 801da0e:	230b      	movs	r3, #11
 801da10:	e1c1      	b.n	801dd96 <rmw_init+0x3a2>
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(options->impl, RMW_RET_INVALID_ARGUMENT);
 801da12:	687b      	ldr	r3, [r7, #4]
 801da14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da16:	2b00      	cmp	r3, #0
 801da18:	d101      	bne.n	801da1e <rmw_init+0x2a>
 801da1a:	230b      	movs	r3, #11
 801da1c:	e1bb      	b.n	801dd96 <rmw_init+0x3a2>
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(
 801da1e:	687b      	ldr	r3, [r7, #4]
 801da20:	689b      	ldr	r3, [r3, #8]
 801da22:	2b00      	cmp	r3, #0
 801da24:	d00c      	beq.n	801da40 <rmw_init+0x4c>
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	689b      	ldr	r3, [r3, #8]
 801da2a:	4ab4      	ldr	r2, [pc, #720]	; (801dcfc <rmw_init+0x308>)
 801da2c:	6812      	ldr	r2, [r2, #0]
 801da2e:	4611      	mov	r1, r2
 801da30:	4618      	mov	r0, r3
 801da32:	f7e2 fbed 	bl	8000210 <strcmp>
 801da36:	4603      	mov	r3, r0
 801da38:	2b00      	cmp	r3, #0
 801da3a:	d001      	beq.n	801da40 <rmw_init+0x4c>
 801da3c:	230c      	movs	r3, #12
 801da3e:	e1aa      	b.n	801dd96 <rmw_init+0x3a2>
    options->implementation_identifier,
    RMW_RET_INCORRECT_RMW_IMPLEMENTATION);
  context->instance_id = options->instance_id;
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da46:	6839      	ldr	r1, [r7, #0]
 801da48:	e9c1 2300 	strd	r2, r3, [r1]
  context->implementation_identifier = eprosima_microxrcedds_identifier;
 801da4c:	4bab      	ldr	r3, [pc, #684]	; (801dcfc <rmw_init+0x308>)
 801da4e:	681a      	ldr	r2, [r3, #0]
 801da50:	683b      	ldr	r3, [r7, #0]
 801da52:	609a      	str	r2, [r3, #8]
  context->options.domain_id = options->domain_id;
 801da54:	687b      	ldr	r3, [r7, #4]
 801da56:	68da      	ldr	r2, [r3, #12]
 801da58:	683b      	ldr	r3, [r7, #0]
 801da5a:	61da      	str	r2, [r3, #28]

#ifdef UCLIENT_PROFILE_MULTITHREAD
  if (!rmw_uxrce_wait_mutex_initialized) {
 801da5c:	4ba8      	ldr	r3, [pc, #672]	; (801dd00 <rmw_init+0x30c>)
 801da5e:	781b      	ldrb	r3, [r3, #0]
 801da60:	f083 0301 	eor.w	r3, r3, #1
 801da64:	b2db      	uxtb	r3, r3
 801da66:	2b00      	cmp	r3, #0
 801da68:	d005      	beq.n	801da76 <rmw_init+0x82>
    UXR_INIT_LOCK(&rmw_uxrce_wait_mutex);
 801da6a:	48a6      	ldr	r0, [pc, #664]	; (801dd04 <rmw_init+0x310>)
 801da6c:	f7f6 f8ce 	bl	8013c0c <uxr_init_lock>
    rmw_uxrce_wait_mutex_initialized = true;
 801da70:	4ba3      	ldr	r3, [pc, #652]	; (801dd00 <rmw_init+0x30c>)
 801da72:	2201      	movs	r2, #1
 801da74:	701a      	strb	r2, [r3, #0]
  }
#endif  // UCLIENT_PROFILE_MULTITHREAD

  rmw_uxrce_init_session_memory(&session_memory, custom_sessions, RMW_UXRCE_MAX_SESSIONS);
 801da76:	2201      	movs	r2, #1
 801da78:	49a3      	ldr	r1, [pc, #652]	; (801dd08 <rmw_init+0x314>)
 801da7a:	48a4      	ldr	r0, [pc, #656]	; (801dd0c <rmw_init+0x318>)
 801da7c:	f002 f832 	bl	801fae4 <rmw_uxrce_init_session_memory>
  rmw_uxrce_init_static_input_buffer_memory(
 801da80:	2204      	movs	r2, #4
 801da82:	49a3      	ldr	r1, [pc, #652]	; (801dd10 <rmw_init+0x31c>)
 801da84:	48a3      	ldr	r0, [pc, #652]	; (801dd14 <rmw_init+0x320>)
 801da86:	f002 f8da 	bl	801fc3e <rmw_uxrce_init_static_input_buffer_memory>
    &static_buffer_memory, custom_static_buffers,
    RMW_UXRCE_MAX_HISTORY);

  rmw_uxrce_mempool_item_t * memory_node = get_memory(&session_memory);
 801da8a:	48a0      	ldr	r0, [pc, #640]	; (801dd0c <rmw_init+0x318>)
 801da8c:	f7ff fbda 	bl	801d244 <get_memory>
 801da90:	6178      	str	r0, [r7, #20]
  if (!memory_node) {
 801da92:	697b      	ldr	r3, [r7, #20]
 801da94:	2b00      	cmp	r3, #0
 801da96:	d101      	bne.n	801da9c <rmw_init+0xa8>
    RMW_UROS_TRACE_MESSAGE("Not available session memory node")

    return RMW_RET_ERROR;
 801da98:	2301      	movs	r3, #1
 801da9a:	e17c      	b.n	801dd96 <rmw_init+0x3a2>
  }

  rmw_context_impl_t * context_impl = (rmw_context_impl_t *)memory_node->data;
 801da9c:	697b      	ldr	r3, [r7, #20]
 801da9e:	68db      	ldr	r3, [r3, #12]
 801daa0:	613b      	str	r3, [r7, #16]

  #if defined(RMW_UXRCE_TRANSPORT_CUSTOM)
  uxr_set_custom_transport_callbacks(
 801daa2:	693b      	ldr	r3, [r7, #16]
 801daa4:	f103 0010 	add.w	r0, r3, #16
    &context_impl->transport,
    options->impl->transport_params.framing,
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  uxr_set_custom_transport_callbacks(
 801daac:	7c19      	ldrb	r1, [r3, #16]
    options->impl->transport_params.open_cb,
 801daae:	687b      	ldr	r3, [r7, #4]
 801dab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  uxr_set_custom_transport_callbacks(
 801dab2:	699c      	ldr	r4, [r3, #24]
    options->impl->transport_params.close_cb,
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  uxr_set_custom_transport_callbacks(
 801dab8:	69dd      	ldr	r5, [r3, #28]
    options->impl->transport_params.write_cb,
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  uxr_set_custom_transport_callbacks(
 801dabe:	6a1b      	ldr	r3, [r3, #32]
    options->impl->transport_params.read_cb);
 801dac0:	687a      	ldr	r2, [r7, #4]
 801dac2:	6b52      	ldr	r2, [r2, #52]	; 0x34
  uxr_set_custom_transport_callbacks(
 801dac4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801dac6:	9201      	str	r2, [sp, #4]
 801dac8:	9300      	str	r3, [sp, #0]
 801daca:	462b      	mov	r3, r5
 801dacc:	4622      	mov	r2, r4
 801dace:	f7f7 f843 	bl	8014b58 <uxr_set_custom_transport_callbacks>
  #endif  // RMW_UXRCE_TRANSPORT_CUSTOM

  context_impl->creation_timeout = RMW_UXRCE_ENTITY_CREATION_TIMEOUT;
 801dad2:	693b      	ldr	r3, [r7, #16]
 801dad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801dad8:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
  context_impl->destroy_timeout = RMW_UXRCE_ENTITY_DESTROY_TIMEOUT;
 801dadc:	693b      	ldr	r3, [r7, #16]
 801dade:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801dae2:	f8c3 2da8 	str.w	r2, [r3, #3496]	; 0xda8

  context_impl->creation_stream = (RMW_UXRCE_ENTITY_CREATION_TIMEOUT > 0) ?
    &context_impl->reliable_output :
 801dae6:	693b      	ldr	r3, [r7, #16]
 801dae8:	f503 6259 	add.w	r2, r3, #3472	; 0xd90
  context_impl->creation_stream = (RMW_UXRCE_ENTITY_CREATION_TIMEOUT > 0) ?
 801daec:	693b      	ldr	r3, [r7, #16]
 801daee:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
    &context_impl->best_effort_output;

  context_impl->destroy_stream = (RMW_UXRCE_ENTITY_DESTROY_TIMEOUT > 0) ?
    &context_impl->reliable_output :
 801daf2:	693b      	ldr	r3, [r7, #16]
 801daf4:	f503 6259 	add.w	r2, r3, #3472	; 0xd90
  context_impl->destroy_stream = (RMW_UXRCE_ENTITY_DESTROY_TIMEOUT > 0) ?
 801daf8:	693b      	ldr	r3, [r7, #16]
 801dafa:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
    &context_impl->best_effort_output;

  context_impl->id_participant = 0;
 801dafe:	693b      	ldr	r3, [r7, #16]
 801db00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801db04:	2200      	movs	r2, #0
 801db06:	f8a3 2fac 	strh.w	r2, [r3, #4012]	; 0xfac
  context_impl->id_topic = 0;
 801db0a:	693b      	ldr	r3, [r7, #16]
 801db0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801db10:	2200      	movs	r2, #0
 801db12:	f8a3 2fae 	strh.w	r2, [r3, #4014]	; 0xfae
  context_impl->id_publisher = 0;
 801db16:	693b      	ldr	r3, [r7, #16]
 801db18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801db1c:	2200      	movs	r2, #0
 801db1e:	f8a3 2fb0 	strh.w	r2, [r3, #4016]	; 0xfb0
  context_impl->id_datawriter = 0;
 801db22:	693b      	ldr	r3, [r7, #16]
 801db24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801db28:	2200      	movs	r2, #0
 801db2a:	f8a3 2fb2 	strh.w	r2, [r3, #4018]	; 0xfb2
  context_impl->id_subscriber = 0;
 801db2e:	693b      	ldr	r3, [r7, #16]
 801db30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801db34:	2200      	movs	r2, #0
 801db36:	f8a3 2fb4 	strh.w	r2, [r3, #4020]	; 0xfb4
  context_impl->id_datareader = 0;
 801db3a:	693b      	ldr	r3, [r7, #16]
 801db3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801db40:	2200      	movs	r2, #0
 801db42:	f8a3 2fb6 	strh.w	r2, [r3, #4022]	; 0xfb6
  context_impl->id_requester = 0;
 801db46:	693b      	ldr	r3, [r7, #16]
 801db48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801db4c:	2200      	movs	r2, #0
 801db4e:	f8a3 2fb8 	strh.w	r2, [r3, #4024]	; 0xfb8
  context_impl->id_replier = 0;
 801db52:	693b      	ldr	r3, [r7, #16]
 801db54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801db58:	2200      	movs	r2, #0
 801db5a:	f8a3 2fba 	strh.w	r2, [r3, #4026]	; 0xfba

  context_impl->graph_guard_condition.implementation_identifier = eprosima_microxrcedds_identifier;
 801db5e:	4b67      	ldr	r3, [pc, #412]	; (801dcfc <rmw_init+0x308>)
 801db60:	681a      	ldr	r2, [r3, #0]
 801db62:	693b      	ldr	r3, [r7, #16]
 801db64:	f8c3 2d80 	str.w	r2, [r3, #3456]	; 0xd80
  context_impl->graph_guard_condition.data = NULL;
 801db68:	693b      	ldr	r3, [r7, #16]
 801db6a:	2200      	movs	r2, #0
 801db6c:	f8c3 2d84 	str.w	r2, [r3, #3460]	; 0xd84

  context->impl = context_impl;
 801db70:	683b      	ldr	r3, [r7, #0]
 801db72:	693a      	ldr	r2, [r7, #16]
 801db74:	64da      	str	r2, [r3, #76]	; 0x4c

  rmw_uxrce_init_node_memory(&node_memory, custom_nodes, RMW_UXRCE_MAX_NODES);
 801db76:	2201      	movs	r2, #1
 801db78:	4967      	ldr	r1, [pc, #412]	; (801dd18 <rmw_init+0x324>)
 801db7a:	4868      	ldr	r0, [pc, #416]	; (801dd1c <rmw_init+0x328>)
 801db7c:	f001 ff5f 	bl	801fa3e <rmw_uxrce_init_node_memory>
  rmw_uxrce_init_subscription_memory(
 801db80:	2202      	movs	r2, #2
 801db82:	4967      	ldr	r1, [pc, #412]	; (801dd20 <rmw_init+0x32c>)
 801db84:	4867      	ldr	r0, [pc, #412]	; (801dd24 <rmw_init+0x330>)
 801db86:	f001 ff04 	bl	801f992 <rmw_uxrce_init_subscription_memory>
    &subscription_memory, custom_subscriptions,
    RMW_UXRCE_MAX_SUBSCRIPTIONS);
  rmw_uxrce_init_publisher_memory(&publisher_memory, custom_publishers, RMW_UXRCE_MAX_PUBLISHERS);
 801db8a:	2202      	movs	r2, #2
 801db8c:	4966      	ldr	r1, [pc, #408]	; (801dd28 <rmw_init+0x334>)
 801db8e:	4867      	ldr	r0, [pc, #412]	; (801dd2c <rmw_init+0x338>)
 801db90:	f001 feb8 	bl	801f904 <rmw_uxrce_init_publisher_memory>
  rmw_uxrce_init_service_memory(&service_memory, custom_services, RMW_UXRCE_MAX_SERVICES);
 801db94:	2200      	movs	r2, #0
 801db96:	4966      	ldr	r1, [pc, #408]	; (801dd30 <rmw_init+0x33c>)
 801db98:	4866      	ldr	r0, [pc, #408]	; (801dd34 <rmw_init+0x340>)
 801db9a:	f001 fe07 	bl	801f7ac <rmw_uxrce_init_service_memory>
  rmw_uxrce_init_client_memory(&client_memory, custom_clients, RMW_UXRCE_MAX_CLIENTS);
 801db9e:	2200      	movs	r2, #0
 801dba0:	4965      	ldr	r1, [pc, #404]	; (801dd38 <rmw_init+0x344>)
 801dba2:	4866      	ldr	r0, [pc, #408]	; (801dd3c <rmw_init+0x348>)
 801dba4:	f001 fe58 	bl	801f858 <rmw_uxrce_init_client_memory>
  rmw_uxrce_init_topic_memory(&topics_memory, custom_topics, RMW_UXRCE_MAX_TOPICS_INTERNAL);
 801dba8:	2204      	movs	r2, #4
 801dbaa:	4965      	ldr	r1, [pc, #404]	; (801dd40 <rmw_init+0x34c>)
 801dbac:	4865      	ldr	r0, [pc, #404]	; (801dd44 <rmw_init+0x350>)
 801dbae:	f001 fff0 	bl	801fb92 <rmw_uxrce_init_topic_memory>
  rmw_uxrce_init_init_options_impl_memory(
 801dbb2:	2203      	movs	r2, #3
 801dbb4:	4964      	ldr	r1, [pc, #400]	; (801dd48 <rmw_init+0x354>)
 801dbb6:	4865      	ldr	r0, [pc, #404]	; (801dd4c <rmw_init+0x358>)
 801dbb8:	f002 f898 	bl	801fcec <rmw_uxrce_init_init_options_impl_memory>
    &init_options_memory, custom_init_options,
    RMW_UXRCE_MAX_OPTIONS);
  rmw_uxrce_init_wait_set_memory(&wait_set_memory, custom_wait_set, RMW_UXRCE_MAX_WAIT_SETS);
 801dbbc:	2205      	movs	r2, #5
 801dbbe:	4964      	ldr	r1, [pc, #400]	; (801dd50 <rmw_init+0x35c>)
 801dbc0:	4864      	ldr	r0, [pc, #400]	; (801dd54 <rmw_init+0x360>)
 801dbc2:	f002 f8e1 	bl	801fd88 <rmw_uxrce_init_wait_set_memory>
  rmw_uxrce_init_guard_condition_memory(
 801dbc6:	2203      	movs	r2, #3
 801dbc8:	4963      	ldr	r1, [pc, #396]	; (801dd58 <rmw_init+0x364>)
 801dbca:	4864      	ldr	r0, [pc, #400]	; (801dd5c <rmw_init+0x368>)
 801dbcc:	f002 f932 	bl	801fe34 <rmw_uxrce_init_guard_condition_memory>
    &guard_condition_memory, custom_guard_condition,
    RMW_UXRCE_MAX_GUARD_CONDITION);

  // Micro-XRCE-DDS Client transport initialization
  rmw_ret_t transport_init_ret = rmw_uxrce_transport_init(
 801dbd0:	683b      	ldr	r3, [r7, #0]
 801dbd2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    context->impl, options->impl, NULL);
 801dbd4:	687b      	ldr	r3, [r7, #4]
 801dbd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  rmw_ret_t transport_init_ret = rmw_uxrce_transport_init(
 801dbd8:	2200      	movs	r2, #0
 801dbda:	4619      	mov	r1, r3
 801dbdc:	f001 fb94 	bl	801f308 <rmw_uxrce_transport_init>
 801dbe0:	60f8      	str	r0, [r7, #12]
  if (RMW_RET_OK != transport_init_ret) {
 801dbe2:	68fb      	ldr	r3, [r7, #12]
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	d001      	beq.n	801dbec <rmw_init+0x1f8>
    return transport_init_ret;
 801dbe8:	68fb      	ldr	r3, [r7, #12]
 801dbea:	e0d4      	b.n	801dd96 <rmw_init+0x3a2>
  }

  uxr_init_session(
 801dbec:	693b      	ldr	r3, [r7, #16]
 801dbee:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
    &context_impl->session, &context_impl->transport.comm,
 801dbf2:	693b      	ldr	r3, [r7, #16]
 801dbf4:	f503 7122 	add.w	r1, r3, #648	; 0x288
    options->impl->transport_params.client_key);
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  uxr_init_session(
 801dbfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dbfe:	461a      	mov	r2, r3
 801dc00:	f7f2 fa52 	bl	80100a8 <uxr_init_session>

  uxr_set_topic_callback(&context_impl->session, on_topic, (void *)(context_impl));
 801dc04:	693b      	ldr	r3, [r7, #16]
 801dc06:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801dc0a:	693a      	ldr	r2, [r7, #16]
 801dc0c:	4954      	ldr	r1, [pc, #336]	; (801dd60 <rmw_init+0x36c>)
 801dc0e:	4618      	mov	r0, r3
 801dc10:	f7f2 faac 	bl	801016c <uxr_set_topic_callback>
  uxr_set_status_callback(&context_impl->session, on_status, NULL);
 801dc14:	693b      	ldr	r3, [r7, #16]
 801dc16:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801dc1a:	2200      	movs	r2, #0
 801dc1c:	4951      	ldr	r1, [pc, #324]	; (801dd64 <rmw_init+0x370>)
 801dc1e:	4618      	mov	r0, r3
 801dc20:	f7f2 fa90 	bl	8010144 <uxr_set_status_callback>
  uxr_set_request_callback(&context_impl->session, on_request, NULL);
 801dc24:	693b      	ldr	r3, [r7, #16]
 801dc26:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801dc2a:	2200      	movs	r2, #0
 801dc2c:	494e      	ldr	r1, [pc, #312]	; (801dd68 <rmw_init+0x374>)
 801dc2e:	4618      	mov	r0, r3
 801dc30:	f7f2 fab0 	bl	8010194 <uxr_set_request_callback>
  uxr_set_reply_callback(&context_impl->session, on_reply, NULL);
 801dc34:	693b      	ldr	r3, [r7, #16]
 801dc36:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801dc3a:	2200      	movs	r2, #0
 801dc3c:	494b      	ldr	r1, [pc, #300]	; (801dd6c <rmw_init+0x378>)
 801dc3e:	4618      	mov	r0, r3
 801dc40:	f7f2 fabc 	bl	80101bc <uxr_set_reply_callback>

  context_impl->reliable_input = uxr_create_input_reliable_stream(
 801dc44:	693b      	ldr	r3, [r7, #16]
 801dc46:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
    &context_impl->session, context_impl->input_reliable_stream_buffer,
 801dc4a:	693b      	ldr	r3, [r7, #16]
 801dc4c:	f603 51ac 	addw	r1, r3, #3500	; 0xdac
    context_impl->transport.comm.mtu * RMW_UXRCE_STREAM_HISTORY_INPUT,
 801dc50:	693b      	ldr	r3, [r7, #16]
 801dc52:	f8b3 3298 	ldrh.w	r3, [r3, #664]	; 0x298
 801dc56:	009b      	lsls	r3, r3, #2
  context_impl->reliable_input = uxr_create_input_reliable_stream(
 801dc58:	461a      	mov	r2, r3
 801dc5a:	693c      	ldr	r4, [r7, #16]
 801dc5c:	2304      	movs	r3, #4
 801dc5e:	f7f2 fbe7 	bl	8010430 <uxr_create_input_reliable_stream>
 801dc62:	4603      	mov	r3, r0
 801dc64:	f8c4 3d8c 	str.w	r3, [r4, #3468]	; 0xd8c
    RMW_UXRCE_STREAM_HISTORY_INPUT);
  context_impl->reliable_output =
    uxr_create_output_reliable_stream(
 801dc68:	693b      	ldr	r3, [r7, #16]
 801dc6a:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
    &context_impl->session, context_impl->output_reliable_stream_buffer,
 801dc6e:	693b      	ldr	r3, [r7, #16]
 801dc70:	f503 51ad 	add.w	r1, r3, #5536	; 0x15a0
 801dc74:	310c      	adds	r1, #12
    context_impl->transport.comm.mtu * RMW_UXRCE_STREAM_HISTORY_OUTPUT,
 801dc76:	693b      	ldr	r3, [r7, #16]
 801dc78:	f8b3 3298 	ldrh.w	r3, [r3, #664]	; 0x298
 801dc7c:	009b      	lsls	r3, r3, #2
    uxr_create_output_reliable_stream(
 801dc7e:	461a      	mov	r2, r3
 801dc80:	693c      	ldr	r4, [r7, #16]
 801dc82:	2304      	movs	r3, #4
 801dc84:	f7f2 fb8d 	bl	80103a2 <uxr_create_output_reliable_stream>
 801dc88:	4603      	mov	r3, r0
 801dc8a:	f8c4 3d90 	str.w	r3, [r4, #3472]	; 0xd90
    RMW_UXRCE_STREAM_HISTORY_OUTPUT);

  context_impl->best_effort_input = uxr_create_input_best_effort_stream(&context_impl->session);
 801dc8e:	693b      	ldr	r3, [r7, #16]
 801dc90:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801dc94:	693c      	ldr	r4, [r7, #16]
 801dc96:	4618      	mov	r0, r3
 801dc98:	f7f2 fbae 	bl	80103f8 <uxr_create_input_best_effort_stream>
 801dc9c:	4603      	mov	r3, r0
 801dc9e:	f8c4 3d98 	str.w	r3, [r4, #3480]	; 0xd98
  context_impl->best_effort_output = uxr_create_output_best_effort_stream(
 801dca2:	693b      	ldr	r3, [r7, #16]
 801dca4:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
    &context_impl->session,
    context_impl->output_best_effort_stream_buffer, context_impl->transport.comm.mtu);
 801dca8:	693b      	ldr	r3, [r7, #16]
 801dcaa:	f503 53ed 	add.w	r3, r3, #7584	; 0x1da0
 801dcae:	330c      	adds	r3, #12
 801dcb0:	693a      	ldr	r2, [r7, #16]
 801dcb2:	f8b2 2298 	ldrh.w	r2, [r2, #664]	; 0x298
  context_impl->best_effort_output = uxr_create_output_best_effort_stream(
 801dcb6:	693c      	ldr	r4, [r7, #16]
 801dcb8:	4619      	mov	r1, r3
 801dcba:	f7f2 fb4b 	bl	8010354 <uxr_create_output_best_effort_stream>
 801dcbe:	4603      	mov	r3, r0
 801dcc0:	f8c4 3d94 	str.w	r3, [r4, #3476]	; 0xd94

  if (!uxr_create_session(&context_impl->session)) {
 801dcc4:	693b      	ldr	r3, [r7, #16]
 801dcc6:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801dcca:	4618      	mov	r0, r3
 801dccc:	f7f2 fae5 	bl	801029a <uxr_create_session>
 801dcd0:	4603      	mov	r3, r0
 801dcd2:	f083 0301 	eor.w	r3, r3, #1
 801dcd6:	b2db      	uxtb	r3, r3
 801dcd8:	2b00      	cmp	r3, #0
 801dcda:	d049      	beq.n	801dd70 <rmw_init+0x37c>
    CLOSE_TRANSPORT(&context_impl->transport);
 801dcdc:	693b      	ldr	r3, [r7, #16]
 801dcde:	3310      	adds	r3, #16
 801dce0:	4618      	mov	r0, r3
 801dce2:	f7f6 ffb9 	bl	8014c58 <uxr_close_custom_transport>
    put_memory(&session_memory, &context_impl->mem);
 801dce6:	693b      	ldr	r3, [r7, #16]
 801dce8:	4619      	mov	r1, r3
 801dcea:	4808      	ldr	r0, [pc, #32]	; (801dd0c <rmw_init+0x318>)
 801dcec:	f7ff fae6 	bl	801d2bc <put_memory>
    context->impl = NULL;
 801dcf0:	683b      	ldr	r3, [r7, #0]
 801dcf2:	2200      	movs	r2, #0
 801dcf4:	64da      	str	r2, [r3, #76]	; 0x4c
    RMW_UROS_TRACE_MESSAGE("failed to create node session on Micro ROS Agent.")
    return RMW_RET_ERROR;
 801dcf6:	2301      	movs	r3, #1
 801dcf8:	e04d      	b.n	801dd96 <rmw_init+0x3a2>
 801dcfa:	bf00      	nop
 801dcfc:	08027434 	.word	0x08027434
 801dd00:	20013518 	.word	0x20013518
 801dd04:	200134c4 	.word	0x200134c4
 801dd08:	2000e910 	.word	0x2000e910
 801dd0c:	2000e8a8 	.word	0x2000e8a8
 801dd10:	20011128 	.word	0x20011128
 801dd14:	200110c4 	.word	0x200110c4
 801dd18:	20010934 	.word	0x20010934
 801dd1c:	200108d0 	.word	0x200108d0
 801dd20:	20010d30 	.word	0x20010d30
 801dd24:	20010cc8 	.word	0x20010cc8
 801dd28:	20010ac8 	.word	0x20010ac8
 801dd2c:	20010a60 	.word	0x20010a60
 801dd30:	20010f88 	.word	0x20010f88
 801dd34:	20010f20 	.word	0x20010f20
 801dd38:	20010ff0 	.word	0x20010ff0
 801dd3c:	20010f88 	.word	0x20010f88
 801dd40:	20011054 	.word	0x20011054
 801dd44:	20010ff0 	.word	0x20010ff0
 801dd48:	2001328c 	.word	0x2001328c
 801dd4c:	20013228 	.word	0x20013228
 801dd50:	20013374 	.word	0x20013374
 801dd54:	20013310 	.word	0x20013310
 801dd58:	20013464 	.word	0x20013464
 801dd5c:	20013400 	.word	0x20013400
 801dd60:	0801cf11 	.word	0x0801cf11
 801dd64:	0801ceed 	.word	0x0801ceed
 801dd68:	0801d035 	.word	0x0801d035
 801dd6c:	0801d121 	.word	0x0801d121
  }

#ifdef RMW_UXRCE_GRAPH
  // Create graph manager information
  if (RMW_RET_OK != rmw_graph_init(context_impl, &context_impl->graph_info)) {
 801dd70:	693b      	ldr	r3, [r7, #16]
 801dd72:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 801dd76:	4619      	mov	r1, r3
 801dd78:	6938      	ldr	r0, [r7, #16]
 801dd7a:	f7ff fb5b 	bl	801d434 <rmw_graph_init>
 801dd7e:	4603      	mov	r3, r0
 801dd80:	2b00      	cmp	r3, #0
 801dd82:	d007      	beq.n	801dd94 <rmw_init+0x3a0>
    uxr_delete_session(&context_impl->session);
 801dd84:	693b      	ldr	r3, [r7, #16]
 801dd86:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801dd8a:	4618      	mov	r0, r3
 801dd8c:	f7f2 fad5 	bl	801033a <uxr_delete_session>
    return RMW_RET_ERROR;
 801dd90:	2301      	movs	r3, #1
 801dd92:	e000      	b.n	801dd96 <rmw_init+0x3a2>
  }
#endif  // RMW_UXRCE_GRAPH

  return RMW_RET_OK;
 801dd94:	2300      	movs	r3, #0
}
 801dd96:	4618      	mov	r0, r3
 801dd98:	3718      	adds	r7, #24
 801dd9a:	46bd      	mov	sp, r7
 801dd9c:	bdb0      	pop	{r4, r5, r7, pc}
 801dd9e:	bf00      	nop

0801dda0 <rmw_context_fini>:
}

rmw_ret_t
rmw_context_fini(
  rmw_context_t * context)
{
 801dda0:	b580      	push	{r7, lr}
 801dda2:	b088      	sub	sp, #32
 801dda4:	af00      	add	r7, sp, #0
 801dda6:	6078      	str	r0, [r7, #4]
  rmw_ret_t ret = RMW_RET_OK;
 801dda8:	2300      	movs	r3, #0
 801ddaa:	61fb      	str	r3, [r7, #28]

  rmw_uxrce_mempool_item_t * item = node_memory.allocateditems;
 801ddac:	4b22      	ldr	r3, [pc, #136]	; (801de38 <rmw_context_fini+0x98>)
 801ddae:	681b      	ldr	r3, [r3, #0]
 801ddb0:	61bb      	str	r3, [r7, #24]

  while (item != NULL) {
 801ddb2:	e011      	b.n	801ddd8 <rmw_context_fini+0x38>
    rmw_uxrce_node_t * custom_node = (rmw_uxrce_node_t *)item->data;
 801ddb4:	69bb      	ldr	r3, [r7, #24]
 801ddb6:	68db      	ldr	r3, [r3, #12]
 801ddb8:	60fb      	str	r3, [r7, #12]
    item = item->next;
 801ddba:	69bb      	ldr	r3, [r7, #24]
 801ddbc:	689b      	ldr	r3, [r3, #8]
 801ddbe:	61bb      	str	r3, [r7, #24]
    if (custom_node->context == context->impl) {
 801ddc0:	68fb      	ldr	r3, [r7, #12]
 801ddc2:	691a      	ldr	r2, [r3, #16]
 801ddc4:	687b      	ldr	r3, [r7, #4]
 801ddc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ddc8:	429a      	cmp	r2, r3
 801ddca:	d105      	bne.n	801ddd8 <rmw_context_fini+0x38>
      ret = rmw_destroy_node(&custom_node->rmw_node);
 801ddcc:	68fb      	ldr	r3, [r7, #12]
 801ddce:	3318      	adds	r3, #24
 801ddd0:	4618      	mov	r0, r3
 801ddd2:	f000 f9e9 	bl	801e1a8 <rmw_destroy_node>
 801ddd6:	61f8      	str	r0, [r7, #28]
  while (item != NULL) {
 801ddd8:	69bb      	ldr	r3, [r7, #24]
 801ddda:	2b00      	cmp	r3, #0
 801dddc:	d1ea      	bne.n	801ddb4 <rmw_context_fini+0x14>
    }
  }

  if (NULL != context->impl) {
 801ddde:	687b      	ldr	r3, [r7, #4]
 801dde0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	d01f      	beq.n	801de26 <rmw_context_fini+0x86>
    size_t retries = UXR_CONFIG_MAX_SESSION_CONNECTION_ATTEMPTS;
 801dde6:	230a      	movs	r3, #10
 801dde8:	617b      	str	r3, [r7, #20]

    rmw_context_impl_t * context_impl = context->impl;
 801ddea:	687b      	ldr	r3, [r7, #4]
 801ddec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ddee:	613b      	str	r3, [r7, #16]
    if (context_impl->destroy_stream->type == UXR_BEST_EFFORT_STREAM) {
 801ddf0:	693b      	ldr	r3, [r7, #16]
 801ddf2:	f8d3 3da0 	ldr.w	r3, [r3, #3488]	; 0xda0
 801ddf6:	789b      	ldrb	r3, [r3, #2]
 801ddf8:	2b01      	cmp	r3, #1
 801ddfa:	d101      	bne.n	801de00 <rmw_context_fini+0x60>
      retries = 0;
 801ddfc:	2300      	movs	r3, #0
 801ddfe:	617b      	str	r3, [r7, #20]
    }

    uxr_delete_session_retries(&context->impl->session, retries);
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801de04:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801de08:	6979      	ldr	r1, [r7, #20]
 801de0a:	4618      	mov	r0, r3
 801de0c:	f7f2 fa52 	bl	80102b4 <uxr_delete_session_retries>
    rmw_uxrce_fini_session_memory(context->impl);
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801de14:	4618      	mov	r0, r3
 801de16:	f002 f853 	bl	801fec0 <rmw_uxrce_fini_session_memory>
    CLOSE_TRANSPORT(&context->impl->transport);
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801de1e:	3310      	adds	r3, #16
 801de20:	4618      	mov	r0, r3
 801de22:	f7f6 ff19 	bl	8014c58 <uxr_close_custom_transport>
  }


  context->impl = NULL;
 801de26:	687b      	ldr	r3, [r7, #4]
 801de28:	2200      	movs	r2, #0
 801de2a:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 801de2c:	69fb      	ldr	r3, [r7, #28]
}
 801de2e:	4618      	mov	r0, r3
 801de30:	3720      	adds	r7, #32
 801de32:	46bd      	mov	sp, r7
 801de34:	bd80      	pop	{r7, pc}
 801de36:	bf00      	nop
 801de38:	200108d0 	.word	0x200108d0

0801de3c <create_topic>:
create_topic(
  struct rmw_uxrce_node_t * custom_node,
  const char * topic_name,
  const message_type_support_callbacks_t * message_type_support_callbacks,
  const rmw_qos_profile_t * qos_policies)
{
 801de3c:	b590      	push	{r4, r7, lr}
 801de3e:	b08d      	sub	sp, #52	; 0x34
 801de40:	af04      	add	r7, sp, #16
 801de42:	60f8      	str	r0, [r7, #12]
 801de44:	60b9      	str	r1, [r7, #8]
 801de46:	607a      	str	r2, [r7, #4]
 801de48:	603b      	str	r3, [r7, #0]
  (void) qos_policies;

  rmw_uxrce_topic_t * custom_topic = NULL;
 801de4a:	2300      	movs	r3, #0
 801de4c:	61fb      	str	r3, [r7, #28]
  rmw_uxrce_mempool_item_t * memory_node = get_memory(&topics_memory);
 801de4e:	4834      	ldr	r0, [pc, #208]	; (801df20 <create_topic+0xe4>)
 801de50:	f7ff f9f8 	bl	801d244 <get_memory>
 801de54:	61b8      	str	r0, [r7, #24]

  if (!memory_node) {
 801de56:	69bb      	ldr	r3, [r7, #24]
 801de58:	2b00      	cmp	r3, #0
 801de5a:	d058      	beq.n	801df0e <create_topic+0xd2>
    RMW_UROS_TRACE_MESSAGE("Not available memory node");
    goto fail;
  }

  custom_topic = (rmw_uxrce_topic_t *)memory_node->data;
 801de5c:	69bb      	ldr	r3, [r7, #24]
 801de5e:	68db      	ldr	r3, [r3, #12]
 801de60:	61fb      	str	r3, [r7, #28]

  // Init
  custom_topic->owner_node = custom_node;
 801de62:	69fb      	ldr	r3, [r7, #28]
 801de64:	68fa      	ldr	r2, [r7, #12]
 801de66:	619a      	str	r2, [r3, #24]

  // Asociate to typesupport
  custom_topic->message_type_support_callbacks = message_type_support_callbacks;
 801de68:	69fb      	ldr	r3, [r7, #28]
 801de6a:	687a      	ldr	r2, [r7, #4]
 801de6c:	615a      	str	r2, [r3, #20]

  // Generate topic id
  custom_topic->topic_id = uxr_object_id(custom_node->context->id_topic++, UXR_TOPIC_ID);
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	691b      	ldr	r3, [r3, #16]
 801de72:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 801de76:	f8b2 2fae 	ldrh.w	r2, [r2, #4014]	; 0xfae
 801de7a:	1c51      	adds	r1, r2, #1
 801de7c:	b289      	uxth	r1, r1
 801de7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801de82:	f8a3 1fae 	strh.w	r1, [r3, #4014]	; 0xfae
 801de86:	69fc      	ldr	r4, [r7, #28]
 801de88:	2102      	movs	r1, #2
 801de8a:	4610      	mov	r0, r2
 801de8c:	f7f1 fe58 	bl	800fb40 <uxr_object_id>
 801de90:	4603      	mov	r3, r0
 801de92:	6123      	str	r3, [r4, #16]

  // Generate request
  uint16_t topic_req = 0;
 801de94:	2300      	movs	r3, #0
 801de96:	82fb      	strh	r3, [r7, #22]
    custom_node->participant_id, rmw_uxrce_entity_naming_buffer, UXR_REPLACE | UXR_REUSE);
#else
  static char full_topic_name[RMW_UXRCE_TOPIC_NAME_MAX_LENGTH];
  static char type_name[RMW_UXRCE_TYPE_NAME_MAX_LENGTH];

  generate_topic_name(topic_name, full_topic_name, sizeof(full_topic_name));
 801de98:	2264      	movs	r2, #100	; 0x64
 801de9a:	4922      	ldr	r1, [pc, #136]	; (801df24 <create_topic+0xe8>)
 801de9c:	68b8      	ldr	r0, [r7, #8]
 801de9e:	f002 fbaf 	bl	8020600 <generate_topic_name>
  generate_type_name(message_type_support_callbacks, type_name, sizeof(type_name));
 801dea2:	2280      	movs	r2, #128	; 0x80
 801dea4:	4920      	ldr	r1, [pc, #128]	; (801df28 <create_topic+0xec>)
 801dea6:	6878      	ldr	r0, [r7, #4]
 801dea8:	f002 fb3a 	bl	8020520 <generate_type_name>

  topic_req = uxr_buffer_create_topic_bin(
    &custom_node->context->session,
 801deac:	68fb      	ldr	r3, [r7, #12]
 801deae:	691b      	ldr	r3, [r3, #16]
  topic_req = uxr_buffer_create_topic_bin(
 801deb0:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
    *custom_node->context->creation_stream,
 801deb4:	68fb      	ldr	r3, [r7, #12]
 801deb6:	691b      	ldr	r3, [r3, #16]
 801deb8:	f8d3 1d9c 	ldr.w	r1, [r3, #3484]	; 0xd9c
  topic_req = uxr_buffer_create_topic_bin(
 801debc:	68fb      	ldr	r3, [r7, #12]
 801debe:	69fa      	ldr	r2, [r7, #28]
 801dec0:	2406      	movs	r4, #6
 801dec2:	9402      	str	r4, [sp, #8]
 801dec4:	4c18      	ldr	r4, [pc, #96]	; (801df28 <create_topic+0xec>)
 801dec6:	9401      	str	r4, [sp, #4]
 801dec8:	4c16      	ldr	r4, [pc, #88]	; (801df24 <create_topic+0xe8>)
 801deca:	9400      	str	r4, [sp, #0]
 801decc:	680c      	ldr	r4, [r1, #0]
 801dece:	4621      	mov	r1, r4
 801ded0:	695b      	ldr	r3, [r3, #20]
 801ded2:	6912      	ldr	r2, [r2, #16]
 801ded4:	f7f1 f959 	bl	800f18a <uxr_buffer_create_topic_bin>
 801ded8:	4603      	mov	r3, r0
 801deda:	82fb      	strh	r3, [r7, #22]
    full_topic_name,
    type_name,
    UXR_REPLACE | UXR_REUSE);
#endif /* ifdef RMW_UXRCE_USE_XML */

  if (!run_xrce_session(
 801dedc:	68fb      	ldr	r3, [r7, #12]
 801dede:	6918      	ldr	r0, [r3, #16]
      custom_node->context, custom_node->context->creation_stream, topic_req,
 801dee0:	68fb      	ldr	r3, [r7, #12]
 801dee2:	691b      	ldr	r3, [r3, #16]
  if (!run_xrce_session(
 801dee4:	f8d3 1d9c 	ldr.w	r1, [r3, #3484]	; 0xd9c
      custom_node->context->creation_timeout))
 801dee8:	68fb      	ldr	r3, [r7, #12]
 801deea:	691b      	ldr	r3, [r3, #16]
  if (!run_xrce_session(
 801deec:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 801def0:	8afa      	ldrh	r2, [r7, #22]
 801def2:	f002 fa7b 	bl	80203ec <run_xrce_session>
 801def6:	4603      	mov	r3, r0
 801def8:	f083 0301 	eor.w	r3, r3, #1
 801defc:	b2db      	uxtb	r3, r3
 801defe:	2b00      	cmp	r3, #0
 801df00:	d007      	beq.n	801df12 <create_topic+0xd6>
  {
    rmw_uxrce_fini_topic_memory(custom_topic);
 801df02:	69f8      	ldr	r0, [r7, #28]
 801df04:	f002 f8f4 	bl	80200f0 <rmw_uxrce_fini_topic_memory>
    custom_topic = NULL;
 801df08:	2300      	movs	r3, #0
 801df0a:	61fb      	str	r3, [r7, #28]
    goto fail;
 801df0c:	e002      	b.n	801df14 <create_topic+0xd8>
    goto fail;
 801df0e:	bf00      	nop
 801df10:	e000      	b.n	801df14 <create_topic+0xd8>
  }

fail:
 801df12:	bf00      	nop
  return custom_topic;
 801df14:	69fb      	ldr	r3, [r7, #28]
}
 801df16:	4618      	mov	r0, r3
 801df18:	3724      	adds	r7, #36	; 0x24
 801df1a:	46bd      	mov	sp, r7
 801df1c:	bd90      	pop	{r4, r7, pc}
 801df1e:	bf00      	nop
 801df20:	20010ff0 	.word	0x20010ff0
 801df24:	2000e6e0 	.word	0x2000e6e0
 801df28:	2000e744 	.word	0x2000e744

0801df2c <destroy_topic>:

rmw_ret_t destroy_topic(
  rmw_uxrce_topic_t * topic)
{
 801df2c:	b580      	push	{r7, lr}
 801df2e:	b086      	sub	sp, #24
 801df30:	af00      	add	r7, sp, #0
 801df32:	6078      	str	r0, [r7, #4]
  rmw_ret_t result_ret = RMW_RET_OK;
 801df34:	2300      	movs	r3, #0
 801df36:	617b      	str	r3, [r7, #20]
  if (topic->owner_node != NULL) {
 801df38:	687b      	ldr	r3, [r7, #4]
 801df3a:	699b      	ldr	r3, [r3, #24]
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	d02b      	beq.n	801df98 <destroy_topic+0x6c>
    rmw_uxrce_node_t * custom_node = topic->owner_node;
 801df40:	687b      	ldr	r3, [r7, #4]
 801df42:	699b      	ldr	r3, [r3, #24]
 801df44:	613b      	str	r3, [r7, #16]

    uint16_t delete_topic = uxr_buffer_delete_entity(
      &custom_node->context->session,
 801df46:	693b      	ldr	r3, [r7, #16]
 801df48:	691b      	ldr	r3, [r3, #16]
    uint16_t delete_topic = uxr_buffer_delete_entity(
 801df4a:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
      *custom_node->context->destroy_stream,
 801df4e:	693b      	ldr	r3, [r7, #16]
 801df50:	691b      	ldr	r3, [r3, #16]
 801df52:	f8d3 2da0 	ldr.w	r2, [r3, #3488]	; 0xda0
    uint16_t delete_topic = uxr_buffer_delete_entity(
 801df56:	687b      	ldr	r3, [r7, #4]
 801df58:	6812      	ldr	r2, [r2, #0]
 801df5a:	4611      	mov	r1, r2
 801df5c:	691a      	ldr	r2, [r3, #16]
 801df5e:	f7f0 ffc1 	bl	800eee4 <uxr_buffer_delete_entity>
 801df62:	4603      	mov	r3, r0
 801df64:	81fb      	strh	r3, [r7, #14]
      topic->topic_id);

    if (!run_xrce_session(
 801df66:	693b      	ldr	r3, [r7, #16]
 801df68:	6918      	ldr	r0, [r3, #16]
        custom_node->context, custom_node->context->destroy_stream, delete_topic,
 801df6a:	693b      	ldr	r3, [r7, #16]
 801df6c:	691b      	ldr	r3, [r3, #16]
    if (!run_xrce_session(
 801df6e:	f8d3 1da0 	ldr.w	r1, [r3, #3488]	; 0xda0
        custom_node->context->destroy_timeout))
 801df72:	693b      	ldr	r3, [r7, #16]
 801df74:	691b      	ldr	r3, [r3, #16]
    if (!run_xrce_session(
 801df76:	f8d3 3da8 	ldr.w	r3, [r3, #3496]	; 0xda8
 801df7a:	89fa      	ldrh	r2, [r7, #14]
 801df7c:	f002 fa36 	bl	80203ec <run_xrce_session>
 801df80:	4603      	mov	r3, r0
 801df82:	f083 0301 	eor.w	r3, r3, #1
 801df86:	b2db      	uxtb	r3, r3
 801df88:	2b00      	cmp	r3, #0
 801df8a:	d001      	beq.n	801df90 <destroy_topic+0x64>
    {
      result_ret = RMW_RET_TIMEOUT;
 801df8c:	2302      	movs	r3, #2
 801df8e:	617b      	str	r3, [r7, #20]
    }
    rmw_uxrce_fini_topic_memory(topic);
 801df90:	6878      	ldr	r0, [r7, #4]
 801df92:	f002 f8ad 	bl	80200f0 <rmw_uxrce_fini_topic_memory>
 801df96:	e001      	b.n	801df9c <destroy_topic+0x70>
  } else {
    result_ret = RMW_RET_ERROR;
 801df98:	2301      	movs	r3, #1
 801df9a:	617b      	str	r3, [r7, #20]
  }

  return result_ret;
 801df9c:	697b      	ldr	r3, [r7, #20]
}
 801df9e:	4618      	mov	r0, r3
 801dfa0:	3718      	adds	r7, #24
 801dfa2:	46bd      	mov	sp, r7
 801dfa4:	bd80      	pop	{r7, pc}
	...

0801dfa8 <create_node>:
rmw_node_t * create_node(
  const char * name,
  const char * namespace_,
  size_t domain_id,
  const rmw_context_t * context)
{
 801dfa8:	b590      	push	{r4, r7, lr}
 801dfaa:	b08b      	sub	sp, #44	; 0x2c
 801dfac:	af02      	add	r7, sp, #8
 801dfae:	60f8      	str	r0, [r7, #12]
 801dfb0:	60b9      	str	r1, [r7, #8]
 801dfb2:	607a      	str	r2, [r7, #4]
 801dfb4:	603b      	str	r3, [r7, #0]
  rmw_node_t * node_handle = NULL;
 801dfb6:	2300      	movs	r3, #0
 801dfb8:	61fb      	str	r3, [r7, #28]

  if (!context) {
 801dfba:	683b      	ldr	r3, [r7, #0]
 801dfbc:	2b00      	cmp	r3, #0
 801dfbe:	d101      	bne.n	801dfc4 <create_node+0x1c>
    RMW_UROS_TRACE_MESSAGE("context is null");
    return NULL;
 801dfc0:	2300      	movs	r3, #0
 801dfc2:	e0b4      	b.n	801e12e <create_node+0x186>
  }

  rmw_uxrce_mempool_item_t * memory_node = get_memory(&node_memory);
 801dfc4:	485c      	ldr	r0, [pc, #368]	; (801e138 <create_node+0x190>)
 801dfc6:	f7ff f93d 	bl	801d244 <get_memory>
 801dfca:	61b8      	str	r0, [r7, #24]
  if (!memory_node) {
 801dfcc:	69bb      	ldr	r3, [r7, #24]
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d101      	bne.n	801dfd6 <create_node+0x2e>
    RMW_UROS_TRACE_MESSAGE("Not available memory node")
    return NULL;
 801dfd2:	2300      	movs	r3, #0
 801dfd4:	e0ab      	b.n	801e12e <create_node+0x186>
  }

  rmw_uxrce_node_t * custom_node = (rmw_uxrce_node_t *)memory_node->data;
 801dfd6:	69bb      	ldr	r3, [r7, #24]
 801dfd8:	68db      	ldr	r3, [r3, #12]
 801dfda:	617b      	str	r3, [r7, #20]

  custom_node->context = context->impl;
 801dfdc:	683b      	ldr	r3, [r7, #0]
 801dfde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801dfe0:	697b      	ldr	r3, [r7, #20]
 801dfe2:	611a      	str	r2, [r3, #16]

  node_handle = &custom_node->rmw_node;
 801dfe4:	697b      	ldr	r3, [r7, #20]
 801dfe6:	3318      	adds	r3, #24
 801dfe8:	61fb      	str	r3, [r7, #28]

  node_handle->implementation_identifier = rmw_get_implementation_identifier();
 801dfea:	f7ff fa17 	bl	801d41c <rmw_get_implementation_identifier>
 801dfee:	4602      	mov	r2, r0
 801dff0:	69fb      	ldr	r3, [r7, #28]
 801dff2:	601a      	str	r2, [r3, #0]
  node_handle->data = custom_node;
 801dff4:	69fb      	ldr	r3, [r7, #28]
 801dff6:	697a      	ldr	r2, [r7, #20]
 801dff8:	605a      	str	r2, [r3, #4]
  node_handle->name = custom_node->node_name;
 801dffa:	697b      	ldr	r3, [r7, #20]
 801dffc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801e000:	69fb      	ldr	r3, [r7, #28]
 801e002:	609a      	str	r2, [r3, #8]

  if ((strlen(name) + 1 ) > sizeof(custom_node->node_name)) {
 801e004:	68f8      	ldr	r0, [r7, #12]
 801e006:	f7e2 f90d 	bl	8000224 <strlen>
 801e00a:	4603      	mov	r3, r0
 801e00c:	3301      	adds	r3, #1
 801e00e:	2b80      	cmp	r3, #128	; 0x80
 801e010:	f200 8081 	bhi.w	801e116 <create_node+0x16e>
    RMW_UROS_TRACE_MESSAGE("failed to allocate string")
    goto fail;
  }

  memcpy((char *)node_handle->name, name, strlen(name) + 1);
 801e014:	69fb      	ldr	r3, [r7, #28]
 801e016:	689c      	ldr	r4, [r3, #8]
 801e018:	68f8      	ldr	r0, [r7, #12]
 801e01a:	f7e2 f903 	bl	8000224 <strlen>
 801e01e:	4603      	mov	r3, r0
 801e020:	3301      	adds	r3, #1
 801e022:	461a      	mov	r2, r3
 801e024:	68f9      	ldr	r1, [r7, #12]
 801e026:	4620      	mov	r0, r4
 801e028:	f002 fe4a 	bl	8020cc0 <memcpy>

  node_handle->namespace_ = custom_node->node_namespace;
 801e02c:	697b      	ldr	r3, [r7, #20]
 801e02e:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 801e032:	69fb      	ldr	r3, [r7, #28]
 801e034:	60da      	str	r2, [r3, #12]

  if ((strlen(namespace_) + 1 ) > sizeof(custom_node->node_namespace)) {
 801e036:	68b8      	ldr	r0, [r7, #8]
 801e038:	f7e2 f8f4 	bl	8000224 <strlen>
 801e03c:	4603      	mov	r3, r0
 801e03e:	3301      	adds	r3, #1
 801e040:	2b80      	cmp	r3, #128	; 0x80
 801e042:	d86a      	bhi.n	801e11a <create_node+0x172>
    RMW_UROS_TRACE_MESSAGE("failed to allocate string")
    goto fail;
  }

  memcpy((char *)node_handle->namespace_, namespace_, strlen(namespace_) + 1);
 801e044:	69fb      	ldr	r3, [r7, #28]
 801e046:	68dc      	ldr	r4, [r3, #12]
 801e048:	68b8      	ldr	r0, [r7, #8]
 801e04a:	f7e2 f8eb 	bl	8000224 <strlen>
 801e04e:	4603      	mov	r3, r0
 801e050:	3301      	adds	r3, #1
 801e052:	461a      	mov	r2, r3
 801e054:	68b9      	ldr	r1, [r7, #8]
 801e056:	4620      	mov	r0, r4
 801e058:	f002 fe32 	bl	8020cc0 <memcpy>

  custom_node->participant_id =
    uxr_object_id(custom_node->context->id_participant++, UXR_PARTICIPANT_ID);
 801e05c:	697b      	ldr	r3, [r7, #20]
 801e05e:	691b      	ldr	r3, [r3, #16]
 801e060:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 801e064:	f8b2 2fac 	ldrh.w	r2, [r2, #4012]	; 0xfac
 801e068:	1c51      	adds	r1, r2, #1
 801e06a:	b289      	uxth	r1, r1
 801e06c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e070:	f8a3 1fac 	strh.w	r1, [r3, #4012]	; 0xfac
 801e074:	697c      	ldr	r4, [r7, #20]
 801e076:	2101      	movs	r1, #1
 801e078:	4610      	mov	r0, r2
 801e07a:	f7f1 fd61 	bl	800fb40 <uxr_object_id>
 801e07e:	4603      	mov	r3, r0
 801e080:	6163      	str	r3, [r4, #20]
  uint16_t participant_req = UXR_INVALID_REQUEST_ID;
 801e082:	2300      	movs	r3, #0
 801e084:	827b      	strh	r3, [r7, #18]
    (uint16_t)domain_id,
    rmw_uxrce_entity_naming_buffer, UXR_REPLACE | UXR_REUSE);
#else
  static char xrce_node_name[RMW_UXRCE_NODE_NAME_MAX_LENGTH];

  if (strcmp(namespace_, "/") == 0) {
 801e086:	492d      	ldr	r1, [pc, #180]	; (801e13c <create_node+0x194>)
 801e088:	68b8      	ldr	r0, [r7, #8]
 801e08a:	f7e2 f8c1 	bl	8000210 <strcmp>
 801e08e:	4603      	mov	r3, r0
 801e090:	2b00      	cmp	r3, #0
 801e092:	d106      	bne.n	801e0a2 <create_node+0xfa>
    snprintf(xrce_node_name, RMW_UXRCE_NODE_NAME_MAX_LENGTH, "%s", name);
 801e094:	68fb      	ldr	r3, [r7, #12]
 801e096:	4a2a      	ldr	r2, [pc, #168]	; (801e140 <create_node+0x198>)
 801e098:	2180      	movs	r1, #128	; 0x80
 801e09a:	482a      	ldr	r0, [pc, #168]	; (801e144 <create_node+0x19c>)
 801e09c:	f003 ffe2 	bl	8022064 <sniprintf>
 801e0a0:	e007      	b.n	801e0b2 <create_node+0x10a>
  } else {
    snprintf(xrce_node_name, RMW_UXRCE_NODE_NAME_MAX_LENGTH, "%s/%s", namespace_, name);
 801e0a2:	68fb      	ldr	r3, [r7, #12]
 801e0a4:	9300      	str	r3, [sp, #0]
 801e0a6:	68bb      	ldr	r3, [r7, #8]
 801e0a8:	4a27      	ldr	r2, [pc, #156]	; (801e148 <create_node+0x1a0>)
 801e0aa:	2180      	movs	r1, #128	; 0x80
 801e0ac:	4825      	ldr	r0, [pc, #148]	; (801e144 <create_node+0x19c>)
 801e0ae:	f003 ffd9 	bl	8022064 <sniprintf>
  }

  participant_req = uxr_buffer_create_participant_bin(
    &custom_node->context->session,
 801e0b2:	697b      	ldr	r3, [r7, #20]
 801e0b4:	691b      	ldr	r3, [r3, #16]
  participant_req = uxr_buffer_create_participant_bin(
 801e0b6:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
    *custom_node->context->creation_stream,
 801e0ba:	697b      	ldr	r3, [r7, #20]
 801e0bc:	691b      	ldr	r3, [r3, #16]
 801e0be:	f8d3 3d9c 	ldr.w	r3, [r3, #3484]	; 0xd9c
  participant_req = uxr_buffer_create_participant_bin(
 801e0c2:	687a      	ldr	r2, [r7, #4]
 801e0c4:	b291      	uxth	r1, r2
 801e0c6:	697a      	ldr	r2, [r7, #20]
 801e0c8:	2406      	movs	r4, #6
 801e0ca:	9401      	str	r4, [sp, #4]
 801e0cc:	4c1d      	ldr	r4, [pc, #116]	; (801e144 <create_node+0x19c>)
 801e0ce:	9400      	str	r4, [sp, #0]
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	461c      	mov	r4, r3
 801e0d4:	460b      	mov	r3, r1
 801e0d6:	6952      	ldr	r2, [r2, #20]
 801e0d8:	4621      	mov	r1, r4
 801e0da:	f7f0 ffc7 	bl	800f06c <uxr_buffer_create_participant_bin>
 801e0de:	4603      	mov	r3, r0
 801e0e0:	827b      	strh	r3, [r7, #18]
    domain_id,
    xrce_node_name,
    UXR_REPLACE | UXR_REUSE);
#endif /* ifdef RMW_UXRCE_USE_REFS */

  if (!run_xrce_session(
 801e0e2:	697b      	ldr	r3, [r7, #20]
 801e0e4:	6918      	ldr	r0, [r3, #16]
      custom_node->context, custom_node->context->creation_stream, participant_req,
 801e0e6:	697b      	ldr	r3, [r7, #20]
 801e0e8:	691b      	ldr	r3, [r3, #16]
  if (!run_xrce_session(
 801e0ea:	f8d3 1d9c 	ldr.w	r1, [r3, #3484]	; 0xd9c
      custom_node->context->creation_timeout))
 801e0ee:	697b      	ldr	r3, [r7, #20]
 801e0f0:	691b      	ldr	r3, [r3, #16]
  if (!run_xrce_session(
 801e0f2:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 801e0f6:	8a7a      	ldrh	r2, [r7, #18]
 801e0f8:	f002 f978 	bl	80203ec <run_xrce_session>
 801e0fc:	4603      	mov	r3, r0
 801e0fe:	f083 0301 	eor.w	r3, r3, #1
 801e102:	b2db      	uxtb	r3, r3
 801e104:	2b00      	cmp	r3, #0
 801e106:	d004      	beq.n	801e112 <create_node+0x16a>
  {
    rmw_uxrce_fini_node_memory(node_handle);
 801e108:	69f8      	ldr	r0, [r7, #28]
 801e10a:	f001 fee9 	bl	801fee0 <rmw_uxrce_fini_node_memory>
    return NULL;
 801e10e:	2300      	movs	r3, #0
 801e110:	e00d      	b.n	801e12e <create_node+0x186>
  }

  return node_handle;
 801e112:	69fb      	ldr	r3, [r7, #28]
 801e114:	e00b      	b.n	801e12e <create_node+0x186>
    goto fail;
 801e116:	bf00      	nop
 801e118:	e000      	b.n	801e11c <create_node+0x174>
    goto fail;
 801e11a:	bf00      	nop

fail:
  if (node_handle != NULL) {
 801e11c:	69fb      	ldr	r3, [r7, #28]
 801e11e:	2b00      	cmp	r3, #0
 801e120:	d002      	beq.n	801e128 <create_node+0x180>
    rmw_uxrce_fini_node_memory(node_handle);
 801e122:	69f8      	ldr	r0, [r7, #28]
 801e124:	f001 fedc 	bl	801fee0 <rmw_uxrce_fini_node_memory>
  }
  node_handle = NULL;
 801e128:	2300      	movs	r3, #0
 801e12a:	61fb      	str	r3, [r7, #28]
  return node_handle;
 801e12c:	69fb      	ldr	r3, [r7, #28]
}
 801e12e:	4618      	mov	r0, r3
 801e130:	3724      	adds	r7, #36	; 0x24
 801e132:	46bd      	mov	sp, r7
 801e134:	bd90      	pop	{r4, r7, pc}
 801e136:	bf00      	nop
 801e138:	200108d0 	.word	0x200108d0
 801e13c:	08026f34 	.word	0x08026f34
 801e140:	08026f38 	.word	0x08026f38
 801e144:	2000e7c4 	.word	0x2000e7c4
 801e148:	08026f3c 	.word	0x08026f3c

0801e14c <rmw_create_node>:
  rmw_context_t * context,
  const char * name,
  const char * namespace_,
  size_t domain_id,
  bool localhost_only)
{
 801e14c:	b580      	push	{r7, lr}
 801e14e:	b086      	sub	sp, #24
 801e150:	af00      	add	r7, sp, #0
 801e152:	60f8      	str	r0, [r7, #12]
 801e154:	60b9      	str	r1, [r7, #8]
 801e156:	607a      	str	r2, [r7, #4]
 801e158:	603b      	str	r3, [r7, #0]
  (void)localhost_only;
  rmw_node_t * rmw_node = NULL;
 801e15a:	2300      	movs	r3, #0
 801e15c:	617b      	str	r3, [r7, #20]
  if (!name || strlen(name) == 0) {
 801e15e:	68bb      	ldr	r3, [r7, #8]
 801e160:	2b00      	cmp	r3, #0
 801e162:	d01b      	beq.n	801e19c <rmw_create_node+0x50>
 801e164:	68bb      	ldr	r3, [r7, #8]
 801e166:	781b      	ldrb	r3, [r3, #0]
 801e168:	2b00      	cmp	r3, #0
 801e16a:	d017      	beq.n	801e19c <rmw_create_node+0x50>
    RMW_UROS_TRACE_MESSAGE("name is null");
  } else if (!namespace_ || strlen(namespace_) == 0) {
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	2b00      	cmp	r3, #0
 801e170:	d014      	beq.n	801e19c <rmw_create_node+0x50>
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	781b      	ldrb	r3, [r3, #0]
 801e176:	2b00      	cmp	r3, #0
 801e178:	d010      	beq.n	801e19c <rmw_create_node+0x50>
    RMW_UROS_TRACE_MESSAGE("namespace is null");
  } else {
    if (domain_id == 0 && context->options.domain_id != 0) {
 801e17a:	683b      	ldr	r3, [r7, #0]
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	d106      	bne.n	801e18e <rmw_create_node+0x42>
 801e180:	68fb      	ldr	r3, [r7, #12]
 801e182:	69db      	ldr	r3, [r3, #28]
 801e184:	2b00      	cmp	r3, #0
 801e186:	d002      	beq.n	801e18e <rmw_create_node+0x42>
      domain_id = context->options.domain_id;
 801e188:	68fb      	ldr	r3, [r7, #12]
 801e18a:	69db      	ldr	r3, [r3, #28]
 801e18c:	603b      	str	r3, [r7, #0]
    }
    rmw_node = create_node(name, namespace_, domain_id, context);
 801e18e:	68fb      	ldr	r3, [r7, #12]
 801e190:	683a      	ldr	r2, [r7, #0]
 801e192:	6879      	ldr	r1, [r7, #4]
 801e194:	68b8      	ldr	r0, [r7, #8]
 801e196:	f7ff ff07 	bl	801dfa8 <create_node>
 801e19a:	6178      	str	r0, [r7, #20]
  }
  return rmw_node;
 801e19c:	697b      	ldr	r3, [r7, #20]
}
 801e19e:	4618      	mov	r0, r3
 801e1a0:	3718      	adds	r7, #24
 801e1a2:	46bd      	mov	sp, r7
 801e1a4:	bd80      	pop	{r7, pc}
	...

0801e1a8 <rmw_destroy_node>:

rmw_ret_t rmw_destroy_node(
  rmw_node_t * node)
{
 801e1a8:	b580      	push	{r7, lr}
 801e1aa:	b08a      	sub	sp, #40	; 0x28
 801e1ac:	af00      	add	r7, sp, #0
 801e1ae:	6078      	str	r0, [r7, #4]
  rmw_ret_t ret = RMW_RET_OK;
 801e1b0:	2300      	movs	r3, #0
 801e1b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (!node) {
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	d101      	bne.n	801e1be <rmw_destroy_node+0x16>
    RMW_UROS_TRACE_MESSAGE("node handle is null")
    return RMW_RET_ERROR;
 801e1ba:	2301      	movs	r3, #1
 801e1bc:	e0a9      	b.n	801e312 <rmw_destroy_node+0x16a>
  }

  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(node->implementation_identifier, RMW_RET_ERROR);
 801e1be:	687b      	ldr	r3, [r7, #4]
 801e1c0:	681b      	ldr	r3, [r3, #0]
 801e1c2:	2b00      	cmp	r3, #0
 801e1c4:	d00c      	beq.n	801e1e0 <rmw_destroy_node+0x38>
 801e1c6:	687b      	ldr	r3, [r7, #4]
 801e1c8:	681b      	ldr	r3, [r3, #0]
 801e1ca:	4a54      	ldr	r2, [pc, #336]	; (801e31c <rmw_destroy_node+0x174>)
 801e1cc:	6812      	ldr	r2, [r2, #0]
 801e1ce:	4611      	mov	r1, r2
 801e1d0:	4618      	mov	r0, r3
 801e1d2:	f7e2 f81d 	bl	8000210 <strcmp>
 801e1d6:	4603      	mov	r3, r0
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	d001      	beq.n	801e1e0 <rmw_destroy_node+0x38>
 801e1dc:	2301      	movs	r3, #1
 801e1de:	e098      	b.n	801e312 <rmw_destroy_node+0x16a>

  if (!node->data) {
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	685b      	ldr	r3, [r3, #4]
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d101      	bne.n	801e1ec <rmw_destroy_node+0x44>
    RMW_UROS_TRACE_MESSAGE("node impl is null")
    return RMW_RET_ERROR;
 801e1e8:	2301      	movs	r3, #1
 801e1ea:	e092      	b.n	801e312 <rmw_destroy_node+0x16a>
  }

  rmw_uxrce_node_t * custom_node = (rmw_uxrce_node_t *)node->data;
 801e1ec:	687b      	ldr	r3, [r7, #4]
 801e1ee:	685b      	ldr	r3, [r3, #4]
 801e1f0:	61fb      	str	r3, [r7, #28]
  // TODO(Pablo) make sure that other entities are removed from the pools

  rmw_uxrce_mempool_item_t * item = NULL;
 801e1f2:	2300      	movs	r3, #0
 801e1f4:	623b      	str	r3, [r7, #32]

  item = publisher_memory.allocateditems;
 801e1f6:	4b4a      	ldr	r3, [pc, #296]	; (801e320 <rmw_destroy_node+0x178>)
 801e1f8:	681b      	ldr	r3, [r3, #0]
 801e1fa:	623b      	str	r3, [r7, #32]
  while (item != NULL) {
 801e1fc:	e012      	b.n	801e224 <rmw_destroy_node+0x7c>
    rmw_uxrce_publisher_t * custom_publisher = (rmw_uxrce_publisher_t *)item->data;
 801e1fe:	6a3b      	ldr	r3, [r7, #32]
 801e200:	68db      	ldr	r3, [r3, #12]
 801e202:	60bb      	str	r3, [r7, #8]
    item = item->next;
 801e204:	6a3b      	ldr	r3, [r7, #32]
 801e206:	689b      	ldr	r3, [r3, #8]
 801e208:	623b      	str	r3, [r7, #32]
    if (custom_publisher->owner_node == custom_node) {
 801e20a:	68bb      	ldr	r3, [r7, #8]
 801e20c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e210:	69fa      	ldr	r2, [r7, #28]
 801e212:	429a      	cmp	r2, r3
 801e214:	d106      	bne.n	801e224 <rmw_destroy_node+0x7c>
      ret = rmw_destroy_publisher(node, &custom_publisher->rmw_publisher);
 801e216:	68bb      	ldr	r3, [r7, #8]
 801e218:	3384      	adds	r3, #132	; 0x84
 801e21a:	4619      	mov	r1, r3
 801e21c:	6878      	ldr	r0, [r7, #4]
 801e21e:	f000 fae9 	bl	801e7f4 <rmw_destroy_publisher>
 801e222:	6278      	str	r0, [r7, #36]	; 0x24
  while (item != NULL) {
 801e224:	6a3b      	ldr	r3, [r7, #32]
 801e226:	2b00      	cmp	r3, #0
 801e228:	d1e9      	bne.n	801e1fe <rmw_destroy_node+0x56>
    }
  }

  item = subscription_memory.allocateditems;
 801e22a:	4b3e      	ldr	r3, [pc, #248]	; (801e324 <rmw_destroy_node+0x17c>)
 801e22c:	681b      	ldr	r3, [r3, #0]
 801e22e:	623b      	str	r3, [r7, #32]
  while (item != NULL) {
 801e230:	e011      	b.n	801e256 <rmw_destroy_node+0xae>
    rmw_uxrce_subscription_t * custom_subscription = (rmw_uxrce_subscription_t *)item->data;
 801e232:	6a3b      	ldr	r3, [r7, #32]
 801e234:	68db      	ldr	r3, [r3, #12]
 801e236:	60fb      	str	r3, [r7, #12]
    item = item->next;
 801e238:	6a3b      	ldr	r3, [r7, #32]
 801e23a:	689b      	ldr	r3, [r3, #8]
 801e23c:	623b      	str	r3, [r7, #32]
    if (custom_subscription->owner_node == custom_node) {
 801e23e:	68fb      	ldr	r3, [r7, #12]
 801e240:	6a1b      	ldr	r3, [r3, #32]
 801e242:	69fa      	ldr	r2, [r7, #28]
 801e244:	429a      	cmp	r2, r3
 801e246:	d106      	bne.n	801e256 <rmw_destroy_node+0xae>
      ret = rmw_destroy_subscription(node, &custom_subscription->rmw_subscription);
 801e248:	68fb      	ldr	r3, [r7, #12]
 801e24a:	337c      	adds	r3, #124	; 0x7c
 801e24c:	4619      	mov	r1, r3
 801e24e:	6878      	ldr	r0, [r7, #4]
 801e250:	f000 ff24 	bl	801f09c <rmw_destroy_subscription>
 801e254:	6278      	str	r0, [r7, #36]	; 0x24
  while (item != NULL) {
 801e256:	6a3b      	ldr	r3, [r7, #32]
 801e258:	2b00      	cmp	r3, #0
 801e25a:	d1ea      	bne.n	801e232 <rmw_destroy_node+0x8a>
    }
  }

  item = service_memory.allocateditems;
 801e25c:	4b32      	ldr	r3, [pc, #200]	; (801e328 <rmw_destroy_node+0x180>)
 801e25e:	681b      	ldr	r3, [r3, #0]
 801e260:	623b      	str	r3, [r7, #32]
  while (item != NULL) {
 801e262:	e011      	b.n	801e288 <rmw_destroy_node+0xe0>
    rmw_uxrce_service_t * custom_service = (rmw_uxrce_service_t *)item->data;
 801e264:	6a3b      	ldr	r3, [r7, #32]
 801e266:	68db      	ldr	r3, [r3, #12]
 801e268:	613b      	str	r3, [r7, #16]
    item = item->next;
 801e26a:	6a3b      	ldr	r3, [r7, #32]
 801e26c:	689b      	ldr	r3, [r3, #8]
 801e26e:	623b      	str	r3, [r7, #32]
    if (custom_service->owner_node == custom_node) {
 801e270:	693b      	ldr	r3, [r7, #16]
 801e272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e274:	69fa      	ldr	r2, [r7, #28]
 801e276:	429a      	cmp	r2, r3
 801e278:	d106      	bne.n	801e288 <rmw_destroy_node+0xe0>
      ret = rmw_destroy_service(node, &custom_service->rmw_service);
 801e27a:	693b      	ldr	r3, [r7, #16]
 801e27c:	337c      	adds	r3, #124	; 0x7c
 801e27e:	4619      	mov	r1, r3
 801e280:	6878      	ldr	r0, [r7, #4]
 801e282:	f000 fd2b 	bl	801ecdc <rmw_destroy_service>
 801e286:	6278      	str	r0, [r7, #36]	; 0x24
  while (item != NULL) {
 801e288:	6a3b      	ldr	r3, [r7, #32]
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	d1ea      	bne.n	801e264 <rmw_destroy_node+0xbc>
    }
  }

  item = client_memory.allocateditems;
 801e28e:	4b27      	ldr	r3, [pc, #156]	; (801e32c <rmw_destroy_node+0x184>)
 801e290:	681b      	ldr	r3, [r3, #0]
 801e292:	623b      	str	r3, [r7, #32]
  while (item != NULL) {
 801e294:	e011      	b.n	801e2ba <rmw_destroy_node+0x112>
    rmw_uxrce_client_t * custom_client = (rmw_uxrce_client_t *)item->data;
 801e296:	6a3b      	ldr	r3, [r7, #32]
 801e298:	68db      	ldr	r3, [r3, #12]
 801e29a:	617b      	str	r3, [r7, #20]
    item = item->next;
 801e29c:	6a3b      	ldr	r3, [r7, #32]
 801e29e:	689b      	ldr	r3, [r3, #8]
 801e2a0:	623b      	str	r3, [r7, #32]
    if (custom_client->owner_node == custom_node) {
 801e2a2:	697b      	ldr	r3, [r7, #20]
 801e2a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e2a6:	69fa      	ldr	r2, [r7, #28]
 801e2a8:	429a      	cmp	r2, r3
 801e2aa:	d106      	bne.n	801e2ba <rmw_destroy_node+0x112>
      ret = rmw_destroy_client(node, &custom_client->rmw_client);
 801e2ac:	697b      	ldr	r3, [r7, #20]
 801e2ae:	337c      	adds	r3, #124	; 0x7c
 801e2b0:	4619      	mov	r1, r3
 801e2b2:	6878      	ldr	r0, [r7, #4]
 801e2b4:	f7ff f842 	bl	801d33c <rmw_destroy_client>
 801e2b8:	6278      	str	r0, [r7, #36]	; 0x24
  while (item != NULL) {
 801e2ba:	6a3b      	ldr	r3, [r7, #32]
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	d1ea      	bne.n	801e296 <rmw_destroy_node+0xee>
    }
  }

  uint16_t delete_participant = uxr_buffer_delete_entity(
    &custom_node->context->session,
 801e2c0:	69fb      	ldr	r3, [r7, #28]
 801e2c2:	691b      	ldr	r3, [r3, #16]
  uint16_t delete_participant = uxr_buffer_delete_entity(
 801e2c4:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
    *custom_node->context->destroy_stream,
 801e2c8:	69fb      	ldr	r3, [r7, #28]
 801e2ca:	691b      	ldr	r3, [r3, #16]
 801e2cc:	f8d3 2da0 	ldr.w	r2, [r3, #3488]	; 0xda0
  uint16_t delete_participant = uxr_buffer_delete_entity(
 801e2d0:	69fb      	ldr	r3, [r7, #28]
 801e2d2:	6812      	ldr	r2, [r2, #0]
 801e2d4:	4611      	mov	r1, r2
 801e2d6:	695a      	ldr	r2, [r3, #20]
 801e2d8:	f7f0 fe04 	bl	800eee4 <uxr_buffer_delete_entity>
 801e2dc:	4603      	mov	r3, r0
 801e2de:	837b      	strh	r3, [r7, #26]
    custom_node->participant_id);

  if (!run_xrce_session(
 801e2e0:	69fb      	ldr	r3, [r7, #28]
 801e2e2:	6918      	ldr	r0, [r3, #16]
      custom_node->context, custom_node->context->destroy_stream, delete_participant,
 801e2e4:	69fb      	ldr	r3, [r7, #28]
 801e2e6:	691b      	ldr	r3, [r3, #16]
  if (!run_xrce_session(
 801e2e8:	f8d3 1da0 	ldr.w	r1, [r3, #3488]	; 0xda0
      custom_node->context->destroy_timeout))
 801e2ec:	69fb      	ldr	r3, [r7, #28]
 801e2ee:	691b      	ldr	r3, [r3, #16]
  if (!run_xrce_session(
 801e2f0:	f8d3 3da8 	ldr.w	r3, [r3, #3496]	; 0xda8
 801e2f4:	8b7a      	ldrh	r2, [r7, #26]
 801e2f6:	f002 f879 	bl	80203ec <run_xrce_session>
 801e2fa:	4603      	mov	r3, r0
 801e2fc:	f083 0301 	eor.w	r3, r3, #1
 801e300:	b2db      	uxtb	r3, r3
 801e302:	2b00      	cmp	r3, #0
 801e304:	d001      	beq.n	801e30a <rmw_destroy_node+0x162>
  {
    ret = RMW_RET_TIMEOUT;
 801e306:	2302      	movs	r3, #2
 801e308:	627b      	str	r3, [r7, #36]	; 0x24
  }

  rmw_uxrce_fini_node_memory(node);
 801e30a:	6878      	ldr	r0, [r7, #4]
 801e30c:	f001 fde8 	bl	801fee0 <rmw_uxrce_fini_node_memory>

  return ret;
 801e310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801e312:	4618      	mov	r0, r3
 801e314:	3728      	adds	r7, #40	; 0x28
 801e316:	46bd      	mov	sp, r7
 801e318:	bd80      	pop	{r7, pc}
 801e31a:	bf00      	nop
 801e31c:	08027434 	.word	0x08027434
 801e320:	20010a60 	.word	0x20010a60
 801e324:	20010cc8 	.word	0x20010cc8
 801e328:	20010f20 	.word	0x20010f20
 801e32c:	20010f88 	.word	0x20010f88

0801e330 <rmw_node_get_graph_guard_condition>:
}

const rmw_guard_condition_t *
rmw_node_get_graph_guard_condition(
  const rmw_node_t * node)
{
 801e330:	b480      	push	{r7}
 801e332:	b087      	sub	sp, #28
 801e334:	af00      	add	r7, sp, #0
 801e336:	6078      	str	r0, [r7, #4]
  rmw_uxrce_node_t * custom_node = (rmw_uxrce_node_t *)node->data;
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	685b      	ldr	r3, [r3, #4]
 801e33c:	617b      	str	r3, [r7, #20]
  rmw_context_impl_t * context = custom_node->context;
 801e33e:	697b      	ldr	r3, [r7, #20]
 801e340:	691b      	ldr	r3, [r3, #16]
 801e342:	613b      	str	r3, [r7, #16]
  rmw_guard_condition_t * graph_guard_condition =
 801e344:	693b      	ldr	r3, [r7, #16]
 801e346:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 801e34a:	60fb      	str	r3, [r7, #12]
    &context->graph_guard_condition;

#ifdef RMW_UXRCE_GRAPH
  if (NULL == graph_guard_condition->data) {
 801e34c:	68fb      	ldr	r3, [r7, #12]
 801e34e:	685b      	ldr	r3, [r3, #4]
 801e350:	2b00      	cmp	r3, #0
 801e352:	d104      	bne.n	801e35e <rmw_node_get_graph_guard_condition+0x2e>
    graph_guard_condition->data = (void *)(&context->graph_info.has_changed);
 801e354:	693b      	ldr	r3, [r7, #16]
 801e356:	f203 5261 	addw	r2, r3, #1377	; 0x561
 801e35a:	68fb      	ldr	r3, [r7, #12]
 801e35c:	605a      	str	r2, [r3, #4]
  }
#endif  // RMW_UXRCE_GRAPH

  return graph_guard_condition;
 801e35e:	68fb      	ldr	r3, [r7, #12]
}
 801e360:	4618      	mov	r0, r3
 801e362:	371c      	adds	r7, #28
 801e364:	46bd      	mov	sp, r7
 801e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e36a:	4770      	bx	lr

0801e36c <flush_session>:
#include "./rmw_microros_internal/error_handling_internal.h"

bool flush_session(
  uxrSession * session,
  void * args)
{
 801e36c:	b580      	push	{r7, lr}
 801e36e:	b084      	sub	sp, #16
 801e370:	af00      	add	r7, sp, #0
 801e372:	6078      	str	r0, [r7, #4]
 801e374:	6039      	str	r1, [r7, #0]
  rmw_uxrce_publisher_t * custom_publisher = (rmw_uxrce_publisher_t *)args;
 801e376:	683b      	ldr	r3, [r7, #0]
 801e378:	60fb      	str	r3, [r7, #12]
  return uxr_run_session_until_confirm_delivery(session, custom_publisher->session_timeout);
 801e37a:	68fb      	ldr	r3, [r7, #12]
 801e37c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e37e:	4619      	mov	r1, r3
 801e380:	6878      	ldr	r0, [r7, #4]
 801e382:	f7f2 f8ba 	bl	80104fa <uxr_run_session_until_confirm_delivery>
 801e386:	4603      	mov	r3, r0
}
 801e388:	4618      	mov	r0, r3
 801e38a:	3710      	adds	r7, #16
 801e38c:	46bd      	mov	sp, r7
 801e38e:	bd80      	pop	{r7, pc}

0801e390 <rmw_publish>:
rmw_ret_t
rmw_publish(
  const rmw_publisher_t * publisher,
  const void * ros_message,
  rmw_publisher_allocation_t * allocation)
{
 801e390:	b5b0      	push	{r4, r5, r7, lr}
 801e392:	b096      	sub	sp, #88	; 0x58
 801e394:	af04      	add	r7, sp, #16
 801e396:	60f8      	str	r0, [r7, #12]
 801e398:	60b9      	str	r1, [r7, #8]
 801e39a:	607a      	str	r2, [r7, #4]
  (void)allocation;
  rmw_ret_t ret = RMW_RET_OK;
 801e39c:	2300      	movs	r3, #0
 801e39e:	647b      	str	r3, [r7, #68]	; 0x44
  if (!publisher) {
 801e3a0:	68fb      	ldr	r3, [r7, #12]
 801e3a2:	2b00      	cmp	r3, #0
 801e3a4:	d102      	bne.n	801e3ac <rmw_publish+0x1c>
    RMW_UROS_TRACE_MESSAGE("publisher pointer is null")
    ret = RMW_RET_ERROR;
 801e3a6:	2301      	movs	r3, #1
 801e3a8:	647b      	str	r3, [r7, #68]	; 0x44
 801e3aa:	e0b5      	b.n	801e518 <rmw_publish+0x188>
  } else if (!ros_message) {
 801e3ac:	68bb      	ldr	r3, [r7, #8]
 801e3ae:	2b00      	cmp	r3, #0
 801e3b0:	d102      	bne.n	801e3b8 <rmw_publish+0x28>
    RMW_UROS_TRACE_MESSAGE("ros_message pointer is null")
    ret = RMW_RET_ERROR;
 801e3b2:	2301      	movs	r3, #1
 801e3b4:	647b      	str	r3, [r7, #68]	; 0x44
 801e3b6:	e0af      	b.n	801e518 <rmw_publish+0x188>
  } else if (!is_uxrce_rmw_identifier_valid(publisher->implementation_identifier)) {
 801e3b8:	68fb      	ldr	r3, [r7, #12]
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	4618      	mov	r0, r3
 801e3be:	f002 fa35 	bl	802082c <is_uxrce_rmw_identifier_valid>
 801e3c2:	4603      	mov	r3, r0
 801e3c4:	f083 0301 	eor.w	r3, r3, #1
 801e3c8:	b2db      	uxtb	r3, r3
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	d002      	beq.n	801e3d4 <rmw_publish+0x44>
    RMW_UROS_TRACE_MESSAGE("publisher handle not from this implementation")
    ret = RMW_RET_ERROR;
 801e3ce:	2301      	movs	r3, #1
 801e3d0:	647b      	str	r3, [r7, #68]	; 0x44
 801e3d2:	e0a1      	b.n	801e518 <rmw_publish+0x188>
  } else if (!publisher->data) {
 801e3d4:	68fb      	ldr	r3, [r7, #12]
 801e3d6:	685b      	ldr	r3, [r3, #4]
 801e3d8:	2b00      	cmp	r3, #0
 801e3da:	d102      	bne.n	801e3e2 <rmw_publish+0x52>
    RMW_UROS_TRACE_MESSAGE("publisher imp is null");
    ret = RMW_RET_ERROR;
 801e3dc:	2301      	movs	r3, #1
 801e3de:	647b      	str	r3, [r7, #68]	; 0x44
 801e3e0:	e09a      	b.n	801e518 <rmw_publish+0x188>
  } else {
    rmw_uxrce_publisher_t * custom_publisher = (rmw_uxrce_publisher_t *)publisher->data;
 801e3e2:	68fb      	ldr	r3, [r7, #12]
 801e3e4:	685b      	ldr	r3, [r3, #4]
 801e3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    const message_type_support_callbacks_t * functions = custom_publisher->type_support_callbacks;
 801e3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e3ea:	699b      	ldr	r3, [r3, #24]
 801e3ec:	63bb      	str	r3, [r7, #56]	; 0x38
    uint32_t topic_length = functions->get_serialized_size(ros_message);
 801e3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e3f0:	691b      	ldr	r3, [r3, #16]
 801e3f2:	68b8      	ldr	r0, [r7, #8]
 801e3f4:	4798      	blx	r3
 801e3f6:	4603      	mov	r3, r0
 801e3f8:	633b      	str	r3, [r7, #48]	; 0x30

    if (custom_publisher->cs_cb_size) {
 801e3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e3fc:	69db      	ldr	r3, [r3, #28]
 801e3fe:	2b00      	cmp	r3, #0
 801e400:	d005      	beq.n	801e40e <rmw_publish+0x7e>
      custom_publisher->cs_cb_size(&topic_length);
 801e402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e404:	69db      	ldr	r3, [r3, #28]
 801e406:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801e40a:	4610      	mov	r0, r2
 801e40c:	4798      	blx	r3
    }

    ucdrBuffer mb;
    bool written = false;
 801e40e:	2300      	movs	r3, #0
 801e410:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    if (uxr_prepare_output_stream(
        &custom_publisher->owner_node->context->session,
 801e414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e41a:	691b      	ldr	r3, [r3, #16]
    if (uxr_prepare_output_stream(
 801e41c:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 801e420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e422:	f107 0410 	add.w	r4, r7, #16
 801e426:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e428:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e42a:	9300      	str	r3, [sp, #0]
 801e42c:	4623      	mov	r3, r4
 801e42e:	6952      	ldr	r2, [r2, #20]
 801e430:	6f89      	ldr	r1, [r1, #120]	; 0x78
 801e432:	f7f3 fbc9 	bl	8011bc8 <uxr_prepare_output_stream>
 801e436:	4603      	mov	r3, r0
 801e438:	2b00      	cmp	r3, #0
 801e43a:	d118      	bne.n	801e46e <rmw_publish+0xde>
        custom_publisher->stream_id, custom_publisher->datawriter_id, &mb,
        topic_length) ||
      uxr_prepare_output_stream_fragmented(
        &custom_publisher->owner_node->context->session,
 801e43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e43e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e442:	691b      	ldr	r3, [r3, #16]
      uxr_prepare_output_stream_fragmented(
 801e444:	f503 743e 	add.w	r4, r3, #760	; 0x2f8
 801e448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e44a:	f107 0510 	add.w	r5, r7, #16
 801e44e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e450:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e452:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e454:	9002      	str	r0, [sp, #8]
 801e456:	4833      	ldr	r0, [pc, #204]	; (801e524 <rmw_publish+0x194>)
 801e458:	9001      	str	r0, [sp, #4]
 801e45a:	9300      	str	r3, [sp, #0]
 801e45c:	462b      	mov	r3, r5
 801e45e:	6952      	ldr	r2, [r2, #20]
 801e460:	6f89      	ldr	r1, [r1, #120]	; 0x78
 801e462:	4620      	mov	r0, r4
 801e464:	f7f3 fccc 	bl	8011e00 <uxr_prepare_output_stream_fragmented>
 801e468:	4603      	mov	r3, r0
        topic_length) ||
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	d04b      	beq.n	801e506 <rmw_publish+0x176>
        custom_publisher->stream_id, custom_publisher->datawriter_id, &mb,
        topic_length, flush_session, custom_publisher))
    {
      written = functions->cdr_serialize(ros_message, &mb);
 801e46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e470:	689b      	ldr	r3, [r3, #8]
 801e472:	f107 0210 	add.w	r2, r7, #16
 801e476:	4611      	mov	r1, r2
 801e478:	68b8      	ldr	r0, [r7, #8]
 801e47a:	4798      	blx	r3
 801e47c:	4603      	mov	r3, r0
 801e47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      if (custom_publisher->cs_cb_serialization) {
 801e482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e484:	6a1b      	ldr	r3, [r3, #32]
 801e486:	2b00      	cmp	r3, #0
 801e488:	d005      	beq.n	801e496 <rmw_publish+0x106>
        custom_publisher->cs_cb_serialization(&mb);
 801e48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e48c:	6a1b      	ldr	r3, [r3, #32]
 801e48e:	f107 0210 	add.w	r2, r7, #16
 801e492:	4610      	mov	r0, r2
 801e494:	4798      	blx	r3
      }

      UXR_UNLOCK_STREAM_ID(
 801e496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e49c:	691b      	ldr	r3, [r3, #16]
 801e49e:	f503 723e 	add.w	r2, r3, #760	; 0x2f8
 801e4a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e4a4:	6f99      	ldr	r1, [r3, #120]	; 0x78
 801e4a6:	4610      	mov	r0, r2
 801e4a8:	f7f5 fbdd 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 801e4ac:	6378      	str	r0, [r7, #52]	; 0x34
 801e4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	d002      	beq.n	801e4ba <rmw_publish+0x12a>
 801e4b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801e4b6:	f7f5 fbc9 	bl	8013c4c <uxr_unlock>
        &custom_publisher->owner_node->context->session,
        custom_publisher->stream_id);

      if (UXR_BEST_EFFORT_STREAM == custom_publisher->stream_id.type) {
 801e4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e4bc:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 801e4c0:	2b01      	cmp	r3, #1
 801e4c2:	d109      	bne.n	801e4d8 <rmw_publish+0x148>
        uxr_flash_output_streams(&custom_publisher->owner_node->context->session);
 801e4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e4c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e4ca:	691b      	ldr	r3, [r3, #16]
 801e4cc:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801e4d0:	4618      	mov	r0, r3
 801e4d2:	f7f2 f90f 	bl	80106f4 <uxr_flash_output_streams>
 801e4d6:	e016      	b.n	801e506 <rmw_publish+0x176>
      } else {
        written &= uxr_run_session_until_confirm_delivery(
          &custom_publisher->owner_node->context->session, custom_publisher->session_timeout);
 801e4d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e4da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e4de:	691b      	ldr	r3, [r3, #16]
        written &= uxr_run_session_until_confirm_delivery(
 801e4e0:	f503 723e 	add.w	r2, r3, #760	; 0x2f8
 801e4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e4e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e4e8:	4619      	mov	r1, r3
 801e4ea:	4610      	mov	r0, r2
 801e4ec:	f7f2 f805 	bl	80104fa <uxr_run_session_until_confirm_delivery>
 801e4f0:	4603      	mov	r3, r0
 801e4f2:	461a      	mov	r2, r3
 801e4f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801e4f8:	4013      	ands	r3, r2
 801e4fa:	2b00      	cmp	r3, #0
 801e4fc:	bf14      	ite	ne
 801e4fe:	2301      	movne	r3, #1
 801e500:	2300      	moveq	r3, #0
 801e502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      }
    }
    if (!written) {
 801e506:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801e50a:	f083 0301 	eor.w	r3, r3, #1
 801e50e:	b2db      	uxtb	r3, r3
 801e510:	2b00      	cmp	r3, #0
 801e512:	d001      	beq.n	801e518 <rmw_publish+0x188>
      RMW_UROS_TRACE_MESSAGE("error publishing message")
      ret = RMW_RET_ERROR;
 801e514:	2301      	movs	r3, #1
 801e516:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 801e518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801e51a:	4618      	mov	r0, r3
 801e51c:	3748      	adds	r7, #72	; 0x48
 801e51e:	46bd      	mov	sp, r7
 801e520:	bdb0      	pop	{r4, r5, r7, pc}
 801e522:	bf00      	nop
 801e524:	0801e36d 	.word	0x0801e36d

0801e528 <rmw_create_publisher>:
  const rmw_node_t * node,
  const rosidl_message_type_support_t * type_support,
  const char * topic_name,
  const rmw_qos_profile_t * qos_policies,
  const rmw_publisher_options_t * publisher_options)
{
 801e528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e52c:	b090      	sub	sp, #64	; 0x40
 801e52e:	af04      	add	r7, sp, #16
 801e530:	60f8      	str	r0, [r7, #12]
 801e532:	60b9      	str	r1, [r7, #8]
 801e534:	607a      	str	r2, [r7, #4]
 801e536:	603b      	str	r3, [r7, #0]
  (void)publisher_options;

  rmw_publisher_t * rmw_publisher = NULL;
 801e538:	2300      	movs	r3, #0
 801e53a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (!node) {
 801e53c:	68fb      	ldr	r3, [r7, #12]
 801e53e:	2b00      	cmp	r3, #0
 801e540:	f000 812d 	beq.w	801e79e <rmw_create_publisher+0x276>
    RMW_UROS_TRACE_MESSAGE("node handle is null")
  } else if (!type_support) {
 801e544:	68bb      	ldr	r3, [r7, #8]
 801e546:	2b00      	cmp	r3, #0
 801e548:	f000 8129 	beq.w	801e79e <rmw_create_publisher+0x276>
    RMW_UROS_TRACE_MESSAGE("type support is null")
  } else if (!is_uxrce_rmw_identifier_valid(node->implementation_identifier)) {
 801e54c:	68fb      	ldr	r3, [r7, #12]
 801e54e:	681b      	ldr	r3, [r3, #0]
 801e550:	4618      	mov	r0, r3
 801e552:	f002 f96b 	bl	802082c <is_uxrce_rmw_identifier_valid>
 801e556:	4603      	mov	r3, r0
 801e558:	f083 0301 	eor.w	r3, r3, #1
 801e55c:	b2db      	uxtb	r3, r3
 801e55e:	2b00      	cmp	r3, #0
 801e560:	f040 811d 	bne.w	801e79e <rmw_create_publisher+0x276>
    RMW_UROS_TRACE_MESSAGE("node handle not from this implementation")
  } else if (!topic_name || strlen(topic_name) == 0) {
 801e564:	687b      	ldr	r3, [r7, #4]
 801e566:	2b00      	cmp	r3, #0
 801e568:	f000 8119 	beq.w	801e79e <rmw_create_publisher+0x276>
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	781b      	ldrb	r3, [r3, #0]
 801e570:	2b00      	cmp	r3, #0
 801e572:	f000 8114 	beq.w	801e79e <rmw_create_publisher+0x276>
    RMW_UROS_TRACE_MESSAGE("publisher topic is null or empty string")
  } else if (!qos_policies) {
 801e576:	683b      	ldr	r3, [r7, #0]
 801e578:	2b00      	cmp	r3, #0
 801e57a:	f000 8110 	beq.w	801e79e <rmw_create_publisher+0x276>
    RMW_UROS_TRACE_MESSAGE("qos_profile is null")
  } else {
    rmw_uxrce_node_t * custom_node = (rmw_uxrce_node_t *)node->data;
 801e57e:	68fb      	ldr	r3, [r7, #12]
 801e580:	685b      	ldr	r3, [r3, #4]
 801e582:	62bb      	str	r3, [r7, #40]	; 0x28
    rmw_uxrce_mempool_item_t * memory_node = get_memory(&publisher_memory);
 801e584:	4890      	ldr	r0, [pc, #576]	; (801e7c8 <rmw_create_publisher+0x2a0>)
 801e586:	f7fe fe5d 	bl	801d244 <get_memory>
 801e58a:	6278      	str	r0, [r7, #36]	; 0x24
    if (!memory_node) {
 801e58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d101      	bne.n	801e596 <rmw_create_publisher+0x6e>
      RMW_UROS_TRACE_MESSAGE("Not available memory node")
      return NULL;
 801e592:	2300      	movs	r3, #0
 801e594:	e112      	b.n	801e7bc <rmw_create_publisher+0x294>
    }
    rmw_uxrce_publisher_t * custom_publisher = (rmw_uxrce_publisher_t *)memory_node->data;
 801e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e598:	68db      	ldr	r3, [r3, #12]
 801e59a:	623b      	str	r3, [r7, #32]

    rmw_publisher = &custom_publisher->rmw_publisher;
 801e59c:	6a3b      	ldr	r3, [r7, #32]
 801e59e:	3384      	adds	r3, #132	; 0x84
 801e5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    rmw_publisher->data = NULL;
 801e5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5a4:	2200      	movs	r2, #0
 801e5a6:	605a      	str	r2, [r3, #4]
    rmw_publisher->implementation_identifier = rmw_get_implementation_identifier();
 801e5a8:	f7fe ff38 	bl	801d41c <rmw_get_implementation_identifier>
 801e5ac:	4602      	mov	r2, r0
 801e5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5b0:	601a      	str	r2, [r3, #0]
    rmw_publisher->topic_name = custom_publisher->topic_name;
 801e5b2:	6a3b      	ldr	r3, [r7, #32]
 801e5b4:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 801e5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5ba:	609a      	str	r2, [r3, #8]

    if ((strlen(topic_name) + 1 ) > sizeof(custom_publisher->topic_name)) {
 801e5bc:	6878      	ldr	r0, [r7, #4]
 801e5be:	f7e1 fe31 	bl	8000224 <strlen>
 801e5c2:	4603      	mov	r3, r0
 801e5c4:	3301      	adds	r3, #1
 801e5c6:	2b64      	cmp	r3, #100	; 0x64
 801e5c8:	f200 80eb 	bhi.w	801e7a2 <rmw_create_publisher+0x27a>
      RMW_UROS_TRACE_MESSAGE("failed to allocate string")
      goto fail;
    }
    snprintf(
      (char *)rmw_publisher->topic_name, sizeof(custom_publisher->topic_name), "%s",
 801e5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5ce:	6898      	ldr	r0, [r3, #8]
    snprintf(
 801e5d0:	687b      	ldr	r3, [r7, #4]
 801e5d2:	4a7e      	ldr	r2, [pc, #504]	; (801e7cc <rmw_create_publisher+0x2a4>)
 801e5d4:	2164      	movs	r1, #100	; 0x64
 801e5d6:	f003 fd45 	bl	8022064 <sniprintf>
      topic_name);

    custom_publisher->owner_node = custom_node;
 801e5da:	6a3b      	ldr	r3, [r7, #32]
 801e5dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e5de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    custom_publisher->session_timeout = RMW_UXRCE_PUBLISH_RELIABLE_TIMEOUT;
 801e5e2:	6a3b      	ldr	r3, [r7, #32]
 801e5e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e5e8:	67da      	str	r2, [r3, #124]	; 0x7c
    custom_publisher->qos = *qos_policies;
 801e5ea:	6a3b      	ldr	r3, [r7, #32]
 801e5ec:	683a      	ldr	r2, [r7, #0]
 801e5ee:	3328      	adds	r3, #40	; 0x28
 801e5f0:	4611      	mov	r1, r2
 801e5f2:	2250      	movs	r2, #80	; 0x50
 801e5f4:	4618      	mov	r0, r3
 801e5f6:	f002 fb63 	bl	8020cc0 <memcpy>

    custom_publisher->stream_id =
      (qos_policies->reliability == RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT) ?
 801e5fa:	683b      	ldr	r3, [r7, #0]
 801e5fc:	7a1b      	ldrb	r3, [r3, #8]
    custom_publisher->stream_id =
 801e5fe:	2b02      	cmp	r3, #2
 801e600:	d106      	bne.n	801e610 <rmw_create_publisher+0xe8>
      custom_node->context->best_effort_output :
 801e602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e604:	691a      	ldr	r2, [r3, #16]
    custom_publisher->stream_id =
 801e606:	6a3b      	ldr	r3, [r7, #32]
 801e608:	f8d2 2d94 	ldr.w	r2, [r2, #3476]	; 0xd94
 801e60c:	679a      	str	r2, [r3, #120]	; 0x78
 801e60e:	e005      	b.n	801e61c <rmw_create_publisher+0xf4>
      custom_node->context->reliable_output;
 801e610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e612:	691a      	ldr	r2, [r3, #16]
    custom_publisher->stream_id =
 801e614:	6a3b      	ldr	r3, [r7, #32]
 801e616:	f8d2 2d90 	ldr.w	r2, [r2, #3472]	; 0xd90
 801e61a:	679a      	str	r2, [r3, #120]	; 0x78

    custom_publisher->cs_cb_size = NULL;
 801e61c:	6a3b      	ldr	r3, [r7, #32]
 801e61e:	2200      	movs	r2, #0
 801e620:	61da      	str	r2, [r3, #28]
    custom_publisher->cs_cb_serialization = NULL;
 801e622:	6a3b      	ldr	r3, [r7, #32]
 801e624:	2200      	movs	r2, #0
 801e626:	621a      	str	r2, [r3, #32]

    const rosidl_message_type_support_t * type_support_xrce = NULL;
 801e628:	2300      	movs	r3, #0
 801e62a:	61fb      	str	r3, [r7, #28]
    if (NULL == type_support_xrce) {
      type_support_xrce = get_message_typesupport_handle(
        type_support, ROSIDL_TYPESUPPORT_MICROXRCEDDS_CPP__IDENTIFIER_VALUE);
    }
#endif /* ifdef ROSIDL_TYPESUPPORT_MICROXRCEDDS_CPP__IDENTIFIER_VALUE */
    if (NULL == type_support_xrce) {
 801e62c:	69fb      	ldr	r3, [r7, #28]
 801e62e:	2b00      	cmp	r3, #0
 801e630:	f000 80b9 	beq.w	801e7a6 <rmw_create_publisher+0x27e>
      RMW_UROS_TRACE_MESSAGE("Undefined type support")
      goto fail;
    }

    custom_publisher->type_support_callbacks =
      (const message_type_support_callbacks_t *)type_support_xrce->data;
 801e634:	69fb      	ldr	r3, [r7, #28]
 801e636:	685a      	ldr	r2, [r3, #4]
    custom_publisher->type_support_callbacks =
 801e638:	6a3b      	ldr	r3, [r7, #32]
 801e63a:	619a      	str	r2, [r3, #24]

    if (custom_publisher->type_support_callbacks == NULL) {
 801e63c:	6a3b      	ldr	r3, [r7, #32]
 801e63e:	699b      	ldr	r3, [r3, #24]
 801e640:	2b00      	cmp	r3, #0
 801e642:	f000 80b2 	beq.w	801e7aa <rmw_create_publisher+0x282>
      RMW_UROS_TRACE_MESSAGE("type support data is NULL")
      goto fail;
    }

    // Create topic
    custom_publisher->topic = create_topic(
 801e646:	6a3b      	ldr	r3, [r7, #32]
 801e648:	699a      	ldr	r2, [r3, #24]
 801e64a:	683b      	ldr	r3, [r7, #0]
 801e64c:	6879      	ldr	r1, [r7, #4]
 801e64e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e650:	f7ff fbf4 	bl	801de3c <create_topic>
 801e654:	4602      	mov	r2, r0
 801e656:	6a3b      	ldr	r3, [r7, #32]
 801e658:	625a      	str	r2, [r3, #36]	; 0x24
      custom_node, topic_name,
      custom_publisher->type_support_callbacks, qos_policies);

    if (custom_publisher->topic == NULL) {
 801e65a:	6a3b      	ldr	r3, [r7, #32]
 801e65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e65e:	2b00      	cmp	r3, #0
 801e660:	f000 80a5 	beq.w	801e7ae <rmw_create_publisher+0x286>
      goto fail;
    }

    // Create publisher
    custom_publisher->publisher_id = uxr_object_id(
      custom_node->context->id_publisher++,
 801e664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e666:	691b      	ldr	r3, [r3, #16]
 801e668:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 801e66c:	f8b2 2fb0 	ldrh.w	r2, [r2, #4016]	; 0xfb0
    custom_publisher->publisher_id = uxr_object_id(
 801e670:	1c51      	adds	r1, r2, #1
 801e672:	b289      	uxth	r1, r1
 801e674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e678:	f8a3 1fb0 	strh.w	r1, [r3, #4016]	; 0xfb0
 801e67c:	6a3c      	ldr	r4, [r7, #32]
 801e67e:	2103      	movs	r1, #3
 801e680:	4610      	mov	r0, r2
 801e682:	f7f1 fa5d 	bl	800fb40 <uxr_object_id>
 801e686:	4603      	mov	r3, r0
 801e688:	6123      	str	r3, [r4, #16]
      UXR_PUBLISHER_ID);
    uint16_t publisher_req = UXR_INVALID_REQUEST_ID;
 801e68a:	2300      	movs	r3, #0
 801e68c:	837b      	strh	r3, [r7, #26]
      *custom_node->context->creation_stream,
      custom_publisher->publisher_id,
      custom_node->participant_id, "", UXR_REPLACE | UXR_REUSE);
  #else
    publisher_req = uxr_buffer_create_publisher_bin(
      &custom_publisher->owner_node->context->session,
 801e68e:	6a3b      	ldr	r3, [r7, #32]
 801e690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e694:	691b      	ldr	r3, [r3, #16]
    publisher_req = uxr_buffer_create_publisher_bin(
 801e696:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
      *custom_node->context->creation_stream,
 801e69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e69c:	691b      	ldr	r3, [r3, #16]
 801e69e:	f8d3 1d9c 	ldr.w	r1, [r3, #3484]	; 0xd9c
    publisher_req = uxr_buffer_create_publisher_bin(
 801e6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6a4:	6a3a      	ldr	r2, [r7, #32]
 801e6a6:	2406      	movs	r4, #6
 801e6a8:	9400      	str	r4, [sp, #0]
 801e6aa:	680c      	ldr	r4, [r1, #0]
 801e6ac:	4621      	mov	r1, r4
 801e6ae:	695b      	ldr	r3, [r3, #20]
 801e6b0:	6912      	ldr	r2, [r2, #16]
 801e6b2:	f7f0 fe03 	bl	800f2bc <uxr_buffer_create_publisher_bin>
 801e6b6:	4603      	mov	r3, r0
 801e6b8:	837b      	strh	r3, [r7, #26]
      custom_publisher->publisher_id,
      custom_node->participant_id,
      UXR_REPLACE | UXR_REUSE);
  #endif /* ifdef RMW_UXRCE_USE_REFS */

    if (!run_xrce_session(
 801e6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6bc:	6918      	ldr	r0, [r3, #16]
        custom_node->context, custom_node->context->creation_stream, publisher_req,
 801e6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6c0:	691b      	ldr	r3, [r3, #16]
    if (!run_xrce_session(
 801e6c2:	f8d3 1d9c 	ldr.w	r1, [r3, #3484]	; 0xd9c
        custom_node->context->creation_timeout))
 801e6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6c8:	691b      	ldr	r3, [r3, #16]
    if (!run_xrce_session(
 801e6ca:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 801e6ce:	8b7a      	ldrh	r2, [r7, #26]
 801e6d0:	f001 fe8c 	bl	80203ec <run_xrce_session>
 801e6d4:	4603      	mov	r3, r0
 801e6d6:	f083 0301 	eor.w	r3, r3, #1
 801e6da:	b2db      	uxtb	r3, r3
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	d005      	beq.n	801e6ec <rmw_create_publisher+0x1c4>
    {
      put_memory(&publisher_memory, &custom_publisher->mem);
 801e6e0:	6a3b      	ldr	r3, [r7, #32]
 801e6e2:	4619      	mov	r1, r3
 801e6e4:	4838      	ldr	r0, [pc, #224]	; (801e7c8 <rmw_create_publisher+0x2a0>)
 801e6e6:	f7fe fde9 	bl	801d2bc <put_memory>
      goto fail;
 801e6ea:	e061      	b.n	801e7b0 <rmw_create_publisher+0x288>
    }

    rmw_publisher->data = custom_publisher;
 801e6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6ee:	6a3a      	ldr	r2, [r7, #32]
 801e6f0:	605a      	str	r2, [r3, #4]

    // Create datawriter
    custom_publisher->datawriter_id = uxr_object_id(
      custom_node->context->id_datawriter++,
 801e6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6f4:	691b      	ldr	r3, [r3, #16]
 801e6f6:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 801e6fa:	f8b2 2fb2 	ldrh.w	r2, [r2, #4018]	; 0xfb2
    custom_publisher->datawriter_id = uxr_object_id(
 801e6fe:	1c51      	adds	r1, r2, #1
 801e700:	b289      	uxth	r1, r1
 801e702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e706:	f8a3 1fb2 	strh.w	r1, [r3, #4018]	; 0xfb2
 801e70a:	6a3c      	ldr	r4, [r7, #32]
 801e70c:	2105      	movs	r1, #5
 801e70e:	4610      	mov	r0, r2
 801e710:	f7f1 fa16 	bl	800fb40 <uxr_object_id>
 801e714:	4603      	mov	r3, r0
 801e716:	6163      	str	r3, [r4, #20]
      UXR_DATAWRITER_ID);
    uint16_t datawriter_req = UXR_INVALID_REQUEST_ID;
 801e718:	2300      	movs	r3, #0
 801e71a:	833b      	strh	r3, [r7, #24]
      *custom_node->context->creation_stream,
      custom_publisher->datawriter_id,
      custom_publisher->publisher_id, rmw_uxrce_entity_naming_buffer, UXR_REPLACE | UXR_REUSE);
  #else
    datawriter_req = uxr_buffer_create_datawriter_bin(
      &custom_publisher->owner_node->context->session,
 801e71c:	6a3b      	ldr	r3, [r7, #32]
 801e71e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e722:	691b      	ldr	r3, [r3, #16]
    datawriter_req = uxr_buffer_create_datawriter_bin(
 801e724:	f503 783e 	add.w	r8, r3, #760	; 0x2f8
      *custom_node->context->creation_stream,
 801e728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e72a:	691b      	ldr	r3, [r3, #16]
 801e72c:	f8d3 5d9c 	ldr.w	r5, [r3, #3484]	; 0xd9c
      custom_publisher->datawriter_id,
      custom_publisher->publisher_id,
      custom_publisher->topic->topic_id,
 801e730:	6a3b      	ldr	r3, [r7, #32]
 801e732:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    datawriter_req = uxr_buffer_create_datawriter_bin(
 801e734:	f107 0310 	add.w	r3, r7, #16
 801e738:	6839      	ldr	r1, [r7, #0]
 801e73a:	4618      	mov	r0, r3
 801e73c:	f001 fe81 	bl	8020442 <convert_qos_profile>
 801e740:	6a3c      	ldr	r4, [r7, #32]
 801e742:	6a3a      	ldr	r2, [r7, #32]
 801e744:	2306      	movs	r3, #6
 801e746:	9303      	str	r3, [sp, #12]
 801e748:	ab01      	add	r3, sp, #4
 801e74a:	f107 0110 	add.w	r1, r7, #16
 801e74e:	c903      	ldmia	r1, {r0, r1}
 801e750:	6018      	str	r0, [r3, #0]
 801e752:	3304      	adds	r3, #4
 801e754:	8019      	strh	r1, [r3, #0]
 801e756:	6933      	ldr	r3, [r6, #16]
 801e758:	9300      	str	r3, [sp, #0]
 801e75a:	682b      	ldr	r3, [r5, #0]
 801e75c:	4619      	mov	r1, r3
 801e75e:	6923      	ldr	r3, [r4, #16]
 801e760:	6952      	ldr	r2, [r2, #20]
 801e762:	4640      	mov	r0, r8
 801e764:	f7f0 fea4 	bl	800f4b0 <uxr_buffer_create_datawriter_bin>
 801e768:	4603      	mov	r3, r0
 801e76a:	833b      	strh	r3, [r7, #24]
      convert_qos_profile(qos_policies),
      UXR_REPLACE | UXR_REUSE);
  #endif /* ifdef RMW_UXRCE_USE_REFS */

    if (!run_xrce_session(
 801e76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e76e:	6918      	ldr	r0, [r3, #16]
        custom_node->context, custom_node->context->creation_stream, datawriter_req,
 801e770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e772:	691b      	ldr	r3, [r3, #16]
    if (!run_xrce_session(
 801e774:	f8d3 1d9c 	ldr.w	r1, [r3, #3484]	; 0xd9c
        custom_node->context->creation_timeout))
 801e778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e77a:	691b      	ldr	r3, [r3, #16]
    if (!run_xrce_session(
 801e77c:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 801e780:	8b3a      	ldrh	r2, [r7, #24]
 801e782:	f001 fe33 	bl	80203ec <run_xrce_session>
 801e786:	4603      	mov	r3, r0
 801e788:	f083 0301 	eor.w	r3, r3, #1
 801e78c:	b2db      	uxtb	r3, r3
 801e78e:	2b00      	cmp	r3, #0
 801e790:	d005      	beq.n	801e79e <rmw_create_publisher+0x276>
    {
      put_memory(&publisher_memory, &custom_publisher->mem);
 801e792:	6a3b      	ldr	r3, [r7, #32]
 801e794:	4619      	mov	r1, r3
 801e796:	480c      	ldr	r0, [pc, #48]	; (801e7c8 <rmw_create_publisher+0x2a0>)
 801e798:	f7fe fd90 	bl	801d2bc <put_memory>
      goto fail;
 801e79c:	e008      	b.n	801e7b0 <rmw_create_publisher+0x288>
    }
  }

  return rmw_publisher;
 801e79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e7a0:	e00c      	b.n	801e7bc <rmw_create_publisher+0x294>
      goto fail;
 801e7a2:	bf00      	nop
 801e7a4:	e004      	b.n	801e7b0 <rmw_create_publisher+0x288>
      goto fail;
 801e7a6:	bf00      	nop
 801e7a8:	e002      	b.n	801e7b0 <rmw_create_publisher+0x288>
      goto fail;
 801e7aa:	bf00      	nop
 801e7ac:	e000      	b.n	801e7b0 <rmw_create_publisher+0x288>
      goto fail;
 801e7ae:	bf00      	nop
fail:
  rmw_uxrce_fini_publisher_memory(rmw_publisher);
 801e7b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e7b2:	f001 fbcd 	bl	801ff50 <rmw_uxrce_fini_publisher_memory>
  rmw_publisher = NULL;
 801e7b6:	2300      	movs	r3, #0
 801e7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return rmw_publisher;
 801e7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801e7bc:	4618      	mov	r0, r3
 801e7be:	3730      	adds	r7, #48	; 0x30
 801e7c0:	46bd      	mov	sp, r7
 801e7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e7c6:	bf00      	nop
 801e7c8:	20010a60 	.word	0x20010a60
 801e7cc:	08026f44 	.word	0x08026f44

0801e7d0 <rmw_publisher_get_actual_qos>:

rmw_ret_t
rmw_publisher_get_actual_qos(
  const rmw_publisher_t * publisher,
  rmw_qos_profile_t * qos)
{
 801e7d0:	b480      	push	{r7}
 801e7d2:	b085      	sub	sp, #20
 801e7d4:	af00      	add	r7, sp, #0
 801e7d6:	6078      	str	r0, [r7, #4]
 801e7d8:	6039      	str	r1, [r7, #0]
  (void)qos;

  rmw_uxrce_publisher_t * custom_publisher = (rmw_uxrce_publisher_t *)publisher->data;
 801e7da:	687b      	ldr	r3, [r7, #4]
 801e7dc:	685b      	ldr	r3, [r3, #4]
 801e7de:	60fb      	str	r3, [r7, #12]
  qos = &custom_publisher->qos;
 801e7e0:	68fb      	ldr	r3, [r7, #12]
 801e7e2:	3328      	adds	r3, #40	; 0x28
 801e7e4:	603b      	str	r3, [r7, #0]

  return RMW_RET_OK;
 801e7e6:	2300      	movs	r3, #0
}
 801e7e8:	4618      	mov	r0, r3
 801e7ea:	3714      	adds	r7, #20
 801e7ec:	46bd      	mov	sp, r7
 801e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7f2:	4770      	bx	lr

0801e7f4 <rmw_destroy_publisher>:

rmw_ret_t
rmw_destroy_publisher(
  rmw_node_t * node,
  rmw_publisher_t * publisher)
{
 801e7f4:	b580      	push	{r7, lr}
 801e7f6:	b088      	sub	sp, #32
 801e7f8:	af00      	add	r7, sp, #0
 801e7fa:	6078      	str	r0, [r7, #4]
 801e7fc:	6039      	str	r1, [r7, #0]
  rmw_ret_t result_ret = RMW_RET_OK;
 801e7fe:	2300      	movs	r3, #0
 801e800:	61fb      	str	r3, [r7, #28]
  if (!node) {
 801e802:	687b      	ldr	r3, [r7, #4]
 801e804:	2b00      	cmp	r3, #0
 801e806:	d102      	bne.n	801e80e <rmw_destroy_publisher+0x1a>
    RMW_UROS_TRACE_MESSAGE("node handle is null")
    result_ret = RMW_RET_ERROR;
 801e808:	2301      	movs	r3, #1
 801e80a:	61fb      	str	r3, [r7, #28]
 801e80c:	e093      	b.n	801e936 <rmw_destroy_publisher+0x142>
  } else if (!is_uxrce_rmw_identifier_valid(node->implementation_identifier)) {
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	681b      	ldr	r3, [r3, #0]
 801e812:	4618      	mov	r0, r3
 801e814:	f002 f80a 	bl	802082c <is_uxrce_rmw_identifier_valid>
 801e818:	4603      	mov	r3, r0
 801e81a:	f083 0301 	eor.w	r3, r3, #1
 801e81e:	b2db      	uxtb	r3, r3
 801e820:	2b00      	cmp	r3, #0
 801e822:	d002      	beq.n	801e82a <rmw_destroy_publisher+0x36>
    RMW_UROS_TRACE_MESSAGE("node handle not from this implementation")
    result_ret = RMW_RET_ERROR;
 801e824:	2301      	movs	r3, #1
 801e826:	61fb      	str	r3, [r7, #28]
 801e828:	e085      	b.n	801e936 <rmw_destroy_publisher+0x142>
  } else if (!node->data) {
 801e82a:	687b      	ldr	r3, [r7, #4]
 801e82c:	685b      	ldr	r3, [r3, #4]
 801e82e:	2b00      	cmp	r3, #0
 801e830:	d102      	bne.n	801e838 <rmw_destroy_publisher+0x44>
    RMW_UROS_TRACE_MESSAGE("node imp is null")
    result_ret = RMW_RET_ERROR;
 801e832:	2301      	movs	r3, #1
 801e834:	61fb      	str	r3, [r7, #28]
 801e836:	e07e      	b.n	801e936 <rmw_destroy_publisher+0x142>
  } else if (!publisher) {
 801e838:	683b      	ldr	r3, [r7, #0]
 801e83a:	2b00      	cmp	r3, #0
 801e83c:	d102      	bne.n	801e844 <rmw_destroy_publisher+0x50>
    RMW_UROS_TRACE_MESSAGE("publisher handle is null")
    result_ret = RMW_RET_ERROR;
 801e83e:	2301      	movs	r3, #1
 801e840:	61fb      	str	r3, [r7, #28]
 801e842:	e078      	b.n	801e936 <rmw_destroy_publisher+0x142>
  } else if (!is_uxrce_rmw_identifier_valid(publisher->implementation_identifier)) {
 801e844:	683b      	ldr	r3, [r7, #0]
 801e846:	681b      	ldr	r3, [r3, #0]
 801e848:	4618      	mov	r0, r3
 801e84a:	f001 ffef 	bl	802082c <is_uxrce_rmw_identifier_valid>
 801e84e:	4603      	mov	r3, r0
 801e850:	f083 0301 	eor.w	r3, r3, #1
 801e854:	b2db      	uxtb	r3, r3
 801e856:	2b00      	cmp	r3, #0
 801e858:	d002      	beq.n	801e860 <rmw_destroy_publisher+0x6c>
    RMW_UROS_TRACE_MESSAGE("publisher handle not from this implementation")
    result_ret = RMW_RET_ERROR;
 801e85a:	2301      	movs	r3, #1
 801e85c:	61fb      	str	r3, [r7, #28]
 801e85e:	e06a      	b.n	801e936 <rmw_destroy_publisher+0x142>
  } else if (!publisher->data) {
 801e860:	683b      	ldr	r3, [r7, #0]
 801e862:	685b      	ldr	r3, [r3, #4]
 801e864:	2b00      	cmp	r3, #0
 801e866:	d102      	bne.n	801e86e <rmw_destroy_publisher+0x7a>
    RMW_UROS_TRACE_MESSAGE("publisher imp is null")
    result_ret = RMW_RET_ERROR;
 801e868:	2301      	movs	r3, #1
 801e86a:	61fb      	str	r3, [r7, #28]
 801e86c:	e063      	b.n	801e936 <rmw_destroy_publisher+0x142>
  } else {
    rmw_uxrce_publisher_t * custom_publisher = (rmw_uxrce_publisher_t *)publisher->data;
 801e86e:	683b      	ldr	r3, [r7, #0]
 801e870:	685b      	ldr	r3, [r3, #4]
 801e872:	61bb      	str	r3, [r7, #24]
    rmw_uxrce_node_t * custom_node = custom_publisher->owner_node;
 801e874:	69bb      	ldr	r3, [r7, #24]
 801e876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e87a:	617b      	str	r3, [r7, #20]

    destroy_topic(custom_publisher->topic);
 801e87c:	69bb      	ldr	r3, [r7, #24]
 801e87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e880:	4618      	mov	r0, r3
 801e882:	f7ff fb53 	bl	801df2c <destroy_topic>

    uint16_t delete_writer = uxr_buffer_delete_entity(
      &custom_publisher->owner_node->context->session,
 801e886:	69bb      	ldr	r3, [r7, #24]
 801e888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e88c:	691b      	ldr	r3, [r3, #16]
    uint16_t delete_writer = uxr_buffer_delete_entity(
 801e88e:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
      *custom_publisher->owner_node->context->destroy_stream,
 801e892:	69bb      	ldr	r3, [r7, #24]
 801e894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e898:	691b      	ldr	r3, [r3, #16]
 801e89a:	f8d3 2da0 	ldr.w	r2, [r3, #3488]	; 0xda0
    uint16_t delete_writer = uxr_buffer_delete_entity(
 801e89e:	69bb      	ldr	r3, [r7, #24]
 801e8a0:	6812      	ldr	r2, [r2, #0]
 801e8a2:	4611      	mov	r1, r2
 801e8a4:	695a      	ldr	r2, [r3, #20]
 801e8a6:	f7f0 fb1d 	bl	800eee4 <uxr_buffer_delete_entity>
 801e8aa:	4603      	mov	r3, r0
 801e8ac:	827b      	strh	r3, [r7, #18]
      custom_publisher->datawriter_id);
    uint16_t delete_publisher = uxr_buffer_delete_entity(
      &custom_publisher->owner_node->context->session,
 801e8ae:	69bb      	ldr	r3, [r7, #24]
 801e8b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e8b4:	691b      	ldr	r3, [r3, #16]
    uint16_t delete_publisher = uxr_buffer_delete_entity(
 801e8b6:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
      *custom_publisher->owner_node->context->destroy_stream,
 801e8ba:	69bb      	ldr	r3, [r7, #24]
 801e8bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e8c0:	691b      	ldr	r3, [r3, #16]
 801e8c2:	f8d3 2da0 	ldr.w	r2, [r3, #3488]	; 0xda0
    uint16_t delete_publisher = uxr_buffer_delete_entity(
 801e8c6:	69bb      	ldr	r3, [r7, #24]
 801e8c8:	6812      	ldr	r2, [r2, #0]
 801e8ca:	4611      	mov	r1, r2
 801e8cc:	691a      	ldr	r2, [r3, #16]
 801e8ce:	f7f0 fb09 	bl	800eee4 <uxr_buffer_delete_entity>
 801e8d2:	4603      	mov	r3, r0
 801e8d4:	823b      	strh	r3, [r7, #16]
      custom_publisher->publisher_id);

    bool ret = run_xrce_session(
 801e8d6:	697b      	ldr	r3, [r7, #20]
 801e8d8:	6918      	ldr	r0, [r3, #16]
      custom_node->context, custom_node->context->destroy_stream, delete_writer,
 801e8da:	697b      	ldr	r3, [r7, #20]
 801e8dc:	691b      	ldr	r3, [r3, #16]
    bool ret = run_xrce_session(
 801e8de:	f8d3 1da0 	ldr.w	r1, [r3, #3488]	; 0xda0
      custom_node->context->destroy_timeout);
 801e8e2:	697b      	ldr	r3, [r7, #20]
 801e8e4:	691b      	ldr	r3, [r3, #16]
    bool ret = run_xrce_session(
 801e8e6:	f8d3 3da8 	ldr.w	r3, [r3, #3496]	; 0xda8
 801e8ea:	8a7a      	ldrh	r2, [r7, #18]
 801e8ec:	f001 fd7e 	bl	80203ec <run_xrce_session>
 801e8f0:	4603      	mov	r3, r0
 801e8f2:	73fb      	strb	r3, [r7, #15]
    ret &= run_xrce_session(
 801e8f4:	697b      	ldr	r3, [r7, #20]
 801e8f6:	6918      	ldr	r0, [r3, #16]
      custom_node->context, custom_node->context->destroy_stream, delete_publisher,
 801e8f8:	697b      	ldr	r3, [r7, #20]
 801e8fa:	691b      	ldr	r3, [r3, #16]
    ret &= run_xrce_session(
 801e8fc:	f8d3 1da0 	ldr.w	r1, [r3, #3488]	; 0xda0
      custom_node->context->destroy_timeout);
 801e900:	697b      	ldr	r3, [r7, #20]
 801e902:	691b      	ldr	r3, [r3, #16]
    ret &= run_xrce_session(
 801e904:	f8d3 3da8 	ldr.w	r3, [r3, #3496]	; 0xda8
 801e908:	8a3a      	ldrh	r2, [r7, #16]
 801e90a:	f001 fd6f 	bl	80203ec <run_xrce_session>
 801e90e:	4603      	mov	r3, r0
 801e910:	461a      	mov	r2, r3
 801e912:	7bfb      	ldrb	r3, [r7, #15]
 801e914:	4013      	ands	r3, r2
 801e916:	2b00      	cmp	r3, #0
 801e918:	bf14      	ite	ne
 801e91a:	2301      	movne	r3, #1
 801e91c:	2300      	moveq	r3, #0
 801e91e:	73fb      	strb	r3, [r7, #15]
    if (!ret) {
 801e920:	7bfb      	ldrb	r3, [r7, #15]
 801e922:	f083 0301 	eor.w	r3, r3, #1
 801e926:	b2db      	uxtb	r3, r3
 801e928:	2b00      	cmp	r3, #0
 801e92a:	d001      	beq.n	801e930 <rmw_destroy_publisher+0x13c>
      result_ret = RMW_RET_TIMEOUT;
 801e92c:	2302      	movs	r3, #2
 801e92e:	61fb      	str	r3, [r7, #28]
    }

    rmw_uxrce_fini_publisher_memory(publisher);
 801e930:	6838      	ldr	r0, [r7, #0]
 801e932:	f001 fb0d 	bl	801ff50 <rmw_uxrce_fini_publisher_memory>
  }

  return result_ret;
 801e936:	69fb      	ldr	r3, [r7, #28]
}
 801e938:	4618      	mov	r0, r3
 801e93a:	3720      	adds	r7, #32
 801e93c:	46bd      	mov	sp, r7
 801e93e:	bd80      	pop	{r7, pc}

0801e940 <rmw_take_request>:
rmw_take_request(
  const rmw_service_t * service,
  rmw_service_info_t * request_header,
  void * ros_request,
  bool * taken)
{
 801e940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e944:	b092      	sub	sp, #72	; 0x48
 801e946:	af00      	add	r7, sp, #0
 801e948:	60f8      	str	r0, [r7, #12]
 801e94a:	60b9      	str	r1, [r7, #8]
 801e94c:	607a      	str	r2, [r7, #4]
 801e94e:	603b      	str	r3, [r7, #0]
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(
 801e950:	68fb      	ldr	r3, [r7, #12]
 801e952:	681b      	ldr	r3, [r3, #0]
 801e954:	2b00      	cmp	r3, #0
 801e956:	d00c      	beq.n	801e972 <rmw_take_request+0x32>
 801e958:	68fb      	ldr	r3, [r7, #12]
 801e95a:	681b      	ldr	r3, [r3, #0]
 801e95c:	4a4a      	ldr	r2, [pc, #296]	; (801ea88 <rmw_take_request+0x148>)
 801e95e:	6812      	ldr	r2, [r2, #0]
 801e960:	4611      	mov	r1, r2
 801e962:	4618      	mov	r0, r3
 801e964:	f7e1 fc54 	bl	8000210 <strcmp>
 801e968:	4603      	mov	r3, r0
 801e96a:	2b00      	cmp	r3, #0
 801e96c:	d001      	beq.n	801e972 <rmw_take_request+0x32>
 801e96e:	230c      	movs	r3, #12
 801e970:	e084      	b.n	801ea7c <rmw_take_request+0x13c>
    service->implementation_identifier,
    RMW_RET_INCORRECT_RMW_IMPLEMENTATION);

  if (taken != NULL) {
 801e972:	683b      	ldr	r3, [r7, #0]
 801e974:	2b00      	cmp	r3, #0
 801e976:	d002      	beq.n	801e97e <rmw_take_request+0x3e>
    *taken = false;
 801e978:	683b      	ldr	r3, [r7, #0]
 801e97a:	2200      	movs	r2, #0
 801e97c:	701a      	strb	r2, [r3, #0]
  }

  rmw_uxrce_service_t * custom_service = (rmw_uxrce_service_t *)service->data;
 801e97e:	68fb      	ldr	r3, [r7, #12]
 801e980:	685b      	ldr	r3, [r3, #4]
 801e982:	647b      	str	r3, [r7, #68]	; 0x44

  rmw_uxrce_clean_expired_static_input_buffer();
 801e984:	f001 fc84 	bl	8020290 <rmw_uxrce_clean_expired_static_input_buffer>

  UXR_LOCK(&static_buffer_memory.mutex);
 801e988:	4840      	ldr	r0, [pc, #256]	; (801ea8c <rmw_take_request+0x14c>)
 801e98a:	f7f5 f950 	bl	8013c2e <uxr_lock>

  // Find first related item in static buffer memory pool
  rmw_uxrce_mempool_item_t * static_buffer_item =
    rmw_uxrce_find_static_input_buffer_by_owner((void *) custom_service);
 801e98e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801e990:	f001 fc3c 	bl	802020c <rmw_uxrce_find_static_input_buffer_by_owner>
 801e994:	6438      	str	r0, [r7, #64]	; 0x40
  if (static_buffer_item == NULL) {
 801e996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e998:	2b00      	cmp	r3, #0
 801e99a:	d104      	bne.n	801e9a6 <rmw_take_request+0x66>
    UXR_UNLOCK(&static_buffer_memory.mutex);
 801e99c:	483b      	ldr	r0, [pc, #236]	; (801ea8c <rmw_take_request+0x14c>)
 801e99e:	f7f5 f955 	bl	8013c4c <uxr_unlock>
    return RMW_RET_ERROR;
 801e9a2:	2301      	movs	r3, #1
 801e9a4:	e06a      	b.n	801ea7c <rmw_take_request+0x13c>
  }

  rmw_uxrce_static_input_buffer_t * static_buffer =
 801e9a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e9a8:	68db      	ldr	r3, [r3, #12]
 801e9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    (rmw_uxrce_static_input_buffer_t *)static_buffer_item->data;

  // Conversion from SampleIdentity to rmw_request_id_t
  request_header->request_id.sequence_number =
    (((int64_t)static_buffer->related.sample_id.sequence_number.high) << 32) |
 801e9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e9ae:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
 801e9b2:	17da      	asrs	r2, r3, #31
 801e9b4:	469a      	mov	sl, r3
 801e9b6:	4693      	mov	fp, r2
 801e9b8:	f04f 0200 	mov.w	r2, #0
 801e9bc:	f04f 0300 	mov.w	r3, #0
 801e9c0:	4653      	mov	r3, sl
 801e9c2:	2200      	movs	r2, #0
    static_buffer->related.sample_id.sequence_number.low;
 801e9c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e9c6:	f8d1 183c 	ldr.w	r1, [r1, #2108]	; 0x83c
 801e9ca:	2000      	movs	r0, #0
 801e9cc:	460c      	mov	r4, r1
 801e9ce:	4605      	mov	r5, r0
    (((int64_t)static_buffer->related.sample_id.sequence_number.high) << 32) |
 801e9d0:	ea42 0804 	orr.w	r8, r2, r4
 801e9d4:	ea43 0905 	orr.w	r9, r3, r5
  request_header->request_id.sequence_number =
 801e9d8:	68bb      	ldr	r3, [r7, #8]
 801e9da:	e9c3 8908 	strd	r8, r9, [r3, #32]
  request_header->request_id.writer_guid[0] =
    (int8_t)static_buffer->related.sample_id.writer_guid.entityId.entityKind;
 801e9de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e9e0:	f893 3837 	ldrb.w	r3, [r3, #2103]	; 0x837
 801e9e4:	b25a      	sxtb	r2, r3
  request_header->request_id.writer_guid[0] =
 801e9e6:	68bb      	ldr	r3, [r7, #8]
 801e9e8:	741a      	strb	r2, [r3, #16]

  memcpy(
    &request_header->request_id.writer_guid[1],
 801e9ea:	68bb      	ldr	r3, [r7, #8]
 801e9ec:	f103 0011 	add.w	r0, r3, #17
    static_buffer->related.sample_id.writer_guid.entityId.entityKey,
 801e9f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e9f2:	f603 0334 	addw	r3, r3, #2100	; 0x834
  memcpy(
 801e9f6:	2203      	movs	r2, #3
 801e9f8:	4619      	mov	r1, r3
 801e9fa:	f002 f961 	bl	8020cc0 <memcpy>
    3);
  memcpy(
    &request_header->request_id.writer_guid[4],
 801e9fe:	68bb      	ldr	r3, [r7, #8]
 801ea00:	f103 0014 	add.w	r0, r3, #20
    static_buffer->related.sample_id.writer_guid.guidPrefix.data, 12);
 801ea04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ea06:	f603 0328 	addw	r3, r3, #2088	; 0x828
  memcpy(
 801ea0a:	220c      	movs	r2, #12
 801ea0c:	4619      	mov	r1, r3
 801ea0e:	f002 f957 	bl	8020cc0 <memcpy>

  const rosidl_message_type_support_t * req_members =
    custom_service->type_support_callbacks->request_members_();
 801ea12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ea14:	695b      	ldr	r3, [r3, #20]
 801ea16:	689b      	ldr	r3, [r3, #8]
 801ea18:	4798      	blx	r3
 801ea1a:	63b8      	str	r0, [r7, #56]	; 0x38
  const message_type_support_callbacks_t * functions =
 801ea1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ea1e:	685b      	ldr	r3, [r3, #4]
 801ea20:	637b      	str	r3, [r7, #52]	; 0x34
    (const message_type_support_callbacks_t *)req_members->data;

  ucdrBuffer temp_buffer;
  ucdr_init_buffer(
    &temp_buffer,
    static_buffer->buffer,
 801ea22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ea24:	f103 0110 	add.w	r1, r3, #16
  ucdr_init_buffer(
 801ea28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ea2a:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 801ea2e:	f107 0310 	add.w	r3, r7, #16
 801ea32:	4618      	mov	r0, r3
 801ea34:	f7eb fbd3 	bl	800a1de <ucdr_init_buffer>
    static_buffer->length);

  bool deserialize_rv = functions->cdr_deserialize(&temp_buffer, ros_request);
 801ea38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ea3a:	68db      	ldr	r3, [r3, #12]
 801ea3c:	f107 0210 	add.w	r2, r7, #16
 801ea40:	6879      	ldr	r1, [r7, #4]
 801ea42:	4610      	mov	r0, r2
 801ea44:	4798      	blx	r3
 801ea46:	4603      	mov	r3, r0
 801ea48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  put_memory(&static_buffer_memory, static_buffer_item);
 801ea4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801ea4e:	4810      	ldr	r0, [pc, #64]	; (801ea90 <rmw_take_request+0x150>)
 801ea50:	f7fe fc34 	bl	801d2bc <put_memory>

  UXR_UNLOCK(&static_buffer_memory.mutex);
 801ea54:	480d      	ldr	r0, [pc, #52]	; (801ea8c <rmw_take_request+0x14c>)
 801ea56:	f7f5 f8f9 	bl	8013c4c <uxr_unlock>

  if (taken != NULL) {
 801ea5a:	683b      	ldr	r3, [r7, #0]
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	d003      	beq.n	801ea68 <rmw_take_request+0x128>
    *taken = deserialize_rv;
 801ea60:	683b      	ldr	r3, [r7, #0]
 801ea62:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801ea66:	701a      	strb	r2, [r3, #0]
  }

  if (!deserialize_rv) {
 801ea68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801ea6c:	f083 0301 	eor.w	r3, r3, #1
 801ea70:	b2db      	uxtb	r3, r3
 801ea72:	2b00      	cmp	r3, #0
 801ea74:	d001      	beq.n	801ea7a <rmw_take_request+0x13a>
    RMW_UROS_TRACE_MESSAGE("Typesupport desserialize error.")
    return RMW_RET_ERROR;
 801ea76:	2301      	movs	r3, #1
 801ea78:	e000      	b.n	801ea7c <rmw_take_request+0x13c>
  }

  return RMW_RET_OK;
 801ea7a:	2300      	movs	r3, #0
}
 801ea7c:	4618      	mov	r0, r3
 801ea7e:	3748      	adds	r7, #72	; 0x48
 801ea80:	46bd      	mov	sp, r7
 801ea82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ea86:	bf00      	nop
 801ea88:	08027434 	.word	0x08027434
 801ea8c:	200110d4 	.word	0x200110d4
 801ea90:	200110c4 	.word	0x200110c4

0801ea94 <rmw_send_response>:
rmw_ret_t
rmw_send_response(
  const rmw_service_t * service,
  rmw_request_id_t * request_header,
  void * ros_response)
{
 801ea94:	b590      	push	{r4, r7, lr}
 801ea96:	b09d      	sub	sp, #116	; 0x74
 801ea98:	af02      	add	r7, sp, #8
 801ea9a:	60f8      	str	r0, [r7, #12]
 801ea9c:	60b9      	str	r1, [r7, #8]
 801ea9e:	607a      	str	r2, [r7, #4]
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(
 801eaa0:	68fb      	ldr	r3, [r7, #12]
 801eaa2:	681b      	ldr	r3, [r3, #0]
 801eaa4:	2b00      	cmp	r3, #0
 801eaa6:	d00c      	beq.n	801eac2 <rmw_send_response+0x2e>
 801eaa8:	68fb      	ldr	r3, [r7, #12]
 801eaaa:	681b      	ldr	r3, [r3, #0]
 801eaac:	4a4c      	ldr	r2, [pc, #304]	; (801ebe0 <rmw_send_response+0x14c>)
 801eaae:	6812      	ldr	r2, [r2, #0]
 801eab0:	4611      	mov	r1, r2
 801eab2:	4618      	mov	r0, r3
 801eab4:	f7e1 fbac 	bl	8000210 <strcmp>
 801eab8:	4603      	mov	r3, r0
 801eaba:	2b00      	cmp	r3, #0
 801eabc:	d001      	beq.n	801eac2 <rmw_send_response+0x2e>
 801eabe:	230c      	movs	r3, #12
 801eac0:	e089      	b.n	801ebd6 <rmw_send_response+0x142>
    service->implementation_identifier,
    RMW_RET_INCORRECT_RMW_IMPLEMENTATION);

  rmw_uxrce_service_t * custom_service = (rmw_uxrce_service_t *)service->data;
 801eac2:	68fb      	ldr	r3, [r7, #12]
 801eac4:	685b      	ldr	r3, [r3, #4]
 801eac6:	667b      	str	r3, [r7, #100]	; 0x64
  rmw_uxrce_node_t * custom_node = custom_service->owner_node;
 801eac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801eaca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801eacc:	663b      	str	r3, [r7, #96]	; 0x60

  // Conversion from rmw_request_id_t to SampleIdentity
  SampleIdentity sample_id;
  sample_id.sequence_number.high = (int32_t)(request_header->sequence_number >> 32);
 801eace:	68bb      	ldr	r3, [r7, #8]
 801ead0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801ead4:	f04f 0200 	mov.w	r2, #0
 801ead8:	f04f 0300 	mov.w	r3, #0
 801eadc:	000a      	movs	r2, r1
 801eade:	17cb      	asrs	r3, r1, #31
 801eae0:	4613      	mov	r3, r2
 801eae2:	647b      	str	r3, [r7, #68]	; 0x44
  sample_id.sequence_number.low = (uint32_t)request_header->sequence_number & 0xFFFFFFFF;
 801eae4:	68bb      	ldr	r3, [r7, #8]
 801eae6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801eaea:	4613      	mov	r3, r2
 801eaec:	64bb      	str	r3, [r7, #72]	; 0x48
  sample_id.writer_guid.entityId.entityKind = (uint8_t)request_header->writer_guid[0];
 801eaee:	68bb      	ldr	r3, [r7, #8]
 801eaf0:	f993 3000 	ldrsb.w	r3, [r3]
 801eaf4:	b2db      	uxtb	r3, r3
 801eaf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  memcpy(
    sample_id.writer_guid.entityId.entityKey, &request_header->writer_guid[1],
 801eafa:	68bb      	ldr	r3, [r7, #8]
 801eafc:	1c5a      	adds	r2, r3, #1
  memcpy(
 801eafe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801eb02:	8811      	ldrh	r1, [r2, #0]
 801eb04:	7892      	ldrb	r2, [r2, #2]
 801eb06:	8019      	strh	r1, [r3, #0]
 801eb08:	709a      	strb	r2, [r3, #2]
    sizeof(sample_id.writer_guid.entityId.entityKey));
  memcpy(
    sample_id.writer_guid.guidPrefix.data, &request_header->writer_guid[4],
 801eb0a:	68bb      	ldr	r3, [r7, #8]
 801eb0c:	1d1a      	adds	r2, r3, #4
  memcpy(
 801eb0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801eb12:	6810      	ldr	r0, [r2, #0]
 801eb14:	6851      	ldr	r1, [r2, #4]
 801eb16:	6892      	ldr	r2, [r2, #8]
 801eb18:	c307      	stmia	r3!, {r0, r1, r2}
    sizeof(sample_id.writer_guid.guidPrefix.data));

  const rosidl_message_type_support_t * res_members =
    custom_service->type_support_callbacks->response_members_();
 801eb1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801eb1c:	695b      	ldr	r3, [r3, #20]
 801eb1e:	68db      	ldr	r3, [r3, #12]
 801eb20:	4798      	blx	r3
 801eb22:	65f8      	str	r0, [r7, #92]	; 0x5c
  const message_type_support_callbacks_t * functions =
 801eb24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801eb26:	685b      	ldr	r3, [r3, #4]
 801eb28:	65bb      	str	r3, [r7, #88]	; 0x58
    (const message_type_support_callbacks_t *)res_members->data;

  ucdrBuffer mb;
  uint32_t response_length =
    functions->get_serialized_size(ros_response) + 24;  // Adding sample indentity size
 801eb2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801eb2c:	691b      	ldr	r3, [r3, #16]
 801eb2e:	6878      	ldr	r0, [r7, #4]
 801eb30:	4798      	blx	r3
 801eb32:	4603      	mov	r3, r0
  uint32_t response_length =
 801eb34:	3318      	adds	r3, #24
 801eb36:	657b      	str	r3, [r7, #84]	; 0x54
  uint16_t rc = uxr_prepare_output_stream(
    &custom_node->context->session,
 801eb38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801eb3a:	691b      	ldr	r3, [r3, #16]
  uint16_t rc = uxr_prepare_output_stream(
 801eb3c:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 801eb40:	f107 0414 	add.w	r4, r7, #20
 801eb44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801eb46:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801eb48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eb4a:	9300      	str	r3, [sp, #0]
 801eb4c:	4623      	mov	r3, r4
 801eb4e:	6912      	ldr	r2, [r2, #16]
 801eb50:	6f09      	ldr	r1, [r1, #112]	; 0x70
 801eb52:	f7f3 f839 	bl	8011bc8 <uxr_prepare_output_stream>
 801eb56:	4603      	mov	r3, r0
 801eb58:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    custom_service->stream_id, custom_service->service_id, &mb,
    response_length);

  if (UXR_INVALID_REQUEST_ID == rc) {
 801eb5c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801eb60:	2b00      	cmp	r3, #0
 801eb62:	d101      	bne.n	801eb68 <rmw_send_response+0xd4>
    RMW_UROS_TRACE_MESSAGE("Micro XRCE-DDS service response error.")
    return RMW_RET_ERROR;
 801eb64:	2301      	movs	r3, #1
 801eb66:	e036      	b.n	801ebd6 <rmw_send_response+0x142>
  }

  uxr_serialize_SampleIdentity(&mb, &sample_id);
 801eb68:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801eb6c:	f107 0314 	add.w	r3, r7, #20
 801eb70:	4611      	mov	r1, r2
 801eb72:	4618      	mov	r0, r3
 801eb74:	f7f0 f964 	bl	800ee40 <uxr_serialize_SampleIdentity>
  functions->cdr_serialize(ros_response, &mb);
 801eb78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801eb7a:	689b      	ldr	r3, [r3, #8]
 801eb7c:	f107 0214 	add.w	r2, r7, #20
 801eb80:	4611      	mov	r1, r2
 801eb82:	6878      	ldr	r0, [r7, #4]
 801eb84:	4798      	blx	r3

  UXR_UNLOCK_STREAM_ID(&custom_node->context->session, custom_service->stream_id);
 801eb86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801eb88:	691b      	ldr	r3, [r3, #16]
 801eb8a:	f503 723e 	add.w	r2, r3, #760	; 0x2f8
 801eb8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801eb90:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801eb92:	4610      	mov	r0, r2
 801eb94:	f7f5 f867 	bl	8013c66 <uxr_get_stream_mutex_from_id>
 801eb98:	64f8      	str	r0, [r7, #76]	; 0x4c
 801eb9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801eb9c:	2b00      	cmp	r3, #0
 801eb9e:	d002      	beq.n	801eba6 <rmw_send_response+0x112>
 801eba0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801eba2:	f7f5 f853 	bl	8013c4c <uxr_unlock>

  if (UXR_BEST_EFFORT_STREAM == custom_service->stream_id.type) {
 801eba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801eba8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 801ebac:	2b01      	cmp	r3, #1
 801ebae:	d107      	bne.n	801ebc0 <rmw_send_response+0x12c>
    uxr_flash_output_streams(&custom_node->context->session);
 801ebb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ebb2:	691b      	ldr	r3, [r3, #16]
 801ebb4:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801ebb8:	4618      	mov	r0, r3
 801ebba:	f7f1 fd9b 	bl	80106f4 <uxr_flash_output_streams>
 801ebbe:	e009      	b.n	801ebd4 <rmw_send_response+0x140>
  } else {
    uxr_run_session_until_confirm_delivery(
      &custom_node->context->session, custom_service->session_timeout);
 801ebc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ebc2:	691b      	ldr	r3, [r3, #16]
    uxr_run_session_until_confirm_delivery(
 801ebc4:	f503 723e 	add.w	r2, r3, #760	; 0x2f8
 801ebc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ebca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ebcc:	4619      	mov	r1, r3
 801ebce:	4610      	mov	r0, r2
 801ebd0:	f7f1 fc93 	bl	80104fa <uxr_run_session_until_confirm_delivery>
  }

  return RMW_RET_OK;
 801ebd4:	2300      	movs	r3, #0
}
 801ebd6:	4618      	mov	r0, r3
 801ebd8:	376c      	adds	r7, #108	; 0x6c
 801ebda:	46bd      	mov	sp, r7
 801ebdc:	bd90      	pop	{r4, r7, pc}
 801ebde:	bf00      	nop
 801ebe0:	08027434 	.word	0x08027434

0801ebe4 <rmw_take_response>:
rmw_take_response(
  const rmw_client_t * client,
  rmw_service_info_t * request_header,
  void * ros_response,
  bool * taken)
{
 801ebe4:	b580      	push	{r7, lr}
 801ebe6:	b092      	sub	sp, #72	; 0x48
 801ebe8:	af00      	add	r7, sp, #0
 801ebea:	60f8      	str	r0, [r7, #12]
 801ebec:	60b9      	str	r1, [r7, #8]
 801ebee:	607a      	str	r2, [r7, #4]
 801ebf0:	603b      	str	r3, [r7, #0]
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(
 801ebf2:	68fb      	ldr	r3, [r7, #12]
 801ebf4:	681b      	ldr	r3, [r3, #0]
 801ebf6:	2b00      	cmp	r3, #0
 801ebf8:	d00c      	beq.n	801ec14 <rmw_take_response+0x30>
 801ebfa:	68fb      	ldr	r3, [r7, #12]
 801ebfc:	681b      	ldr	r3, [r3, #0]
 801ebfe:	4a34      	ldr	r2, [pc, #208]	; (801ecd0 <rmw_take_response+0xec>)
 801ec00:	6812      	ldr	r2, [r2, #0]
 801ec02:	4611      	mov	r1, r2
 801ec04:	4618      	mov	r0, r3
 801ec06:	f7e1 fb03 	bl	8000210 <strcmp>
 801ec0a:	4603      	mov	r3, r0
 801ec0c:	2b00      	cmp	r3, #0
 801ec0e:	d001      	beq.n	801ec14 <rmw_take_response+0x30>
 801ec10:	230c      	movs	r3, #12
 801ec12:	e059      	b.n	801ecc8 <rmw_take_response+0xe4>
    client->implementation_identifier,
    RMW_RET_INCORRECT_RMW_IMPLEMENTATION);

  if (taken != NULL) {
 801ec14:	683b      	ldr	r3, [r7, #0]
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	d002      	beq.n	801ec20 <rmw_take_response+0x3c>
    *taken = false;
 801ec1a:	683b      	ldr	r3, [r7, #0]
 801ec1c:	2200      	movs	r2, #0
 801ec1e:	701a      	strb	r2, [r3, #0]
  }

  rmw_uxrce_client_t * custom_client = (rmw_uxrce_client_t *)client->data;
 801ec20:	68fb      	ldr	r3, [r7, #12]
 801ec22:	685b      	ldr	r3, [r3, #4]
 801ec24:	647b      	str	r3, [r7, #68]	; 0x44

  rmw_uxrce_clean_expired_static_input_buffer();
 801ec26:	f001 fb33 	bl	8020290 <rmw_uxrce_clean_expired_static_input_buffer>

  UXR_LOCK(&static_buffer_memory.mutex);
 801ec2a:	482a      	ldr	r0, [pc, #168]	; (801ecd4 <rmw_take_response+0xf0>)
 801ec2c:	f7f4 ffff 	bl	8013c2e <uxr_lock>

  // Find first related item in static buffer memory pool
  rmw_uxrce_mempool_item_t * static_buffer_item =
    rmw_uxrce_find_static_input_buffer_by_owner((void *) custom_client);
 801ec30:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801ec32:	f001 faeb 	bl	802020c <rmw_uxrce_find_static_input_buffer_by_owner>
 801ec36:	6438      	str	r0, [r7, #64]	; 0x40
  if (static_buffer_item == NULL) {
 801ec38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ec3a:	2b00      	cmp	r3, #0
 801ec3c:	d104      	bne.n	801ec48 <rmw_take_response+0x64>
    UXR_UNLOCK(&static_buffer_memory.mutex);
 801ec3e:	4825      	ldr	r0, [pc, #148]	; (801ecd4 <rmw_take_response+0xf0>)
 801ec40:	f7f5 f804 	bl	8013c4c <uxr_unlock>
    return RMW_RET_ERROR;
 801ec44:	2301      	movs	r3, #1
 801ec46:	e03f      	b.n	801ecc8 <rmw_take_response+0xe4>
  }

  rmw_uxrce_static_input_buffer_t * static_buffer =
 801ec48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ec4a:	68db      	ldr	r3, [r3, #12]
 801ec4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    (rmw_uxrce_static_input_buffer_t *)static_buffer_item->data;

  request_header->request_id.sequence_number = static_buffer->related.reply_id;
 801ec4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ec50:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 801ec54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ec58:	68b9      	ldr	r1, [r7, #8]
 801ec5a:	e9c1 2308 	strd	r2, r3, [r1, #32]

  const rosidl_message_type_support_t * res_members =
    custom_client->type_support_callbacks->response_members_();
 801ec5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ec60:	695b      	ldr	r3, [r3, #20]
 801ec62:	68db      	ldr	r3, [r3, #12]
 801ec64:	4798      	blx	r3
 801ec66:	63b8      	str	r0, [r7, #56]	; 0x38
  const message_type_support_callbacks_t * functions =
 801ec68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ec6a:	685b      	ldr	r3, [r3, #4]
 801ec6c:	637b      	str	r3, [r7, #52]	; 0x34
    (const message_type_support_callbacks_t *)res_members->data;

  ucdrBuffer temp_buffer;
  ucdr_init_buffer(
    &temp_buffer,
    static_buffer->buffer,
 801ec6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ec70:	f103 0110 	add.w	r1, r3, #16
  ucdr_init_buffer(
 801ec74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ec76:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 801ec7a:	f107 0310 	add.w	r3, r7, #16
 801ec7e:	4618      	mov	r0, r3
 801ec80:	f7eb faad 	bl	800a1de <ucdr_init_buffer>
    static_buffer->length);

  bool deserialize_rv = functions->cdr_deserialize(
 801ec84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ec86:	68db      	ldr	r3, [r3, #12]
 801ec88:	f107 0210 	add.w	r2, r7, #16
 801ec8c:	6879      	ldr	r1, [r7, #4]
 801ec8e:	4610      	mov	r0, r2
 801ec90:	4798      	blx	r3
 801ec92:	4603      	mov	r3, r0
 801ec94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    &temp_buffer,
    ros_response);

  put_memory(&static_buffer_memory, static_buffer_item);
 801ec98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801ec9a:	480f      	ldr	r0, [pc, #60]	; (801ecd8 <rmw_take_response+0xf4>)
 801ec9c:	f7fe fb0e 	bl	801d2bc <put_memory>

  UXR_UNLOCK(&static_buffer_memory.mutex);
 801eca0:	480c      	ldr	r0, [pc, #48]	; (801ecd4 <rmw_take_response+0xf0>)
 801eca2:	f7f4 ffd3 	bl	8013c4c <uxr_unlock>

  if (taken != NULL) {
 801eca6:	683b      	ldr	r3, [r7, #0]
 801eca8:	2b00      	cmp	r3, #0
 801ecaa:	d003      	beq.n	801ecb4 <rmw_take_response+0xd0>
    *taken = deserialize_rv;
 801ecac:	683b      	ldr	r3, [r7, #0]
 801ecae:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801ecb2:	701a      	strb	r2, [r3, #0]
  }

  if (!deserialize_rv) {
 801ecb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801ecb8:	f083 0301 	eor.w	r3, r3, #1
 801ecbc:	b2db      	uxtb	r3, r3
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	d001      	beq.n	801ecc6 <rmw_take_response+0xe2>
    RMW_UROS_TRACE_MESSAGE("Typesupport desserialize error.")
    return RMW_RET_ERROR;
 801ecc2:	2301      	movs	r3, #1
 801ecc4:	e000      	b.n	801ecc8 <rmw_take_response+0xe4>
  }

  return RMW_RET_OK;
 801ecc6:	2300      	movs	r3, #0
}
 801ecc8:	4618      	mov	r0, r3
 801ecca:	3748      	adds	r7, #72	; 0x48
 801eccc:	46bd      	mov	sp, r7
 801ecce:	bd80      	pop	{r7, pc}
 801ecd0:	08027434 	.word	0x08027434
 801ecd4:	200110d4 	.word	0x200110d4
 801ecd8:	200110c4 	.word	0x200110c4

0801ecdc <rmw_destroy_service>:

rmw_ret_t
rmw_destroy_service(
  rmw_node_t * node,
  rmw_service_t * service)
{
 801ecdc:	b580      	push	{r7, lr}
 801ecde:	b086      	sub	sp, #24
 801ece0:	af00      	add	r7, sp, #0
 801ece2:	6078      	str	r0, [r7, #4]
 801ece4:	6039      	str	r1, [r7, #0]
  rmw_ret_t result_ret = RMW_RET_OK;
 801ece6:	2300      	movs	r3, #0
 801ece8:	617b      	str	r3, [r7, #20]
  if (!node) {
 801ecea:	687b      	ldr	r3, [r7, #4]
 801ecec:	2b00      	cmp	r3, #0
 801ecee:	d102      	bne.n	801ecf6 <rmw_destroy_service+0x1a>
    RMW_UROS_TRACE_MESSAGE("node handle is null")
    result_ret = RMW_RET_ERROR;
 801ecf0:	2301      	movs	r3, #1
 801ecf2:	617b      	str	r3, [r7, #20]
 801ecf4:	e05d      	b.n	801edb2 <rmw_destroy_service+0xd6>
  } else if (!is_uxrce_rmw_identifier_valid(node->implementation_identifier)) {
 801ecf6:	687b      	ldr	r3, [r7, #4]
 801ecf8:	681b      	ldr	r3, [r3, #0]
 801ecfa:	4618      	mov	r0, r3
 801ecfc:	f001 fd96 	bl	802082c <is_uxrce_rmw_identifier_valid>
 801ed00:	4603      	mov	r3, r0
 801ed02:	f083 0301 	eor.w	r3, r3, #1
 801ed06:	b2db      	uxtb	r3, r3
 801ed08:	2b00      	cmp	r3, #0
 801ed0a:	d002      	beq.n	801ed12 <rmw_destroy_service+0x36>
    RMW_UROS_TRACE_MESSAGE("node handle not from this implementation")
    result_ret = RMW_RET_ERROR;
 801ed0c:	2301      	movs	r3, #1
 801ed0e:	617b      	str	r3, [r7, #20]
 801ed10:	e04f      	b.n	801edb2 <rmw_destroy_service+0xd6>
  } else if (!node->data) {
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	685b      	ldr	r3, [r3, #4]
 801ed16:	2b00      	cmp	r3, #0
 801ed18:	d102      	bne.n	801ed20 <rmw_destroy_service+0x44>
    RMW_UROS_TRACE_MESSAGE("node imp is null")
    result_ret = RMW_RET_ERROR;
 801ed1a:	2301      	movs	r3, #1
 801ed1c:	617b      	str	r3, [r7, #20]
 801ed1e:	e048      	b.n	801edb2 <rmw_destroy_service+0xd6>
  } else if (!service) {
 801ed20:	683b      	ldr	r3, [r7, #0]
 801ed22:	2b00      	cmp	r3, #0
 801ed24:	d102      	bne.n	801ed2c <rmw_destroy_service+0x50>
    RMW_UROS_TRACE_MESSAGE("service handle is null")
    result_ret = RMW_RET_ERROR;
 801ed26:	2301      	movs	r3, #1
 801ed28:	617b      	str	r3, [r7, #20]
 801ed2a:	e042      	b.n	801edb2 <rmw_destroy_service+0xd6>
  } else if (!is_uxrce_rmw_identifier_valid(service->implementation_identifier)) {
 801ed2c:	683b      	ldr	r3, [r7, #0]
 801ed2e:	681b      	ldr	r3, [r3, #0]
 801ed30:	4618      	mov	r0, r3
 801ed32:	f001 fd7b 	bl	802082c <is_uxrce_rmw_identifier_valid>
 801ed36:	4603      	mov	r3, r0
 801ed38:	f083 0301 	eor.w	r3, r3, #1
 801ed3c:	b2db      	uxtb	r3, r3
 801ed3e:	2b00      	cmp	r3, #0
 801ed40:	d002      	beq.n	801ed48 <rmw_destroy_service+0x6c>
    RMW_UROS_TRACE_MESSAGE("service handle not from this implementation")
    result_ret = RMW_RET_ERROR;
 801ed42:	2301      	movs	r3, #1
 801ed44:	617b      	str	r3, [r7, #20]
 801ed46:	e034      	b.n	801edb2 <rmw_destroy_service+0xd6>
  } else if (!service->data) {
 801ed48:	683b      	ldr	r3, [r7, #0]
 801ed4a:	685b      	ldr	r3, [r3, #4]
 801ed4c:	2b00      	cmp	r3, #0
 801ed4e:	d102      	bne.n	801ed56 <rmw_destroy_service+0x7a>
    RMW_UROS_TRACE_MESSAGE("service imp is null")
    result_ret = RMW_RET_ERROR;
 801ed50:	2301      	movs	r3, #1
 801ed52:	617b      	str	r3, [r7, #20]
 801ed54:	e02d      	b.n	801edb2 <rmw_destroy_service+0xd6>
  } else {
    rmw_uxrce_node_t * custom_node = (rmw_uxrce_node_t *)node->data;
 801ed56:	687b      	ldr	r3, [r7, #4]
 801ed58:	685b      	ldr	r3, [r3, #4]
 801ed5a:	613b      	str	r3, [r7, #16]
    rmw_uxrce_service_t * custom_service = (rmw_uxrce_service_t *)service->data;
 801ed5c:	683b      	ldr	r3, [r7, #0]
 801ed5e:	685b      	ldr	r3, [r3, #4]
 801ed60:	60fb      	str	r3, [r7, #12]
    uint16_t delete_service =
      uxr_buffer_delete_entity(
      &custom_node->context->session,
 801ed62:	693b      	ldr	r3, [r7, #16]
 801ed64:	691b      	ldr	r3, [r3, #16]
      uxr_buffer_delete_entity(
 801ed66:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
      *custom_node->context->destroy_stream,
 801ed6a:	693b      	ldr	r3, [r7, #16]
 801ed6c:	691b      	ldr	r3, [r3, #16]
 801ed6e:	f8d3 2da0 	ldr.w	r2, [r3, #3488]	; 0xda0
      uxr_buffer_delete_entity(
 801ed72:	68fb      	ldr	r3, [r7, #12]
 801ed74:	6812      	ldr	r2, [r2, #0]
 801ed76:	4611      	mov	r1, r2
 801ed78:	691a      	ldr	r2, [r3, #16]
 801ed7a:	f7f0 f8b3 	bl	800eee4 <uxr_buffer_delete_entity>
 801ed7e:	4603      	mov	r3, r0
 801ed80:	817b      	strh	r3, [r7, #10]
      custom_service->service_id);

    if (!run_xrce_session(
 801ed82:	693b      	ldr	r3, [r7, #16]
 801ed84:	6918      	ldr	r0, [r3, #16]
        custom_node->context, custom_node->context->destroy_stream, delete_service,
 801ed86:	693b      	ldr	r3, [r7, #16]
 801ed88:	691b      	ldr	r3, [r3, #16]
    if (!run_xrce_session(
 801ed8a:	f8d3 1da0 	ldr.w	r1, [r3, #3488]	; 0xda0
        custom_node->context->destroy_timeout))
 801ed8e:	693b      	ldr	r3, [r7, #16]
 801ed90:	691b      	ldr	r3, [r3, #16]
    if (!run_xrce_session(
 801ed92:	f8d3 3da8 	ldr.w	r3, [r3, #3496]	; 0xda8
 801ed96:	897a      	ldrh	r2, [r7, #10]
 801ed98:	f001 fb28 	bl	80203ec <run_xrce_session>
 801ed9c:	4603      	mov	r3, r0
 801ed9e:	f083 0301 	eor.w	r3, r3, #1
 801eda2:	b2db      	uxtb	r3, r3
 801eda4:	2b00      	cmp	r3, #0
 801eda6:	d001      	beq.n	801edac <rmw_destroy_service+0xd0>
    {
      result_ret = RMW_RET_TIMEOUT;
 801eda8:	2302      	movs	r3, #2
 801edaa:	617b      	str	r3, [r7, #20]
    }
    rmw_uxrce_fini_service_memory(service);
 801edac:	6838      	ldr	r0, [r7, #0]
 801edae:	f001 f937 	bl	8020020 <rmw_uxrce_fini_service_memory>
  }

  return result_ret;
 801edb2:	697b      	ldr	r3, [r7, #20]
}
 801edb4:	4618      	mov	r0, r3
 801edb6:	3718      	adds	r7, #24
 801edb8:	46bd      	mov	sp, r7
 801edba:	bd80      	pop	{r7, pc}

0801edbc <rmw_create_subscription>:
  const rmw_node_t * node,
  const rosidl_message_type_support_t * type_support,
  const char * topic_name,
  const rmw_qos_profile_t * qos_policies,
  const rmw_subscription_options_t * subscription_options)
{
 801edbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801edc0:	b094      	sub	sp, #80	; 0x50
 801edc2:	af04      	add	r7, sp, #16
 801edc4:	60f8      	str	r0, [r7, #12]
 801edc6:	60b9      	str	r1, [r7, #8]
 801edc8:	607a      	str	r2, [r7, #4]
 801edca:	603b      	str	r3, [r7, #0]
  (void)subscription_options;

  rmw_subscription_t * rmw_subscription = NULL;
 801edcc:	2300      	movs	r3, #0
 801edce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (!node) {
 801edd0:	68fb      	ldr	r3, [r7, #12]
 801edd2:	2b00      	cmp	r3, #0
 801edd4:	f000 8138 	beq.w	801f048 <rmw_create_subscription+0x28c>
    RMW_UROS_TRACE_MESSAGE("node handle is null")
  } else if (!type_support) {
 801edd8:	68bb      	ldr	r3, [r7, #8]
 801edda:	2b00      	cmp	r3, #0
 801eddc:	f000 8134 	beq.w	801f048 <rmw_create_subscription+0x28c>
    RMW_UROS_TRACE_MESSAGE("type support is null")
  } else if (!is_uxrce_rmw_identifier_valid(node->implementation_identifier)) {
 801ede0:	68fb      	ldr	r3, [r7, #12]
 801ede2:	681b      	ldr	r3, [r3, #0]
 801ede4:	4618      	mov	r0, r3
 801ede6:	f001 fd21 	bl	802082c <is_uxrce_rmw_identifier_valid>
 801edea:	4603      	mov	r3, r0
 801edec:	f083 0301 	eor.w	r3, r3, #1
 801edf0:	b2db      	uxtb	r3, r3
 801edf2:	2b00      	cmp	r3, #0
 801edf4:	f040 8128 	bne.w	801f048 <rmw_create_subscription+0x28c>
    RMW_UROS_TRACE_MESSAGE("node handle not from this implementation")
  } else if (!topic_name || strlen(topic_name) == 0) {
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	2b00      	cmp	r3, #0
 801edfc:	d003      	beq.n	801ee06 <rmw_create_subscription+0x4a>
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	781b      	ldrb	r3, [r3, #0]
 801ee02:	2b00      	cmp	r3, #0
 801ee04:	d101      	bne.n	801ee0a <rmw_create_subscription+0x4e>
    RMW_UROS_TRACE_MESSAGE("subscription topic is null or empty string")
    return NULL;
 801ee06:	2300      	movs	r3, #0
 801ee08:	e12d      	b.n	801f066 <rmw_create_subscription+0x2aa>
  } else if (!qos_policies) {
 801ee0a:	683b      	ldr	r3, [r7, #0]
 801ee0c:	2b00      	cmp	r3, #0
 801ee0e:	d101      	bne.n	801ee14 <rmw_create_subscription+0x58>
    RMW_UROS_TRACE_MESSAGE("qos_profile is null")
    return NULL;
 801ee10:	2300      	movs	r3, #0
 801ee12:	e128      	b.n	801f066 <rmw_create_subscription+0x2aa>
  } else {
    rmw_uxrce_node_t * custom_node = (rmw_uxrce_node_t *)node->data;
 801ee14:	68fb      	ldr	r3, [r7, #12]
 801ee16:	685b      	ldr	r3, [r3, #4]
 801ee18:	63bb      	str	r3, [r7, #56]	; 0x38
    rmw_uxrce_mempool_item_t * memory_node = get_memory(&subscription_memory);
 801ee1a:	4895      	ldr	r0, [pc, #596]	; (801f070 <rmw_create_subscription+0x2b4>)
 801ee1c:	f7fe fa12 	bl	801d244 <get_memory>
 801ee20:	6378      	str	r0, [r7, #52]	; 0x34
    if (!memory_node) {
 801ee22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	d101      	bne.n	801ee2c <rmw_create_subscription+0x70>
      RMW_UROS_TRACE_MESSAGE("Not available memory node")
      return NULL;
 801ee28:	2300      	movs	r3, #0
 801ee2a:	e11c      	b.n	801f066 <rmw_create_subscription+0x2aa>
    }
    rmw_uxrce_subscription_t * custom_subscription = (rmw_uxrce_subscription_t *)memory_node->data;
 801ee2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ee2e:	68db      	ldr	r3, [r3, #12]
 801ee30:	633b      	str	r3, [r7, #48]	; 0x30

    rmw_subscription = &custom_subscription->rmw_subscription;
 801ee32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee34:	337c      	adds	r3, #124	; 0x7c
 801ee36:	63fb      	str	r3, [r7, #60]	; 0x3c
    rmw_subscription->data = NULL;
 801ee38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ee3a:	2200      	movs	r2, #0
 801ee3c:	605a      	str	r2, [r3, #4]
    rmw_subscription->implementation_identifier = rmw_get_implementation_identifier();
 801ee3e:	f7fe faed 	bl	801d41c <rmw_get_implementation_identifier>
 801ee42:	4602      	mov	r2, r0
 801ee44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ee46:	601a      	str	r2, [r3, #0]
    rmw_subscription->topic_name = custom_subscription->topic_name;
 801ee48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee4a:	f103 0294 	add.w	r2, r3, #148	; 0x94
 801ee4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ee50:	609a      	str	r2, [r3, #8]
    if ((strlen(topic_name) + 1 ) > sizeof(custom_subscription->topic_name)) {
 801ee52:	6878      	ldr	r0, [r7, #4]
 801ee54:	f7e1 f9e6 	bl	8000224 <strlen>
 801ee58:	4603      	mov	r3, r0
 801ee5a:	3301      	adds	r3, #1
 801ee5c:	2b64      	cmp	r3, #100	; 0x64
 801ee5e:	f200 80f5 	bhi.w	801f04c <rmw_create_subscription+0x290>
      RMW_UROS_TRACE_MESSAGE("failed to allocate string")
      goto fail;
    }

    snprintf(
      (char *)rmw_subscription->topic_name, sizeof(custom_subscription->topic_name), "%s",
 801ee62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ee64:	6898      	ldr	r0, [r3, #8]
    snprintf(
 801ee66:	687b      	ldr	r3, [r7, #4]
 801ee68:	4a82      	ldr	r2, [pc, #520]	; (801f074 <rmw_create_subscription+0x2b8>)
 801ee6a:	2164      	movs	r1, #100	; 0x64
 801ee6c:	f003 f8fa 	bl	8022064 <sniprintf>
      topic_name);

    custom_subscription->owner_node = custom_node;
 801ee70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ee74:	621a      	str	r2, [r3, #32]
    custom_subscription->qos = *qos_policies;
 801ee76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee78:	683a      	ldr	r2, [r7, #0]
 801ee7a:	3328      	adds	r3, #40	; 0x28
 801ee7c:	4611      	mov	r1, r2
 801ee7e:	2250      	movs	r2, #80	; 0x50
 801ee80:	4618      	mov	r0, r3
 801ee82:	f001 ff1d 	bl	8020cc0 <memcpy>

    const rosidl_message_type_support_t * type_support_xrce = NULL;
 801ee86:	2300      	movs	r3, #0
 801ee88:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (NULL == type_support_xrce) {
      type_support_xrce = get_message_typesupport_handle(
        type_support, ROSIDL_TYPESUPPORT_MICROXRCEDDS_CPP__IDENTIFIER_VALUE);
    }
#endif /* ifdef ROSIDL_TYPESUPPORT_MICROXRCEDDS_CPP__IDENTIFIER_VALUE */
    if (NULL == type_support_xrce) {
 801ee8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee8c:	2b00      	cmp	r3, #0
 801ee8e:	f000 80df 	beq.w	801f050 <rmw_create_subscription+0x294>
      RMW_UROS_TRACE_MESSAGE("Undefined type support")
      goto fail;
    }

    custom_subscription->type_support_callbacks =
      (const message_type_support_callbacks_t *)type_support_xrce->data;
 801ee92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee94:	685a      	ldr	r2, [r3, #4]
    custom_subscription->type_support_callbacks =
 801ee96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee98:	619a      	str	r2, [r3, #24]

    if (custom_subscription->type_support_callbacks == NULL) {
 801ee9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee9c:	699b      	ldr	r3, [r3, #24]
 801ee9e:	2b00      	cmp	r3, #0
 801eea0:	f000 80d8 	beq.w	801f054 <rmw_create_subscription+0x298>
      RMW_UROS_TRACE_MESSAGE("type support data is NULL")
      goto fail;
    }

    // Create topic
    custom_subscription->topic = create_topic(
 801eea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eea6:	699a      	ldr	r2, [r3, #24]
 801eea8:	683b      	ldr	r3, [r7, #0]
 801eeaa:	6879      	ldr	r1, [r7, #4]
 801eeac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801eeae:	f7fe ffc5 	bl	801de3c <create_topic>
 801eeb2:	4602      	mov	r2, r0
 801eeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eeb6:	61da      	str	r2, [r3, #28]
      custom_node, topic_name,
      custom_subscription->type_support_callbacks, qos_policies);
    if (custom_subscription->topic == NULL) {
 801eeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eeba:	69db      	ldr	r3, [r3, #28]
 801eebc:	2b00      	cmp	r3, #0
 801eebe:	f000 80cb 	beq.w	801f058 <rmw_create_subscription+0x29c>
      goto fail;
    }

    // Create subscriber
    custom_subscription->subscriber_id = uxr_object_id(
      custom_node->context->id_subscriber++,
 801eec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eec4:	691b      	ldr	r3, [r3, #16]
 801eec6:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 801eeca:	f8b2 2fb4 	ldrh.w	r2, [r2, #4020]	; 0xfb4
    custom_subscription->subscriber_id = uxr_object_id(
 801eece:	1c51      	adds	r1, r2, #1
 801eed0:	b289      	uxth	r1, r1
 801eed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801eed6:	f8a3 1fb4 	strh.w	r1, [r3, #4020]	; 0xfb4
 801eeda:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801eedc:	2104      	movs	r1, #4
 801eede:	4610      	mov	r0, r2
 801eee0:	f7f0 fe2e 	bl	800fb40 <uxr_object_id>
 801eee4:	4603      	mov	r3, r0
 801eee6:	6123      	str	r3, [r4, #16]
      UXR_SUBSCRIBER_ID);
    uint16_t subscriber_req = UXR_INVALID_REQUEST_ID;
 801eee8:	2300      	movs	r3, #0
 801eeea:	857b      	strh	r3, [r7, #42]	; 0x2a
      &custom_node->context->session,
      *custom_node->context->creation_stream, custom_subscription->subscriber_id,
      custom_node->participant_id, "", UXR_REPLACE | UXR_REUSE);
#else
    subscriber_req = uxr_buffer_create_subscriber_bin(
      &custom_node->context->session,
 801eeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eeee:	691b      	ldr	r3, [r3, #16]
    subscriber_req = uxr_buffer_create_subscriber_bin(
 801eef0:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
      *custom_node->context->creation_stream,
 801eef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eef6:	691b      	ldr	r3, [r3, #16]
 801eef8:	f8d3 1d9c 	ldr.w	r1, [r3, #3484]	; 0xd9c
    subscriber_req = uxr_buffer_create_subscriber_bin(
 801eefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eefe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ef00:	2406      	movs	r4, #6
 801ef02:	9400      	str	r4, [sp, #0]
 801ef04:	680c      	ldr	r4, [r1, #0]
 801ef06:	4621      	mov	r1, r4
 801ef08:	695b      	ldr	r3, [r3, #20]
 801ef0a:	6912      	ldr	r2, [r2, #16]
 801ef0c:	f7f0 fa53 	bl	800f3b6 <uxr_buffer_create_subscriber_bin>
 801ef10:	4603      	mov	r3, r0
 801ef12:	857b      	strh	r3, [r7, #42]	; 0x2a
      custom_subscription->subscriber_id,
      custom_node->participant_id,
      UXR_REPLACE | UXR_REUSE);
#endif /* ifdef RMW_UXRCE_USE_REFS */

    if (!run_xrce_session(
 801ef14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef16:	6918      	ldr	r0, [r3, #16]
        custom_node->context, custom_node->context->creation_stream, subscriber_req,
 801ef18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef1a:	691b      	ldr	r3, [r3, #16]
    if (!run_xrce_session(
 801ef1c:	f8d3 1d9c 	ldr.w	r1, [r3, #3484]	; 0xd9c
        custom_node->context->creation_timeout))
 801ef20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef22:	691b      	ldr	r3, [r3, #16]
    if (!run_xrce_session(
 801ef24:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 801ef28:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801ef2a:	f001 fa5f 	bl	80203ec <run_xrce_session>
 801ef2e:	4603      	mov	r3, r0
 801ef30:	f083 0301 	eor.w	r3, r3, #1
 801ef34:	b2db      	uxtb	r3, r3
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	d005      	beq.n	801ef46 <rmw_create_subscription+0x18a>
    {
      put_memory(&subscription_memory, &custom_subscription->mem);
 801ef3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef3c:	4619      	mov	r1, r3
 801ef3e:	484c      	ldr	r0, [pc, #304]	; (801f070 <rmw_create_subscription+0x2b4>)
 801ef40:	f7fe f9bc 	bl	801d2bc <put_memory>
      goto fail;
 801ef44:	e089      	b.n	801f05a <rmw_create_subscription+0x29e>
    }

    // Create datareader
    custom_subscription->datareader_id = uxr_object_id(
      custom_node->context->id_datareader++,
 801ef46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef48:	691b      	ldr	r3, [r3, #16]
 801ef4a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 801ef4e:	f8b2 2fb6 	ldrh.w	r2, [r2, #4022]	; 0xfb6
    custom_subscription->datareader_id = uxr_object_id(
 801ef52:	1c51      	adds	r1, r2, #1
 801ef54:	b289      	uxth	r1, r1
 801ef56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ef5a:	f8a3 1fb6 	strh.w	r1, [r3, #4022]	; 0xfb6
 801ef5e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801ef60:	2106      	movs	r1, #6
 801ef62:	4610      	mov	r0, r2
 801ef64:	f7f0 fdec 	bl	800fb40 <uxr_object_id>
 801ef68:	4603      	mov	r3, r0
 801ef6a:	6163      	str	r3, [r4, #20]
      UXR_DATAREADER_ID);
    uint16_t datareader_req = UXR_INVALID_REQUEST_ID;
 801ef6c:	2300      	movs	r3, #0
 801ef6e:	853b      	strh	r3, [r7, #40]	; 0x28
      &custom_node->context->session,
      *custom_node->context->creation_stream, custom_subscription->datareader_id,
      custom_subscription->subscriber_id, rmw_uxrce_entity_naming_buffer, UXR_REPLACE | UXR_REUSE);
#else
    datareader_req = uxr_buffer_create_datareader_bin(
      &custom_node->context->session,
 801ef70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef72:	691b      	ldr	r3, [r3, #16]
    datareader_req = uxr_buffer_create_datareader_bin(
 801ef74:	f503 783e 	add.w	r8, r3, #760	; 0x2f8
      *custom_node->context->creation_stream,
 801ef78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef7a:	691b      	ldr	r3, [r3, #16]
 801ef7c:	f8d3 5d9c 	ldr.w	r5, [r3, #3484]	; 0xd9c
      custom_subscription->datareader_id,
      custom_subscription->subscriber_id,
      custom_subscription->topic->topic_id,
 801ef80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef82:	69de      	ldr	r6, [r3, #28]
    datareader_req = uxr_buffer_create_datareader_bin(
 801ef84:	f107 0320 	add.w	r3, r7, #32
 801ef88:	6839      	ldr	r1, [r7, #0]
 801ef8a:	4618      	mov	r0, r3
 801ef8c:	f001 fa59 	bl	8020442 <convert_qos_profile>
 801ef90:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801ef92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ef94:	2306      	movs	r3, #6
 801ef96:	9303      	str	r3, [sp, #12]
 801ef98:	ab01      	add	r3, sp, #4
 801ef9a:	f107 0120 	add.w	r1, r7, #32
 801ef9e:	c903      	ldmia	r1, {r0, r1}
 801efa0:	6018      	str	r0, [r3, #0]
 801efa2:	3304      	adds	r3, #4
 801efa4:	8019      	strh	r1, [r3, #0]
 801efa6:	6933      	ldr	r3, [r6, #16]
 801efa8:	9300      	str	r3, [sp, #0]
 801efaa:	682b      	ldr	r3, [r5, #0]
 801efac:	4619      	mov	r1, r3
 801efae:	6923      	ldr	r3, [r4, #16]
 801efb0:	6952      	ldr	r2, [r2, #20]
 801efb2:	4640      	mov	r0, r8
 801efb4:	f7f0 fb96 	bl	800f6e4 <uxr_buffer_create_datareader_bin>
 801efb8:	4603      	mov	r3, r0
 801efba:	853b      	strh	r3, [r7, #40]	; 0x28
      convert_qos_profile(qos_policies),
      UXR_REPLACE | UXR_REUSE);
#endif /* ifdef RMW_UXRCE_USE_XML */

    if (!run_xrce_session(
 801efbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801efbe:	6918      	ldr	r0, [r3, #16]
        custom_node->context, custom_node->context->creation_stream, datareader_req,
 801efc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801efc2:	691b      	ldr	r3, [r3, #16]
    if (!run_xrce_session(
 801efc4:	f8d3 1d9c 	ldr.w	r1, [r3, #3484]	; 0xd9c
        custom_node->context->creation_timeout))
 801efc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801efca:	691b      	ldr	r3, [r3, #16]
    if (!run_xrce_session(
 801efcc:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 801efd0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801efd2:	f001 fa0b 	bl	80203ec <run_xrce_session>
 801efd6:	4603      	mov	r3, r0
 801efd8:	f083 0301 	eor.w	r3, r3, #1
 801efdc:	b2db      	uxtb	r3, r3
 801efde:	2b00      	cmp	r3, #0
 801efe0:	d005      	beq.n	801efee <rmw_create_subscription+0x232>
    {
      RMW_UROS_TRACE_MESSAGE("Issues creating Micro XRCE-DDS entities")
      put_memory(&subscription_memory, &custom_subscription->mem);
 801efe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efe4:	4619      	mov	r1, r3
 801efe6:	4822      	ldr	r0, [pc, #136]	; (801f070 <rmw_create_subscription+0x2b4>)
 801efe8:	f7fe f968 	bl	801d2bc <put_memory>
      goto fail;
 801efec:	e035      	b.n	801f05a <rmw_create_subscription+0x29e>
    }

    rmw_subscription->data = custom_subscription;
 801efee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801eff2:	605a      	str	r2, [r3, #4]

    uxrDeliveryControl delivery_control;
    delivery_control.max_samples = UXR_MAX_SAMPLES_UNLIMITED;
 801eff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801eff8:	833b      	strh	r3, [r7, #24]
    delivery_control.min_pace_period = 0;
 801effa:	2300      	movs	r3, #0
 801effc:	83fb      	strh	r3, [r7, #30]
    delivery_control.max_elapsed_time = UXR_MAX_ELAPSED_TIME_UNLIMITED;
 801effe:	2300      	movs	r3, #0
 801f000:	837b      	strh	r3, [r7, #26]
    delivery_control.max_bytes_per_second = UXR_MAX_BYTES_PER_SECOND_UNLIMITED;
 801f002:	2300      	movs	r3, #0
 801f004:	83bb      	strh	r3, [r7, #28]

    uxrStreamId data_request_stream_id =
      (qos_policies->reliability == RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT) ?
 801f006:	683b      	ldr	r3, [r7, #0]
 801f008:	7a1b      	ldrb	r3, [r3, #8]
    uxrStreamId data_request_stream_id =
 801f00a:	2b02      	cmp	r3, #2
 801f00c:	d105      	bne.n	801f01a <rmw_create_subscription+0x25e>
      custom_node->context->best_effort_input :
 801f00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f010:	691b      	ldr	r3, [r3, #16]
    uxrStreamId data_request_stream_id =
 801f012:	f8d3 3d98 	ldr.w	r3, [r3, #3480]	; 0xd98
 801f016:	617b      	str	r3, [r7, #20]
 801f018:	e004      	b.n	801f024 <rmw_create_subscription+0x268>
      custom_node->context->reliable_input;
 801f01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f01c:	691b      	ldr	r3, [r3, #16]
    uxrStreamId data_request_stream_id =
 801f01e:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	; 0xd8c
 801f022:	617b      	str	r3, [r7, #20]

    uxr_buffer_request_data(
      &custom_node->context->session,
 801f024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f026:	691b      	ldr	r3, [r3, #16]
    uxr_buffer_request_data(
 801f028:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
      *custom_node->context->creation_stream, custom_subscription->datareader_id,
 801f02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f02e:	691b      	ldr	r3, [r3, #16]
 801f030:	f8d3 3d9c 	ldr.w	r3, [r3, #3484]	; 0xd9c
    uxr_buffer_request_data(
 801f034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f036:	f107 0118 	add.w	r1, r7, #24
 801f03a:	9100      	str	r1, [sp, #0]
 801f03c:	681b      	ldr	r3, [r3, #0]
 801f03e:	4619      	mov	r1, r3
 801f040:	697b      	ldr	r3, [r7, #20]
 801f042:	6952      	ldr	r2, [r2, #20]
 801f044:	f7f0 fddd 	bl	800fc02 <uxr_buffer_request_data>
      data_request_stream_id, &delivery_control);
  }
  return rmw_subscription;
 801f048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f04a:	e00c      	b.n	801f066 <rmw_create_subscription+0x2aa>
      goto fail;
 801f04c:	bf00      	nop
 801f04e:	e004      	b.n	801f05a <rmw_create_subscription+0x29e>
      goto fail;
 801f050:	bf00      	nop
 801f052:	e002      	b.n	801f05a <rmw_create_subscription+0x29e>
      goto fail;
 801f054:	bf00      	nop
 801f056:	e000      	b.n	801f05a <rmw_create_subscription+0x29e>
      goto fail;
 801f058:	bf00      	nop

fail:
  rmw_uxrce_fini_subscription_memory(rmw_subscription);
 801f05a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801f05c:	f000 ffac 	bl	801ffb8 <rmw_uxrce_fini_subscription_memory>
  rmw_subscription = NULL;
 801f060:	2300      	movs	r3, #0
 801f062:	63fb      	str	r3, [r7, #60]	; 0x3c
  return rmw_subscription;
 801f064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801f066:	4618      	mov	r0, r3
 801f068:	3740      	adds	r7, #64	; 0x40
 801f06a:	46bd      	mov	sp, r7
 801f06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f070:	20010cc8 	.word	0x20010cc8
 801f074:	08026f48 	.word	0x08026f48

0801f078 <rmw_subscription_get_actual_qos>:

rmw_ret_t
rmw_subscription_get_actual_qos(
  const rmw_subscription_t * subscription,
  rmw_qos_profile_t * qos)
{
 801f078:	b480      	push	{r7}
 801f07a:	b085      	sub	sp, #20
 801f07c:	af00      	add	r7, sp, #0
 801f07e:	6078      	str	r0, [r7, #4]
 801f080:	6039      	str	r1, [r7, #0]
  (void)qos;

  rmw_uxrce_subscription_t * custom_subscription = (rmw_uxrce_subscription_t *)subscription->data;
 801f082:	687b      	ldr	r3, [r7, #4]
 801f084:	685b      	ldr	r3, [r3, #4]
 801f086:	60fb      	str	r3, [r7, #12]
  qos = &custom_subscription->qos;
 801f088:	68fb      	ldr	r3, [r7, #12]
 801f08a:	3328      	adds	r3, #40	; 0x28
 801f08c:	603b      	str	r3, [r7, #0]

  return RMW_RET_OK;
 801f08e:	2300      	movs	r3, #0
}
 801f090:	4618      	mov	r0, r3
 801f092:	3714      	adds	r7, #20
 801f094:	46bd      	mov	sp, r7
 801f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f09a:	4770      	bx	lr

0801f09c <rmw_destroy_subscription>:

rmw_ret_t
rmw_destroy_subscription(
  rmw_node_t * node,
  rmw_subscription_t * subscription)
{
 801f09c:	b580      	push	{r7, lr}
 801f09e:	b088      	sub	sp, #32
 801f0a0:	af00      	add	r7, sp, #0
 801f0a2:	6078      	str	r0, [r7, #4]
 801f0a4:	6039      	str	r1, [r7, #0]
  rmw_ret_t result_ret = RMW_RET_OK;
 801f0a6:	2300      	movs	r3, #0
 801f0a8:	61fb      	str	r3, [r7, #28]
  if (!node) {
 801f0aa:	687b      	ldr	r3, [r7, #4]
 801f0ac:	2b00      	cmp	r3, #0
 801f0ae:	d102      	bne.n	801f0b6 <rmw_destroy_subscription+0x1a>
    RMW_UROS_TRACE_MESSAGE("node handle is null")
    result_ret = RMW_RET_ERROR;
 801f0b0:	2301      	movs	r3, #1
 801f0b2:	61fb      	str	r3, [r7, #28]
 801f0b4:	e08e      	b.n	801f1d4 <rmw_destroy_subscription+0x138>
  } else if (!is_uxrce_rmw_identifier_valid(node->implementation_identifier)) {
 801f0b6:	687b      	ldr	r3, [r7, #4]
 801f0b8:	681b      	ldr	r3, [r3, #0]
 801f0ba:	4618      	mov	r0, r3
 801f0bc:	f001 fbb6 	bl	802082c <is_uxrce_rmw_identifier_valid>
 801f0c0:	4603      	mov	r3, r0
 801f0c2:	f083 0301 	eor.w	r3, r3, #1
 801f0c6:	b2db      	uxtb	r3, r3
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	d002      	beq.n	801f0d2 <rmw_destroy_subscription+0x36>
    RMW_UROS_TRACE_MESSAGE("node handle not from this implementation")
    result_ret = RMW_RET_ERROR;
 801f0cc:	2301      	movs	r3, #1
 801f0ce:	61fb      	str	r3, [r7, #28]
 801f0d0:	e080      	b.n	801f1d4 <rmw_destroy_subscription+0x138>
  } else if (!node->data) {
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	685b      	ldr	r3, [r3, #4]
 801f0d6:	2b00      	cmp	r3, #0
 801f0d8:	d102      	bne.n	801f0e0 <rmw_destroy_subscription+0x44>
    RMW_UROS_TRACE_MESSAGE("node imp is null")
    result_ret = RMW_RET_ERROR;
 801f0da:	2301      	movs	r3, #1
 801f0dc:	61fb      	str	r3, [r7, #28]
 801f0de:	e079      	b.n	801f1d4 <rmw_destroy_subscription+0x138>
  } else if (!subscription) {
 801f0e0:	683b      	ldr	r3, [r7, #0]
 801f0e2:	2b00      	cmp	r3, #0
 801f0e4:	d102      	bne.n	801f0ec <rmw_destroy_subscription+0x50>
    RMW_UROS_TRACE_MESSAGE("subscription handle is null")
    result_ret = RMW_RET_ERROR;
 801f0e6:	2301      	movs	r3, #1
 801f0e8:	61fb      	str	r3, [r7, #28]
 801f0ea:	e073      	b.n	801f1d4 <rmw_destroy_subscription+0x138>
  } else if (!is_uxrce_rmw_identifier_valid(subscription->implementation_identifier)) {
 801f0ec:	683b      	ldr	r3, [r7, #0]
 801f0ee:	681b      	ldr	r3, [r3, #0]
 801f0f0:	4618      	mov	r0, r3
 801f0f2:	f001 fb9b 	bl	802082c <is_uxrce_rmw_identifier_valid>
 801f0f6:	4603      	mov	r3, r0
 801f0f8:	f083 0301 	eor.w	r3, r3, #1
 801f0fc:	b2db      	uxtb	r3, r3
 801f0fe:	2b00      	cmp	r3, #0
 801f100:	d002      	beq.n	801f108 <rmw_destroy_subscription+0x6c>
    RMW_UROS_TRACE_MESSAGE("subscription handle not from this implementation")
    result_ret = RMW_RET_ERROR;
 801f102:	2301      	movs	r3, #1
 801f104:	61fb      	str	r3, [r7, #28]
 801f106:	e065      	b.n	801f1d4 <rmw_destroy_subscription+0x138>
  } else if (!subscription->data) {
 801f108:	683b      	ldr	r3, [r7, #0]
 801f10a:	685b      	ldr	r3, [r3, #4]
 801f10c:	2b00      	cmp	r3, #0
 801f10e:	d102      	bne.n	801f116 <rmw_destroy_subscription+0x7a>
    RMW_UROS_TRACE_MESSAGE("subscription imp is null")
    result_ret = RMW_RET_ERROR;
 801f110:	2301      	movs	r3, #1
 801f112:	61fb      	str	r3, [r7, #28]
 801f114:	e05e      	b.n	801f1d4 <rmw_destroy_subscription+0x138>
  } else {
    rmw_uxrce_subscription_t * custom_subscription = (rmw_uxrce_subscription_t *)subscription->data;
 801f116:	683b      	ldr	r3, [r7, #0]
 801f118:	685b      	ldr	r3, [r3, #4]
 801f11a:	61bb      	str	r3, [r7, #24]
    rmw_uxrce_node_t * custom_node = custom_subscription->owner_node;
 801f11c:	69bb      	ldr	r3, [r7, #24]
 801f11e:	6a1b      	ldr	r3, [r3, #32]
 801f120:	617b      	str	r3, [r7, #20]

    destroy_topic(custom_subscription->topic);
 801f122:	69bb      	ldr	r3, [r7, #24]
 801f124:	69db      	ldr	r3, [r3, #28]
 801f126:	4618      	mov	r0, r3
 801f128:	f7fe ff00 	bl	801df2c <destroy_topic>

    uint16_t delete_datareader =
      uxr_buffer_delete_entity(
      &custom_subscription->owner_node->context->session,
 801f12c:	69bb      	ldr	r3, [r7, #24]
 801f12e:	6a1b      	ldr	r3, [r3, #32]
 801f130:	691b      	ldr	r3, [r3, #16]
      uxr_buffer_delete_entity(
 801f132:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
      *custom_subscription->owner_node->context->destroy_stream,
 801f136:	69bb      	ldr	r3, [r7, #24]
 801f138:	6a1b      	ldr	r3, [r3, #32]
 801f13a:	691b      	ldr	r3, [r3, #16]
 801f13c:	f8d3 2da0 	ldr.w	r2, [r3, #3488]	; 0xda0
      uxr_buffer_delete_entity(
 801f140:	69bb      	ldr	r3, [r7, #24]
 801f142:	6812      	ldr	r2, [r2, #0]
 801f144:	4611      	mov	r1, r2
 801f146:	695a      	ldr	r2, [r3, #20]
 801f148:	f7ef fecc 	bl	800eee4 <uxr_buffer_delete_entity>
 801f14c:	4603      	mov	r3, r0
 801f14e:	827b      	strh	r3, [r7, #18]
      custom_subscription->datareader_id);
    uint16_t delete_subscriber =
      uxr_buffer_delete_entity(
      &custom_subscription->owner_node->context->session,
 801f150:	69bb      	ldr	r3, [r7, #24]
 801f152:	6a1b      	ldr	r3, [r3, #32]
 801f154:	691b      	ldr	r3, [r3, #16]
      uxr_buffer_delete_entity(
 801f156:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
      *custom_subscription->owner_node->context->destroy_stream,
 801f15a:	69bb      	ldr	r3, [r7, #24]
 801f15c:	6a1b      	ldr	r3, [r3, #32]
 801f15e:	691b      	ldr	r3, [r3, #16]
 801f160:	f8d3 2da0 	ldr.w	r2, [r3, #3488]	; 0xda0
      uxr_buffer_delete_entity(
 801f164:	69bb      	ldr	r3, [r7, #24]
 801f166:	6812      	ldr	r2, [r2, #0]
 801f168:	4611      	mov	r1, r2
 801f16a:	691a      	ldr	r2, [r3, #16]
 801f16c:	f7ef feba 	bl	800eee4 <uxr_buffer_delete_entity>
 801f170:	4603      	mov	r3, r0
 801f172:	823b      	strh	r3, [r7, #16]
      custom_subscription->subscriber_id);

    bool ret = run_xrce_session(
 801f174:	697b      	ldr	r3, [r7, #20]
 801f176:	6918      	ldr	r0, [r3, #16]
      custom_node->context, custom_node->context->destroy_stream, delete_datareader,
 801f178:	697b      	ldr	r3, [r7, #20]
 801f17a:	691b      	ldr	r3, [r3, #16]
    bool ret = run_xrce_session(
 801f17c:	f8d3 1da0 	ldr.w	r1, [r3, #3488]	; 0xda0
      custom_node->context->destroy_timeout);
 801f180:	697b      	ldr	r3, [r7, #20]
 801f182:	691b      	ldr	r3, [r3, #16]
    bool ret = run_xrce_session(
 801f184:	f8d3 3da8 	ldr.w	r3, [r3, #3496]	; 0xda8
 801f188:	8a7a      	ldrh	r2, [r7, #18]
 801f18a:	f001 f92f 	bl	80203ec <run_xrce_session>
 801f18e:	4603      	mov	r3, r0
 801f190:	73fb      	strb	r3, [r7, #15]
    ret &= run_xrce_session(
 801f192:	697b      	ldr	r3, [r7, #20]
 801f194:	6918      	ldr	r0, [r3, #16]
      custom_node->context, custom_node->context->destroy_stream, delete_subscriber,
 801f196:	697b      	ldr	r3, [r7, #20]
 801f198:	691b      	ldr	r3, [r3, #16]
    ret &= run_xrce_session(
 801f19a:	f8d3 1da0 	ldr.w	r1, [r3, #3488]	; 0xda0
      custom_node->context->destroy_timeout);
 801f19e:	697b      	ldr	r3, [r7, #20]
 801f1a0:	691b      	ldr	r3, [r3, #16]
    ret &= run_xrce_session(
 801f1a2:	f8d3 3da8 	ldr.w	r3, [r3, #3496]	; 0xda8
 801f1a6:	8a3a      	ldrh	r2, [r7, #16]
 801f1a8:	f001 f920 	bl	80203ec <run_xrce_session>
 801f1ac:	4603      	mov	r3, r0
 801f1ae:	461a      	mov	r2, r3
 801f1b0:	7bfb      	ldrb	r3, [r7, #15]
 801f1b2:	4013      	ands	r3, r2
 801f1b4:	2b00      	cmp	r3, #0
 801f1b6:	bf14      	ite	ne
 801f1b8:	2301      	movne	r3, #1
 801f1ba:	2300      	moveq	r3, #0
 801f1bc:	73fb      	strb	r3, [r7, #15]
    if (!ret) {
 801f1be:	7bfb      	ldrb	r3, [r7, #15]
 801f1c0:	f083 0301 	eor.w	r3, r3, #1
 801f1c4:	b2db      	uxtb	r3, r3
 801f1c6:	2b00      	cmp	r3, #0
 801f1c8:	d001      	beq.n	801f1ce <rmw_destroy_subscription+0x132>
      result_ret = RMW_RET_TIMEOUT;
 801f1ca:	2302      	movs	r3, #2
 801f1cc:	61fb      	str	r3, [r7, #28]
    }
    rmw_uxrce_fini_subscription_memory(subscription);
 801f1ce:	6838      	ldr	r0, [r7, #0]
 801f1d0:	f000 fef2 	bl	801ffb8 <rmw_uxrce_fini_subscription_memory>
  }

  return result_ret;
 801f1d4:	69fb      	ldr	r3, [r7, #28]
}
 801f1d6:	4618      	mov	r0, r3
 801f1d8:	3720      	adds	r7, #32
 801f1da:	46bd      	mov	sp, r7
 801f1dc:	bd80      	pop	{r7, pc}
	...

0801f1e0 <rmw_take_with_info>:
  const rmw_subscription_t * subscription,
  void * ros_message,
  bool * taken,
  rmw_message_info_t * message_info,
  rmw_subscription_allocation_t * allocation)
{
 801f1e0:	b580      	push	{r7, lr}
 801f1e2:	b090      	sub	sp, #64	; 0x40
 801f1e4:	af00      	add	r7, sp, #0
 801f1e6:	60f8      	str	r0, [r7, #12]
 801f1e8:	60b9      	str	r1, [r7, #8]
 801f1ea:	607a      	str	r2, [r7, #4]
 801f1ec:	603b      	str	r3, [r7, #0]
  (void)message_info;
  (void)allocation;

  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(
 801f1ee:	68fb      	ldr	r3, [r7, #12]
 801f1f0:	681b      	ldr	r3, [r3, #0]
 801f1f2:	2b00      	cmp	r3, #0
 801f1f4:	d00c      	beq.n	801f210 <rmw_take_with_info+0x30>
 801f1f6:	68fb      	ldr	r3, [r7, #12]
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	4a2d      	ldr	r2, [pc, #180]	; (801f2b0 <rmw_take_with_info+0xd0>)
 801f1fc:	6812      	ldr	r2, [r2, #0]
 801f1fe:	4611      	mov	r1, r2
 801f200:	4618      	mov	r0, r3
 801f202:	f7e1 f805 	bl	8000210 <strcmp>
 801f206:	4603      	mov	r3, r0
 801f208:	2b00      	cmp	r3, #0
 801f20a:	d001      	beq.n	801f210 <rmw_take_with_info+0x30>
 801f20c:	230c      	movs	r3, #12
 801f20e:	e04a      	b.n	801f2a6 <rmw_take_with_info+0xc6>
    subscription->implementation_identifier,
    RMW_RET_INCORRECT_RMW_IMPLEMENTATION);

  if (taken != NULL) {
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	2b00      	cmp	r3, #0
 801f214:	d002      	beq.n	801f21c <rmw_take_with_info+0x3c>
    *taken = false;
 801f216:	687b      	ldr	r3, [r7, #4]
 801f218:	2200      	movs	r2, #0
 801f21a:	701a      	strb	r2, [r3, #0]
  }

  rmw_uxrce_subscription_t * custom_subscription = (rmw_uxrce_subscription_t *)subscription->data;
 801f21c:	68fb      	ldr	r3, [r7, #12]
 801f21e:	685b      	ldr	r3, [r3, #4]
 801f220:	63fb      	str	r3, [r7, #60]	; 0x3c

  rmw_uxrce_clean_expired_static_input_buffer();
 801f222:	f001 f835 	bl	8020290 <rmw_uxrce_clean_expired_static_input_buffer>

  UXR_LOCK(&static_buffer_memory.mutex);
 801f226:	4823      	ldr	r0, [pc, #140]	; (801f2b4 <rmw_take_with_info+0xd4>)
 801f228:	f7f4 fd01 	bl	8013c2e <uxr_lock>

  // Find first related item in static buffer memory pool
  rmw_uxrce_mempool_item_t * static_buffer_item = rmw_uxrce_find_static_input_buffer_by_owner(
 801f22c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801f22e:	f000 ffed 	bl	802020c <rmw_uxrce_find_static_input_buffer_by_owner>
 801f232:	63b8      	str	r0, [r7, #56]	; 0x38
    (void *) custom_subscription);
  if (static_buffer_item == NULL) {
 801f234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f236:	2b00      	cmp	r3, #0
 801f238:	d104      	bne.n	801f244 <rmw_take_with_info+0x64>
    UXR_UNLOCK(&static_buffer_memory.mutex);
 801f23a:	481e      	ldr	r0, [pc, #120]	; (801f2b4 <rmw_take_with_info+0xd4>)
 801f23c:	f7f4 fd06 	bl	8013c4c <uxr_unlock>
    return RMW_RET_ERROR;
 801f240:	2301      	movs	r3, #1
 801f242:	e030      	b.n	801f2a6 <rmw_take_with_info+0xc6>
  }

  rmw_uxrce_static_input_buffer_t * static_buffer =
 801f244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f246:	68db      	ldr	r3, [r3, #12]
 801f248:	637b      	str	r3, [r7, #52]	; 0x34
    (rmw_uxrce_static_input_buffer_t *)static_buffer_item->data;

  ucdrBuffer temp_buffer;
  ucdr_init_buffer(
    &temp_buffer,
    static_buffer->buffer,
 801f24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f24c:	f103 0110 	add.w	r1, r3, #16
  ucdr_init_buffer(
 801f250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f252:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 801f256:	f107 0310 	add.w	r3, r7, #16
 801f25a:	4618      	mov	r0, r3
 801f25c:	f7ea ffbf 	bl	800a1de <ucdr_init_buffer>
    static_buffer->length);

  bool deserialize_rv = custom_subscription->type_support_callbacks->cdr_deserialize(
 801f260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f262:	699b      	ldr	r3, [r3, #24]
 801f264:	68db      	ldr	r3, [r3, #12]
 801f266:	f107 0210 	add.w	r2, r7, #16
 801f26a:	68b9      	ldr	r1, [r7, #8]
 801f26c:	4610      	mov	r0, r2
 801f26e:	4798      	blx	r3
 801f270:	4603      	mov	r3, r0
 801f272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    &temp_buffer,
    ros_message);

  put_memory(&static_buffer_memory, static_buffer_item);
 801f276:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801f278:	480f      	ldr	r0, [pc, #60]	; (801f2b8 <rmw_take_with_info+0xd8>)
 801f27a:	f7fe f81f 	bl	801d2bc <put_memory>

  UXR_UNLOCK(&static_buffer_memory.mutex);
 801f27e:	480d      	ldr	r0, [pc, #52]	; (801f2b4 <rmw_take_with_info+0xd4>)
 801f280:	f7f4 fce4 	bl	8013c4c <uxr_unlock>

  if (taken != NULL) {
 801f284:	687b      	ldr	r3, [r7, #4]
 801f286:	2b00      	cmp	r3, #0
 801f288:	d003      	beq.n	801f292 <rmw_take_with_info+0xb2>
    *taken = deserialize_rv;
 801f28a:	687b      	ldr	r3, [r7, #4]
 801f28c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801f290:	701a      	strb	r2, [r3, #0]
  }

  if (!deserialize_rv) {
 801f292:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801f296:	f083 0301 	eor.w	r3, r3, #1
 801f29a:	b2db      	uxtb	r3, r3
 801f29c:	2b00      	cmp	r3, #0
 801f29e:	d001      	beq.n	801f2a4 <rmw_take_with_info+0xc4>
    RMW_UROS_TRACE_MESSAGE("Typesupport desserialize error.")
    return RMW_RET_ERROR;
 801f2a0:	2301      	movs	r3, #1
 801f2a2:	e000      	b.n	801f2a6 <rmw_take_with_info+0xc6>
  }

  return RMW_RET_OK;
 801f2a4:	2300      	movs	r3, #0
}
 801f2a6:	4618      	mov	r0, r3
 801f2a8:	3740      	adds	r7, #64	; 0x40
 801f2aa:	46bd      	mov	sp, r7
 801f2ac:	bd80      	pop	{r7, pc}
 801f2ae:	bf00      	nop
 801f2b0:	08027434 	.word	0x08027434
 801f2b4:	200110d4 	.word	0x200110d4
 801f2b8:	200110c4 	.word	0x200110c4

0801f2bc <rmw_trigger_guard_condition>:
#include "./rmw_microros_internal/error_handling_internal.h"

rmw_ret_t
rmw_trigger_guard_condition(
  const rmw_guard_condition_t * guard_condition)
{
 801f2bc:	b580      	push	{r7, lr}
 801f2be:	b084      	sub	sp, #16
 801f2c0:	af00      	add	r7, sp, #0
 801f2c2:	6078      	str	r0, [r7, #4]
  rmw_ret_t ret = RMW_RET_OK;
 801f2c4:	2300      	movs	r3, #0
 801f2c6:	60fb      	str	r3, [r7, #12]
  if (!guard_condition) {
 801f2c8:	687b      	ldr	r3, [r7, #4]
 801f2ca:	2b00      	cmp	r3, #0
 801f2cc:	d102      	bne.n	801f2d4 <rmw_trigger_guard_condition+0x18>
    RMW_UROS_TRACE_MESSAGE("guard condition pointer is null")
    ret = RMW_RET_ERROR;
 801f2ce:	2301      	movs	r3, #1
 801f2d0:	60fb      	str	r3, [r7, #12]
 801f2d2:	e013      	b.n	801f2fc <rmw_trigger_guard_condition+0x40>
  } else if (!is_uxrce_rmw_identifier_valid(guard_condition->implementation_identifier)) {
 801f2d4:	687b      	ldr	r3, [r7, #4]
 801f2d6:	681b      	ldr	r3, [r3, #0]
 801f2d8:	4618      	mov	r0, r3
 801f2da:	f001 faa7 	bl	802082c <is_uxrce_rmw_identifier_valid>
 801f2de:	4603      	mov	r3, r0
 801f2e0:	f083 0301 	eor.w	r3, r3, #1
 801f2e4:	b2db      	uxtb	r3, r3
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	d002      	beq.n	801f2f0 <rmw_trigger_guard_condition+0x34>
    RMW_UROS_TRACE_MESSAGE("guard condition handle not from this implementation")
    ret = RMW_RET_ERROR;
 801f2ea:	2301      	movs	r3, #1
 801f2ec:	60fb      	str	r3, [r7, #12]
 801f2ee:	e005      	b.n	801f2fc <rmw_trigger_guard_condition+0x40>
  } else {
    rmw_uxrce_guard_condition_t * aux_guard_condition =
 801f2f0:	687b      	ldr	r3, [r7, #4]
 801f2f2:	685b      	ldr	r3, [r3, #4]
 801f2f4:	60bb      	str	r3, [r7, #8]
      (rmw_uxrce_guard_condition_t *)guard_condition->data;
    aux_guard_condition->hasTriggered = true;
 801f2f6:	68bb      	ldr	r3, [r7, #8]
 801f2f8:	2201      	movs	r2, #1
 801f2fa:	741a      	strb	r2, [r3, #16]
  }

  return ret;
 801f2fc:	68fb      	ldr	r3, [r7, #12]
}
 801f2fe:	4618      	mov	r0, r3
 801f300:	3710      	adds	r7, #16
 801f302:	46bd      	mov	sp, r7
 801f304:	bd80      	pop	{r7, pc}
	...

0801f308 <rmw_uxrce_transport_init>:

rmw_ret_t rmw_uxrce_transport_init(
  rmw_context_impl_t * context_impl,
  rmw_uxrce_init_options_impl_t * init_options_impl,
  void * override_transport)
{
 801f308:	b580      	push	{r7, lr}
 801f30a:	b086      	sub	sp, #24
 801f30c:	af00      	add	r7, sp, #0
 801f30e:	60f8      	str	r0, [r7, #12]
 801f310:	60b9      	str	r1, [r7, #8]
 801f312:	607a      	str	r2, [r7, #4]
  }
#undef TRANSPORT_TYPE
#undef TRANSPORT_INIT_FUNTION
#elif defined(RMW_UXRCE_TRANSPORT_CUSTOM)
  uxrCustomTransport * custom_transport = (NULL == context_impl) ?
    (uxrCustomTransport *)override_transport :
 801f314:	68fb      	ldr	r3, [r7, #12]
 801f316:	2b00      	cmp	r3, #0
 801f318:	d002      	beq.n	801f320 <rmw_uxrce_transport_init+0x18>
 801f31a:	68fb      	ldr	r3, [r7, #12]
 801f31c:	3310      	adds	r3, #16
 801f31e:	e000      	b.n	801f322 <rmw_uxrce_transport_init+0x1a>
 801f320:	687b      	ldr	r3, [r7, #4]
  uxrCustomTransport * custom_transport = (NULL == context_impl) ?
 801f322:	617b      	str	r3, [r7, #20]
    &context_impl->transport;
  void * args = (NULL == init_options_impl) ?
    rmw_uxrce_transport_default_params.args :
 801f324:	68bb      	ldr	r3, [r7, #8]
 801f326:	2b00      	cmp	r3, #0
 801f328:	d102      	bne.n	801f330 <rmw_uxrce_transport_init+0x28>
 801f32a:	4b0b      	ldr	r3, [pc, #44]	; (801f358 <rmw_uxrce_transport_init+0x50>)
 801f32c:	685b      	ldr	r3, [r3, #4]
 801f32e:	e001      	b.n	801f334 <rmw_uxrce_transport_init+0x2c>
 801f330:	68bb      	ldr	r3, [r7, #8]
 801f332:	695b      	ldr	r3, [r3, #20]
  void * args = (NULL == init_options_impl) ?
 801f334:	613b      	str	r3, [r7, #16]
    init_options_impl->transport_params.args;

  if (!uxr_init_custom_transport(custom_transport, args)) {
 801f336:	6939      	ldr	r1, [r7, #16]
 801f338:	6978      	ldr	r0, [r7, #20]
 801f33a:	f7f5 fc2f 	bl	8014b9c <uxr_init_custom_transport>
 801f33e:	4603      	mov	r3, r0
 801f340:	f083 0301 	eor.w	r3, r3, #1
 801f344:	b2db      	uxtb	r3, r3
 801f346:	2b00      	cmp	r3, #0
 801f348:	d001      	beq.n	801f34e <rmw_uxrce_transport_init+0x46>
    RMW_UROS_TRACE_MESSAGE("rmw_transport_init CUSTOM: cannot init XRCE transport")
    return RMW_RET_ERROR;
 801f34a:	2301      	movs	r3, #1
 801f34c:	e000      	b.n	801f350 <rmw_uxrce_transport_init+0x48>
  }
#endif /* ifdef RMW_UXRCE_TRANSPORT_SERIAL */
  return RMW_RET_OK;
 801f34e:	2300      	movs	r3, #0
}
 801f350:	4618      	mov	r0, r3
 801f352:	3718      	adds	r7, #24
 801f354:	46bd      	mov	sp, r7
 801f356:	bd80      	pop	{r7, pc}
 801f358:	2001361c 	.word	0x2001361c

0801f35c <rmw_wait>:
  rmw_services_t * services,
  rmw_clients_t * clients,
  rmw_events_t * events,
  rmw_wait_set_t * wait_set,
  const rmw_time_t * wait_timeout)
{
 801f35c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f360:	b09c      	sub	sp, #112	; 0x70
 801f362:	af00      	add	r7, sp, #0
 801f364:	6178      	str	r0, [r7, #20]
 801f366:	6139      	str	r1, [r7, #16]
 801f368:	60fa      	str	r2, [r7, #12]
 801f36a:	60bb      	str	r3, [r7, #8]

  // With `rmw_uxrce_wait_mutex` member `need_to_be_ran` is protected.
  // `session_memory` itself is not protected because it is not modified between
  // rmw_init and rmw_shutdown, and rmw_wait cannot be called concurrently with
  // those functions.
  UXR_LOCK(&rmw_uxrce_wait_mutex);
 801f36c:	48a5      	ldr	r0, [pc, #660]	; (801f604 <rmw_wait+0x2a8>)
 801f36e:	f7f4 fc5e 	bl	8013c2e <uxr_lock>

  if (!services && !clients && !subscriptions && !guard_conditions) {
 801f372:	68fb      	ldr	r3, [r7, #12]
 801f374:	2b00      	cmp	r3, #0
 801f376:	d10d      	bne.n	801f394 <rmw_wait+0x38>
 801f378:	68bb      	ldr	r3, [r7, #8]
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	d10a      	bne.n	801f394 <rmw_wait+0x38>
 801f37e:	697b      	ldr	r3, [r7, #20]
 801f380:	2b00      	cmp	r3, #0
 801f382:	d107      	bne.n	801f394 <rmw_wait+0x38>
 801f384:	693b      	ldr	r3, [r7, #16]
 801f386:	2b00      	cmp	r3, #0
 801f388:	d104      	bne.n	801f394 <rmw_wait+0x38>
    UXR_UNLOCK(&rmw_uxrce_wait_mutex);
 801f38a:	489e      	ldr	r0, [pc, #632]	; (801f604 <rmw_wait+0x2a8>)
 801f38c:	f7f4 fc5e 	bl	8013c4c <uxr_unlock>
    return RMW_RET_OK;
 801f390:	2300      	movs	r3, #0
 801f392:	e1c8      	b.n	801f726 <rmw_wait+0x3ca>
  union {
    int64_t i64;
    int32_t i32;
  } timeout;

  if (NULL == wait_timeout) {
 801f394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f398:	2b00      	cmp	r3, #0
 801f39a:	d103      	bne.n	801f3a4 <rmw_wait+0x48>
    timeout.i32 = UXR_TIMEOUT_INF;
 801f39c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f3a0:	61bb      	str	r3, [r7, #24]
 801f3a2:	e051      	b.n	801f448 <rmw_wait+0xec>
  } else {
    timeout.i64 = (wait_timeout->sec * 1000LL) + RCUTILS_NS_TO_MS(wait_timeout->nsec);
 801f3a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f3a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f3ac:	4602      	mov	r2, r0
 801f3ae:	460b      	mov	r3, r1
 801f3b0:	f04f 0a00 	mov.w	sl, #0
 801f3b4:	f04f 0b00 	mov.w	fp, #0
 801f3b8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 801f3bc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 801f3c0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 801f3c4:	4652      	mov	r2, sl
 801f3c6:	465b      	mov	r3, fp
 801f3c8:	1a14      	subs	r4, r2, r0
 801f3ca:	eb63 0501 	sbc.w	r5, r3, r1
 801f3ce:	f04f 0200 	mov.w	r2, #0
 801f3d2:	f04f 0300 	mov.w	r3, #0
 801f3d6:	00ab      	lsls	r3, r5, #2
 801f3d8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 801f3dc:	00a2      	lsls	r2, r4, #2
 801f3de:	4614      	mov	r4, r2
 801f3e0:	461d      	mov	r5, r3
 801f3e2:	eb14 0800 	adds.w	r8, r4, r0
 801f3e6:	eb45 0901 	adc.w	r9, r5, r1
 801f3ea:	f04f 0200 	mov.w	r2, #0
 801f3ee:	f04f 0300 	mov.w	r3, #0
 801f3f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801f3f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801f3fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801f3fe:	4690      	mov	r8, r2
 801f400:	4699      	mov	r9, r3
 801f402:	4644      	mov	r4, r8
 801f404:	464d      	mov	r5, r9
 801f406:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f40a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801f40e:	4a7e      	ldr	r2, [pc, #504]	; (801f608 <rmw_wait+0x2ac>)
 801f410:	f04f 0300 	mov.w	r3, #0
 801f414:	f7e1 fcb8 	bl	8000d88 <__aeabi_uldivmod>
 801f418:	4602      	mov	r2, r0
 801f41a:	460b      	mov	r3, r1
 801f41c:	18a1      	adds	r1, r4, r2
 801f41e:	6039      	str	r1, [r7, #0]
 801f420:	eb45 0303 	adc.w	r3, r5, r3
 801f424:	607b      	str	r3, [r7, #4]
 801f426:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f42a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    timeout.i32 = (timeout.i64 > INT32_MAX) ? INT32_MAX : timeout.i64;
 801f42e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801f432:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801f436:	f173 0100 	sbcs.w	r1, r3, #0
 801f43a:	db03      	blt.n	801f444 <rmw_wait+0xe8>
 801f43c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801f440:	f04f 0300 	mov.w	r3, #0
 801f444:	4613      	mov	r3, r2
 801f446:	61bb      	str	r3, [r7, #24]
  }

  rmw_uxrce_clean_expired_static_input_buffer();
 801f448:	f000 ff22 	bl	8020290 <rmw_uxrce_clean_expired_static_input_buffer>

  // Clear run flag for all sessions
  rmw_uxrce_mempool_item_t * item = session_memory.allocateditems;
 801f44c:	4b6f      	ldr	r3, [pc, #444]	; (801f60c <rmw_wait+0x2b0>)
 801f44e:	681b      	ldr	r3, [r3, #0]
 801f450:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (item != NULL) {
 801f452:	e00b      	b.n	801f46c <rmw_wait+0x110>
    rmw_context_impl_t * custom_context = (rmw_context_impl_t *)item->data;
 801f454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f456:	68db      	ldr	r3, [r3, #12]
 801f458:	623b      	str	r3, [r7, #32]
    custom_context->need_to_be_ran = false;
 801f45a:	6a3b      	ldr	r3, [r7, #32]
 801f45c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f460:	2200      	movs	r2, #0
 801f462:	f883 2fbc 	strb.w	r2, [r3, #4028]	; 0xfbc
    item = item->next;
 801f466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f468:	689b      	ldr	r3, [r3, #8]
 801f46a:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (item != NULL) {
 801f46c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f46e:	2b00      	cmp	r3, #0
 801f470:	d1f0      	bne.n	801f454 <rmw_wait+0xf8>
  }

  // TODO(pablogs9): What happens if there already data in one entity?
  // Enable flag for every XRCE session available in the entities
  for (size_t i = 0; services && i < services->service_count; ++i) {
 801f472:	2300      	movs	r3, #0
 801f474:	66bb      	str	r3, [r7, #104]	; 0x68
 801f476:	e011      	b.n	801f49c <rmw_wait+0x140>
    rmw_uxrce_service_t * custom_service = (rmw_uxrce_service_t *)services->services[i];
 801f478:	68fb      	ldr	r3, [r7, #12]
 801f47a:	685a      	ldr	r2, [r3, #4]
 801f47c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f47e:	009b      	lsls	r3, r3, #2
 801f480:	4413      	add	r3, r2
 801f482:	681b      	ldr	r3, [r3, #0]
 801f484:	64bb      	str	r3, [r7, #72]	; 0x48
    custom_service->owner_node->context->need_to_be_ran = true;
 801f486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f48a:	691b      	ldr	r3, [r3, #16]
 801f48c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f490:	2201      	movs	r2, #1
 801f492:	f883 2fbc 	strb.w	r2, [r3, #4028]	; 0xfbc
  for (size_t i = 0; services && i < services->service_count; ++i) {
 801f496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f498:	3301      	adds	r3, #1
 801f49a:	66bb      	str	r3, [r7, #104]	; 0x68
 801f49c:	68fb      	ldr	r3, [r7, #12]
 801f49e:	2b00      	cmp	r3, #0
 801f4a0:	d004      	beq.n	801f4ac <rmw_wait+0x150>
 801f4a2:	68fb      	ldr	r3, [r7, #12]
 801f4a4:	681b      	ldr	r3, [r3, #0]
 801f4a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801f4a8:	429a      	cmp	r2, r3
 801f4aa:	d3e5      	bcc.n	801f478 <rmw_wait+0x11c>
  }

  for (size_t i = 0; clients && i < clients->client_count; ++i) {
 801f4ac:	2300      	movs	r3, #0
 801f4ae:	667b      	str	r3, [r7, #100]	; 0x64
 801f4b0:	e011      	b.n	801f4d6 <rmw_wait+0x17a>
    rmw_uxrce_client_t * custom_client = (rmw_uxrce_client_t *)clients->clients[i];
 801f4b2:	68bb      	ldr	r3, [r7, #8]
 801f4b4:	685a      	ldr	r2, [r3, #4]
 801f4b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801f4b8:	009b      	lsls	r3, r3, #2
 801f4ba:	4413      	add	r3, r2
 801f4bc:	681b      	ldr	r3, [r3, #0]
 801f4be:	647b      	str	r3, [r7, #68]	; 0x44
    custom_client->owner_node->context->need_to_be_ran = true;
 801f4c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f4c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f4c4:	691b      	ldr	r3, [r3, #16]
 801f4c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f4ca:	2201      	movs	r2, #1
 801f4cc:	f883 2fbc 	strb.w	r2, [r3, #4028]	; 0xfbc
  for (size_t i = 0; clients && i < clients->client_count; ++i) {
 801f4d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801f4d2:	3301      	adds	r3, #1
 801f4d4:	667b      	str	r3, [r7, #100]	; 0x64
 801f4d6:	68bb      	ldr	r3, [r7, #8]
 801f4d8:	2b00      	cmp	r3, #0
 801f4da:	d004      	beq.n	801f4e6 <rmw_wait+0x18a>
 801f4dc:	68bb      	ldr	r3, [r7, #8]
 801f4de:	681b      	ldr	r3, [r3, #0]
 801f4e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801f4e2:	429a      	cmp	r2, r3
 801f4e4:	d3e5      	bcc.n	801f4b2 <rmw_wait+0x156>
  }

  for (size_t i = 0; subscriptions && i < subscriptions->subscriber_count; ++i) {
 801f4e6:	2300      	movs	r3, #0
 801f4e8:	663b      	str	r3, [r7, #96]	; 0x60
 801f4ea:	e011      	b.n	801f510 <rmw_wait+0x1b4>
    rmw_uxrce_subscription_t * custom_subscription =
      (rmw_uxrce_subscription_t *)subscriptions->subscribers[i];
 801f4ec:	697b      	ldr	r3, [r7, #20]
 801f4ee:	685a      	ldr	r2, [r3, #4]
 801f4f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801f4f2:	009b      	lsls	r3, r3, #2
 801f4f4:	4413      	add	r3, r2
    rmw_uxrce_subscription_t * custom_subscription =
 801f4f6:	681b      	ldr	r3, [r3, #0]
 801f4f8:	643b      	str	r3, [r7, #64]	; 0x40
    custom_subscription->owner_node->context->need_to_be_ran = true;
 801f4fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f4fc:	6a1b      	ldr	r3, [r3, #32]
 801f4fe:	691b      	ldr	r3, [r3, #16]
 801f500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f504:	2201      	movs	r2, #1
 801f506:	f883 2fbc 	strb.w	r2, [r3, #4028]	; 0xfbc
  for (size_t i = 0; subscriptions && i < subscriptions->subscriber_count; ++i) {
 801f50a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801f50c:	3301      	adds	r3, #1
 801f50e:	663b      	str	r3, [r7, #96]	; 0x60
 801f510:	697b      	ldr	r3, [r7, #20]
 801f512:	2b00      	cmp	r3, #0
 801f514:	d004      	beq.n	801f520 <rmw_wait+0x1c4>
 801f516:	697b      	ldr	r3, [r7, #20]
 801f518:	681b      	ldr	r3, [r3, #0]
 801f51a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801f51c:	429a      	cmp	r2, r3
 801f51e:	d3e5      	bcc.n	801f4ec <rmw_wait+0x190>
  }

  // Count sessions to be ran
  uint8_t available_contexts = 0;
 801f520:	2300      	movs	r3, #0
 801f522:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  item = session_memory.allocateditems;
 801f526:	4b39      	ldr	r3, [pc, #228]	; (801f60c <rmw_wait+0x2b0>)
 801f528:	681b      	ldr	r3, [r3, #0]
 801f52a:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (item != NULL) {
 801f52c:	e010      	b.n	801f550 <rmw_wait+0x1f4>
    rmw_context_impl_t * custom_context = (rmw_context_impl_t *)item->data;
 801f52e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f530:	68db      	ldr	r3, [r3, #12]
 801f532:	627b      	str	r3, [r7, #36]	; 0x24
    available_contexts += custom_context->need_to_be_ran ? 1 : 0;
 801f534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f53a:	f893 3fbc 	ldrb.w	r3, [r3, #4028]	; 0xfbc
 801f53e:	461a      	mov	r2, r3
 801f540:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801f544:	4413      	add	r3, r2
 801f546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    item = item->next;
 801f54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f54c:	689b      	ldr	r3, [r3, #8]
 801f54e:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (item != NULL) {
 801f550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f552:	2b00      	cmp	r3, #0
 801f554:	d1eb      	bne.n	801f52e <rmw_wait+0x1d2>
  }

  // There is no context that contais any of the wait set entities. Nothing to wait here.
  if (available_contexts != 0) {
 801f556:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	d033      	beq.n	801f5c6 <rmw_wait+0x26a>
    int32_t per_session_timeout =
      (timeout.i32 == UXR_TIMEOUT_INF) ? UXR_TIMEOUT_INF :
 801f55e:	69bb      	ldr	r3, [r7, #24]
 801f560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f564:	d011      	beq.n	801f58a <rmw_wait+0x22e>
      (int32_t)((float)timeout.i32 / (float)available_contexts);
 801f566:	69bb      	ldr	r3, [r7, #24]
 801f568:	ee07 3a90 	vmov	s15, r3
 801f56c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801f570:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801f574:	ee07 3a90 	vmov	s15, r3
 801f578:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f57c:	eec6 7a87 	vdiv.f32	s15, s13, s14
      (timeout.i32 == UXR_TIMEOUT_INF) ? UXR_TIMEOUT_INF :
 801f580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f584:	ee17 3a90 	vmov	r3, s15
 801f588:	e001      	b.n	801f58e <rmw_wait+0x232>
 801f58a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    int32_t per_session_timeout =
 801f58e:	63fb      	str	r3, [r7, #60]	; 0x3c

    item = session_memory.allocateditems;
 801f590:	4b1e      	ldr	r3, [pc, #120]	; (801f60c <rmw_wait+0x2b0>)
 801f592:	681b      	ldr	r3, [r3, #0]
 801f594:	66fb      	str	r3, [r7, #108]	; 0x6c
    while (item != NULL) {
 801f596:	e013      	b.n	801f5c0 <rmw_wait+0x264>
      rmw_context_impl_t * custom_context = (rmw_context_impl_t *)item->data;
 801f598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f59a:	68db      	ldr	r3, [r3, #12]
 801f59c:	63bb      	str	r3, [r7, #56]	; 0x38
      if (custom_context->need_to_be_ran) {
 801f59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f5a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f5a4:	f893 3fbc 	ldrb.w	r3, [r3, #4028]	; 0xfbc
 801f5a8:	2b00      	cmp	r3, #0
 801f5aa:	d006      	beq.n	801f5ba <rmw_wait+0x25e>
        uxr_run_session_until_data(&custom_context->session, per_session_timeout);
 801f5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f5ae:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801f5b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801f5b4:	4618      	mov	r0, r3
 801f5b6:	f7f0 ff61 	bl	801047c <uxr_run_session_until_data>
      }
      item = item->next;
 801f5ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f5bc:	689b      	ldr	r3, [r3, #8]
 801f5be:	66fb      	str	r3, [r7, #108]	; 0x6c
    while (item != NULL) {
 801f5c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f5c2:	2b00      	cmp	r3, #0
 801f5c4:	d1e8      	bne.n	801f598 <rmw_wait+0x23c>
    }
  }

  UXR_UNLOCK(&rmw_uxrce_wait_mutex);
 801f5c6:	480f      	ldr	r0, [pc, #60]	; (801f604 <rmw_wait+0x2a8>)
 801f5c8:	f7f4 fb40 	bl	8013c4c <uxr_unlock>

  bool buffered_status = false;
 801f5cc:	2300      	movs	r3, #0
 801f5ce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

  // Check services
  for (size_t i = 0; services && i < services->service_count; ++i) {
 801f5d2:	2300      	movs	r3, #0
 801f5d4:	65bb      	str	r3, [r7, #88]	; 0x58
 801f5d6:	e021      	b.n	801f61c <rmw_wait+0x2c0>
    rmw_uxrce_service_t * custom_service = (rmw_uxrce_service_t *)services->services[i];
 801f5d8:	68fb      	ldr	r3, [r7, #12]
 801f5da:	685a      	ldr	r2, [r3, #4]
 801f5dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f5de:	009b      	lsls	r3, r3, #2
 801f5e0:	4413      	add	r3, r2
 801f5e2:	681b      	ldr	r3, [r3, #0]
 801f5e4:	637b      	str	r3, [r7, #52]	; 0x34

    if (NULL == rmw_uxrce_find_static_input_buffer_by_owner((void *) custom_service)) {
 801f5e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801f5e8:	f000 fe10 	bl	802020c <rmw_uxrce_find_static_input_buffer_by_owner>
 801f5ec:	4603      	mov	r3, r0
 801f5ee:	2b00      	cmp	r3, #0
 801f5f0:	d10e      	bne.n	801f610 <rmw_wait+0x2b4>
      services->services[i] = NULL;
 801f5f2:	68fb      	ldr	r3, [r7, #12]
 801f5f4:	685a      	ldr	r2, [r3, #4]
 801f5f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f5f8:	009b      	lsls	r3, r3, #2
 801f5fa:	4413      	add	r3, r2
 801f5fc:	2200      	movs	r2, #0
 801f5fe:	601a      	str	r2, [r3, #0]
 801f600:	e009      	b.n	801f616 <rmw_wait+0x2ba>
 801f602:	bf00      	nop
 801f604:	200134c4 	.word	0x200134c4
 801f608:	000f4240 	.word	0x000f4240
 801f60c:	2000e8a8 	.word	0x2000e8a8
    } else {
      buffered_status = true;
 801f610:	2301      	movs	r3, #1
 801f612:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  for (size_t i = 0; services && i < services->service_count; ++i) {
 801f616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f618:	3301      	adds	r3, #1
 801f61a:	65bb      	str	r3, [r7, #88]	; 0x58
 801f61c:	68fb      	ldr	r3, [r7, #12]
 801f61e:	2b00      	cmp	r3, #0
 801f620:	d004      	beq.n	801f62c <rmw_wait+0x2d0>
 801f622:	68fb      	ldr	r3, [r7, #12]
 801f624:	681b      	ldr	r3, [r3, #0]
 801f626:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f628:	429a      	cmp	r2, r3
 801f62a:	d3d5      	bcc.n	801f5d8 <rmw_wait+0x27c>
    }
  }

  // Check clients
  for (size_t i = 0; clients && i < clients->client_count; ++i) {
 801f62c:	2300      	movs	r3, #0
 801f62e:	657b      	str	r3, [r7, #84]	; 0x54
 801f630:	e01a      	b.n	801f668 <rmw_wait+0x30c>
    rmw_uxrce_client_t * custom_client = (rmw_uxrce_client_t *)clients->clients[i];
 801f632:	68bb      	ldr	r3, [r7, #8]
 801f634:	685a      	ldr	r2, [r3, #4]
 801f636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f638:	009b      	lsls	r3, r3, #2
 801f63a:	4413      	add	r3, r2
 801f63c:	681b      	ldr	r3, [r3, #0]
 801f63e:	633b      	str	r3, [r7, #48]	; 0x30

    if (NULL == rmw_uxrce_find_static_input_buffer_by_owner((void *) custom_client)) {
 801f640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f642:	f000 fde3 	bl	802020c <rmw_uxrce_find_static_input_buffer_by_owner>
 801f646:	4603      	mov	r3, r0
 801f648:	2b00      	cmp	r3, #0
 801f64a:	d107      	bne.n	801f65c <rmw_wait+0x300>
      clients->clients[i] = NULL;
 801f64c:	68bb      	ldr	r3, [r7, #8]
 801f64e:	685a      	ldr	r2, [r3, #4]
 801f650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f652:	009b      	lsls	r3, r3, #2
 801f654:	4413      	add	r3, r2
 801f656:	2200      	movs	r2, #0
 801f658:	601a      	str	r2, [r3, #0]
 801f65a:	e002      	b.n	801f662 <rmw_wait+0x306>
    } else {
      buffered_status = true;
 801f65c:	2301      	movs	r3, #1
 801f65e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  for (size_t i = 0; clients && i < clients->client_count; ++i) {
 801f662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f664:	3301      	adds	r3, #1
 801f666:	657b      	str	r3, [r7, #84]	; 0x54
 801f668:	68bb      	ldr	r3, [r7, #8]
 801f66a:	2b00      	cmp	r3, #0
 801f66c:	d004      	beq.n	801f678 <rmw_wait+0x31c>
 801f66e:	68bb      	ldr	r3, [r7, #8]
 801f670:	681b      	ldr	r3, [r3, #0]
 801f672:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f674:	429a      	cmp	r2, r3
 801f676:	d3dc      	bcc.n	801f632 <rmw_wait+0x2d6>
    }
  }

  // Check subscriptions
  for (size_t i = 0; subscriptions && i < subscriptions->subscriber_count; ++i) {
 801f678:	2300      	movs	r3, #0
 801f67a:	653b      	str	r3, [r7, #80]	; 0x50
 801f67c:	e01a      	b.n	801f6b4 <rmw_wait+0x358>
    rmw_uxrce_subscription_t * custom_subscription =
      (rmw_uxrce_subscription_t *)subscriptions->subscribers[i];
 801f67e:	697b      	ldr	r3, [r7, #20]
 801f680:	685a      	ldr	r2, [r3, #4]
 801f682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f684:	009b      	lsls	r3, r3, #2
 801f686:	4413      	add	r3, r2
    rmw_uxrce_subscription_t * custom_subscription =
 801f688:	681b      	ldr	r3, [r3, #0]
 801f68a:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (NULL == rmw_uxrce_find_static_input_buffer_by_owner((void *) custom_subscription)) {
 801f68c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f68e:	f000 fdbd 	bl	802020c <rmw_uxrce_find_static_input_buffer_by_owner>
 801f692:	4603      	mov	r3, r0
 801f694:	2b00      	cmp	r3, #0
 801f696:	d107      	bne.n	801f6a8 <rmw_wait+0x34c>
      subscriptions->subscribers[i] = NULL;
 801f698:	697b      	ldr	r3, [r7, #20]
 801f69a:	685a      	ldr	r2, [r3, #4]
 801f69c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f69e:	009b      	lsls	r3, r3, #2
 801f6a0:	4413      	add	r3, r2
 801f6a2:	2200      	movs	r2, #0
 801f6a4:	601a      	str	r2, [r3, #0]
 801f6a6:	e002      	b.n	801f6ae <rmw_wait+0x352>
    } else {
      buffered_status = true;
 801f6a8:	2301      	movs	r3, #1
 801f6aa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  for (size_t i = 0; subscriptions && i < subscriptions->subscriber_count; ++i) {
 801f6ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f6b0:	3301      	adds	r3, #1
 801f6b2:	653b      	str	r3, [r7, #80]	; 0x50
 801f6b4:	697b      	ldr	r3, [r7, #20]
 801f6b6:	2b00      	cmp	r3, #0
 801f6b8:	d004      	beq.n	801f6c4 <rmw_wait+0x368>
 801f6ba:	697b      	ldr	r3, [r7, #20]
 801f6bc:	681b      	ldr	r3, [r3, #0]
 801f6be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801f6c0:	429a      	cmp	r2, r3
 801f6c2:	d3dc      	bcc.n	801f67e <rmw_wait+0x322>
    }
  }

  // Check guard conditions
  for (size_t i = 0; guard_conditions && i < guard_conditions->guard_condition_count; ++i) {
 801f6c4:	2300      	movs	r3, #0
 801f6c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f6c8:	e01e      	b.n	801f708 <rmw_wait+0x3ac>
    rmw_uxrce_guard_condition_t * custom_guard_condition =
      (rmw_uxrce_guard_condition_t *)guard_conditions->guard_conditions[i];
 801f6ca:	693b      	ldr	r3, [r7, #16]
 801f6cc:	685a      	ldr	r2, [r3, #4]
 801f6ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f6d0:	009b      	lsls	r3, r3, #2
 801f6d2:	4413      	add	r3, r2
    rmw_uxrce_guard_condition_t * custom_guard_condition =
 801f6d4:	681b      	ldr	r3, [r3, #0]
 801f6d6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (custom_guard_condition->hasTriggered == false) {
 801f6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f6da:	7c1b      	ldrb	r3, [r3, #16]
 801f6dc:	f083 0301 	eor.w	r3, r3, #1
 801f6e0:	b2db      	uxtb	r3, r3
 801f6e2:	2b00      	cmp	r3, #0
 801f6e4:	d007      	beq.n	801f6f6 <rmw_wait+0x39a>
      guard_conditions->guard_conditions[i] = NULL;
 801f6e6:	693b      	ldr	r3, [r7, #16]
 801f6e8:	685a      	ldr	r2, [r3, #4]
 801f6ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f6ec:	009b      	lsls	r3, r3, #2
 801f6ee:	4413      	add	r3, r2
 801f6f0:	2200      	movs	r2, #0
 801f6f2:	601a      	str	r2, [r3, #0]
 801f6f4:	e005      	b.n	801f702 <rmw_wait+0x3a6>
    } else {
      custom_guard_condition->hasTriggered = false;
 801f6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f6f8:	2200      	movs	r2, #0
 801f6fa:	741a      	strb	r2, [r3, #16]
      buffered_status = true;
 801f6fc:	2301      	movs	r3, #1
 801f6fe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  for (size_t i = 0; guard_conditions && i < guard_conditions->guard_condition_count; ++i) {
 801f702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f704:	3301      	adds	r3, #1
 801f706:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f708:	693b      	ldr	r3, [r7, #16]
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	d004      	beq.n	801f718 <rmw_wait+0x3bc>
 801f70e:	693b      	ldr	r3, [r7, #16]
 801f710:	681b      	ldr	r3, [r3, #0]
 801f712:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f714:	429a      	cmp	r2, r3
 801f716:	d3d8      	bcc.n	801f6ca <rmw_wait+0x36e>
    }
  }

  return (buffered_status) ? RMW_RET_OK : RMW_RET_TIMEOUT;
 801f718:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801f71c:	2b00      	cmp	r3, #0
 801f71e:	d001      	beq.n	801f724 <rmw_wait+0x3c8>
 801f720:	2300      	movs	r3, #0
 801f722:	e000      	b.n	801f726 <rmw_wait+0x3ca>
 801f724:	2302      	movs	r3, #2
}
 801f726:	4618      	mov	r0, r3
 801f728:	3770      	adds	r7, #112	; 0x70
 801f72a:	46bd      	mov	sp, r7
 801f72c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801f730 <rmw_create_wait_set>:

rmw_wait_set_t *
rmw_create_wait_set(
  rmw_context_t * context,
  size_t max_conditions)
{
 801f730:	b580      	push	{r7, lr}
 801f732:	b084      	sub	sp, #16
 801f734:	af00      	add	r7, sp, #0
 801f736:	6078      	str	r0, [r7, #4]
 801f738:	6039      	str	r1, [r7, #0]
  (void)context;
  (void)max_conditions;

  rmw_uxrce_mempool_item_t * memory_node = get_memory(&wait_set_memory);
 801f73a:	4809      	ldr	r0, [pc, #36]	; (801f760 <rmw_create_wait_set+0x30>)
 801f73c:	f7fd fd82 	bl	801d244 <get_memory>
 801f740:	60f8      	str	r0, [r7, #12]
  if (!memory_node) {
 801f742:	68fb      	ldr	r3, [r7, #12]
 801f744:	2b00      	cmp	r3, #0
 801f746:	d101      	bne.n	801f74c <rmw_create_wait_set+0x1c>
    RMW_UROS_TRACE_MESSAGE("Not available memory node")
    return NULL;
 801f748:	2300      	movs	r3, #0
 801f74a:	e004      	b.n	801f756 <rmw_create_wait_set+0x26>
  }
  rmw_uxrce_wait_set_t * aux_wait_set = (rmw_uxrce_wait_set_t *)memory_node->data;
 801f74c:	68fb      	ldr	r3, [r7, #12]
 801f74e:	68db      	ldr	r3, [r3, #12]
 801f750:	60bb      	str	r3, [r7, #8]

  return &aux_wait_set->rmw_wait_set;
 801f752:	68bb      	ldr	r3, [r7, #8]
 801f754:	3310      	adds	r3, #16
}
 801f756:	4618      	mov	r0, r3
 801f758:	3710      	adds	r7, #16
 801f75a:	46bd      	mov	sp, r7
 801f75c:	bd80      	pop	{r7, pc}
 801f75e:	bf00      	nop
 801f760:	20013310 	.word	0x20013310

0801f764 <rmw_destroy_wait_set>:

rmw_ret_t
rmw_destroy_wait_set(
  rmw_wait_set_t * wait_set)
{
 801f764:	b580      	push	{r7, lr}
 801f766:	b084      	sub	sp, #16
 801f768:	af00      	add	r7, sp, #0
 801f76a:	6078      	str	r0, [r7, #4]
  rmw_uxrce_mempool_item_t * item = wait_set_memory.allocateditems;
 801f76c:	4b0e      	ldr	r3, [pc, #56]	; (801f7a8 <rmw_destroy_wait_set+0x44>)
 801f76e:	681b      	ldr	r3, [r3, #0]
 801f770:	60fb      	str	r3, [r7, #12]

  while (NULL != item) {
 801f772:	e010      	b.n	801f796 <rmw_destroy_wait_set+0x32>
    rmw_uxrce_wait_set_t * aux_wait_set = (rmw_uxrce_wait_set_t *)item->data;
 801f774:	68fb      	ldr	r3, [r7, #12]
 801f776:	68db      	ldr	r3, [r3, #12]
 801f778:	60bb      	str	r3, [r7, #8]
    if (&aux_wait_set->rmw_wait_set == wait_set) {
 801f77a:	68bb      	ldr	r3, [r7, #8]
 801f77c:	3310      	adds	r3, #16
 801f77e:	687a      	ldr	r2, [r7, #4]
 801f780:	429a      	cmp	r2, r3
 801f782:	d105      	bne.n	801f790 <rmw_destroy_wait_set+0x2c>
      put_memory(&wait_set_memory, item);
 801f784:	68f9      	ldr	r1, [r7, #12]
 801f786:	4808      	ldr	r0, [pc, #32]	; (801f7a8 <rmw_destroy_wait_set+0x44>)
 801f788:	f7fd fd98 	bl	801d2bc <put_memory>
      return RMW_RET_OK;
 801f78c:	2300      	movs	r3, #0
 801f78e:	e006      	b.n	801f79e <rmw_destroy_wait_set+0x3a>
    }
    item = item->next;
 801f790:	68fb      	ldr	r3, [r7, #12]
 801f792:	689b      	ldr	r3, [r3, #8]
 801f794:	60fb      	str	r3, [r7, #12]
  while (NULL != item) {
 801f796:	68fb      	ldr	r3, [r7, #12]
 801f798:	2b00      	cmp	r3, #0
 801f79a:	d1eb      	bne.n	801f774 <rmw_destroy_wait_set+0x10>
  }

  return RMW_RET_ERROR;
 801f79c:	2301      	movs	r3, #1
}
 801f79e:	4618      	mov	r0, r3
 801f7a0:	3710      	adds	r7, #16
 801f7a2:	46bd      	mov	sp, r7
 801f7a4:	bd80      	pop	{r7, pc}
 801f7a6:	bf00      	nop
 801f7a8:	20013310 	.word	0x20013310

0801f7ac <rmw_uxrce_init_service_memory>:
      } \
    } \
  }


RMW_INIT_MEMORY(service)
 801f7ac:	b580      	push	{r7, lr}
 801f7ae:	b086      	sub	sp, #24
 801f7b0:	af00      	add	r7, sp, #0
 801f7b2:	60f8      	str	r0, [r7, #12]
 801f7b4:	60b9      	str	r1, [r7, #8]
 801f7b6:	607a      	str	r2, [r7, #4]
 801f7b8:	687b      	ldr	r3, [r7, #4]
 801f7ba:	2b00      	cmp	r3, #0
 801f7bc:	d048      	beq.n	801f850 <rmw_uxrce_init_service_memory+0xa4>
 801f7be:	68fb      	ldr	r3, [r7, #12]
 801f7c0:	7a1b      	ldrb	r3, [r3, #8]
 801f7c2:	f083 0301 	eor.w	r3, r3, #1
 801f7c6:	b2db      	uxtb	r3, r3
 801f7c8:	2b00      	cmp	r3, #0
 801f7ca:	d041      	beq.n	801f850 <rmw_uxrce_init_service_memory+0xa4>
 801f7cc:	68fb      	ldr	r3, [r7, #12]
 801f7ce:	3310      	adds	r3, #16
 801f7d0:	4618      	mov	r0, r3
 801f7d2:	f7f4 fa1b 	bl	8013c0c <uxr_init_lock>
 801f7d6:	68fb      	ldr	r3, [r7, #12]
 801f7d8:	2201      	movs	r2, #1
 801f7da:	721a      	strb	r2, [r3, #8]
 801f7dc:	68fb      	ldr	r3, [r7, #12]
 801f7de:	22f0      	movs	r2, #240	; 0xf0
 801f7e0:	60da      	str	r2, [r3, #12]
 801f7e2:	68fb      	ldr	r3, [r7, #12]
 801f7e4:	2200      	movs	r2, #0
 801f7e6:	601a      	str	r2, [r3, #0]
 801f7e8:	68fb      	ldr	r3, [r7, #12]
 801f7ea:	2200      	movs	r2, #0
 801f7ec:	605a      	str	r2, [r3, #4]
 801f7ee:	2300      	movs	r3, #0
 801f7f0:	617b      	str	r3, [r7, #20]
 801f7f2:	e029      	b.n	801f848 <rmw_uxrce_init_service_memory+0x9c>
 801f7f4:	697a      	ldr	r2, [r7, #20]
 801f7f6:	4613      	mov	r3, r2
 801f7f8:	011b      	lsls	r3, r3, #4
 801f7fa:	1a9b      	subs	r3, r3, r2
 801f7fc:	011b      	lsls	r3, r3, #4
 801f7fe:	461a      	mov	r2, r3
 801f800:	68bb      	ldr	r3, [r7, #8]
 801f802:	4413      	add	r3, r2
 801f804:	4619      	mov	r1, r3
 801f806:	68f8      	ldr	r0, [r7, #12]
 801f808:	f7fd fd58 	bl	801d2bc <put_memory>
 801f80c:	697a      	ldr	r2, [r7, #20]
 801f80e:	4613      	mov	r3, r2
 801f810:	011b      	lsls	r3, r3, #4
 801f812:	1a9b      	subs	r3, r3, r2
 801f814:	011b      	lsls	r3, r3, #4
 801f816:	4619      	mov	r1, r3
 801f818:	697a      	ldr	r2, [r7, #20]
 801f81a:	4613      	mov	r3, r2
 801f81c:	011b      	lsls	r3, r3, #4
 801f81e:	1a9b      	subs	r3, r3, r2
 801f820:	011b      	lsls	r3, r3, #4
 801f822:	461a      	mov	r2, r3
 801f824:	68bb      	ldr	r3, [r7, #8]
 801f826:	4413      	add	r3, r2
 801f828:	68ba      	ldr	r2, [r7, #8]
 801f82a:	440a      	add	r2, r1
 801f82c:	60da      	str	r2, [r3, #12]
 801f82e:	697a      	ldr	r2, [r7, #20]
 801f830:	4613      	mov	r3, r2
 801f832:	011b      	lsls	r3, r3, #4
 801f834:	1a9b      	subs	r3, r3, r2
 801f836:	011b      	lsls	r3, r3, #4
 801f838:	461a      	mov	r2, r3
 801f83a:	68bb      	ldr	r3, [r7, #8]
 801f83c:	4413      	add	r3, r2
 801f83e:	2200      	movs	r2, #0
 801f840:	701a      	strb	r2, [r3, #0]
 801f842:	697b      	ldr	r3, [r7, #20]
 801f844:	3301      	adds	r3, #1
 801f846:	617b      	str	r3, [r7, #20]
 801f848:	697a      	ldr	r2, [r7, #20]
 801f84a:	687b      	ldr	r3, [r7, #4]
 801f84c:	429a      	cmp	r2, r3
 801f84e:	d3d1      	bcc.n	801f7f4 <rmw_uxrce_init_service_memory+0x48>
 801f850:	bf00      	nop
 801f852:	3718      	adds	r7, #24
 801f854:	46bd      	mov	sp, r7
 801f856:	bd80      	pop	{r7, pc}

0801f858 <rmw_uxrce_init_client_memory>:
RMW_INIT_MEMORY(client)
 801f858:	b580      	push	{r7, lr}
 801f85a:	b086      	sub	sp, #24
 801f85c:	af00      	add	r7, sp, #0
 801f85e:	60f8      	str	r0, [r7, #12]
 801f860:	60b9      	str	r1, [r7, #8]
 801f862:	607a      	str	r2, [r7, #4]
 801f864:	687b      	ldr	r3, [r7, #4]
 801f866:	2b00      	cmp	r3, #0
 801f868:	d048      	beq.n	801f8fc <rmw_uxrce_init_client_memory+0xa4>
 801f86a:	68fb      	ldr	r3, [r7, #12]
 801f86c:	7a1b      	ldrb	r3, [r3, #8]
 801f86e:	f083 0301 	eor.w	r3, r3, #1
 801f872:	b2db      	uxtb	r3, r3
 801f874:	2b00      	cmp	r3, #0
 801f876:	d041      	beq.n	801f8fc <rmw_uxrce_init_client_memory+0xa4>
 801f878:	68fb      	ldr	r3, [r7, #12]
 801f87a:	3310      	adds	r3, #16
 801f87c:	4618      	mov	r0, r3
 801f87e:	f7f4 f9c5 	bl	8013c0c <uxr_init_lock>
 801f882:	68fb      	ldr	r3, [r7, #12]
 801f884:	2201      	movs	r2, #1
 801f886:	721a      	strb	r2, [r3, #8]
 801f888:	68fb      	ldr	r3, [r7, #12]
 801f88a:	22f0      	movs	r2, #240	; 0xf0
 801f88c:	60da      	str	r2, [r3, #12]
 801f88e:	68fb      	ldr	r3, [r7, #12]
 801f890:	2200      	movs	r2, #0
 801f892:	601a      	str	r2, [r3, #0]
 801f894:	68fb      	ldr	r3, [r7, #12]
 801f896:	2200      	movs	r2, #0
 801f898:	605a      	str	r2, [r3, #4]
 801f89a:	2300      	movs	r3, #0
 801f89c:	617b      	str	r3, [r7, #20]
 801f89e:	e029      	b.n	801f8f4 <rmw_uxrce_init_client_memory+0x9c>
 801f8a0:	697a      	ldr	r2, [r7, #20]
 801f8a2:	4613      	mov	r3, r2
 801f8a4:	011b      	lsls	r3, r3, #4
 801f8a6:	1a9b      	subs	r3, r3, r2
 801f8a8:	011b      	lsls	r3, r3, #4
 801f8aa:	461a      	mov	r2, r3
 801f8ac:	68bb      	ldr	r3, [r7, #8]
 801f8ae:	4413      	add	r3, r2
 801f8b0:	4619      	mov	r1, r3
 801f8b2:	68f8      	ldr	r0, [r7, #12]
 801f8b4:	f7fd fd02 	bl	801d2bc <put_memory>
 801f8b8:	697a      	ldr	r2, [r7, #20]
 801f8ba:	4613      	mov	r3, r2
 801f8bc:	011b      	lsls	r3, r3, #4
 801f8be:	1a9b      	subs	r3, r3, r2
 801f8c0:	011b      	lsls	r3, r3, #4
 801f8c2:	4619      	mov	r1, r3
 801f8c4:	697a      	ldr	r2, [r7, #20]
 801f8c6:	4613      	mov	r3, r2
 801f8c8:	011b      	lsls	r3, r3, #4
 801f8ca:	1a9b      	subs	r3, r3, r2
 801f8cc:	011b      	lsls	r3, r3, #4
 801f8ce:	461a      	mov	r2, r3
 801f8d0:	68bb      	ldr	r3, [r7, #8]
 801f8d2:	4413      	add	r3, r2
 801f8d4:	68ba      	ldr	r2, [r7, #8]
 801f8d6:	440a      	add	r2, r1
 801f8d8:	60da      	str	r2, [r3, #12]
 801f8da:	697a      	ldr	r2, [r7, #20]
 801f8dc:	4613      	mov	r3, r2
 801f8de:	011b      	lsls	r3, r3, #4
 801f8e0:	1a9b      	subs	r3, r3, r2
 801f8e2:	011b      	lsls	r3, r3, #4
 801f8e4:	461a      	mov	r2, r3
 801f8e6:	68bb      	ldr	r3, [r7, #8]
 801f8e8:	4413      	add	r3, r2
 801f8ea:	2200      	movs	r2, #0
 801f8ec:	701a      	strb	r2, [r3, #0]
 801f8ee:	697b      	ldr	r3, [r7, #20]
 801f8f0:	3301      	adds	r3, #1
 801f8f2:	617b      	str	r3, [r7, #20]
 801f8f4:	697a      	ldr	r2, [r7, #20]
 801f8f6:	687b      	ldr	r3, [r7, #4]
 801f8f8:	429a      	cmp	r2, r3
 801f8fa:	d3d1      	bcc.n	801f8a0 <rmw_uxrce_init_client_memory+0x48>
 801f8fc:	bf00      	nop
 801f8fe:	3718      	adds	r7, #24
 801f900:	46bd      	mov	sp, r7
 801f902:	bd80      	pop	{r7, pc}

0801f904 <rmw_uxrce_init_publisher_memory>:
RMW_INIT_MEMORY(publisher)
 801f904:	b580      	push	{r7, lr}
 801f906:	b086      	sub	sp, #24
 801f908:	af00      	add	r7, sp, #0
 801f90a:	60f8      	str	r0, [r7, #12]
 801f90c:	60b9      	str	r1, [r7, #8]
 801f90e:	607a      	str	r2, [r7, #4]
 801f910:	687b      	ldr	r3, [r7, #4]
 801f912:	2b00      	cmp	r3, #0
 801f914:	d039      	beq.n	801f98a <rmw_uxrce_init_publisher_memory+0x86>
 801f916:	68fb      	ldr	r3, [r7, #12]
 801f918:	7a1b      	ldrb	r3, [r3, #8]
 801f91a:	f083 0301 	eor.w	r3, r3, #1
 801f91e:	b2db      	uxtb	r3, r3
 801f920:	2b00      	cmp	r3, #0
 801f922:	d032      	beq.n	801f98a <rmw_uxrce_init_publisher_memory+0x86>
 801f924:	68fb      	ldr	r3, [r7, #12]
 801f926:	3310      	adds	r3, #16
 801f928:	4618      	mov	r0, r3
 801f92a:	f7f4 f96f 	bl	8013c0c <uxr_init_lock>
 801f92e:	68fb      	ldr	r3, [r7, #12]
 801f930:	2201      	movs	r2, #1
 801f932:	721a      	strb	r2, [r3, #8]
 801f934:	68fb      	ldr	r3, [r7, #12]
 801f936:	f44f 7280 	mov.w	r2, #256	; 0x100
 801f93a:	60da      	str	r2, [r3, #12]
 801f93c:	68fb      	ldr	r3, [r7, #12]
 801f93e:	2200      	movs	r2, #0
 801f940:	601a      	str	r2, [r3, #0]
 801f942:	68fb      	ldr	r3, [r7, #12]
 801f944:	2200      	movs	r2, #0
 801f946:	605a      	str	r2, [r3, #4]
 801f948:	2300      	movs	r3, #0
 801f94a:	617b      	str	r3, [r7, #20]
 801f94c:	e019      	b.n	801f982 <rmw_uxrce_init_publisher_memory+0x7e>
 801f94e:	697b      	ldr	r3, [r7, #20]
 801f950:	021b      	lsls	r3, r3, #8
 801f952:	68ba      	ldr	r2, [r7, #8]
 801f954:	4413      	add	r3, r2
 801f956:	4619      	mov	r1, r3
 801f958:	68f8      	ldr	r0, [r7, #12]
 801f95a:	f7fd fcaf 	bl	801d2bc <put_memory>
 801f95e:	697b      	ldr	r3, [r7, #20]
 801f960:	021a      	lsls	r2, r3, #8
 801f962:	697b      	ldr	r3, [r7, #20]
 801f964:	021b      	lsls	r3, r3, #8
 801f966:	68b9      	ldr	r1, [r7, #8]
 801f968:	440b      	add	r3, r1
 801f96a:	68b9      	ldr	r1, [r7, #8]
 801f96c:	440a      	add	r2, r1
 801f96e:	60da      	str	r2, [r3, #12]
 801f970:	697b      	ldr	r3, [r7, #20]
 801f972:	021b      	lsls	r3, r3, #8
 801f974:	68ba      	ldr	r2, [r7, #8]
 801f976:	4413      	add	r3, r2
 801f978:	2200      	movs	r2, #0
 801f97a:	701a      	strb	r2, [r3, #0]
 801f97c:	697b      	ldr	r3, [r7, #20]
 801f97e:	3301      	adds	r3, #1
 801f980:	617b      	str	r3, [r7, #20]
 801f982:	697a      	ldr	r2, [r7, #20]
 801f984:	687b      	ldr	r3, [r7, #4]
 801f986:	429a      	cmp	r2, r3
 801f988:	d3e1      	bcc.n	801f94e <rmw_uxrce_init_publisher_memory+0x4a>
 801f98a:	bf00      	nop
 801f98c:	3718      	adds	r7, #24
 801f98e:	46bd      	mov	sp, r7
 801f990:	bd80      	pop	{r7, pc}

0801f992 <rmw_uxrce_init_subscription_memory>:
RMW_INIT_MEMORY(subscription)
 801f992:	b580      	push	{r7, lr}
 801f994:	b086      	sub	sp, #24
 801f996:	af00      	add	r7, sp, #0
 801f998:	60f8      	str	r0, [r7, #12]
 801f99a:	60b9      	str	r1, [r7, #8]
 801f99c:	607a      	str	r2, [r7, #4]
 801f99e:	687b      	ldr	r3, [r7, #4]
 801f9a0:	2b00      	cmp	r3, #0
 801f9a2:	d048      	beq.n	801fa36 <rmw_uxrce_init_subscription_memory+0xa4>
 801f9a4:	68fb      	ldr	r3, [r7, #12]
 801f9a6:	7a1b      	ldrb	r3, [r3, #8]
 801f9a8:	f083 0301 	eor.w	r3, r3, #1
 801f9ac:	b2db      	uxtb	r3, r3
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	d041      	beq.n	801fa36 <rmw_uxrce_init_subscription_memory+0xa4>
 801f9b2:	68fb      	ldr	r3, [r7, #12]
 801f9b4:	3310      	adds	r3, #16
 801f9b6:	4618      	mov	r0, r3
 801f9b8:	f7f4 f928 	bl	8013c0c <uxr_init_lock>
 801f9bc:	68fb      	ldr	r3, [r7, #12]
 801f9be:	2201      	movs	r2, #1
 801f9c0:	721a      	strb	r2, [r3, #8]
 801f9c2:	68fb      	ldr	r3, [r7, #12]
 801f9c4:	22f8      	movs	r2, #248	; 0xf8
 801f9c6:	60da      	str	r2, [r3, #12]
 801f9c8:	68fb      	ldr	r3, [r7, #12]
 801f9ca:	2200      	movs	r2, #0
 801f9cc:	601a      	str	r2, [r3, #0]
 801f9ce:	68fb      	ldr	r3, [r7, #12]
 801f9d0:	2200      	movs	r2, #0
 801f9d2:	605a      	str	r2, [r3, #4]
 801f9d4:	2300      	movs	r3, #0
 801f9d6:	617b      	str	r3, [r7, #20]
 801f9d8:	e029      	b.n	801fa2e <rmw_uxrce_init_subscription_memory+0x9c>
 801f9da:	697a      	ldr	r2, [r7, #20]
 801f9dc:	4613      	mov	r3, r2
 801f9de:	015b      	lsls	r3, r3, #5
 801f9e0:	1a9b      	subs	r3, r3, r2
 801f9e2:	00db      	lsls	r3, r3, #3
 801f9e4:	461a      	mov	r2, r3
 801f9e6:	68bb      	ldr	r3, [r7, #8]
 801f9e8:	4413      	add	r3, r2
 801f9ea:	4619      	mov	r1, r3
 801f9ec:	68f8      	ldr	r0, [r7, #12]
 801f9ee:	f7fd fc65 	bl	801d2bc <put_memory>
 801f9f2:	697a      	ldr	r2, [r7, #20]
 801f9f4:	4613      	mov	r3, r2
 801f9f6:	015b      	lsls	r3, r3, #5
 801f9f8:	1a9b      	subs	r3, r3, r2
 801f9fa:	00db      	lsls	r3, r3, #3
 801f9fc:	4619      	mov	r1, r3
 801f9fe:	697a      	ldr	r2, [r7, #20]
 801fa00:	4613      	mov	r3, r2
 801fa02:	015b      	lsls	r3, r3, #5
 801fa04:	1a9b      	subs	r3, r3, r2
 801fa06:	00db      	lsls	r3, r3, #3
 801fa08:	461a      	mov	r2, r3
 801fa0a:	68bb      	ldr	r3, [r7, #8]
 801fa0c:	4413      	add	r3, r2
 801fa0e:	68ba      	ldr	r2, [r7, #8]
 801fa10:	440a      	add	r2, r1
 801fa12:	60da      	str	r2, [r3, #12]
 801fa14:	697a      	ldr	r2, [r7, #20]
 801fa16:	4613      	mov	r3, r2
 801fa18:	015b      	lsls	r3, r3, #5
 801fa1a:	1a9b      	subs	r3, r3, r2
 801fa1c:	00db      	lsls	r3, r3, #3
 801fa1e:	461a      	mov	r2, r3
 801fa20:	68bb      	ldr	r3, [r7, #8]
 801fa22:	4413      	add	r3, r2
 801fa24:	2200      	movs	r2, #0
 801fa26:	701a      	strb	r2, [r3, #0]
 801fa28:	697b      	ldr	r3, [r7, #20]
 801fa2a:	3301      	adds	r3, #1
 801fa2c:	617b      	str	r3, [r7, #20]
 801fa2e:	697a      	ldr	r2, [r7, #20]
 801fa30:	687b      	ldr	r3, [r7, #4]
 801fa32:	429a      	cmp	r2, r3
 801fa34:	d3d1      	bcc.n	801f9da <rmw_uxrce_init_subscription_memory+0x48>
 801fa36:	bf00      	nop
 801fa38:	3718      	adds	r7, #24
 801fa3a:	46bd      	mov	sp, r7
 801fa3c:	bd80      	pop	{r7, pc}

0801fa3e <rmw_uxrce_init_node_memory>:
RMW_INIT_MEMORY(node)
 801fa3e:	b580      	push	{r7, lr}
 801fa40:	b086      	sub	sp, #24
 801fa42:	af00      	add	r7, sp, #0
 801fa44:	60f8      	str	r0, [r7, #12]
 801fa46:	60b9      	str	r1, [r7, #8]
 801fa48:	607a      	str	r2, [r7, #4]
 801fa4a:	687b      	ldr	r3, [r7, #4]
 801fa4c:	2b00      	cmp	r3, #0
 801fa4e:	d045      	beq.n	801fadc <rmw_uxrce_init_node_memory+0x9e>
 801fa50:	68fb      	ldr	r3, [r7, #12]
 801fa52:	7a1b      	ldrb	r3, [r3, #8]
 801fa54:	f083 0301 	eor.w	r3, r3, #1
 801fa58:	b2db      	uxtb	r3, r3
 801fa5a:	2b00      	cmp	r3, #0
 801fa5c:	d03e      	beq.n	801fadc <rmw_uxrce_init_node_memory+0x9e>
 801fa5e:	68fb      	ldr	r3, [r7, #12]
 801fa60:	3310      	adds	r3, #16
 801fa62:	4618      	mov	r0, r3
 801fa64:	f7f4 f8d2 	bl	8013c0c <uxr_init_lock>
 801fa68:	68fb      	ldr	r3, [r7, #12]
 801fa6a:	2201      	movs	r2, #1
 801fa6c:	721a      	strb	r2, [r3, #8]
 801fa6e:	68fb      	ldr	r3, [r7, #12]
 801fa70:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801fa74:	60da      	str	r2, [r3, #12]
 801fa76:	68fb      	ldr	r3, [r7, #12]
 801fa78:	2200      	movs	r2, #0
 801fa7a:	601a      	str	r2, [r3, #0]
 801fa7c:	68fb      	ldr	r3, [r7, #12]
 801fa7e:	2200      	movs	r2, #0
 801fa80:	605a      	str	r2, [r3, #4]
 801fa82:	2300      	movs	r3, #0
 801fa84:	617b      	str	r3, [r7, #20]
 801fa86:	e025      	b.n	801fad4 <rmw_uxrce_init_node_memory+0x96>
 801fa88:	697b      	ldr	r3, [r7, #20]
 801fa8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801fa8e:	fb02 f303 	mul.w	r3, r2, r3
 801fa92:	68ba      	ldr	r2, [r7, #8]
 801fa94:	4413      	add	r3, r2
 801fa96:	4619      	mov	r1, r3
 801fa98:	68f8      	ldr	r0, [r7, #12]
 801fa9a:	f7fd fc0f 	bl	801d2bc <put_memory>
 801fa9e:	697b      	ldr	r3, [r7, #20]
 801faa0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801faa4:	fb03 f202 	mul.w	r2, r3, r2
 801faa8:	697b      	ldr	r3, [r7, #20]
 801faaa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801faae:	fb01 f303 	mul.w	r3, r1, r3
 801fab2:	68b9      	ldr	r1, [r7, #8]
 801fab4:	440b      	add	r3, r1
 801fab6:	68b9      	ldr	r1, [r7, #8]
 801fab8:	440a      	add	r2, r1
 801faba:	60da      	str	r2, [r3, #12]
 801fabc:	697b      	ldr	r3, [r7, #20]
 801fabe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801fac2:	fb02 f303 	mul.w	r3, r2, r3
 801fac6:	68ba      	ldr	r2, [r7, #8]
 801fac8:	4413      	add	r3, r2
 801faca:	2200      	movs	r2, #0
 801facc:	701a      	strb	r2, [r3, #0]
 801face:	697b      	ldr	r3, [r7, #20]
 801fad0:	3301      	adds	r3, #1
 801fad2:	617b      	str	r3, [r7, #20]
 801fad4:	697a      	ldr	r2, [r7, #20]
 801fad6:	687b      	ldr	r3, [r7, #4]
 801fad8:	429a      	cmp	r2, r3
 801fada:	d3d5      	bcc.n	801fa88 <rmw_uxrce_init_node_memory+0x4a>
 801fadc:	bf00      	nop
 801fade:	3718      	adds	r7, #24
 801fae0:	46bd      	mov	sp, r7
 801fae2:	bd80      	pop	{r7, pc}

0801fae4 <rmw_uxrce_init_session_memory>:
RMW_INIT_MEMORY(session)
 801fae4:	b580      	push	{r7, lr}
 801fae6:	b086      	sub	sp, #24
 801fae8:	af00      	add	r7, sp, #0
 801faea:	60f8      	str	r0, [r7, #12]
 801faec:	60b9      	str	r1, [r7, #8]
 801faee:	607a      	str	r2, [r7, #4]
 801faf0:	687b      	ldr	r3, [r7, #4]
 801faf2:	2b00      	cmp	r3, #0
 801faf4:	d049      	beq.n	801fb8a <rmw_uxrce_init_session_memory+0xa6>
 801faf6:	68fb      	ldr	r3, [r7, #12]
 801faf8:	7a1b      	ldrb	r3, [r3, #8]
 801fafa:	f083 0301 	eor.w	r3, r3, #1
 801fafe:	b2db      	uxtb	r3, r3
 801fb00:	2b00      	cmp	r3, #0
 801fb02:	d042      	beq.n	801fb8a <rmw_uxrce_init_session_memory+0xa6>
 801fb04:	68fb      	ldr	r3, [r7, #12]
 801fb06:	3310      	adds	r3, #16
 801fb08:	4618      	mov	r0, r3
 801fb0a:	f7f4 f87f 	bl	8013c0c <uxr_init_lock>
 801fb0e:	68fb      	ldr	r3, [r7, #12]
 801fb10:	2201      	movs	r2, #1
 801fb12:	721a      	strb	r2, [r3, #8]
 801fb14:	68fb      	ldr	r3, [r7, #12]
 801fb16:	f44f 52fe 	mov.w	r2, #8128	; 0x1fc0
 801fb1a:	60da      	str	r2, [r3, #12]
 801fb1c:	68fb      	ldr	r3, [r7, #12]
 801fb1e:	2200      	movs	r2, #0
 801fb20:	601a      	str	r2, [r3, #0]
 801fb22:	68fb      	ldr	r3, [r7, #12]
 801fb24:	2200      	movs	r2, #0
 801fb26:	605a      	str	r2, [r3, #4]
 801fb28:	2300      	movs	r3, #0
 801fb2a:	617b      	str	r3, [r7, #20]
 801fb2c:	e029      	b.n	801fb82 <rmw_uxrce_init_session_memory+0x9e>
 801fb2e:	697a      	ldr	r2, [r7, #20]
 801fb30:	4613      	mov	r3, r2
 801fb32:	01db      	lsls	r3, r3, #7
 801fb34:	1a9b      	subs	r3, r3, r2
 801fb36:	019b      	lsls	r3, r3, #6
 801fb38:	461a      	mov	r2, r3
 801fb3a:	68bb      	ldr	r3, [r7, #8]
 801fb3c:	4413      	add	r3, r2
 801fb3e:	4619      	mov	r1, r3
 801fb40:	68f8      	ldr	r0, [r7, #12]
 801fb42:	f7fd fbbb 	bl	801d2bc <put_memory>
 801fb46:	697a      	ldr	r2, [r7, #20]
 801fb48:	4613      	mov	r3, r2
 801fb4a:	01db      	lsls	r3, r3, #7
 801fb4c:	1a9b      	subs	r3, r3, r2
 801fb4e:	019b      	lsls	r3, r3, #6
 801fb50:	4619      	mov	r1, r3
 801fb52:	697a      	ldr	r2, [r7, #20]
 801fb54:	4613      	mov	r3, r2
 801fb56:	01db      	lsls	r3, r3, #7
 801fb58:	1a9b      	subs	r3, r3, r2
 801fb5a:	019b      	lsls	r3, r3, #6
 801fb5c:	461a      	mov	r2, r3
 801fb5e:	68bb      	ldr	r3, [r7, #8]
 801fb60:	4413      	add	r3, r2
 801fb62:	68ba      	ldr	r2, [r7, #8]
 801fb64:	440a      	add	r2, r1
 801fb66:	60da      	str	r2, [r3, #12]
 801fb68:	697a      	ldr	r2, [r7, #20]
 801fb6a:	4613      	mov	r3, r2
 801fb6c:	01db      	lsls	r3, r3, #7
 801fb6e:	1a9b      	subs	r3, r3, r2
 801fb70:	019b      	lsls	r3, r3, #6
 801fb72:	461a      	mov	r2, r3
 801fb74:	68bb      	ldr	r3, [r7, #8]
 801fb76:	4413      	add	r3, r2
 801fb78:	2200      	movs	r2, #0
 801fb7a:	701a      	strb	r2, [r3, #0]
 801fb7c:	697b      	ldr	r3, [r7, #20]
 801fb7e:	3301      	adds	r3, #1
 801fb80:	617b      	str	r3, [r7, #20]
 801fb82:	697a      	ldr	r2, [r7, #20]
 801fb84:	687b      	ldr	r3, [r7, #4]
 801fb86:	429a      	cmp	r2, r3
 801fb88:	d3d1      	bcc.n	801fb2e <rmw_uxrce_init_session_memory+0x4a>
 801fb8a:	bf00      	nop
 801fb8c:	3718      	adds	r7, #24
 801fb8e:	46bd      	mov	sp, r7
 801fb90:	bd80      	pop	{r7, pc}

0801fb92 <rmw_uxrce_init_topic_memory>:
RMW_INIT_MEMORY(topic)
 801fb92:	b580      	push	{r7, lr}
 801fb94:	b086      	sub	sp, #24
 801fb96:	af00      	add	r7, sp, #0
 801fb98:	60f8      	str	r0, [r7, #12]
 801fb9a:	60b9      	str	r1, [r7, #8]
 801fb9c:	607a      	str	r2, [r7, #4]
 801fb9e:	687b      	ldr	r3, [r7, #4]
 801fba0:	2b00      	cmp	r3, #0
 801fba2:	d048      	beq.n	801fc36 <rmw_uxrce_init_topic_memory+0xa4>
 801fba4:	68fb      	ldr	r3, [r7, #12]
 801fba6:	7a1b      	ldrb	r3, [r3, #8]
 801fba8:	f083 0301 	eor.w	r3, r3, #1
 801fbac:	b2db      	uxtb	r3, r3
 801fbae:	2b00      	cmp	r3, #0
 801fbb0:	d041      	beq.n	801fc36 <rmw_uxrce_init_topic_memory+0xa4>
 801fbb2:	68fb      	ldr	r3, [r7, #12]
 801fbb4:	3310      	adds	r3, #16
 801fbb6:	4618      	mov	r0, r3
 801fbb8:	f7f4 f828 	bl	8013c0c <uxr_init_lock>
 801fbbc:	68fb      	ldr	r3, [r7, #12]
 801fbbe:	2201      	movs	r2, #1
 801fbc0:	721a      	strb	r2, [r3, #8]
 801fbc2:	68fb      	ldr	r3, [r7, #12]
 801fbc4:	221c      	movs	r2, #28
 801fbc6:	60da      	str	r2, [r3, #12]
 801fbc8:	68fb      	ldr	r3, [r7, #12]
 801fbca:	2200      	movs	r2, #0
 801fbcc:	601a      	str	r2, [r3, #0]
 801fbce:	68fb      	ldr	r3, [r7, #12]
 801fbd0:	2200      	movs	r2, #0
 801fbd2:	605a      	str	r2, [r3, #4]
 801fbd4:	2300      	movs	r3, #0
 801fbd6:	617b      	str	r3, [r7, #20]
 801fbd8:	e029      	b.n	801fc2e <rmw_uxrce_init_topic_memory+0x9c>
 801fbda:	697a      	ldr	r2, [r7, #20]
 801fbdc:	4613      	mov	r3, r2
 801fbde:	00db      	lsls	r3, r3, #3
 801fbe0:	1a9b      	subs	r3, r3, r2
 801fbe2:	009b      	lsls	r3, r3, #2
 801fbe4:	461a      	mov	r2, r3
 801fbe6:	68bb      	ldr	r3, [r7, #8]
 801fbe8:	4413      	add	r3, r2
 801fbea:	4619      	mov	r1, r3
 801fbec:	68f8      	ldr	r0, [r7, #12]
 801fbee:	f7fd fb65 	bl	801d2bc <put_memory>
 801fbf2:	697a      	ldr	r2, [r7, #20]
 801fbf4:	4613      	mov	r3, r2
 801fbf6:	00db      	lsls	r3, r3, #3
 801fbf8:	1a9b      	subs	r3, r3, r2
 801fbfa:	009b      	lsls	r3, r3, #2
 801fbfc:	4619      	mov	r1, r3
 801fbfe:	697a      	ldr	r2, [r7, #20]
 801fc00:	4613      	mov	r3, r2
 801fc02:	00db      	lsls	r3, r3, #3
 801fc04:	1a9b      	subs	r3, r3, r2
 801fc06:	009b      	lsls	r3, r3, #2
 801fc08:	461a      	mov	r2, r3
 801fc0a:	68bb      	ldr	r3, [r7, #8]
 801fc0c:	4413      	add	r3, r2
 801fc0e:	68ba      	ldr	r2, [r7, #8]
 801fc10:	440a      	add	r2, r1
 801fc12:	60da      	str	r2, [r3, #12]
 801fc14:	697a      	ldr	r2, [r7, #20]
 801fc16:	4613      	mov	r3, r2
 801fc18:	00db      	lsls	r3, r3, #3
 801fc1a:	1a9b      	subs	r3, r3, r2
 801fc1c:	009b      	lsls	r3, r3, #2
 801fc1e:	461a      	mov	r2, r3
 801fc20:	68bb      	ldr	r3, [r7, #8]
 801fc22:	4413      	add	r3, r2
 801fc24:	2200      	movs	r2, #0
 801fc26:	701a      	strb	r2, [r3, #0]
 801fc28:	697b      	ldr	r3, [r7, #20]
 801fc2a:	3301      	adds	r3, #1
 801fc2c:	617b      	str	r3, [r7, #20]
 801fc2e:	697a      	ldr	r2, [r7, #20]
 801fc30:	687b      	ldr	r3, [r7, #4]
 801fc32:	429a      	cmp	r2, r3
 801fc34:	d3d1      	bcc.n	801fbda <rmw_uxrce_init_topic_memory+0x48>
 801fc36:	bf00      	nop
 801fc38:	3718      	adds	r7, #24
 801fc3a:	46bd      	mov	sp, r7
 801fc3c:	bd80      	pop	{r7, pc}

0801fc3e <rmw_uxrce_init_static_input_buffer_memory>:
RMW_INIT_MEMORY(static_input_buffer)
 801fc3e:	b580      	push	{r7, lr}
 801fc40:	b086      	sub	sp, #24
 801fc42:	af00      	add	r7, sp, #0
 801fc44:	60f8      	str	r0, [r7, #12]
 801fc46:	60b9      	str	r1, [r7, #8]
 801fc48:	607a      	str	r2, [r7, #4]
 801fc4a:	687b      	ldr	r3, [r7, #4]
 801fc4c:	2b00      	cmp	r3, #0
 801fc4e:	d049      	beq.n	801fce4 <rmw_uxrce_init_static_input_buffer_memory+0xa6>
 801fc50:	68fb      	ldr	r3, [r7, #12]
 801fc52:	7a1b      	ldrb	r3, [r3, #8]
 801fc54:	f083 0301 	eor.w	r3, r3, #1
 801fc58:	b2db      	uxtb	r3, r3
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	d042      	beq.n	801fce4 <rmw_uxrce_init_static_input_buffer_memory+0xa6>
 801fc5e:	68fb      	ldr	r3, [r7, #12]
 801fc60:	3310      	adds	r3, #16
 801fc62:	4618      	mov	r0, r3
 801fc64:	f7f3 ffd2 	bl	8013c0c <uxr_init_lock>
 801fc68:	68fb      	ldr	r3, [r7, #12]
 801fc6a:	2201      	movs	r2, #1
 801fc6c:	721a      	strb	r2, [r3, #8]
 801fc6e:	68fb      	ldr	r3, [r7, #12]
 801fc70:	f44f 6204 	mov.w	r2, #2112	; 0x840
 801fc74:	60da      	str	r2, [r3, #12]
 801fc76:	68fb      	ldr	r3, [r7, #12]
 801fc78:	2200      	movs	r2, #0
 801fc7a:	601a      	str	r2, [r3, #0]
 801fc7c:	68fb      	ldr	r3, [r7, #12]
 801fc7e:	2200      	movs	r2, #0
 801fc80:	605a      	str	r2, [r3, #4]
 801fc82:	2300      	movs	r3, #0
 801fc84:	617b      	str	r3, [r7, #20]
 801fc86:	e029      	b.n	801fcdc <rmw_uxrce_init_static_input_buffer_memory+0x9e>
 801fc88:	697a      	ldr	r2, [r7, #20]
 801fc8a:	4613      	mov	r3, r2
 801fc8c:	015b      	lsls	r3, r3, #5
 801fc8e:	4413      	add	r3, r2
 801fc90:	019b      	lsls	r3, r3, #6
 801fc92:	461a      	mov	r2, r3
 801fc94:	68bb      	ldr	r3, [r7, #8]
 801fc96:	4413      	add	r3, r2
 801fc98:	4619      	mov	r1, r3
 801fc9a:	68f8      	ldr	r0, [r7, #12]
 801fc9c:	f7fd fb0e 	bl	801d2bc <put_memory>
 801fca0:	697a      	ldr	r2, [r7, #20]
 801fca2:	4613      	mov	r3, r2
 801fca4:	015b      	lsls	r3, r3, #5
 801fca6:	4413      	add	r3, r2
 801fca8:	019b      	lsls	r3, r3, #6
 801fcaa:	4619      	mov	r1, r3
 801fcac:	697a      	ldr	r2, [r7, #20]
 801fcae:	4613      	mov	r3, r2
 801fcb0:	015b      	lsls	r3, r3, #5
 801fcb2:	4413      	add	r3, r2
 801fcb4:	019b      	lsls	r3, r3, #6
 801fcb6:	461a      	mov	r2, r3
 801fcb8:	68bb      	ldr	r3, [r7, #8]
 801fcba:	4413      	add	r3, r2
 801fcbc:	68ba      	ldr	r2, [r7, #8]
 801fcbe:	440a      	add	r2, r1
 801fcc0:	60da      	str	r2, [r3, #12]
 801fcc2:	697a      	ldr	r2, [r7, #20]
 801fcc4:	4613      	mov	r3, r2
 801fcc6:	015b      	lsls	r3, r3, #5
 801fcc8:	4413      	add	r3, r2
 801fcca:	019b      	lsls	r3, r3, #6
 801fccc:	461a      	mov	r2, r3
 801fcce:	68bb      	ldr	r3, [r7, #8]
 801fcd0:	4413      	add	r3, r2
 801fcd2:	2200      	movs	r2, #0
 801fcd4:	701a      	strb	r2, [r3, #0]
 801fcd6:	697b      	ldr	r3, [r7, #20]
 801fcd8:	3301      	adds	r3, #1
 801fcda:	617b      	str	r3, [r7, #20]
 801fcdc:	697a      	ldr	r2, [r7, #20]
 801fcde:	687b      	ldr	r3, [r7, #4]
 801fce0:	429a      	cmp	r2, r3
 801fce2:	d3d1      	bcc.n	801fc88 <rmw_uxrce_init_static_input_buffer_memory+0x4a>
 801fce4:	bf00      	nop
 801fce6:	3718      	adds	r7, #24
 801fce8:	46bd      	mov	sp, r7
 801fcea:	bd80      	pop	{r7, pc}

0801fcec <rmw_uxrce_init_init_options_impl_memory>:
RMW_INIT_MEMORY(init_options_impl)
 801fcec:	b580      	push	{r7, lr}
 801fcee:	b086      	sub	sp, #24
 801fcf0:	af00      	add	r7, sp, #0
 801fcf2:	60f8      	str	r0, [r7, #12]
 801fcf4:	60b9      	str	r1, [r7, #8]
 801fcf6:	607a      	str	r2, [r7, #4]
 801fcf8:	687b      	ldr	r3, [r7, #4]
 801fcfa:	2b00      	cmp	r3, #0
 801fcfc:	d040      	beq.n	801fd80 <rmw_uxrce_init_init_options_impl_memory+0x94>
 801fcfe:	68fb      	ldr	r3, [r7, #12]
 801fd00:	7a1b      	ldrb	r3, [r3, #8]
 801fd02:	f083 0301 	eor.w	r3, r3, #1
 801fd06:	b2db      	uxtb	r3, r3
 801fd08:	2b00      	cmp	r3, #0
 801fd0a:	d039      	beq.n	801fd80 <rmw_uxrce_init_init_options_impl_memory+0x94>
 801fd0c:	68fb      	ldr	r3, [r7, #12]
 801fd0e:	3310      	adds	r3, #16
 801fd10:	4618      	mov	r0, r3
 801fd12:	f7f3 ff7b 	bl	8013c0c <uxr_init_lock>
 801fd16:	68fb      	ldr	r3, [r7, #12]
 801fd18:	2201      	movs	r2, #1
 801fd1a:	721a      	strb	r2, [r3, #8]
 801fd1c:	68fb      	ldr	r3, [r7, #12]
 801fd1e:	222c      	movs	r2, #44	; 0x2c
 801fd20:	60da      	str	r2, [r3, #12]
 801fd22:	68fb      	ldr	r3, [r7, #12]
 801fd24:	2200      	movs	r2, #0
 801fd26:	601a      	str	r2, [r3, #0]
 801fd28:	68fb      	ldr	r3, [r7, #12]
 801fd2a:	2200      	movs	r2, #0
 801fd2c:	605a      	str	r2, [r3, #4]
 801fd2e:	2300      	movs	r3, #0
 801fd30:	617b      	str	r3, [r7, #20]
 801fd32:	e021      	b.n	801fd78 <rmw_uxrce_init_init_options_impl_memory+0x8c>
 801fd34:	697b      	ldr	r3, [r7, #20]
 801fd36:	222c      	movs	r2, #44	; 0x2c
 801fd38:	fb02 f303 	mul.w	r3, r2, r3
 801fd3c:	68ba      	ldr	r2, [r7, #8]
 801fd3e:	4413      	add	r3, r2
 801fd40:	4619      	mov	r1, r3
 801fd42:	68f8      	ldr	r0, [r7, #12]
 801fd44:	f7fd faba 	bl	801d2bc <put_memory>
 801fd48:	697b      	ldr	r3, [r7, #20]
 801fd4a:	222c      	movs	r2, #44	; 0x2c
 801fd4c:	fb03 f202 	mul.w	r2, r3, r2
 801fd50:	697b      	ldr	r3, [r7, #20]
 801fd52:	212c      	movs	r1, #44	; 0x2c
 801fd54:	fb01 f303 	mul.w	r3, r1, r3
 801fd58:	68b9      	ldr	r1, [r7, #8]
 801fd5a:	440b      	add	r3, r1
 801fd5c:	68b9      	ldr	r1, [r7, #8]
 801fd5e:	440a      	add	r2, r1
 801fd60:	60da      	str	r2, [r3, #12]
 801fd62:	697b      	ldr	r3, [r7, #20]
 801fd64:	222c      	movs	r2, #44	; 0x2c
 801fd66:	fb02 f303 	mul.w	r3, r2, r3
 801fd6a:	68ba      	ldr	r2, [r7, #8]
 801fd6c:	4413      	add	r3, r2
 801fd6e:	2200      	movs	r2, #0
 801fd70:	701a      	strb	r2, [r3, #0]
 801fd72:	697b      	ldr	r3, [r7, #20]
 801fd74:	3301      	adds	r3, #1
 801fd76:	617b      	str	r3, [r7, #20]
 801fd78:	697a      	ldr	r2, [r7, #20]
 801fd7a:	687b      	ldr	r3, [r7, #4]
 801fd7c:	429a      	cmp	r2, r3
 801fd7e:	d3d9      	bcc.n	801fd34 <rmw_uxrce_init_init_options_impl_memory+0x48>
 801fd80:	bf00      	nop
 801fd82:	3718      	adds	r7, #24
 801fd84:	46bd      	mov	sp, r7
 801fd86:	bd80      	pop	{r7, pc}

0801fd88 <rmw_uxrce_init_wait_set_memory>:
RMW_INIT_MEMORY(wait_set)
 801fd88:	b580      	push	{r7, lr}
 801fd8a:	b086      	sub	sp, #24
 801fd8c:	af00      	add	r7, sp, #0
 801fd8e:	60f8      	str	r0, [r7, #12]
 801fd90:	60b9      	str	r1, [r7, #8]
 801fd92:	607a      	str	r2, [r7, #4]
 801fd94:	687b      	ldr	r3, [r7, #4]
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	d048      	beq.n	801fe2c <rmw_uxrce_init_wait_set_memory+0xa4>
 801fd9a:	68fb      	ldr	r3, [r7, #12]
 801fd9c:	7a1b      	ldrb	r3, [r3, #8]
 801fd9e:	f083 0301 	eor.w	r3, r3, #1
 801fda2:	b2db      	uxtb	r3, r3
 801fda4:	2b00      	cmp	r3, #0
 801fda6:	d041      	beq.n	801fe2c <rmw_uxrce_init_wait_set_memory+0xa4>
 801fda8:	68fb      	ldr	r3, [r7, #12]
 801fdaa:	3310      	adds	r3, #16
 801fdac:	4618      	mov	r0, r3
 801fdae:	f7f3 ff2d 	bl	8013c0c <uxr_init_lock>
 801fdb2:	68fb      	ldr	r3, [r7, #12]
 801fdb4:	2201      	movs	r2, #1
 801fdb6:	721a      	strb	r2, [r3, #8]
 801fdb8:	68fb      	ldr	r3, [r7, #12]
 801fdba:	221c      	movs	r2, #28
 801fdbc:	60da      	str	r2, [r3, #12]
 801fdbe:	68fb      	ldr	r3, [r7, #12]
 801fdc0:	2200      	movs	r2, #0
 801fdc2:	601a      	str	r2, [r3, #0]
 801fdc4:	68fb      	ldr	r3, [r7, #12]
 801fdc6:	2200      	movs	r2, #0
 801fdc8:	605a      	str	r2, [r3, #4]
 801fdca:	2300      	movs	r3, #0
 801fdcc:	617b      	str	r3, [r7, #20]
 801fdce:	e029      	b.n	801fe24 <rmw_uxrce_init_wait_set_memory+0x9c>
 801fdd0:	697a      	ldr	r2, [r7, #20]
 801fdd2:	4613      	mov	r3, r2
 801fdd4:	00db      	lsls	r3, r3, #3
 801fdd6:	1a9b      	subs	r3, r3, r2
 801fdd8:	009b      	lsls	r3, r3, #2
 801fdda:	461a      	mov	r2, r3
 801fddc:	68bb      	ldr	r3, [r7, #8]
 801fdde:	4413      	add	r3, r2
 801fde0:	4619      	mov	r1, r3
 801fde2:	68f8      	ldr	r0, [r7, #12]
 801fde4:	f7fd fa6a 	bl	801d2bc <put_memory>
 801fde8:	697a      	ldr	r2, [r7, #20]
 801fdea:	4613      	mov	r3, r2
 801fdec:	00db      	lsls	r3, r3, #3
 801fdee:	1a9b      	subs	r3, r3, r2
 801fdf0:	009b      	lsls	r3, r3, #2
 801fdf2:	4619      	mov	r1, r3
 801fdf4:	697a      	ldr	r2, [r7, #20]
 801fdf6:	4613      	mov	r3, r2
 801fdf8:	00db      	lsls	r3, r3, #3
 801fdfa:	1a9b      	subs	r3, r3, r2
 801fdfc:	009b      	lsls	r3, r3, #2
 801fdfe:	461a      	mov	r2, r3
 801fe00:	68bb      	ldr	r3, [r7, #8]
 801fe02:	4413      	add	r3, r2
 801fe04:	68ba      	ldr	r2, [r7, #8]
 801fe06:	440a      	add	r2, r1
 801fe08:	60da      	str	r2, [r3, #12]
 801fe0a:	697a      	ldr	r2, [r7, #20]
 801fe0c:	4613      	mov	r3, r2
 801fe0e:	00db      	lsls	r3, r3, #3
 801fe10:	1a9b      	subs	r3, r3, r2
 801fe12:	009b      	lsls	r3, r3, #2
 801fe14:	461a      	mov	r2, r3
 801fe16:	68bb      	ldr	r3, [r7, #8]
 801fe18:	4413      	add	r3, r2
 801fe1a:	2200      	movs	r2, #0
 801fe1c:	701a      	strb	r2, [r3, #0]
 801fe1e:	697b      	ldr	r3, [r7, #20]
 801fe20:	3301      	adds	r3, #1
 801fe22:	617b      	str	r3, [r7, #20]
 801fe24:	697a      	ldr	r2, [r7, #20]
 801fe26:	687b      	ldr	r3, [r7, #4]
 801fe28:	429a      	cmp	r2, r3
 801fe2a:	d3d1      	bcc.n	801fdd0 <rmw_uxrce_init_wait_set_memory+0x48>
 801fe2c:	bf00      	nop
 801fe2e:	3718      	adds	r7, #24
 801fe30:	46bd      	mov	sp, r7
 801fe32:	bd80      	pop	{r7, pc}

0801fe34 <rmw_uxrce_init_guard_condition_memory>:
RMW_INIT_MEMORY(guard_condition)
 801fe34:	b580      	push	{r7, lr}
 801fe36:	b086      	sub	sp, #24
 801fe38:	af00      	add	r7, sp, #0
 801fe3a:	60f8      	str	r0, [r7, #12]
 801fe3c:	60b9      	str	r1, [r7, #8]
 801fe3e:	607a      	str	r2, [r7, #4]
 801fe40:	687b      	ldr	r3, [r7, #4]
 801fe42:	2b00      	cmp	r3, #0
 801fe44:	d038      	beq.n	801feb8 <rmw_uxrce_init_guard_condition_memory+0x84>
 801fe46:	68fb      	ldr	r3, [r7, #12]
 801fe48:	7a1b      	ldrb	r3, [r3, #8]
 801fe4a:	f083 0301 	eor.w	r3, r3, #1
 801fe4e:	b2db      	uxtb	r3, r3
 801fe50:	2b00      	cmp	r3, #0
 801fe52:	d031      	beq.n	801feb8 <rmw_uxrce_init_guard_condition_memory+0x84>
 801fe54:	68fb      	ldr	r3, [r7, #12]
 801fe56:	3310      	adds	r3, #16
 801fe58:	4618      	mov	r0, r3
 801fe5a:	f7f3 fed7 	bl	8013c0c <uxr_init_lock>
 801fe5e:	68fb      	ldr	r3, [r7, #12]
 801fe60:	2201      	movs	r2, #1
 801fe62:	721a      	strb	r2, [r3, #8]
 801fe64:	68fb      	ldr	r3, [r7, #12]
 801fe66:	2220      	movs	r2, #32
 801fe68:	60da      	str	r2, [r3, #12]
 801fe6a:	68fb      	ldr	r3, [r7, #12]
 801fe6c:	2200      	movs	r2, #0
 801fe6e:	601a      	str	r2, [r3, #0]
 801fe70:	68fb      	ldr	r3, [r7, #12]
 801fe72:	2200      	movs	r2, #0
 801fe74:	605a      	str	r2, [r3, #4]
 801fe76:	2300      	movs	r3, #0
 801fe78:	617b      	str	r3, [r7, #20]
 801fe7a:	e019      	b.n	801feb0 <rmw_uxrce_init_guard_condition_memory+0x7c>
 801fe7c:	697b      	ldr	r3, [r7, #20]
 801fe7e:	015b      	lsls	r3, r3, #5
 801fe80:	68ba      	ldr	r2, [r7, #8]
 801fe82:	4413      	add	r3, r2
 801fe84:	4619      	mov	r1, r3
 801fe86:	68f8      	ldr	r0, [r7, #12]
 801fe88:	f7fd fa18 	bl	801d2bc <put_memory>
 801fe8c:	697b      	ldr	r3, [r7, #20]
 801fe8e:	015a      	lsls	r2, r3, #5
 801fe90:	697b      	ldr	r3, [r7, #20]
 801fe92:	015b      	lsls	r3, r3, #5
 801fe94:	68b9      	ldr	r1, [r7, #8]
 801fe96:	440b      	add	r3, r1
 801fe98:	68b9      	ldr	r1, [r7, #8]
 801fe9a:	440a      	add	r2, r1
 801fe9c:	60da      	str	r2, [r3, #12]
 801fe9e:	697b      	ldr	r3, [r7, #20]
 801fea0:	015b      	lsls	r3, r3, #5
 801fea2:	68ba      	ldr	r2, [r7, #8]
 801fea4:	4413      	add	r3, r2
 801fea6:	2200      	movs	r2, #0
 801fea8:	701a      	strb	r2, [r3, #0]
 801feaa:	697b      	ldr	r3, [r7, #20]
 801feac:	3301      	adds	r3, #1
 801feae:	617b      	str	r3, [r7, #20]
 801feb0:	697a      	ldr	r2, [r7, #20]
 801feb2:	687b      	ldr	r3, [r7, #4]
 801feb4:	429a      	cmp	r2, r3
 801feb6:	d3e1      	bcc.n	801fe7c <rmw_uxrce_init_guard_condition_memory+0x48>
 801feb8:	bf00      	nop
 801feba:	3718      	adds	r7, #24
 801febc:	46bd      	mov	sp, r7
 801febe:	bd80      	pop	{r7, pc}

0801fec0 <rmw_uxrce_fini_session_memory>:

// Memory management functions

void rmw_uxrce_fini_session_memory(
  rmw_context_impl_t * session)
{
 801fec0:	b580      	push	{r7, lr}
 801fec2:	b082      	sub	sp, #8
 801fec4:	af00      	add	r7, sp, #0
 801fec6:	6078      	str	r0, [r7, #4]
  put_memory(&session_memory, &session->mem);
 801fec8:	687b      	ldr	r3, [r7, #4]
 801feca:	4619      	mov	r1, r3
 801fecc:	4803      	ldr	r0, [pc, #12]	; (801fedc <rmw_uxrce_fini_session_memory+0x1c>)
 801fece:	f7fd f9f5 	bl	801d2bc <put_memory>
}
 801fed2:	bf00      	nop
 801fed4:	3708      	adds	r7, #8
 801fed6:	46bd      	mov	sp, r7
 801fed8:	bd80      	pop	{r7, pc}
 801feda:	bf00      	nop
 801fedc:	2000e8a8 	.word	0x2000e8a8

0801fee0 <rmw_uxrce_fini_node_memory>:

void rmw_uxrce_fini_node_memory(
  rmw_node_t * node)
{
 801fee0:	b580      	push	{r7, lr}
 801fee2:	b084      	sub	sp, #16
 801fee4:	af00      	add	r7, sp, #0
 801fee6:	6078      	str	r0, [r7, #4]
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(node->implementation_identifier, );
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	681b      	ldr	r3, [r3, #0]
 801feec:	2b00      	cmp	r3, #0
 801feee:	d00a      	beq.n	801ff06 <rmw_uxrce_fini_node_memory+0x26>
 801fef0:	687b      	ldr	r3, [r7, #4]
 801fef2:	681b      	ldr	r3, [r3, #0]
 801fef4:	4a14      	ldr	r2, [pc, #80]	; (801ff48 <rmw_uxrce_fini_node_memory+0x68>)
 801fef6:	6812      	ldr	r2, [r2, #0]
 801fef8:	4611      	mov	r1, r2
 801fefa:	4618      	mov	r0, r3
 801fefc:	f7e0 f988 	bl	8000210 <strcmp>
 801ff00:	4603      	mov	r3, r0
 801ff02:	2b00      	cmp	r3, #0
 801ff04:	d11b      	bne.n	801ff3e <rmw_uxrce_fini_node_memory+0x5e>

  if (node->implementation_identifier) {
 801ff06:	687b      	ldr	r3, [r7, #4]
 801ff08:	681b      	ldr	r3, [r3, #0]
 801ff0a:	2b00      	cmp	r3, #0
 801ff0c:	d002      	beq.n	801ff14 <rmw_uxrce_fini_node_memory+0x34>
    node->implementation_identifier = NULL;
 801ff0e:	687b      	ldr	r3, [r7, #4]
 801ff10:	2200      	movs	r2, #0
 801ff12:	601a      	str	r2, [r3, #0]
  }
  if (node->data) {
 801ff14:	687b      	ldr	r3, [r7, #4]
 801ff16:	685b      	ldr	r3, [r3, #4]
 801ff18:	2b00      	cmp	r3, #0
 801ff1a:	d00d      	beq.n	801ff38 <rmw_uxrce_fini_node_memory+0x58>
    rmw_uxrce_node_t * custom_node = (rmw_uxrce_node_t *)node->data;
 801ff1c:	687b      	ldr	r3, [r7, #4]
 801ff1e:	685b      	ldr	r3, [r3, #4]
 801ff20:	60fb      	str	r3, [r7, #12]
    custom_node->context = NULL;
 801ff22:	68fb      	ldr	r3, [r7, #12]
 801ff24:	2200      	movs	r2, #0
 801ff26:	611a      	str	r2, [r3, #16]

    put_memory(&node_memory, &custom_node->mem);
 801ff28:	68fb      	ldr	r3, [r7, #12]
 801ff2a:	4619      	mov	r1, r3
 801ff2c:	4807      	ldr	r0, [pc, #28]	; (801ff4c <rmw_uxrce_fini_node_memory+0x6c>)
 801ff2e:	f7fd f9c5 	bl	801d2bc <put_memory>

    node->data = NULL;
 801ff32:	687b      	ldr	r3, [r7, #4]
 801ff34:	2200      	movs	r2, #0
 801ff36:	605a      	str	r2, [r3, #4]
  }

  node = NULL;
 801ff38:	2300      	movs	r3, #0
 801ff3a:	607b      	str	r3, [r7, #4]
 801ff3c:	e000      	b.n	801ff40 <rmw_uxrce_fini_node_memory+0x60>
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(node->implementation_identifier, );
 801ff3e:	bf00      	nop
}
 801ff40:	3710      	adds	r7, #16
 801ff42:	46bd      	mov	sp, r7
 801ff44:	bd80      	pop	{r7, pc}
 801ff46:	bf00      	nop
 801ff48:	08027434 	.word	0x08027434
 801ff4c:	200108d0 	.word	0x200108d0

0801ff50 <rmw_uxrce_fini_publisher_memory>:

void rmw_uxrce_fini_publisher_memory(
  rmw_publisher_t * publisher)
{
 801ff50:	b580      	push	{r7, lr}
 801ff52:	b084      	sub	sp, #16
 801ff54:	af00      	add	r7, sp, #0
 801ff56:	6078      	str	r0, [r7, #4]
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(publisher->implementation_identifier, );
 801ff58:	687b      	ldr	r3, [r7, #4]
 801ff5a:	681b      	ldr	r3, [r3, #0]
 801ff5c:	2b00      	cmp	r3, #0
 801ff5e:	d00a      	beq.n	801ff76 <rmw_uxrce_fini_publisher_memory+0x26>
 801ff60:	687b      	ldr	r3, [r7, #4]
 801ff62:	681b      	ldr	r3, [r3, #0]
 801ff64:	4a12      	ldr	r2, [pc, #72]	; (801ffb0 <rmw_uxrce_fini_publisher_memory+0x60>)
 801ff66:	6812      	ldr	r2, [r2, #0]
 801ff68:	4611      	mov	r1, r2
 801ff6a:	4618      	mov	r0, r3
 801ff6c:	f7e0 f950 	bl	8000210 <strcmp>
 801ff70:	4603      	mov	r3, r0
 801ff72:	2b00      	cmp	r3, #0
 801ff74:	d118      	bne.n	801ffa8 <rmw_uxrce_fini_publisher_memory+0x58>

  if (publisher->implementation_identifier) {
 801ff76:	687b      	ldr	r3, [r7, #4]
 801ff78:	681b      	ldr	r3, [r3, #0]
 801ff7a:	2b00      	cmp	r3, #0
 801ff7c:	d002      	beq.n	801ff84 <rmw_uxrce_fini_publisher_memory+0x34>
    publisher->implementation_identifier = NULL;
 801ff7e:	687b      	ldr	r3, [r7, #4]
 801ff80:	2200      	movs	r2, #0
 801ff82:	601a      	str	r2, [r3, #0]
  }
  if (publisher->data) {
 801ff84:	687b      	ldr	r3, [r7, #4]
 801ff86:	685b      	ldr	r3, [r3, #4]
 801ff88:	2b00      	cmp	r3, #0
 801ff8a:	d00a      	beq.n	801ffa2 <rmw_uxrce_fini_publisher_memory+0x52>
    rmw_uxrce_publisher_t * custom_publisher = (rmw_uxrce_publisher_t *)publisher->data;
 801ff8c:	687b      	ldr	r3, [r7, #4]
 801ff8e:	685b      	ldr	r3, [r3, #4]
 801ff90:	60fb      	str	r3, [r7, #12]

    put_memory(&publisher_memory, &custom_publisher->mem);
 801ff92:	68fb      	ldr	r3, [r7, #12]
 801ff94:	4619      	mov	r1, r3
 801ff96:	4807      	ldr	r0, [pc, #28]	; (801ffb4 <rmw_uxrce_fini_publisher_memory+0x64>)
 801ff98:	f7fd f990 	bl	801d2bc <put_memory>
    publisher->data = NULL;
 801ff9c:	687b      	ldr	r3, [r7, #4]
 801ff9e:	2200      	movs	r2, #0
 801ffa0:	605a      	str	r2, [r3, #4]
  }

  publisher = NULL;
 801ffa2:	2300      	movs	r3, #0
 801ffa4:	607b      	str	r3, [r7, #4]
 801ffa6:	e000      	b.n	801ffaa <rmw_uxrce_fini_publisher_memory+0x5a>
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(publisher->implementation_identifier, );
 801ffa8:	bf00      	nop
}
 801ffaa:	3710      	adds	r7, #16
 801ffac:	46bd      	mov	sp, r7
 801ffae:	bd80      	pop	{r7, pc}
 801ffb0:	08027434 	.word	0x08027434
 801ffb4:	20010a60 	.word	0x20010a60

0801ffb8 <rmw_uxrce_fini_subscription_memory>:

void rmw_uxrce_fini_subscription_memory(
  rmw_subscription_t * subscriber)
{
 801ffb8:	b580      	push	{r7, lr}
 801ffba:	b084      	sub	sp, #16
 801ffbc:	af00      	add	r7, sp, #0
 801ffbe:	6078      	str	r0, [r7, #4]
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(subscriber->implementation_identifier, );
 801ffc0:	687b      	ldr	r3, [r7, #4]
 801ffc2:	681b      	ldr	r3, [r3, #0]
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	d00a      	beq.n	801ffde <rmw_uxrce_fini_subscription_memory+0x26>
 801ffc8:	687b      	ldr	r3, [r7, #4]
 801ffca:	681b      	ldr	r3, [r3, #0]
 801ffcc:	4a12      	ldr	r2, [pc, #72]	; (8020018 <rmw_uxrce_fini_subscription_memory+0x60>)
 801ffce:	6812      	ldr	r2, [r2, #0]
 801ffd0:	4611      	mov	r1, r2
 801ffd2:	4618      	mov	r0, r3
 801ffd4:	f7e0 f91c 	bl	8000210 <strcmp>
 801ffd8:	4603      	mov	r3, r0
 801ffda:	2b00      	cmp	r3, #0
 801ffdc:	d118      	bne.n	8020010 <rmw_uxrce_fini_subscription_memory+0x58>

  if (subscriber->implementation_identifier) {
 801ffde:	687b      	ldr	r3, [r7, #4]
 801ffe0:	681b      	ldr	r3, [r3, #0]
 801ffe2:	2b00      	cmp	r3, #0
 801ffe4:	d002      	beq.n	801ffec <rmw_uxrce_fini_subscription_memory+0x34>
    subscriber->implementation_identifier = NULL;
 801ffe6:	687b      	ldr	r3, [r7, #4]
 801ffe8:	2200      	movs	r2, #0
 801ffea:	601a      	str	r2, [r3, #0]
  }
  if (subscriber->data) {
 801ffec:	687b      	ldr	r3, [r7, #4]
 801ffee:	685b      	ldr	r3, [r3, #4]
 801fff0:	2b00      	cmp	r3, #0
 801fff2:	d00a      	beq.n	802000a <rmw_uxrce_fini_subscription_memory+0x52>
    rmw_uxrce_subscription_t * custom_subscription = (rmw_uxrce_subscription_t *)subscriber->data;
 801fff4:	687b      	ldr	r3, [r7, #4]
 801fff6:	685b      	ldr	r3, [r3, #4]
 801fff8:	60fb      	str	r3, [r7, #12]

    put_memory(&subscription_memory, &custom_subscription->mem);
 801fffa:	68fb      	ldr	r3, [r7, #12]
 801fffc:	4619      	mov	r1, r3
 801fffe:	4807      	ldr	r0, [pc, #28]	; (802001c <rmw_uxrce_fini_subscription_memory+0x64>)
 8020000:	f7fd f95c 	bl	801d2bc <put_memory>
    subscriber->data = NULL;
 8020004:	687b      	ldr	r3, [r7, #4]
 8020006:	2200      	movs	r2, #0
 8020008:	605a      	str	r2, [r3, #4]
  }

  subscriber = NULL;
 802000a:	2300      	movs	r3, #0
 802000c:	607b      	str	r3, [r7, #4]
 802000e:	e000      	b.n	8020012 <rmw_uxrce_fini_subscription_memory+0x5a>
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(subscriber->implementation_identifier, );
 8020010:	bf00      	nop
}
 8020012:	3710      	adds	r7, #16
 8020014:	46bd      	mov	sp, r7
 8020016:	bd80      	pop	{r7, pc}
 8020018:	08027434 	.word	0x08027434
 802001c:	20010cc8 	.word	0x20010cc8

08020020 <rmw_uxrce_fini_service_memory>:

void rmw_uxrce_fini_service_memory(
  rmw_service_t * service)
{
 8020020:	b580      	push	{r7, lr}
 8020022:	b084      	sub	sp, #16
 8020024:	af00      	add	r7, sp, #0
 8020026:	6078      	str	r0, [r7, #4]
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(service->implementation_identifier, );
 8020028:	687b      	ldr	r3, [r7, #4]
 802002a:	681b      	ldr	r3, [r3, #0]
 802002c:	2b00      	cmp	r3, #0
 802002e:	d00a      	beq.n	8020046 <rmw_uxrce_fini_service_memory+0x26>
 8020030:	687b      	ldr	r3, [r7, #4]
 8020032:	681b      	ldr	r3, [r3, #0]
 8020034:	4a12      	ldr	r2, [pc, #72]	; (8020080 <rmw_uxrce_fini_service_memory+0x60>)
 8020036:	6812      	ldr	r2, [r2, #0]
 8020038:	4611      	mov	r1, r2
 802003a:	4618      	mov	r0, r3
 802003c:	f7e0 f8e8 	bl	8000210 <strcmp>
 8020040:	4603      	mov	r3, r0
 8020042:	2b00      	cmp	r3, #0
 8020044:	d118      	bne.n	8020078 <rmw_uxrce_fini_service_memory+0x58>

  if (service->implementation_identifier) {
 8020046:	687b      	ldr	r3, [r7, #4]
 8020048:	681b      	ldr	r3, [r3, #0]
 802004a:	2b00      	cmp	r3, #0
 802004c:	d002      	beq.n	8020054 <rmw_uxrce_fini_service_memory+0x34>
    service->implementation_identifier = NULL;
 802004e:	687b      	ldr	r3, [r7, #4]
 8020050:	2200      	movs	r2, #0
 8020052:	601a      	str	r2, [r3, #0]
  }
  if (service->data) {
 8020054:	687b      	ldr	r3, [r7, #4]
 8020056:	685b      	ldr	r3, [r3, #4]
 8020058:	2b00      	cmp	r3, #0
 802005a:	d00a      	beq.n	8020072 <rmw_uxrce_fini_service_memory+0x52>
    rmw_uxrce_service_t * custom_service = (rmw_uxrce_service_t *)service->data;
 802005c:	687b      	ldr	r3, [r7, #4]
 802005e:	685b      	ldr	r3, [r3, #4]
 8020060:	60fb      	str	r3, [r7, #12]

    put_memory(&service_memory, &custom_service->mem);
 8020062:	68fb      	ldr	r3, [r7, #12]
 8020064:	4619      	mov	r1, r3
 8020066:	4807      	ldr	r0, [pc, #28]	; (8020084 <rmw_uxrce_fini_service_memory+0x64>)
 8020068:	f7fd f928 	bl	801d2bc <put_memory>
    service->data = NULL;
 802006c:	687b      	ldr	r3, [r7, #4]
 802006e:	2200      	movs	r2, #0
 8020070:	605a      	str	r2, [r3, #4]
  }

  service = NULL;
 8020072:	2300      	movs	r3, #0
 8020074:	607b      	str	r3, [r7, #4]
 8020076:	e000      	b.n	802007a <rmw_uxrce_fini_service_memory+0x5a>
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(service->implementation_identifier, );
 8020078:	bf00      	nop
}
 802007a:	3710      	adds	r7, #16
 802007c:	46bd      	mov	sp, r7
 802007e:	bd80      	pop	{r7, pc}
 8020080:	08027434 	.word	0x08027434
 8020084:	20010f20 	.word	0x20010f20

08020088 <rmw_uxrce_fini_client_memory>:

void rmw_uxrce_fini_client_memory(
  rmw_client_t * client)
{
 8020088:	b580      	push	{r7, lr}
 802008a:	b084      	sub	sp, #16
 802008c:	af00      	add	r7, sp, #0
 802008e:	6078      	str	r0, [r7, #4]
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(client->implementation_identifier, );
 8020090:	687b      	ldr	r3, [r7, #4]
 8020092:	681b      	ldr	r3, [r3, #0]
 8020094:	2b00      	cmp	r3, #0
 8020096:	d00a      	beq.n	80200ae <rmw_uxrce_fini_client_memory+0x26>
 8020098:	687b      	ldr	r3, [r7, #4]
 802009a:	681b      	ldr	r3, [r3, #0]
 802009c:	4a12      	ldr	r2, [pc, #72]	; (80200e8 <rmw_uxrce_fini_client_memory+0x60>)
 802009e:	6812      	ldr	r2, [r2, #0]
 80200a0:	4611      	mov	r1, r2
 80200a2:	4618      	mov	r0, r3
 80200a4:	f7e0 f8b4 	bl	8000210 <strcmp>
 80200a8:	4603      	mov	r3, r0
 80200aa:	2b00      	cmp	r3, #0
 80200ac:	d118      	bne.n	80200e0 <rmw_uxrce_fini_client_memory+0x58>

  if (client->implementation_identifier) {
 80200ae:	687b      	ldr	r3, [r7, #4]
 80200b0:	681b      	ldr	r3, [r3, #0]
 80200b2:	2b00      	cmp	r3, #0
 80200b4:	d002      	beq.n	80200bc <rmw_uxrce_fini_client_memory+0x34>
    client->implementation_identifier = NULL;
 80200b6:	687b      	ldr	r3, [r7, #4]
 80200b8:	2200      	movs	r2, #0
 80200ba:	601a      	str	r2, [r3, #0]
  }
  if (client->data) {
 80200bc:	687b      	ldr	r3, [r7, #4]
 80200be:	685b      	ldr	r3, [r3, #4]
 80200c0:	2b00      	cmp	r3, #0
 80200c2:	d00a      	beq.n	80200da <rmw_uxrce_fini_client_memory+0x52>
    rmw_uxrce_client_t * custom_client = (rmw_uxrce_client_t *)client->data;
 80200c4:	687b      	ldr	r3, [r7, #4]
 80200c6:	685b      	ldr	r3, [r3, #4]
 80200c8:	60fb      	str	r3, [r7, #12]

    put_memory(&client_memory, &custom_client->mem);
 80200ca:	68fb      	ldr	r3, [r7, #12]
 80200cc:	4619      	mov	r1, r3
 80200ce:	4807      	ldr	r0, [pc, #28]	; (80200ec <rmw_uxrce_fini_client_memory+0x64>)
 80200d0:	f7fd f8f4 	bl	801d2bc <put_memory>
    client->data = NULL;
 80200d4:	687b      	ldr	r3, [r7, #4]
 80200d6:	2200      	movs	r2, #0
 80200d8:	605a      	str	r2, [r3, #4]
  }

  client = NULL;
 80200da:	2300      	movs	r3, #0
 80200dc:	607b      	str	r3, [r7, #4]
 80200de:	e000      	b.n	80200e2 <rmw_uxrce_fini_client_memory+0x5a>
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(client->implementation_identifier, );
 80200e0:	bf00      	nop
}
 80200e2:	3710      	adds	r7, #16
 80200e4:	46bd      	mov	sp, r7
 80200e6:	bd80      	pop	{r7, pc}
 80200e8:	08027434 	.word	0x08027434
 80200ec:	20010f88 	.word	0x20010f88

080200f0 <rmw_uxrce_fini_topic_memory>:

void rmw_uxrce_fini_topic_memory(
  rmw_uxrce_topic_t * topic)
{
 80200f0:	b580      	push	{r7, lr}
 80200f2:	b082      	sub	sp, #8
 80200f4:	af00      	add	r7, sp, #0
 80200f6:	6078      	str	r0, [r7, #4]
  put_memory(&topics_memory, &topic->mem);
 80200f8:	687b      	ldr	r3, [r7, #4]
 80200fa:	4619      	mov	r1, r3
 80200fc:	4804      	ldr	r0, [pc, #16]	; (8020110 <rmw_uxrce_fini_topic_memory+0x20>)
 80200fe:	f7fd f8dd 	bl	801d2bc <put_memory>
  topic->owner_node = NULL;
 8020102:	687b      	ldr	r3, [r7, #4]
 8020104:	2200      	movs	r2, #0
 8020106:	619a      	str	r2, [r3, #24]
}
 8020108:	bf00      	nop
 802010a:	3708      	adds	r7, #8
 802010c:	46bd      	mov	sp, r7
 802010e:	bd80      	pop	{r7, pc}
 8020110:	20010ff0 	.word	0x20010ff0

08020114 <rmw_uxrce_count_static_input_buffer_for_entity>:

size_t rmw_uxrce_count_static_input_buffer_for_entity(
  void * entity)
{
 8020114:	b580      	push	{r7, lr}
 8020116:	b086      	sub	sp, #24
 8020118:	af00      	add	r7, sp, #0
 802011a:	6078      	str	r0, [r7, #4]
  size_t count = 0;
 802011c:	2300      	movs	r3, #0
 802011e:	617b      	str	r3, [r7, #20]

  UXR_LOCK(&static_buffer_memory.mutex);
 8020120:	4810      	ldr	r0, [pc, #64]	; (8020164 <rmw_uxrce_count_static_input_buffer_for_entity+0x50>)
 8020122:	f7f3 fd84 	bl	8013c2e <uxr_lock>
  rmw_uxrce_mempool_item_t * item = static_buffer_memory.allocateditems;
 8020126:	4b10      	ldr	r3, [pc, #64]	; (8020168 <rmw_uxrce_count_static_input_buffer_for_entity+0x54>)
 8020128:	681b      	ldr	r3, [r3, #0]
 802012a:	613b      	str	r3, [r7, #16]

  while (item != NULL) {
 802012c:	e00e      	b.n	802014c <rmw_uxrce_count_static_input_buffer_for_entity+0x38>
    rmw_uxrce_static_input_buffer_t * data = (rmw_uxrce_static_input_buffer_t *)item->data;
 802012e:	693b      	ldr	r3, [r7, #16]
 8020130:	68db      	ldr	r3, [r3, #12]
 8020132:	60fb      	str	r3, [r7, #12]
    if (data->owner == entity) {
 8020134:	68fb      	ldr	r3, [r7, #12]
 8020136:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 802013a:	687a      	ldr	r2, [r7, #4]
 802013c:	429a      	cmp	r2, r3
 802013e:	d102      	bne.n	8020146 <rmw_uxrce_count_static_input_buffer_for_entity+0x32>
      count++;
 8020140:	697b      	ldr	r3, [r7, #20]
 8020142:	3301      	adds	r3, #1
 8020144:	617b      	str	r3, [r7, #20]
    }
    item = item->next;
 8020146:	693b      	ldr	r3, [r7, #16]
 8020148:	689b      	ldr	r3, [r3, #8]
 802014a:	613b      	str	r3, [r7, #16]
  while (item != NULL) {
 802014c:	693b      	ldr	r3, [r7, #16]
 802014e:	2b00      	cmp	r3, #0
 8020150:	d1ed      	bne.n	802012e <rmw_uxrce_count_static_input_buffer_for_entity+0x1a>
  }
  UXR_UNLOCK(&static_buffer_memory.mutex);
 8020152:	4804      	ldr	r0, [pc, #16]	; (8020164 <rmw_uxrce_count_static_input_buffer_for_entity+0x50>)
 8020154:	f7f3 fd7a 	bl	8013c4c <uxr_unlock>

  return count;
 8020158:	697b      	ldr	r3, [r7, #20]
}
 802015a:	4618      	mov	r0, r3
 802015c:	3718      	adds	r7, #24
 802015e:	46bd      	mov	sp, r7
 8020160:	bd80      	pop	{r7, pc}
 8020162:	bf00      	nop
 8020164:	200110d4 	.word	0x200110d4
 8020168:	200110c4 	.word	0x200110c4

0802016c <rmw_uxrce_get_static_input_buffer_for_entity>:

rmw_uxrce_mempool_item_t * rmw_uxrce_get_static_input_buffer_for_entity(
  void * entity,
  const rmw_qos_profile_t qos)
{
 802016c:	b082      	sub	sp, #8
 802016e:	b580      	push	{r7, lr}
 8020170:	b084      	sub	sp, #16
 8020172:	af00      	add	r7, sp, #0
 8020174:	6078      	str	r0, [r7, #4]
 8020176:	f107 0118 	add.w	r1, r7, #24
 802017a:	e881 000c 	stmia.w	r1, {r2, r3}
  rmw_uxrce_mempool_item_t * ret = NULL;
 802017e:	2300      	movs	r3, #0
 8020180:	60fb      	str	r3, [r7, #12]

  UXR_LOCK(&static_buffer_memory.mutex);
 8020182:	4820      	ldr	r0, [pc, #128]	; (8020204 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>)
 8020184:	f7f3 fd53 	bl	8013c2e <uxr_lock>
  size_t count = rmw_uxrce_count_static_input_buffer_for_entity(entity);
 8020188:	6878      	ldr	r0, [r7, #4]
 802018a:	f7ff ffc3 	bl	8020114 <rmw_uxrce_count_static_input_buffer_for_entity>
 802018e:	60b8      	str	r0, [r7, #8]
  switch (qos.history) {
 8020190:	7e3b      	ldrb	r3, [r7, #24]
 8020192:	2b03      	cmp	r3, #3
 8020194:	d009      	beq.n	80201aa <rmw_uxrce_get_static_input_buffer_for_entity+0x3e>
 8020196:	2b03      	cmp	r3, #3
 8020198:	dc25      	bgt.n	80201e6 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 802019a:	2b01      	cmp	r3, #1
 802019c:	dc02      	bgt.n	80201a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 802019e:	2b00      	cmp	r3, #0
 80201a0:	da03      	bge.n	80201aa <rmw_uxrce_get_static_input_buffer_for_entity+0x3e>
      } else {
        // There aren't more slots for this entity
      }
      break;
    default:
      break;
 80201a2:	e020      	b.n	80201e6 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
  switch (qos.history) {
 80201a4:	2b02      	cmp	r3, #2
 80201a6:	d012      	beq.n	80201ce <rmw_uxrce_get_static_input_buffer_for_entity+0x62>
      break;
 80201a8:	e01d      	b.n	80201e6 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
      if (qos.depth == 0 || count < qos.depth) {
 80201aa:	69fb      	ldr	r3, [r7, #28]
 80201ac:	2b00      	cmp	r3, #0
 80201ae:	d003      	beq.n	80201b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 80201b0:	69fb      	ldr	r3, [r7, #28]
 80201b2:	68ba      	ldr	r2, [r7, #8]
 80201b4:	429a      	cmp	r2, r3
 80201b6:	d205      	bcs.n	80201c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
        ret = get_memory(&static_buffer_memory);
 80201b8:	4813      	ldr	r0, [pc, #76]	; (8020208 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80201ba:	f7fd f843 	bl	801d244 <get_memory>
 80201be:	60f8      	str	r0, [r7, #12]
 80201c0:	bf00      	nop
      break;
 80201c2:	e013      	b.n	80201ec <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
        ret = rmw_uxrce_find_static_input_buffer_by_owner(entity);
 80201c4:	6878      	ldr	r0, [r7, #4]
 80201c6:	f000 f821 	bl	802020c <rmw_uxrce_find_static_input_buffer_by_owner>
 80201ca:	60f8      	str	r0, [r7, #12]
      break;
 80201cc:	e00e      	b.n	80201ec <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
      if (qos.depth == 0 || count < qos.depth) {
 80201ce:	69fb      	ldr	r3, [r7, #28]
 80201d0:	2b00      	cmp	r3, #0
 80201d2:	d003      	beq.n	80201dc <rmw_uxrce_get_static_input_buffer_for_entity+0x70>
 80201d4:	69fb      	ldr	r3, [r7, #28]
 80201d6:	68ba      	ldr	r2, [r7, #8]
 80201d8:	429a      	cmp	r2, r3
 80201da:	d206      	bcs.n	80201ea <rmw_uxrce_get_static_input_buffer_for_entity+0x7e>
        ret = get_memory(&static_buffer_memory);
 80201dc:	480a      	ldr	r0, [pc, #40]	; (8020208 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80201de:	f7fd f831 	bl	801d244 <get_memory>
 80201e2:	60f8      	str	r0, [r7, #12]
      break;
 80201e4:	e001      	b.n	80201ea <rmw_uxrce_get_static_input_buffer_for_entity+0x7e>
      break;
 80201e6:	bf00      	nop
 80201e8:	e000      	b.n	80201ec <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
      break;
 80201ea:	bf00      	nop
  }
  UXR_UNLOCK(&static_buffer_memory.mutex);
 80201ec:	4805      	ldr	r0, [pc, #20]	; (8020204 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>)
 80201ee:	f7f3 fd2d 	bl	8013c4c <uxr_unlock>

  return ret;
 80201f2:	68fb      	ldr	r3, [r7, #12]
}
 80201f4:	4618      	mov	r0, r3
 80201f6:	3710      	adds	r7, #16
 80201f8:	46bd      	mov	sp, r7
 80201fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80201fe:	b002      	add	sp, #8
 8020200:	4770      	bx	lr
 8020202:	bf00      	nop
 8020204:	200110d4 	.word	0x200110d4
 8020208:	200110c4 	.word	0x200110c4

0802020c <rmw_uxrce_find_static_input_buffer_by_owner>:

rmw_uxrce_mempool_item_t * rmw_uxrce_find_static_input_buffer_by_owner(
  void * owner)
{
 802020c:	b580      	push	{r7, lr}
 802020e:	b088      	sub	sp, #32
 8020210:	af00      	add	r7, sp, #0
 8020212:	6078      	str	r0, [r7, #4]
  rmw_uxrce_mempool_item_t * ret = NULL;
 8020214:	2300      	movs	r3, #0
 8020216:	61fb      	str	r3, [r7, #28]
  int64_t min_time = INT64_MAX;
 8020218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802021c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8020220:	e9c7 2304 	strd	r2, r3, [r7, #16]

  UXR_LOCK(&static_buffer_memory.mutex);
 8020224:	4818      	ldr	r0, [pc, #96]	; (8020288 <rmw_uxrce_find_static_input_buffer_by_owner+0x7c>)
 8020226:	f7f3 fd02 	bl	8013c2e <uxr_lock>

  // Return the oldest
  rmw_uxrce_mempool_item_t * static_buffer_item = static_buffer_memory.allocateditems;
 802022a:	4b18      	ldr	r3, [pc, #96]	; (802028c <rmw_uxrce_find_static_input_buffer_by_owner+0x80>)
 802022c:	681b      	ldr	r3, [r3, #0]
 802022e:	60fb      	str	r3, [r7, #12]
  while (static_buffer_item != NULL) {
 8020230:	e01f      	b.n	8020272 <rmw_uxrce_find_static_input_buffer_by_owner+0x66>
    rmw_uxrce_static_input_buffer_t * data =
 8020232:	68fb      	ldr	r3, [r7, #12]
 8020234:	68db      	ldr	r3, [r3, #12]
 8020236:	60bb      	str	r3, [r7, #8]
      (rmw_uxrce_static_input_buffer_t *)static_buffer_item->data;

    if (data->owner == owner && data->timestamp < min_time) {
 8020238:	68bb      	ldr	r3, [r7, #8]
 802023a:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 802023e:	687a      	ldr	r2, [r7, #4]
 8020240:	429a      	cmp	r2, r3
 8020242:	d113      	bne.n	802026c <rmw_uxrce_find_static_input_buffer_by_owner+0x60>
 8020244:	68bb      	ldr	r3, [r7, #8]
 8020246:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 802024a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 802024e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8020252:	4290      	cmp	r0, r2
 8020254:	eb71 0303 	sbcs.w	r3, r1, r3
 8020258:	da08      	bge.n	802026c <rmw_uxrce_find_static_input_buffer_by_owner+0x60>
      ret = static_buffer_item;
 802025a:	68fb      	ldr	r3, [r7, #12]
 802025c:	61fb      	str	r3, [r7, #28]
      min_time = data->timestamp;
 802025e:	68bb      	ldr	r3, [r7, #8]
 8020260:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8020264:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8020268:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }

    static_buffer_item = static_buffer_item->next;
 802026c:	68fb      	ldr	r3, [r7, #12]
 802026e:	689b      	ldr	r3, [r3, #8]
 8020270:	60fb      	str	r3, [r7, #12]
  while (static_buffer_item != NULL) {
 8020272:	68fb      	ldr	r3, [r7, #12]
 8020274:	2b00      	cmp	r3, #0
 8020276:	d1dc      	bne.n	8020232 <rmw_uxrce_find_static_input_buffer_by_owner+0x26>
  }
  UXR_UNLOCK(&static_buffer_memory.mutex);
 8020278:	4803      	ldr	r0, [pc, #12]	; (8020288 <rmw_uxrce_find_static_input_buffer_by_owner+0x7c>)
 802027a:	f7f3 fce7 	bl	8013c4c <uxr_unlock>

  return ret;
 802027e:	69fb      	ldr	r3, [r7, #28]
}
 8020280:	4618      	mov	r0, r3
 8020282:	3720      	adds	r7, #32
 8020284:	46bd      	mov	sp, r7
 8020286:	bd80      	pop	{r7, pc}
 8020288:	200110d4 	.word	0x200110d4
 802028c:	200110c4 	.word	0x200110c4

08020290 <rmw_uxrce_clean_expired_static_input_buffer>:

void rmw_uxrce_clean_expired_static_input_buffer(void)
{
 8020290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020294:	b095      	sub	sp, #84	; 0x54
 8020296:	af00      	add	r7, sp, #0
  UXR_LOCK(&static_buffer_memory.mutex);
 8020298:	4851      	ldr	r0, [pc, #324]	; (80203e0 <rmw_uxrce_clean_expired_static_input_buffer+0x150>)
 802029a:	f7f3 fcc8 	bl	8013c2e <uxr_lock>

  rmw_uxrce_mempool_item_t * static_buffer_item = static_buffer_memory.allocateditems;
 802029e:	4b51      	ldr	r3, [pc, #324]	; (80203e4 <rmw_uxrce_clean_expired_static_input_buffer+0x154>)
 80202a0:	681b      	ldr	r3, [r3, #0]
 80202a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  int64_t now_ns = rmw_uros_epoch_nanos();
 80202a4:	f000 fb10 	bl	80208c8 <rmw_uros_epoch_nanos>
 80202a8:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

  while (static_buffer_item != NULL) {
 80202ac:	e08b      	b.n	80203c6 <rmw_uxrce_clean_expired_static_input_buffer+0x136>
    rmw_uxrce_static_input_buffer_t * data =
 80202ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80202b0:	68db      	ldr	r3, [r3, #12]
 80202b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      (rmw_uxrce_static_input_buffer_t *)static_buffer_item->data;
    rmw_time_t lifespan;
    switch (data->entity_type) {
 80202b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80202b6:	f893 3820 	ldrb.w	r3, [r3, #2080]	; 0x820
 80202ba:	2b05      	cmp	r3, #5
 80202bc:	d006      	beq.n	80202cc <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 80202be:	2b05      	cmp	r3, #5
 80202c0:	dc22      	bgt.n	8020308 <rmw_uxrce_clean_expired_static_input_buffer+0x78>
 80202c2:	2b03      	cmp	r3, #3
 80202c4:	d016      	beq.n	80202f4 <rmw_uxrce_clean_expired_static_input_buffer+0x64>
 80202c6:	2b04      	cmp	r3, #4
 80202c8:	d00a      	beq.n	80202e0 <rmw_uxrce_clean_expired_static_input_buffer+0x50>
 80202ca:	e01d      	b.n	8020308 <rmw_uxrce_clean_expired_static_input_buffer+0x78>
      case RMW_UXRCE_ENTITY_TYPE_SUBSCRIPTION:
        lifespan = ((rmw_uxrce_subscription_t *)data->owner)->qos.lifespan;
 80202cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80202ce:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 80202d2:	f107 0620 	add.w	r6, r7, #32
 80202d6:	3348      	adds	r3, #72	; 0x48
 80202d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80202da:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
        break;
 80202de:	e020      	b.n	8020322 <rmw_uxrce_clean_expired_static_input_buffer+0x92>
      case RMW_UXRCE_ENTITY_TYPE_CLIENT:
        lifespan = ((rmw_uxrce_client_t *)data->owner)->qos.lifespan;
 80202e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80202e2:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 80202e6:	f107 0620 	add.w	r6, r7, #32
 80202ea:	3340      	adds	r3, #64	; 0x40
 80202ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80202ee:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
        break;
 80202f2:	e016      	b.n	8020322 <rmw_uxrce_clean_expired_static_input_buffer+0x92>
      case RMW_UXRCE_ENTITY_TYPE_SERVICE:
        lifespan = ((rmw_uxrce_service_t *)data->owner)->qos.lifespan;
 80202f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80202f6:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 80202fa:	f107 0620 	add.w	r6, r7, #32
 80202fe:	3340      	adds	r3, #64	; 0x40
 8020300:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8020302:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
        break;
 8020306:	e00c      	b.n	8020322 <rmw_uxrce_clean_expired_static_input_buffer+0x92>
      default:
        // Not recognized, clean this buffer as soon as possible
        lifespan = (rmw_time_t) {0LL, 1LL};
 8020308:	f04f 0200 	mov.w	r2, #0
 802030c:	f04f 0300 	mov.w	r3, #0
 8020310:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8020314:	f04f 0201 	mov.w	r2, #1
 8020318:	f04f 0300 	mov.w	r3, #0
 802031c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        break;
 8020320:	bf00      	nop
    }

    if (lifespan.sec == 0 && lifespan.nsec == 0) {
 8020322:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8020326:	4313      	orrs	r3, r2
 8020328:	d10f      	bne.n	802034a <rmw_uxrce_clean_expired_static_input_buffer+0xba>
 802032a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802032e:	4313      	orrs	r3, r2
 8020330:	d10b      	bne.n	802034a <rmw_uxrce_clean_expired_static_input_buffer+0xba>
      lifespan = (rmw_time_t) RMW_UXRCE_QOS_LIFESPAN_DEFAULT;
 8020332:	f04f 021e 	mov.w	r2, #30
 8020336:	f04f 0300 	mov.w	r3, #0
 802033a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 802033e:	f04f 0200 	mov.w	r2, #0
 8020342:	f04f 0300 	mov.w	r3, #0
 8020346:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    rmw_uxrce_mempool_item_t * aux_next = static_buffer_item->next;
 802034a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802034c:	689b      	ldr	r3, [r3, #8]
 802034e:	63bb      	str	r3, [r7, #56]	; 0x38

    int64_t expiration_time = data->timestamp + RCUTILS_S_TO_NS(lifespan.sec) + lifespan.nsec;
 8020350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020352:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8020356:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802035a:	4610      	mov	r0, r2
 802035c:	4619      	mov	r1, r3
 802035e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8020362:	4e21      	ldr	r6, [pc, #132]	; (80203e8 <rmw_uxrce_clean_expired_static_input_buffer+0x158>)
 8020364:	fb06 fc03 	mul.w	ip, r6, r3
 8020368:	2600      	movs	r6, #0
 802036a:	fb02 f606 	mul.w	r6, r2, r6
 802036e:	44b4      	add	ip, r6
 8020370:	4e1d      	ldr	r6, [pc, #116]	; (80203e8 <rmw_uxrce_clean_expired_static_input_buffer+0x158>)
 8020372:	fba2 4506 	umull	r4, r5, r2, r6
 8020376:	eb0c 0305 	add.w	r3, ip, r5
 802037a:	461d      	mov	r5, r3
 802037c:	eb10 0804 	adds.w	r8, r0, r4
 8020380:	eb41 0905 	adc.w	r9, r1, r5
 8020384:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8020388:	eb18 0a02 	adds.w	sl, r8, r2
 802038c:	eb49 0b03 	adc.w	fp, r9, r3
 8020390:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    if (expiration_time < now_ns || data->timestamp > now_ns) {
 8020394:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8020398:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802039c:	4290      	cmp	r0, r2
 802039e:	eb71 0303 	sbcs.w	r3, r1, r3
 80203a2:	db0a      	blt.n	80203ba <rmw_uxrce_clean_expired_static_input_buffer+0x12a>
 80203a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80203a6:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80203aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80203ae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80203b2:	4290      	cmp	r0, r2
 80203b4:	eb71 0303 	sbcs.w	r3, r1, r3
 80203b8:	da03      	bge.n	80203c2 <rmw_uxrce_clean_expired_static_input_buffer+0x132>
      put_memory(&static_buffer_memory, static_buffer_item);
 80203ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80203bc:	4809      	ldr	r0, [pc, #36]	; (80203e4 <rmw_uxrce_clean_expired_static_input_buffer+0x154>)
 80203be:	f7fc ff7d 	bl	801d2bc <put_memory>
    }

    static_buffer_item = aux_next;
 80203c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80203c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (static_buffer_item != NULL) {
 80203c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80203c8:	2b00      	cmp	r3, #0
 80203ca:	f47f af70 	bne.w	80202ae <rmw_uxrce_clean_expired_static_input_buffer+0x1e>
  }
  UXR_UNLOCK(&static_buffer_memory.mutex);
 80203ce:	4804      	ldr	r0, [pc, #16]	; (80203e0 <rmw_uxrce_clean_expired_static_input_buffer+0x150>)
 80203d0:	f7f3 fc3c 	bl	8013c4c <uxr_unlock>
}
 80203d4:	bf00      	nop
 80203d6:	3754      	adds	r7, #84	; 0x54
 80203d8:	46bd      	mov	sp, r7
 80203da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203de:	bf00      	nop
 80203e0:	200110d4 	.word	0x200110d4
 80203e4:	200110c4 	.word	0x200110c4
 80203e8:	3b9aca00 	.word	0x3b9aca00

080203ec <run_xrce_session>:
bool run_xrce_session(
  rmw_context_impl_t * context,
  uxrStreamId * target_stream,
  uint16_t request,
  int timeout)
{
 80203ec:	b580      	push	{r7, lr}
 80203ee:	b088      	sub	sp, #32
 80203f0:	af02      	add	r7, sp, #8
 80203f2:	60f8      	str	r0, [r7, #12]
 80203f4:	60b9      	str	r1, [r7, #8]
 80203f6:	603b      	str	r3, [r7, #0]
 80203f8:	4613      	mov	r3, r2
 80203fa:	80fb      	strh	r3, [r7, #6]
  if (target_stream->type == UXR_BEST_EFFORT_STREAM) {
 80203fc:	68bb      	ldr	r3, [r7, #8]
 80203fe:	789b      	ldrb	r3, [r3, #2]
 8020400:	2b01      	cmp	r3, #1
 8020402:	d106      	bne.n	8020412 <run_xrce_session+0x26>
    uxr_flash_output_streams(&context->session);
 8020404:	68fb      	ldr	r3, [r7, #12]
 8020406:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 802040a:	4618      	mov	r0, r3
 802040c:	f7f0 f972 	bl	80106f4 <uxr_flash_output_streams>
 8020410:	e012      	b.n	8020438 <run_xrce_session+0x4c>
  } else {
    // This only handles one request at time
    uint8_t status;
    if (!uxr_run_session_until_all_status(
 8020412:	68fb      	ldr	r3, [r7, #12]
 8020414:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 8020418:	f107 0317 	add.w	r3, r7, #23
 802041c:	1dba      	adds	r2, r7, #6
 802041e:	2101      	movs	r1, #1
 8020420:	9100      	str	r1, [sp, #0]
 8020422:	6839      	ldr	r1, [r7, #0]
 8020424:	f7f0 f8ac 	bl	8010580 <uxr_run_session_until_all_status>
 8020428:	4603      	mov	r3, r0
 802042a:	f083 0301 	eor.w	r3, r3, #1
 802042e:	b2db      	uxtb	r3, r3
 8020430:	2b00      	cmp	r3, #0
 8020432:	d001      	beq.n	8020438 <run_xrce_session+0x4c>
        &context->session,
        timeout, &request, &status, 1))
    {
      RMW_UROS_TRACE_MESSAGE("Issues running micro XRCE-DDS session")
      return false;
 8020434:	2300      	movs	r3, #0
 8020436:	e000      	b.n	802043a <run_xrce_session+0x4e>
    }
  }
  return true;
 8020438:	2301      	movs	r3, #1
}
 802043a:	4618      	mov	r0, r3
 802043c:	3718      	adds	r7, #24
 802043e:	46bd      	mov	sp, r7
 8020440:	bd80      	pop	{r7, pc}

08020442 <convert_qos_profile>:

uxrQoS_t convert_qos_profile(const rmw_qos_profile_t * rmw_qos)
{
 8020442:	b480      	push	{r7}
 8020444:	b087      	sub	sp, #28
 8020446:	af00      	add	r7, sp, #0
 8020448:	6078      	str	r0, [r7, #4]
 802044a:	6039      	str	r1, [r7, #0]
  uxrQoSDurability durability;
  switch (rmw_qos->durability) {
 802044c:	683b      	ldr	r3, [r7, #0]
 802044e:	7a5b      	ldrb	r3, [r3, #9]
 8020450:	2b02      	cmp	r3, #2
 8020452:	d102      	bne.n	802045a <convert_qos_profile+0x18>
    case RMW_QOS_POLICY_DURABILITY_VOLATILE:
      durability = UXR_DURABILITY_VOLATILE;
 8020454:	2302      	movs	r3, #2
 8020456:	75fb      	strb	r3, [r7, #23]
      break;
 8020458:	e002      	b.n	8020460 <convert_qos_profile+0x1e>
    case RMW_QOS_POLICY_DURABILITY_UNKNOWN:
    case RMW_QOS_POLICY_DURABILITY_SYSTEM_DEFAULT:
    case RMW_QOS_POLICY_DURABILITY_TRANSIENT_LOCAL:
    default:
      durability = UXR_DURABILITY_TRANSIENT_LOCAL;
 802045a:	2300      	movs	r3, #0
 802045c:	75fb      	strb	r3, [r7, #23]
      break;
 802045e:	bf00      	nop
  }

  uxrQoSReliability reliability;
  switch (rmw_qos->reliability) {
 8020460:	683b      	ldr	r3, [r7, #0]
 8020462:	7a1b      	ldrb	r3, [r3, #8]
 8020464:	2b02      	cmp	r3, #2
 8020466:	d102      	bne.n	802046e <convert_qos_profile+0x2c>
    case RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT:
      reliability = UXR_RELIABILITY_BEST_EFFORT;
 8020468:	2301      	movs	r3, #1
 802046a:	75bb      	strb	r3, [r7, #22]
      break;
 802046c:	e002      	b.n	8020474 <convert_qos_profile+0x32>
    case RMW_QOS_POLICY_RELIABILITY_RELIABLE:
    case RMW_QOS_POLICY_RELIABILITY_SYSTEM_DEFAULT:
    default:
      reliability = UXR_RELIABILITY_RELIABLE;
 802046e:	2300      	movs	r3, #0
 8020470:	75bb      	strb	r3, [r7, #22]
      break;
 8020472:	bf00      	nop
  }

  uxrQoSHistory history;
  switch (rmw_qos->history) {
 8020474:	683b      	ldr	r3, [r7, #0]
 8020476:	781b      	ldrb	r3, [r3, #0]
 8020478:	2b02      	cmp	r3, #2
 802047a:	d102      	bne.n	8020482 <convert_qos_profile+0x40>
    case RMW_QOS_POLICY_HISTORY_KEEP_ALL:
      history = UXR_HISTORY_KEEP_ALL;
 802047c:	2301      	movs	r3, #1
 802047e:	757b      	strb	r3, [r7, #21]
      break;
 8020480:	e002      	b.n	8020488 <convert_qos_profile+0x46>
    case RMW_QOS_POLICY_HISTORY_KEEP_LAST:
    default:
      history = UXR_HISTORY_KEEP_LAST;
 8020482:	2300      	movs	r3, #0
 8020484:	757b      	strb	r3, [r7, #21]
      break;
 8020486:	bf00      	nop
  }

  uxrQoS_t qos = {
 8020488:	7dfb      	ldrb	r3, [r7, #23]
 802048a:	733b      	strb	r3, [r7, #12]
 802048c:	7dbb      	ldrb	r3, [r7, #22]
 802048e:	737b      	strb	r3, [r7, #13]
 8020490:	7d7b      	ldrb	r3, [r7, #21]
 8020492:	73bb      	strb	r3, [r7, #14]
    .durability = durability,
    .reliability = reliability,
    .history = history,
    .depth = rmw_qos->depth,
 8020494:	683b      	ldr	r3, [r7, #0]
 8020496:	685b      	ldr	r3, [r3, #4]
  uxrQoS_t qos = {
 8020498:	b29b      	uxth	r3, r3
 802049a:	823b      	strh	r3, [r7, #16]
  };

  return qos;
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	461a      	mov	r2, r3
 80204a0:	f107 030c 	add.w	r3, r7, #12
 80204a4:	6818      	ldr	r0, [r3, #0]
 80204a6:	6010      	str	r0, [r2, #0]
 80204a8:	889b      	ldrh	r3, [r3, #4]
 80204aa:	8093      	strh	r3, [r2, #4]
}
 80204ac:	6878      	ldr	r0, [r7, #4]
 80204ae:	371c      	adds	r7, #28
 80204b0:	46bd      	mov	sp, r7
 80204b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204b6:	4770      	bx	lr

080204b8 <build_subscriber_xml>:

int build_subscriber_xml(
  const char * subscriber_name,
  char xml[],
  size_t buffer_size)
{
 80204b8:	b480      	push	{r7}
 80204ba:	b085      	sub	sp, #20
 80204bc:	af00      	add	r7, sp, #0
 80204be:	60f8      	str	r0, [r7, #12]
 80204c0:	60b9      	str	r1, [r7, #8]
 80204c2:	607a      	str	r2, [r7, #4]
  (void)subscriber_name;
  (void)buffer_size;

  xml[0] = '\0';
 80204c4:	68bb      	ldr	r3, [r7, #8]
 80204c6:	2200      	movs	r2, #0
 80204c8:	701a      	strb	r2, [r3, #0]
  return 1;
 80204ca:	2301      	movs	r3, #1
}
 80204cc:	4618      	mov	r0, r3
 80204ce:	3714      	adds	r7, #20
 80204d0:	46bd      	mov	sp, r7
 80204d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204d6:	4770      	bx	lr

080204d8 <generate_name>:

int generate_name(
  const uxrObjectId * id,
  char name[],
  size_t buffer_size)
{
 80204d8:	b580      	push	{r7, lr}
 80204da:	b088      	sub	sp, #32
 80204dc:	af02      	add	r7, sp, #8
 80204de:	60f8      	str	r0, [r7, #12]
 80204e0:	60b9      	str	r1, [r7, #8]
 80204e2:	607a      	str	r2, [r7, #4]
  static const char format[] = "%hu_%hi";

  int ret = snprintf(name, buffer_size, format, id->id, id->type);
 80204e4:	68fb      	ldr	r3, [r7, #12]
 80204e6:	881b      	ldrh	r3, [r3, #0]
 80204e8:	461a      	mov	r2, r3
 80204ea:	68fb      	ldr	r3, [r7, #12]
 80204ec:	789b      	ldrb	r3, [r3, #2]
 80204ee:	9300      	str	r3, [sp, #0]
 80204f0:	4613      	mov	r3, r2
 80204f2:	4a0a      	ldr	r2, [pc, #40]	; (802051c <generate_name+0x44>)
 80204f4:	6879      	ldr	r1, [r7, #4]
 80204f6:	68b8      	ldr	r0, [r7, #8]
 80204f8:	f001 fdb4 	bl	8022064 <sniprintf>
 80204fc:	6178      	str	r0, [r7, #20]

  if ((ret < 0) && (ret >= (int)buffer_size)) {
 80204fe:	697b      	ldr	r3, [r7, #20]
 8020500:	2b00      	cmp	r3, #0
 8020502:	da05      	bge.n	8020510 <generate_name+0x38>
 8020504:	687b      	ldr	r3, [r7, #4]
 8020506:	697a      	ldr	r2, [r7, #20]
 8020508:	429a      	cmp	r2, r3
 802050a:	db01      	blt.n	8020510 <generate_name+0x38>
    ret = 0;
 802050c:	2300      	movs	r3, #0
 802050e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8020510:	697b      	ldr	r3, [r7, #20]
}
 8020512:	4618      	mov	r0, r3
 8020514:	3718      	adds	r7, #24
 8020516:	46bd      	mov	sp, r7
 8020518:	bd80      	pop	{r7, pc}
 802051a:	bf00      	nop
 802051c:	0802743c 	.word	0x0802743c

08020520 <generate_type_name>:

size_t generate_type_name(
  const message_type_support_callbacks_t * members,
  char type_name[],
  size_t buffer_size)
{
 8020520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020522:	b08d      	sub	sp, #52	; 0x34
 8020524:	af06      	add	r7, sp, #24
 8020526:	60f8      	str	r0, [r7, #12]
 8020528:	60b9      	str	r1, [r7, #8]
 802052a:	607a      	str	r2, [r7, #4]
  static const char * sep = "::";
  static const char * protocol = "dds";
  static const char * suffix = "_";
  size_t full_name_size = strlen(protocol) + strlen(suffix) + strlen(sep) + strlen(
 802052c:	4b2f      	ldr	r3, [pc, #188]	; (80205ec <generate_type_name+0xcc>)
 802052e:	681b      	ldr	r3, [r3, #0]
 8020530:	4618      	mov	r0, r3
 8020532:	f7df fe77 	bl	8000224 <strlen>
 8020536:	4604      	mov	r4, r0
 8020538:	4b2d      	ldr	r3, [pc, #180]	; (80205f0 <generate_type_name+0xd0>)
 802053a:	681b      	ldr	r3, [r3, #0]
 802053c:	4618      	mov	r0, r3
 802053e:	f7df fe71 	bl	8000224 <strlen>
 8020542:	4603      	mov	r3, r0
 8020544:	441c      	add	r4, r3
 8020546:	4b2b      	ldr	r3, [pc, #172]	; (80205f4 <generate_type_name+0xd4>)
 8020548:	681b      	ldr	r3, [r3, #0]
 802054a:	4618      	mov	r0, r3
 802054c:	f7df fe6a 	bl	8000224 <strlen>
 8020550:	4603      	mov	r3, r0
 8020552:	441c      	add	r4, r3
 8020554:	68fb      	ldr	r3, [r7, #12]
 8020556:	685b      	ldr	r3, [r3, #4]
 8020558:	4618      	mov	r0, r3
 802055a:	f7df fe63 	bl	8000224 <strlen>
 802055e:	4603      	mov	r3, r0
 8020560:	441c      	add	r4, r3
    members->message_name_) + strlen(suffix) +
 8020562:	4b23      	ldr	r3, [pc, #140]	; (80205f0 <generate_type_name+0xd0>)
 8020564:	681b      	ldr	r3, [r3, #0]
 8020566:	4618      	mov	r0, r3
 8020568:	f7df fe5c 	bl	8000224 <strlen>
 802056c:	4603      	mov	r3, r0
 802056e:	441c      	add	r4, r3
    ((NULL != members->message_namespace_) ? strlen(members->message_namespace_) : 0) + 1;
 8020570:	68fb      	ldr	r3, [r7, #12]
 8020572:	681b      	ldr	r3, [r3, #0]
 8020574:	2b00      	cmp	r3, #0
 8020576:	d006      	beq.n	8020586 <generate_type_name+0x66>
 8020578:	68fb      	ldr	r3, [r7, #12]
 802057a:	681b      	ldr	r3, [r3, #0]
 802057c:	4618      	mov	r0, r3
 802057e:	f7df fe51 	bl	8000224 <strlen>
 8020582:	4603      	mov	r3, r0
 8020584:	e000      	b.n	8020588 <generate_type_name+0x68>
 8020586:	2300      	movs	r3, #0
    members->message_name_) + strlen(suffix) +
 8020588:	4423      	add	r3, r4
  size_t full_name_size = strlen(protocol) + strlen(suffix) + strlen(sep) + strlen(
 802058a:	3301      	adds	r3, #1
 802058c:	617b      	str	r3, [r7, #20]

  type_name[0] = 0;
 802058e:	68bb      	ldr	r3, [r7, #8]
 8020590:	2200      	movs	r2, #0
 8020592:	701a      	strb	r2, [r3, #0]

  snprintf(
    type_name, buffer_size,
    "%s%s%s%s%s%s%s",
    (NULL != members->message_namespace_) ? members->message_namespace_ : "",
 8020594:	68fb      	ldr	r3, [r7, #12]
 8020596:	681b      	ldr	r3, [r3, #0]
  snprintf(
 8020598:	2b00      	cmp	r3, #0
 802059a:	d002      	beq.n	80205a2 <generate_type_name+0x82>
 802059c:	68fb      	ldr	r3, [r7, #12]
 802059e:	681a      	ldr	r2, [r3, #0]
 80205a0:	e000      	b.n	80205a4 <generate_type_name+0x84>
 80205a2:	4a15      	ldr	r2, [pc, #84]	; (80205f8 <generate_type_name+0xd8>)
    (NULL != members->message_namespace_) ? sep : "",
 80205a4:	68fb      	ldr	r3, [r7, #12]
 80205a6:	681b      	ldr	r3, [r3, #0]
  snprintf(
 80205a8:	2b00      	cmp	r3, #0
 80205aa:	d002      	beq.n	80205b2 <generate_type_name+0x92>
 80205ac:	4b11      	ldr	r3, [pc, #68]	; (80205f4 <generate_type_name+0xd4>)
 80205ae:	681b      	ldr	r3, [r3, #0]
 80205b0:	e000      	b.n	80205b4 <generate_type_name+0x94>
 80205b2:	4b11      	ldr	r3, [pc, #68]	; (80205f8 <generate_type_name+0xd8>)
 80205b4:	490d      	ldr	r1, [pc, #52]	; (80205ec <generate_type_name+0xcc>)
 80205b6:	6809      	ldr	r1, [r1, #0]
 80205b8:	480d      	ldr	r0, [pc, #52]	; (80205f0 <generate_type_name+0xd0>)
 80205ba:	6800      	ldr	r0, [r0, #0]
 80205bc:	4c0d      	ldr	r4, [pc, #52]	; (80205f4 <generate_type_name+0xd4>)
 80205be:	6824      	ldr	r4, [r4, #0]
 80205c0:	68fd      	ldr	r5, [r7, #12]
 80205c2:	686d      	ldr	r5, [r5, #4]
 80205c4:	4e0a      	ldr	r6, [pc, #40]	; (80205f0 <generate_type_name+0xd0>)
 80205c6:	6836      	ldr	r6, [r6, #0]
 80205c8:	9605      	str	r6, [sp, #20]
 80205ca:	9504      	str	r5, [sp, #16]
 80205cc:	9403      	str	r4, [sp, #12]
 80205ce:	9002      	str	r0, [sp, #8]
 80205d0:	9101      	str	r1, [sp, #4]
 80205d2:	9300      	str	r3, [sp, #0]
 80205d4:	4613      	mov	r3, r2
 80205d6:	4a09      	ldr	r2, [pc, #36]	; (80205fc <generate_type_name+0xdc>)
 80205d8:	6879      	ldr	r1, [r7, #4]
 80205da:	68b8      	ldr	r0, [r7, #8]
 80205dc:	f001 fd42 	bl	8022064 <sniprintf>
    sep,
    members->message_name_,
    suffix
  );

  return full_name_size;
 80205e0:	697b      	ldr	r3, [r7, #20]
}
 80205e2:	4618      	mov	r0, r3
 80205e4:	371c      	adds	r7, #28
 80205e6:	46bd      	mov	sp, r7
 80205e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80205ea:	bf00      	nop
 80205ec:	20000090 	.word	0x20000090
 80205f0:	20000094 	.word	0x20000094
 80205f4:	20000098 	.word	0x20000098
 80205f8:	08026f6c 	.word	0x08026f6c
 80205fc:	08026f70 	.word	0x08026f70

08020600 <generate_topic_name>:

int generate_topic_name(
  const char * topic_name,
  char * full_topic_name,
  size_t full_topic_name_size)
{
 8020600:	b580      	push	{r7, lr}
 8020602:	b088      	sub	sp, #32
 8020604:	af02      	add	r7, sp, #8
 8020606:	60f8      	str	r0, [r7, #12]
 8020608:	60b9      	str	r1, [r7, #8]
 802060a:	607a      	str	r2, [r7, #4]
  int ret = snprintf(
 802060c:	68fb      	ldr	r3, [r7, #12]
 802060e:	9300      	str	r3, [sp, #0]
 8020610:	4b0a      	ldr	r3, [pc, #40]	; (802063c <generate_topic_name+0x3c>)
 8020612:	4a0b      	ldr	r2, [pc, #44]	; (8020640 <generate_topic_name+0x40>)
 8020614:	6879      	ldr	r1, [r7, #4]
 8020616:	68b8      	ldr	r0, [r7, #8]
 8020618:	f001 fd24 	bl	8022064 <sniprintf>
 802061c:	6178      	str	r0, [r7, #20]
    full_topic_name,
    full_topic_name_size,
    "%s%s",
    ros_topic_prefix,
    topic_name);
  if ((ret < 0) && (ret >= (int)full_topic_name_size)) {
 802061e:	697b      	ldr	r3, [r7, #20]
 8020620:	2b00      	cmp	r3, #0
 8020622:	da05      	bge.n	8020630 <generate_topic_name+0x30>
 8020624:	687b      	ldr	r3, [r7, #4]
 8020626:	697a      	ldr	r2, [r7, #20]
 8020628:	429a      	cmp	r2, r3
 802062a:	db01      	blt.n	8020630 <generate_topic_name+0x30>
    return 0;
 802062c:	2300      	movs	r3, #0
 802062e:	e000      	b.n	8020632 <generate_topic_name+0x32>
  }
  return ret;
 8020630:	697b      	ldr	r3, [r7, #20]
}
 8020632:	4618      	mov	r0, r3
 8020634:	3718      	adds	r7, #24
 8020636:	46bd      	mov	sp, r7
 8020638:	bd80      	pop	{r7, pc}
 802063a:	bf00      	nop
 802063c:	08027438 	.word	0x08027438
 8020640:	08026f80 	.word	0x08026f80

08020644 <build_topic_xml>:
  const char * topic_name,
  const message_type_support_callbacks_t * members,
  const rmw_qos_profile_t * qos_policies,
  char xml[],
  size_t buffer_size)
{
 8020644:	b580      	push	{r7, lr}
 8020646:	b0a2      	sub	sp, #136	; 0x88
 8020648:	af02      	add	r7, sp, #8
 802064a:	60f8      	str	r0, [r7, #12]
 802064c:	60b9      	str	r1, [r7, #8]
 802064e:	607a      	str	r2, [r7, #4]
 8020650:	603b      	str	r3, [r7, #0]
    "<name>%s</name>"
    "<dataType>%s</dataType>"
    "</topic>"
    "</dds>";

  int ret = 0;
 8020652:	2300      	movs	r3, #0
 8020654:	67fb      	str	r3, [r7, #124]	; 0x7c
  static char type_name_buffer[RMW_UXRCE_TYPE_NAME_MAX_LENGTH];

  if (RMW_UXRCE_TOPIC_NAME_MAX_LENGTH >= strlen(topic_name) &&
 8020656:	68f8      	ldr	r0, [r7, #12]
 8020658:	f7df fde4 	bl	8000224 <strlen>
 802065c:	4603      	mov	r3, r0
 802065e:	2b64      	cmp	r3, #100	; 0x64
 8020660:	d84a      	bhi.n	80206f8 <build_topic_xml+0xb4>
    0 != generate_type_name(members, type_name_buffer, sizeof(type_name_buffer)))
 8020662:	2280      	movs	r2, #128	; 0x80
 8020664:	4927      	ldr	r1, [pc, #156]	; (8020704 <build_topic_xml+0xc0>)
 8020666:	68b8      	ldr	r0, [r7, #8]
 8020668:	f7ff ff5a 	bl	8020520 <generate_type_name>
 802066c:	4603      	mov	r3, r0
  if (RMW_UXRCE_TOPIC_NAME_MAX_LENGTH >= strlen(topic_name) &&
 802066e:	2b00      	cmp	r3, #0
 8020670:	d042      	beq.n	80206f8 <build_topic_xml+0xb4>
  {
    char full_topic_name[RMW_UXRCE_TOPIC_NAME_MAX_LENGTH + 1 + sizeof(ros_topic_prefix)];

    if (!qos_policies->avoid_ros_namespace_conventions) {
 8020672:	687b      	ldr	r3, [r7, #4]
 8020674:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8020678:	f083 0301 	eor.w	r3, r3, #1
 802067c:	b2db      	uxtb	r3, r3
 802067e:	2b00      	cmp	r3, #0
 8020680:	d013      	beq.n	80206aa <build_topic_xml+0x66>
      ret = snprintf(
 8020682:	f107 0014 	add.w	r0, r7, #20
 8020686:	68fb      	ldr	r3, [r7, #12]
 8020688:	9300      	str	r3, [sp, #0]
 802068a:	4b1f      	ldr	r3, [pc, #124]	; (8020708 <build_topic_xml+0xc4>)
 802068c:	4a1f      	ldr	r2, [pc, #124]	; (802070c <build_topic_xml+0xc8>)
 802068e:	2168      	movs	r1, #104	; 0x68
 8020690:	f001 fce8 	bl	8022064 <sniprintf>
 8020694:	67f8      	str	r0, [r7, #124]	; 0x7c
        full_topic_name, sizeof(full_topic_name), "%s%s", ros_topic_prefix,
        topic_name);
      if ((ret < 0) && (ret >= (int)buffer_size)) {
 8020696:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8020698:	2b00      	cmp	r3, #0
 802069a:	da18      	bge.n	80206ce <build_topic_xml+0x8a>
 802069c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80206a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80206a2:	429a      	cmp	r2, r3
 80206a4:	db13      	blt.n	80206ce <build_topic_xml+0x8a>
        return 0;
 80206a6:	2300      	movs	r3, #0
 80206a8:	e027      	b.n	80206fa <build_topic_xml+0xb6>
      }
    } else {
      ret = snprintf(full_topic_name, sizeof(full_topic_name), "%s", topic_name);
 80206aa:	f107 0014 	add.w	r0, r7, #20
 80206ae:	68fb      	ldr	r3, [r7, #12]
 80206b0:	4a17      	ldr	r2, [pc, #92]	; (8020710 <build_topic_xml+0xcc>)
 80206b2:	2168      	movs	r1, #104	; 0x68
 80206b4:	f001 fcd6 	bl	8022064 <sniprintf>
 80206b8:	67f8      	str	r0, [r7, #124]	; 0x7c
      if ((ret < 0) && (ret >= (int)buffer_size)) {
 80206ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80206bc:	2b00      	cmp	r3, #0
 80206be:	da06      	bge.n	80206ce <build_topic_xml+0x8a>
 80206c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80206c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80206c6:	429a      	cmp	r2, r3
 80206c8:	db01      	blt.n	80206ce <build_topic_xml+0x8a>
        return 0;
 80206ca:	2300      	movs	r3, #0
 80206cc:	e015      	b.n	80206fa <build_topic_xml+0xb6>
      }
    }

    ret = snprintf(xml, buffer_size, format, full_topic_name, type_name_buffer);
 80206ce:	f107 0314 	add.w	r3, r7, #20
 80206d2:	4a0c      	ldr	r2, [pc, #48]	; (8020704 <build_topic_xml+0xc0>)
 80206d4:	9200      	str	r2, [sp, #0]
 80206d6:	4a0f      	ldr	r2, [pc, #60]	; (8020714 <build_topic_xml+0xd0>)
 80206d8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80206dc:	6838      	ldr	r0, [r7, #0]
 80206de:	f001 fcc1 	bl	8022064 <sniprintf>
 80206e2:	67f8      	str	r0, [r7, #124]	; 0x7c
    if ((ret < 0) && (ret >= (int)buffer_size)) {
 80206e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80206e6:	2b00      	cmp	r3, #0
 80206e8:	da06      	bge.n	80206f8 <build_topic_xml+0xb4>
 80206ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80206ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80206f0:	429a      	cmp	r2, r3
 80206f2:	db01      	blt.n	80206f8 <build_topic_xml+0xb4>
      ret = 0;
 80206f4:	2300      	movs	r3, #0
 80206f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    }
  }

  return ret;
 80206f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 80206fa:	4618      	mov	r0, r3
 80206fc:	3780      	adds	r7, #128	; 0x80
 80206fe:	46bd      	mov	sp, r7
 8020700:	bd80      	pop	{r7, pc}
 8020702:	bf00      	nop
 8020704:	2001351c 	.word	0x2001351c
 8020708:	08027438 	.word	0x08027438
 802070c:	08026f80 	.word	0x08026f80
 8020710:	08026f54 	.word	0x08026f54
 8020714:	08027444 	.word	0x08027444

08020718 <build_xml>:
  const char * topic_name,
  const message_type_support_callbacks_t * members,
  const rmw_qos_profile_t * qos_policies,
  char xml[],
  size_t buffer_size)
{
 8020718:	b580      	push	{r7, lr}
 802071a:	b0a2      	sub	sp, #136	; 0x88
 802071c:	af02      	add	r7, sp, #8
 802071e:	60f8      	str	r0, [r7, #12]
 8020720:	60b9      	str	r1, [r7, #8]
 8020722:	607a      	str	r2, [r7, #4]
 8020724:	603b      	str	r3, [r7, #0]
  int ret = 0;
 8020726:	2300      	movs	r3, #0
 8020728:	67fb      	str	r3, [r7, #124]	; 0x7c
  static char type_name_buffer[RMW_UXRCE_TYPE_NAME_MAX_LENGTH];

  if (0 != generate_type_name(members, type_name_buffer, sizeof(type_name_buffer))) {
 802072a:	2280      	movs	r2, #128	; 0x80
 802072c:	492d      	ldr	r1, [pc, #180]	; (80207e4 <build_xml+0xcc>)
 802072e:	6878      	ldr	r0, [r7, #4]
 8020730:	f7ff fef6 	bl	8020520 <generate_type_name>
 8020734:	4603      	mov	r3, r0
 8020736:	2b00      	cmp	r3, #0
 8020738:	d04e      	beq.n	80207d8 <build_xml+0xc0>
    char full_topic_name[RMW_UXRCE_TOPIC_NAME_MAX_LENGTH + 1 + sizeof(ros_topic_prefix)];
    full_topic_name[0] = '\0';
 802073a:	2300      	movs	r3, #0
 802073c:	753b      	strb	r3, [r7, #20]

    if (!qos_policies->avoid_ros_namespace_conventions) {
 802073e:	683b      	ldr	r3, [r7, #0]
 8020740:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8020744:	f083 0301 	eor.w	r3, r3, #1
 8020748:	b2db      	uxtb	r3, r3
 802074a:	2b00      	cmp	r3, #0
 802074c:	d013      	beq.n	8020776 <build_xml+0x5e>
      ret = snprintf(
 802074e:	f107 0014 	add.w	r0, r7, #20
 8020752:	68bb      	ldr	r3, [r7, #8]
 8020754:	9300      	str	r3, [sp, #0]
 8020756:	4b24      	ldr	r3, [pc, #144]	; (80207e8 <build_xml+0xd0>)
 8020758:	4a24      	ldr	r2, [pc, #144]	; (80207ec <build_xml+0xd4>)
 802075a:	2168      	movs	r1, #104	; 0x68
 802075c:	f001 fc82 	bl	8022064 <sniprintf>
 8020760:	67f8      	str	r0, [r7, #124]	; 0x7c
        full_topic_name, sizeof(full_topic_name), "%s%s", ros_topic_prefix,
        topic_name);
      if ((ret < 0) && (ret >= (int)buffer_size)) {
 8020762:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8020764:	2b00      	cmp	r3, #0
 8020766:	da18      	bge.n	802079a <build_xml+0x82>
 8020768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802076c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 802076e:	429a      	cmp	r2, r3
 8020770:	db13      	blt.n	802079a <build_xml+0x82>
        return 0;
 8020772:	2300      	movs	r3, #0
 8020774:	e031      	b.n	80207da <build_xml+0xc2>
      }
    } else {
      ret = snprintf(full_topic_name, sizeof(full_topic_name), "%s", topic_name);
 8020776:	f107 0014 	add.w	r0, r7, #20
 802077a:	68bb      	ldr	r3, [r7, #8]
 802077c:	4a1c      	ldr	r2, [pc, #112]	; (80207f0 <build_xml+0xd8>)
 802077e:	2168      	movs	r1, #104	; 0x68
 8020780:	f001 fc70 	bl	8022064 <sniprintf>
 8020784:	67f8      	str	r0, [r7, #124]	; 0x7c
      if ((ret < 0) && (ret >= (int)buffer_size)) {
 8020786:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8020788:	2b00      	cmp	r3, #0
 802078a:	da06      	bge.n	802079a <build_xml+0x82>
 802078c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8020790:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8020792:	429a      	cmp	r2, r3
 8020794:	db01      	blt.n	802079a <build_xml+0x82>
        return 0;
 8020796:	2300      	movs	r3, #0
 8020798:	e01f      	b.n	80207da <build_xml+0xc2>

    ret = snprintf(
      xml,
      buffer_size,
      format,
      (qos_policies->reliability == RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT) ?
 802079a:	683b      	ldr	r3, [r7, #0]
 802079c:	7a1b      	ldrb	r3, [r3, #8]
    ret = snprintf(
 802079e:	2b02      	cmp	r3, #2
 80207a0:	d101      	bne.n	80207a6 <build_xml+0x8e>
 80207a2:	4a14      	ldr	r2, [pc, #80]	; (80207f4 <build_xml+0xdc>)
 80207a4:	e000      	b.n	80207a8 <build_xml+0x90>
 80207a6:	4a14      	ldr	r2, [pc, #80]	; (80207f8 <build_xml+0xe0>)
 80207a8:	4b0e      	ldr	r3, [pc, #56]	; (80207e4 <build_xml+0xcc>)
 80207aa:	9301      	str	r3, [sp, #4]
 80207ac:	f107 0314 	add.w	r3, r7, #20
 80207b0:	9300      	str	r3, [sp, #0]
 80207b2:	4613      	mov	r3, r2
 80207b4:	68fa      	ldr	r2, [r7, #12]
 80207b6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80207ba:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80207be:	f001 fc51 	bl	8022064 <sniprintf>
 80207c2:	67f8      	str	r0, [r7, #124]	; 0x7c
      "BEST_EFFORT" : "RELIABLE",
      full_topic_name,
      type_name_buffer);

    if ((ret < 0) && (ret >= (int)buffer_size)) {
 80207c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80207c6:	2b00      	cmp	r3, #0
 80207c8:	da06      	bge.n	80207d8 <build_xml+0xc0>
 80207ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80207ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80207d0:	429a      	cmp	r2, r3
 80207d2:	db01      	blt.n	80207d8 <build_xml+0xc0>
      ret = 0;
 80207d4:	2300      	movs	r3, #0
 80207d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    }
  }

  return ret;
 80207d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 80207da:	4618      	mov	r0, r3
 80207dc:	3780      	adds	r7, #128	; 0x80
 80207de:	46bd      	mov	sp, r7
 80207e0:	bd80      	pop	{r7, pc}
 80207e2:	bf00      	nop
 80207e4:	2001359c 	.word	0x2001359c
 80207e8:	08027438 	.word	0x08027438
 80207ec:	08026f80 	.word	0x08026f80
 80207f0:	08026f54 	.word	0x08026f54
 80207f4:	08026f88 	.word	0x08026f88
 80207f8:	08026f94 	.word	0x08026f94

080207fc <build_datareader_xml>:
  const char * topic_name,
  const message_type_support_callbacks_t * members,
  const rmw_qos_profile_t * qos_policies,
  char xml[],
  size_t buffer_size)
{
 80207fc:	b580      	push	{r7, lr}
 80207fe:	b086      	sub	sp, #24
 8020800:	af02      	add	r7, sp, #8
 8020802:	60f8      	str	r0, [r7, #12]
 8020804:	60b9      	str	r1, [r7, #8]
 8020806:	607a      	str	r2, [r7, #4]
 8020808:	603b      	str	r3, [r7, #0]
    "</historyQos>"
    "</topic>"
    "</data_reader>"
    "</dds>";

  return build_xml(format, topic_name, members, qos_policies, xml, buffer_size);
 802080a:	69bb      	ldr	r3, [r7, #24]
 802080c:	9301      	str	r3, [sp, #4]
 802080e:	683b      	ldr	r3, [r7, #0]
 8020810:	9300      	str	r3, [sp, #0]
 8020812:	687b      	ldr	r3, [r7, #4]
 8020814:	68ba      	ldr	r2, [r7, #8]
 8020816:	68f9      	ldr	r1, [r7, #12]
 8020818:	4803      	ldr	r0, [pc, #12]	; (8020828 <build_datareader_xml+0x2c>)
 802081a:	f7ff ff7d 	bl	8020718 <build_xml>
 802081e:	4603      	mov	r3, r0
}
 8020820:	4618      	mov	r0, r3
 8020822:	3710      	adds	r7, #16
 8020824:	46bd      	mov	sp, r7
 8020826:	bd80      	pop	{r7, pc}
 8020828:	08027488 	.word	0x08027488

0802082c <is_uxrce_rmw_identifier_valid>:
  return ret;
}

bool is_uxrce_rmw_identifier_valid(
  const char * id)
{
 802082c:	b580      	push	{r7, lr}
 802082e:	b082      	sub	sp, #8
 8020830:	af00      	add	r7, sp, #0
 8020832:	6078      	str	r0, [r7, #4]
  return id != NULL &&
 8020834:	687b      	ldr	r3, [r7, #4]
 8020836:	2b00      	cmp	r3, #0
 8020838:	d00b      	beq.n	8020852 <is_uxrce_rmw_identifier_valid+0x26>
         strcmp(id, rmw_get_implementation_identifier()) == 0;
 802083a:	f7fc fdef 	bl	801d41c <rmw_get_implementation_identifier>
 802083e:	4603      	mov	r3, r0
 8020840:	4619      	mov	r1, r3
 8020842:	6878      	ldr	r0, [r7, #4]
 8020844:	f7df fce4 	bl	8000210 <strcmp>
 8020848:	4603      	mov	r3, r0
  return id != NULL &&
 802084a:	2b00      	cmp	r3, #0
 802084c:	d101      	bne.n	8020852 <is_uxrce_rmw_identifier_valid+0x26>
 802084e:	2301      	movs	r3, #1
 8020850:	e000      	b.n	8020854 <is_uxrce_rmw_identifier_valid+0x28>
 8020852:	2300      	movs	r3, #0
 8020854:	f003 0301 	and.w	r3, r3, #1
 8020858:	b2db      	uxtb	r3, r3
}
 802085a:	4618      	mov	r0, r3
 802085c:	3708      	adds	r7, #8
 802085e:	46bd      	mov	sp, r7
 8020860:	bd80      	pop	{r7, pc}
	...

08020864 <rmw_uros_set_custom_transport>:
  void * args,
  open_custom_func open_cb,
  close_custom_func close_cb,
  write_custom_func write_cb,
  read_custom_func read_cb)
{
 8020864:	b480      	push	{r7}
 8020866:	b085      	sub	sp, #20
 8020868:	af00      	add	r7, sp, #0
 802086a:	60b9      	str	r1, [r7, #8]
 802086c:	607a      	str	r2, [r7, #4]
 802086e:	603b      	str	r3, [r7, #0]
 8020870:	4603      	mov	r3, r0
 8020872:	73fb      	strb	r3, [r7, #15]
  if (NULL != open_cb &&
 8020874:	687b      	ldr	r3, [r7, #4]
 8020876:	2b00      	cmp	r3, #0
 8020878:	d01c      	beq.n	80208b4 <rmw_uros_set_custom_transport+0x50>
 802087a:	683b      	ldr	r3, [r7, #0]
 802087c:	2b00      	cmp	r3, #0
 802087e:	d019      	beq.n	80208b4 <rmw_uros_set_custom_transport+0x50>
    NULL != close_cb &&
 8020880:	69bb      	ldr	r3, [r7, #24]
 8020882:	2b00      	cmp	r3, #0
 8020884:	d016      	beq.n	80208b4 <rmw_uros_set_custom_transport+0x50>
    NULL != write_cb &&
 8020886:	69fb      	ldr	r3, [r7, #28]
 8020888:	2b00      	cmp	r3, #0
 802088a:	d013      	beq.n	80208b4 <rmw_uros_set_custom_transport+0x50>
    NULL != read_cb)
  {
    rmw_uxrce_transport_default_params.framing = framing;
 802088c:	4a0d      	ldr	r2, [pc, #52]	; (80208c4 <rmw_uros_set_custom_transport+0x60>)
 802088e:	7bfb      	ldrb	r3, [r7, #15]
 8020890:	7013      	strb	r3, [r2, #0]
    rmw_uxrce_transport_default_params.args = args;
 8020892:	4a0c      	ldr	r2, [pc, #48]	; (80208c4 <rmw_uros_set_custom_transport+0x60>)
 8020894:	68bb      	ldr	r3, [r7, #8]
 8020896:	6053      	str	r3, [r2, #4]
    rmw_uxrce_transport_default_params.open_cb = open_cb;
 8020898:	4a0a      	ldr	r2, [pc, #40]	; (80208c4 <rmw_uros_set_custom_transport+0x60>)
 802089a:	687b      	ldr	r3, [r7, #4]
 802089c:	6093      	str	r3, [r2, #8]
    rmw_uxrce_transport_default_params.close_cb = close_cb;
 802089e:	4a09      	ldr	r2, [pc, #36]	; (80208c4 <rmw_uros_set_custom_transport+0x60>)
 80208a0:	683b      	ldr	r3, [r7, #0]
 80208a2:	60d3      	str	r3, [r2, #12]
    rmw_uxrce_transport_default_params.write_cb = write_cb;
 80208a4:	4a07      	ldr	r2, [pc, #28]	; (80208c4 <rmw_uros_set_custom_transport+0x60>)
 80208a6:	69bb      	ldr	r3, [r7, #24]
 80208a8:	6113      	str	r3, [r2, #16]
    rmw_uxrce_transport_default_params.read_cb = read_cb;
 80208aa:	4a06      	ldr	r2, [pc, #24]	; (80208c4 <rmw_uros_set_custom_transport+0x60>)
 80208ac:	69fb      	ldr	r3, [r7, #28]
 80208ae:	6153      	str	r3, [r2, #20]
  } else {
    RMW_UROS_TRACE_MESSAGE("Uninitialised arguments.")
    return RMW_RET_INVALID_ARGUMENT;
  }
  return RMW_RET_OK;
 80208b0:	2300      	movs	r3, #0
 80208b2:	e000      	b.n	80208b6 <rmw_uros_set_custom_transport+0x52>
    return RMW_RET_INVALID_ARGUMENT;
 80208b4:	230b      	movs	r3, #11
}
 80208b6:	4618      	mov	r0, r3
 80208b8:	3714      	adds	r7, #20
 80208ba:	46bd      	mov	sp, r7
 80208bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208c0:	4770      	bx	lr
 80208c2:	bf00      	nop
 80208c4:	2001361c 	.word	0x2001361c

080208c8 <rmw_uros_epoch_nanos>:
  int64_t ret = uxr_epoch_millis(&context->session);
  return ret;
}

int64_t rmw_uros_epoch_nanos()
{
 80208c8:	b580      	push	{r7, lr}
 80208ca:	b084      	sub	sp, #16
 80208cc:	af00      	add	r7, sp, #0
  // Check session is initialized
  if (NULL == session_memory.allocateditems) {
 80208ce:	4b0f      	ldr	r3, [pc, #60]	; (802090c <rmw_uros_epoch_nanos+0x44>)
 80208d0:	681b      	ldr	r3, [r3, #0]
 80208d2:	2b00      	cmp	r3, #0
 80208d4:	d104      	bne.n	80208e0 <rmw_uros_epoch_nanos+0x18>
    RMW_UROS_TRACE_MESSAGE("Uninitialized session.");
    return 0;
 80208d6:	f04f 0200 	mov.w	r2, #0
 80208da:	f04f 0300 	mov.w	r3, #0
 80208de:	e00f      	b.n	8020900 <rmw_uros_epoch_nanos+0x38>
  }

  rmw_uxrce_mempool_item_t * item = session_memory.allocateditems;
 80208e0:	4b0a      	ldr	r3, [pc, #40]	; (802090c <rmw_uros_epoch_nanos+0x44>)
 80208e2:	681b      	ldr	r3, [r3, #0]
 80208e4:	60fb      	str	r3, [r7, #12]
  rmw_context_impl_t * context = (rmw_context_impl_t *)item->data;
 80208e6:	68fb      	ldr	r3, [r7, #12]
 80208e8:	68db      	ldr	r3, [r3, #12]
 80208ea:	60bb      	str	r3, [r7, #8]

  int64_t ret = uxr_epoch_nanos(&context->session);
 80208ec:	68bb      	ldr	r3, [r7, #8]
 80208ee:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80208f2:	4618      	mov	r0, r3
 80208f4:	f7ef feeb 	bl	80106ce <uxr_epoch_nanos>
 80208f8:	e9c7 0100 	strd	r0, r1, [r7]
  return ret;
 80208fc:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8020900:	4610      	mov	r0, r2
 8020902:	4619      	mov	r1, r3
 8020904:	3710      	adds	r7, #16
 8020906:	46bd      	mov	sp, r7
 8020908:	bd80      	pop	{r7, pc}
 802090a:	bf00      	nop
 802090c:	2000e8a8 	.word	0x2000e8a8

08020910 <__assert_func>:
 8020910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020912:	4614      	mov	r4, r2
 8020914:	461a      	mov	r2, r3
 8020916:	4b09      	ldr	r3, [pc, #36]	; (802093c <__assert_func+0x2c>)
 8020918:	681b      	ldr	r3, [r3, #0]
 802091a:	4605      	mov	r5, r0
 802091c:	68d8      	ldr	r0, [r3, #12]
 802091e:	b14c      	cbz	r4, 8020934 <__assert_func+0x24>
 8020920:	4b07      	ldr	r3, [pc, #28]	; (8020940 <__assert_func+0x30>)
 8020922:	9100      	str	r1, [sp, #0]
 8020924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020928:	4906      	ldr	r1, [pc, #24]	; (8020944 <__assert_func+0x34>)
 802092a:	462b      	mov	r3, r5
 802092c:	f000 f906 	bl	8020b3c <fiprintf>
 8020930:	f002 fcae 	bl	8023290 <abort>
 8020934:	4b04      	ldr	r3, [pc, #16]	; (8020948 <__assert_func+0x38>)
 8020936:	461c      	mov	r4, r3
 8020938:	e7f3      	b.n	8020922 <__assert_func+0x12>
 802093a:	bf00      	nop
 802093c:	2000009c 	.word	0x2000009c
 8020940:	0802759e 	.word	0x0802759e
 8020944:	080275ab 	.word	0x080275ab
 8020948:	080275d9 	.word	0x080275d9

0802094c <calloc>:
 802094c:	4b02      	ldr	r3, [pc, #8]	; (8020958 <calloc+0xc>)
 802094e:	460a      	mov	r2, r1
 8020950:	4601      	mov	r1, r0
 8020952:	6818      	ldr	r0, [r3, #0]
 8020954:	f000 b9e4 	b.w	8020d20 <_calloc_r>
 8020958:	2000009c 	.word	0x2000009c

0802095c <__errno>:
 802095c:	4b01      	ldr	r3, [pc, #4]	; (8020964 <__errno+0x8>)
 802095e:	6818      	ldr	r0, [r3, #0]
 8020960:	4770      	bx	lr
 8020962:	bf00      	nop
 8020964:	2000009c 	.word	0x2000009c

08020968 <exit>:
 8020968:	b508      	push	{r3, lr}
 802096a:	4b07      	ldr	r3, [pc, #28]	; (8020988 <exit+0x20>)
 802096c:	4604      	mov	r4, r0
 802096e:	b113      	cbz	r3, 8020976 <exit+0xe>
 8020970:	2100      	movs	r1, #0
 8020972:	f3af 8000 	nop.w
 8020976:	4b05      	ldr	r3, [pc, #20]	; (802098c <exit+0x24>)
 8020978:	6818      	ldr	r0, [r3, #0]
 802097a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802097c:	b103      	cbz	r3, 8020980 <exit+0x18>
 802097e:	4798      	blx	r3
 8020980:	4620      	mov	r0, r4
 8020982:	f7e1 fe99 	bl	80026b8 <_exit>
 8020986:	bf00      	nop
 8020988:	00000000 	.word	0x00000000
 802098c:	0802773c 	.word	0x0802773c

08020990 <std>:
 8020990:	2300      	movs	r3, #0
 8020992:	b510      	push	{r4, lr}
 8020994:	4604      	mov	r4, r0
 8020996:	e9c0 3300 	strd	r3, r3, [r0]
 802099a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802099e:	6083      	str	r3, [r0, #8]
 80209a0:	8181      	strh	r1, [r0, #12]
 80209a2:	6643      	str	r3, [r0, #100]	; 0x64
 80209a4:	81c2      	strh	r2, [r0, #14]
 80209a6:	6183      	str	r3, [r0, #24]
 80209a8:	4619      	mov	r1, r3
 80209aa:	2208      	movs	r2, #8
 80209ac:	305c      	adds	r0, #92	; 0x5c
 80209ae:	f000 f9af 	bl	8020d10 <memset>
 80209b2:	4b05      	ldr	r3, [pc, #20]	; (80209c8 <std+0x38>)
 80209b4:	6263      	str	r3, [r4, #36]	; 0x24
 80209b6:	4b05      	ldr	r3, [pc, #20]	; (80209cc <std+0x3c>)
 80209b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80209ba:	4b05      	ldr	r3, [pc, #20]	; (80209d0 <std+0x40>)
 80209bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80209be:	4b05      	ldr	r3, [pc, #20]	; (80209d4 <std+0x44>)
 80209c0:	6224      	str	r4, [r4, #32]
 80209c2:	6323      	str	r3, [r4, #48]	; 0x30
 80209c4:	bd10      	pop	{r4, pc}
 80209c6:	bf00      	nop
 80209c8:	0802210d 	.word	0x0802210d
 80209cc:	0802212f 	.word	0x0802212f
 80209d0:	08022167 	.word	0x08022167
 80209d4:	0802218b 	.word	0x0802218b

080209d8 <_cleanup_r>:
 80209d8:	4901      	ldr	r1, [pc, #4]	; (80209e0 <_cleanup_r+0x8>)
 80209da:	f000 b8c1 	b.w	8020b60 <_fwalk_reent>
 80209de:	bf00      	nop
 80209e0:	080240d9 	.word	0x080240d9

080209e4 <__sfmoreglue>:
 80209e4:	b570      	push	{r4, r5, r6, lr}
 80209e6:	2268      	movs	r2, #104	; 0x68
 80209e8:	1e4d      	subs	r5, r1, #1
 80209ea:	4355      	muls	r5, r2
 80209ec:	460e      	mov	r6, r1
 80209ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80209f2:	f000 f9f1 	bl	8020dd8 <_malloc_r>
 80209f6:	4604      	mov	r4, r0
 80209f8:	b140      	cbz	r0, 8020a0c <__sfmoreglue+0x28>
 80209fa:	2100      	movs	r1, #0
 80209fc:	e9c0 1600 	strd	r1, r6, [r0]
 8020a00:	300c      	adds	r0, #12
 8020a02:	60a0      	str	r0, [r4, #8]
 8020a04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020a08:	f000 f982 	bl	8020d10 <memset>
 8020a0c:	4620      	mov	r0, r4
 8020a0e:	bd70      	pop	{r4, r5, r6, pc}

08020a10 <__sfp_lock_acquire>:
 8020a10:	4801      	ldr	r0, [pc, #4]	; (8020a18 <__sfp_lock_acquire+0x8>)
 8020a12:	f000 b932 	b.w	8020c7a <__retarget_lock_acquire_recursive>
 8020a16:	bf00      	nop
 8020a18:	2001363a 	.word	0x2001363a

08020a1c <__sfp_lock_release>:
 8020a1c:	4801      	ldr	r0, [pc, #4]	; (8020a24 <__sfp_lock_release+0x8>)
 8020a1e:	f000 b92d 	b.w	8020c7c <__retarget_lock_release_recursive>
 8020a22:	bf00      	nop
 8020a24:	2001363a 	.word	0x2001363a

08020a28 <__sinit_lock_acquire>:
 8020a28:	4801      	ldr	r0, [pc, #4]	; (8020a30 <__sinit_lock_acquire+0x8>)
 8020a2a:	f000 b926 	b.w	8020c7a <__retarget_lock_acquire_recursive>
 8020a2e:	bf00      	nop
 8020a30:	2001363b 	.word	0x2001363b

08020a34 <__sinit_lock_release>:
 8020a34:	4801      	ldr	r0, [pc, #4]	; (8020a3c <__sinit_lock_release+0x8>)
 8020a36:	f000 b921 	b.w	8020c7c <__retarget_lock_release_recursive>
 8020a3a:	bf00      	nop
 8020a3c:	2001363b 	.word	0x2001363b

08020a40 <__sinit>:
 8020a40:	b510      	push	{r4, lr}
 8020a42:	4604      	mov	r4, r0
 8020a44:	f7ff fff0 	bl	8020a28 <__sinit_lock_acquire>
 8020a48:	69a3      	ldr	r3, [r4, #24]
 8020a4a:	b11b      	cbz	r3, 8020a54 <__sinit+0x14>
 8020a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020a50:	f7ff bff0 	b.w	8020a34 <__sinit_lock_release>
 8020a54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020a58:	6523      	str	r3, [r4, #80]	; 0x50
 8020a5a:	4b13      	ldr	r3, [pc, #76]	; (8020aa8 <__sinit+0x68>)
 8020a5c:	4a13      	ldr	r2, [pc, #76]	; (8020aac <__sinit+0x6c>)
 8020a5e:	681b      	ldr	r3, [r3, #0]
 8020a60:	62a2      	str	r2, [r4, #40]	; 0x28
 8020a62:	42a3      	cmp	r3, r4
 8020a64:	bf04      	itt	eq
 8020a66:	2301      	moveq	r3, #1
 8020a68:	61a3      	streq	r3, [r4, #24]
 8020a6a:	4620      	mov	r0, r4
 8020a6c:	f000 f820 	bl	8020ab0 <__sfp>
 8020a70:	6060      	str	r0, [r4, #4]
 8020a72:	4620      	mov	r0, r4
 8020a74:	f000 f81c 	bl	8020ab0 <__sfp>
 8020a78:	60a0      	str	r0, [r4, #8]
 8020a7a:	4620      	mov	r0, r4
 8020a7c:	f000 f818 	bl	8020ab0 <__sfp>
 8020a80:	2200      	movs	r2, #0
 8020a82:	60e0      	str	r0, [r4, #12]
 8020a84:	2104      	movs	r1, #4
 8020a86:	6860      	ldr	r0, [r4, #4]
 8020a88:	f7ff ff82 	bl	8020990 <std>
 8020a8c:	68a0      	ldr	r0, [r4, #8]
 8020a8e:	2201      	movs	r2, #1
 8020a90:	2109      	movs	r1, #9
 8020a92:	f7ff ff7d 	bl	8020990 <std>
 8020a96:	68e0      	ldr	r0, [r4, #12]
 8020a98:	2202      	movs	r2, #2
 8020a9a:	2112      	movs	r1, #18
 8020a9c:	f7ff ff78 	bl	8020990 <std>
 8020aa0:	2301      	movs	r3, #1
 8020aa2:	61a3      	str	r3, [r4, #24]
 8020aa4:	e7d2      	b.n	8020a4c <__sinit+0xc>
 8020aa6:	bf00      	nop
 8020aa8:	0802773c 	.word	0x0802773c
 8020aac:	080209d9 	.word	0x080209d9

08020ab0 <__sfp>:
 8020ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ab2:	4607      	mov	r7, r0
 8020ab4:	f7ff ffac 	bl	8020a10 <__sfp_lock_acquire>
 8020ab8:	4b1e      	ldr	r3, [pc, #120]	; (8020b34 <__sfp+0x84>)
 8020aba:	681e      	ldr	r6, [r3, #0]
 8020abc:	69b3      	ldr	r3, [r6, #24]
 8020abe:	b913      	cbnz	r3, 8020ac6 <__sfp+0x16>
 8020ac0:	4630      	mov	r0, r6
 8020ac2:	f7ff ffbd 	bl	8020a40 <__sinit>
 8020ac6:	3648      	adds	r6, #72	; 0x48
 8020ac8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020acc:	3b01      	subs	r3, #1
 8020ace:	d503      	bpl.n	8020ad8 <__sfp+0x28>
 8020ad0:	6833      	ldr	r3, [r6, #0]
 8020ad2:	b30b      	cbz	r3, 8020b18 <__sfp+0x68>
 8020ad4:	6836      	ldr	r6, [r6, #0]
 8020ad6:	e7f7      	b.n	8020ac8 <__sfp+0x18>
 8020ad8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020adc:	b9d5      	cbnz	r5, 8020b14 <__sfp+0x64>
 8020ade:	4b16      	ldr	r3, [pc, #88]	; (8020b38 <__sfp+0x88>)
 8020ae0:	60e3      	str	r3, [r4, #12]
 8020ae2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020ae6:	6665      	str	r5, [r4, #100]	; 0x64
 8020ae8:	f000 f8c6 	bl	8020c78 <__retarget_lock_init_recursive>
 8020aec:	f7ff ff96 	bl	8020a1c <__sfp_lock_release>
 8020af0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8020af4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020af8:	6025      	str	r5, [r4, #0]
 8020afa:	61a5      	str	r5, [r4, #24]
 8020afc:	2208      	movs	r2, #8
 8020afe:	4629      	mov	r1, r5
 8020b00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020b04:	f000 f904 	bl	8020d10 <memset>
 8020b08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020b0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020b10:	4620      	mov	r0, r4
 8020b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b14:	3468      	adds	r4, #104	; 0x68
 8020b16:	e7d9      	b.n	8020acc <__sfp+0x1c>
 8020b18:	2104      	movs	r1, #4
 8020b1a:	4638      	mov	r0, r7
 8020b1c:	f7ff ff62 	bl	80209e4 <__sfmoreglue>
 8020b20:	4604      	mov	r4, r0
 8020b22:	6030      	str	r0, [r6, #0]
 8020b24:	2800      	cmp	r0, #0
 8020b26:	d1d5      	bne.n	8020ad4 <__sfp+0x24>
 8020b28:	f7ff ff78 	bl	8020a1c <__sfp_lock_release>
 8020b2c:	230c      	movs	r3, #12
 8020b2e:	603b      	str	r3, [r7, #0]
 8020b30:	e7ee      	b.n	8020b10 <__sfp+0x60>
 8020b32:	bf00      	nop
 8020b34:	0802773c 	.word	0x0802773c
 8020b38:	ffff0001 	.word	0xffff0001

08020b3c <fiprintf>:
 8020b3c:	b40e      	push	{r1, r2, r3}
 8020b3e:	b503      	push	{r0, r1, lr}
 8020b40:	4601      	mov	r1, r0
 8020b42:	ab03      	add	r3, sp, #12
 8020b44:	4805      	ldr	r0, [pc, #20]	; (8020b5c <fiprintf+0x20>)
 8020b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8020b4a:	6800      	ldr	r0, [r0, #0]
 8020b4c:	9301      	str	r3, [sp, #4]
 8020b4e:	f000 f9c7 	bl	8020ee0 <_vfiprintf_r>
 8020b52:	b002      	add	sp, #8
 8020b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8020b58:	b003      	add	sp, #12
 8020b5a:	4770      	bx	lr
 8020b5c:	2000009c 	.word	0x2000009c

08020b60 <_fwalk_reent>:
 8020b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020b64:	4606      	mov	r6, r0
 8020b66:	4688      	mov	r8, r1
 8020b68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020b6c:	2700      	movs	r7, #0
 8020b6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020b72:	f1b9 0901 	subs.w	r9, r9, #1
 8020b76:	d505      	bpl.n	8020b84 <_fwalk_reent+0x24>
 8020b78:	6824      	ldr	r4, [r4, #0]
 8020b7a:	2c00      	cmp	r4, #0
 8020b7c:	d1f7      	bne.n	8020b6e <_fwalk_reent+0xe>
 8020b7e:	4638      	mov	r0, r7
 8020b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020b84:	89ab      	ldrh	r3, [r5, #12]
 8020b86:	2b01      	cmp	r3, #1
 8020b88:	d907      	bls.n	8020b9a <_fwalk_reent+0x3a>
 8020b8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020b8e:	3301      	adds	r3, #1
 8020b90:	d003      	beq.n	8020b9a <_fwalk_reent+0x3a>
 8020b92:	4629      	mov	r1, r5
 8020b94:	4630      	mov	r0, r6
 8020b96:	47c0      	blx	r8
 8020b98:	4307      	orrs	r7, r0
 8020b9a:	3568      	adds	r5, #104	; 0x68
 8020b9c:	e7e9      	b.n	8020b72 <_fwalk_reent+0x12>
	...

08020ba0 <getenv>:
 8020ba0:	b507      	push	{r0, r1, r2, lr}
 8020ba2:	4b04      	ldr	r3, [pc, #16]	; (8020bb4 <getenv+0x14>)
 8020ba4:	4601      	mov	r1, r0
 8020ba6:	aa01      	add	r2, sp, #4
 8020ba8:	6818      	ldr	r0, [r3, #0]
 8020baa:	f000 f805 	bl	8020bb8 <_findenv_r>
 8020bae:	b003      	add	sp, #12
 8020bb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8020bb4:	2000009c 	.word	0x2000009c

08020bb8 <_findenv_r>:
 8020bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bbc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8020c2c <_findenv_r+0x74>
 8020bc0:	4607      	mov	r7, r0
 8020bc2:	4689      	mov	r9, r1
 8020bc4:	4616      	mov	r6, r2
 8020bc6:	f003 f9f5 	bl	8023fb4 <__env_lock>
 8020bca:	f8da 4000 	ldr.w	r4, [sl]
 8020bce:	b134      	cbz	r4, 8020bde <_findenv_r+0x26>
 8020bd0:	464b      	mov	r3, r9
 8020bd2:	4698      	mov	r8, r3
 8020bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020bd8:	b13a      	cbz	r2, 8020bea <_findenv_r+0x32>
 8020bda:	2a3d      	cmp	r2, #61	; 0x3d
 8020bdc:	d1f9      	bne.n	8020bd2 <_findenv_r+0x1a>
 8020bde:	4638      	mov	r0, r7
 8020be0:	f003 f9ee 	bl	8023fc0 <__env_unlock>
 8020be4:	2000      	movs	r0, #0
 8020be6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bea:	eba8 0809 	sub.w	r8, r8, r9
 8020bee:	46a3      	mov	fp, r4
 8020bf0:	f854 0b04 	ldr.w	r0, [r4], #4
 8020bf4:	2800      	cmp	r0, #0
 8020bf6:	d0f2      	beq.n	8020bde <_findenv_r+0x26>
 8020bf8:	4642      	mov	r2, r8
 8020bfa:	4649      	mov	r1, r9
 8020bfc:	f001 fade 	bl	80221bc <strncmp>
 8020c00:	2800      	cmp	r0, #0
 8020c02:	d1f4      	bne.n	8020bee <_findenv_r+0x36>
 8020c04:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8020c08:	eb03 0508 	add.w	r5, r3, r8
 8020c0c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8020c10:	2b3d      	cmp	r3, #61	; 0x3d
 8020c12:	d1ec      	bne.n	8020bee <_findenv_r+0x36>
 8020c14:	f8da 3000 	ldr.w	r3, [sl]
 8020c18:	ebab 0303 	sub.w	r3, fp, r3
 8020c1c:	109b      	asrs	r3, r3, #2
 8020c1e:	4638      	mov	r0, r7
 8020c20:	6033      	str	r3, [r6, #0]
 8020c22:	f003 f9cd 	bl	8023fc0 <__env_unlock>
 8020c26:	1c68      	adds	r0, r5, #1
 8020c28:	e7dd      	b.n	8020be6 <_findenv_r+0x2e>
 8020c2a:	bf00      	nop
 8020c2c:	20000000 	.word	0x20000000

08020c30 <__libc_init_array>:
 8020c30:	b570      	push	{r4, r5, r6, lr}
 8020c32:	4d0d      	ldr	r5, [pc, #52]	; (8020c68 <__libc_init_array+0x38>)
 8020c34:	4c0d      	ldr	r4, [pc, #52]	; (8020c6c <__libc_init_array+0x3c>)
 8020c36:	1b64      	subs	r4, r4, r5
 8020c38:	10a4      	asrs	r4, r4, #2
 8020c3a:	2600      	movs	r6, #0
 8020c3c:	42a6      	cmp	r6, r4
 8020c3e:	d109      	bne.n	8020c54 <__libc_init_array+0x24>
 8020c40:	4d0b      	ldr	r5, [pc, #44]	; (8020c70 <__libc_init_array+0x40>)
 8020c42:	4c0c      	ldr	r4, [pc, #48]	; (8020c74 <__libc_init_array+0x44>)
 8020c44:	f004 fd68 	bl	8025718 <_init>
 8020c48:	1b64      	subs	r4, r4, r5
 8020c4a:	10a4      	asrs	r4, r4, #2
 8020c4c:	2600      	movs	r6, #0
 8020c4e:	42a6      	cmp	r6, r4
 8020c50:	d105      	bne.n	8020c5e <__libc_init_array+0x2e>
 8020c52:	bd70      	pop	{r4, r5, r6, pc}
 8020c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8020c58:	4798      	blx	r3
 8020c5a:	3601      	adds	r6, #1
 8020c5c:	e7ee      	b.n	8020c3c <__libc_init_array+0xc>
 8020c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8020c62:	4798      	blx	r3
 8020c64:	3601      	adds	r6, #1
 8020c66:	e7f2      	b.n	8020c4e <__libc_init_array+0x1e>
 8020c68:	08027aa4 	.word	0x08027aa4
 8020c6c:	08027aa4 	.word	0x08027aa4
 8020c70:	08027aa4 	.word	0x08027aa4
 8020c74:	08027aac 	.word	0x08027aac

08020c78 <__retarget_lock_init_recursive>:
 8020c78:	4770      	bx	lr

08020c7a <__retarget_lock_acquire_recursive>:
 8020c7a:	4770      	bx	lr

08020c7c <__retarget_lock_release_recursive>:
 8020c7c:	4770      	bx	lr
	...

08020c80 <malloc>:
 8020c80:	4b02      	ldr	r3, [pc, #8]	; (8020c8c <malloc+0xc>)
 8020c82:	4601      	mov	r1, r0
 8020c84:	6818      	ldr	r0, [r3, #0]
 8020c86:	f000 b8a7 	b.w	8020dd8 <_malloc_r>
 8020c8a:	bf00      	nop
 8020c8c:	2000009c 	.word	0x2000009c

08020c90 <free>:
 8020c90:	4b02      	ldr	r3, [pc, #8]	; (8020c9c <free+0xc>)
 8020c92:	4601      	mov	r1, r0
 8020c94:	6818      	ldr	r0, [r3, #0]
 8020c96:	f000 b853 	b.w	8020d40 <_free_r>
 8020c9a:	bf00      	nop
 8020c9c:	2000009c 	.word	0x2000009c

08020ca0 <memcmp>:
 8020ca0:	b510      	push	{r4, lr}
 8020ca2:	3901      	subs	r1, #1
 8020ca4:	4402      	add	r2, r0
 8020ca6:	4290      	cmp	r0, r2
 8020ca8:	d101      	bne.n	8020cae <memcmp+0xe>
 8020caa:	2000      	movs	r0, #0
 8020cac:	e005      	b.n	8020cba <memcmp+0x1a>
 8020cae:	7803      	ldrb	r3, [r0, #0]
 8020cb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020cb4:	42a3      	cmp	r3, r4
 8020cb6:	d001      	beq.n	8020cbc <memcmp+0x1c>
 8020cb8:	1b18      	subs	r0, r3, r4
 8020cba:	bd10      	pop	{r4, pc}
 8020cbc:	3001      	adds	r0, #1
 8020cbe:	e7f2      	b.n	8020ca6 <memcmp+0x6>

08020cc0 <memcpy>:
 8020cc0:	440a      	add	r2, r1
 8020cc2:	4291      	cmp	r1, r2
 8020cc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020cc8:	d100      	bne.n	8020ccc <memcpy+0xc>
 8020cca:	4770      	bx	lr
 8020ccc:	b510      	push	{r4, lr}
 8020cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020cd6:	4291      	cmp	r1, r2
 8020cd8:	d1f9      	bne.n	8020cce <memcpy+0xe>
 8020cda:	bd10      	pop	{r4, pc}

08020cdc <memmove>:
 8020cdc:	4288      	cmp	r0, r1
 8020cde:	b510      	push	{r4, lr}
 8020ce0:	eb01 0402 	add.w	r4, r1, r2
 8020ce4:	d902      	bls.n	8020cec <memmove+0x10>
 8020ce6:	4284      	cmp	r4, r0
 8020ce8:	4623      	mov	r3, r4
 8020cea:	d807      	bhi.n	8020cfc <memmove+0x20>
 8020cec:	1e43      	subs	r3, r0, #1
 8020cee:	42a1      	cmp	r1, r4
 8020cf0:	d008      	beq.n	8020d04 <memmove+0x28>
 8020cf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020cf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020cfa:	e7f8      	b.n	8020cee <memmove+0x12>
 8020cfc:	4402      	add	r2, r0
 8020cfe:	4601      	mov	r1, r0
 8020d00:	428a      	cmp	r2, r1
 8020d02:	d100      	bne.n	8020d06 <memmove+0x2a>
 8020d04:	bd10      	pop	{r4, pc}
 8020d06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020d0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020d0e:	e7f7      	b.n	8020d00 <memmove+0x24>

08020d10 <memset>:
 8020d10:	4402      	add	r2, r0
 8020d12:	4603      	mov	r3, r0
 8020d14:	4293      	cmp	r3, r2
 8020d16:	d100      	bne.n	8020d1a <memset+0xa>
 8020d18:	4770      	bx	lr
 8020d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8020d1e:	e7f9      	b.n	8020d14 <memset+0x4>

08020d20 <_calloc_r>:
 8020d20:	b513      	push	{r0, r1, r4, lr}
 8020d22:	434a      	muls	r2, r1
 8020d24:	4611      	mov	r1, r2
 8020d26:	9201      	str	r2, [sp, #4]
 8020d28:	f000 f856 	bl	8020dd8 <_malloc_r>
 8020d2c:	4604      	mov	r4, r0
 8020d2e:	b118      	cbz	r0, 8020d38 <_calloc_r+0x18>
 8020d30:	9a01      	ldr	r2, [sp, #4]
 8020d32:	2100      	movs	r1, #0
 8020d34:	f7ff ffec 	bl	8020d10 <memset>
 8020d38:	4620      	mov	r0, r4
 8020d3a:	b002      	add	sp, #8
 8020d3c:	bd10      	pop	{r4, pc}
	...

08020d40 <_free_r>:
 8020d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020d42:	2900      	cmp	r1, #0
 8020d44:	d044      	beq.n	8020dd0 <_free_r+0x90>
 8020d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020d4a:	9001      	str	r0, [sp, #4]
 8020d4c:	2b00      	cmp	r3, #0
 8020d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8020d52:	bfb8      	it	lt
 8020d54:	18e4      	addlt	r4, r4, r3
 8020d56:	f003 fdf9 	bl	802494c <__malloc_lock>
 8020d5a:	4a1e      	ldr	r2, [pc, #120]	; (8020dd4 <_free_r+0x94>)
 8020d5c:	9801      	ldr	r0, [sp, #4]
 8020d5e:	6813      	ldr	r3, [r2, #0]
 8020d60:	b933      	cbnz	r3, 8020d70 <_free_r+0x30>
 8020d62:	6063      	str	r3, [r4, #4]
 8020d64:	6014      	str	r4, [r2, #0]
 8020d66:	b003      	add	sp, #12
 8020d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020d6c:	f003 bdf4 	b.w	8024958 <__malloc_unlock>
 8020d70:	42a3      	cmp	r3, r4
 8020d72:	d908      	bls.n	8020d86 <_free_r+0x46>
 8020d74:	6825      	ldr	r5, [r4, #0]
 8020d76:	1961      	adds	r1, r4, r5
 8020d78:	428b      	cmp	r3, r1
 8020d7a:	bf01      	itttt	eq
 8020d7c:	6819      	ldreq	r1, [r3, #0]
 8020d7e:	685b      	ldreq	r3, [r3, #4]
 8020d80:	1949      	addeq	r1, r1, r5
 8020d82:	6021      	streq	r1, [r4, #0]
 8020d84:	e7ed      	b.n	8020d62 <_free_r+0x22>
 8020d86:	461a      	mov	r2, r3
 8020d88:	685b      	ldr	r3, [r3, #4]
 8020d8a:	b10b      	cbz	r3, 8020d90 <_free_r+0x50>
 8020d8c:	42a3      	cmp	r3, r4
 8020d8e:	d9fa      	bls.n	8020d86 <_free_r+0x46>
 8020d90:	6811      	ldr	r1, [r2, #0]
 8020d92:	1855      	adds	r5, r2, r1
 8020d94:	42a5      	cmp	r5, r4
 8020d96:	d10b      	bne.n	8020db0 <_free_r+0x70>
 8020d98:	6824      	ldr	r4, [r4, #0]
 8020d9a:	4421      	add	r1, r4
 8020d9c:	1854      	adds	r4, r2, r1
 8020d9e:	42a3      	cmp	r3, r4
 8020da0:	6011      	str	r1, [r2, #0]
 8020da2:	d1e0      	bne.n	8020d66 <_free_r+0x26>
 8020da4:	681c      	ldr	r4, [r3, #0]
 8020da6:	685b      	ldr	r3, [r3, #4]
 8020da8:	6053      	str	r3, [r2, #4]
 8020daa:	4421      	add	r1, r4
 8020dac:	6011      	str	r1, [r2, #0]
 8020dae:	e7da      	b.n	8020d66 <_free_r+0x26>
 8020db0:	d902      	bls.n	8020db8 <_free_r+0x78>
 8020db2:	230c      	movs	r3, #12
 8020db4:	6003      	str	r3, [r0, #0]
 8020db6:	e7d6      	b.n	8020d66 <_free_r+0x26>
 8020db8:	6825      	ldr	r5, [r4, #0]
 8020dba:	1961      	adds	r1, r4, r5
 8020dbc:	428b      	cmp	r3, r1
 8020dbe:	bf04      	itt	eq
 8020dc0:	6819      	ldreq	r1, [r3, #0]
 8020dc2:	685b      	ldreq	r3, [r3, #4]
 8020dc4:	6063      	str	r3, [r4, #4]
 8020dc6:	bf04      	itt	eq
 8020dc8:	1949      	addeq	r1, r1, r5
 8020dca:	6021      	streq	r1, [r4, #0]
 8020dcc:	6054      	str	r4, [r2, #4]
 8020dce:	e7ca      	b.n	8020d66 <_free_r+0x26>
 8020dd0:	b003      	add	sp, #12
 8020dd2:	bd30      	pop	{r4, r5, pc}
 8020dd4:	2001363c 	.word	0x2001363c

08020dd8 <_malloc_r>:
 8020dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020dda:	1ccd      	adds	r5, r1, #3
 8020ddc:	f025 0503 	bic.w	r5, r5, #3
 8020de0:	3508      	adds	r5, #8
 8020de2:	2d0c      	cmp	r5, #12
 8020de4:	bf38      	it	cc
 8020de6:	250c      	movcc	r5, #12
 8020de8:	2d00      	cmp	r5, #0
 8020dea:	4606      	mov	r6, r0
 8020dec:	db01      	blt.n	8020df2 <_malloc_r+0x1a>
 8020dee:	42a9      	cmp	r1, r5
 8020df0:	d903      	bls.n	8020dfa <_malloc_r+0x22>
 8020df2:	230c      	movs	r3, #12
 8020df4:	6033      	str	r3, [r6, #0]
 8020df6:	2000      	movs	r0, #0
 8020df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020dfa:	f003 fda7 	bl	802494c <__malloc_lock>
 8020dfe:	4921      	ldr	r1, [pc, #132]	; (8020e84 <_malloc_r+0xac>)
 8020e00:	680a      	ldr	r2, [r1, #0]
 8020e02:	4614      	mov	r4, r2
 8020e04:	b99c      	cbnz	r4, 8020e2e <_malloc_r+0x56>
 8020e06:	4f20      	ldr	r7, [pc, #128]	; (8020e88 <_malloc_r+0xb0>)
 8020e08:	683b      	ldr	r3, [r7, #0]
 8020e0a:	b923      	cbnz	r3, 8020e16 <_malloc_r+0x3e>
 8020e0c:	4621      	mov	r1, r4
 8020e0e:	4630      	mov	r0, r6
 8020e10:	f001 f912 	bl	8022038 <_sbrk_r>
 8020e14:	6038      	str	r0, [r7, #0]
 8020e16:	4629      	mov	r1, r5
 8020e18:	4630      	mov	r0, r6
 8020e1a:	f001 f90d 	bl	8022038 <_sbrk_r>
 8020e1e:	1c43      	adds	r3, r0, #1
 8020e20:	d123      	bne.n	8020e6a <_malloc_r+0x92>
 8020e22:	230c      	movs	r3, #12
 8020e24:	6033      	str	r3, [r6, #0]
 8020e26:	4630      	mov	r0, r6
 8020e28:	f003 fd96 	bl	8024958 <__malloc_unlock>
 8020e2c:	e7e3      	b.n	8020df6 <_malloc_r+0x1e>
 8020e2e:	6823      	ldr	r3, [r4, #0]
 8020e30:	1b5b      	subs	r3, r3, r5
 8020e32:	d417      	bmi.n	8020e64 <_malloc_r+0x8c>
 8020e34:	2b0b      	cmp	r3, #11
 8020e36:	d903      	bls.n	8020e40 <_malloc_r+0x68>
 8020e38:	6023      	str	r3, [r4, #0]
 8020e3a:	441c      	add	r4, r3
 8020e3c:	6025      	str	r5, [r4, #0]
 8020e3e:	e004      	b.n	8020e4a <_malloc_r+0x72>
 8020e40:	6863      	ldr	r3, [r4, #4]
 8020e42:	42a2      	cmp	r2, r4
 8020e44:	bf0c      	ite	eq
 8020e46:	600b      	streq	r3, [r1, #0]
 8020e48:	6053      	strne	r3, [r2, #4]
 8020e4a:	4630      	mov	r0, r6
 8020e4c:	f003 fd84 	bl	8024958 <__malloc_unlock>
 8020e50:	f104 000b 	add.w	r0, r4, #11
 8020e54:	1d23      	adds	r3, r4, #4
 8020e56:	f020 0007 	bic.w	r0, r0, #7
 8020e5a:	1ac2      	subs	r2, r0, r3
 8020e5c:	d0cc      	beq.n	8020df8 <_malloc_r+0x20>
 8020e5e:	1a1b      	subs	r3, r3, r0
 8020e60:	50a3      	str	r3, [r4, r2]
 8020e62:	e7c9      	b.n	8020df8 <_malloc_r+0x20>
 8020e64:	4622      	mov	r2, r4
 8020e66:	6864      	ldr	r4, [r4, #4]
 8020e68:	e7cc      	b.n	8020e04 <_malloc_r+0x2c>
 8020e6a:	1cc4      	adds	r4, r0, #3
 8020e6c:	f024 0403 	bic.w	r4, r4, #3
 8020e70:	42a0      	cmp	r0, r4
 8020e72:	d0e3      	beq.n	8020e3c <_malloc_r+0x64>
 8020e74:	1a21      	subs	r1, r4, r0
 8020e76:	4630      	mov	r0, r6
 8020e78:	f001 f8de 	bl	8022038 <_sbrk_r>
 8020e7c:	3001      	adds	r0, #1
 8020e7e:	d1dd      	bne.n	8020e3c <_malloc_r+0x64>
 8020e80:	e7cf      	b.n	8020e22 <_malloc_r+0x4a>
 8020e82:	bf00      	nop
 8020e84:	2001363c 	.word	0x2001363c
 8020e88:	20013640 	.word	0x20013640

08020e8c <__sfputc_r>:
 8020e8c:	6893      	ldr	r3, [r2, #8]
 8020e8e:	3b01      	subs	r3, #1
 8020e90:	2b00      	cmp	r3, #0
 8020e92:	b410      	push	{r4}
 8020e94:	6093      	str	r3, [r2, #8]
 8020e96:	da08      	bge.n	8020eaa <__sfputc_r+0x1e>
 8020e98:	6994      	ldr	r4, [r2, #24]
 8020e9a:	42a3      	cmp	r3, r4
 8020e9c:	db01      	blt.n	8020ea2 <__sfputc_r+0x16>
 8020e9e:	290a      	cmp	r1, #10
 8020ea0:	d103      	bne.n	8020eaa <__sfputc_r+0x1e>
 8020ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020ea6:	f002 b921 	b.w	80230ec <__swbuf_r>
 8020eaa:	6813      	ldr	r3, [r2, #0]
 8020eac:	1c58      	adds	r0, r3, #1
 8020eae:	6010      	str	r0, [r2, #0]
 8020eb0:	7019      	strb	r1, [r3, #0]
 8020eb2:	4608      	mov	r0, r1
 8020eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020eb8:	4770      	bx	lr

08020eba <__sfputs_r>:
 8020eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ebc:	4606      	mov	r6, r0
 8020ebe:	460f      	mov	r7, r1
 8020ec0:	4614      	mov	r4, r2
 8020ec2:	18d5      	adds	r5, r2, r3
 8020ec4:	42ac      	cmp	r4, r5
 8020ec6:	d101      	bne.n	8020ecc <__sfputs_r+0x12>
 8020ec8:	2000      	movs	r0, #0
 8020eca:	e007      	b.n	8020edc <__sfputs_r+0x22>
 8020ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020ed0:	463a      	mov	r2, r7
 8020ed2:	4630      	mov	r0, r6
 8020ed4:	f7ff ffda 	bl	8020e8c <__sfputc_r>
 8020ed8:	1c43      	adds	r3, r0, #1
 8020eda:	d1f3      	bne.n	8020ec4 <__sfputs_r+0xa>
 8020edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020ee0 <_vfiprintf_r>:
 8020ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ee4:	460d      	mov	r5, r1
 8020ee6:	b09d      	sub	sp, #116	; 0x74
 8020ee8:	4614      	mov	r4, r2
 8020eea:	4698      	mov	r8, r3
 8020eec:	4606      	mov	r6, r0
 8020eee:	b118      	cbz	r0, 8020ef8 <_vfiprintf_r+0x18>
 8020ef0:	6983      	ldr	r3, [r0, #24]
 8020ef2:	b90b      	cbnz	r3, 8020ef8 <_vfiprintf_r+0x18>
 8020ef4:	f7ff fda4 	bl	8020a40 <__sinit>
 8020ef8:	4b89      	ldr	r3, [pc, #548]	; (8021120 <_vfiprintf_r+0x240>)
 8020efa:	429d      	cmp	r5, r3
 8020efc:	d11b      	bne.n	8020f36 <_vfiprintf_r+0x56>
 8020efe:	6875      	ldr	r5, [r6, #4]
 8020f00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020f02:	07d9      	lsls	r1, r3, #31
 8020f04:	d405      	bmi.n	8020f12 <_vfiprintf_r+0x32>
 8020f06:	89ab      	ldrh	r3, [r5, #12]
 8020f08:	059a      	lsls	r2, r3, #22
 8020f0a:	d402      	bmi.n	8020f12 <_vfiprintf_r+0x32>
 8020f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020f0e:	f7ff feb4 	bl	8020c7a <__retarget_lock_acquire_recursive>
 8020f12:	89ab      	ldrh	r3, [r5, #12]
 8020f14:	071b      	lsls	r3, r3, #28
 8020f16:	d501      	bpl.n	8020f1c <_vfiprintf_r+0x3c>
 8020f18:	692b      	ldr	r3, [r5, #16]
 8020f1a:	b9eb      	cbnz	r3, 8020f58 <_vfiprintf_r+0x78>
 8020f1c:	4629      	mov	r1, r5
 8020f1e:	4630      	mov	r0, r6
 8020f20:	f002 f948 	bl	80231b4 <__swsetup_r>
 8020f24:	b1c0      	cbz	r0, 8020f58 <_vfiprintf_r+0x78>
 8020f26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020f28:	07dc      	lsls	r4, r3, #31
 8020f2a:	d50e      	bpl.n	8020f4a <_vfiprintf_r+0x6a>
 8020f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020f30:	b01d      	add	sp, #116	; 0x74
 8020f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f36:	4b7b      	ldr	r3, [pc, #492]	; (8021124 <_vfiprintf_r+0x244>)
 8020f38:	429d      	cmp	r5, r3
 8020f3a:	d101      	bne.n	8020f40 <_vfiprintf_r+0x60>
 8020f3c:	68b5      	ldr	r5, [r6, #8]
 8020f3e:	e7df      	b.n	8020f00 <_vfiprintf_r+0x20>
 8020f40:	4b79      	ldr	r3, [pc, #484]	; (8021128 <_vfiprintf_r+0x248>)
 8020f42:	429d      	cmp	r5, r3
 8020f44:	bf08      	it	eq
 8020f46:	68f5      	ldreq	r5, [r6, #12]
 8020f48:	e7da      	b.n	8020f00 <_vfiprintf_r+0x20>
 8020f4a:	89ab      	ldrh	r3, [r5, #12]
 8020f4c:	0598      	lsls	r0, r3, #22
 8020f4e:	d4ed      	bmi.n	8020f2c <_vfiprintf_r+0x4c>
 8020f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020f52:	f7ff fe93 	bl	8020c7c <__retarget_lock_release_recursive>
 8020f56:	e7e9      	b.n	8020f2c <_vfiprintf_r+0x4c>
 8020f58:	2300      	movs	r3, #0
 8020f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8020f5c:	2320      	movs	r3, #32
 8020f5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020f62:	f8cd 800c 	str.w	r8, [sp, #12]
 8020f66:	2330      	movs	r3, #48	; 0x30
 8020f68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802112c <_vfiprintf_r+0x24c>
 8020f6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020f70:	f04f 0901 	mov.w	r9, #1
 8020f74:	4623      	mov	r3, r4
 8020f76:	469a      	mov	sl, r3
 8020f78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020f7c:	b10a      	cbz	r2, 8020f82 <_vfiprintf_r+0xa2>
 8020f7e:	2a25      	cmp	r2, #37	; 0x25
 8020f80:	d1f9      	bne.n	8020f76 <_vfiprintf_r+0x96>
 8020f82:	ebba 0b04 	subs.w	fp, sl, r4
 8020f86:	d00b      	beq.n	8020fa0 <_vfiprintf_r+0xc0>
 8020f88:	465b      	mov	r3, fp
 8020f8a:	4622      	mov	r2, r4
 8020f8c:	4629      	mov	r1, r5
 8020f8e:	4630      	mov	r0, r6
 8020f90:	f7ff ff93 	bl	8020eba <__sfputs_r>
 8020f94:	3001      	adds	r0, #1
 8020f96:	f000 80aa 	beq.w	80210ee <_vfiprintf_r+0x20e>
 8020f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020f9c:	445a      	add	r2, fp
 8020f9e:	9209      	str	r2, [sp, #36]	; 0x24
 8020fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8020fa4:	2b00      	cmp	r3, #0
 8020fa6:	f000 80a2 	beq.w	80210ee <_vfiprintf_r+0x20e>
 8020faa:	2300      	movs	r3, #0
 8020fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020fb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020fb4:	f10a 0a01 	add.w	sl, sl, #1
 8020fb8:	9304      	str	r3, [sp, #16]
 8020fba:	9307      	str	r3, [sp, #28]
 8020fbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020fc0:	931a      	str	r3, [sp, #104]	; 0x68
 8020fc2:	4654      	mov	r4, sl
 8020fc4:	2205      	movs	r2, #5
 8020fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020fca:	4858      	ldr	r0, [pc, #352]	; (802112c <_vfiprintf_r+0x24c>)
 8020fcc:	f7df f938 	bl	8000240 <memchr>
 8020fd0:	9a04      	ldr	r2, [sp, #16]
 8020fd2:	b9d8      	cbnz	r0, 802100c <_vfiprintf_r+0x12c>
 8020fd4:	06d1      	lsls	r1, r2, #27
 8020fd6:	bf44      	itt	mi
 8020fd8:	2320      	movmi	r3, #32
 8020fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020fde:	0713      	lsls	r3, r2, #28
 8020fe0:	bf44      	itt	mi
 8020fe2:	232b      	movmi	r3, #43	; 0x2b
 8020fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8020fec:	2b2a      	cmp	r3, #42	; 0x2a
 8020fee:	d015      	beq.n	802101c <_vfiprintf_r+0x13c>
 8020ff0:	9a07      	ldr	r2, [sp, #28]
 8020ff2:	4654      	mov	r4, sl
 8020ff4:	2000      	movs	r0, #0
 8020ff6:	f04f 0c0a 	mov.w	ip, #10
 8020ffa:	4621      	mov	r1, r4
 8020ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021000:	3b30      	subs	r3, #48	; 0x30
 8021002:	2b09      	cmp	r3, #9
 8021004:	d94e      	bls.n	80210a4 <_vfiprintf_r+0x1c4>
 8021006:	b1b0      	cbz	r0, 8021036 <_vfiprintf_r+0x156>
 8021008:	9207      	str	r2, [sp, #28]
 802100a:	e014      	b.n	8021036 <_vfiprintf_r+0x156>
 802100c:	eba0 0308 	sub.w	r3, r0, r8
 8021010:	fa09 f303 	lsl.w	r3, r9, r3
 8021014:	4313      	orrs	r3, r2
 8021016:	9304      	str	r3, [sp, #16]
 8021018:	46a2      	mov	sl, r4
 802101a:	e7d2      	b.n	8020fc2 <_vfiprintf_r+0xe2>
 802101c:	9b03      	ldr	r3, [sp, #12]
 802101e:	1d19      	adds	r1, r3, #4
 8021020:	681b      	ldr	r3, [r3, #0]
 8021022:	9103      	str	r1, [sp, #12]
 8021024:	2b00      	cmp	r3, #0
 8021026:	bfbb      	ittet	lt
 8021028:	425b      	neglt	r3, r3
 802102a:	f042 0202 	orrlt.w	r2, r2, #2
 802102e:	9307      	strge	r3, [sp, #28]
 8021030:	9307      	strlt	r3, [sp, #28]
 8021032:	bfb8      	it	lt
 8021034:	9204      	strlt	r2, [sp, #16]
 8021036:	7823      	ldrb	r3, [r4, #0]
 8021038:	2b2e      	cmp	r3, #46	; 0x2e
 802103a:	d10c      	bne.n	8021056 <_vfiprintf_r+0x176>
 802103c:	7863      	ldrb	r3, [r4, #1]
 802103e:	2b2a      	cmp	r3, #42	; 0x2a
 8021040:	d135      	bne.n	80210ae <_vfiprintf_r+0x1ce>
 8021042:	9b03      	ldr	r3, [sp, #12]
 8021044:	1d1a      	adds	r2, r3, #4
 8021046:	681b      	ldr	r3, [r3, #0]
 8021048:	9203      	str	r2, [sp, #12]
 802104a:	2b00      	cmp	r3, #0
 802104c:	bfb8      	it	lt
 802104e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8021052:	3402      	adds	r4, #2
 8021054:	9305      	str	r3, [sp, #20]
 8021056:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802113c <_vfiprintf_r+0x25c>
 802105a:	7821      	ldrb	r1, [r4, #0]
 802105c:	2203      	movs	r2, #3
 802105e:	4650      	mov	r0, sl
 8021060:	f7df f8ee 	bl	8000240 <memchr>
 8021064:	b140      	cbz	r0, 8021078 <_vfiprintf_r+0x198>
 8021066:	2340      	movs	r3, #64	; 0x40
 8021068:	eba0 000a 	sub.w	r0, r0, sl
 802106c:	fa03 f000 	lsl.w	r0, r3, r0
 8021070:	9b04      	ldr	r3, [sp, #16]
 8021072:	4303      	orrs	r3, r0
 8021074:	3401      	adds	r4, #1
 8021076:	9304      	str	r3, [sp, #16]
 8021078:	f814 1b01 	ldrb.w	r1, [r4], #1
 802107c:	482c      	ldr	r0, [pc, #176]	; (8021130 <_vfiprintf_r+0x250>)
 802107e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021082:	2206      	movs	r2, #6
 8021084:	f7df f8dc 	bl	8000240 <memchr>
 8021088:	2800      	cmp	r0, #0
 802108a:	d03f      	beq.n	802110c <_vfiprintf_r+0x22c>
 802108c:	4b29      	ldr	r3, [pc, #164]	; (8021134 <_vfiprintf_r+0x254>)
 802108e:	bb1b      	cbnz	r3, 80210d8 <_vfiprintf_r+0x1f8>
 8021090:	9b03      	ldr	r3, [sp, #12]
 8021092:	3307      	adds	r3, #7
 8021094:	f023 0307 	bic.w	r3, r3, #7
 8021098:	3308      	adds	r3, #8
 802109a:	9303      	str	r3, [sp, #12]
 802109c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802109e:	443b      	add	r3, r7
 80210a0:	9309      	str	r3, [sp, #36]	; 0x24
 80210a2:	e767      	b.n	8020f74 <_vfiprintf_r+0x94>
 80210a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80210a8:	460c      	mov	r4, r1
 80210aa:	2001      	movs	r0, #1
 80210ac:	e7a5      	b.n	8020ffa <_vfiprintf_r+0x11a>
 80210ae:	2300      	movs	r3, #0
 80210b0:	3401      	adds	r4, #1
 80210b2:	9305      	str	r3, [sp, #20]
 80210b4:	4619      	mov	r1, r3
 80210b6:	f04f 0c0a 	mov.w	ip, #10
 80210ba:	4620      	mov	r0, r4
 80210bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80210c0:	3a30      	subs	r2, #48	; 0x30
 80210c2:	2a09      	cmp	r2, #9
 80210c4:	d903      	bls.n	80210ce <_vfiprintf_r+0x1ee>
 80210c6:	2b00      	cmp	r3, #0
 80210c8:	d0c5      	beq.n	8021056 <_vfiprintf_r+0x176>
 80210ca:	9105      	str	r1, [sp, #20]
 80210cc:	e7c3      	b.n	8021056 <_vfiprintf_r+0x176>
 80210ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80210d2:	4604      	mov	r4, r0
 80210d4:	2301      	movs	r3, #1
 80210d6:	e7f0      	b.n	80210ba <_vfiprintf_r+0x1da>
 80210d8:	ab03      	add	r3, sp, #12
 80210da:	9300      	str	r3, [sp, #0]
 80210dc:	462a      	mov	r2, r5
 80210de:	4b16      	ldr	r3, [pc, #88]	; (8021138 <_vfiprintf_r+0x258>)
 80210e0:	a904      	add	r1, sp, #16
 80210e2:	4630      	mov	r0, r6
 80210e4:	f000 f8cc 	bl	8021280 <_printf_float>
 80210e8:	4607      	mov	r7, r0
 80210ea:	1c78      	adds	r0, r7, #1
 80210ec:	d1d6      	bne.n	802109c <_vfiprintf_r+0x1bc>
 80210ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80210f0:	07d9      	lsls	r1, r3, #31
 80210f2:	d405      	bmi.n	8021100 <_vfiprintf_r+0x220>
 80210f4:	89ab      	ldrh	r3, [r5, #12]
 80210f6:	059a      	lsls	r2, r3, #22
 80210f8:	d402      	bmi.n	8021100 <_vfiprintf_r+0x220>
 80210fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80210fc:	f7ff fdbe 	bl	8020c7c <__retarget_lock_release_recursive>
 8021100:	89ab      	ldrh	r3, [r5, #12]
 8021102:	065b      	lsls	r3, r3, #25
 8021104:	f53f af12 	bmi.w	8020f2c <_vfiprintf_r+0x4c>
 8021108:	9809      	ldr	r0, [sp, #36]	; 0x24
 802110a:	e711      	b.n	8020f30 <_vfiprintf_r+0x50>
 802110c:	ab03      	add	r3, sp, #12
 802110e:	9300      	str	r3, [sp, #0]
 8021110:	462a      	mov	r2, r5
 8021112:	4b09      	ldr	r3, [pc, #36]	; (8021138 <_vfiprintf_r+0x258>)
 8021114:	a904      	add	r1, sp, #16
 8021116:	4630      	mov	r0, r6
 8021118:	f000 fb56 	bl	80217c8 <_printf_i>
 802111c:	e7e4      	b.n	80210e8 <_vfiprintf_r+0x208>
 802111e:	bf00      	nop
 8021120:	080276fc 	.word	0x080276fc
 8021124:	0802771c 	.word	0x0802771c
 8021128:	080276dc 	.word	0x080276dc
 802112c:	08027740 	.word	0x08027740
 8021130:	0802774a 	.word	0x0802774a
 8021134:	08021281 	.word	0x08021281
 8021138:	08020ebb 	.word	0x08020ebb
 802113c:	08027746 	.word	0x08027746

08021140 <__cvt>:
 8021140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021144:	ec55 4b10 	vmov	r4, r5, d0
 8021148:	2d00      	cmp	r5, #0
 802114a:	460e      	mov	r6, r1
 802114c:	4619      	mov	r1, r3
 802114e:	462b      	mov	r3, r5
 8021150:	bfbb      	ittet	lt
 8021152:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8021156:	461d      	movlt	r5, r3
 8021158:	2300      	movge	r3, #0
 802115a:	232d      	movlt	r3, #45	; 0x2d
 802115c:	700b      	strb	r3, [r1, #0]
 802115e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021160:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8021164:	4691      	mov	r9, r2
 8021166:	f023 0820 	bic.w	r8, r3, #32
 802116a:	bfbc      	itt	lt
 802116c:	4622      	movlt	r2, r4
 802116e:	4614      	movlt	r4, r2
 8021170:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8021174:	d005      	beq.n	8021182 <__cvt+0x42>
 8021176:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 802117a:	d100      	bne.n	802117e <__cvt+0x3e>
 802117c:	3601      	adds	r6, #1
 802117e:	2102      	movs	r1, #2
 8021180:	e000      	b.n	8021184 <__cvt+0x44>
 8021182:	2103      	movs	r1, #3
 8021184:	ab03      	add	r3, sp, #12
 8021186:	9301      	str	r3, [sp, #4]
 8021188:	ab02      	add	r3, sp, #8
 802118a:	9300      	str	r3, [sp, #0]
 802118c:	ec45 4b10 	vmov	d0, r4, r5
 8021190:	4653      	mov	r3, sl
 8021192:	4632      	mov	r2, r6
 8021194:	f002 f920 	bl	80233d8 <_dtoa_r>
 8021198:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 802119c:	4607      	mov	r7, r0
 802119e:	d102      	bne.n	80211a6 <__cvt+0x66>
 80211a0:	f019 0f01 	tst.w	r9, #1
 80211a4:	d022      	beq.n	80211ec <__cvt+0xac>
 80211a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80211aa:	eb07 0906 	add.w	r9, r7, r6
 80211ae:	d110      	bne.n	80211d2 <__cvt+0x92>
 80211b0:	783b      	ldrb	r3, [r7, #0]
 80211b2:	2b30      	cmp	r3, #48	; 0x30
 80211b4:	d10a      	bne.n	80211cc <__cvt+0x8c>
 80211b6:	2200      	movs	r2, #0
 80211b8:	2300      	movs	r3, #0
 80211ba:	4620      	mov	r0, r4
 80211bc:	4629      	mov	r1, r5
 80211be:	f7df fcb3 	bl	8000b28 <__aeabi_dcmpeq>
 80211c2:	b918      	cbnz	r0, 80211cc <__cvt+0x8c>
 80211c4:	f1c6 0601 	rsb	r6, r6, #1
 80211c8:	f8ca 6000 	str.w	r6, [sl]
 80211cc:	f8da 3000 	ldr.w	r3, [sl]
 80211d0:	4499      	add	r9, r3
 80211d2:	2200      	movs	r2, #0
 80211d4:	2300      	movs	r3, #0
 80211d6:	4620      	mov	r0, r4
 80211d8:	4629      	mov	r1, r5
 80211da:	f7df fca5 	bl	8000b28 <__aeabi_dcmpeq>
 80211de:	b108      	cbz	r0, 80211e4 <__cvt+0xa4>
 80211e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80211e4:	2230      	movs	r2, #48	; 0x30
 80211e6:	9b03      	ldr	r3, [sp, #12]
 80211e8:	454b      	cmp	r3, r9
 80211ea:	d307      	bcc.n	80211fc <__cvt+0xbc>
 80211ec:	9b03      	ldr	r3, [sp, #12]
 80211ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80211f0:	1bdb      	subs	r3, r3, r7
 80211f2:	4638      	mov	r0, r7
 80211f4:	6013      	str	r3, [r2, #0]
 80211f6:	b004      	add	sp, #16
 80211f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80211fc:	1c59      	adds	r1, r3, #1
 80211fe:	9103      	str	r1, [sp, #12]
 8021200:	701a      	strb	r2, [r3, #0]
 8021202:	e7f0      	b.n	80211e6 <__cvt+0xa6>

08021204 <__exponent>:
 8021204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021206:	4603      	mov	r3, r0
 8021208:	2900      	cmp	r1, #0
 802120a:	bfb8      	it	lt
 802120c:	4249      	neglt	r1, r1
 802120e:	f803 2b02 	strb.w	r2, [r3], #2
 8021212:	bfb4      	ite	lt
 8021214:	222d      	movlt	r2, #45	; 0x2d
 8021216:	222b      	movge	r2, #43	; 0x2b
 8021218:	2909      	cmp	r1, #9
 802121a:	7042      	strb	r2, [r0, #1]
 802121c:	dd2a      	ble.n	8021274 <__exponent+0x70>
 802121e:	f10d 0407 	add.w	r4, sp, #7
 8021222:	46a4      	mov	ip, r4
 8021224:	270a      	movs	r7, #10
 8021226:	46a6      	mov	lr, r4
 8021228:	460a      	mov	r2, r1
 802122a:	fb91 f6f7 	sdiv	r6, r1, r7
 802122e:	fb07 1516 	mls	r5, r7, r6, r1
 8021232:	3530      	adds	r5, #48	; 0x30
 8021234:	2a63      	cmp	r2, #99	; 0x63
 8021236:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 802123a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802123e:	4631      	mov	r1, r6
 8021240:	dcf1      	bgt.n	8021226 <__exponent+0x22>
 8021242:	3130      	adds	r1, #48	; 0x30
 8021244:	f1ae 0502 	sub.w	r5, lr, #2
 8021248:	f804 1c01 	strb.w	r1, [r4, #-1]
 802124c:	1c44      	adds	r4, r0, #1
 802124e:	4629      	mov	r1, r5
 8021250:	4561      	cmp	r1, ip
 8021252:	d30a      	bcc.n	802126a <__exponent+0x66>
 8021254:	f10d 0209 	add.w	r2, sp, #9
 8021258:	eba2 020e 	sub.w	r2, r2, lr
 802125c:	4565      	cmp	r5, ip
 802125e:	bf88      	it	hi
 8021260:	2200      	movhi	r2, #0
 8021262:	4413      	add	r3, r2
 8021264:	1a18      	subs	r0, r3, r0
 8021266:	b003      	add	sp, #12
 8021268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802126a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802126e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8021272:	e7ed      	b.n	8021250 <__exponent+0x4c>
 8021274:	2330      	movs	r3, #48	; 0x30
 8021276:	3130      	adds	r1, #48	; 0x30
 8021278:	7083      	strb	r3, [r0, #2]
 802127a:	70c1      	strb	r1, [r0, #3]
 802127c:	1d03      	adds	r3, r0, #4
 802127e:	e7f1      	b.n	8021264 <__exponent+0x60>

08021280 <_printf_float>:
 8021280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021284:	ed2d 8b02 	vpush	{d8}
 8021288:	b08d      	sub	sp, #52	; 0x34
 802128a:	460c      	mov	r4, r1
 802128c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8021290:	4616      	mov	r6, r2
 8021292:	461f      	mov	r7, r3
 8021294:	4605      	mov	r5, r0
 8021296:	f003 facb 	bl	8024830 <_localeconv_r>
 802129a:	f8d0 a000 	ldr.w	sl, [r0]
 802129e:	4650      	mov	r0, sl
 80212a0:	f7de ffc0 	bl	8000224 <strlen>
 80212a4:	2300      	movs	r3, #0
 80212a6:	930a      	str	r3, [sp, #40]	; 0x28
 80212a8:	6823      	ldr	r3, [r4, #0]
 80212aa:	9305      	str	r3, [sp, #20]
 80212ac:	f8d8 3000 	ldr.w	r3, [r8]
 80212b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80212b4:	3307      	adds	r3, #7
 80212b6:	f023 0307 	bic.w	r3, r3, #7
 80212ba:	f103 0208 	add.w	r2, r3, #8
 80212be:	f8c8 2000 	str.w	r2, [r8]
 80212c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80212ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80212ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80212d2:	9307      	str	r3, [sp, #28]
 80212d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80212d8:	ee08 0a10 	vmov	s16, r0
 80212dc:	4b9f      	ldr	r3, [pc, #636]	; (802155c <_printf_float+0x2dc>)
 80212de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80212e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80212e6:	f7df fc51 	bl	8000b8c <__aeabi_dcmpun>
 80212ea:	bb88      	cbnz	r0, 8021350 <_printf_float+0xd0>
 80212ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80212f0:	4b9a      	ldr	r3, [pc, #616]	; (802155c <_printf_float+0x2dc>)
 80212f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80212f6:	f7df fc2b 	bl	8000b50 <__aeabi_dcmple>
 80212fa:	bb48      	cbnz	r0, 8021350 <_printf_float+0xd0>
 80212fc:	2200      	movs	r2, #0
 80212fe:	2300      	movs	r3, #0
 8021300:	4640      	mov	r0, r8
 8021302:	4649      	mov	r1, r9
 8021304:	f7df fc1a 	bl	8000b3c <__aeabi_dcmplt>
 8021308:	b110      	cbz	r0, 8021310 <_printf_float+0x90>
 802130a:	232d      	movs	r3, #45	; 0x2d
 802130c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021310:	4b93      	ldr	r3, [pc, #588]	; (8021560 <_printf_float+0x2e0>)
 8021312:	4894      	ldr	r0, [pc, #592]	; (8021564 <_printf_float+0x2e4>)
 8021314:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8021318:	bf94      	ite	ls
 802131a:	4698      	movls	r8, r3
 802131c:	4680      	movhi	r8, r0
 802131e:	2303      	movs	r3, #3
 8021320:	6123      	str	r3, [r4, #16]
 8021322:	9b05      	ldr	r3, [sp, #20]
 8021324:	f023 0204 	bic.w	r2, r3, #4
 8021328:	6022      	str	r2, [r4, #0]
 802132a:	f04f 0900 	mov.w	r9, #0
 802132e:	9700      	str	r7, [sp, #0]
 8021330:	4633      	mov	r3, r6
 8021332:	aa0b      	add	r2, sp, #44	; 0x2c
 8021334:	4621      	mov	r1, r4
 8021336:	4628      	mov	r0, r5
 8021338:	f000 f9d8 	bl	80216ec <_printf_common>
 802133c:	3001      	adds	r0, #1
 802133e:	f040 8090 	bne.w	8021462 <_printf_float+0x1e2>
 8021342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021346:	b00d      	add	sp, #52	; 0x34
 8021348:	ecbd 8b02 	vpop	{d8}
 802134c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021350:	4642      	mov	r2, r8
 8021352:	464b      	mov	r3, r9
 8021354:	4640      	mov	r0, r8
 8021356:	4649      	mov	r1, r9
 8021358:	f7df fc18 	bl	8000b8c <__aeabi_dcmpun>
 802135c:	b140      	cbz	r0, 8021370 <_printf_float+0xf0>
 802135e:	464b      	mov	r3, r9
 8021360:	2b00      	cmp	r3, #0
 8021362:	bfbc      	itt	lt
 8021364:	232d      	movlt	r3, #45	; 0x2d
 8021366:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802136a:	487f      	ldr	r0, [pc, #508]	; (8021568 <_printf_float+0x2e8>)
 802136c:	4b7f      	ldr	r3, [pc, #508]	; (802156c <_printf_float+0x2ec>)
 802136e:	e7d1      	b.n	8021314 <_printf_float+0x94>
 8021370:	6863      	ldr	r3, [r4, #4]
 8021372:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8021376:	9206      	str	r2, [sp, #24]
 8021378:	1c5a      	adds	r2, r3, #1
 802137a:	d13f      	bne.n	80213fc <_printf_float+0x17c>
 802137c:	2306      	movs	r3, #6
 802137e:	6063      	str	r3, [r4, #4]
 8021380:	9b05      	ldr	r3, [sp, #20]
 8021382:	6861      	ldr	r1, [r4, #4]
 8021384:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8021388:	2300      	movs	r3, #0
 802138a:	9303      	str	r3, [sp, #12]
 802138c:	ab0a      	add	r3, sp, #40	; 0x28
 802138e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8021392:	ab09      	add	r3, sp, #36	; 0x24
 8021394:	ec49 8b10 	vmov	d0, r8, r9
 8021398:	9300      	str	r3, [sp, #0]
 802139a:	6022      	str	r2, [r4, #0]
 802139c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80213a0:	4628      	mov	r0, r5
 80213a2:	f7ff fecd 	bl	8021140 <__cvt>
 80213a6:	9b06      	ldr	r3, [sp, #24]
 80213a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80213aa:	2b47      	cmp	r3, #71	; 0x47
 80213ac:	4680      	mov	r8, r0
 80213ae:	d108      	bne.n	80213c2 <_printf_float+0x142>
 80213b0:	1cc8      	adds	r0, r1, #3
 80213b2:	db02      	blt.n	80213ba <_printf_float+0x13a>
 80213b4:	6863      	ldr	r3, [r4, #4]
 80213b6:	4299      	cmp	r1, r3
 80213b8:	dd41      	ble.n	802143e <_printf_float+0x1be>
 80213ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80213be:	fa5f fb8b 	uxtb.w	fp, fp
 80213c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80213c6:	d820      	bhi.n	802140a <_printf_float+0x18a>
 80213c8:	3901      	subs	r1, #1
 80213ca:	465a      	mov	r2, fp
 80213cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80213d0:	9109      	str	r1, [sp, #36]	; 0x24
 80213d2:	f7ff ff17 	bl	8021204 <__exponent>
 80213d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80213d8:	1813      	adds	r3, r2, r0
 80213da:	2a01      	cmp	r2, #1
 80213dc:	4681      	mov	r9, r0
 80213de:	6123      	str	r3, [r4, #16]
 80213e0:	dc02      	bgt.n	80213e8 <_printf_float+0x168>
 80213e2:	6822      	ldr	r2, [r4, #0]
 80213e4:	07d2      	lsls	r2, r2, #31
 80213e6:	d501      	bpl.n	80213ec <_printf_float+0x16c>
 80213e8:	3301      	adds	r3, #1
 80213ea:	6123      	str	r3, [r4, #16]
 80213ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80213f0:	2b00      	cmp	r3, #0
 80213f2:	d09c      	beq.n	802132e <_printf_float+0xae>
 80213f4:	232d      	movs	r3, #45	; 0x2d
 80213f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80213fa:	e798      	b.n	802132e <_printf_float+0xae>
 80213fc:	9a06      	ldr	r2, [sp, #24]
 80213fe:	2a47      	cmp	r2, #71	; 0x47
 8021400:	d1be      	bne.n	8021380 <_printf_float+0x100>
 8021402:	2b00      	cmp	r3, #0
 8021404:	d1bc      	bne.n	8021380 <_printf_float+0x100>
 8021406:	2301      	movs	r3, #1
 8021408:	e7b9      	b.n	802137e <_printf_float+0xfe>
 802140a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 802140e:	d118      	bne.n	8021442 <_printf_float+0x1c2>
 8021410:	2900      	cmp	r1, #0
 8021412:	6863      	ldr	r3, [r4, #4]
 8021414:	dd0b      	ble.n	802142e <_printf_float+0x1ae>
 8021416:	6121      	str	r1, [r4, #16]
 8021418:	b913      	cbnz	r3, 8021420 <_printf_float+0x1a0>
 802141a:	6822      	ldr	r2, [r4, #0]
 802141c:	07d0      	lsls	r0, r2, #31
 802141e:	d502      	bpl.n	8021426 <_printf_float+0x1a6>
 8021420:	3301      	adds	r3, #1
 8021422:	440b      	add	r3, r1
 8021424:	6123      	str	r3, [r4, #16]
 8021426:	65a1      	str	r1, [r4, #88]	; 0x58
 8021428:	f04f 0900 	mov.w	r9, #0
 802142c:	e7de      	b.n	80213ec <_printf_float+0x16c>
 802142e:	b913      	cbnz	r3, 8021436 <_printf_float+0x1b6>
 8021430:	6822      	ldr	r2, [r4, #0]
 8021432:	07d2      	lsls	r2, r2, #31
 8021434:	d501      	bpl.n	802143a <_printf_float+0x1ba>
 8021436:	3302      	adds	r3, #2
 8021438:	e7f4      	b.n	8021424 <_printf_float+0x1a4>
 802143a:	2301      	movs	r3, #1
 802143c:	e7f2      	b.n	8021424 <_printf_float+0x1a4>
 802143e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8021442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021444:	4299      	cmp	r1, r3
 8021446:	db05      	blt.n	8021454 <_printf_float+0x1d4>
 8021448:	6823      	ldr	r3, [r4, #0]
 802144a:	6121      	str	r1, [r4, #16]
 802144c:	07d8      	lsls	r0, r3, #31
 802144e:	d5ea      	bpl.n	8021426 <_printf_float+0x1a6>
 8021450:	1c4b      	adds	r3, r1, #1
 8021452:	e7e7      	b.n	8021424 <_printf_float+0x1a4>
 8021454:	2900      	cmp	r1, #0
 8021456:	bfd4      	ite	le
 8021458:	f1c1 0202 	rsble	r2, r1, #2
 802145c:	2201      	movgt	r2, #1
 802145e:	4413      	add	r3, r2
 8021460:	e7e0      	b.n	8021424 <_printf_float+0x1a4>
 8021462:	6823      	ldr	r3, [r4, #0]
 8021464:	055a      	lsls	r2, r3, #21
 8021466:	d407      	bmi.n	8021478 <_printf_float+0x1f8>
 8021468:	6923      	ldr	r3, [r4, #16]
 802146a:	4642      	mov	r2, r8
 802146c:	4631      	mov	r1, r6
 802146e:	4628      	mov	r0, r5
 8021470:	47b8      	blx	r7
 8021472:	3001      	adds	r0, #1
 8021474:	d12c      	bne.n	80214d0 <_printf_float+0x250>
 8021476:	e764      	b.n	8021342 <_printf_float+0xc2>
 8021478:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802147c:	f240 80e0 	bls.w	8021640 <_printf_float+0x3c0>
 8021480:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8021484:	2200      	movs	r2, #0
 8021486:	2300      	movs	r3, #0
 8021488:	f7df fb4e 	bl	8000b28 <__aeabi_dcmpeq>
 802148c:	2800      	cmp	r0, #0
 802148e:	d034      	beq.n	80214fa <_printf_float+0x27a>
 8021490:	4a37      	ldr	r2, [pc, #220]	; (8021570 <_printf_float+0x2f0>)
 8021492:	2301      	movs	r3, #1
 8021494:	4631      	mov	r1, r6
 8021496:	4628      	mov	r0, r5
 8021498:	47b8      	blx	r7
 802149a:	3001      	adds	r0, #1
 802149c:	f43f af51 	beq.w	8021342 <_printf_float+0xc2>
 80214a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80214a4:	429a      	cmp	r2, r3
 80214a6:	db02      	blt.n	80214ae <_printf_float+0x22e>
 80214a8:	6823      	ldr	r3, [r4, #0]
 80214aa:	07d8      	lsls	r0, r3, #31
 80214ac:	d510      	bpl.n	80214d0 <_printf_float+0x250>
 80214ae:	ee18 3a10 	vmov	r3, s16
 80214b2:	4652      	mov	r2, sl
 80214b4:	4631      	mov	r1, r6
 80214b6:	4628      	mov	r0, r5
 80214b8:	47b8      	blx	r7
 80214ba:	3001      	adds	r0, #1
 80214bc:	f43f af41 	beq.w	8021342 <_printf_float+0xc2>
 80214c0:	f04f 0800 	mov.w	r8, #0
 80214c4:	f104 091a 	add.w	r9, r4, #26
 80214c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214ca:	3b01      	subs	r3, #1
 80214cc:	4543      	cmp	r3, r8
 80214ce:	dc09      	bgt.n	80214e4 <_printf_float+0x264>
 80214d0:	6823      	ldr	r3, [r4, #0]
 80214d2:	079b      	lsls	r3, r3, #30
 80214d4:	f100 8105 	bmi.w	80216e2 <_printf_float+0x462>
 80214d8:	68e0      	ldr	r0, [r4, #12]
 80214da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80214dc:	4298      	cmp	r0, r3
 80214de:	bfb8      	it	lt
 80214e0:	4618      	movlt	r0, r3
 80214e2:	e730      	b.n	8021346 <_printf_float+0xc6>
 80214e4:	2301      	movs	r3, #1
 80214e6:	464a      	mov	r2, r9
 80214e8:	4631      	mov	r1, r6
 80214ea:	4628      	mov	r0, r5
 80214ec:	47b8      	blx	r7
 80214ee:	3001      	adds	r0, #1
 80214f0:	f43f af27 	beq.w	8021342 <_printf_float+0xc2>
 80214f4:	f108 0801 	add.w	r8, r8, #1
 80214f8:	e7e6      	b.n	80214c8 <_printf_float+0x248>
 80214fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214fc:	2b00      	cmp	r3, #0
 80214fe:	dc39      	bgt.n	8021574 <_printf_float+0x2f4>
 8021500:	4a1b      	ldr	r2, [pc, #108]	; (8021570 <_printf_float+0x2f0>)
 8021502:	2301      	movs	r3, #1
 8021504:	4631      	mov	r1, r6
 8021506:	4628      	mov	r0, r5
 8021508:	47b8      	blx	r7
 802150a:	3001      	adds	r0, #1
 802150c:	f43f af19 	beq.w	8021342 <_printf_float+0xc2>
 8021510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8021514:	4313      	orrs	r3, r2
 8021516:	d102      	bne.n	802151e <_printf_float+0x29e>
 8021518:	6823      	ldr	r3, [r4, #0]
 802151a:	07d9      	lsls	r1, r3, #31
 802151c:	d5d8      	bpl.n	80214d0 <_printf_float+0x250>
 802151e:	ee18 3a10 	vmov	r3, s16
 8021522:	4652      	mov	r2, sl
 8021524:	4631      	mov	r1, r6
 8021526:	4628      	mov	r0, r5
 8021528:	47b8      	blx	r7
 802152a:	3001      	adds	r0, #1
 802152c:	f43f af09 	beq.w	8021342 <_printf_float+0xc2>
 8021530:	f04f 0900 	mov.w	r9, #0
 8021534:	f104 0a1a 	add.w	sl, r4, #26
 8021538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802153a:	425b      	negs	r3, r3
 802153c:	454b      	cmp	r3, r9
 802153e:	dc01      	bgt.n	8021544 <_printf_float+0x2c4>
 8021540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021542:	e792      	b.n	802146a <_printf_float+0x1ea>
 8021544:	2301      	movs	r3, #1
 8021546:	4652      	mov	r2, sl
 8021548:	4631      	mov	r1, r6
 802154a:	4628      	mov	r0, r5
 802154c:	47b8      	blx	r7
 802154e:	3001      	adds	r0, #1
 8021550:	f43f aef7 	beq.w	8021342 <_printf_float+0xc2>
 8021554:	f109 0901 	add.w	r9, r9, #1
 8021558:	e7ee      	b.n	8021538 <_printf_float+0x2b8>
 802155a:	bf00      	nop
 802155c:	7fefffff 	.word	0x7fefffff
 8021560:	08027751 	.word	0x08027751
 8021564:	08027755 	.word	0x08027755
 8021568:	0802775d 	.word	0x0802775d
 802156c:	08027759 	.word	0x08027759
 8021570:	08027761 	.word	0x08027761
 8021574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021578:	429a      	cmp	r2, r3
 802157a:	bfa8      	it	ge
 802157c:	461a      	movge	r2, r3
 802157e:	2a00      	cmp	r2, #0
 8021580:	4691      	mov	r9, r2
 8021582:	dc37      	bgt.n	80215f4 <_printf_float+0x374>
 8021584:	f04f 0b00 	mov.w	fp, #0
 8021588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802158c:	f104 021a 	add.w	r2, r4, #26
 8021590:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021592:	9305      	str	r3, [sp, #20]
 8021594:	eba3 0309 	sub.w	r3, r3, r9
 8021598:	455b      	cmp	r3, fp
 802159a:	dc33      	bgt.n	8021604 <_printf_float+0x384>
 802159c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80215a0:	429a      	cmp	r2, r3
 80215a2:	db3b      	blt.n	802161c <_printf_float+0x39c>
 80215a4:	6823      	ldr	r3, [r4, #0]
 80215a6:	07da      	lsls	r2, r3, #31
 80215a8:	d438      	bmi.n	802161c <_printf_float+0x39c>
 80215aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80215ac:	9a05      	ldr	r2, [sp, #20]
 80215ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80215b0:	1a9a      	subs	r2, r3, r2
 80215b2:	eba3 0901 	sub.w	r9, r3, r1
 80215b6:	4591      	cmp	r9, r2
 80215b8:	bfa8      	it	ge
 80215ba:	4691      	movge	r9, r2
 80215bc:	f1b9 0f00 	cmp.w	r9, #0
 80215c0:	dc35      	bgt.n	802162e <_printf_float+0x3ae>
 80215c2:	f04f 0800 	mov.w	r8, #0
 80215c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80215ca:	f104 0a1a 	add.w	sl, r4, #26
 80215ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80215d2:	1a9b      	subs	r3, r3, r2
 80215d4:	eba3 0309 	sub.w	r3, r3, r9
 80215d8:	4543      	cmp	r3, r8
 80215da:	f77f af79 	ble.w	80214d0 <_printf_float+0x250>
 80215de:	2301      	movs	r3, #1
 80215e0:	4652      	mov	r2, sl
 80215e2:	4631      	mov	r1, r6
 80215e4:	4628      	mov	r0, r5
 80215e6:	47b8      	blx	r7
 80215e8:	3001      	adds	r0, #1
 80215ea:	f43f aeaa 	beq.w	8021342 <_printf_float+0xc2>
 80215ee:	f108 0801 	add.w	r8, r8, #1
 80215f2:	e7ec      	b.n	80215ce <_printf_float+0x34e>
 80215f4:	4613      	mov	r3, r2
 80215f6:	4631      	mov	r1, r6
 80215f8:	4642      	mov	r2, r8
 80215fa:	4628      	mov	r0, r5
 80215fc:	47b8      	blx	r7
 80215fe:	3001      	adds	r0, #1
 8021600:	d1c0      	bne.n	8021584 <_printf_float+0x304>
 8021602:	e69e      	b.n	8021342 <_printf_float+0xc2>
 8021604:	2301      	movs	r3, #1
 8021606:	4631      	mov	r1, r6
 8021608:	4628      	mov	r0, r5
 802160a:	9205      	str	r2, [sp, #20]
 802160c:	47b8      	blx	r7
 802160e:	3001      	adds	r0, #1
 8021610:	f43f ae97 	beq.w	8021342 <_printf_float+0xc2>
 8021614:	9a05      	ldr	r2, [sp, #20]
 8021616:	f10b 0b01 	add.w	fp, fp, #1
 802161a:	e7b9      	b.n	8021590 <_printf_float+0x310>
 802161c:	ee18 3a10 	vmov	r3, s16
 8021620:	4652      	mov	r2, sl
 8021622:	4631      	mov	r1, r6
 8021624:	4628      	mov	r0, r5
 8021626:	47b8      	blx	r7
 8021628:	3001      	adds	r0, #1
 802162a:	d1be      	bne.n	80215aa <_printf_float+0x32a>
 802162c:	e689      	b.n	8021342 <_printf_float+0xc2>
 802162e:	9a05      	ldr	r2, [sp, #20]
 8021630:	464b      	mov	r3, r9
 8021632:	4442      	add	r2, r8
 8021634:	4631      	mov	r1, r6
 8021636:	4628      	mov	r0, r5
 8021638:	47b8      	blx	r7
 802163a:	3001      	adds	r0, #1
 802163c:	d1c1      	bne.n	80215c2 <_printf_float+0x342>
 802163e:	e680      	b.n	8021342 <_printf_float+0xc2>
 8021640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021642:	2a01      	cmp	r2, #1
 8021644:	dc01      	bgt.n	802164a <_printf_float+0x3ca>
 8021646:	07db      	lsls	r3, r3, #31
 8021648:	d538      	bpl.n	80216bc <_printf_float+0x43c>
 802164a:	2301      	movs	r3, #1
 802164c:	4642      	mov	r2, r8
 802164e:	4631      	mov	r1, r6
 8021650:	4628      	mov	r0, r5
 8021652:	47b8      	blx	r7
 8021654:	3001      	adds	r0, #1
 8021656:	f43f ae74 	beq.w	8021342 <_printf_float+0xc2>
 802165a:	ee18 3a10 	vmov	r3, s16
 802165e:	4652      	mov	r2, sl
 8021660:	4631      	mov	r1, r6
 8021662:	4628      	mov	r0, r5
 8021664:	47b8      	blx	r7
 8021666:	3001      	adds	r0, #1
 8021668:	f43f ae6b 	beq.w	8021342 <_printf_float+0xc2>
 802166c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8021670:	2200      	movs	r2, #0
 8021672:	2300      	movs	r3, #0
 8021674:	f7df fa58 	bl	8000b28 <__aeabi_dcmpeq>
 8021678:	b9d8      	cbnz	r0, 80216b2 <_printf_float+0x432>
 802167a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802167c:	f108 0201 	add.w	r2, r8, #1
 8021680:	3b01      	subs	r3, #1
 8021682:	4631      	mov	r1, r6
 8021684:	4628      	mov	r0, r5
 8021686:	47b8      	blx	r7
 8021688:	3001      	adds	r0, #1
 802168a:	d10e      	bne.n	80216aa <_printf_float+0x42a>
 802168c:	e659      	b.n	8021342 <_printf_float+0xc2>
 802168e:	2301      	movs	r3, #1
 8021690:	4652      	mov	r2, sl
 8021692:	4631      	mov	r1, r6
 8021694:	4628      	mov	r0, r5
 8021696:	47b8      	blx	r7
 8021698:	3001      	adds	r0, #1
 802169a:	f43f ae52 	beq.w	8021342 <_printf_float+0xc2>
 802169e:	f108 0801 	add.w	r8, r8, #1
 80216a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80216a4:	3b01      	subs	r3, #1
 80216a6:	4543      	cmp	r3, r8
 80216a8:	dcf1      	bgt.n	802168e <_printf_float+0x40e>
 80216aa:	464b      	mov	r3, r9
 80216ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80216b0:	e6dc      	b.n	802146c <_printf_float+0x1ec>
 80216b2:	f04f 0800 	mov.w	r8, #0
 80216b6:	f104 0a1a 	add.w	sl, r4, #26
 80216ba:	e7f2      	b.n	80216a2 <_printf_float+0x422>
 80216bc:	2301      	movs	r3, #1
 80216be:	4642      	mov	r2, r8
 80216c0:	e7df      	b.n	8021682 <_printf_float+0x402>
 80216c2:	2301      	movs	r3, #1
 80216c4:	464a      	mov	r2, r9
 80216c6:	4631      	mov	r1, r6
 80216c8:	4628      	mov	r0, r5
 80216ca:	47b8      	blx	r7
 80216cc:	3001      	adds	r0, #1
 80216ce:	f43f ae38 	beq.w	8021342 <_printf_float+0xc2>
 80216d2:	f108 0801 	add.w	r8, r8, #1
 80216d6:	68e3      	ldr	r3, [r4, #12]
 80216d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80216da:	1a5b      	subs	r3, r3, r1
 80216dc:	4543      	cmp	r3, r8
 80216de:	dcf0      	bgt.n	80216c2 <_printf_float+0x442>
 80216e0:	e6fa      	b.n	80214d8 <_printf_float+0x258>
 80216e2:	f04f 0800 	mov.w	r8, #0
 80216e6:	f104 0919 	add.w	r9, r4, #25
 80216ea:	e7f4      	b.n	80216d6 <_printf_float+0x456>

080216ec <_printf_common>:
 80216ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80216f0:	4616      	mov	r6, r2
 80216f2:	4699      	mov	r9, r3
 80216f4:	688a      	ldr	r2, [r1, #8]
 80216f6:	690b      	ldr	r3, [r1, #16]
 80216f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80216fc:	4293      	cmp	r3, r2
 80216fe:	bfb8      	it	lt
 8021700:	4613      	movlt	r3, r2
 8021702:	6033      	str	r3, [r6, #0]
 8021704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021708:	4607      	mov	r7, r0
 802170a:	460c      	mov	r4, r1
 802170c:	b10a      	cbz	r2, 8021712 <_printf_common+0x26>
 802170e:	3301      	adds	r3, #1
 8021710:	6033      	str	r3, [r6, #0]
 8021712:	6823      	ldr	r3, [r4, #0]
 8021714:	0699      	lsls	r1, r3, #26
 8021716:	bf42      	ittt	mi
 8021718:	6833      	ldrmi	r3, [r6, #0]
 802171a:	3302      	addmi	r3, #2
 802171c:	6033      	strmi	r3, [r6, #0]
 802171e:	6825      	ldr	r5, [r4, #0]
 8021720:	f015 0506 	ands.w	r5, r5, #6
 8021724:	d106      	bne.n	8021734 <_printf_common+0x48>
 8021726:	f104 0a19 	add.w	sl, r4, #25
 802172a:	68e3      	ldr	r3, [r4, #12]
 802172c:	6832      	ldr	r2, [r6, #0]
 802172e:	1a9b      	subs	r3, r3, r2
 8021730:	42ab      	cmp	r3, r5
 8021732:	dc26      	bgt.n	8021782 <_printf_common+0x96>
 8021734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021738:	1e13      	subs	r3, r2, #0
 802173a:	6822      	ldr	r2, [r4, #0]
 802173c:	bf18      	it	ne
 802173e:	2301      	movne	r3, #1
 8021740:	0692      	lsls	r2, r2, #26
 8021742:	d42b      	bmi.n	802179c <_printf_common+0xb0>
 8021744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021748:	4649      	mov	r1, r9
 802174a:	4638      	mov	r0, r7
 802174c:	47c0      	blx	r8
 802174e:	3001      	adds	r0, #1
 8021750:	d01e      	beq.n	8021790 <_printf_common+0xa4>
 8021752:	6823      	ldr	r3, [r4, #0]
 8021754:	68e5      	ldr	r5, [r4, #12]
 8021756:	6832      	ldr	r2, [r6, #0]
 8021758:	f003 0306 	and.w	r3, r3, #6
 802175c:	2b04      	cmp	r3, #4
 802175e:	bf08      	it	eq
 8021760:	1aad      	subeq	r5, r5, r2
 8021762:	68a3      	ldr	r3, [r4, #8]
 8021764:	6922      	ldr	r2, [r4, #16]
 8021766:	bf0c      	ite	eq
 8021768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802176c:	2500      	movne	r5, #0
 802176e:	4293      	cmp	r3, r2
 8021770:	bfc4      	itt	gt
 8021772:	1a9b      	subgt	r3, r3, r2
 8021774:	18ed      	addgt	r5, r5, r3
 8021776:	2600      	movs	r6, #0
 8021778:	341a      	adds	r4, #26
 802177a:	42b5      	cmp	r5, r6
 802177c:	d11a      	bne.n	80217b4 <_printf_common+0xc8>
 802177e:	2000      	movs	r0, #0
 8021780:	e008      	b.n	8021794 <_printf_common+0xa8>
 8021782:	2301      	movs	r3, #1
 8021784:	4652      	mov	r2, sl
 8021786:	4649      	mov	r1, r9
 8021788:	4638      	mov	r0, r7
 802178a:	47c0      	blx	r8
 802178c:	3001      	adds	r0, #1
 802178e:	d103      	bne.n	8021798 <_printf_common+0xac>
 8021790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021798:	3501      	adds	r5, #1
 802179a:	e7c6      	b.n	802172a <_printf_common+0x3e>
 802179c:	18e1      	adds	r1, r4, r3
 802179e:	1c5a      	adds	r2, r3, #1
 80217a0:	2030      	movs	r0, #48	; 0x30
 80217a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80217a6:	4422      	add	r2, r4
 80217a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80217ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80217b0:	3302      	adds	r3, #2
 80217b2:	e7c7      	b.n	8021744 <_printf_common+0x58>
 80217b4:	2301      	movs	r3, #1
 80217b6:	4622      	mov	r2, r4
 80217b8:	4649      	mov	r1, r9
 80217ba:	4638      	mov	r0, r7
 80217bc:	47c0      	blx	r8
 80217be:	3001      	adds	r0, #1
 80217c0:	d0e6      	beq.n	8021790 <_printf_common+0xa4>
 80217c2:	3601      	adds	r6, #1
 80217c4:	e7d9      	b.n	802177a <_printf_common+0x8e>
	...

080217c8 <_printf_i>:
 80217c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80217cc:	7e0f      	ldrb	r7, [r1, #24]
 80217ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80217d0:	2f78      	cmp	r7, #120	; 0x78
 80217d2:	4691      	mov	r9, r2
 80217d4:	4680      	mov	r8, r0
 80217d6:	460c      	mov	r4, r1
 80217d8:	469a      	mov	sl, r3
 80217da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80217de:	d807      	bhi.n	80217f0 <_printf_i+0x28>
 80217e0:	2f62      	cmp	r7, #98	; 0x62
 80217e2:	d80a      	bhi.n	80217fa <_printf_i+0x32>
 80217e4:	2f00      	cmp	r7, #0
 80217e6:	f000 80d8 	beq.w	802199a <_printf_i+0x1d2>
 80217ea:	2f58      	cmp	r7, #88	; 0x58
 80217ec:	f000 80a3 	beq.w	8021936 <_printf_i+0x16e>
 80217f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80217f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80217f8:	e03a      	b.n	8021870 <_printf_i+0xa8>
 80217fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80217fe:	2b15      	cmp	r3, #21
 8021800:	d8f6      	bhi.n	80217f0 <_printf_i+0x28>
 8021802:	a101      	add	r1, pc, #4	; (adr r1, 8021808 <_printf_i+0x40>)
 8021804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021808:	08021861 	.word	0x08021861
 802180c:	08021875 	.word	0x08021875
 8021810:	080217f1 	.word	0x080217f1
 8021814:	080217f1 	.word	0x080217f1
 8021818:	080217f1 	.word	0x080217f1
 802181c:	080217f1 	.word	0x080217f1
 8021820:	08021875 	.word	0x08021875
 8021824:	080217f1 	.word	0x080217f1
 8021828:	080217f1 	.word	0x080217f1
 802182c:	080217f1 	.word	0x080217f1
 8021830:	080217f1 	.word	0x080217f1
 8021834:	08021981 	.word	0x08021981
 8021838:	080218a5 	.word	0x080218a5
 802183c:	08021963 	.word	0x08021963
 8021840:	080217f1 	.word	0x080217f1
 8021844:	080217f1 	.word	0x080217f1
 8021848:	080219a3 	.word	0x080219a3
 802184c:	080217f1 	.word	0x080217f1
 8021850:	080218a5 	.word	0x080218a5
 8021854:	080217f1 	.word	0x080217f1
 8021858:	080217f1 	.word	0x080217f1
 802185c:	0802196b 	.word	0x0802196b
 8021860:	682b      	ldr	r3, [r5, #0]
 8021862:	1d1a      	adds	r2, r3, #4
 8021864:	681b      	ldr	r3, [r3, #0]
 8021866:	602a      	str	r2, [r5, #0]
 8021868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802186c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021870:	2301      	movs	r3, #1
 8021872:	e0a3      	b.n	80219bc <_printf_i+0x1f4>
 8021874:	6820      	ldr	r0, [r4, #0]
 8021876:	6829      	ldr	r1, [r5, #0]
 8021878:	0606      	lsls	r6, r0, #24
 802187a:	f101 0304 	add.w	r3, r1, #4
 802187e:	d50a      	bpl.n	8021896 <_printf_i+0xce>
 8021880:	680e      	ldr	r6, [r1, #0]
 8021882:	602b      	str	r3, [r5, #0]
 8021884:	2e00      	cmp	r6, #0
 8021886:	da03      	bge.n	8021890 <_printf_i+0xc8>
 8021888:	232d      	movs	r3, #45	; 0x2d
 802188a:	4276      	negs	r6, r6
 802188c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021890:	485e      	ldr	r0, [pc, #376]	; (8021a0c <_printf_i+0x244>)
 8021892:	230a      	movs	r3, #10
 8021894:	e019      	b.n	80218ca <_printf_i+0x102>
 8021896:	680e      	ldr	r6, [r1, #0]
 8021898:	602b      	str	r3, [r5, #0]
 802189a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802189e:	bf18      	it	ne
 80218a0:	b236      	sxthne	r6, r6
 80218a2:	e7ef      	b.n	8021884 <_printf_i+0xbc>
 80218a4:	682b      	ldr	r3, [r5, #0]
 80218a6:	6820      	ldr	r0, [r4, #0]
 80218a8:	1d19      	adds	r1, r3, #4
 80218aa:	6029      	str	r1, [r5, #0]
 80218ac:	0601      	lsls	r1, r0, #24
 80218ae:	d501      	bpl.n	80218b4 <_printf_i+0xec>
 80218b0:	681e      	ldr	r6, [r3, #0]
 80218b2:	e002      	b.n	80218ba <_printf_i+0xf2>
 80218b4:	0646      	lsls	r6, r0, #25
 80218b6:	d5fb      	bpl.n	80218b0 <_printf_i+0xe8>
 80218b8:	881e      	ldrh	r6, [r3, #0]
 80218ba:	4854      	ldr	r0, [pc, #336]	; (8021a0c <_printf_i+0x244>)
 80218bc:	2f6f      	cmp	r7, #111	; 0x6f
 80218be:	bf0c      	ite	eq
 80218c0:	2308      	moveq	r3, #8
 80218c2:	230a      	movne	r3, #10
 80218c4:	2100      	movs	r1, #0
 80218c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80218ca:	6865      	ldr	r5, [r4, #4]
 80218cc:	60a5      	str	r5, [r4, #8]
 80218ce:	2d00      	cmp	r5, #0
 80218d0:	bfa2      	ittt	ge
 80218d2:	6821      	ldrge	r1, [r4, #0]
 80218d4:	f021 0104 	bicge.w	r1, r1, #4
 80218d8:	6021      	strge	r1, [r4, #0]
 80218da:	b90e      	cbnz	r6, 80218e0 <_printf_i+0x118>
 80218dc:	2d00      	cmp	r5, #0
 80218de:	d04d      	beq.n	802197c <_printf_i+0x1b4>
 80218e0:	4615      	mov	r5, r2
 80218e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80218e6:	fb03 6711 	mls	r7, r3, r1, r6
 80218ea:	5dc7      	ldrb	r7, [r0, r7]
 80218ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80218f0:	4637      	mov	r7, r6
 80218f2:	42bb      	cmp	r3, r7
 80218f4:	460e      	mov	r6, r1
 80218f6:	d9f4      	bls.n	80218e2 <_printf_i+0x11a>
 80218f8:	2b08      	cmp	r3, #8
 80218fa:	d10b      	bne.n	8021914 <_printf_i+0x14c>
 80218fc:	6823      	ldr	r3, [r4, #0]
 80218fe:	07de      	lsls	r6, r3, #31
 8021900:	d508      	bpl.n	8021914 <_printf_i+0x14c>
 8021902:	6923      	ldr	r3, [r4, #16]
 8021904:	6861      	ldr	r1, [r4, #4]
 8021906:	4299      	cmp	r1, r3
 8021908:	bfde      	ittt	le
 802190a:	2330      	movle	r3, #48	; 0x30
 802190c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8021910:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8021914:	1b52      	subs	r2, r2, r5
 8021916:	6122      	str	r2, [r4, #16]
 8021918:	f8cd a000 	str.w	sl, [sp]
 802191c:	464b      	mov	r3, r9
 802191e:	aa03      	add	r2, sp, #12
 8021920:	4621      	mov	r1, r4
 8021922:	4640      	mov	r0, r8
 8021924:	f7ff fee2 	bl	80216ec <_printf_common>
 8021928:	3001      	adds	r0, #1
 802192a:	d14c      	bne.n	80219c6 <_printf_i+0x1fe>
 802192c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021930:	b004      	add	sp, #16
 8021932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021936:	4835      	ldr	r0, [pc, #212]	; (8021a0c <_printf_i+0x244>)
 8021938:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802193c:	6829      	ldr	r1, [r5, #0]
 802193e:	6823      	ldr	r3, [r4, #0]
 8021940:	f851 6b04 	ldr.w	r6, [r1], #4
 8021944:	6029      	str	r1, [r5, #0]
 8021946:	061d      	lsls	r5, r3, #24
 8021948:	d514      	bpl.n	8021974 <_printf_i+0x1ac>
 802194a:	07df      	lsls	r7, r3, #31
 802194c:	bf44      	itt	mi
 802194e:	f043 0320 	orrmi.w	r3, r3, #32
 8021952:	6023      	strmi	r3, [r4, #0]
 8021954:	b91e      	cbnz	r6, 802195e <_printf_i+0x196>
 8021956:	6823      	ldr	r3, [r4, #0]
 8021958:	f023 0320 	bic.w	r3, r3, #32
 802195c:	6023      	str	r3, [r4, #0]
 802195e:	2310      	movs	r3, #16
 8021960:	e7b0      	b.n	80218c4 <_printf_i+0xfc>
 8021962:	6823      	ldr	r3, [r4, #0]
 8021964:	f043 0320 	orr.w	r3, r3, #32
 8021968:	6023      	str	r3, [r4, #0]
 802196a:	2378      	movs	r3, #120	; 0x78
 802196c:	4828      	ldr	r0, [pc, #160]	; (8021a10 <_printf_i+0x248>)
 802196e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8021972:	e7e3      	b.n	802193c <_printf_i+0x174>
 8021974:	0659      	lsls	r1, r3, #25
 8021976:	bf48      	it	mi
 8021978:	b2b6      	uxthmi	r6, r6
 802197a:	e7e6      	b.n	802194a <_printf_i+0x182>
 802197c:	4615      	mov	r5, r2
 802197e:	e7bb      	b.n	80218f8 <_printf_i+0x130>
 8021980:	682b      	ldr	r3, [r5, #0]
 8021982:	6826      	ldr	r6, [r4, #0]
 8021984:	6961      	ldr	r1, [r4, #20]
 8021986:	1d18      	adds	r0, r3, #4
 8021988:	6028      	str	r0, [r5, #0]
 802198a:	0635      	lsls	r5, r6, #24
 802198c:	681b      	ldr	r3, [r3, #0]
 802198e:	d501      	bpl.n	8021994 <_printf_i+0x1cc>
 8021990:	6019      	str	r1, [r3, #0]
 8021992:	e002      	b.n	802199a <_printf_i+0x1d2>
 8021994:	0670      	lsls	r0, r6, #25
 8021996:	d5fb      	bpl.n	8021990 <_printf_i+0x1c8>
 8021998:	8019      	strh	r1, [r3, #0]
 802199a:	2300      	movs	r3, #0
 802199c:	6123      	str	r3, [r4, #16]
 802199e:	4615      	mov	r5, r2
 80219a0:	e7ba      	b.n	8021918 <_printf_i+0x150>
 80219a2:	682b      	ldr	r3, [r5, #0]
 80219a4:	1d1a      	adds	r2, r3, #4
 80219a6:	602a      	str	r2, [r5, #0]
 80219a8:	681d      	ldr	r5, [r3, #0]
 80219aa:	6862      	ldr	r2, [r4, #4]
 80219ac:	2100      	movs	r1, #0
 80219ae:	4628      	mov	r0, r5
 80219b0:	f7de fc46 	bl	8000240 <memchr>
 80219b4:	b108      	cbz	r0, 80219ba <_printf_i+0x1f2>
 80219b6:	1b40      	subs	r0, r0, r5
 80219b8:	6060      	str	r0, [r4, #4]
 80219ba:	6863      	ldr	r3, [r4, #4]
 80219bc:	6123      	str	r3, [r4, #16]
 80219be:	2300      	movs	r3, #0
 80219c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80219c4:	e7a8      	b.n	8021918 <_printf_i+0x150>
 80219c6:	6923      	ldr	r3, [r4, #16]
 80219c8:	462a      	mov	r2, r5
 80219ca:	4649      	mov	r1, r9
 80219cc:	4640      	mov	r0, r8
 80219ce:	47d0      	blx	sl
 80219d0:	3001      	adds	r0, #1
 80219d2:	d0ab      	beq.n	802192c <_printf_i+0x164>
 80219d4:	6823      	ldr	r3, [r4, #0]
 80219d6:	079b      	lsls	r3, r3, #30
 80219d8:	d413      	bmi.n	8021a02 <_printf_i+0x23a>
 80219da:	68e0      	ldr	r0, [r4, #12]
 80219dc:	9b03      	ldr	r3, [sp, #12]
 80219de:	4298      	cmp	r0, r3
 80219e0:	bfb8      	it	lt
 80219e2:	4618      	movlt	r0, r3
 80219e4:	e7a4      	b.n	8021930 <_printf_i+0x168>
 80219e6:	2301      	movs	r3, #1
 80219e8:	4632      	mov	r2, r6
 80219ea:	4649      	mov	r1, r9
 80219ec:	4640      	mov	r0, r8
 80219ee:	47d0      	blx	sl
 80219f0:	3001      	adds	r0, #1
 80219f2:	d09b      	beq.n	802192c <_printf_i+0x164>
 80219f4:	3501      	adds	r5, #1
 80219f6:	68e3      	ldr	r3, [r4, #12]
 80219f8:	9903      	ldr	r1, [sp, #12]
 80219fa:	1a5b      	subs	r3, r3, r1
 80219fc:	42ab      	cmp	r3, r5
 80219fe:	dcf2      	bgt.n	80219e6 <_printf_i+0x21e>
 8021a00:	e7eb      	b.n	80219da <_printf_i+0x212>
 8021a02:	2500      	movs	r5, #0
 8021a04:	f104 0619 	add.w	r6, r4, #25
 8021a08:	e7f5      	b.n	80219f6 <_printf_i+0x22e>
 8021a0a:	bf00      	nop
 8021a0c:	08027763 	.word	0x08027763
 8021a10:	08027774 	.word	0x08027774

08021a14 <_scanf_float>:
 8021a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a18:	b087      	sub	sp, #28
 8021a1a:	4617      	mov	r7, r2
 8021a1c:	9303      	str	r3, [sp, #12]
 8021a1e:	688b      	ldr	r3, [r1, #8]
 8021a20:	1e5a      	subs	r2, r3, #1
 8021a22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8021a26:	bf83      	ittte	hi
 8021a28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8021a2c:	195b      	addhi	r3, r3, r5
 8021a2e:	9302      	strhi	r3, [sp, #8]
 8021a30:	2300      	movls	r3, #0
 8021a32:	bf86      	itte	hi
 8021a34:	f240 135d 	movwhi	r3, #349	; 0x15d
 8021a38:	608b      	strhi	r3, [r1, #8]
 8021a3a:	9302      	strls	r3, [sp, #8]
 8021a3c:	680b      	ldr	r3, [r1, #0]
 8021a3e:	468b      	mov	fp, r1
 8021a40:	2500      	movs	r5, #0
 8021a42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8021a46:	f84b 3b1c 	str.w	r3, [fp], #28
 8021a4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8021a4e:	4680      	mov	r8, r0
 8021a50:	460c      	mov	r4, r1
 8021a52:	465e      	mov	r6, fp
 8021a54:	46aa      	mov	sl, r5
 8021a56:	46a9      	mov	r9, r5
 8021a58:	9501      	str	r5, [sp, #4]
 8021a5a:	68a2      	ldr	r2, [r4, #8]
 8021a5c:	b152      	cbz	r2, 8021a74 <_scanf_float+0x60>
 8021a5e:	683b      	ldr	r3, [r7, #0]
 8021a60:	781b      	ldrb	r3, [r3, #0]
 8021a62:	2b4e      	cmp	r3, #78	; 0x4e
 8021a64:	d864      	bhi.n	8021b30 <_scanf_float+0x11c>
 8021a66:	2b40      	cmp	r3, #64	; 0x40
 8021a68:	d83c      	bhi.n	8021ae4 <_scanf_float+0xd0>
 8021a6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8021a6e:	b2c8      	uxtb	r0, r1
 8021a70:	280e      	cmp	r0, #14
 8021a72:	d93a      	bls.n	8021aea <_scanf_float+0xd6>
 8021a74:	f1b9 0f00 	cmp.w	r9, #0
 8021a78:	d003      	beq.n	8021a82 <_scanf_float+0x6e>
 8021a7a:	6823      	ldr	r3, [r4, #0]
 8021a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021a80:	6023      	str	r3, [r4, #0]
 8021a82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8021a86:	f1ba 0f01 	cmp.w	sl, #1
 8021a8a:	f200 8113 	bhi.w	8021cb4 <_scanf_float+0x2a0>
 8021a8e:	455e      	cmp	r6, fp
 8021a90:	f200 8105 	bhi.w	8021c9e <_scanf_float+0x28a>
 8021a94:	2501      	movs	r5, #1
 8021a96:	4628      	mov	r0, r5
 8021a98:	b007      	add	sp, #28
 8021a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8021aa2:	2a0d      	cmp	r2, #13
 8021aa4:	d8e6      	bhi.n	8021a74 <_scanf_float+0x60>
 8021aa6:	a101      	add	r1, pc, #4	; (adr r1, 8021aac <_scanf_float+0x98>)
 8021aa8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8021aac:	08021beb 	.word	0x08021beb
 8021ab0:	08021a75 	.word	0x08021a75
 8021ab4:	08021a75 	.word	0x08021a75
 8021ab8:	08021a75 	.word	0x08021a75
 8021abc:	08021c4b 	.word	0x08021c4b
 8021ac0:	08021c23 	.word	0x08021c23
 8021ac4:	08021a75 	.word	0x08021a75
 8021ac8:	08021a75 	.word	0x08021a75
 8021acc:	08021bf9 	.word	0x08021bf9
 8021ad0:	08021a75 	.word	0x08021a75
 8021ad4:	08021a75 	.word	0x08021a75
 8021ad8:	08021a75 	.word	0x08021a75
 8021adc:	08021a75 	.word	0x08021a75
 8021ae0:	08021bb1 	.word	0x08021bb1
 8021ae4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8021ae8:	e7db      	b.n	8021aa2 <_scanf_float+0x8e>
 8021aea:	290e      	cmp	r1, #14
 8021aec:	d8c2      	bhi.n	8021a74 <_scanf_float+0x60>
 8021aee:	a001      	add	r0, pc, #4	; (adr r0, 8021af4 <_scanf_float+0xe0>)
 8021af0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8021af4:	08021ba3 	.word	0x08021ba3
 8021af8:	08021a75 	.word	0x08021a75
 8021afc:	08021ba3 	.word	0x08021ba3
 8021b00:	08021c37 	.word	0x08021c37
 8021b04:	08021a75 	.word	0x08021a75
 8021b08:	08021b51 	.word	0x08021b51
 8021b0c:	08021b8d 	.word	0x08021b8d
 8021b10:	08021b8d 	.word	0x08021b8d
 8021b14:	08021b8d 	.word	0x08021b8d
 8021b18:	08021b8d 	.word	0x08021b8d
 8021b1c:	08021b8d 	.word	0x08021b8d
 8021b20:	08021b8d 	.word	0x08021b8d
 8021b24:	08021b8d 	.word	0x08021b8d
 8021b28:	08021b8d 	.word	0x08021b8d
 8021b2c:	08021b8d 	.word	0x08021b8d
 8021b30:	2b6e      	cmp	r3, #110	; 0x6e
 8021b32:	d809      	bhi.n	8021b48 <_scanf_float+0x134>
 8021b34:	2b60      	cmp	r3, #96	; 0x60
 8021b36:	d8b2      	bhi.n	8021a9e <_scanf_float+0x8a>
 8021b38:	2b54      	cmp	r3, #84	; 0x54
 8021b3a:	d077      	beq.n	8021c2c <_scanf_float+0x218>
 8021b3c:	2b59      	cmp	r3, #89	; 0x59
 8021b3e:	d199      	bne.n	8021a74 <_scanf_float+0x60>
 8021b40:	2d07      	cmp	r5, #7
 8021b42:	d197      	bne.n	8021a74 <_scanf_float+0x60>
 8021b44:	2508      	movs	r5, #8
 8021b46:	e029      	b.n	8021b9c <_scanf_float+0x188>
 8021b48:	2b74      	cmp	r3, #116	; 0x74
 8021b4a:	d06f      	beq.n	8021c2c <_scanf_float+0x218>
 8021b4c:	2b79      	cmp	r3, #121	; 0x79
 8021b4e:	e7f6      	b.n	8021b3e <_scanf_float+0x12a>
 8021b50:	6821      	ldr	r1, [r4, #0]
 8021b52:	05c8      	lsls	r0, r1, #23
 8021b54:	d51a      	bpl.n	8021b8c <_scanf_float+0x178>
 8021b56:	9b02      	ldr	r3, [sp, #8]
 8021b58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8021b5c:	6021      	str	r1, [r4, #0]
 8021b5e:	f109 0901 	add.w	r9, r9, #1
 8021b62:	b11b      	cbz	r3, 8021b6c <_scanf_float+0x158>
 8021b64:	3b01      	subs	r3, #1
 8021b66:	3201      	adds	r2, #1
 8021b68:	9302      	str	r3, [sp, #8]
 8021b6a:	60a2      	str	r2, [r4, #8]
 8021b6c:	68a3      	ldr	r3, [r4, #8]
 8021b6e:	3b01      	subs	r3, #1
 8021b70:	60a3      	str	r3, [r4, #8]
 8021b72:	6923      	ldr	r3, [r4, #16]
 8021b74:	3301      	adds	r3, #1
 8021b76:	6123      	str	r3, [r4, #16]
 8021b78:	687b      	ldr	r3, [r7, #4]
 8021b7a:	3b01      	subs	r3, #1
 8021b7c:	2b00      	cmp	r3, #0
 8021b7e:	607b      	str	r3, [r7, #4]
 8021b80:	f340 8084 	ble.w	8021c8c <_scanf_float+0x278>
 8021b84:	683b      	ldr	r3, [r7, #0]
 8021b86:	3301      	adds	r3, #1
 8021b88:	603b      	str	r3, [r7, #0]
 8021b8a:	e766      	b.n	8021a5a <_scanf_float+0x46>
 8021b8c:	eb1a 0f05 	cmn.w	sl, r5
 8021b90:	f47f af70 	bne.w	8021a74 <_scanf_float+0x60>
 8021b94:	6822      	ldr	r2, [r4, #0]
 8021b96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8021b9a:	6022      	str	r2, [r4, #0]
 8021b9c:	f806 3b01 	strb.w	r3, [r6], #1
 8021ba0:	e7e4      	b.n	8021b6c <_scanf_float+0x158>
 8021ba2:	6822      	ldr	r2, [r4, #0]
 8021ba4:	0610      	lsls	r0, r2, #24
 8021ba6:	f57f af65 	bpl.w	8021a74 <_scanf_float+0x60>
 8021baa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8021bae:	e7f4      	b.n	8021b9a <_scanf_float+0x186>
 8021bb0:	f1ba 0f00 	cmp.w	sl, #0
 8021bb4:	d10e      	bne.n	8021bd4 <_scanf_float+0x1c0>
 8021bb6:	f1b9 0f00 	cmp.w	r9, #0
 8021bba:	d10e      	bne.n	8021bda <_scanf_float+0x1c6>
 8021bbc:	6822      	ldr	r2, [r4, #0]
 8021bbe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8021bc2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8021bc6:	d108      	bne.n	8021bda <_scanf_float+0x1c6>
 8021bc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8021bcc:	6022      	str	r2, [r4, #0]
 8021bce:	f04f 0a01 	mov.w	sl, #1
 8021bd2:	e7e3      	b.n	8021b9c <_scanf_float+0x188>
 8021bd4:	f1ba 0f02 	cmp.w	sl, #2
 8021bd8:	d055      	beq.n	8021c86 <_scanf_float+0x272>
 8021bda:	2d01      	cmp	r5, #1
 8021bdc:	d002      	beq.n	8021be4 <_scanf_float+0x1d0>
 8021bde:	2d04      	cmp	r5, #4
 8021be0:	f47f af48 	bne.w	8021a74 <_scanf_float+0x60>
 8021be4:	3501      	adds	r5, #1
 8021be6:	b2ed      	uxtb	r5, r5
 8021be8:	e7d8      	b.n	8021b9c <_scanf_float+0x188>
 8021bea:	f1ba 0f01 	cmp.w	sl, #1
 8021bee:	f47f af41 	bne.w	8021a74 <_scanf_float+0x60>
 8021bf2:	f04f 0a02 	mov.w	sl, #2
 8021bf6:	e7d1      	b.n	8021b9c <_scanf_float+0x188>
 8021bf8:	b97d      	cbnz	r5, 8021c1a <_scanf_float+0x206>
 8021bfa:	f1b9 0f00 	cmp.w	r9, #0
 8021bfe:	f47f af3c 	bne.w	8021a7a <_scanf_float+0x66>
 8021c02:	6822      	ldr	r2, [r4, #0]
 8021c04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8021c08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8021c0c:	f47f af39 	bne.w	8021a82 <_scanf_float+0x6e>
 8021c10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8021c14:	6022      	str	r2, [r4, #0]
 8021c16:	2501      	movs	r5, #1
 8021c18:	e7c0      	b.n	8021b9c <_scanf_float+0x188>
 8021c1a:	2d03      	cmp	r5, #3
 8021c1c:	d0e2      	beq.n	8021be4 <_scanf_float+0x1d0>
 8021c1e:	2d05      	cmp	r5, #5
 8021c20:	e7de      	b.n	8021be0 <_scanf_float+0x1cc>
 8021c22:	2d02      	cmp	r5, #2
 8021c24:	f47f af26 	bne.w	8021a74 <_scanf_float+0x60>
 8021c28:	2503      	movs	r5, #3
 8021c2a:	e7b7      	b.n	8021b9c <_scanf_float+0x188>
 8021c2c:	2d06      	cmp	r5, #6
 8021c2e:	f47f af21 	bne.w	8021a74 <_scanf_float+0x60>
 8021c32:	2507      	movs	r5, #7
 8021c34:	e7b2      	b.n	8021b9c <_scanf_float+0x188>
 8021c36:	6822      	ldr	r2, [r4, #0]
 8021c38:	0591      	lsls	r1, r2, #22
 8021c3a:	f57f af1b 	bpl.w	8021a74 <_scanf_float+0x60>
 8021c3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8021c42:	6022      	str	r2, [r4, #0]
 8021c44:	f8cd 9004 	str.w	r9, [sp, #4]
 8021c48:	e7a8      	b.n	8021b9c <_scanf_float+0x188>
 8021c4a:	6822      	ldr	r2, [r4, #0]
 8021c4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8021c50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8021c54:	d006      	beq.n	8021c64 <_scanf_float+0x250>
 8021c56:	0550      	lsls	r0, r2, #21
 8021c58:	f57f af0c 	bpl.w	8021a74 <_scanf_float+0x60>
 8021c5c:	f1b9 0f00 	cmp.w	r9, #0
 8021c60:	f43f af0f 	beq.w	8021a82 <_scanf_float+0x6e>
 8021c64:	0591      	lsls	r1, r2, #22
 8021c66:	bf58      	it	pl
 8021c68:	9901      	ldrpl	r1, [sp, #4]
 8021c6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8021c6e:	bf58      	it	pl
 8021c70:	eba9 0101 	subpl.w	r1, r9, r1
 8021c74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8021c78:	bf58      	it	pl
 8021c7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8021c7e:	6022      	str	r2, [r4, #0]
 8021c80:	f04f 0900 	mov.w	r9, #0
 8021c84:	e78a      	b.n	8021b9c <_scanf_float+0x188>
 8021c86:	f04f 0a03 	mov.w	sl, #3
 8021c8a:	e787      	b.n	8021b9c <_scanf_float+0x188>
 8021c8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8021c90:	4639      	mov	r1, r7
 8021c92:	4640      	mov	r0, r8
 8021c94:	4798      	blx	r3
 8021c96:	2800      	cmp	r0, #0
 8021c98:	f43f aedf 	beq.w	8021a5a <_scanf_float+0x46>
 8021c9c:	e6ea      	b.n	8021a74 <_scanf_float+0x60>
 8021c9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8021ca2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8021ca6:	463a      	mov	r2, r7
 8021ca8:	4640      	mov	r0, r8
 8021caa:	4798      	blx	r3
 8021cac:	6923      	ldr	r3, [r4, #16]
 8021cae:	3b01      	subs	r3, #1
 8021cb0:	6123      	str	r3, [r4, #16]
 8021cb2:	e6ec      	b.n	8021a8e <_scanf_float+0x7a>
 8021cb4:	1e6b      	subs	r3, r5, #1
 8021cb6:	2b06      	cmp	r3, #6
 8021cb8:	d825      	bhi.n	8021d06 <_scanf_float+0x2f2>
 8021cba:	2d02      	cmp	r5, #2
 8021cbc:	d836      	bhi.n	8021d2c <_scanf_float+0x318>
 8021cbe:	455e      	cmp	r6, fp
 8021cc0:	f67f aee8 	bls.w	8021a94 <_scanf_float+0x80>
 8021cc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8021cc8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8021ccc:	463a      	mov	r2, r7
 8021cce:	4640      	mov	r0, r8
 8021cd0:	4798      	blx	r3
 8021cd2:	6923      	ldr	r3, [r4, #16]
 8021cd4:	3b01      	subs	r3, #1
 8021cd6:	6123      	str	r3, [r4, #16]
 8021cd8:	e7f1      	b.n	8021cbe <_scanf_float+0x2aa>
 8021cda:	9802      	ldr	r0, [sp, #8]
 8021cdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8021ce0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8021ce4:	9002      	str	r0, [sp, #8]
 8021ce6:	463a      	mov	r2, r7
 8021ce8:	4640      	mov	r0, r8
 8021cea:	4798      	blx	r3
 8021cec:	6923      	ldr	r3, [r4, #16]
 8021cee:	3b01      	subs	r3, #1
 8021cf0:	6123      	str	r3, [r4, #16]
 8021cf2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8021cf6:	fa5f fa8a 	uxtb.w	sl, sl
 8021cfa:	f1ba 0f02 	cmp.w	sl, #2
 8021cfe:	d1ec      	bne.n	8021cda <_scanf_float+0x2c6>
 8021d00:	3d03      	subs	r5, #3
 8021d02:	b2ed      	uxtb	r5, r5
 8021d04:	1b76      	subs	r6, r6, r5
 8021d06:	6823      	ldr	r3, [r4, #0]
 8021d08:	05da      	lsls	r2, r3, #23
 8021d0a:	d52f      	bpl.n	8021d6c <_scanf_float+0x358>
 8021d0c:	055b      	lsls	r3, r3, #21
 8021d0e:	d510      	bpl.n	8021d32 <_scanf_float+0x31e>
 8021d10:	455e      	cmp	r6, fp
 8021d12:	f67f aebf 	bls.w	8021a94 <_scanf_float+0x80>
 8021d16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8021d1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8021d1e:	463a      	mov	r2, r7
 8021d20:	4640      	mov	r0, r8
 8021d22:	4798      	blx	r3
 8021d24:	6923      	ldr	r3, [r4, #16]
 8021d26:	3b01      	subs	r3, #1
 8021d28:	6123      	str	r3, [r4, #16]
 8021d2a:	e7f1      	b.n	8021d10 <_scanf_float+0x2fc>
 8021d2c:	46aa      	mov	sl, r5
 8021d2e:	9602      	str	r6, [sp, #8]
 8021d30:	e7df      	b.n	8021cf2 <_scanf_float+0x2de>
 8021d32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8021d36:	6923      	ldr	r3, [r4, #16]
 8021d38:	2965      	cmp	r1, #101	; 0x65
 8021d3a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8021d3e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8021d42:	6123      	str	r3, [r4, #16]
 8021d44:	d00c      	beq.n	8021d60 <_scanf_float+0x34c>
 8021d46:	2945      	cmp	r1, #69	; 0x45
 8021d48:	d00a      	beq.n	8021d60 <_scanf_float+0x34c>
 8021d4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8021d4e:	463a      	mov	r2, r7
 8021d50:	4640      	mov	r0, r8
 8021d52:	4798      	blx	r3
 8021d54:	6923      	ldr	r3, [r4, #16]
 8021d56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8021d5a:	3b01      	subs	r3, #1
 8021d5c:	1eb5      	subs	r5, r6, #2
 8021d5e:	6123      	str	r3, [r4, #16]
 8021d60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8021d64:	463a      	mov	r2, r7
 8021d66:	4640      	mov	r0, r8
 8021d68:	4798      	blx	r3
 8021d6a:	462e      	mov	r6, r5
 8021d6c:	6825      	ldr	r5, [r4, #0]
 8021d6e:	f015 0510 	ands.w	r5, r5, #16
 8021d72:	d158      	bne.n	8021e26 <_scanf_float+0x412>
 8021d74:	7035      	strb	r5, [r6, #0]
 8021d76:	6823      	ldr	r3, [r4, #0]
 8021d78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8021d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021d80:	d11c      	bne.n	8021dbc <_scanf_float+0x3a8>
 8021d82:	9b01      	ldr	r3, [sp, #4]
 8021d84:	454b      	cmp	r3, r9
 8021d86:	eba3 0209 	sub.w	r2, r3, r9
 8021d8a:	d124      	bne.n	8021dd6 <_scanf_float+0x3c2>
 8021d8c:	2200      	movs	r2, #0
 8021d8e:	4659      	mov	r1, fp
 8021d90:	4640      	mov	r0, r8
 8021d92:	f001 f86b 	bl	8022e6c <_strtod_r>
 8021d96:	9b03      	ldr	r3, [sp, #12]
 8021d98:	6821      	ldr	r1, [r4, #0]
 8021d9a:	681b      	ldr	r3, [r3, #0]
 8021d9c:	f011 0f02 	tst.w	r1, #2
 8021da0:	ec57 6b10 	vmov	r6, r7, d0
 8021da4:	f103 0204 	add.w	r2, r3, #4
 8021da8:	d020      	beq.n	8021dec <_scanf_float+0x3d8>
 8021daa:	9903      	ldr	r1, [sp, #12]
 8021dac:	600a      	str	r2, [r1, #0]
 8021dae:	681b      	ldr	r3, [r3, #0]
 8021db0:	e9c3 6700 	strd	r6, r7, [r3]
 8021db4:	68e3      	ldr	r3, [r4, #12]
 8021db6:	3301      	adds	r3, #1
 8021db8:	60e3      	str	r3, [r4, #12]
 8021dba:	e66c      	b.n	8021a96 <_scanf_float+0x82>
 8021dbc:	9b04      	ldr	r3, [sp, #16]
 8021dbe:	2b00      	cmp	r3, #0
 8021dc0:	d0e4      	beq.n	8021d8c <_scanf_float+0x378>
 8021dc2:	9905      	ldr	r1, [sp, #20]
 8021dc4:	230a      	movs	r3, #10
 8021dc6:	462a      	mov	r2, r5
 8021dc8:	3101      	adds	r1, #1
 8021dca:	4640      	mov	r0, r8
 8021dcc:	f001 f8d6 	bl	8022f7c <_strtol_r>
 8021dd0:	9b04      	ldr	r3, [sp, #16]
 8021dd2:	9e05      	ldr	r6, [sp, #20]
 8021dd4:	1ac2      	subs	r2, r0, r3
 8021dd6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8021dda:	429e      	cmp	r6, r3
 8021ddc:	bf28      	it	cs
 8021dde:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8021de2:	4912      	ldr	r1, [pc, #72]	; (8021e2c <_scanf_float+0x418>)
 8021de4:	4630      	mov	r0, r6
 8021de6:	f000 f971 	bl	80220cc <siprintf>
 8021dea:	e7cf      	b.n	8021d8c <_scanf_float+0x378>
 8021dec:	f011 0f04 	tst.w	r1, #4
 8021df0:	9903      	ldr	r1, [sp, #12]
 8021df2:	600a      	str	r2, [r1, #0]
 8021df4:	d1db      	bne.n	8021dae <_scanf_float+0x39a>
 8021df6:	f8d3 8000 	ldr.w	r8, [r3]
 8021dfa:	ee10 2a10 	vmov	r2, s0
 8021dfe:	ee10 0a10 	vmov	r0, s0
 8021e02:	463b      	mov	r3, r7
 8021e04:	4639      	mov	r1, r7
 8021e06:	f7de fec1 	bl	8000b8c <__aeabi_dcmpun>
 8021e0a:	b128      	cbz	r0, 8021e18 <_scanf_float+0x404>
 8021e0c:	4808      	ldr	r0, [pc, #32]	; (8021e30 <_scanf_float+0x41c>)
 8021e0e:	f000 f923 	bl	8022058 <nanf>
 8021e12:	ed88 0a00 	vstr	s0, [r8]
 8021e16:	e7cd      	b.n	8021db4 <_scanf_float+0x3a0>
 8021e18:	4630      	mov	r0, r6
 8021e1a:	4639      	mov	r1, r7
 8021e1c:	f7de ff14 	bl	8000c48 <__aeabi_d2f>
 8021e20:	f8c8 0000 	str.w	r0, [r8]
 8021e24:	e7c6      	b.n	8021db4 <_scanf_float+0x3a0>
 8021e26:	2500      	movs	r5, #0
 8021e28:	e635      	b.n	8021a96 <_scanf_float+0x82>
 8021e2a:	bf00      	nop
 8021e2c:	08027785 	.word	0x08027785
 8021e30:	080275d9 	.word	0x080275d9

08021e34 <iprintf>:
 8021e34:	b40f      	push	{r0, r1, r2, r3}
 8021e36:	4b0a      	ldr	r3, [pc, #40]	; (8021e60 <iprintf+0x2c>)
 8021e38:	b513      	push	{r0, r1, r4, lr}
 8021e3a:	681c      	ldr	r4, [r3, #0]
 8021e3c:	b124      	cbz	r4, 8021e48 <iprintf+0x14>
 8021e3e:	69a3      	ldr	r3, [r4, #24]
 8021e40:	b913      	cbnz	r3, 8021e48 <iprintf+0x14>
 8021e42:	4620      	mov	r0, r4
 8021e44:	f7fe fdfc 	bl	8020a40 <__sinit>
 8021e48:	ab05      	add	r3, sp, #20
 8021e4a:	9a04      	ldr	r2, [sp, #16]
 8021e4c:	68a1      	ldr	r1, [r4, #8]
 8021e4e:	9301      	str	r3, [sp, #4]
 8021e50:	4620      	mov	r0, r4
 8021e52:	f7ff f845 	bl	8020ee0 <_vfiprintf_r>
 8021e56:	b002      	add	sp, #8
 8021e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e5c:	b004      	add	sp, #16
 8021e5e:	4770      	bx	lr
 8021e60:	2000009c 	.word	0x2000009c

08021e64 <_puts_r>:
 8021e64:	b570      	push	{r4, r5, r6, lr}
 8021e66:	460e      	mov	r6, r1
 8021e68:	4605      	mov	r5, r0
 8021e6a:	b118      	cbz	r0, 8021e74 <_puts_r+0x10>
 8021e6c:	6983      	ldr	r3, [r0, #24]
 8021e6e:	b90b      	cbnz	r3, 8021e74 <_puts_r+0x10>
 8021e70:	f7fe fde6 	bl	8020a40 <__sinit>
 8021e74:	69ab      	ldr	r3, [r5, #24]
 8021e76:	68ac      	ldr	r4, [r5, #8]
 8021e78:	b913      	cbnz	r3, 8021e80 <_puts_r+0x1c>
 8021e7a:	4628      	mov	r0, r5
 8021e7c:	f7fe fde0 	bl	8020a40 <__sinit>
 8021e80:	4b2c      	ldr	r3, [pc, #176]	; (8021f34 <_puts_r+0xd0>)
 8021e82:	429c      	cmp	r4, r3
 8021e84:	d120      	bne.n	8021ec8 <_puts_r+0x64>
 8021e86:	686c      	ldr	r4, [r5, #4]
 8021e88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021e8a:	07db      	lsls	r3, r3, #31
 8021e8c:	d405      	bmi.n	8021e9a <_puts_r+0x36>
 8021e8e:	89a3      	ldrh	r3, [r4, #12]
 8021e90:	0598      	lsls	r0, r3, #22
 8021e92:	d402      	bmi.n	8021e9a <_puts_r+0x36>
 8021e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021e96:	f7fe fef0 	bl	8020c7a <__retarget_lock_acquire_recursive>
 8021e9a:	89a3      	ldrh	r3, [r4, #12]
 8021e9c:	0719      	lsls	r1, r3, #28
 8021e9e:	d51d      	bpl.n	8021edc <_puts_r+0x78>
 8021ea0:	6923      	ldr	r3, [r4, #16]
 8021ea2:	b1db      	cbz	r3, 8021edc <_puts_r+0x78>
 8021ea4:	3e01      	subs	r6, #1
 8021ea6:	68a3      	ldr	r3, [r4, #8]
 8021ea8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021eac:	3b01      	subs	r3, #1
 8021eae:	60a3      	str	r3, [r4, #8]
 8021eb0:	bb39      	cbnz	r1, 8021f02 <_puts_r+0x9e>
 8021eb2:	2b00      	cmp	r3, #0
 8021eb4:	da38      	bge.n	8021f28 <_puts_r+0xc4>
 8021eb6:	4622      	mov	r2, r4
 8021eb8:	210a      	movs	r1, #10
 8021eba:	4628      	mov	r0, r5
 8021ebc:	f001 f916 	bl	80230ec <__swbuf_r>
 8021ec0:	3001      	adds	r0, #1
 8021ec2:	d011      	beq.n	8021ee8 <_puts_r+0x84>
 8021ec4:	250a      	movs	r5, #10
 8021ec6:	e011      	b.n	8021eec <_puts_r+0x88>
 8021ec8:	4b1b      	ldr	r3, [pc, #108]	; (8021f38 <_puts_r+0xd4>)
 8021eca:	429c      	cmp	r4, r3
 8021ecc:	d101      	bne.n	8021ed2 <_puts_r+0x6e>
 8021ece:	68ac      	ldr	r4, [r5, #8]
 8021ed0:	e7da      	b.n	8021e88 <_puts_r+0x24>
 8021ed2:	4b1a      	ldr	r3, [pc, #104]	; (8021f3c <_puts_r+0xd8>)
 8021ed4:	429c      	cmp	r4, r3
 8021ed6:	bf08      	it	eq
 8021ed8:	68ec      	ldreq	r4, [r5, #12]
 8021eda:	e7d5      	b.n	8021e88 <_puts_r+0x24>
 8021edc:	4621      	mov	r1, r4
 8021ede:	4628      	mov	r0, r5
 8021ee0:	f001 f968 	bl	80231b4 <__swsetup_r>
 8021ee4:	2800      	cmp	r0, #0
 8021ee6:	d0dd      	beq.n	8021ea4 <_puts_r+0x40>
 8021ee8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8021eec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021eee:	07da      	lsls	r2, r3, #31
 8021ef0:	d405      	bmi.n	8021efe <_puts_r+0x9a>
 8021ef2:	89a3      	ldrh	r3, [r4, #12]
 8021ef4:	059b      	lsls	r3, r3, #22
 8021ef6:	d402      	bmi.n	8021efe <_puts_r+0x9a>
 8021ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021efa:	f7fe febf 	bl	8020c7c <__retarget_lock_release_recursive>
 8021efe:	4628      	mov	r0, r5
 8021f00:	bd70      	pop	{r4, r5, r6, pc}
 8021f02:	2b00      	cmp	r3, #0
 8021f04:	da04      	bge.n	8021f10 <_puts_r+0xac>
 8021f06:	69a2      	ldr	r2, [r4, #24]
 8021f08:	429a      	cmp	r2, r3
 8021f0a:	dc06      	bgt.n	8021f1a <_puts_r+0xb6>
 8021f0c:	290a      	cmp	r1, #10
 8021f0e:	d004      	beq.n	8021f1a <_puts_r+0xb6>
 8021f10:	6823      	ldr	r3, [r4, #0]
 8021f12:	1c5a      	adds	r2, r3, #1
 8021f14:	6022      	str	r2, [r4, #0]
 8021f16:	7019      	strb	r1, [r3, #0]
 8021f18:	e7c5      	b.n	8021ea6 <_puts_r+0x42>
 8021f1a:	4622      	mov	r2, r4
 8021f1c:	4628      	mov	r0, r5
 8021f1e:	f001 f8e5 	bl	80230ec <__swbuf_r>
 8021f22:	3001      	adds	r0, #1
 8021f24:	d1bf      	bne.n	8021ea6 <_puts_r+0x42>
 8021f26:	e7df      	b.n	8021ee8 <_puts_r+0x84>
 8021f28:	6823      	ldr	r3, [r4, #0]
 8021f2a:	250a      	movs	r5, #10
 8021f2c:	1c5a      	adds	r2, r3, #1
 8021f2e:	6022      	str	r2, [r4, #0]
 8021f30:	701d      	strb	r5, [r3, #0]
 8021f32:	e7db      	b.n	8021eec <_puts_r+0x88>
 8021f34:	080276fc 	.word	0x080276fc
 8021f38:	0802771c 	.word	0x0802771c
 8021f3c:	080276dc 	.word	0x080276dc

08021f40 <puts>:
 8021f40:	4b02      	ldr	r3, [pc, #8]	; (8021f4c <puts+0xc>)
 8021f42:	4601      	mov	r1, r0
 8021f44:	6818      	ldr	r0, [r3, #0]
 8021f46:	f7ff bf8d 	b.w	8021e64 <_puts_r>
 8021f4a:	bf00      	nop
 8021f4c:	2000009c 	.word	0x2000009c

08021f50 <srand>:
 8021f50:	b538      	push	{r3, r4, r5, lr}
 8021f52:	4b10      	ldr	r3, [pc, #64]	; (8021f94 <srand+0x44>)
 8021f54:	681d      	ldr	r5, [r3, #0]
 8021f56:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8021f58:	4604      	mov	r4, r0
 8021f5a:	b9b3      	cbnz	r3, 8021f8a <srand+0x3a>
 8021f5c:	2018      	movs	r0, #24
 8021f5e:	f7fe fe8f 	bl	8020c80 <malloc>
 8021f62:	4602      	mov	r2, r0
 8021f64:	63a8      	str	r0, [r5, #56]	; 0x38
 8021f66:	b920      	cbnz	r0, 8021f72 <srand+0x22>
 8021f68:	4b0b      	ldr	r3, [pc, #44]	; (8021f98 <srand+0x48>)
 8021f6a:	480c      	ldr	r0, [pc, #48]	; (8021f9c <srand+0x4c>)
 8021f6c:	2142      	movs	r1, #66	; 0x42
 8021f6e:	f7fe fccf 	bl	8020910 <__assert_func>
 8021f72:	490b      	ldr	r1, [pc, #44]	; (8021fa0 <srand+0x50>)
 8021f74:	4b0b      	ldr	r3, [pc, #44]	; (8021fa4 <srand+0x54>)
 8021f76:	e9c0 1300 	strd	r1, r3, [r0]
 8021f7a:	4b0b      	ldr	r3, [pc, #44]	; (8021fa8 <srand+0x58>)
 8021f7c:	6083      	str	r3, [r0, #8]
 8021f7e:	230b      	movs	r3, #11
 8021f80:	8183      	strh	r3, [r0, #12]
 8021f82:	2100      	movs	r1, #0
 8021f84:	2001      	movs	r0, #1
 8021f86:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021f8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8021f8c:	2200      	movs	r2, #0
 8021f8e:	611c      	str	r4, [r3, #16]
 8021f90:	615a      	str	r2, [r3, #20]
 8021f92:	bd38      	pop	{r3, r4, r5, pc}
 8021f94:	2000009c 	.word	0x2000009c
 8021f98:	0802778a 	.word	0x0802778a
 8021f9c:	080277a1 	.word	0x080277a1
 8021fa0:	abcd330e 	.word	0xabcd330e
 8021fa4:	e66d1234 	.word	0xe66d1234
 8021fa8:	0005deec 	.word	0x0005deec

08021fac <rand>:
 8021fac:	4b16      	ldr	r3, [pc, #88]	; (8022008 <rand+0x5c>)
 8021fae:	b510      	push	{r4, lr}
 8021fb0:	681c      	ldr	r4, [r3, #0]
 8021fb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021fb4:	b9b3      	cbnz	r3, 8021fe4 <rand+0x38>
 8021fb6:	2018      	movs	r0, #24
 8021fb8:	f7fe fe62 	bl	8020c80 <malloc>
 8021fbc:	63a0      	str	r0, [r4, #56]	; 0x38
 8021fbe:	b928      	cbnz	r0, 8021fcc <rand+0x20>
 8021fc0:	4602      	mov	r2, r0
 8021fc2:	4b12      	ldr	r3, [pc, #72]	; (802200c <rand+0x60>)
 8021fc4:	4812      	ldr	r0, [pc, #72]	; (8022010 <rand+0x64>)
 8021fc6:	214e      	movs	r1, #78	; 0x4e
 8021fc8:	f7fe fca2 	bl	8020910 <__assert_func>
 8021fcc:	4a11      	ldr	r2, [pc, #68]	; (8022014 <rand+0x68>)
 8021fce:	4b12      	ldr	r3, [pc, #72]	; (8022018 <rand+0x6c>)
 8021fd0:	e9c0 2300 	strd	r2, r3, [r0]
 8021fd4:	4b11      	ldr	r3, [pc, #68]	; (802201c <rand+0x70>)
 8021fd6:	6083      	str	r3, [r0, #8]
 8021fd8:	230b      	movs	r3, #11
 8021fda:	8183      	strh	r3, [r0, #12]
 8021fdc:	2201      	movs	r2, #1
 8021fde:	2300      	movs	r3, #0
 8021fe0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8021fe4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8021fe6:	4a0e      	ldr	r2, [pc, #56]	; (8022020 <rand+0x74>)
 8021fe8:	6920      	ldr	r0, [r4, #16]
 8021fea:	6963      	ldr	r3, [r4, #20]
 8021fec:	490d      	ldr	r1, [pc, #52]	; (8022024 <rand+0x78>)
 8021fee:	4342      	muls	r2, r0
 8021ff0:	fb01 2203 	mla	r2, r1, r3, r2
 8021ff4:	fba0 0101 	umull	r0, r1, r0, r1
 8021ff8:	1c43      	adds	r3, r0, #1
 8021ffa:	eb42 0001 	adc.w	r0, r2, r1
 8021ffe:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8022002:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022006:	bd10      	pop	{r4, pc}
 8022008:	2000009c 	.word	0x2000009c
 802200c:	0802778a 	.word	0x0802778a
 8022010:	080277a1 	.word	0x080277a1
 8022014:	abcd330e 	.word	0xabcd330e
 8022018:	e66d1234 	.word	0xe66d1234
 802201c:	0005deec 	.word	0x0005deec
 8022020:	5851f42d 	.word	0x5851f42d
 8022024:	4c957f2d 	.word	0x4c957f2d

08022028 <realloc>:
 8022028:	4b02      	ldr	r3, [pc, #8]	; (8022034 <realloc+0xc>)
 802202a:	460a      	mov	r2, r1
 802202c:	4601      	mov	r1, r0
 802202e:	6818      	ldr	r0, [r3, #0]
 8022030:	f003 b959 	b.w	80252e6 <_realloc_r>
 8022034:	2000009c 	.word	0x2000009c

08022038 <_sbrk_r>:
 8022038:	b538      	push	{r3, r4, r5, lr}
 802203a:	4d06      	ldr	r5, [pc, #24]	; (8022054 <_sbrk_r+0x1c>)
 802203c:	2300      	movs	r3, #0
 802203e:	4604      	mov	r4, r0
 8022040:	4608      	mov	r0, r1
 8022042:	602b      	str	r3, [r5, #0]
 8022044:	f7e0 fb94 	bl	8002770 <_sbrk>
 8022048:	1c43      	adds	r3, r0, #1
 802204a:	d102      	bne.n	8022052 <_sbrk_r+0x1a>
 802204c:	682b      	ldr	r3, [r5, #0]
 802204e:	b103      	cbz	r3, 8022052 <_sbrk_r+0x1a>
 8022050:	6023      	str	r3, [r4, #0]
 8022052:	bd38      	pop	{r3, r4, r5, pc}
 8022054:	20013644 	.word	0x20013644

08022058 <nanf>:
 8022058:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8022060 <nanf+0x8>
 802205c:	4770      	bx	lr
 802205e:	bf00      	nop
 8022060:	7fc00000 	.word	0x7fc00000

08022064 <sniprintf>:
 8022064:	b40c      	push	{r2, r3}
 8022066:	b530      	push	{r4, r5, lr}
 8022068:	4b17      	ldr	r3, [pc, #92]	; (80220c8 <sniprintf+0x64>)
 802206a:	1e0c      	subs	r4, r1, #0
 802206c:	681d      	ldr	r5, [r3, #0]
 802206e:	b09d      	sub	sp, #116	; 0x74
 8022070:	da08      	bge.n	8022084 <sniprintf+0x20>
 8022072:	238b      	movs	r3, #139	; 0x8b
 8022074:	602b      	str	r3, [r5, #0]
 8022076:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802207a:	b01d      	add	sp, #116	; 0x74
 802207c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022080:	b002      	add	sp, #8
 8022082:	4770      	bx	lr
 8022084:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022088:	f8ad 3014 	strh.w	r3, [sp, #20]
 802208c:	bf14      	ite	ne
 802208e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8022092:	4623      	moveq	r3, r4
 8022094:	9304      	str	r3, [sp, #16]
 8022096:	9307      	str	r3, [sp, #28]
 8022098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802209c:	9002      	str	r0, [sp, #8]
 802209e:	9006      	str	r0, [sp, #24]
 80220a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80220a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80220a6:	ab21      	add	r3, sp, #132	; 0x84
 80220a8:	a902      	add	r1, sp, #8
 80220aa:	4628      	mov	r0, r5
 80220ac:	9301      	str	r3, [sp, #4]
 80220ae:	f003 f99b 	bl	80253e8 <_svfiprintf_r>
 80220b2:	1c43      	adds	r3, r0, #1
 80220b4:	bfbc      	itt	lt
 80220b6:	238b      	movlt	r3, #139	; 0x8b
 80220b8:	602b      	strlt	r3, [r5, #0]
 80220ba:	2c00      	cmp	r4, #0
 80220bc:	d0dd      	beq.n	802207a <sniprintf+0x16>
 80220be:	9b02      	ldr	r3, [sp, #8]
 80220c0:	2200      	movs	r2, #0
 80220c2:	701a      	strb	r2, [r3, #0]
 80220c4:	e7d9      	b.n	802207a <sniprintf+0x16>
 80220c6:	bf00      	nop
 80220c8:	2000009c 	.word	0x2000009c

080220cc <siprintf>:
 80220cc:	b40e      	push	{r1, r2, r3}
 80220ce:	b500      	push	{lr}
 80220d0:	b09c      	sub	sp, #112	; 0x70
 80220d2:	ab1d      	add	r3, sp, #116	; 0x74
 80220d4:	9002      	str	r0, [sp, #8]
 80220d6:	9006      	str	r0, [sp, #24]
 80220d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80220dc:	4809      	ldr	r0, [pc, #36]	; (8022104 <siprintf+0x38>)
 80220de:	9107      	str	r1, [sp, #28]
 80220e0:	9104      	str	r1, [sp, #16]
 80220e2:	4909      	ldr	r1, [pc, #36]	; (8022108 <siprintf+0x3c>)
 80220e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80220e8:	9105      	str	r1, [sp, #20]
 80220ea:	6800      	ldr	r0, [r0, #0]
 80220ec:	9301      	str	r3, [sp, #4]
 80220ee:	a902      	add	r1, sp, #8
 80220f0:	f003 f97a 	bl	80253e8 <_svfiprintf_r>
 80220f4:	9b02      	ldr	r3, [sp, #8]
 80220f6:	2200      	movs	r2, #0
 80220f8:	701a      	strb	r2, [r3, #0]
 80220fa:	b01c      	add	sp, #112	; 0x70
 80220fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8022100:	b003      	add	sp, #12
 8022102:	4770      	bx	lr
 8022104:	2000009c 	.word	0x2000009c
 8022108:	ffff0208 	.word	0xffff0208

0802210c <__sread>:
 802210c:	b510      	push	{r4, lr}
 802210e:	460c      	mov	r4, r1
 8022110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022114:	f003 fa68 	bl	80255e8 <_read_r>
 8022118:	2800      	cmp	r0, #0
 802211a:	bfab      	itete	ge
 802211c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802211e:	89a3      	ldrhlt	r3, [r4, #12]
 8022120:	181b      	addge	r3, r3, r0
 8022122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022126:	bfac      	ite	ge
 8022128:	6563      	strge	r3, [r4, #84]	; 0x54
 802212a:	81a3      	strhlt	r3, [r4, #12]
 802212c:	bd10      	pop	{r4, pc}

0802212e <__swrite>:
 802212e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022132:	461f      	mov	r7, r3
 8022134:	898b      	ldrh	r3, [r1, #12]
 8022136:	05db      	lsls	r3, r3, #23
 8022138:	4605      	mov	r5, r0
 802213a:	460c      	mov	r4, r1
 802213c:	4616      	mov	r6, r2
 802213e:	d505      	bpl.n	802214c <__swrite+0x1e>
 8022140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022144:	2302      	movs	r3, #2
 8022146:	2200      	movs	r2, #0
 8022148:	f002 fb76 	bl	8024838 <_lseek_r>
 802214c:	89a3      	ldrh	r3, [r4, #12]
 802214e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022156:	81a3      	strh	r3, [r4, #12]
 8022158:	4632      	mov	r2, r6
 802215a:	463b      	mov	r3, r7
 802215c:	4628      	mov	r0, r5
 802215e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022162:	f001 b815 	b.w	8023190 <_write_r>

08022166 <__sseek>:
 8022166:	b510      	push	{r4, lr}
 8022168:	460c      	mov	r4, r1
 802216a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802216e:	f002 fb63 	bl	8024838 <_lseek_r>
 8022172:	1c43      	adds	r3, r0, #1
 8022174:	89a3      	ldrh	r3, [r4, #12]
 8022176:	bf15      	itete	ne
 8022178:	6560      	strne	r0, [r4, #84]	; 0x54
 802217a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802217e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022182:	81a3      	strheq	r3, [r4, #12]
 8022184:	bf18      	it	ne
 8022186:	81a3      	strhne	r3, [r4, #12]
 8022188:	bd10      	pop	{r4, pc}

0802218a <__sclose>:
 802218a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802218e:	f001 b887 	b.w	80232a0 <_close_r>

08022192 <strchr>:
 8022192:	b2c9      	uxtb	r1, r1
 8022194:	4603      	mov	r3, r0
 8022196:	f810 2b01 	ldrb.w	r2, [r0], #1
 802219a:	b11a      	cbz	r2, 80221a4 <strchr+0x12>
 802219c:	428a      	cmp	r2, r1
 802219e:	d1f9      	bne.n	8022194 <strchr+0x2>
 80221a0:	4618      	mov	r0, r3
 80221a2:	4770      	bx	lr
 80221a4:	2900      	cmp	r1, #0
 80221a6:	bf18      	it	ne
 80221a8:	2300      	movne	r3, #0
 80221aa:	e7f9      	b.n	80221a0 <strchr+0xe>

080221ac <strcpy>:
 80221ac:	4603      	mov	r3, r0
 80221ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80221b2:	f803 2b01 	strb.w	r2, [r3], #1
 80221b6:	2a00      	cmp	r2, #0
 80221b8:	d1f9      	bne.n	80221ae <strcpy+0x2>
 80221ba:	4770      	bx	lr

080221bc <strncmp>:
 80221bc:	b510      	push	{r4, lr}
 80221be:	b17a      	cbz	r2, 80221e0 <strncmp+0x24>
 80221c0:	4603      	mov	r3, r0
 80221c2:	3901      	subs	r1, #1
 80221c4:	1884      	adds	r4, r0, r2
 80221c6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80221ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80221ce:	4290      	cmp	r0, r2
 80221d0:	d101      	bne.n	80221d6 <strncmp+0x1a>
 80221d2:	42a3      	cmp	r3, r4
 80221d4:	d101      	bne.n	80221da <strncmp+0x1e>
 80221d6:	1a80      	subs	r0, r0, r2
 80221d8:	bd10      	pop	{r4, pc}
 80221da:	2800      	cmp	r0, #0
 80221dc:	d1f3      	bne.n	80221c6 <strncmp+0xa>
 80221de:	e7fa      	b.n	80221d6 <strncmp+0x1a>
 80221e0:	4610      	mov	r0, r2
 80221e2:	e7f9      	b.n	80221d8 <strncmp+0x1c>

080221e4 <strnlen>:
 80221e4:	b510      	push	{r4, lr}
 80221e6:	4602      	mov	r2, r0
 80221e8:	4401      	add	r1, r0
 80221ea:	428a      	cmp	r2, r1
 80221ec:	4613      	mov	r3, r2
 80221ee:	d003      	beq.n	80221f8 <strnlen+0x14>
 80221f0:	781c      	ldrb	r4, [r3, #0]
 80221f2:	3201      	adds	r2, #1
 80221f4:	2c00      	cmp	r4, #0
 80221f6:	d1f8      	bne.n	80221ea <strnlen+0x6>
 80221f8:	1a18      	subs	r0, r3, r0
 80221fa:	bd10      	pop	{r4, pc}

080221fc <strstr>:
 80221fc:	780a      	ldrb	r2, [r1, #0]
 80221fe:	b570      	push	{r4, r5, r6, lr}
 8022200:	b96a      	cbnz	r2, 802221e <strstr+0x22>
 8022202:	bd70      	pop	{r4, r5, r6, pc}
 8022204:	429a      	cmp	r2, r3
 8022206:	d109      	bne.n	802221c <strstr+0x20>
 8022208:	460c      	mov	r4, r1
 802220a:	4605      	mov	r5, r0
 802220c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8022210:	2b00      	cmp	r3, #0
 8022212:	d0f6      	beq.n	8022202 <strstr+0x6>
 8022214:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8022218:	429e      	cmp	r6, r3
 802221a:	d0f7      	beq.n	802220c <strstr+0x10>
 802221c:	3001      	adds	r0, #1
 802221e:	7803      	ldrb	r3, [r0, #0]
 8022220:	2b00      	cmp	r3, #0
 8022222:	d1ef      	bne.n	8022204 <strstr+0x8>
 8022224:	4618      	mov	r0, r3
 8022226:	e7ec      	b.n	8022202 <strstr+0x6>

08022228 <sulp>:
 8022228:	b570      	push	{r4, r5, r6, lr}
 802222a:	4604      	mov	r4, r0
 802222c:	460d      	mov	r5, r1
 802222e:	ec45 4b10 	vmov	d0, r4, r5
 8022232:	4616      	mov	r6, r2
 8022234:	f002 ff08 	bl	8025048 <__ulp>
 8022238:	ec51 0b10 	vmov	r0, r1, d0
 802223c:	b17e      	cbz	r6, 802225e <sulp+0x36>
 802223e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8022242:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8022246:	2b00      	cmp	r3, #0
 8022248:	dd09      	ble.n	802225e <sulp+0x36>
 802224a:	051b      	lsls	r3, r3, #20
 802224c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8022250:	2400      	movs	r4, #0
 8022252:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8022256:	4622      	mov	r2, r4
 8022258:	462b      	mov	r3, r5
 802225a:	f7de f9fd 	bl	8000658 <__aeabi_dmul>
 802225e:	bd70      	pop	{r4, r5, r6, pc}

08022260 <_strtod_l>:
 8022260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022264:	ed2d 8b02 	vpush	{d8}
 8022268:	b09d      	sub	sp, #116	; 0x74
 802226a:	461f      	mov	r7, r3
 802226c:	2300      	movs	r3, #0
 802226e:	9318      	str	r3, [sp, #96]	; 0x60
 8022270:	4ba2      	ldr	r3, [pc, #648]	; (80224fc <_strtod_l+0x29c>)
 8022272:	9213      	str	r2, [sp, #76]	; 0x4c
 8022274:	681b      	ldr	r3, [r3, #0]
 8022276:	9305      	str	r3, [sp, #20]
 8022278:	4604      	mov	r4, r0
 802227a:	4618      	mov	r0, r3
 802227c:	4688      	mov	r8, r1
 802227e:	f7dd ffd1 	bl	8000224 <strlen>
 8022282:	f04f 0a00 	mov.w	sl, #0
 8022286:	4605      	mov	r5, r0
 8022288:	f04f 0b00 	mov.w	fp, #0
 802228c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8022290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022292:	781a      	ldrb	r2, [r3, #0]
 8022294:	2a2b      	cmp	r2, #43	; 0x2b
 8022296:	d04e      	beq.n	8022336 <_strtod_l+0xd6>
 8022298:	d83b      	bhi.n	8022312 <_strtod_l+0xb2>
 802229a:	2a0d      	cmp	r2, #13
 802229c:	d834      	bhi.n	8022308 <_strtod_l+0xa8>
 802229e:	2a08      	cmp	r2, #8
 80222a0:	d834      	bhi.n	802230c <_strtod_l+0xac>
 80222a2:	2a00      	cmp	r2, #0
 80222a4:	d03e      	beq.n	8022324 <_strtod_l+0xc4>
 80222a6:	2300      	movs	r3, #0
 80222a8:	930a      	str	r3, [sp, #40]	; 0x28
 80222aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80222ac:	7833      	ldrb	r3, [r6, #0]
 80222ae:	2b30      	cmp	r3, #48	; 0x30
 80222b0:	f040 80b0 	bne.w	8022414 <_strtod_l+0x1b4>
 80222b4:	7873      	ldrb	r3, [r6, #1]
 80222b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80222ba:	2b58      	cmp	r3, #88	; 0x58
 80222bc:	d168      	bne.n	8022390 <_strtod_l+0x130>
 80222be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80222c0:	9301      	str	r3, [sp, #4]
 80222c2:	ab18      	add	r3, sp, #96	; 0x60
 80222c4:	9702      	str	r7, [sp, #8]
 80222c6:	9300      	str	r3, [sp, #0]
 80222c8:	4a8d      	ldr	r2, [pc, #564]	; (8022500 <_strtod_l+0x2a0>)
 80222ca:	ab19      	add	r3, sp, #100	; 0x64
 80222cc:	a917      	add	r1, sp, #92	; 0x5c
 80222ce:	4620      	mov	r0, r4
 80222d0:	f001 ffa6 	bl	8024220 <__gethex>
 80222d4:	f010 0707 	ands.w	r7, r0, #7
 80222d8:	4605      	mov	r5, r0
 80222da:	d005      	beq.n	80222e8 <_strtod_l+0x88>
 80222dc:	2f06      	cmp	r7, #6
 80222de:	d12c      	bne.n	802233a <_strtod_l+0xda>
 80222e0:	3601      	adds	r6, #1
 80222e2:	2300      	movs	r3, #0
 80222e4:	9617      	str	r6, [sp, #92]	; 0x5c
 80222e6:	930a      	str	r3, [sp, #40]	; 0x28
 80222e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80222ea:	2b00      	cmp	r3, #0
 80222ec:	f040 8590 	bne.w	8022e10 <_strtod_l+0xbb0>
 80222f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80222f2:	b1eb      	cbz	r3, 8022330 <_strtod_l+0xd0>
 80222f4:	4652      	mov	r2, sl
 80222f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80222fa:	ec43 2b10 	vmov	d0, r2, r3
 80222fe:	b01d      	add	sp, #116	; 0x74
 8022300:	ecbd 8b02 	vpop	{d8}
 8022304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022308:	2a20      	cmp	r2, #32
 802230a:	d1cc      	bne.n	80222a6 <_strtod_l+0x46>
 802230c:	3301      	adds	r3, #1
 802230e:	9317      	str	r3, [sp, #92]	; 0x5c
 8022310:	e7be      	b.n	8022290 <_strtod_l+0x30>
 8022312:	2a2d      	cmp	r2, #45	; 0x2d
 8022314:	d1c7      	bne.n	80222a6 <_strtod_l+0x46>
 8022316:	2201      	movs	r2, #1
 8022318:	920a      	str	r2, [sp, #40]	; 0x28
 802231a:	1c5a      	adds	r2, r3, #1
 802231c:	9217      	str	r2, [sp, #92]	; 0x5c
 802231e:	785b      	ldrb	r3, [r3, #1]
 8022320:	2b00      	cmp	r3, #0
 8022322:	d1c2      	bne.n	80222aa <_strtod_l+0x4a>
 8022324:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022326:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 802232a:	2b00      	cmp	r3, #0
 802232c:	f040 856e 	bne.w	8022e0c <_strtod_l+0xbac>
 8022330:	4652      	mov	r2, sl
 8022332:	465b      	mov	r3, fp
 8022334:	e7e1      	b.n	80222fa <_strtod_l+0x9a>
 8022336:	2200      	movs	r2, #0
 8022338:	e7ee      	b.n	8022318 <_strtod_l+0xb8>
 802233a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802233c:	b13a      	cbz	r2, 802234e <_strtod_l+0xee>
 802233e:	2135      	movs	r1, #53	; 0x35
 8022340:	a81a      	add	r0, sp, #104	; 0x68
 8022342:	f002 ff8c 	bl	802525e <__copybits>
 8022346:	9918      	ldr	r1, [sp, #96]	; 0x60
 8022348:	4620      	mov	r0, r4
 802234a:	f002 fb4b 	bl	80249e4 <_Bfree>
 802234e:	3f01      	subs	r7, #1
 8022350:	2f04      	cmp	r7, #4
 8022352:	d806      	bhi.n	8022362 <_strtod_l+0x102>
 8022354:	e8df f007 	tbb	[pc, r7]
 8022358:	1714030a 	.word	0x1714030a
 802235c:	0a          	.byte	0x0a
 802235d:	00          	.byte	0x00
 802235e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8022362:	0728      	lsls	r0, r5, #28
 8022364:	d5c0      	bpl.n	80222e8 <_strtod_l+0x88>
 8022366:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 802236a:	e7bd      	b.n	80222e8 <_strtod_l+0x88>
 802236c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8022370:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8022372:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8022376:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802237a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802237e:	e7f0      	b.n	8022362 <_strtod_l+0x102>
 8022380:	f8df b180 	ldr.w	fp, [pc, #384]	; 8022504 <_strtod_l+0x2a4>
 8022384:	e7ed      	b.n	8022362 <_strtod_l+0x102>
 8022386:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 802238a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 802238e:	e7e8      	b.n	8022362 <_strtod_l+0x102>
 8022390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022392:	1c5a      	adds	r2, r3, #1
 8022394:	9217      	str	r2, [sp, #92]	; 0x5c
 8022396:	785b      	ldrb	r3, [r3, #1]
 8022398:	2b30      	cmp	r3, #48	; 0x30
 802239a:	d0f9      	beq.n	8022390 <_strtod_l+0x130>
 802239c:	2b00      	cmp	r3, #0
 802239e:	d0a3      	beq.n	80222e8 <_strtod_l+0x88>
 80223a0:	2301      	movs	r3, #1
 80223a2:	f04f 0900 	mov.w	r9, #0
 80223a6:	9304      	str	r3, [sp, #16]
 80223a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80223aa:	9308      	str	r3, [sp, #32]
 80223ac:	f8cd 901c 	str.w	r9, [sp, #28]
 80223b0:	464f      	mov	r7, r9
 80223b2:	220a      	movs	r2, #10
 80223b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80223b6:	7806      	ldrb	r6, [r0, #0]
 80223b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80223bc:	b2d9      	uxtb	r1, r3
 80223be:	2909      	cmp	r1, #9
 80223c0:	d92a      	bls.n	8022418 <_strtod_l+0x1b8>
 80223c2:	9905      	ldr	r1, [sp, #20]
 80223c4:	462a      	mov	r2, r5
 80223c6:	f7ff fef9 	bl	80221bc <strncmp>
 80223ca:	b398      	cbz	r0, 8022434 <_strtod_l+0x1d4>
 80223cc:	2000      	movs	r0, #0
 80223ce:	4632      	mov	r2, r6
 80223d0:	463d      	mov	r5, r7
 80223d2:	9005      	str	r0, [sp, #20]
 80223d4:	4603      	mov	r3, r0
 80223d6:	2a65      	cmp	r2, #101	; 0x65
 80223d8:	d001      	beq.n	80223de <_strtod_l+0x17e>
 80223da:	2a45      	cmp	r2, #69	; 0x45
 80223dc:	d118      	bne.n	8022410 <_strtod_l+0x1b0>
 80223de:	b91d      	cbnz	r5, 80223e8 <_strtod_l+0x188>
 80223e0:	9a04      	ldr	r2, [sp, #16]
 80223e2:	4302      	orrs	r2, r0
 80223e4:	d09e      	beq.n	8022324 <_strtod_l+0xc4>
 80223e6:	2500      	movs	r5, #0
 80223e8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80223ec:	f108 0201 	add.w	r2, r8, #1
 80223f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80223f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80223f6:	2a2b      	cmp	r2, #43	; 0x2b
 80223f8:	d075      	beq.n	80224e6 <_strtod_l+0x286>
 80223fa:	2a2d      	cmp	r2, #45	; 0x2d
 80223fc:	d07b      	beq.n	80224f6 <_strtod_l+0x296>
 80223fe:	f04f 0c00 	mov.w	ip, #0
 8022402:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8022406:	2909      	cmp	r1, #9
 8022408:	f240 8082 	bls.w	8022510 <_strtod_l+0x2b0>
 802240c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8022410:	2600      	movs	r6, #0
 8022412:	e09d      	b.n	8022550 <_strtod_l+0x2f0>
 8022414:	2300      	movs	r3, #0
 8022416:	e7c4      	b.n	80223a2 <_strtod_l+0x142>
 8022418:	2f08      	cmp	r7, #8
 802241a:	bfd8      	it	le
 802241c:	9907      	ldrle	r1, [sp, #28]
 802241e:	f100 0001 	add.w	r0, r0, #1
 8022422:	bfda      	itte	le
 8022424:	fb02 3301 	mlale	r3, r2, r1, r3
 8022428:	9307      	strle	r3, [sp, #28]
 802242a:	fb02 3909 	mlagt	r9, r2, r9, r3
 802242e:	3701      	adds	r7, #1
 8022430:	9017      	str	r0, [sp, #92]	; 0x5c
 8022432:	e7bf      	b.n	80223b4 <_strtod_l+0x154>
 8022434:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022436:	195a      	adds	r2, r3, r5
 8022438:	9217      	str	r2, [sp, #92]	; 0x5c
 802243a:	5d5a      	ldrb	r2, [r3, r5]
 802243c:	2f00      	cmp	r7, #0
 802243e:	d037      	beq.n	80224b0 <_strtod_l+0x250>
 8022440:	9005      	str	r0, [sp, #20]
 8022442:	463d      	mov	r5, r7
 8022444:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8022448:	2b09      	cmp	r3, #9
 802244a:	d912      	bls.n	8022472 <_strtod_l+0x212>
 802244c:	2301      	movs	r3, #1
 802244e:	e7c2      	b.n	80223d6 <_strtod_l+0x176>
 8022450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022452:	1c5a      	adds	r2, r3, #1
 8022454:	9217      	str	r2, [sp, #92]	; 0x5c
 8022456:	785a      	ldrb	r2, [r3, #1]
 8022458:	3001      	adds	r0, #1
 802245a:	2a30      	cmp	r2, #48	; 0x30
 802245c:	d0f8      	beq.n	8022450 <_strtod_l+0x1f0>
 802245e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8022462:	2b08      	cmp	r3, #8
 8022464:	f200 84d9 	bhi.w	8022e1a <_strtod_l+0xbba>
 8022468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802246a:	9005      	str	r0, [sp, #20]
 802246c:	2000      	movs	r0, #0
 802246e:	9308      	str	r3, [sp, #32]
 8022470:	4605      	mov	r5, r0
 8022472:	3a30      	subs	r2, #48	; 0x30
 8022474:	f100 0301 	add.w	r3, r0, #1
 8022478:	d014      	beq.n	80224a4 <_strtod_l+0x244>
 802247a:	9905      	ldr	r1, [sp, #20]
 802247c:	4419      	add	r1, r3
 802247e:	9105      	str	r1, [sp, #20]
 8022480:	462b      	mov	r3, r5
 8022482:	eb00 0e05 	add.w	lr, r0, r5
 8022486:	210a      	movs	r1, #10
 8022488:	4573      	cmp	r3, lr
 802248a:	d113      	bne.n	80224b4 <_strtod_l+0x254>
 802248c:	182b      	adds	r3, r5, r0
 802248e:	2b08      	cmp	r3, #8
 8022490:	f105 0501 	add.w	r5, r5, #1
 8022494:	4405      	add	r5, r0
 8022496:	dc1c      	bgt.n	80224d2 <_strtod_l+0x272>
 8022498:	9907      	ldr	r1, [sp, #28]
 802249a:	230a      	movs	r3, #10
 802249c:	fb03 2301 	mla	r3, r3, r1, r2
 80224a0:	9307      	str	r3, [sp, #28]
 80224a2:	2300      	movs	r3, #0
 80224a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80224a6:	1c51      	adds	r1, r2, #1
 80224a8:	9117      	str	r1, [sp, #92]	; 0x5c
 80224aa:	7852      	ldrb	r2, [r2, #1]
 80224ac:	4618      	mov	r0, r3
 80224ae:	e7c9      	b.n	8022444 <_strtod_l+0x1e4>
 80224b0:	4638      	mov	r0, r7
 80224b2:	e7d2      	b.n	802245a <_strtod_l+0x1fa>
 80224b4:	2b08      	cmp	r3, #8
 80224b6:	dc04      	bgt.n	80224c2 <_strtod_l+0x262>
 80224b8:	9e07      	ldr	r6, [sp, #28]
 80224ba:	434e      	muls	r6, r1
 80224bc:	9607      	str	r6, [sp, #28]
 80224be:	3301      	adds	r3, #1
 80224c0:	e7e2      	b.n	8022488 <_strtod_l+0x228>
 80224c2:	f103 0c01 	add.w	ip, r3, #1
 80224c6:	f1bc 0f10 	cmp.w	ip, #16
 80224ca:	bfd8      	it	le
 80224cc:	fb01 f909 	mulle.w	r9, r1, r9
 80224d0:	e7f5      	b.n	80224be <_strtod_l+0x25e>
 80224d2:	2d10      	cmp	r5, #16
 80224d4:	bfdc      	itt	le
 80224d6:	230a      	movle	r3, #10
 80224d8:	fb03 2909 	mlale	r9, r3, r9, r2
 80224dc:	e7e1      	b.n	80224a2 <_strtod_l+0x242>
 80224de:	2300      	movs	r3, #0
 80224e0:	9305      	str	r3, [sp, #20]
 80224e2:	2301      	movs	r3, #1
 80224e4:	e77c      	b.n	80223e0 <_strtod_l+0x180>
 80224e6:	f04f 0c00 	mov.w	ip, #0
 80224ea:	f108 0202 	add.w	r2, r8, #2
 80224ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80224f0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80224f4:	e785      	b.n	8022402 <_strtod_l+0x1a2>
 80224f6:	f04f 0c01 	mov.w	ip, #1
 80224fa:	e7f6      	b.n	80224ea <_strtod_l+0x28a>
 80224fc:	0802792c 	.word	0x0802792c
 8022500:	080277fc 	.word	0x080277fc
 8022504:	7ff00000 	.word	0x7ff00000
 8022508:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802250a:	1c51      	adds	r1, r2, #1
 802250c:	9117      	str	r1, [sp, #92]	; 0x5c
 802250e:	7852      	ldrb	r2, [r2, #1]
 8022510:	2a30      	cmp	r2, #48	; 0x30
 8022512:	d0f9      	beq.n	8022508 <_strtod_l+0x2a8>
 8022514:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8022518:	2908      	cmp	r1, #8
 802251a:	f63f af79 	bhi.w	8022410 <_strtod_l+0x1b0>
 802251e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8022522:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8022524:	9206      	str	r2, [sp, #24]
 8022526:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8022528:	1c51      	adds	r1, r2, #1
 802252a:	9117      	str	r1, [sp, #92]	; 0x5c
 802252c:	7852      	ldrb	r2, [r2, #1]
 802252e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8022532:	2e09      	cmp	r6, #9
 8022534:	d937      	bls.n	80225a6 <_strtod_l+0x346>
 8022536:	9e06      	ldr	r6, [sp, #24]
 8022538:	1b89      	subs	r1, r1, r6
 802253a:	2908      	cmp	r1, #8
 802253c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8022540:	dc02      	bgt.n	8022548 <_strtod_l+0x2e8>
 8022542:	4576      	cmp	r6, lr
 8022544:	bfa8      	it	ge
 8022546:	4676      	movge	r6, lr
 8022548:	f1bc 0f00 	cmp.w	ip, #0
 802254c:	d000      	beq.n	8022550 <_strtod_l+0x2f0>
 802254e:	4276      	negs	r6, r6
 8022550:	2d00      	cmp	r5, #0
 8022552:	d14d      	bne.n	80225f0 <_strtod_l+0x390>
 8022554:	9904      	ldr	r1, [sp, #16]
 8022556:	4301      	orrs	r1, r0
 8022558:	f47f aec6 	bne.w	80222e8 <_strtod_l+0x88>
 802255c:	2b00      	cmp	r3, #0
 802255e:	f47f aee1 	bne.w	8022324 <_strtod_l+0xc4>
 8022562:	2a69      	cmp	r2, #105	; 0x69
 8022564:	d027      	beq.n	80225b6 <_strtod_l+0x356>
 8022566:	dc24      	bgt.n	80225b2 <_strtod_l+0x352>
 8022568:	2a49      	cmp	r2, #73	; 0x49
 802256a:	d024      	beq.n	80225b6 <_strtod_l+0x356>
 802256c:	2a4e      	cmp	r2, #78	; 0x4e
 802256e:	f47f aed9 	bne.w	8022324 <_strtod_l+0xc4>
 8022572:	499f      	ldr	r1, [pc, #636]	; (80227f0 <_strtod_l+0x590>)
 8022574:	a817      	add	r0, sp, #92	; 0x5c
 8022576:	f002 f8ab 	bl	80246d0 <__match>
 802257a:	2800      	cmp	r0, #0
 802257c:	f43f aed2 	beq.w	8022324 <_strtod_l+0xc4>
 8022580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022582:	781b      	ldrb	r3, [r3, #0]
 8022584:	2b28      	cmp	r3, #40	; 0x28
 8022586:	d12d      	bne.n	80225e4 <_strtod_l+0x384>
 8022588:	499a      	ldr	r1, [pc, #616]	; (80227f4 <_strtod_l+0x594>)
 802258a:	aa1a      	add	r2, sp, #104	; 0x68
 802258c:	a817      	add	r0, sp, #92	; 0x5c
 802258e:	f002 f8b3 	bl	80246f8 <__hexnan>
 8022592:	2805      	cmp	r0, #5
 8022594:	d126      	bne.n	80225e4 <_strtod_l+0x384>
 8022596:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022598:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 802259c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80225a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80225a4:	e6a0      	b.n	80222e8 <_strtod_l+0x88>
 80225a6:	210a      	movs	r1, #10
 80225a8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80225ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80225b0:	e7b9      	b.n	8022526 <_strtod_l+0x2c6>
 80225b2:	2a6e      	cmp	r2, #110	; 0x6e
 80225b4:	e7db      	b.n	802256e <_strtod_l+0x30e>
 80225b6:	4990      	ldr	r1, [pc, #576]	; (80227f8 <_strtod_l+0x598>)
 80225b8:	a817      	add	r0, sp, #92	; 0x5c
 80225ba:	f002 f889 	bl	80246d0 <__match>
 80225be:	2800      	cmp	r0, #0
 80225c0:	f43f aeb0 	beq.w	8022324 <_strtod_l+0xc4>
 80225c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80225c6:	498d      	ldr	r1, [pc, #564]	; (80227fc <_strtod_l+0x59c>)
 80225c8:	3b01      	subs	r3, #1
 80225ca:	a817      	add	r0, sp, #92	; 0x5c
 80225cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80225ce:	f002 f87f 	bl	80246d0 <__match>
 80225d2:	b910      	cbnz	r0, 80225da <_strtod_l+0x37a>
 80225d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80225d6:	3301      	adds	r3, #1
 80225d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80225da:	f8df b230 	ldr.w	fp, [pc, #560]	; 802280c <_strtod_l+0x5ac>
 80225de:	f04f 0a00 	mov.w	sl, #0
 80225e2:	e681      	b.n	80222e8 <_strtod_l+0x88>
 80225e4:	4886      	ldr	r0, [pc, #536]	; (8022800 <_strtod_l+0x5a0>)
 80225e6:	f003 f813 	bl	8025610 <nan>
 80225ea:	ec5b ab10 	vmov	sl, fp, d0
 80225ee:	e67b      	b.n	80222e8 <_strtod_l+0x88>
 80225f0:	9b05      	ldr	r3, [sp, #20]
 80225f2:	9807      	ldr	r0, [sp, #28]
 80225f4:	1af3      	subs	r3, r6, r3
 80225f6:	2f00      	cmp	r7, #0
 80225f8:	bf08      	it	eq
 80225fa:	462f      	moveq	r7, r5
 80225fc:	2d10      	cmp	r5, #16
 80225fe:	9306      	str	r3, [sp, #24]
 8022600:	46a8      	mov	r8, r5
 8022602:	bfa8      	it	ge
 8022604:	f04f 0810 	movge.w	r8, #16
 8022608:	f7dd ffac 	bl	8000564 <__aeabi_ui2d>
 802260c:	2d09      	cmp	r5, #9
 802260e:	4682      	mov	sl, r0
 8022610:	468b      	mov	fp, r1
 8022612:	dd13      	ble.n	802263c <_strtod_l+0x3dc>
 8022614:	4b7b      	ldr	r3, [pc, #492]	; (8022804 <_strtod_l+0x5a4>)
 8022616:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802261a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 802261e:	f7de f81b 	bl	8000658 <__aeabi_dmul>
 8022622:	4682      	mov	sl, r0
 8022624:	4648      	mov	r0, r9
 8022626:	468b      	mov	fp, r1
 8022628:	f7dd ff9c 	bl	8000564 <__aeabi_ui2d>
 802262c:	4602      	mov	r2, r0
 802262e:	460b      	mov	r3, r1
 8022630:	4650      	mov	r0, sl
 8022632:	4659      	mov	r1, fp
 8022634:	f7dd fe5a 	bl	80002ec <__adddf3>
 8022638:	4682      	mov	sl, r0
 802263a:	468b      	mov	fp, r1
 802263c:	2d0f      	cmp	r5, #15
 802263e:	dc38      	bgt.n	80226b2 <_strtod_l+0x452>
 8022640:	9b06      	ldr	r3, [sp, #24]
 8022642:	2b00      	cmp	r3, #0
 8022644:	f43f ae50 	beq.w	80222e8 <_strtod_l+0x88>
 8022648:	dd24      	ble.n	8022694 <_strtod_l+0x434>
 802264a:	2b16      	cmp	r3, #22
 802264c:	dc0b      	bgt.n	8022666 <_strtod_l+0x406>
 802264e:	496d      	ldr	r1, [pc, #436]	; (8022804 <_strtod_l+0x5a4>)
 8022650:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8022654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022658:	4652      	mov	r2, sl
 802265a:	465b      	mov	r3, fp
 802265c:	f7dd fffc 	bl	8000658 <__aeabi_dmul>
 8022660:	4682      	mov	sl, r0
 8022662:	468b      	mov	fp, r1
 8022664:	e640      	b.n	80222e8 <_strtod_l+0x88>
 8022666:	9a06      	ldr	r2, [sp, #24]
 8022668:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 802266c:	4293      	cmp	r3, r2
 802266e:	db20      	blt.n	80226b2 <_strtod_l+0x452>
 8022670:	4c64      	ldr	r4, [pc, #400]	; (8022804 <_strtod_l+0x5a4>)
 8022672:	f1c5 050f 	rsb	r5, r5, #15
 8022676:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 802267a:	4652      	mov	r2, sl
 802267c:	465b      	mov	r3, fp
 802267e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022682:	f7dd ffe9 	bl	8000658 <__aeabi_dmul>
 8022686:	9b06      	ldr	r3, [sp, #24]
 8022688:	1b5d      	subs	r5, r3, r5
 802268a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 802268e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8022692:	e7e3      	b.n	802265c <_strtod_l+0x3fc>
 8022694:	9b06      	ldr	r3, [sp, #24]
 8022696:	3316      	adds	r3, #22
 8022698:	db0b      	blt.n	80226b2 <_strtod_l+0x452>
 802269a:	9b05      	ldr	r3, [sp, #20]
 802269c:	1b9e      	subs	r6, r3, r6
 802269e:	4b59      	ldr	r3, [pc, #356]	; (8022804 <_strtod_l+0x5a4>)
 80226a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80226a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80226a8:	4650      	mov	r0, sl
 80226aa:	4659      	mov	r1, fp
 80226ac:	f7de f8fe 	bl	80008ac <__aeabi_ddiv>
 80226b0:	e7d6      	b.n	8022660 <_strtod_l+0x400>
 80226b2:	9b06      	ldr	r3, [sp, #24]
 80226b4:	eba5 0808 	sub.w	r8, r5, r8
 80226b8:	4498      	add	r8, r3
 80226ba:	f1b8 0f00 	cmp.w	r8, #0
 80226be:	dd74      	ble.n	80227aa <_strtod_l+0x54a>
 80226c0:	f018 030f 	ands.w	r3, r8, #15
 80226c4:	d00a      	beq.n	80226dc <_strtod_l+0x47c>
 80226c6:	494f      	ldr	r1, [pc, #316]	; (8022804 <_strtod_l+0x5a4>)
 80226c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80226cc:	4652      	mov	r2, sl
 80226ce:	465b      	mov	r3, fp
 80226d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80226d4:	f7dd ffc0 	bl	8000658 <__aeabi_dmul>
 80226d8:	4682      	mov	sl, r0
 80226da:	468b      	mov	fp, r1
 80226dc:	f038 080f 	bics.w	r8, r8, #15
 80226e0:	d04f      	beq.n	8022782 <_strtod_l+0x522>
 80226e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80226e6:	dd22      	ble.n	802272e <_strtod_l+0x4ce>
 80226e8:	2500      	movs	r5, #0
 80226ea:	462e      	mov	r6, r5
 80226ec:	9507      	str	r5, [sp, #28]
 80226ee:	9505      	str	r5, [sp, #20]
 80226f0:	2322      	movs	r3, #34	; 0x22
 80226f2:	f8df b118 	ldr.w	fp, [pc, #280]	; 802280c <_strtod_l+0x5ac>
 80226f6:	6023      	str	r3, [r4, #0]
 80226f8:	f04f 0a00 	mov.w	sl, #0
 80226fc:	9b07      	ldr	r3, [sp, #28]
 80226fe:	2b00      	cmp	r3, #0
 8022700:	f43f adf2 	beq.w	80222e8 <_strtod_l+0x88>
 8022704:	9918      	ldr	r1, [sp, #96]	; 0x60
 8022706:	4620      	mov	r0, r4
 8022708:	f002 f96c 	bl	80249e4 <_Bfree>
 802270c:	9905      	ldr	r1, [sp, #20]
 802270e:	4620      	mov	r0, r4
 8022710:	f002 f968 	bl	80249e4 <_Bfree>
 8022714:	4631      	mov	r1, r6
 8022716:	4620      	mov	r0, r4
 8022718:	f002 f964 	bl	80249e4 <_Bfree>
 802271c:	9907      	ldr	r1, [sp, #28]
 802271e:	4620      	mov	r0, r4
 8022720:	f002 f960 	bl	80249e4 <_Bfree>
 8022724:	4629      	mov	r1, r5
 8022726:	4620      	mov	r0, r4
 8022728:	f002 f95c 	bl	80249e4 <_Bfree>
 802272c:	e5dc      	b.n	80222e8 <_strtod_l+0x88>
 802272e:	4b36      	ldr	r3, [pc, #216]	; (8022808 <_strtod_l+0x5a8>)
 8022730:	9304      	str	r3, [sp, #16]
 8022732:	2300      	movs	r3, #0
 8022734:	ea4f 1828 	mov.w	r8, r8, asr #4
 8022738:	4650      	mov	r0, sl
 802273a:	4659      	mov	r1, fp
 802273c:	4699      	mov	r9, r3
 802273e:	f1b8 0f01 	cmp.w	r8, #1
 8022742:	dc21      	bgt.n	8022788 <_strtod_l+0x528>
 8022744:	b10b      	cbz	r3, 802274a <_strtod_l+0x4ea>
 8022746:	4682      	mov	sl, r0
 8022748:	468b      	mov	fp, r1
 802274a:	4b2f      	ldr	r3, [pc, #188]	; (8022808 <_strtod_l+0x5a8>)
 802274c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8022750:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8022754:	4652      	mov	r2, sl
 8022756:	465b      	mov	r3, fp
 8022758:	e9d9 0100 	ldrd	r0, r1, [r9]
 802275c:	f7dd ff7c 	bl	8000658 <__aeabi_dmul>
 8022760:	4b2a      	ldr	r3, [pc, #168]	; (802280c <_strtod_l+0x5ac>)
 8022762:	460a      	mov	r2, r1
 8022764:	400b      	ands	r3, r1
 8022766:	492a      	ldr	r1, [pc, #168]	; (8022810 <_strtod_l+0x5b0>)
 8022768:	428b      	cmp	r3, r1
 802276a:	4682      	mov	sl, r0
 802276c:	d8bc      	bhi.n	80226e8 <_strtod_l+0x488>
 802276e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8022772:	428b      	cmp	r3, r1
 8022774:	bf86      	itte	hi
 8022776:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8022814 <_strtod_l+0x5b4>
 802277a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 802277e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8022782:	2300      	movs	r3, #0
 8022784:	9304      	str	r3, [sp, #16]
 8022786:	e084      	b.n	8022892 <_strtod_l+0x632>
 8022788:	f018 0f01 	tst.w	r8, #1
 802278c:	d005      	beq.n	802279a <_strtod_l+0x53a>
 802278e:	9b04      	ldr	r3, [sp, #16]
 8022790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022794:	f7dd ff60 	bl	8000658 <__aeabi_dmul>
 8022798:	2301      	movs	r3, #1
 802279a:	9a04      	ldr	r2, [sp, #16]
 802279c:	3208      	adds	r2, #8
 802279e:	f109 0901 	add.w	r9, r9, #1
 80227a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80227a6:	9204      	str	r2, [sp, #16]
 80227a8:	e7c9      	b.n	802273e <_strtod_l+0x4de>
 80227aa:	d0ea      	beq.n	8022782 <_strtod_l+0x522>
 80227ac:	f1c8 0800 	rsb	r8, r8, #0
 80227b0:	f018 020f 	ands.w	r2, r8, #15
 80227b4:	d00a      	beq.n	80227cc <_strtod_l+0x56c>
 80227b6:	4b13      	ldr	r3, [pc, #76]	; (8022804 <_strtod_l+0x5a4>)
 80227b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80227bc:	4650      	mov	r0, sl
 80227be:	4659      	mov	r1, fp
 80227c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227c4:	f7de f872 	bl	80008ac <__aeabi_ddiv>
 80227c8:	4682      	mov	sl, r0
 80227ca:	468b      	mov	fp, r1
 80227cc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80227d0:	d0d7      	beq.n	8022782 <_strtod_l+0x522>
 80227d2:	f1b8 0f1f 	cmp.w	r8, #31
 80227d6:	dd1f      	ble.n	8022818 <_strtod_l+0x5b8>
 80227d8:	2500      	movs	r5, #0
 80227da:	462e      	mov	r6, r5
 80227dc:	9507      	str	r5, [sp, #28]
 80227de:	9505      	str	r5, [sp, #20]
 80227e0:	2322      	movs	r3, #34	; 0x22
 80227e2:	f04f 0a00 	mov.w	sl, #0
 80227e6:	f04f 0b00 	mov.w	fp, #0
 80227ea:	6023      	str	r3, [r4, #0]
 80227ec:	e786      	b.n	80226fc <_strtod_l+0x49c>
 80227ee:	bf00      	nop
 80227f0:	0802775e 	.word	0x0802775e
 80227f4:	08027810 	.word	0x08027810
 80227f8:	08027756 	.word	0x08027756
 80227fc:	08027853 	.word	0x08027853
 8022800:	080275d9 	.word	0x080275d9
 8022804:	080279c8 	.word	0x080279c8
 8022808:	080279a0 	.word	0x080279a0
 802280c:	7ff00000 	.word	0x7ff00000
 8022810:	7ca00000 	.word	0x7ca00000
 8022814:	7fefffff 	.word	0x7fefffff
 8022818:	f018 0310 	ands.w	r3, r8, #16
 802281c:	bf18      	it	ne
 802281e:	236a      	movne	r3, #106	; 0x6a
 8022820:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8022bd0 <_strtod_l+0x970>
 8022824:	9304      	str	r3, [sp, #16]
 8022826:	4650      	mov	r0, sl
 8022828:	4659      	mov	r1, fp
 802282a:	2300      	movs	r3, #0
 802282c:	f018 0f01 	tst.w	r8, #1
 8022830:	d004      	beq.n	802283c <_strtod_l+0x5dc>
 8022832:	e9d9 2300 	ldrd	r2, r3, [r9]
 8022836:	f7dd ff0f 	bl	8000658 <__aeabi_dmul>
 802283a:	2301      	movs	r3, #1
 802283c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8022840:	f109 0908 	add.w	r9, r9, #8
 8022844:	d1f2      	bne.n	802282c <_strtod_l+0x5cc>
 8022846:	b10b      	cbz	r3, 802284c <_strtod_l+0x5ec>
 8022848:	4682      	mov	sl, r0
 802284a:	468b      	mov	fp, r1
 802284c:	9b04      	ldr	r3, [sp, #16]
 802284e:	b1c3      	cbz	r3, 8022882 <_strtod_l+0x622>
 8022850:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8022854:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8022858:	2b00      	cmp	r3, #0
 802285a:	4659      	mov	r1, fp
 802285c:	dd11      	ble.n	8022882 <_strtod_l+0x622>
 802285e:	2b1f      	cmp	r3, #31
 8022860:	f340 8124 	ble.w	8022aac <_strtod_l+0x84c>
 8022864:	2b34      	cmp	r3, #52	; 0x34
 8022866:	bfde      	ittt	le
 8022868:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 802286c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8022870:	fa03 f202 	lslle.w	r2, r3, r2
 8022874:	f04f 0a00 	mov.w	sl, #0
 8022878:	bfcc      	ite	gt
 802287a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 802287e:	ea02 0b01 	andle.w	fp, r2, r1
 8022882:	2200      	movs	r2, #0
 8022884:	2300      	movs	r3, #0
 8022886:	4650      	mov	r0, sl
 8022888:	4659      	mov	r1, fp
 802288a:	f7de f94d 	bl	8000b28 <__aeabi_dcmpeq>
 802288e:	2800      	cmp	r0, #0
 8022890:	d1a2      	bne.n	80227d8 <_strtod_l+0x578>
 8022892:	9b07      	ldr	r3, [sp, #28]
 8022894:	9300      	str	r3, [sp, #0]
 8022896:	9908      	ldr	r1, [sp, #32]
 8022898:	462b      	mov	r3, r5
 802289a:	463a      	mov	r2, r7
 802289c:	4620      	mov	r0, r4
 802289e:	f002 f909 	bl	8024ab4 <__s2b>
 80228a2:	9007      	str	r0, [sp, #28]
 80228a4:	2800      	cmp	r0, #0
 80228a6:	f43f af1f 	beq.w	80226e8 <_strtod_l+0x488>
 80228aa:	9b05      	ldr	r3, [sp, #20]
 80228ac:	1b9e      	subs	r6, r3, r6
 80228ae:	9b06      	ldr	r3, [sp, #24]
 80228b0:	2b00      	cmp	r3, #0
 80228b2:	bfb4      	ite	lt
 80228b4:	4633      	movlt	r3, r6
 80228b6:	2300      	movge	r3, #0
 80228b8:	930c      	str	r3, [sp, #48]	; 0x30
 80228ba:	9b06      	ldr	r3, [sp, #24]
 80228bc:	2500      	movs	r5, #0
 80228be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80228c2:	9312      	str	r3, [sp, #72]	; 0x48
 80228c4:	462e      	mov	r6, r5
 80228c6:	9b07      	ldr	r3, [sp, #28]
 80228c8:	4620      	mov	r0, r4
 80228ca:	6859      	ldr	r1, [r3, #4]
 80228cc:	f002 f84a 	bl	8024964 <_Balloc>
 80228d0:	9005      	str	r0, [sp, #20]
 80228d2:	2800      	cmp	r0, #0
 80228d4:	f43f af0c 	beq.w	80226f0 <_strtod_l+0x490>
 80228d8:	9b07      	ldr	r3, [sp, #28]
 80228da:	691a      	ldr	r2, [r3, #16]
 80228dc:	3202      	adds	r2, #2
 80228de:	f103 010c 	add.w	r1, r3, #12
 80228e2:	0092      	lsls	r2, r2, #2
 80228e4:	300c      	adds	r0, #12
 80228e6:	f7fe f9eb 	bl	8020cc0 <memcpy>
 80228ea:	ec4b ab10 	vmov	d0, sl, fp
 80228ee:	aa1a      	add	r2, sp, #104	; 0x68
 80228f0:	a919      	add	r1, sp, #100	; 0x64
 80228f2:	4620      	mov	r0, r4
 80228f4:	f002 fc24 	bl	8025140 <__d2b>
 80228f8:	ec4b ab18 	vmov	d8, sl, fp
 80228fc:	9018      	str	r0, [sp, #96]	; 0x60
 80228fe:	2800      	cmp	r0, #0
 8022900:	f43f aef6 	beq.w	80226f0 <_strtod_l+0x490>
 8022904:	2101      	movs	r1, #1
 8022906:	4620      	mov	r0, r4
 8022908:	f002 f96e 	bl	8024be8 <__i2b>
 802290c:	4606      	mov	r6, r0
 802290e:	2800      	cmp	r0, #0
 8022910:	f43f aeee 	beq.w	80226f0 <_strtod_l+0x490>
 8022914:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022916:	9904      	ldr	r1, [sp, #16]
 8022918:	2b00      	cmp	r3, #0
 802291a:	bfab      	itete	ge
 802291c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 802291e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8022920:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8022922:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8022926:	bfac      	ite	ge
 8022928:	eb03 0902 	addge.w	r9, r3, r2
 802292c:	1ad7      	sublt	r7, r2, r3
 802292e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8022930:	eba3 0801 	sub.w	r8, r3, r1
 8022934:	4490      	add	r8, r2
 8022936:	4ba1      	ldr	r3, [pc, #644]	; (8022bbc <_strtod_l+0x95c>)
 8022938:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 802293c:	4598      	cmp	r8, r3
 802293e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8022942:	f280 80c7 	bge.w	8022ad4 <_strtod_l+0x874>
 8022946:	eba3 0308 	sub.w	r3, r3, r8
 802294a:	2b1f      	cmp	r3, #31
 802294c:	eba2 0203 	sub.w	r2, r2, r3
 8022950:	f04f 0101 	mov.w	r1, #1
 8022954:	f300 80b1 	bgt.w	8022aba <_strtod_l+0x85a>
 8022958:	fa01 f303 	lsl.w	r3, r1, r3
 802295c:	930d      	str	r3, [sp, #52]	; 0x34
 802295e:	2300      	movs	r3, #0
 8022960:	9308      	str	r3, [sp, #32]
 8022962:	eb09 0802 	add.w	r8, r9, r2
 8022966:	9b04      	ldr	r3, [sp, #16]
 8022968:	45c1      	cmp	r9, r8
 802296a:	4417      	add	r7, r2
 802296c:	441f      	add	r7, r3
 802296e:	464b      	mov	r3, r9
 8022970:	bfa8      	it	ge
 8022972:	4643      	movge	r3, r8
 8022974:	42bb      	cmp	r3, r7
 8022976:	bfa8      	it	ge
 8022978:	463b      	movge	r3, r7
 802297a:	2b00      	cmp	r3, #0
 802297c:	bfc2      	ittt	gt
 802297e:	eba8 0803 	subgt.w	r8, r8, r3
 8022982:	1aff      	subgt	r7, r7, r3
 8022984:	eba9 0903 	subgt.w	r9, r9, r3
 8022988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802298a:	2b00      	cmp	r3, #0
 802298c:	dd17      	ble.n	80229be <_strtod_l+0x75e>
 802298e:	4631      	mov	r1, r6
 8022990:	461a      	mov	r2, r3
 8022992:	4620      	mov	r0, r4
 8022994:	f002 f9e8 	bl	8024d68 <__pow5mult>
 8022998:	4606      	mov	r6, r0
 802299a:	2800      	cmp	r0, #0
 802299c:	f43f aea8 	beq.w	80226f0 <_strtod_l+0x490>
 80229a0:	4601      	mov	r1, r0
 80229a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80229a4:	4620      	mov	r0, r4
 80229a6:	f002 f935 	bl	8024c14 <__multiply>
 80229aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80229ac:	2800      	cmp	r0, #0
 80229ae:	f43f ae9f 	beq.w	80226f0 <_strtod_l+0x490>
 80229b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80229b4:	4620      	mov	r0, r4
 80229b6:	f002 f815 	bl	80249e4 <_Bfree>
 80229ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80229bc:	9318      	str	r3, [sp, #96]	; 0x60
 80229be:	f1b8 0f00 	cmp.w	r8, #0
 80229c2:	f300 808c 	bgt.w	8022ade <_strtod_l+0x87e>
 80229c6:	9b06      	ldr	r3, [sp, #24]
 80229c8:	2b00      	cmp	r3, #0
 80229ca:	dd08      	ble.n	80229de <_strtod_l+0x77e>
 80229cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80229ce:	9905      	ldr	r1, [sp, #20]
 80229d0:	4620      	mov	r0, r4
 80229d2:	f002 f9c9 	bl	8024d68 <__pow5mult>
 80229d6:	9005      	str	r0, [sp, #20]
 80229d8:	2800      	cmp	r0, #0
 80229da:	f43f ae89 	beq.w	80226f0 <_strtod_l+0x490>
 80229de:	2f00      	cmp	r7, #0
 80229e0:	dd08      	ble.n	80229f4 <_strtod_l+0x794>
 80229e2:	9905      	ldr	r1, [sp, #20]
 80229e4:	463a      	mov	r2, r7
 80229e6:	4620      	mov	r0, r4
 80229e8:	f002 fa18 	bl	8024e1c <__lshift>
 80229ec:	9005      	str	r0, [sp, #20]
 80229ee:	2800      	cmp	r0, #0
 80229f0:	f43f ae7e 	beq.w	80226f0 <_strtod_l+0x490>
 80229f4:	f1b9 0f00 	cmp.w	r9, #0
 80229f8:	dd08      	ble.n	8022a0c <_strtod_l+0x7ac>
 80229fa:	4631      	mov	r1, r6
 80229fc:	464a      	mov	r2, r9
 80229fe:	4620      	mov	r0, r4
 8022a00:	f002 fa0c 	bl	8024e1c <__lshift>
 8022a04:	4606      	mov	r6, r0
 8022a06:	2800      	cmp	r0, #0
 8022a08:	f43f ae72 	beq.w	80226f0 <_strtod_l+0x490>
 8022a0c:	9a05      	ldr	r2, [sp, #20]
 8022a0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8022a10:	4620      	mov	r0, r4
 8022a12:	f002 fa8f 	bl	8024f34 <__mdiff>
 8022a16:	4605      	mov	r5, r0
 8022a18:	2800      	cmp	r0, #0
 8022a1a:	f43f ae69 	beq.w	80226f0 <_strtod_l+0x490>
 8022a1e:	68c3      	ldr	r3, [r0, #12]
 8022a20:	930b      	str	r3, [sp, #44]	; 0x2c
 8022a22:	2300      	movs	r3, #0
 8022a24:	60c3      	str	r3, [r0, #12]
 8022a26:	4631      	mov	r1, r6
 8022a28:	f002 fa68 	bl	8024efc <__mcmp>
 8022a2c:	2800      	cmp	r0, #0
 8022a2e:	da60      	bge.n	8022af2 <_strtod_l+0x892>
 8022a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022a32:	ea53 030a 	orrs.w	r3, r3, sl
 8022a36:	f040 8082 	bne.w	8022b3e <_strtod_l+0x8de>
 8022a3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8022a3e:	2b00      	cmp	r3, #0
 8022a40:	d17d      	bne.n	8022b3e <_strtod_l+0x8de>
 8022a42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8022a46:	0d1b      	lsrs	r3, r3, #20
 8022a48:	051b      	lsls	r3, r3, #20
 8022a4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8022a4e:	d976      	bls.n	8022b3e <_strtod_l+0x8de>
 8022a50:	696b      	ldr	r3, [r5, #20]
 8022a52:	b913      	cbnz	r3, 8022a5a <_strtod_l+0x7fa>
 8022a54:	692b      	ldr	r3, [r5, #16]
 8022a56:	2b01      	cmp	r3, #1
 8022a58:	dd71      	ble.n	8022b3e <_strtod_l+0x8de>
 8022a5a:	4629      	mov	r1, r5
 8022a5c:	2201      	movs	r2, #1
 8022a5e:	4620      	mov	r0, r4
 8022a60:	f002 f9dc 	bl	8024e1c <__lshift>
 8022a64:	4631      	mov	r1, r6
 8022a66:	4605      	mov	r5, r0
 8022a68:	f002 fa48 	bl	8024efc <__mcmp>
 8022a6c:	2800      	cmp	r0, #0
 8022a6e:	dd66      	ble.n	8022b3e <_strtod_l+0x8de>
 8022a70:	9904      	ldr	r1, [sp, #16]
 8022a72:	4a53      	ldr	r2, [pc, #332]	; (8022bc0 <_strtod_l+0x960>)
 8022a74:	465b      	mov	r3, fp
 8022a76:	2900      	cmp	r1, #0
 8022a78:	f000 8081 	beq.w	8022b7e <_strtod_l+0x91e>
 8022a7c:	ea02 010b 	and.w	r1, r2, fp
 8022a80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8022a84:	dc7b      	bgt.n	8022b7e <_strtod_l+0x91e>
 8022a86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8022a8a:	f77f aea9 	ble.w	80227e0 <_strtod_l+0x580>
 8022a8e:	4b4d      	ldr	r3, [pc, #308]	; (8022bc4 <_strtod_l+0x964>)
 8022a90:	4650      	mov	r0, sl
 8022a92:	4659      	mov	r1, fp
 8022a94:	2200      	movs	r2, #0
 8022a96:	f7dd fddf 	bl	8000658 <__aeabi_dmul>
 8022a9a:	460b      	mov	r3, r1
 8022a9c:	4303      	orrs	r3, r0
 8022a9e:	bf08      	it	eq
 8022aa0:	2322      	moveq	r3, #34	; 0x22
 8022aa2:	4682      	mov	sl, r0
 8022aa4:	468b      	mov	fp, r1
 8022aa6:	bf08      	it	eq
 8022aa8:	6023      	streq	r3, [r4, #0]
 8022aaa:	e62b      	b.n	8022704 <_strtod_l+0x4a4>
 8022aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8022ab4:	ea03 0a0a 	and.w	sl, r3, sl
 8022ab8:	e6e3      	b.n	8022882 <_strtod_l+0x622>
 8022aba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8022abe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8022ac2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8022ac6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8022aca:	fa01 f308 	lsl.w	r3, r1, r8
 8022ace:	9308      	str	r3, [sp, #32]
 8022ad0:	910d      	str	r1, [sp, #52]	; 0x34
 8022ad2:	e746      	b.n	8022962 <_strtod_l+0x702>
 8022ad4:	2300      	movs	r3, #0
 8022ad6:	9308      	str	r3, [sp, #32]
 8022ad8:	2301      	movs	r3, #1
 8022ada:	930d      	str	r3, [sp, #52]	; 0x34
 8022adc:	e741      	b.n	8022962 <_strtod_l+0x702>
 8022ade:	9918      	ldr	r1, [sp, #96]	; 0x60
 8022ae0:	4642      	mov	r2, r8
 8022ae2:	4620      	mov	r0, r4
 8022ae4:	f002 f99a 	bl	8024e1c <__lshift>
 8022ae8:	9018      	str	r0, [sp, #96]	; 0x60
 8022aea:	2800      	cmp	r0, #0
 8022aec:	f47f af6b 	bne.w	80229c6 <_strtod_l+0x766>
 8022af0:	e5fe      	b.n	80226f0 <_strtod_l+0x490>
 8022af2:	465f      	mov	r7, fp
 8022af4:	d16e      	bne.n	8022bd4 <_strtod_l+0x974>
 8022af6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022af8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8022afc:	b342      	cbz	r2, 8022b50 <_strtod_l+0x8f0>
 8022afe:	4a32      	ldr	r2, [pc, #200]	; (8022bc8 <_strtod_l+0x968>)
 8022b00:	4293      	cmp	r3, r2
 8022b02:	d128      	bne.n	8022b56 <_strtod_l+0x8f6>
 8022b04:	9b04      	ldr	r3, [sp, #16]
 8022b06:	4651      	mov	r1, sl
 8022b08:	b1eb      	cbz	r3, 8022b46 <_strtod_l+0x8e6>
 8022b0a:	4b2d      	ldr	r3, [pc, #180]	; (8022bc0 <_strtod_l+0x960>)
 8022b0c:	403b      	ands	r3, r7
 8022b0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8022b12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022b16:	d819      	bhi.n	8022b4c <_strtod_l+0x8ec>
 8022b18:	0d1b      	lsrs	r3, r3, #20
 8022b1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8022b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8022b22:	4299      	cmp	r1, r3
 8022b24:	d117      	bne.n	8022b56 <_strtod_l+0x8f6>
 8022b26:	4b29      	ldr	r3, [pc, #164]	; (8022bcc <_strtod_l+0x96c>)
 8022b28:	429f      	cmp	r7, r3
 8022b2a:	d102      	bne.n	8022b32 <_strtod_l+0x8d2>
 8022b2c:	3101      	adds	r1, #1
 8022b2e:	f43f addf 	beq.w	80226f0 <_strtod_l+0x490>
 8022b32:	4b23      	ldr	r3, [pc, #140]	; (8022bc0 <_strtod_l+0x960>)
 8022b34:	403b      	ands	r3, r7
 8022b36:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8022b3a:	f04f 0a00 	mov.w	sl, #0
 8022b3e:	9b04      	ldr	r3, [sp, #16]
 8022b40:	2b00      	cmp	r3, #0
 8022b42:	d1a4      	bne.n	8022a8e <_strtod_l+0x82e>
 8022b44:	e5de      	b.n	8022704 <_strtod_l+0x4a4>
 8022b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022b4a:	e7ea      	b.n	8022b22 <_strtod_l+0x8c2>
 8022b4c:	4613      	mov	r3, r2
 8022b4e:	e7e8      	b.n	8022b22 <_strtod_l+0x8c2>
 8022b50:	ea53 030a 	orrs.w	r3, r3, sl
 8022b54:	d08c      	beq.n	8022a70 <_strtod_l+0x810>
 8022b56:	9b08      	ldr	r3, [sp, #32]
 8022b58:	b1db      	cbz	r3, 8022b92 <_strtod_l+0x932>
 8022b5a:	423b      	tst	r3, r7
 8022b5c:	d0ef      	beq.n	8022b3e <_strtod_l+0x8de>
 8022b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022b60:	9a04      	ldr	r2, [sp, #16]
 8022b62:	4650      	mov	r0, sl
 8022b64:	4659      	mov	r1, fp
 8022b66:	b1c3      	cbz	r3, 8022b9a <_strtod_l+0x93a>
 8022b68:	f7ff fb5e 	bl	8022228 <sulp>
 8022b6c:	4602      	mov	r2, r0
 8022b6e:	460b      	mov	r3, r1
 8022b70:	ec51 0b18 	vmov	r0, r1, d8
 8022b74:	f7dd fbba 	bl	80002ec <__adddf3>
 8022b78:	4682      	mov	sl, r0
 8022b7a:	468b      	mov	fp, r1
 8022b7c:	e7df      	b.n	8022b3e <_strtod_l+0x8de>
 8022b7e:	4013      	ands	r3, r2
 8022b80:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8022b84:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8022b88:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8022b8c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8022b90:	e7d5      	b.n	8022b3e <_strtod_l+0x8de>
 8022b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022b94:	ea13 0f0a 	tst.w	r3, sl
 8022b98:	e7e0      	b.n	8022b5c <_strtod_l+0x8fc>
 8022b9a:	f7ff fb45 	bl	8022228 <sulp>
 8022b9e:	4602      	mov	r2, r0
 8022ba0:	460b      	mov	r3, r1
 8022ba2:	ec51 0b18 	vmov	r0, r1, d8
 8022ba6:	f7dd fb9f 	bl	80002e8 <__aeabi_dsub>
 8022baa:	2200      	movs	r2, #0
 8022bac:	2300      	movs	r3, #0
 8022bae:	4682      	mov	sl, r0
 8022bb0:	468b      	mov	fp, r1
 8022bb2:	f7dd ffb9 	bl	8000b28 <__aeabi_dcmpeq>
 8022bb6:	2800      	cmp	r0, #0
 8022bb8:	d0c1      	beq.n	8022b3e <_strtod_l+0x8de>
 8022bba:	e611      	b.n	80227e0 <_strtod_l+0x580>
 8022bbc:	fffffc02 	.word	0xfffffc02
 8022bc0:	7ff00000 	.word	0x7ff00000
 8022bc4:	39500000 	.word	0x39500000
 8022bc8:	000fffff 	.word	0x000fffff
 8022bcc:	7fefffff 	.word	0x7fefffff
 8022bd0:	08027828 	.word	0x08027828
 8022bd4:	4631      	mov	r1, r6
 8022bd6:	4628      	mov	r0, r5
 8022bd8:	f002 fb0e 	bl	80251f8 <__ratio>
 8022bdc:	ec59 8b10 	vmov	r8, r9, d0
 8022be0:	ee10 0a10 	vmov	r0, s0
 8022be4:	2200      	movs	r2, #0
 8022be6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8022bea:	4649      	mov	r1, r9
 8022bec:	f7dd ffb0 	bl	8000b50 <__aeabi_dcmple>
 8022bf0:	2800      	cmp	r0, #0
 8022bf2:	d07a      	beq.n	8022cea <_strtod_l+0xa8a>
 8022bf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022bf6:	2b00      	cmp	r3, #0
 8022bf8:	d04a      	beq.n	8022c90 <_strtod_l+0xa30>
 8022bfa:	4b95      	ldr	r3, [pc, #596]	; (8022e50 <_strtod_l+0xbf0>)
 8022bfc:	2200      	movs	r2, #0
 8022bfe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022c02:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8022e50 <_strtod_l+0xbf0>
 8022c06:	f04f 0800 	mov.w	r8, #0
 8022c0a:	4b92      	ldr	r3, [pc, #584]	; (8022e54 <_strtod_l+0xbf4>)
 8022c0c:	403b      	ands	r3, r7
 8022c0e:	930d      	str	r3, [sp, #52]	; 0x34
 8022c10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022c12:	4b91      	ldr	r3, [pc, #580]	; (8022e58 <_strtod_l+0xbf8>)
 8022c14:	429a      	cmp	r2, r3
 8022c16:	f040 80b0 	bne.w	8022d7a <_strtod_l+0xb1a>
 8022c1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8022c1e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8022c22:	ec4b ab10 	vmov	d0, sl, fp
 8022c26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022c2a:	f002 fa0d 	bl	8025048 <__ulp>
 8022c2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8022c32:	ec53 2b10 	vmov	r2, r3, d0
 8022c36:	f7dd fd0f 	bl	8000658 <__aeabi_dmul>
 8022c3a:	4652      	mov	r2, sl
 8022c3c:	465b      	mov	r3, fp
 8022c3e:	f7dd fb55 	bl	80002ec <__adddf3>
 8022c42:	460b      	mov	r3, r1
 8022c44:	4983      	ldr	r1, [pc, #524]	; (8022e54 <_strtod_l+0xbf4>)
 8022c46:	4a85      	ldr	r2, [pc, #532]	; (8022e5c <_strtod_l+0xbfc>)
 8022c48:	4019      	ands	r1, r3
 8022c4a:	4291      	cmp	r1, r2
 8022c4c:	4682      	mov	sl, r0
 8022c4e:	d960      	bls.n	8022d12 <_strtod_l+0xab2>
 8022c50:	ee18 3a90 	vmov	r3, s17
 8022c54:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8022c58:	4293      	cmp	r3, r2
 8022c5a:	d104      	bne.n	8022c66 <_strtod_l+0xa06>
 8022c5c:	ee18 3a10 	vmov	r3, s16
 8022c60:	3301      	adds	r3, #1
 8022c62:	f43f ad45 	beq.w	80226f0 <_strtod_l+0x490>
 8022c66:	f8df b200 	ldr.w	fp, [pc, #512]	; 8022e68 <_strtod_l+0xc08>
 8022c6a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8022c6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8022c70:	4620      	mov	r0, r4
 8022c72:	f001 feb7 	bl	80249e4 <_Bfree>
 8022c76:	9905      	ldr	r1, [sp, #20]
 8022c78:	4620      	mov	r0, r4
 8022c7a:	f001 feb3 	bl	80249e4 <_Bfree>
 8022c7e:	4631      	mov	r1, r6
 8022c80:	4620      	mov	r0, r4
 8022c82:	f001 feaf 	bl	80249e4 <_Bfree>
 8022c86:	4629      	mov	r1, r5
 8022c88:	4620      	mov	r0, r4
 8022c8a:	f001 feab 	bl	80249e4 <_Bfree>
 8022c8e:	e61a      	b.n	80228c6 <_strtod_l+0x666>
 8022c90:	f1ba 0f00 	cmp.w	sl, #0
 8022c94:	d11b      	bne.n	8022cce <_strtod_l+0xa6e>
 8022c96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8022c9a:	b9f3      	cbnz	r3, 8022cda <_strtod_l+0xa7a>
 8022c9c:	4b6c      	ldr	r3, [pc, #432]	; (8022e50 <_strtod_l+0xbf0>)
 8022c9e:	2200      	movs	r2, #0
 8022ca0:	4640      	mov	r0, r8
 8022ca2:	4649      	mov	r1, r9
 8022ca4:	f7dd ff4a 	bl	8000b3c <__aeabi_dcmplt>
 8022ca8:	b9d0      	cbnz	r0, 8022ce0 <_strtod_l+0xa80>
 8022caa:	4640      	mov	r0, r8
 8022cac:	4649      	mov	r1, r9
 8022cae:	4b6c      	ldr	r3, [pc, #432]	; (8022e60 <_strtod_l+0xc00>)
 8022cb0:	2200      	movs	r2, #0
 8022cb2:	f7dd fcd1 	bl	8000658 <__aeabi_dmul>
 8022cb6:	4680      	mov	r8, r0
 8022cb8:	4689      	mov	r9, r1
 8022cba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8022cbe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8022cc2:	9315      	str	r3, [sp, #84]	; 0x54
 8022cc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8022cc8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022ccc:	e79d      	b.n	8022c0a <_strtod_l+0x9aa>
 8022cce:	f1ba 0f01 	cmp.w	sl, #1
 8022cd2:	d102      	bne.n	8022cda <_strtod_l+0xa7a>
 8022cd4:	2f00      	cmp	r7, #0
 8022cd6:	f43f ad83 	beq.w	80227e0 <_strtod_l+0x580>
 8022cda:	4b62      	ldr	r3, [pc, #392]	; (8022e64 <_strtod_l+0xc04>)
 8022cdc:	2200      	movs	r2, #0
 8022cde:	e78e      	b.n	8022bfe <_strtod_l+0x99e>
 8022ce0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8022e60 <_strtod_l+0xc00>
 8022ce4:	f04f 0800 	mov.w	r8, #0
 8022ce8:	e7e7      	b.n	8022cba <_strtod_l+0xa5a>
 8022cea:	4b5d      	ldr	r3, [pc, #372]	; (8022e60 <_strtod_l+0xc00>)
 8022cec:	4640      	mov	r0, r8
 8022cee:	4649      	mov	r1, r9
 8022cf0:	2200      	movs	r2, #0
 8022cf2:	f7dd fcb1 	bl	8000658 <__aeabi_dmul>
 8022cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022cf8:	4680      	mov	r8, r0
 8022cfa:	4689      	mov	r9, r1
 8022cfc:	b933      	cbnz	r3, 8022d0c <_strtod_l+0xaac>
 8022cfe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022d02:	900e      	str	r0, [sp, #56]	; 0x38
 8022d04:	930f      	str	r3, [sp, #60]	; 0x3c
 8022d06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8022d0a:	e7dd      	b.n	8022cc8 <_strtod_l+0xa68>
 8022d0c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8022d10:	e7f9      	b.n	8022d06 <_strtod_l+0xaa6>
 8022d12:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8022d16:	9b04      	ldr	r3, [sp, #16]
 8022d18:	2b00      	cmp	r3, #0
 8022d1a:	d1a8      	bne.n	8022c6e <_strtod_l+0xa0e>
 8022d1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8022d20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022d22:	0d1b      	lsrs	r3, r3, #20
 8022d24:	051b      	lsls	r3, r3, #20
 8022d26:	429a      	cmp	r2, r3
 8022d28:	d1a1      	bne.n	8022c6e <_strtod_l+0xa0e>
 8022d2a:	4640      	mov	r0, r8
 8022d2c:	4649      	mov	r1, r9
 8022d2e:	f7de f843 	bl	8000db8 <__aeabi_d2lz>
 8022d32:	f7dd fc63 	bl	80005fc <__aeabi_l2d>
 8022d36:	4602      	mov	r2, r0
 8022d38:	460b      	mov	r3, r1
 8022d3a:	4640      	mov	r0, r8
 8022d3c:	4649      	mov	r1, r9
 8022d3e:	f7dd fad3 	bl	80002e8 <__aeabi_dsub>
 8022d42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022d44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8022d48:	ea43 030a 	orr.w	r3, r3, sl
 8022d4c:	4313      	orrs	r3, r2
 8022d4e:	4680      	mov	r8, r0
 8022d50:	4689      	mov	r9, r1
 8022d52:	d055      	beq.n	8022e00 <_strtod_l+0xba0>
 8022d54:	a336      	add	r3, pc, #216	; (adr r3, 8022e30 <_strtod_l+0xbd0>)
 8022d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d5a:	f7dd feef 	bl	8000b3c <__aeabi_dcmplt>
 8022d5e:	2800      	cmp	r0, #0
 8022d60:	f47f acd0 	bne.w	8022704 <_strtod_l+0x4a4>
 8022d64:	a334      	add	r3, pc, #208	; (adr r3, 8022e38 <_strtod_l+0xbd8>)
 8022d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d6a:	4640      	mov	r0, r8
 8022d6c:	4649      	mov	r1, r9
 8022d6e:	f7dd ff03 	bl	8000b78 <__aeabi_dcmpgt>
 8022d72:	2800      	cmp	r0, #0
 8022d74:	f43f af7b 	beq.w	8022c6e <_strtod_l+0xa0e>
 8022d78:	e4c4      	b.n	8022704 <_strtod_l+0x4a4>
 8022d7a:	9b04      	ldr	r3, [sp, #16]
 8022d7c:	b333      	cbz	r3, 8022dcc <_strtod_l+0xb6c>
 8022d7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022d80:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8022d84:	d822      	bhi.n	8022dcc <_strtod_l+0xb6c>
 8022d86:	a32e      	add	r3, pc, #184	; (adr r3, 8022e40 <_strtod_l+0xbe0>)
 8022d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d8c:	4640      	mov	r0, r8
 8022d8e:	4649      	mov	r1, r9
 8022d90:	f7dd fede 	bl	8000b50 <__aeabi_dcmple>
 8022d94:	b1a0      	cbz	r0, 8022dc0 <_strtod_l+0xb60>
 8022d96:	4649      	mov	r1, r9
 8022d98:	4640      	mov	r0, r8
 8022d9a:	f7dd ff35 	bl	8000c08 <__aeabi_d2uiz>
 8022d9e:	2801      	cmp	r0, #1
 8022da0:	bf38      	it	cc
 8022da2:	2001      	movcc	r0, #1
 8022da4:	f7dd fbde 	bl	8000564 <__aeabi_ui2d>
 8022da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022daa:	4680      	mov	r8, r0
 8022dac:	4689      	mov	r9, r1
 8022dae:	bb23      	cbnz	r3, 8022dfa <_strtod_l+0xb9a>
 8022db0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022db4:	9010      	str	r0, [sp, #64]	; 0x40
 8022db6:	9311      	str	r3, [sp, #68]	; 0x44
 8022db8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8022dbc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022dc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022dc4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8022dc8:	1a9b      	subs	r3, r3, r2
 8022dca:	9309      	str	r3, [sp, #36]	; 0x24
 8022dcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8022dd0:	eeb0 0a48 	vmov.f32	s0, s16
 8022dd4:	eef0 0a68 	vmov.f32	s1, s17
 8022dd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022ddc:	f002 f934 	bl	8025048 <__ulp>
 8022de0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8022de4:	ec53 2b10 	vmov	r2, r3, d0
 8022de8:	f7dd fc36 	bl	8000658 <__aeabi_dmul>
 8022dec:	ec53 2b18 	vmov	r2, r3, d8
 8022df0:	f7dd fa7c 	bl	80002ec <__adddf3>
 8022df4:	4682      	mov	sl, r0
 8022df6:	468b      	mov	fp, r1
 8022df8:	e78d      	b.n	8022d16 <_strtod_l+0xab6>
 8022dfa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8022dfe:	e7db      	b.n	8022db8 <_strtod_l+0xb58>
 8022e00:	a311      	add	r3, pc, #68	; (adr r3, 8022e48 <_strtod_l+0xbe8>)
 8022e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e06:	f7dd fe99 	bl	8000b3c <__aeabi_dcmplt>
 8022e0a:	e7b2      	b.n	8022d72 <_strtod_l+0xb12>
 8022e0c:	2300      	movs	r3, #0
 8022e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8022e10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022e12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022e14:	6013      	str	r3, [r2, #0]
 8022e16:	f7ff ba6b 	b.w	80222f0 <_strtod_l+0x90>
 8022e1a:	2a65      	cmp	r2, #101	; 0x65
 8022e1c:	f43f ab5f 	beq.w	80224de <_strtod_l+0x27e>
 8022e20:	2a45      	cmp	r2, #69	; 0x45
 8022e22:	f43f ab5c 	beq.w	80224de <_strtod_l+0x27e>
 8022e26:	2301      	movs	r3, #1
 8022e28:	f7ff bb94 	b.w	8022554 <_strtod_l+0x2f4>
 8022e2c:	f3af 8000 	nop.w
 8022e30:	94a03595 	.word	0x94a03595
 8022e34:	3fdfffff 	.word	0x3fdfffff
 8022e38:	35afe535 	.word	0x35afe535
 8022e3c:	3fe00000 	.word	0x3fe00000
 8022e40:	ffc00000 	.word	0xffc00000
 8022e44:	41dfffff 	.word	0x41dfffff
 8022e48:	94a03595 	.word	0x94a03595
 8022e4c:	3fcfffff 	.word	0x3fcfffff
 8022e50:	3ff00000 	.word	0x3ff00000
 8022e54:	7ff00000 	.word	0x7ff00000
 8022e58:	7fe00000 	.word	0x7fe00000
 8022e5c:	7c9fffff 	.word	0x7c9fffff
 8022e60:	3fe00000 	.word	0x3fe00000
 8022e64:	bff00000 	.word	0xbff00000
 8022e68:	7fefffff 	.word	0x7fefffff

08022e6c <_strtod_r>:
 8022e6c:	4b01      	ldr	r3, [pc, #4]	; (8022e74 <_strtod_r+0x8>)
 8022e6e:	f7ff b9f7 	b.w	8022260 <_strtod_l>
 8022e72:	bf00      	nop
 8022e74:	20000104 	.word	0x20000104

08022e78 <_strtol_l.constprop.0>:
 8022e78:	2b01      	cmp	r3, #1
 8022e7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022e7e:	d001      	beq.n	8022e84 <_strtol_l.constprop.0+0xc>
 8022e80:	2b24      	cmp	r3, #36	; 0x24
 8022e82:	d906      	bls.n	8022e92 <_strtol_l.constprop.0+0x1a>
 8022e84:	f7fd fd6a 	bl	802095c <__errno>
 8022e88:	2316      	movs	r3, #22
 8022e8a:	6003      	str	r3, [r0, #0]
 8022e8c:	2000      	movs	r0, #0
 8022e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e92:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8022f78 <_strtol_l.constprop.0+0x100>
 8022e96:	460d      	mov	r5, r1
 8022e98:	462e      	mov	r6, r5
 8022e9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022e9e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8022ea2:	f017 0708 	ands.w	r7, r7, #8
 8022ea6:	d1f7      	bne.n	8022e98 <_strtol_l.constprop.0+0x20>
 8022ea8:	2c2d      	cmp	r4, #45	; 0x2d
 8022eaa:	d132      	bne.n	8022f12 <_strtol_l.constprop.0+0x9a>
 8022eac:	782c      	ldrb	r4, [r5, #0]
 8022eae:	2701      	movs	r7, #1
 8022eb0:	1cb5      	adds	r5, r6, #2
 8022eb2:	2b00      	cmp	r3, #0
 8022eb4:	d05b      	beq.n	8022f6e <_strtol_l.constprop.0+0xf6>
 8022eb6:	2b10      	cmp	r3, #16
 8022eb8:	d109      	bne.n	8022ece <_strtol_l.constprop.0+0x56>
 8022eba:	2c30      	cmp	r4, #48	; 0x30
 8022ebc:	d107      	bne.n	8022ece <_strtol_l.constprop.0+0x56>
 8022ebe:	782c      	ldrb	r4, [r5, #0]
 8022ec0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8022ec4:	2c58      	cmp	r4, #88	; 0x58
 8022ec6:	d14d      	bne.n	8022f64 <_strtol_l.constprop.0+0xec>
 8022ec8:	786c      	ldrb	r4, [r5, #1]
 8022eca:	2310      	movs	r3, #16
 8022ecc:	3502      	adds	r5, #2
 8022ece:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8022ed2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8022ed6:	f04f 0c00 	mov.w	ip, #0
 8022eda:	fbb8 f9f3 	udiv	r9, r8, r3
 8022ede:	4666      	mov	r6, ip
 8022ee0:	fb03 8a19 	mls	sl, r3, r9, r8
 8022ee4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8022ee8:	f1be 0f09 	cmp.w	lr, #9
 8022eec:	d816      	bhi.n	8022f1c <_strtol_l.constprop.0+0xa4>
 8022eee:	4674      	mov	r4, lr
 8022ef0:	42a3      	cmp	r3, r4
 8022ef2:	dd24      	ble.n	8022f3e <_strtol_l.constprop.0+0xc6>
 8022ef4:	f1bc 0f00 	cmp.w	ip, #0
 8022ef8:	db1e      	blt.n	8022f38 <_strtol_l.constprop.0+0xc0>
 8022efa:	45b1      	cmp	r9, r6
 8022efc:	d31c      	bcc.n	8022f38 <_strtol_l.constprop.0+0xc0>
 8022efe:	d101      	bne.n	8022f04 <_strtol_l.constprop.0+0x8c>
 8022f00:	45a2      	cmp	sl, r4
 8022f02:	db19      	blt.n	8022f38 <_strtol_l.constprop.0+0xc0>
 8022f04:	fb06 4603 	mla	r6, r6, r3, r4
 8022f08:	f04f 0c01 	mov.w	ip, #1
 8022f0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022f10:	e7e8      	b.n	8022ee4 <_strtol_l.constprop.0+0x6c>
 8022f12:	2c2b      	cmp	r4, #43	; 0x2b
 8022f14:	bf04      	itt	eq
 8022f16:	782c      	ldrbeq	r4, [r5, #0]
 8022f18:	1cb5      	addeq	r5, r6, #2
 8022f1a:	e7ca      	b.n	8022eb2 <_strtol_l.constprop.0+0x3a>
 8022f1c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8022f20:	f1be 0f19 	cmp.w	lr, #25
 8022f24:	d801      	bhi.n	8022f2a <_strtol_l.constprop.0+0xb2>
 8022f26:	3c37      	subs	r4, #55	; 0x37
 8022f28:	e7e2      	b.n	8022ef0 <_strtol_l.constprop.0+0x78>
 8022f2a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8022f2e:	f1be 0f19 	cmp.w	lr, #25
 8022f32:	d804      	bhi.n	8022f3e <_strtol_l.constprop.0+0xc6>
 8022f34:	3c57      	subs	r4, #87	; 0x57
 8022f36:	e7db      	b.n	8022ef0 <_strtol_l.constprop.0+0x78>
 8022f38:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8022f3c:	e7e6      	b.n	8022f0c <_strtol_l.constprop.0+0x94>
 8022f3e:	f1bc 0f00 	cmp.w	ip, #0
 8022f42:	da05      	bge.n	8022f50 <_strtol_l.constprop.0+0xd8>
 8022f44:	2322      	movs	r3, #34	; 0x22
 8022f46:	6003      	str	r3, [r0, #0]
 8022f48:	4646      	mov	r6, r8
 8022f4a:	b942      	cbnz	r2, 8022f5e <_strtol_l.constprop.0+0xe6>
 8022f4c:	4630      	mov	r0, r6
 8022f4e:	e79e      	b.n	8022e8e <_strtol_l.constprop.0+0x16>
 8022f50:	b107      	cbz	r7, 8022f54 <_strtol_l.constprop.0+0xdc>
 8022f52:	4276      	negs	r6, r6
 8022f54:	2a00      	cmp	r2, #0
 8022f56:	d0f9      	beq.n	8022f4c <_strtol_l.constprop.0+0xd4>
 8022f58:	f1bc 0f00 	cmp.w	ip, #0
 8022f5c:	d000      	beq.n	8022f60 <_strtol_l.constprop.0+0xe8>
 8022f5e:	1e69      	subs	r1, r5, #1
 8022f60:	6011      	str	r1, [r2, #0]
 8022f62:	e7f3      	b.n	8022f4c <_strtol_l.constprop.0+0xd4>
 8022f64:	2430      	movs	r4, #48	; 0x30
 8022f66:	2b00      	cmp	r3, #0
 8022f68:	d1b1      	bne.n	8022ece <_strtol_l.constprop.0+0x56>
 8022f6a:	2308      	movs	r3, #8
 8022f6c:	e7af      	b.n	8022ece <_strtol_l.constprop.0+0x56>
 8022f6e:	2c30      	cmp	r4, #48	; 0x30
 8022f70:	d0a5      	beq.n	8022ebe <_strtol_l.constprop.0+0x46>
 8022f72:	230a      	movs	r3, #10
 8022f74:	e7ab      	b.n	8022ece <_strtol_l.constprop.0+0x56>
 8022f76:	bf00      	nop
 8022f78:	080275db 	.word	0x080275db

08022f7c <_strtol_r>:
 8022f7c:	f7ff bf7c 	b.w	8022e78 <_strtol_l.constprop.0>

08022f80 <_strtoul_l.constprop.0>:
 8022f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022f84:	4f36      	ldr	r7, [pc, #216]	; (8023060 <_strtoul_l.constprop.0+0xe0>)
 8022f86:	4686      	mov	lr, r0
 8022f88:	460d      	mov	r5, r1
 8022f8a:	4628      	mov	r0, r5
 8022f8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022f90:	5de6      	ldrb	r6, [r4, r7]
 8022f92:	f016 0608 	ands.w	r6, r6, #8
 8022f96:	d1f8      	bne.n	8022f8a <_strtoul_l.constprop.0+0xa>
 8022f98:	2c2d      	cmp	r4, #45	; 0x2d
 8022f9a:	d12f      	bne.n	8022ffc <_strtoul_l.constprop.0+0x7c>
 8022f9c:	782c      	ldrb	r4, [r5, #0]
 8022f9e:	2601      	movs	r6, #1
 8022fa0:	1c85      	adds	r5, r0, #2
 8022fa2:	2b00      	cmp	r3, #0
 8022fa4:	d057      	beq.n	8023056 <_strtoul_l.constprop.0+0xd6>
 8022fa6:	2b10      	cmp	r3, #16
 8022fa8:	d109      	bne.n	8022fbe <_strtoul_l.constprop.0+0x3e>
 8022faa:	2c30      	cmp	r4, #48	; 0x30
 8022fac:	d107      	bne.n	8022fbe <_strtoul_l.constprop.0+0x3e>
 8022fae:	7828      	ldrb	r0, [r5, #0]
 8022fb0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8022fb4:	2858      	cmp	r0, #88	; 0x58
 8022fb6:	d149      	bne.n	802304c <_strtoul_l.constprop.0+0xcc>
 8022fb8:	786c      	ldrb	r4, [r5, #1]
 8022fba:	2310      	movs	r3, #16
 8022fbc:	3502      	adds	r5, #2
 8022fbe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8022fc2:	2700      	movs	r7, #0
 8022fc4:	fbb8 f8f3 	udiv	r8, r8, r3
 8022fc8:	fb03 f908 	mul.w	r9, r3, r8
 8022fcc:	ea6f 0909 	mvn.w	r9, r9
 8022fd0:	4638      	mov	r0, r7
 8022fd2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8022fd6:	f1bc 0f09 	cmp.w	ip, #9
 8022fda:	d814      	bhi.n	8023006 <_strtoul_l.constprop.0+0x86>
 8022fdc:	4664      	mov	r4, ip
 8022fde:	42a3      	cmp	r3, r4
 8022fe0:	dd22      	ble.n	8023028 <_strtoul_l.constprop.0+0xa8>
 8022fe2:	2f00      	cmp	r7, #0
 8022fe4:	db1d      	blt.n	8023022 <_strtoul_l.constprop.0+0xa2>
 8022fe6:	4580      	cmp	r8, r0
 8022fe8:	d31b      	bcc.n	8023022 <_strtoul_l.constprop.0+0xa2>
 8022fea:	d101      	bne.n	8022ff0 <_strtoul_l.constprop.0+0x70>
 8022fec:	45a1      	cmp	r9, r4
 8022fee:	db18      	blt.n	8023022 <_strtoul_l.constprop.0+0xa2>
 8022ff0:	fb00 4003 	mla	r0, r0, r3, r4
 8022ff4:	2701      	movs	r7, #1
 8022ff6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022ffa:	e7ea      	b.n	8022fd2 <_strtoul_l.constprop.0+0x52>
 8022ffc:	2c2b      	cmp	r4, #43	; 0x2b
 8022ffe:	bf04      	itt	eq
 8023000:	782c      	ldrbeq	r4, [r5, #0]
 8023002:	1c85      	addeq	r5, r0, #2
 8023004:	e7cd      	b.n	8022fa2 <_strtoul_l.constprop.0+0x22>
 8023006:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802300a:	f1bc 0f19 	cmp.w	ip, #25
 802300e:	d801      	bhi.n	8023014 <_strtoul_l.constprop.0+0x94>
 8023010:	3c37      	subs	r4, #55	; 0x37
 8023012:	e7e4      	b.n	8022fde <_strtoul_l.constprop.0+0x5e>
 8023014:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8023018:	f1bc 0f19 	cmp.w	ip, #25
 802301c:	d804      	bhi.n	8023028 <_strtoul_l.constprop.0+0xa8>
 802301e:	3c57      	subs	r4, #87	; 0x57
 8023020:	e7dd      	b.n	8022fde <_strtoul_l.constprop.0+0x5e>
 8023022:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8023026:	e7e6      	b.n	8022ff6 <_strtoul_l.constprop.0+0x76>
 8023028:	2f00      	cmp	r7, #0
 802302a:	da07      	bge.n	802303c <_strtoul_l.constprop.0+0xbc>
 802302c:	2322      	movs	r3, #34	; 0x22
 802302e:	f8ce 3000 	str.w	r3, [lr]
 8023032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023036:	b932      	cbnz	r2, 8023046 <_strtoul_l.constprop.0+0xc6>
 8023038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802303c:	b106      	cbz	r6, 8023040 <_strtoul_l.constprop.0+0xc0>
 802303e:	4240      	negs	r0, r0
 8023040:	2a00      	cmp	r2, #0
 8023042:	d0f9      	beq.n	8023038 <_strtoul_l.constprop.0+0xb8>
 8023044:	b107      	cbz	r7, 8023048 <_strtoul_l.constprop.0+0xc8>
 8023046:	1e69      	subs	r1, r5, #1
 8023048:	6011      	str	r1, [r2, #0]
 802304a:	e7f5      	b.n	8023038 <_strtoul_l.constprop.0+0xb8>
 802304c:	2430      	movs	r4, #48	; 0x30
 802304e:	2b00      	cmp	r3, #0
 8023050:	d1b5      	bne.n	8022fbe <_strtoul_l.constprop.0+0x3e>
 8023052:	2308      	movs	r3, #8
 8023054:	e7b3      	b.n	8022fbe <_strtoul_l.constprop.0+0x3e>
 8023056:	2c30      	cmp	r4, #48	; 0x30
 8023058:	d0a9      	beq.n	8022fae <_strtoul_l.constprop.0+0x2e>
 802305a:	230a      	movs	r3, #10
 802305c:	e7af      	b.n	8022fbe <_strtoul_l.constprop.0+0x3e>
 802305e:	bf00      	nop
 8023060:	080275db 	.word	0x080275db

08023064 <strtoul>:
 8023064:	4613      	mov	r3, r2
 8023066:	460a      	mov	r2, r1
 8023068:	4601      	mov	r1, r0
 802306a:	4802      	ldr	r0, [pc, #8]	; (8023074 <strtoul+0x10>)
 802306c:	6800      	ldr	r0, [r0, #0]
 802306e:	f7ff bf87 	b.w	8022f80 <_strtoul_l.constprop.0>
 8023072:	bf00      	nop
 8023074:	2000009c 	.word	0x2000009c

08023078 <_vsniprintf_r>:
 8023078:	b530      	push	{r4, r5, lr}
 802307a:	4614      	mov	r4, r2
 802307c:	2c00      	cmp	r4, #0
 802307e:	b09b      	sub	sp, #108	; 0x6c
 8023080:	4605      	mov	r5, r0
 8023082:	461a      	mov	r2, r3
 8023084:	da05      	bge.n	8023092 <_vsniprintf_r+0x1a>
 8023086:	238b      	movs	r3, #139	; 0x8b
 8023088:	6003      	str	r3, [r0, #0]
 802308a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802308e:	b01b      	add	sp, #108	; 0x6c
 8023090:	bd30      	pop	{r4, r5, pc}
 8023092:	f44f 7302 	mov.w	r3, #520	; 0x208
 8023096:	f8ad 300c 	strh.w	r3, [sp, #12]
 802309a:	bf14      	ite	ne
 802309c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80230a0:	4623      	moveq	r3, r4
 80230a2:	9302      	str	r3, [sp, #8]
 80230a4:	9305      	str	r3, [sp, #20]
 80230a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80230aa:	9100      	str	r1, [sp, #0]
 80230ac:	9104      	str	r1, [sp, #16]
 80230ae:	f8ad 300e 	strh.w	r3, [sp, #14]
 80230b2:	4669      	mov	r1, sp
 80230b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80230b6:	f002 f997 	bl	80253e8 <_svfiprintf_r>
 80230ba:	1c43      	adds	r3, r0, #1
 80230bc:	bfbc      	itt	lt
 80230be:	238b      	movlt	r3, #139	; 0x8b
 80230c0:	602b      	strlt	r3, [r5, #0]
 80230c2:	2c00      	cmp	r4, #0
 80230c4:	d0e3      	beq.n	802308e <_vsniprintf_r+0x16>
 80230c6:	9b00      	ldr	r3, [sp, #0]
 80230c8:	2200      	movs	r2, #0
 80230ca:	701a      	strb	r2, [r3, #0]
 80230cc:	e7df      	b.n	802308e <_vsniprintf_r+0x16>
	...

080230d0 <vsniprintf>:
 80230d0:	b507      	push	{r0, r1, r2, lr}
 80230d2:	9300      	str	r3, [sp, #0]
 80230d4:	4613      	mov	r3, r2
 80230d6:	460a      	mov	r2, r1
 80230d8:	4601      	mov	r1, r0
 80230da:	4803      	ldr	r0, [pc, #12]	; (80230e8 <vsniprintf+0x18>)
 80230dc:	6800      	ldr	r0, [r0, #0]
 80230de:	f7ff ffcb 	bl	8023078 <_vsniprintf_r>
 80230e2:	b003      	add	sp, #12
 80230e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80230e8:	2000009c 	.word	0x2000009c

080230ec <__swbuf_r>:
 80230ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80230ee:	460e      	mov	r6, r1
 80230f0:	4614      	mov	r4, r2
 80230f2:	4605      	mov	r5, r0
 80230f4:	b118      	cbz	r0, 80230fe <__swbuf_r+0x12>
 80230f6:	6983      	ldr	r3, [r0, #24]
 80230f8:	b90b      	cbnz	r3, 80230fe <__swbuf_r+0x12>
 80230fa:	f7fd fca1 	bl	8020a40 <__sinit>
 80230fe:	4b21      	ldr	r3, [pc, #132]	; (8023184 <__swbuf_r+0x98>)
 8023100:	429c      	cmp	r4, r3
 8023102:	d12b      	bne.n	802315c <__swbuf_r+0x70>
 8023104:	686c      	ldr	r4, [r5, #4]
 8023106:	69a3      	ldr	r3, [r4, #24]
 8023108:	60a3      	str	r3, [r4, #8]
 802310a:	89a3      	ldrh	r3, [r4, #12]
 802310c:	071a      	lsls	r2, r3, #28
 802310e:	d52f      	bpl.n	8023170 <__swbuf_r+0x84>
 8023110:	6923      	ldr	r3, [r4, #16]
 8023112:	b36b      	cbz	r3, 8023170 <__swbuf_r+0x84>
 8023114:	6923      	ldr	r3, [r4, #16]
 8023116:	6820      	ldr	r0, [r4, #0]
 8023118:	1ac0      	subs	r0, r0, r3
 802311a:	6963      	ldr	r3, [r4, #20]
 802311c:	b2f6      	uxtb	r6, r6
 802311e:	4283      	cmp	r3, r0
 8023120:	4637      	mov	r7, r6
 8023122:	dc04      	bgt.n	802312e <__swbuf_r+0x42>
 8023124:	4621      	mov	r1, r4
 8023126:	4628      	mov	r0, r5
 8023128:	f000 ffd6 	bl	80240d8 <_fflush_r>
 802312c:	bb30      	cbnz	r0, 802317c <__swbuf_r+0x90>
 802312e:	68a3      	ldr	r3, [r4, #8]
 8023130:	3b01      	subs	r3, #1
 8023132:	60a3      	str	r3, [r4, #8]
 8023134:	6823      	ldr	r3, [r4, #0]
 8023136:	1c5a      	adds	r2, r3, #1
 8023138:	6022      	str	r2, [r4, #0]
 802313a:	701e      	strb	r6, [r3, #0]
 802313c:	6963      	ldr	r3, [r4, #20]
 802313e:	3001      	adds	r0, #1
 8023140:	4283      	cmp	r3, r0
 8023142:	d004      	beq.n	802314e <__swbuf_r+0x62>
 8023144:	89a3      	ldrh	r3, [r4, #12]
 8023146:	07db      	lsls	r3, r3, #31
 8023148:	d506      	bpl.n	8023158 <__swbuf_r+0x6c>
 802314a:	2e0a      	cmp	r6, #10
 802314c:	d104      	bne.n	8023158 <__swbuf_r+0x6c>
 802314e:	4621      	mov	r1, r4
 8023150:	4628      	mov	r0, r5
 8023152:	f000 ffc1 	bl	80240d8 <_fflush_r>
 8023156:	b988      	cbnz	r0, 802317c <__swbuf_r+0x90>
 8023158:	4638      	mov	r0, r7
 802315a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802315c:	4b0a      	ldr	r3, [pc, #40]	; (8023188 <__swbuf_r+0x9c>)
 802315e:	429c      	cmp	r4, r3
 8023160:	d101      	bne.n	8023166 <__swbuf_r+0x7a>
 8023162:	68ac      	ldr	r4, [r5, #8]
 8023164:	e7cf      	b.n	8023106 <__swbuf_r+0x1a>
 8023166:	4b09      	ldr	r3, [pc, #36]	; (802318c <__swbuf_r+0xa0>)
 8023168:	429c      	cmp	r4, r3
 802316a:	bf08      	it	eq
 802316c:	68ec      	ldreq	r4, [r5, #12]
 802316e:	e7ca      	b.n	8023106 <__swbuf_r+0x1a>
 8023170:	4621      	mov	r1, r4
 8023172:	4628      	mov	r0, r5
 8023174:	f000 f81e 	bl	80231b4 <__swsetup_r>
 8023178:	2800      	cmp	r0, #0
 802317a:	d0cb      	beq.n	8023114 <__swbuf_r+0x28>
 802317c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8023180:	e7ea      	b.n	8023158 <__swbuf_r+0x6c>
 8023182:	bf00      	nop
 8023184:	080276fc 	.word	0x080276fc
 8023188:	0802771c 	.word	0x0802771c
 802318c:	080276dc 	.word	0x080276dc

08023190 <_write_r>:
 8023190:	b538      	push	{r3, r4, r5, lr}
 8023192:	4d07      	ldr	r5, [pc, #28]	; (80231b0 <_write_r+0x20>)
 8023194:	4604      	mov	r4, r0
 8023196:	4608      	mov	r0, r1
 8023198:	4611      	mov	r1, r2
 802319a:	2200      	movs	r2, #0
 802319c:	602a      	str	r2, [r5, #0]
 802319e:	461a      	mov	r2, r3
 80231a0:	f7de fd16 	bl	8001bd0 <_write>
 80231a4:	1c43      	adds	r3, r0, #1
 80231a6:	d102      	bne.n	80231ae <_write_r+0x1e>
 80231a8:	682b      	ldr	r3, [r5, #0]
 80231aa:	b103      	cbz	r3, 80231ae <_write_r+0x1e>
 80231ac:	6023      	str	r3, [r4, #0]
 80231ae:	bd38      	pop	{r3, r4, r5, pc}
 80231b0:	20013644 	.word	0x20013644

080231b4 <__swsetup_r>:
 80231b4:	4b32      	ldr	r3, [pc, #200]	; (8023280 <__swsetup_r+0xcc>)
 80231b6:	b570      	push	{r4, r5, r6, lr}
 80231b8:	681d      	ldr	r5, [r3, #0]
 80231ba:	4606      	mov	r6, r0
 80231bc:	460c      	mov	r4, r1
 80231be:	b125      	cbz	r5, 80231ca <__swsetup_r+0x16>
 80231c0:	69ab      	ldr	r3, [r5, #24]
 80231c2:	b913      	cbnz	r3, 80231ca <__swsetup_r+0x16>
 80231c4:	4628      	mov	r0, r5
 80231c6:	f7fd fc3b 	bl	8020a40 <__sinit>
 80231ca:	4b2e      	ldr	r3, [pc, #184]	; (8023284 <__swsetup_r+0xd0>)
 80231cc:	429c      	cmp	r4, r3
 80231ce:	d10f      	bne.n	80231f0 <__swsetup_r+0x3c>
 80231d0:	686c      	ldr	r4, [r5, #4]
 80231d2:	89a3      	ldrh	r3, [r4, #12]
 80231d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80231d8:	0719      	lsls	r1, r3, #28
 80231da:	d42c      	bmi.n	8023236 <__swsetup_r+0x82>
 80231dc:	06dd      	lsls	r5, r3, #27
 80231de:	d411      	bmi.n	8023204 <__swsetup_r+0x50>
 80231e0:	2309      	movs	r3, #9
 80231e2:	6033      	str	r3, [r6, #0]
 80231e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80231e8:	81a3      	strh	r3, [r4, #12]
 80231ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80231ee:	e03e      	b.n	802326e <__swsetup_r+0xba>
 80231f0:	4b25      	ldr	r3, [pc, #148]	; (8023288 <__swsetup_r+0xd4>)
 80231f2:	429c      	cmp	r4, r3
 80231f4:	d101      	bne.n	80231fa <__swsetup_r+0x46>
 80231f6:	68ac      	ldr	r4, [r5, #8]
 80231f8:	e7eb      	b.n	80231d2 <__swsetup_r+0x1e>
 80231fa:	4b24      	ldr	r3, [pc, #144]	; (802328c <__swsetup_r+0xd8>)
 80231fc:	429c      	cmp	r4, r3
 80231fe:	bf08      	it	eq
 8023200:	68ec      	ldreq	r4, [r5, #12]
 8023202:	e7e6      	b.n	80231d2 <__swsetup_r+0x1e>
 8023204:	0758      	lsls	r0, r3, #29
 8023206:	d512      	bpl.n	802322e <__swsetup_r+0x7a>
 8023208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802320a:	b141      	cbz	r1, 802321e <__swsetup_r+0x6a>
 802320c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023210:	4299      	cmp	r1, r3
 8023212:	d002      	beq.n	802321a <__swsetup_r+0x66>
 8023214:	4630      	mov	r0, r6
 8023216:	f7fd fd93 	bl	8020d40 <_free_r>
 802321a:	2300      	movs	r3, #0
 802321c:	6363      	str	r3, [r4, #52]	; 0x34
 802321e:	89a3      	ldrh	r3, [r4, #12]
 8023220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023224:	81a3      	strh	r3, [r4, #12]
 8023226:	2300      	movs	r3, #0
 8023228:	6063      	str	r3, [r4, #4]
 802322a:	6923      	ldr	r3, [r4, #16]
 802322c:	6023      	str	r3, [r4, #0]
 802322e:	89a3      	ldrh	r3, [r4, #12]
 8023230:	f043 0308 	orr.w	r3, r3, #8
 8023234:	81a3      	strh	r3, [r4, #12]
 8023236:	6923      	ldr	r3, [r4, #16]
 8023238:	b94b      	cbnz	r3, 802324e <__swsetup_r+0x9a>
 802323a:	89a3      	ldrh	r3, [r4, #12]
 802323c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023244:	d003      	beq.n	802324e <__swsetup_r+0x9a>
 8023246:	4621      	mov	r1, r4
 8023248:	4630      	mov	r0, r6
 802324a:	f001 fb2d 	bl	80248a8 <__smakebuf_r>
 802324e:	89a0      	ldrh	r0, [r4, #12]
 8023250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023254:	f010 0301 	ands.w	r3, r0, #1
 8023258:	d00a      	beq.n	8023270 <__swsetup_r+0xbc>
 802325a:	2300      	movs	r3, #0
 802325c:	60a3      	str	r3, [r4, #8]
 802325e:	6963      	ldr	r3, [r4, #20]
 8023260:	425b      	negs	r3, r3
 8023262:	61a3      	str	r3, [r4, #24]
 8023264:	6923      	ldr	r3, [r4, #16]
 8023266:	b943      	cbnz	r3, 802327a <__swsetup_r+0xc6>
 8023268:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802326c:	d1ba      	bne.n	80231e4 <__swsetup_r+0x30>
 802326e:	bd70      	pop	{r4, r5, r6, pc}
 8023270:	0781      	lsls	r1, r0, #30
 8023272:	bf58      	it	pl
 8023274:	6963      	ldrpl	r3, [r4, #20]
 8023276:	60a3      	str	r3, [r4, #8]
 8023278:	e7f4      	b.n	8023264 <__swsetup_r+0xb0>
 802327a:	2000      	movs	r0, #0
 802327c:	e7f7      	b.n	802326e <__swsetup_r+0xba>
 802327e:	bf00      	nop
 8023280:	2000009c 	.word	0x2000009c
 8023284:	080276fc 	.word	0x080276fc
 8023288:	0802771c 	.word	0x0802771c
 802328c:	080276dc 	.word	0x080276dc

08023290 <abort>:
 8023290:	b508      	push	{r3, lr}
 8023292:	2006      	movs	r0, #6
 8023294:	f002 f9ec 	bl	8025670 <raise>
 8023298:	2001      	movs	r0, #1
 802329a:	f7df fa0d 	bl	80026b8 <_exit>
	...

080232a0 <_close_r>:
 80232a0:	b538      	push	{r3, r4, r5, lr}
 80232a2:	4d06      	ldr	r5, [pc, #24]	; (80232bc <_close_r+0x1c>)
 80232a4:	2300      	movs	r3, #0
 80232a6:	4604      	mov	r4, r0
 80232a8:	4608      	mov	r0, r1
 80232aa:	602b      	str	r3, [r5, #0]
 80232ac:	f7df fa2b 	bl	8002706 <_close>
 80232b0:	1c43      	adds	r3, r0, #1
 80232b2:	d102      	bne.n	80232ba <_close_r+0x1a>
 80232b4:	682b      	ldr	r3, [r5, #0]
 80232b6:	b103      	cbz	r3, 80232ba <_close_r+0x1a>
 80232b8:	6023      	str	r3, [r4, #0]
 80232ba:	bd38      	pop	{r3, r4, r5, pc}
 80232bc:	20013644 	.word	0x20013644

080232c0 <quorem>:
 80232c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232c4:	6903      	ldr	r3, [r0, #16]
 80232c6:	690c      	ldr	r4, [r1, #16]
 80232c8:	42a3      	cmp	r3, r4
 80232ca:	4607      	mov	r7, r0
 80232cc:	f2c0 8081 	blt.w	80233d2 <quorem+0x112>
 80232d0:	3c01      	subs	r4, #1
 80232d2:	f101 0814 	add.w	r8, r1, #20
 80232d6:	f100 0514 	add.w	r5, r0, #20
 80232da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80232de:	9301      	str	r3, [sp, #4]
 80232e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80232e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80232e8:	3301      	adds	r3, #1
 80232ea:	429a      	cmp	r2, r3
 80232ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80232f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80232f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80232f8:	d331      	bcc.n	802335e <quorem+0x9e>
 80232fa:	f04f 0e00 	mov.w	lr, #0
 80232fe:	4640      	mov	r0, r8
 8023300:	46ac      	mov	ip, r5
 8023302:	46f2      	mov	sl, lr
 8023304:	f850 2b04 	ldr.w	r2, [r0], #4
 8023308:	b293      	uxth	r3, r2
 802330a:	fb06 e303 	mla	r3, r6, r3, lr
 802330e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8023312:	b29b      	uxth	r3, r3
 8023314:	ebaa 0303 	sub.w	r3, sl, r3
 8023318:	0c12      	lsrs	r2, r2, #16
 802331a:	f8dc a000 	ldr.w	sl, [ip]
 802331e:	fb06 e202 	mla	r2, r6, r2, lr
 8023322:	fa13 f38a 	uxtah	r3, r3, sl
 8023326:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802332a:	fa1f fa82 	uxth.w	sl, r2
 802332e:	f8dc 2000 	ldr.w	r2, [ip]
 8023332:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8023336:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802333a:	b29b      	uxth	r3, r3
 802333c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023340:	4581      	cmp	r9, r0
 8023342:	f84c 3b04 	str.w	r3, [ip], #4
 8023346:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802334a:	d2db      	bcs.n	8023304 <quorem+0x44>
 802334c:	f855 300b 	ldr.w	r3, [r5, fp]
 8023350:	b92b      	cbnz	r3, 802335e <quorem+0x9e>
 8023352:	9b01      	ldr	r3, [sp, #4]
 8023354:	3b04      	subs	r3, #4
 8023356:	429d      	cmp	r5, r3
 8023358:	461a      	mov	r2, r3
 802335a:	d32e      	bcc.n	80233ba <quorem+0xfa>
 802335c:	613c      	str	r4, [r7, #16]
 802335e:	4638      	mov	r0, r7
 8023360:	f001 fdcc 	bl	8024efc <__mcmp>
 8023364:	2800      	cmp	r0, #0
 8023366:	db24      	blt.n	80233b2 <quorem+0xf2>
 8023368:	3601      	adds	r6, #1
 802336a:	4628      	mov	r0, r5
 802336c:	f04f 0c00 	mov.w	ip, #0
 8023370:	f858 2b04 	ldr.w	r2, [r8], #4
 8023374:	f8d0 e000 	ldr.w	lr, [r0]
 8023378:	b293      	uxth	r3, r2
 802337a:	ebac 0303 	sub.w	r3, ip, r3
 802337e:	0c12      	lsrs	r2, r2, #16
 8023380:	fa13 f38e 	uxtah	r3, r3, lr
 8023384:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8023388:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802338c:	b29b      	uxth	r3, r3
 802338e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023392:	45c1      	cmp	r9, r8
 8023394:	f840 3b04 	str.w	r3, [r0], #4
 8023398:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802339c:	d2e8      	bcs.n	8023370 <quorem+0xb0>
 802339e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80233a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80233a6:	b922      	cbnz	r2, 80233b2 <quorem+0xf2>
 80233a8:	3b04      	subs	r3, #4
 80233aa:	429d      	cmp	r5, r3
 80233ac:	461a      	mov	r2, r3
 80233ae:	d30a      	bcc.n	80233c6 <quorem+0x106>
 80233b0:	613c      	str	r4, [r7, #16]
 80233b2:	4630      	mov	r0, r6
 80233b4:	b003      	add	sp, #12
 80233b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233ba:	6812      	ldr	r2, [r2, #0]
 80233bc:	3b04      	subs	r3, #4
 80233be:	2a00      	cmp	r2, #0
 80233c0:	d1cc      	bne.n	802335c <quorem+0x9c>
 80233c2:	3c01      	subs	r4, #1
 80233c4:	e7c7      	b.n	8023356 <quorem+0x96>
 80233c6:	6812      	ldr	r2, [r2, #0]
 80233c8:	3b04      	subs	r3, #4
 80233ca:	2a00      	cmp	r2, #0
 80233cc:	d1f0      	bne.n	80233b0 <quorem+0xf0>
 80233ce:	3c01      	subs	r4, #1
 80233d0:	e7eb      	b.n	80233aa <quorem+0xea>
 80233d2:	2000      	movs	r0, #0
 80233d4:	e7ee      	b.n	80233b4 <quorem+0xf4>
	...

080233d8 <_dtoa_r>:
 80233d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233dc:	ed2d 8b04 	vpush	{d8-d9}
 80233e0:	ec57 6b10 	vmov	r6, r7, d0
 80233e4:	b093      	sub	sp, #76	; 0x4c
 80233e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80233e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80233ec:	9106      	str	r1, [sp, #24]
 80233ee:	ee10 aa10 	vmov	sl, s0
 80233f2:	4604      	mov	r4, r0
 80233f4:	9209      	str	r2, [sp, #36]	; 0x24
 80233f6:	930c      	str	r3, [sp, #48]	; 0x30
 80233f8:	46bb      	mov	fp, r7
 80233fa:	b975      	cbnz	r5, 802341a <_dtoa_r+0x42>
 80233fc:	2010      	movs	r0, #16
 80233fe:	f7fd fc3f 	bl	8020c80 <malloc>
 8023402:	4602      	mov	r2, r0
 8023404:	6260      	str	r0, [r4, #36]	; 0x24
 8023406:	b920      	cbnz	r0, 8023412 <_dtoa_r+0x3a>
 8023408:	4ba7      	ldr	r3, [pc, #668]	; (80236a8 <_dtoa_r+0x2d0>)
 802340a:	21ea      	movs	r1, #234	; 0xea
 802340c:	48a7      	ldr	r0, [pc, #668]	; (80236ac <_dtoa_r+0x2d4>)
 802340e:	f7fd fa7f 	bl	8020910 <__assert_func>
 8023412:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8023416:	6005      	str	r5, [r0, #0]
 8023418:	60c5      	str	r5, [r0, #12]
 802341a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802341c:	6819      	ldr	r1, [r3, #0]
 802341e:	b151      	cbz	r1, 8023436 <_dtoa_r+0x5e>
 8023420:	685a      	ldr	r2, [r3, #4]
 8023422:	604a      	str	r2, [r1, #4]
 8023424:	2301      	movs	r3, #1
 8023426:	4093      	lsls	r3, r2
 8023428:	608b      	str	r3, [r1, #8]
 802342a:	4620      	mov	r0, r4
 802342c:	f001 fada 	bl	80249e4 <_Bfree>
 8023430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023432:	2200      	movs	r2, #0
 8023434:	601a      	str	r2, [r3, #0]
 8023436:	1e3b      	subs	r3, r7, #0
 8023438:	bfaa      	itet	ge
 802343a:	2300      	movge	r3, #0
 802343c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8023440:	f8c8 3000 	strge.w	r3, [r8]
 8023444:	4b9a      	ldr	r3, [pc, #616]	; (80236b0 <_dtoa_r+0x2d8>)
 8023446:	bfbc      	itt	lt
 8023448:	2201      	movlt	r2, #1
 802344a:	f8c8 2000 	strlt.w	r2, [r8]
 802344e:	ea33 030b 	bics.w	r3, r3, fp
 8023452:	d11b      	bne.n	802348c <_dtoa_r+0xb4>
 8023454:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023456:	f242 730f 	movw	r3, #9999	; 0x270f
 802345a:	6013      	str	r3, [r2, #0]
 802345c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8023460:	4333      	orrs	r3, r6
 8023462:	f000 8592 	beq.w	8023f8a <_dtoa_r+0xbb2>
 8023466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023468:	b963      	cbnz	r3, 8023484 <_dtoa_r+0xac>
 802346a:	4b92      	ldr	r3, [pc, #584]	; (80236b4 <_dtoa_r+0x2dc>)
 802346c:	e022      	b.n	80234b4 <_dtoa_r+0xdc>
 802346e:	4b92      	ldr	r3, [pc, #584]	; (80236b8 <_dtoa_r+0x2e0>)
 8023470:	9301      	str	r3, [sp, #4]
 8023472:	3308      	adds	r3, #8
 8023474:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023476:	6013      	str	r3, [r2, #0]
 8023478:	9801      	ldr	r0, [sp, #4]
 802347a:	b013      	add	sp, #76	; 0x4c
 802347c:	ecbd 8b04 	vpop	{d8-d9}
 8023480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023484:	4b8b      	ldr	r3, [pc, #556]	; (80236b4 <_dtoa_r+0x2dc>)
 8023486:	9301      	str	r3, [sp, #4]
 8023488:	3303      	adds	r3, #3
 802348a:	e7f3      	b.n	8023474 <_dtoa_r+0x9c>
 802348c:	2200      	movs	r2, #0
 802348e:	2300      	movs	r3, #0
 8023490:	4650      	mov	r0, sl
 8023492:	4659      	mov	r1, fp
 8023494:	f7dd fb48 	bl	8000b28 <__aeabi_dcmpeq>
 8023498:	ec4b ab19 	vmov	d9, sl, fp
 802349c:	4680      	mov	r8, r0
 802349e:	b158      	cbz	r0, 80234b8 <_dtoa_r+0xe0>
 80234a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80234a2:	2301      	movs	r3, #1
 80234a4:	6013      	str	r3, [r2, #0]
 80234a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80234a8:	2b00      	cmp	r3, #0
 80234aa:	f000 856b 	beq.w	8023f84 <_dtoa_r+0xbac>
 80234ae:	4883      	ldr	r0, [pc, #524]	; (80236bc <_dtoa_r+0x2e4>)
 80234b0:	6018      	str	r0, [r3, #0]
 80234b2:	1e43      	subs	r3, r0, #1
 80234b4:	9301      	str	r3, [sp, #4]
 80234b6:	e7df      	b.n	8023478 <_dtoa_r+0xa0>
 80234b8:	ec4b ab10 	vmov	d0, sl, fp
 80234bc:	aa10      	add	r2, sp, #64	; 0x40
 80234be:	a911      	add	r1, sp, #68	; 0x44
 80234c0:	4620      	mov	r0, r4
 80234c2:	f001 fe3d 	bl	8025140 <__d2b>
 80234c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80234ca:	ee08 0a10 	vmov	s16, r0
 80234ce:	2d00      	cmp	r5, #0
 80234d0:	f000 8084 	beq.w	80235dc <_dtoa_r+0x204>
 80234d4:	ee19 3a90 	vmov	r3, s19
 80234d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80234dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80234e0:	4656      	mov	r6, sl
 80234e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80234e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80234ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80234ee:	4b74      	ldr	r3, [pc, #464]	; (80236c0 <_dtoa_r+0x2e8>)
 80234f0:	2200      	movs	r2, #0
 80234f2:	4630      	mov	r0, r6
 80234f4:	4639      	mov	r1, r7
 80234f6:	f7dc fef7 	bl	80002e8 <__aeabi_dsub>
 80234fa:	a365      	add	r3, pc, #404	; (adr r3, 8023690 <_dtoa_r+0x2b8>)
 80234fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023500:	f7dd f8aa 	bl	8000658 <__aeabi_dmul>
 8023504:	a364      	add	r3, pc, #400	; (adr r3, 8023698 <_dtoa_r+0x2c0>)
 8023506:	e9d3 2300 	ldrd	r2, r3, [r3]
 802350a:	f7dc feef 	bl	80002ec <__adddf3>
 802350e:	4606      	mov	r6, r0
 8023510:	4628      	mov	r0, r5
 8023512:	460f      	mov	r7, r1
 8023514:	f7dd f836 	bl	8000584 <__aeabi_i2d>
 8023518:	a361      	add	r3, pc, #388	; (adr r3, 80236a0 <_dtoa_r+0x2c8>)
 802351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802351e:	f7dd f89b 	bl	8000658 <__aeabi_dmul>
 8023522:	4602      	mov	r2, r0
 8023524:	460b      	mov	r3, r1
 8023526:	4630      	mov	r0, r6
 8023528:	4639      	mov	r1, r7
 802352a:	f7dc fedf 	bl	80002ec <__adddf3>
 802352e:	4606      	mov	r6, r0
 8023530:	460f      	mov	r7, r1
 8023532:	f7dd fb41 	bl	8000bb8 <__aeabi_d2iz>
 8023536:	2200      	movs	r2, #0
 8023538:	9000      	str	r0, [sp, #0]
 802353a:	2300      	movs	r3, #0
 802353c:	4630      	mov	r0, r6
 802353e:	4639      	mov	r1, r7
 8023540:	f7dd fafc 	bl	8000b3c <__aeabi_dcmplt>
 8023544:	b150      	cbz	r0, 802355c <_dtoa_r+0x184>
 8023546:	9800      	ldr	r0, [sp, #0]
 8023548:	f7dd f81c 	bl	8000584 <__aeabi_i2d>
 802354c:	4632      	mov	r2, r6
 802354e:	463b      	mov	r3, r7
 8023550:	f7dd faea 	bl	8000b28 <__aeabi_dcmpeq>
 8023554:	b910      	cbnz	r0, 802355c <_dtoa_r+0x184>
 8023556:	9b00      	ldr	r3, [sp, #0]
 8023558:	3b01      	subs	r3, #1
 802355a:	9300      	str	r3, [sp, #0]
 802355c:	9b00      	ldr	r3, [sp, #0]
 802355e:	2b16      	cmp	r3, #22
 8023560:	d85a      	bhi.n	8023618 <_dtoa_r+0x240>
 8023562:	9a00      	ldr	r2, [sp, #0]
 8023564:	4b57      	ldr	r3, [pc, #348]	; (80236c4 <_dtoa_r+0x2ec>)
 8023566:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802356e:	ec51 0b19 	vmov	r0, r1, d9
 8023572:	f7dd fae3 	bl	8000b3c <__aeabi_dcmplt>
 8023576:	2800      	cmp	r0, #0
 8023578:	d050      	beq.n	802361c <_dtoa_r+0x244>
 802357a:	9b00      	ldr	r3, [sp, #0]
 802357c:	3b01      	subs	r3, #1
 802357e:	9300      	str	r3, [sp, #0]
 8023580:	2300      	movs	r3, #0
 8023582:	930b      	str	r3, [sp, #44]	; 0x2c
 8023584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023586:	1b5d      	subs	r5, r3, r5
 8023588:	1e6b      	subs	r3, r5, #1
 802358a:	9305      	str	r3, [sp, #20]
 802358c:	bf45      	ittet	mi
 802358e:	f1c5 0301 	rsbmi	r3, r5, #1
 8023592:	9304      	strmi	r3, [sp, #16]
 8023594:	2300      	movpl	r3, #0
 8023596:	2300      	movmi	r3, #0
 8023598:	bf4c      	ite	mi
 802359a:	9305      	strmi	r3, [sp, #20]
 802359c:	9304      	strpl	r3, [sp, #16]
 802359e:	9b00      	ldr	r3, [sp, #0]
 80235a0:	2b00      	cmp	r3, #0
 80235a2:	db3d      	blt.n	8023620 <_dtoa_r+0x248>
 80235a4:	9b05      	ldr	r3, [sp, #20]
 80235a6:	9a00      	ldr	r2, [sp, #0]
 80235a8:	920a      	str	r2, [sp, #40]	; 0x28
 80235aa:	4413      	add	r3, r2
 80235ac:	9305      	str	r3, [sp, #20]
 80235ae:	2300      	movs	r3, #0
 80235b0:	9307      	str	r3, [sp, #28]
 80235b2:	9b06      	ldr	r3, [sp, #24]
 80235b4:	2b09      	cmp	r3, #9
 80235b6:	f200 8089 	bhi.w	80236cc <_dtoa_r+0x2f4>
 80235ba:	2b05      	cmp	r3, #5
 80235bc:	bfc4      	itt	gt
 80235be:	3b04      	subgt	r3, #4
 80235c0:	9306      	strgt	r3, [sp, #24]
 80235c2:	9b06      	ldr	r3, [sp, #24]
 80235c4:	f1a3 0302 	sub.w	r3, r3, #2
 80235c8:	bfcc      	ite	gt
 80235ca:	2500      	movgt	r5, #0
 80235cc:	2501      	movle	r5, #1
 80235ce:	2b03      	cmp	r3, #3
 80235d0:	f200 8087 	bhi.w	80236e2 <_dtoa_r+0x30a>
 80235d4:	e8df f003 	tbb	[pc, r3]
 80235d8:	59383a2d 	.word	0x59383a2d
 80235dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80235e0:	441d      	add	r5, r3
 80235e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80235e6:	2b20      	cmp	r3, #32
 80235e8:	bfc1      	itttt	gt
 80235ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80235ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80235f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80235f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80235fa:	bfda      	itte	le
 80235fc:	f1c3 0320 	rsble	r3, r3, #32
 8023600:	fa06 f003 	lslle.w	r0, r6, r3
 8023604:	4318      	orrgt	r0, r3
 8023606:	f7dc ffad 	bl	8000564 <__aeabi_ui2d>
 802360a:	2301      	movs	r3, #1
 802360c:	4606      	mov	r6, r0
 802360e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8023612:	3d01      	subs	r5, #1
 8023614:	930e      	str	r3, [sp, #56]	; 0x38
 8023616:	e76a      	b.n	80234ee <_dtoa_r+0x116>
 8023618:	2301      	movs	r3, #1
 802361a:	e7b2      	b.n	8023582 <_dtoa_r+0x1aa>
 802361c:	900b      	str	r0, [sp, #44]	; 0x2c
 802361e:	e7b1      	b.n	8023584 <_dtoa_r+0x1ac>
 8023620:	9b04      	ldr	r3, [sp, #16]
 8023622:	9a00      	ldr	r2, [sp, #0]
 8023624:	1a9b      	subs	r3, r3, r2
 8023626:	9304      	str	r3, [sp, #16]
 8023628:	4253      	negs	r3, r2
 802362a:	9307      	str	r3, [sp, #28]
 802362c:	2300      	movs	r3, #0
 802362e:	930a      	str	r3, [sp, #40]	; 0x28
 8023630:	e7bf      	b.n	80235b2 <_dtoa_r+0x1da>
 8023632:	2300      	movs	r3, #0
 8023634:	9308      	str	r3, [sp, #32]
 8023636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023638:	2b00      	cmp	r3, #0
 802363a:	dc55      	bgt.n	80236e8 <_dtoa_r+0x310>
 802363c:	2301      	movs	r3, #1
 802363e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8023642:	461a      	mov	r2, r3
 8023644:	9209      	str	r2, [sp, #36]	; 0x24
 8023646:	e00c      	b.n	8023662 <_dtoa_r+0x28a>
 8023648:	2301      	movs	r3, #1
 802364a:	e7f3      	b.n	8023634 <_dtoa_r+0x25c>
 802364c:	2300      	movs	r3, #0
 802364e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023650:	9308      	str	r3, [sp, #32]
 8023652:	9b00      	ldr	r3, [sp, #0]
 8023654:	4413      	add	r3, r2
 8023656:	9302      	str	r3, [sp, #8]
 8023658:	3301      	adds	r3, #1
 802365a:	2b01      	cmp	r3, #1
 802365c:	9303      	str	r3, [sp, #12]
 802365e:	bfb8      	it	lt
 8023660:	2301      	movlt	r3, #1
 8023662:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8023664:	2200      	movs	r2, #0
 8023666:	6042      	str	r2, [r0, #4]
 8023668:	2204      	movs	r2, #4
 802366a:	f102 0614 	add.w	r6, r2, #20
 802366e:	429e      	cmp	r6, r3
 8023670:	6841      	ldr	r1, [r0, #4]
 8023672:	d93d      	bls.n	80236f0 <_dtoa_r+0x318>
 8023674:	4620      	mov	r0, r4
 8023676:	f001 f975 	bl	8024964 <_Balloc>
 802367a:	9001      	str	r0, [sp, #4]
 802367c:	2800      	cmp	r0, #0
 802367e:	d13b      	bne.n	80236f8 <_dtoa_r+0x320>
 8023680:	4b11      	ldr	r3, [pc, #68]	; (80236c8 <_dtoa_r+0x2f0>)
 8023682:	4602      	mov	r2, r0
 8023684:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8023688:	e6c0      	b.n	802340c <_dtoa_r+0x34>
 802368a:	2301      	movs	r3, #1
 802368c:	e7df      	b.n	802364e <_dtoa_r+0x276>
 802368e:	bf00      	nop
 8023690:	636f4361 	.word	0x636f4361
 8023694:	3fd287a7 	.word	0x3fd287a7
 8023698:	8b60c8b3 	.word	0x8b60c8b3
 802369c:	3fc68a28 	.word	0x3fc68a28
 80236a0:	509f79fb 	.word	0x509f79fb
 80236a4:	3fd34413 	.word	0x3fd34413
 80236a8:	0802778a 	.word	0x0802778a
 80236ac:	0802785d 	.word	0x0802785d
 80236b0:	7ff00000 	.word	0x7ff00000
 80236b4:	08027859 	.word	0x08027859
 80236b8:	08027850 	.word	0x08027850
 80236bc:	08027762 	.word	0x08027762
 80236c0:	3ff80000 	.word	0x3ff80000
 80236c4:	080279c8 	.word	0x080279c8
 80236c8:	080278b6 	.word	0x080278b6
 80236cc:	2501      	movs	r5, #1
 80236ce:	2300      	movs	r3, #0
 80236d0:	9306      	str	r3, [sp, #24]
 80236d2:	9508      	str	r5, [sp, #32]
 80236d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80236d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80236dc:	2200      	movs	r2, #0
 80236de:	2312      	movs	r3, #18
 80236e0:	e7b0      	b.n	8023644 <_dtoa_r+0x26c>
 80236e2:	2301      	movs	r3, #1
 80236e4:	9308      	str	r3, [sp, #32]
 80236e6:	e7f5      	b.n	80236d4 <_dtoa_r+0x2fc>
 80236e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80236ee:	e7b8      	b.n	8023662 <_dtoa_r+0x28a>
 80236f0:	3101      	adds	r1, #1
 80236f2:	6041      	str	r1, [r0, #4]
 80236f4:	0052      	lsls	r2, r2, #1
 80236f6:	e7b8      	b.n	802366a <_dtoa_r+0x292>
 80236f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80236fa:	9a01      	ldr	r2, [sp, #4]
 80236fc:	601a      	str	r2, [r3, #0]
 80236fe:	9b03      	ldr	r3, [sp, #12]
 8023700:	2b0e      	cmp	r3, #14
 8023702:	f200 809d 	bhi.w	8023840 <_dtoa_r+0x468>
 8023706:	2d00      	cmp	r5, #0
 8023708:	f000 809a 	beq.w	8023840 <_dtoa_r+0x468>
 802370c:	9b00      	ldr	r3, [sp, #0]
 802370e:	2b00      	cmp	r3, #0
 8023710:	dd32      	ble.n	8023778 <_dtoa_r+0x3a0>
 8023712:	4ab7      	ldr	r2, [pc, #732]	; (80239f0 <_dtoa_r+0x618>)
 8023714:	f003 030f 	and.w	r3, r3, #15
 8023718:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802371c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023720:	9b00      	ldr	r3, [sp, #0]
 8023722:	05d8      	lsls	r0, r3, #23
 8023724:	ea4f 1723 	mov.w	r7, r3, asr #4
 8023728:	d516      	bpl.n	8023758 <_dtoa_r+0x380>
 802372a:	4bb2      	ldr	r3, [pc, #712]	; (80239f4 <_dtoa_r+0x61c>)
 802372c:	ec51 0b19 	vmov	r0, r1, d9
 8023730:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8023734:	f7dd f8ba 	bl	80008ac <__aeabi_ddiv>
 8023738:	f007 070f 	and.w	r7, r7, #15
 802373c:	4682      	mov	sl, r0
 802373e:	468b      	mov	fp, r1
 8023740:	2503      	movs	r5, #3
 8023742:	4eac      	ldr	r6, [pc, #688]	; (80239f4 <_dtoa_r+0x61c>)
 8023744:	b957      	cbnz	r7, 802375c <_dtoa_r+0x384>
 8023746:	4642      	mov	r2, r8
 8023748:	464b      	mov	r3, r9
 802374a:	4650      	mov	r0, sl
 802374c:	4659      	mov	r1, fp
 802374e:	f7dd f8ad 	bl	80008ac <__aeabi_ddiv>
 8023752:	4682      	mov	sl, r0
 8023754:	468b      	mov	fp, r1
 8023756:	e028      	b.n	80237aa <_dtoa_r+0x3d2>
 8023758:	2502      	movs	r5, #2
 802375a:	e7f2      	b.n	8023742 <_dtoa_r+0x36a>
 802375c:	07f9      	lsls	r1, r7, #31
 802375e:	d508      	bpl.n	8023772 <_dtoa_r+0x39a>
 8023760:	4640      	mov	r0, r8
 8023762:	4649      	mov	r1, r9
 8023764:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023768:	f7dc ff76 	bl	8000658 <__aeabi_dmul>
 802376c:	3501      	adds	r5, #1
 802376e:	4680      	mov	r8, r0
 8023770:	4689      	mov	r9, r1
 8023772:	107f      	asrs	r7, r7, #1
 8023774:	3608      	adds	r6, #8
 8023776:	e7e5      	b.n	8023744 <_dtoa_r+0x36c>
 8023778:	f000 809b 	beq.w	80238b2 <_dtoa_r+0x4da>
 802377c:	9b00      	ldr	r3, [sp, #0]
 802377e:	4f9d      	ldr	r7, [pc, #628]	; (80239f4 <_dtoa_r+0x61c>)
 8023780:	425e      	negs	r6, r3
 8023782:	4b9b      	ldr	r3, [pc, #620]	; (80239f0 <_dtoa_r+0x618>)
 8023784:	f006 020f 	and.w	r2, r6, #15
 8023788:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023790:	ec51 0b19 	vmov	r0, r1, d9
 8023794:	f7dc ff60 	bl	8000658 <__aeabi_dmul>
 8023798:	1136      	asrs	r6, r6, #4
 802379a:	4682      	mov	sl, r0
 802379c:	468b      	mov	fp, r1
 802379e:	2300      	movs	r3, #0
 80237a0:	2502      	movs	r5, #2
 80237a2:	2e00      	cmp	r6, #0
 80237a4:	d17a      	bne.n	802389c <_dtoa_r+0x4c4>
 80237a6:	2b00      	cmp	r3, #0
 80237a8:	d1d3      	bne.n	8023752 <_dtoa_r+0x37a>
 80237aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80237ac:	2b00      	cmp	r3, #0
 80237ae:	f000 8082 	beq.w	80238b6 <_dtoa_r+0x4de>
 80237b2:	4b91      	ldr	r3, [pc, #580]	; (80239f8 <_dtoa_r+0x620>)
 80237b4:	2200      	movs	r2, #0
 80237b6:	4650      	mov	r0, sl
 80237b8:	4659      	mov	r1, fp
 80237ba:	f7dd f9bf 	bl	8000b3c <__aeabi_dcmplt>
 80237be:	2800      	cmp	r0, #0
 80237c0:	d079      	beq.n	80238b6 <_dtoa_r+0x4de>
 80237c2:	9b03      	ldr	r3, [sp, #12]
 80237c4:	2b00      	cmp	r3, #0
 80237c6:	d076      	beq.n	80238b6 <_dtoa_r+0x4de>
 80237c8:	9b02      	ldr	r3, [sp, #8]
 80237ca:	2b00      	cmp	r3, #0
 80237cc:	dd36      	ble.n	802383c <_dtoa_r+0x464>
 80237ce:	9b00      	ldr	r3, [sp, #0]
 80237d0:	4650      	mov	r0, sl
 80237d2:	4659      	mov	r1, fp
 80237d4:	1e5f      	subs	r7, r3, #1
 80237d6:	2200      	movs	r2, #0
 80237d8:	4b88      	ldr	r3, [pc, #544]	; (80239fc <_dtoa_r+0x624>)
 80237da:	f7dc ff3d 	bl	8000658 <__aeabi_dmul>
 80237de:	9e02      	ldr	r6, [sp, #8]
 80237e0:	4682      	mov	sl, r0
 80237e2:	468b      	mov	fp, r1
 80237e4:	3501      	adds	r5, #1
 80237e6:	4628      	mov	r0, r5
 80237e8:	f7dc fecc 	bl	8000584 <__aeabi_i2d>
 80237ec:	4652      	mov	r2, sl
 80237ee:	465b      	mov	r3, fp
 80237f0:	f7dc ff32 	bl	8000658 <__aeabi_dmul>
 80237f4:	4b82      	ldr	r3, [pc, #520]	; (8023a00 <_dtoa_r+0x628>)
 80237f6:	2200      	movs	r2, #0
 80237f8:	f7dc fd78 	bl	80002ec <__adddf3>
 80237fc:	46d0      	mov	r8, sl
 80237fe:	46d9      	mov	r9, fp
 8023800:	4682      	mov	sl, r0
 8023802:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8023806:	2e00      	cmp	r6, #0
 8023808:	d158      	bne.n	80238bc <_dtoa_r+0x4e4>
 802380a:	4b7e      	ldr	r3, [pc, #504]	; (8023a04 <_dtoa_r+0x62c>)
 802380c:	2200      	movs	r2, #0
 802380e:	4640      	mov	r0, r8
 8023810:	4649      	mov	r1, r9
 8023812:	f7dc fd69 	bl	80002e8 <__aeabi_dsub>
 8023816:	4652      	mov	r2, sl
 8023818:	465b      	mov	r3, fp
 802381a:	4680      	mov	r8, r0
 802381c:	4689      	mov	r9, r1
 802381e:	f7dd f9ab 	bl	8000b78 <__aeabi_dcmpgt>
 8023822:	2800      	cmp	r0, #0
 8023824:	f040 8295 	bne.w	8023d52 <_dtoa_r+0x97a>
 8023828:	4652      	mov	r2, sl
 802382a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 802382e:	4640      	mov	r0, r8
 8023830:	4649      	mov	r1, r9
 8023832:	f7dd f983 	bl	8000b3c <__aeabi_dcmplt>
 8023836:	2800      	cmp	r0, #0
 8023838:	f040 8289 	bne.w	8023d4e <_dtoa_r+0x976>
 802383c:	ec5b ab19 	vmov	sl, fp, d9
 8023840:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023842:	2b00      	cmp	r3, #0
 8023844:	f2c0 8148 	blt.w	8023ad8 <_dtoa_r+0x700>
 8023848:	9a00      	ldr	r2, [sp, #0]
 802384a:	2a0e      	cmp	r2, #14
 802384c:	f300 8144 	bgt.w	8023ad8 <_dtoa_r+0x700>
 8023850:	4b67      	ldr	r3, [pc, #412]	; (80239f0 <_dtoa_r+0x618>)
 8023852:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023856:	e9d3 8900 	ldrd	r8, r9, [r3]
 802385a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802385c:	2b00      	cmp	r3, #0
 802385e:	f280 80d5 	bge.w	8023a0c <_dtoa_r+0x634>
 8023862:	9b03      	ldr	r3, [sp, #12]
 8023864:	2b00      	cmp	r3, #0
 8023866:	f300 80d1 	bgt.w	8023a0c <_dtoa_r+0x634>
 802386a:	f040 826f 	bne.w	8023d4c <_dtoa_r+0x974>
 802386e:	4b65      	ldr	r3, [pc, #404]	; (8023a04 <_dtoa_r+0x62c>)
 8023870:	2200      	movs	r2, #0
 8023872:	4640      	mov	r0, r8
 8023874:	4649      	mov	r1, r9
 8023876:	f7dc feef 	bl	8000658 <__aeabi_dmul>
 802387a:	4652      	mov	r2, sl
 802387c:	465b      	mov	r3, fp
 802387e:	f7dd f971 	bl	8000b64 <__aeabi_dcmpge>
 8023882:	9e03      	ldr	r6, [sp, #12]
 8023884:	4637      	mov	r7, r6
 8023886:	2800      	cmp	r0, #0
 8023888:	f040 8245 	bne.w	8023d16 <_dtoa_r+0x93e>
 802388c:	9d01      	ldr	r5, [sp, #4]
 802388e:	2331      	movs	r3, #49	; 0x31
 8023890:	f805 3b01 	strb.w	r3, [r5], #1
 8023894:	9b00      	ldr	r3, [sp, #0]
 8023896:	3301      	adds	r3, #1
 8023898:	9300      	str	r3, [sp, #0]
 802389a:	e240      	b.n	8023d1e <_dtoa_r+0x946>
 802389c:	07f2      	lsls	r2, r6, #31
 802389e:	d505      	bpl.n	80238ac <_dtoa_r+0x4d4>
 80238a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80238a4:	f7dc fed8 	bl	8000658 <__aeabi_dmul>
 80238a8:	3501      	adds	r5, #1
 80238aa:	2301      	movs	r3, #1
 80238ac:	1076      	asrs	r6, r6, #1
 80238ae:	3708      	adds	r7, #8
 80238b0:	e777      	b.n	80237a2 <_dtoa_r+0x3ca>
 80238b2:	2502      	movs	r5, #2
 80238b4:	e779      	b.n	80237aa <_dtoa_r+0x3d2>
 80238b6:	9f00      	ldr	r7, [sp, #0]
 80238b8:	9e03      	ldr	r6, [sp, #12]
 80238ba:	e794      	b.n	80237e6 <_dtoa_r+0x40e>
 80238bc:	9901      	ldr	r1, [sp, #4]
 80238be:	4b4c      	ldr	r3, [pc, #304]	; (80239f0 <_dtoa_r+0x618>)
 80238c0:	4431      	add	r1, r6
 80238c2:	910d      	str	r1, [sp, #52]	; 0x34
 80238c4:	9908      	ldr	r1, [sp, #32]
 80238c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80238ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80238ce:	2900      	cmp	r1, #0
 80238d0:	d043      	beq.n	802395a <_dtoa_r+0x582>
 80238d2:	494d      	ldr	r1, [pc, #308]	; (8023a08 <_dtoa_r+0x630>)
 80238d4:	2000      	movs	r0, #0
 80238d6:	f7dc ffe9 	bl	80008ac <__aeabi_ddiv>
 80238da:	4652      	mov	r2, sl
 80238dc:	465b      	mov	r3, fp
 80238de:	f7dc fd03 	bl	80002e8 <__aeabi_dsub>
 80238e2:	9d01      	ldr	r5, [sp, #4]
 80238e4:	4682      	mov	sl, r0
 80238e6:	468b      	mov	fp, r1
 80238e8:	4649      	mov	r1, r9
 80238ea:	4640      	mov	r0, r8
 80238ec:	f7dd f964 	bl	8000bb8 <__aeabi_d2iz>
 80238f0:	4606      	mov	r6, r0
 80238f2:	f7dc fe47 	bl	8000584 <__aeabi_i2d>
 80238f6:	4602      	mov	r2, r0
 80238f8:	460b      	mov	r3, r1
 80238fa:	4640      	mov	r0, r8
 80238fc:	4649      	mov	r1, r9
 80238fe:	f7dc fcf3 	bl	80002e8 <__aeabi_dsub>
 8023902:	3630      	adds	r6, #48	; 0x30
 8023904:	f805 6b01 	strb.w	r6, [r5], #1
 8023908:	4652      	mov	r2, sl
 802390a:	465b      	mov	r3, fp
 802390c:	4680      	mov	r8, r0
 802390e:	4689      	mov	r9, r1
 8023910:	f7dd f914 	bl	8000b3c <__aeabi_dcmplt>
 8023914:	2800      	cmp	r0, #0
 8023916:	d163      	bne.n	80239e0 <_dtoa_r+0x608>
 8023918:	4642      	mov	r2, r8
 802391a:	464b      	mov	r3, r9
 802391c:	4936      	ldr	r1, [pc, #216]	; (80239f8 <_dtoa_r+0x620>)
 802391e:	2000      	movs	r0, #0
 8023920:	f7dc fce2 	bl	80002e8 <__aeabi_dsub>
 8023924:	4652      	mov	r2, sl
 8023926:	465b      	mov	r3, fp
 8023928:	f7dd f908 	bl	8000b3c <__aeabi_dcmplt>
 802392c:	2800      	cmp	r0, #0
 802392e:	f040 80b5 	bne.w	8023a9c <_dtoa_r+0x6c4>
 8023932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023934:	429d      	cmp	r5, r3
 8023936:	d081      	beq.n	802383c <_dtoa_r+0x464>
 8023938:	4b30      	ldr	r3, [pc, #192]	; (80239fc <_dtoa_r+0x624>)
 802393a:	2200      	movs	r2, #0
 802393c:	4650      	mov	r0, sl
 802393e:	4659      	mov	r1, fp
 8023940:	f7dc fe8a 	bl	8000658 <__aeabi_dmul>
 8023944:	4b2d      	ldr	r3, [pc, #180]	; (80239fc <_dtoa_r+0x624>)
 8023946:	4682      	mov	sl, r0
 8023948:	468b      	mov	fp, r1
 802394a:	4640      	mov	r0, r8
 802394c:	4649      	mov	r1, r9
 802394e:	2200      	movs	r2, #0
 8023950:	f7dc fe82 	bl	8000658 <__aeabi_dmul>
 8023954:	4680      	mov	r8, r0
 8023956:	4689      	mov	r9, r1
 8023958:	e7c6      	b.n	80238e8 <_dtoa_r+0x510>
 802395a:	4650      	mov	r0, sl
 802395c:	4659      	mov	r1, fp
 802395e:	f7dc fe7b 	bl	8000658 <__aeabi_dmul>
 8023962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023964:	9d01      	ldr	r5, [sp, #4]
 8023966:	930f      	str	r3, [sp, #60]	; 0x3c
 8023968:	4682      	mov	sl, r0
 802396a:	468b      	mov	fp, r1
 802396c:	4649      	mov	r1, r9
 802396e:	4640      	mov	r0, r8
 8023970:	f7dd f922 	bl	8000bb8 <__aeabi_d2iz>
 8023974:	4606      	mov	r6, r0
 8023976:	f7dc fe05 	bl	8000584 <__aeabi_i2d>
 802397a:	3630      	adds	r6, #48	; 0x30
 802397c:	4602      	mov	r2, r0
 802397e:	460b      	mov	r3, r1
 8023980:	4640      	mov	r0, r8
 8023982:	4649      	mov	r1, r9
 8023984:	f7dc fcb0 	bl	80002e8 <__aeabi_dsub>
 8023988:	f805 6b01 	strb.w	r6, [r5], #1
 802398c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802398e:	429d      	cmp	r5, r3
 8023990:	4680      	mov	r8, r0
 8023992:	4689      	mov	r9, r1
 8023994:	f04f 0200 	mov.w	r2, #0
 8023998:	d124      	bne.n	80239e4 <_dtoa_r+0x60c>
 802399a:	4b1b      	ldr	r3, [pc, #108]	; (8023a08 <_dtoa_r+0x630>)
 802399c:	4650      	mov	r0, sl
 802399e:	4659      	mov	r1, fp
 80239a0:	f7dc fca4 	bl	80002ec <__adddf3>
 80239a4:	4602      	mov	r2, r0
 80239a6:	460b      	mov	r3, r1
 80239a8:	4640      	mov	r0, r8
 80239aa:	4649      	mov	r1, r9
 80239ac:	f7dd f8e4 	bl	8000b78 <__aeabi_dcmpgt>
 80239b0:	2800      	cmp	r0, #0
 80239b2:	d173      	bne.n	8023a9c <_dtoa_r+0x6c4>
 80239b4:	4652      	mov	r2, sl
 80239b6:	465b      	mov	r3, fp
 80239b8:	4913      	ldr	r1, [pc, #76]	; (8023a08 <_dtoa_r+0x630>)
 80239ba:	2000      	movs	r0, #0
 80239bc:	f7dc fc94 	bl	80002e8 <__aeabi_dsub>
 80239c0:	4602      	mov	r2, r0
 80239c2:	460b      	mov	r3, r1
 80239c4:	4640      	mov	r0, r8
 80239c6:	4649      	mov	r1, r9
 80239c8:	f7dd f8b8 	bl	8000b3c <__aeabi_dcmplt>
 80239cc:	2800      	cmp	r0, #0
 80239ce:	f43f af35 	beq.w	802383c <_dtoa_r+0x464>
 80239d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80239d4:	1e6b      	subs	r3, r5, #1
 80239d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80239d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80239dc:	2b30      	cmp	r3, #48	; 0x30
 80239de:	d0f8      	beq.n	80239d2 <_dtoa_r+0x5fa>
 80239e0:	9700      	str	r7, [sp, #0]
 80239e2:	e049      	b.n	8023a78 <_dtoa_r+0x6a0>
 80239e4:	4b05      	ldr	r3, [pc, #20]	; (80239fc <_dtoa_r+0x624>)
 80239e6:	f7dc fe37 	bl	8000658 <__aeabi_dmul>
 80239ea:	4680      	mov	r8, r0
 80239ec:	4689      	mov	r9, r1
 80239ee:	e7bd      	b.n	802396c <_dtoa_r+0x594>
 80239f0:	080279c8 	.word	0x080279c8
 80239f4:	080279a0 	.word	0x080279a0
 80239f8:	3ff00000 	.word	0x3ff00000
 80239fc:	40240000 	.word	0x40240000
 8023a00:	401c0000 	.word	0x401c0000
 8023a04:	40140000 	.word	0x40140000
 8023a08:	3fe00000 	.word	0x3fe00000
 8023a0c:	9d01      	ldr	r5, [sp, #4]
 8023a0e:	4656      	mov	r6, sl
 8023a10:	465f      	mov	r7, fp
 8023a12:	4642      	mov	r2, r8
 8023a14:	464b      	mov	r3, r9
 8023a16:	4630      	mov	r0, r6
 8023a18:	4639      	mov	r1, r7
 8023a1a:	f7dc ff47 	bl	80008ac <__aeabi_ddiv>
 8023a1e:	f7dd f8cb 	bl	8000bb8 <__aeabi_d2iz>
 8023a22:	4682      	mov	sl, r0
 8023a24:	f7dc fdae 	bl	8000584 <__aeabi_i2d>
 8023a28:	4642      	mov	r2, r8
 8023a2a:	464b      	mov	r3, r9
 8023a2c:	f7dc fe14 	bl	8000658 <__aeabi_dmul>
 8023a30:	4602      	mov	r2, r0
 8023a32:	460b      	mov	r3, r1
 8023a34:	4630      	mov	r0, r6
 8023a36:	4639      	mov	r1, r7
 8023a38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8023a3c:	f7dc fc54 	bl	80002e8 <__aeabi_dsub>
 8023a40:	f805 6b01 	strb.w	r6, [r5], #1
 8023a44:	9e01      	ldr	r6, [sp, #4]
 8023a46:	9f03      	ldr	r7, [sp, #12]
 8023a48:	1bae      	subs	r6, r5, r6
 8023a4a:	42b7      	cmp	r7, r6
 8023a4c:	4602      	mov	r2, r0
 8023a4e:	460b      	mov	r3, r1
 8023a50:	d135      	bne.n	8023abe <_dtoa_r+0x6e6>
 8023a52:	f7dc fc4b 	bl	80002ec <__adddf3>
 8023a56:	4642      	mov	r2, r8
 8023a58:	464b      	mov	r3, r9
 8023a5a:	4606      	mov	r6, r0
 8023a5c:	460f      	mov	r7, r1
 8023a5e:	f7dd f88b 	bl	8000b78 <__aeabi_dcmpgt>
 8023a62:	b9d0      	cbnz	r0, 8023a9a <_dtoa_r+0x6c2>
 8023a64:	4642      	mov	r2, r8
 8023a66:	464b      	mov	r3, r9
 8023a68:	4630      	mov	r0, r6
 8023a6a:	4639      	mov	r1, r7
 8023a6c:	f7dd f85c 	bl	8000b28 <__aeabi_dcmpeq>
 8023a70:	b110      	cbz	r0, 8023a78 <_dtoa_r+0x6a0>
 8023a72:	f01a 0f01 	tst.w	sl, #1
 8023a76:	d110      	bne.n	8023a9a <_dtoa_r+0x6c2>
 8023a78:	4620      	mov	r0, r4
 8023a7a:	ee18 1a10 	vmov	r1, s16
 8023a7e:	f000 ffb1 	bl	80249e4 <_Bfree>
 8023a82:	2300      	movs	r3, #0
 8023a84:	9800      	ldr	r0, [sp, #0]
 8023a86:	702b      	strb	r3, [r5, #0]
 8023a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023a8a:	3001      	adds	r0, #1
 8023a8c:	6018      	str	r0, [r3, #0]
 8023a8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023a90:	2b00      	cmp	r3, #0
 8023a92:	f43f acf1 	beq.w	8023478 <_dtoa_r+0xa0>
 8023a96:	601d      	str	r5, [r3, #0]
 8023a98:	e4ee      	b.n	8023478 <_dtoa_r+0xa0>
 8023a9a:	9f00      	ldr	r7, [sp, #0]
 8023a9c:	462b      	mov	r3, r5
 8023a9e:	461d      	mov	r5, r3
 8023aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023aa4:	2a39      	cmp	r2, #57	; 0x39
 8023aa6:	d106      	bne.n	8023ab6 <_dtoa_r+0x6de>
 8023aa8:	9a01      	ldr	r2, [sp, #4]
 8023aaa:	429a      	cmp	r2, r3
 8023aac:	d1f7      	bne.n	8023a9e <_dtoa_r+0x6c6>
 8023aae:	9901      	ldr	r1, [sp, #4]
 8023ab0:	2230      	movs	r2, #48	; 0x30
 8023ab2:	3701      	adds	r7, #1
 8023ab4:	700a      	strb	r2, [r1, #0]
 8023ab6:	781a      	ldrb	r2, [r3, #0]
 8023ab8:	3201      	adds	r2, #1
 8023aba:	701a      	strb	r2, [r3, #0]
 8023abc:	e790      	b.n	80239e0 <_dtoa_r+0x608>
 8023abe:	4ba6      	ldr	r3, [pc, #664]	; (8023d58 <_dtoa_r+0x980>)
 8023ac0:	2200      	movs	r2, #0
 8023ac2:	f7dc fdc9 	bl	8000658 <__aeabi_dmul>
 8023ac6:	2200      	movs	r2, #0
 8023ac8:	2300      	movs	r3, #0
 8023aca:	4606      	mov	r6, r0
 8023acc:	460f      	mov	r7, r1
 8023ace:	f7dd f82b 	bl	8000b28 <__aeabi_dcmpeq>
 8023ad2:	2800      	cmp	r0, #0
 8023ad4:	d09d      	beq.n	8023a12 <_dtoa_r+0x63a>
 8023ad6:	e7cf      	b.n	8023a78 <_dtoa_r+0x6a0>
 8023ad8:	9a08      	ldr	r2, [sp, #32]
 8023ada:	2a00      	cmp	r2, #0
 8023adc:	f000 80d7 	beq.w	8023c8e <_dtoa_r+0x8b6>
 8023ae0:	9a06      	ldr	r2, [sp, #24]
 8023ae2:	2a01      	cmp	r2, #1
 8023ae4:	f300 80ba 	bgt.w	8023c5c <_dtoa_r+0x884>
 8023ae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023aea:	2a00      	cmp	r2, #0
 8023aec:	f000 80b2 	beq.w	8023c54 <_dtoa_r+0x87c>
 8023af0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8023af4:	9e07      	ldr	r6, [sp, #28]
 8023af6:	9d04      	ldr	r5, [sp, #16]
 8023af8:	9a04      	ldr	r2, [sp, #16]
 8023afa:	441a      	add	r2, r3
 8023afc:	9204      	str	r2, [sp, #16]
 8023afe:	9a05      	ldr	r2, [sp, #20]
 8023b00:	2101      	movs	r1, #1
 8023b02:	441a      	add	r2, r3
 8023b04:	4620      	mov	r0, r4
 8023b06:	9205      	str	r2, [sp, #20]
 8023b08:	f001 f86e 	bl	8024be8 <__i2b>
 8023b0c:	4607      	mov	r7, r0
 8023b0e:	2d00      	cmp	r5, #0
 8023b10:	dd0c      	ble.n	8023b2c <_dtoa_r+0x754>
 8023b12:	9b05      	ldr	r3, [sp, #20]
 8023b14:	2b00      	cmp	r3, #0
 8023b16:	dd09      	ble.n	8023b2c <_dtoa_r+0x754>
 8023b18:	42ab      	cmp	r3, r5
 8023b1a:	9a04      	ldr	r2, [sp, #16]
 8023b1c:	bfa8      	it	ge
 8023b1e:	462b      	movge	r3, r5
 8023b20:	1ad2      	subs	r2, r2, r3
 8023b22:	9204      	str	r2, [sp, #16]
 8023b24:	9a05      	ldr	r2, [sp, #20]
 8023b26:	1aed      	subs	r5, r5, r3
 8023b28:	1ad3      	subs	r3, r2, r3
 8023b2a:	9305      	str	r3, [sp, #20]
 8023b2c:	9b07      	ldr	r3, [sp, #28]
 8023b2e:	b31b      	cbz	r3, 8023b78 <_dtoa_r+0x7a0>
 8023b30:	9b08      	ldr	r3, [sp, #32]
 8023b32:	2b00      	cmp	r3, #0
 8023b34:	f000 80af 	beq.w	8023c96 <_dtoa_r+0x8be>
 8023b38:	2e00      	cmp	r6, #0
 8023b3a:	dd13      	ble.n	8023b64 <_dtoa_r+0x78c>
 8023b3c:	4639      	mov	r1, r7
 8023b3e:	4632      	mov	r2, r6
 8023b40:	4620      	mov	r0, r4
 8023b42:	f001 f911 	bl	8024d68 <__pow5mult>
 8023b46:	ee18 2a10 	vmov	r2, s16
 8023b4a:	4601      	mov	r1, r0
 8023b4c:	4607      	mov	r7, r0
 8023b4e:	4620      	mov	r0, r4
 8023b50:	f001 f860 	bl	8024c14 <__multiply>
 8023b54:	ee18 1a10 	vmov	r1, s16
 8023b58:	4680      	mov	r8, r0
 8023b5a:	4620      	mov	r0, r4
 8023b5c:	f000 ff42 	bl	80249e4 <_Bfree>
 8023b60:	ee08 8a10 	vmov	s16, r8
 8023b64:	9b07      	ldr	r3, [sp, #28]
 8023b66:	1b9a      	subs	r2, r3, r6
 8023b68:	d006      	beq.n	8023b78 <_dtoa_r+0x7a0>
 8023b6a:	ee18 1a10 	vmov	r1, s16
 8023b6e:	4620      	mov	r0, r4
 8023b70:	f001 f8fa 	bl	8024d68 <__pow5mult>
 8023b74:	ee08 0a10 	vmov	s16, r0
 8023b78:	2101      	movs	r1, #1
 8023b7a:	4620      	mov	r0, r4
 8023b7c:	f001 f834 	bl	8024be8 <__i2b>
 8023b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023b82:	2b00      	cmp	r3, #0
 8023b84:	4606      	mov	r6, r0
 8023b86:	f340 8088 	ble.w	8023c9a <_dtoa_r+0x8c2>
 8023b8a:	461a      	mov	r2, r3
 8023b8c:	4601      	mov	r1, r0
 8023b8e:	4620      	mov	r0, r4
 8023b90:	f001 f8ea 	bl	8024d68 <__pow5mult>
 8023b94:	9b06      	ldr	r3, [sp, #24]
 8023b96:	2b01      	cmp	r3, #1
 8023b98:	4606      	mov	r6, r0
 8023b9a:	f340 8081 	ble.w	8023ca0 <_dtoa_r+0x8c8>
 8023b9e:	f04f 0800 	mov.w	r8, #0
 8023ba2:	6933      	ldr	r3, [r6, #16]
 8023ba4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8023ba8:	6918      	ldr	r0, [r3, #16]
 8023baa:	f000 ffcd 	bl	8024b48 <__hi0bits>
 8023bae:	f1c0 0020 	rsb	r0, r0, #32
 8023bb2:	9b05      	ldr	r3, [sp, #20]
 8023bb4:	4418      	add	r0, r3
 8023bb6:	f010 001f 	ands.w	r0, r0, #31
 8023bba:	f000 8092 	beq.w	8023ce2 <_dtoa_r+0x90a>
 8023bbe:	f1c0 0320 	rsb	r3, r0, #32
 8023bc2:	2b04      	cmp	r3, #4
 8023bc4:	f340 808a 	ble.w	8023cdc <_dtoa_r+0x904>
 8023bc8:	f1c0 001c 	rsb	r0, r0, #28
 8023bcc:	9b04      	ldr	r3, [sp, #16]
 8023bce:	4403      	add	r3, r0
 8023bd0:	9304      	str	r3, [sp, #16]
 8023bd2:	9b05      	ldr	r3, [sp, #20]
 8023bd4:	4403      	add	r3, r0
 8023bd6:	4405      	add	r5, r0
 8023bd8:	9305      	str	r3, [sp, #20]
 8023bda:	9b04      	ldr	r3, [sp, #16]
 8023bdc:	2b00      	cmp	r3, #0
 8023bde:	dd07      	ble.n	8023bf0 <_dtoa_r+0x818>
 8023be0:	ee18 1a10 	vmov	r1, s16
 8023be4:	461a      	mov	r2, r3
 8023be6:	4620      	mov	r0, r4
 8023be8:	f001 f918 	bl	8024e1c <__lshift>
 8023bec:	ee08 0a10 	vmov	s16, r0
 8023bf0:	9b05      	ldr	r3, [sp, #20]
 8023bf2:	2b00      	cmp	r3, #0
 8023bf4:	dd05      	ble.n	8023c02 <_dtoa_r+0x82a>
 8023bf6:	4631      	mov	r1, r6
 8023bf8:	461a      	mov	r2, r3
 8023bfa:	4620      	mov	r0, r4
 8023bfc:	f001 f90e 	bl	8024e1c <__lshift>
 8023c00:	4606      	mov	r6, r0
 8023c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023c04:	2b00      	cmp	r3, #0
 8023c06:	d06e      	beq.n	8023ce6 <_dtoa_r+0x90e>
 8023c08:	ee18 0a10 	vmov	r0, s16
 8023c0c:	4631      	mov	r1, r6
 8023c0e:	f001 f975 	bl	8024efc <__mcmp>
 8023c12:	2800      	cmp	r0, #0
 8023c14:	da67      	bge.n	8023ce6 <_dtoa_r+0x90e>
 8023c16:	9b00      	ldr	r3, [sp, #0]
 8023c18:	3b01      	subs	r3, #1
 8023c1a:	ee18 1a10 	vmov	r1, s16
 8023c1e:	9300      	str	r3, [sp, #0]
 8023c20:	220a      	movs	r2, #10
 8023c22:	2300      	movs	r3, #0
 8023c24:	4620      	mov	r0, r4
 8023c26:	f000 feff 	bl	8024a28 <__multadd>
 8023c2a:	9b08      	ldr	r3, [sp, #32]
 8023c2c:	ee08 0a10 	vmov	s16, r0
 8023c30:	2b00      	cmp	r3, #0
 8023c32:	f000 81b1 	beq.w	8023f98 <_dtoa_r+0xbc0>
 8023c36:	2300      	movs	r3, #0
 8023c38:	4639      	mov	r1, r7
 8023c3a:	220a      	movs	r2, #10
 8023c3c:	4620      	mov	r0, r4
 8023c3e:	f000 fef3 	bl	8024a28 <__multadd>
 8023c42:	9b02      	ldr	r3, [sp, #8]
 8023c44:	2b00      	cmp	r3, #0
 8023c46:	4607      	mov	r7, r0
 8023c48:	f300 808e 	bgt.w	8023d68 <_dtoa_r+0x990>
 8023c4c:	9b06      	ldr	r3, [sp, #24]
 8023c4e:	2b02      	cmp	r3, #2
 8023c50:	dc51      	bgt.n	8023cf6 <_dtoa_r+0x91e>
 8023c52:	e089      	b.n	8023d68 <_dtoa_r+0x990>
 8023c54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023c56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8023c5a:	e74b      	b.n	8023af4 <_dtoa_r+0x71c>
 8023c5c:	9b03      	ldr	r3, [sp, #12]
 8023c5e:	1e5e      	subs	r6, r3, #1
 8023c60:	9b07      	ldr	r3, [sp, #28]
 8023c62:	42b3      	cmp	r3, r6
 8023c64:	bfbf      	itttt	lt
 8023c66:	9b07      	ldrlt	r3, [sp, #28]
 8023c68:	9607      	strlt	r6, [sp, #28]
 8023c6a:	1af2      	sublt	r2, r6, r3
 8023c6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8023c6e:	bfb6      	itet	lt
 8023c70:	189b      	addlt	r3, r3, r2
 8023c72:	1b9e      	subge	r6, r3, r6
 8023c74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8023c76:	9b03      	ldr	r3, [sp, #12]
 8023c78:	bfb8      	it	lt
 8023c7a:	2600      	movlt	r6, #0
 8023c7c:	2b00      	cmp	r3, #0
 8023c7e:	bfb7      	itett	lt
 8023c80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8023c84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8023c88:	1a9d      	sublt	r5, r3, r2
 8023c8a:	2300      	movlt	r3, #0
 8023c8c:	e734      	b.n	8023af8 <_dtoa_r+0x720>
 8023c8e:	9e07      	ldr	r6, [sp, #28]
 8023c90:	9d04      	ldr	r5, [sp, #16]
 8023c92:	9f08      	ldr	r7, [sp, #32]
 8023c94:	e73b      	b.n	8023b0e <_dtoa_r+0x736>
 8023c96:	9a07      	ldr	r2, [sp, #28]
 8023c98:	e767      	b.n	8023b6a <_dtoa_r+0x792>
 8023c9a:	9b06      	ldr	r3, [sp, #24]
 8023c9c:	2b01      	cmp	r3, #1
 8023c9e:	dc18      	bgt.n	8023cd2 <_dtoa_r+0x8fa>
 8023ca0:	f1ba 0f00 	cmp.w	sl, #0
 8023ca4:	d115      	bne.n	8023cd2 <_dtoa_r+0x8fa>
 8023ca6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8023caa:	b993      	cbnz	r3, 8023cd2 <_dtoa_r+0x8fa>
 8023cac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8023cb0:	0d1b      	lsrs	r3, r3, #20
 8023cb2:	051b      	lsls	r3, r3, #20
 8023cb4:	b183      	cbz	r3, 8023cd8 <_dtoa_r+0x900>
 8023cb6:	9b04      	ldr	r3, [sp, #16]
 8023cb8:	3301      	adds	r3, #1
 8023cba:	9304      	str	r3, [sp, #16]
 8023cbc:	9b05      	ldr	r3, [sp, #20]
 8023cbe:	3301      	adds	r3, #1
 8023cc0:	9305      	str	r3, [sp, #20]
 8023cc2:	f04f 0801 	mov.w	r8, #1
 8023cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023cc8:	2b00      	cmp	r3, #0
 8023cca:	f47f af6a 	bne.w	8023ba2 <_dtoa_r+0x7ca>
 8023cce:	2001      	movs	r0, #1
 8023cd0:	e76f      	b.n	8023bb2 <_dtoa_r+0x7da>
 8023cd2:	f04f 0800 	mov.w	r8, #0
 8023cd6:	e7f6      	b.n	8023cc6 <_dtoa_r+0x8ee>
 8023cd8:	4698      	mov	r8, r3
 8023cda:	e7f4      	b.n	8023cc6 <_dtoa_r+0x8ee>
 8023cdc:	f43f af7d 	beq.w	8023bda <_dtoa_r+0x802>
 8023ce0:	4618      	mov	r0, r3
 8023ce2:	301c      	adds	r0, #28
 8023ce4:	e772      	b.n	8023bcc <_dtoa_r+0x7f4>
 8023ce6:	9b03      	ldr	r3, [sp, #12]
 8023ce8:	2b00      	cmp	r3, #0
 8023cea:	dc37      	bgt.n	8023d5c <_dtoa_r+0x984>
 8023cec:	9b06      	ldr	r3, [sp, #24]
 8023cee:	2b02      	cmp	r3, #2
 8023cf0:	dd34      	ble.n	8023d5c <_dtoa_r+0x984>
 8023cf2:	9b03      	ldr	r3, [sp, #12]
 8023cf4:	9302      	str	r3, [sp, #8]
 8023cf6:	9b02      	ldr	r3, [sp, #8]
 8023cf8:	b96b      	cbnz	r3, 8023d16 <_dtoa_r+0x93e>
 8023cfa:	4631      	mov	r1, r6
 8023cfc:	2205      	movs	r2, #5
 8023cfe:	4620      	mov	r0, r4
 8023d00:	f000 fe92 	bl	8024a28 <__multadd>
 8023d04:	4601      	mov	r1, r0
 8023d06:	4606      	mov	r6, r0
 8023d08:	ee18 0a10 	vmov	r0, s16
 8023d0c:	f001 f8f6 	bl	8024efc <__mcmp>
 8023d10:	2800      	cmp	r0, #0
 8023d12:	f73f adbb 	bgt.w	802388c <_dtoa_r+0x4b4>
 8023d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d18:	9d01      	ldr	r5, [sp, #4]
 8023d1a:	43db      	mvns	r3, r3
 8023d1c:	9300      	str	r3, [sp, #0]
 8023d1e:	f04f 0800 	mov.w	r8, #0
 8023d22:	4631      	mov	r1, r6
 8023d24:	4620      	mov	r0, r4
 8023d26:	f000 fe5d 	bl	80249e4 <_Bfree>
 8023d2a:	2f00      	cmp	r7, #0
 8023d2c:	f43f aea4 	beq.w	8023a78 <_dtoa_r+0x6a0>
 8023d30:	f1b8 0f00 	cmp.w	r8, #0
 8023d34:	d005      	beq.n	8023d42 <_dtoa_r+0x96a>
 8023d36:	45b8      	cmp	r8, r7
 8023d38:	d003      	beq.n	8023d42 <_dtoa_r+0x96a>
 8023d3a:	4641      	mov	r1, r8
 8023d3c:	4620      	mov	r0, r4
 8023d3e:	f000 fe51 	bl	80249e4 <_Bfree>
 8023d42:	4639      	mov	r1, r7
 8023d44:	4620      	mov	r0, r4
 8023d46:	f000 fe4d 	bl	80249e4 <_Bfree>
 8023d4a:	e695      	b.n	8023a78 <_dtoa_r+0x6a0>
 8023d4c:	2600      	movs	r6, #0
 8023d4e:	4637      	mov	r7, r6
 8023d50:	e7e1      	b.n	8023d16 <_dtoa_r+0x93e>
 8023d52:	9700      	str	r7, [sp, #0]
 8023d54:	4637      	mov	r7, r6
 8023d56:	e599      	b.n	802388c <_dtoa_r+0x4b4>
 8023d58:	40240000 	.word	0x40240000
 8023d5c:	9b08      	ldr	r3, [sp, #32]
 8023d5e:	2b00      	cmp	r3, #0
 8023d60:	f000 80ca 	beq.w	8023ef8 <_dtoa_r+0xb20>
 8023d64:	9b03      	ldr	r3, [sp, #12]
 8023d66:	9302      	str	r3, [sp, #8]
 8023d68:	2d00      	cmp	r5, #0
 8023d6a:	dd05      	ble.n	8023d78 <_dtoa_r+0x9a0>
 8023d6c:	4639      	mov	r1, r7
 8023d6e:	462a      	mov	r2, r5
 8023d70:	4620      	mov	r0, r4
 8023d72:	f001 f853 	bl	8024e1c <__lshift>
 8023d76:	4607      	mov	r7, r0
 8023d78:	f1b8 0f00 	cmp.w	r8, #0
 8023d7c:	d05b      	beq.n	8023e36 <_dtoa_r+0xa5e>
 8023d7e:	6879      	ldr	r1, [r7, #4]
 8023d80:	4620      	mov	r0, r4
 8023d82:	f000 fdef 	bl	8024964 <_Balloc>
 8023d86:	4605      	mov	r5, r0
 8023d88:	b928      	cbnz	r0, 8023d96 <_dtoa_r+0x9be>
 8023d8a:	4b87      	ldr	r3, [pc, #540]	; (8023fa8 <_dtoa_r+0xbd0>)
 8023d8c:	4602      	mov	r2, r0
 8023d8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8023d92:	f7ff bb3b 	b.w	802340c <_dtoa_r+0x34>
 8023d96:	693a      	ldr	r2, [r7, #16]
 8023d98:	3202      	adds	r2, #2
 8023d9a:	0092      	lsls	r2, r2, #2
 8023d9c:	f107 010c 	add.w	r1, r7, #12
 8023da0:	300c      	adds	r0, #12
 8023da2:	f7fc ff8d 	bl	8020cc0 <memcpy>
 8023da6:	2201      	movs	r2, #1
 8023da8:	4629      	mov	r1, r5
 8023daa:	4620      	mov	r0, r4
 8023dac:	f001 f836 	bl	8024e1c <__lshift>
 8023db0:	9b01      	ldr	r3, [sp, #4]
 8023db2:	f103 0901 	add.w	r9, r3, #1
 8023db6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8023dba:	4413      	add	r3, r2
 8023dbc:	9305      	str	r3, [sp, #20]
 8023dbe:	f00a 0301 	and.w	r3, sl, #1
 8023dc2:	46b8      	mov	r8, r7
 8023dc4:	9304      	str	r3, [sp, #16]
 8023dc6:	4607      	mov	r7, r0
 8023dc8:	4631      	mov	r1, r6
 8023dca:	ee18 0a10 	vmov	r0, s16
 8023dce:	f7ff fa77 	bl	80232c0 <quorem>
 8023dd2:	4641      	mov	r1, r8
 8023dd4:	9002      	str	r0, [sp, #8]
 8023dd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8023dda:	ee18 0a10 	vmov	r0, s16
 8023dde:	f001 f88d 	bl	8024efc <__mcmp>
 8023de2:	463a      	mov	r2, r7
 8023de4:	9003      	str	r0, [sp, #12]
 8023de6:	4631      	mov	r1, r6
 8023de8:	4620      	mov	r0, r4
 8023dea:	f001 f8a3 	bl	8024f34 <__mdiff>
 8023dee:	68c2      	ldr	r2, [r0, #12]
 8023df0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8023df4:	4605      	mov	r5, r0
 8023df6:	bb02      	cbnz	r2, 8023e3a <_dtoa_r+0xa62>
 8023df8:	4601      	mov	r1, r0
 8023dfa:	ee18 0a10 	vmov	r0, s16
 8023dfe:	f001 f87d 	bl	8024efc <__mcmp>
 8023e02:	4602      	mov	r2, r0
 8023e04:	4629      	mov	r1, r5
 8023e06:	4620      	mov	r0, r4
 8023e08:	9207      	str	r2, [sp, #28]
 8023e0a:	f000 fdeb 	bl	80249e4 <_Bfree>
 8023e0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8023e12:	ea43 0102 	orr.w	r1, r3, r2
 8023e16:	9b04      	ldr	r3, [sp, #16]
 8023e18:	430b      	orrs	r3, r1
 8023e1a:	464d      	mov	r5, r9
 8023e1c:	d10f      	bne.n	8023e3e <_dtoa_r+0xa66>
 8023e1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8023e22:	d02a      	beq.n	8023e7a <_dtoa_r+0xaa2>
 8023e24:	9b03      	ldr	r3, [sp, #12]
 8023e26:	2b00      	cmp	r3, #0
 8023e28:	dd02      	ble.n	8023e30 <_dtoa_r+0xa58>
 8023e2a:	9b02      	ldr	r3, [sp, #8]
 8023e2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8023e30:	f88b a000 	strb.w	sl, [fp]
 8023e34:	e775      	b.n	8023d22 <_dtoa_r+0x94a>
 8023e36:	4638      	mov	r0, r7
 8023e38:	e7ba      	b.n	8023db0 <_dtoa_r+0x9d8>
 8023e3a:	2201      	movs	r2, #1
 8023e3c:	e7e2      	b.n	8023e04 <_dtoa_r+0xa2c>
 8023e3e:	9b03      	ldr	r3, [sp, #12]
 8023e40:	2b00      	cmp	r3, #0
 8023e42:	db04      	blt.n	8023e4e <_dtoa_r+0xa76>
 8023e44:	9906      	ldr	r1, [sp, #24]
 8023e46:	430b      	orrs	r3, r1
 8023e48:	9904      	ldr	r1, [sp, #16]
 8023e4a:	430b      	orrs	r3, r1
 8023e4c:	d122      	bne.n	8023e94 <_dtoa_r+0xabc>
 8023e4e:	2a00      	cmp	r2, #0
 8023e50:	ddee      	ble.n	8023e30 <_dtoa_r+0xa58>
 8023e52:	ee18 1a10 	vmov	r1, s16
 8023e56:	2201      	movs	r2, #1
 8023e58:	4620      	mov	r0, r4
 8023e5a:	f000 ffdf 	bl	8024e1c <__lshift>
 8023e5e:	4631      	mov	r1, r6
 8023e60:	ee08 0a10 	vmov	s16, r0
 8023e64:	f001 f84a 	bl	8024efc <__mcmp>
 8023e68:	2800      	cmp	r0, #0
 8023e6a:	dc03      	bgt.n	8023e74 <_dtoa_r+0xa9c>
 8023e6c:	d1e0      	bne.n	8023e30 <_dtoa_r+0xa58>
 8023e6e:	f01a 0f01 	tst.w	sl, #1
 8023e72:	d0dd      	beq.n	8023e30 <_dtoa_r+0xa58>
 8023e74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8023e78:	d1d7      	bne.n	8023e2a <_dtoa_r+0xa52>
 8023e7a:	2339      	movs	r3, #57	; 0x39
 8023e7c:	f88b 3000 	strb.w	r3, [fp]
 8023e80:	462b      	mov	r3, r5
 8023e82:	461d      	mov	r5, r3
 8023e84:	3b01      	subs	r3, #1
 8023e86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8023e8a:	2a39      	cmp	r2, #57	; 0x39
 8023e8c:	d071      	beq.n	8023f72 <_dtoa_r+0xb9a>
 8023e8e:	3201      	adds	r2, #1
 8023e90:	701a      	strb	r2, [r3, #0]
 8023e92:	e746      	b.n	8023d22 <_dtoa_r+0x94a>
 8023e94:	2a00      	cmp	r2, #0
 8023e96:	dd07      	ble.n	8023ea8 <_dtoa_r+0xad0>
 8023e98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8023e9c:	d0ed      	beq.n	8023e7a <_dtoa_r+0xaa2>
 8023e9e:	f10a 0301 	add.w	r3, sl, #1
 8023ea2:	f88b 3000 	strb.w	r3, [fp]
 8023ea6:	e73c      	b.n	8023d22 <_dtoa_r+0x94a>
 8023ea8:	9b05      	ldr	r3, [sp, #20]
 8023eaa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8023eae:	4599      	cmp	r9, r3
 8023eb0:	d047      	beq.n	8023f42 <_dtoa_r+0xb6a>
 8023eb2:	ee18 1a10 	vmov	r1, s16
 8023eb6:	2300      	movs	r3, #0
 8023eb8:	220a      	movs	r2, #10
 8023eba:	4620      	mov	r0, r4
 8023ebc:	f000 fdb4 	bl	8024a28 <__multadd>
 8023ec0:	45b8      	cmp	r8, r7
 8023ec2:	ee08 0a10 	vmov	s16, r0
 8023ec6:	f04f 0300 	mov.w	r3, #0
 8023eca:	f04f 020a 	mov.w	r2, #10
 8023ece:	4641      	mov	r1, r8
 8023ed0:	4620      	mov	r0, r4
 8023ed2:	d106      	bne.n	8023ee2 <_dtoa_r+0xb0a>
 8023ed4:	f000 fda8 	bl	8024a28 <__multadd>
 8023ed8:	4680      	mov	r8, r0
 8023eda:	4607      	mov	r7, r0
 8023edc:	f109 0901 	add.w	r9, r9, #1
 8023ee0:	e772      	b.n	8023dc8 <_dtoa_r+0x9f0>
 8023ee2:	f000 fda1 	bl	8024a28 <__multadd>
 8023ee6:	4639      	mov	r1, r7
 8023ee8:	4680      	mov	r8, r0
 8023eea:	2300      	movs	r3, #0
 8023eec:	220a      	movs	r2, #10
 8023eee:	4620      	mov	r0, r4
 8023ef0:	f000 fd9a 	bl	8024a28 <__multadd>
 8023ef4:	4607      	mov	r7, r0
 8023ef6:	e7f1      	b.n	8023edc <_dtoa_r+0xb04>
 8023ef8:	9b03      	ldr	r3, [sp, #12]
 8023efa:	9302      	str	r3, [sp, #8]
 8023efc:	9d01      	ldr	r5, [sp, #4]
 8023efe:	ee18 0a10 	vmov	r0, s16
 8023f02:	4631      	mov	r1, r6
 8023f04:	f7ff f9dc 	bl	80232c0 <quorem>
 8023f08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8023f0c:	9b01      	ldr	r3, [sp, #4]
 8023f0e:	f805 ab01 	strb.w	sl, [r5], #1
 8023f12:	1aea      	subs	r2, r5, r3
 8023f14:	9b02      	ldr	r3, [sp, #8]
 8023f16:	4293      	cmp	r3, r2
 8023f18:	dd09      	ble.n	8023f2e <_dtoa_r+0xb56>
 8023f1a:	ee18 1a10 	vmov	r1, s16
 8023f1e:	2300      	movs	r3, #0
 8023f20:	220a      	movs	r2, #10
 8023f22:	4620      	mov	r0, r4
 8023f24:	f000 fd80 	bl	8024a28 <__multadd>
 8023f28:	ee08 0a10 	vmov	s16, r0
 8023f2c:	e7e7      	b.n	8023efe <_dtoa_r+0xb26>
 8023f2e:	9b02      	ldr	r3, [sp, #8]
 8023f30:	2b00      	cmp	r3, #0
 8023f32:	bfc8      	it	gt
 8023f34:	461d      	movgt	r5, r3
 8023f36:	9b01      	ldr	r3, [sp, #4]
 8023f38:	bfd8      	it	le
 8023f3a:	2501      	movle	r5, #1
 8023f3c:	441d      	add	r5, r3
 8023f3e:	f04f 0800 	mov.w	r8, #0
 8023f42:	ee18 1a10 	vmov	r1, s16
 8023f46:	2201      	movs	r2, #1
 8023f48:	4620      	mov	r0, r4
 8023f4a:	f000 ff67 	bl	8024e1c <__lshift>
 8023f4e:	4631      	mov	r1, r6
 8023f50:	ee08 0a10 	vmov	s16, r0
 8023f54:	f000 ffd2 	bl	8024efc <__mcmp>
 8023f58:	2800      	cmp	r0, #0
 8023f5a:	dc91      	bgt.n	8023e80 <_dtoa_r+0xaa8>
 8023f5c:	d102      	bne.n	8023f64 <_dtoa_r+0xb8c>
 8023f5e:	f01a 0f01 	tst.w	sl, #1
 8023f62:	d18d      	bne.n	8023e80 <_dtoa_r+0xaa8>
 8023f64:	462b      	mov	r3, r5
 8023f66:	461d      	mov	r5, r3
 8023f68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023f6c:	2a30      	cmp	r2, #48	; 0x30
 8023f6e:	d0fa      	beq.n	8023f66 <_dtoa_r+0xb8e>
 8023f70:	e6d7      	b.n	8023d22 <_dtoa_r+0x94a>
 8023f72:	9a01      	ldr	r2, [sp, #4]
 8023f74:	429a      	cmp	r2, r3
 8023f76:	d184      	bne.n	8023e82 <_dtoa_r+0xaaa>
 8023f78:	9b00      	ldr	r3, [sp, #0]
 8023f7a:	3301      	adds	r3, #1
 8023f7c:	9300      	str	r3, [sp, #0]
 8023f7e:	2331      	movs	r3, #49	; 0x31
 8023f80:	7013      	strb	r3, [r2, #0]
 8023f82:	e6ce      	b.n	8023d22 <_dtoa_r+0x94a>
 8023f84:	4b09      	ldr	r3, [pc, #36]	; (8023fac <_dtoa_r+0xbd4>)
 8023f86:	f7ff ba95 	b.w	80234b4 <_dtoa_r+0xdc>
 8023f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023f8c:	2b00      	cmp	r3, #0
 8023f8e:	f47f aa6e 	bne.w	802346e <_dtoa_r+0x96>
 8023f92:	4b07      	ldr	r3, [pc, #28]	; (8023fb0 <_dtoa_r+0xbd8>)
 8023f94:	f7ff ba8e 	b.w	80234b4 <_dtoa_r+0xdc>
 8023f98:	9b02      	ldr	r3, [sp, #8]
 8023f9a:	2b00      	cmp	r3, #0
 8023f9c:	dcae      	bgt.n	8023efc <_dtoa_r+0xb24>
 8023f9e:	9b06      	ldr	r3, [sp, #24]
 8023fa0:	2b02      	cmp	r3, #2
 8023fa2:	f73f aea8 	bgt.w	8023cf6 <_dtoa_r+0x91e>
 8023fa6:	e7a9      	b.n	8023efc <_dtoa_r+0xb24>
 8023fa8:	080278b6 	.word	0x080278b6
 8023fac:	08027761 	.word	0x08027761
 8023fb0:	08027850 	.word	0x08027850

08023fb4 <__env_lock>:
 8023fb4:	4801      	ldr	r0, [pc, #4]	; (8023fbc <__env_lock+0x8>)
 8023fb6:	f7fc be60 	b.w	8020c7a <__retarget_lock_acquire_recursive>
 8023fba:	bf00      	nop
 8023fbc:	20013638 	.word	0x20013638

08023fc0 <__env_unlock>:
 8023fc0:	4801      	ldr	r0, [pc, #4]	; (8023fc8 <__env_unlock+0x8>)
 8023fc2:	f7fc be5b 	b.w	8020c7c <__retarget_lock_release_recursive>
 8023fc6:	bf00      	nop
 8023fc8:	20013638 	.word	0x20013638

08023fcc <__sflush_r>:
 8023fcc:	898a      	ldrh	r2, [r1, #12]
 8023fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023fd2:	4605      	mov	r5, r0
 8023fd4:	0710      	lsls	r0, r2, #28
 8023fd6:	460c      	mov	r4, r1
 8023fd8:	d458      	bmi.n	802408c <__sflush_r+0xc0>
 8023fda:	684b      	ldr	r3, [r1, #4]
 8023fdc:	2b00      	cmp	r3, #0
 8023fde:	dc05      	bgt.n	8023fec <__sflush_r+0x20>
 8023fe0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023fe2:	2b00      	cmp	r3, #0
 8023fe4:	dc02      	bgt.n	8023fec <__sflush_r+0x20>
 8023fe6:	2000      	movs	r0, #0
 8023fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023fec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023fee:	2e00      	cmp	r6, #0
 8023ff0:	d0f9      	beq.n	8023fe6 <__sflush_r+0x1a>
 8023ff2:	2300      	movs	r3, #0
 8023ff4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023ff8:	682f      	ldr	r7, [r5, #0]
 8023ffa:	602b      	str	r3, [r5, #0]
 8023ffc:	d032      	beq.n	8024064 <__sflush_r+0x98>
 8023ffe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024000:	89a3      	ldrh	r3, [r4, #12]
 8024002:	075a      	lsls	r2, r3, #29
 8024004:	d505      	bpl.n	8024012 <__sflush_r+0x46>
 8024006:	6863      	ldr	r3, [r4, #4]
 8024008:	1ac0      	subs	r0, r0, r3
 802400a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802400c:	b10b      	cbz	r3, 8024012 <__sflush_r+0x46>
 802400e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024010:	1ac0      	subs	r0, r0, r3
 8024012:	2300      	movs	r3, #0
 8024014:	4602      	mov	r2, r0
 8024016:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024018:	6a21      	ldr	r1, [r4, #32]
 802401a:	4628      	mov	r0, r5
 802401c:	47b0      	blx	r6
 802401e:	1c43      	adds	r3, r0, #1
 8024020:	89a3      	ldrh	r3, [r4, #12]
 8024022:	d106      	bne.n	8024032 <__sflush_r+0x66>
 8024024:	6829      	ldr	r1, [r5, #0]
 8024026:	291d      	cmp	r1, #29
 8024028:	d82c      	bhi.n	8024084 <__sflush_r+0xb8>
 802402a:	4a2a      	ldr	r2, [pc, #168]	; (80240d4 <__sflush_r+0x108>)
 802402c:	40ca      	lsrs	r2, r1
 802402e:	07d6      	lsls	r6, r2, #31
 8024030:	d528      	bpl.n	8024084 <__sflush_r+0xb8>
 8024032:	2200      	movs	r2, #0
 8024034:	6062      	str	r2, [r4, #4]
 8024036:	04d9      	lsls	r1, r3, #19
 8024038:	6922      	ldr	r2, [r4, #16]
 802403a:	6022      	str	r2, [r4, #0]
 802403c:	d504      	bpl.n	8024048 <__sflush_r+0x7c>
 802403e:	1c42      	adds	r2, r0, #1
 8024040:	d101      	bne.n	8024046 <__sflush_r+0x7a>
 8024042:	682b      	ldr	r3, [r5, #0]
 8024044:	b903      	cbnz	r3, 8024048 <__sflush_r+0x7c>
 8024046:	6560      	str	r0, [r4, #84]	; 0x54
 8024048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802404a:	602f      	str	r7, [r5, #0]
 802404c:	2900      	cmp	r1, #0
 802404e:	d0ca      	beq.n	8023fe6 <__sflush_r+0x1a>
 8024050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024054:	4299      	cmp	r1, r3
 8024056:	d002      	beq.n	802405e <__sflush_r+0x92>
 8024058:	4628      	mov	r0, r5
 802405a:	f7fc fe71 	bl	8020d40 <_free_r>
 802405e:	2000      	movs	r0, #0
 8024060:	6360      	str	r0, [r4, #52]	; 0x34
 8024062:	e7c1      	b.n	8023fe8 <__sflush_r+0x1c>
 8024064:	6a21      	ldr	r1, [r4, #32]
 8024066:	2301      	movs	r3, #1
 8024068:	4628      	mov	r0, r5
 802406a:	47b0      	blx	r6
 802406c:	1c41      	adds	r1, r0, #1
 802406e:	d1c7      	bne.n	8024000 <__sflush_r+0x34>
 8024070:	682b      	ldr	r3, [r5, #0]
 8024072:	2b00      	cmp	r3, #0
 8024074:	d0c4      	beq.n	8024000 <__sflush_r+0x34>
 8024076:	2b1d      	cmp	r3, #29
 8024078:	d001      	beq.n	802407e <__sflush_r+0xb2>
 802407a:	2b16      	cmp	r3, #22
 802407c:	d101      	bne.n	8024082 <__sflush_r+0xb6>
 802407e:	602f      	str	r7, [r5, #0]
 8024080:	e7b1      	b.n	8023fe6 <__sflush_r+0x1a>
 8024082:	89a3      	ldrh	r3, [r4, #12]
 8024084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024088:	81a3      	strh	r3, [r4, #12]
 802408a:	e7ad      	b.n	8023fe8 <__sflush_r+0x1c>
 802408c:	690f      	ldr	r7, [r1, #16]
 802408e:	2f00      	cmp	r7, #0
 8024090:	d0a9      	beq.n	8023fe6 <__sflush_r+0x1a>
 8024092:	0793      	lsls	r3, r2, #30
 8024094:	680e      	ldr	r6, [r1, #0]
 8024096:	bf08      	it	eq
 8024098:	694b      	ldreq	r3, [r1, #20]
 802409a:	600f      	str	r7, [r1, #0]
 802409c:	bf18      	it	ne
 802409e:	2300      	movne	r3, #0
 80240a0:	eba6 0807 	sub.w	r8, r6, r7
 80240a4:	608b      	str	r3, [r1, #8]
 80240a6:	f1b8 0f00 	cmp.w	r8, #0
 80240aa:	dd9c      	ble.n	8023fe6 <__sflush_r+0x1a>
 80240ac:	6a21      	ldr	r1, [r4, #32]
 80240ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80240b0:	4643      	mov	r3, r8
 80240b2:	463a      	mov	r2, r7
 80240b4:	4628      	mov	r0, r5
 80240b6:	47b0      	blx	r6
 80240b8:	2800      	cmp	r0, #0
 80240ba:	dc06      	bgt.n	80240ca <__sflush_r+0xfe>
 80240bc:	89a3      	ldrh	r3, [r4, #12]
 80240be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80240c2:	81a3      	strh	r3, [r4, #12]
 80240c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80240c8:	e78e      	b.n	8023fe8 <__sflush_r+0x1c>
 80240ca:	4407      	add	r7, r0
 80240cc:	eba8 0800 	sub.w	r8, r8, r0
 80240d0:	e7e9      	b.n	80240a6 <__sflush_r+0xda>
 80240d2:	bf00      	nop
 80240d4:	20400001 	.word	0x20400001

080240d8 <_fflush_r>:
 80240d8:	b538      	push	{r3, r4, r5, lr}
 80240da:	690b      	ldr	r3, [r1, #16]
 80240dc:	4605      	mov	r5, r0
 80240de:	460c      	mov	r4, r1
 80240e0:	b913      	cbnz	r3, 80240e8 <_fflush_r+0x10>
 80240e2:	2500      	movs	r5, #0
 80240e4:	4628      	mov	r0, r5
 80240e6:	bd38      	pop	{r3, r4, r5, pc}
 80240e8:	b118      	cbz	r0, 80240f2 <_fflush_r+0x1a>
 80240ea:	6983      	ldr	r3, [r0, #24]
 80240ec:	b90b      	cbnz	r3, 80240f2 <_fflush_r+0x1a>
 80240ee:	f7fc fca7 	bl	8020a40 <__sinit>
 80240f2:	4b14      	ldr	r3, [pc, #80]	; (8024144 <_fflush_r+0x6c>)
 80240f4:	429c      	cmp	r4, r3
 80240f6:	d11b      	bne.n	8024130 <_fflush_r+0x58>
 80240f8:	686c      	ldr	r4, [r5, #4]
 80240fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80240fe:	2b00      	cmp	r3, #0
 8024100:	d0ef      	beq.n	80240e2 <_fflush_r+0xa>
 8024102:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024104:	07d0      	lsls	r0, r2, #31
 8024106:	d404      	bmi.n	8024112 <_fflush_r+0x3a>
 8024108:	0599      	lsls	r1, r3, #22
 802410a:	d402      	bmi.n	8024112 <_fflush_r+0x3a>
 802410c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802410e:	f7fc fdb4 	bl	8020c7a <__retarget_lock_acquire_recursive>
 8024112:	4628      	mov	r0, r5
 8024114:	4621      	mov	r1, r4
 8024116:	f7ff ff59 	bl	8023fcc <__sflush_r>
 802411a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802411c:	07da      	lsls	r2, r3, #31
 802411e:	4605      	mov	r5, r0
 8024120:	d4e0      	bmi.n	80240e4 <_fflush_r+0xc>
 8024122:	89a3      	ldrh	r3, [r4, #12]
 8024124:	059b      	lsls	r3, r3, #22
 8024126:	d4dd      	bmi.n	80240e4 <_fflush_r+0xc>
 8024128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802412a:	f7fc fda7 	bl	8020c7c <__retarget_lock_release_recursive>
 802412e:	e7d9      	b.n	80240e4 <_fflush_r+0xc>
 8024130:	4b05      	ldr	r3, [pc, #20]	; (8024148 <_fflush_r+0x70>)
 8024132:	429c      	cmp	r4, r3
 8024134:	d101      	bne.n	802413a <_fflush_r+0x62>
 8024136:	68ac      	ldr	r4, [r5, #8]
 8024138:	e7df      	b.n	80240fa <_fflush_r+0x22>
 802413a:	4b04      	ldr	r3, [pc, #16]	; (802414c <_fflush_r+0x74>)
 802413c:	429c      	cmp	r4, r3
 802413e:	bf08      	it	eq
 8024140:	68ec      	ldreq	r4, [r5, #12]
 8024142:	e7da      	b.n	80240fa <_fflush_r+0x22>
 8024144:	080276fc 	.word	0x080276fc
 8024148:	0802771c 	.word	0x0802771c
 802414c:	080276dc 	.word	0x080276dc

08024150 <rshift>:
 8024150:	6903      	ldr	r3, [r0, #16]
 8024152:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8024156:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802415a:	ea4f 1261 	mov.w	r2, r1, asr #5
 802415e:	f100 0414 	add.w	r4, r0, #20
 8024162:	dd45      	ble.n	80241f0 <rshift+0xa0>
 8024164:	f011 011f 	ands.w	r1, r1, #31
 8024168:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802416c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8024170:	d10c      	bne.n	802418c <rshift+0x3c>
 8024172:	f100 0710 	add.w	r7, r0, #16
 8024176:	4629      	mov	r1, r5
 8024178:	42b1      	cmp	r1, r6
 802417a:	d334      	bcc.n	80241e6 <rshift+0x96>
 802417c:	1a9b      	subs	r3, r3, r2
 802417e:	009b      	lsls	r3, r3, #2
 8024180:	1eea      	subs	r2, r5, #3
 8024182:	4296      	cmp	r6, r2
 8024184:	bf38      	it	cc
 8024186:	2300      	movcc	r3, #0
 8024188:	4423      	add	r3, r4
 802418a:	e015      	b.n	80241b8 <rshift+0x68>
 802418c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8024190:	f1c1 0820 	rsb	r8, r1, #32
 8024194:	40cf      	lsrs	r7, r1
 8024196:	f105 0e04 	add.w	lr, r5, #4
 802419a:	46a1      	mov	r9, r4
 802419c:	4576      	cmp	r6, lr
 802419e:	46f4      	mov	ip, lr
 80241a0:	d815      	bhi.n	80241ce <rshift+0x7e>
 80241a2:	1a9a      	subs	r2, r3, r2
 80241a4:	0092      	lsls	r2, r2, #2
 80241a6:	3a04      	subs	r2, #4
 80241a8:	3501      	adds	r5, #1
 80241aa:	42ae      	cmp	r6, r5
 80241ac:	bf38      	it	cc
 80241ae:	2200      	movcc	r2, #0
 80241b0:	18a3      	adds	r3, r4, r2
 80241b2:	50a7      	str	r7, [r4, r2]
 80241b4:	b107      	cbz	r7, 80241b8 <rshift+0x68>
 80241b6:	3304      	adds	r3, #4
 80241b8:	1b1a      	subs	r2, r3, r4
 80241ba:	42a3      	cmp	r3, r4
 80241bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80241c0:	bf08      	it	eq
 80241c2:	2300      	moveq	r3, #0
 80241c4:	6102      	str	r2, [r0, #16]
 80241c6:	bf08      	it	eq
 80241c8:	6143      	streq	r3, [r0, #20]
 80241ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80241ce:	f8dc c000 	ldr.w	ip, [ip]
 80241d2:	fa0c fc08 	lsl.w	ip, ip, r8
 80241d6:	ea4c 0707 	orr.w	r7, ip, r7
 80241da:	f849 7b04 	str.w	r7, [r9], #4
 80241de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80241e2:	40cf      	lsrs	r7, r1
 80241e4:	e7da      	b.n	802419c <rshift+0x4c>
 80241e6:	f851 cb04 	ldr.w	ip, [r1], #4
 80241ea:	f847 cf04 	str.w	ip, [r7, #4]!
 80241ee:	e7c3      	b.n	8024178 <rshift+0x28>
 80241f0:	4623      	mov	r3, r4
 80241f2:	e7e1      	b.n	80241b8 <rshift+0x68>

080241f4 <__hexdig_fun>:
 80241f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80241f8:	2b09      	cmp	r3, #9
 80241fa:	d802      	bhi.n	8024202 <__hexdig_fun+0xe>
 80241fc:	3820      	subs	r0, #32
 80241fe:	b2c0      	uxtb	r0, r0
 8024200:	4770      	bx	lr
 8024202:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8024206:	2b05      	cmp	r3, #5
 8024208:	d801      	bhi.n	802420e <__hexdig_fun+0x1a>
 802420a:	3847      	subs	r0, #71	; 0x47
 802420c:	e7f7      	b.n	80241fe <__hexdig_fun+0xa>
 802420e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8024212:	2b05      	cmp	r3, #5
 8024214:	d801      	bhi.n	802421a <__hexdig_fun+0x26>
 8024216:	3827      	subs	r0, #39	; 0x27
 8024218:	e7f1      	b.n	80241fe <__hexdig_fun+0xa>
 802421a:	2000      	movs	r0, #0
 802421c:	4770      	bx	lr
	...

08024220 <__gethex>:
 8024220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024224:	ed2d 8b02 	vpush	{d8}
 8024228:	b089      	sub	sp, #36	; 0x24
 802422a:	ee08 0a10 	vmov	s16, r0
 802422e:	9304      	str	r3, [sp, #16]
 8024230:	4bb4      	ldr	r3, [pc, #720]	; (8024504 <__gethex+0x2e4>)
 8024232:	681b      	ldr	r3, [r3, #0]
 8024234:	9301      	str	r3, [sp, #4]
 8024236:	4618      	mov	r0, r3
 8024238:	468b      	mov	fp, r1
 802423a:	4690      	mov	r8, r2
 802423c:	f7db fff2 	bl	8000224 <strlen>
 8024240:	9b01      	ldr	r3, [sp, #4]
 8024242:	f8db 2000 	ldr.w	r2, [fp]
 8024246:	4403      	add	r3, r0
 8024248:	4682      	mov	sl, r0
 802424a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802424e:	9305      	str	r3, [sp, #20]
 8024250:	1c93      	adds	r3, r2, #2
 8024252:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8024256:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802425a:	32fe      	adds	r2, #254	; 0xfe
 802425c:	18d1      	adds	r1, r2, r3
 802425e:	461f      	mov	r7, r3
 8024260:	f813 0b01 	ldrb.w	r0, [r3], #1
 8024264:	9100      	str	r1, [sp, #0]
 8024266:	2830      	cmp	r0, #48	; 0x30
 8024268:	d0f8      	beq.n	802425c <__gethex+0x3c>
 802426a:	f7ff ffc3 	bl	80241f4 <__hexdig_fun>
 802426e:	4604      	mov	r4, r0
 8024270:	2800      	cmp	r0, #0
 8024272:	d13a      	bne.n	80242ea <__gethex+0xca>
 8024274:	9901      	ldr	r1, [sp, #4]
 8024276:	4652      	mov	r2, sl
 8024278:	4638      	mov	r0, r7
 802427a:	f7fd ff9f 	bl	80221bc <strncmp>
 802427e:	4605      	mov	r5, r0
 8024280:	2800      	cmp	r0, #0
 8024282:	d168      	bne.n	8024356 <__gethex+0x136>
 8024284:	f817 000a 	ldrb.w	r0, [r7, sl]
 8024288:	eb07 060a 	add.w	r6, r7, sl
 802428c:	f7ff ffb2 	bl	80241f4 <__hexdig_fun>
 8024290:	2800      	cmp	r0, #0
 8024292:	d062      	beq.n	802435a <__gethex+0x13a>
 8024294:	4633      	mov	r3, r6
 8024296:	7818      	ldrb	r0, [r3, #0]
 8024298:	2830      	cmp	r0, #48	; 0x30
 802429a:	461f      	mov	r7, r3
 802429c:	f103 0301 	add.w	r3, r3, #1
 80242a0:	d0f9      	beq.n	8024296 <__gethex+0x76>
 80242a2:	f7ff ffa7 	bl	80241f4 <__hexdig_fun>
 80242a6:	2301      	movs	r3, #1
 80242a8:	fab0 f480 	clz	r4, r0
 80242ac:	0964      	lsrs	r4, r4, #5
 80242ae:	4635      	mov	r5, r6
 80242b0:	9300      	str	r3, [sp, #0]
 80242b2:	463a      	mov	r2, r7
 80242b4:	4616      	mov	r6, r2
 80242b6:	3201      	adds	r2, #1
 80242b8:	7830      	ldrb	r0, [r6, #0]
 80242ba:	f7ff ff9b 	bl	80241f4 <__hexdig_fun>
 80242be:	2800      	cmp	r0, #0
 80242c0:	d1f8      	bne.n	80242b4 <__gethex+0x94>
 80242c2:	9901      	ldr	r1, [sp, #4]
 80242c4:	4652      	mov	r2, sl
 80242c6:	4630      	mov	r0, r6
 80242c8:	f7fd ff78 	bl	80221bc <strncmp>
 80242cc:	b980      	cbnz	r0, 80242f0 <__gethex+0xd0>
 80242ce:	b94d      	cbnz	r5, 80242e4 <__gethex+0xc4>
 80242d0:	eb06 050a 	add.w	r5, r6, sl
 80242d4:	462a      	mov	r2, r5
 80242d6:	4616      	mov	r6, r2
 80242d8:	3201      	adds	r2, #1
 80242da:	7830      	ldrb	r0, [r6, #0]
 80242dc:	f7ff ff8a 	bl	80241f4 <__hexdig_fun>
 80242e0:	2800      	cmp	r0, #0
 80242e2:	d1f8      	bne.n	80242d6 <__gethex+0xb6>
 80242e4:	1bad      	subs	r5, r5, r6
 80242e6:	00ad      	lsls	r5, r5, #2
 80242e8:	e004      	b.n	80242f4 <__gethex+0xd4>
 80242ea:	2400      	movs	r4, #0
 80242ec:	4625      	mov	r5, r4
 80242ee:	e7e0      	b.n	80242b2 <__gethex+0x92>
 80242f0:	2d00      	cmp	r5, #0
 80242f2:	d1f7      	bne.n	80242e4 <__gethex+0xc4>
 80242f4:	7833      	ldrb	r3, [r6, #0]
 80242f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80242fa:	2b50      	cmp	r3, #80	; 0x50
 80242fc:	d13b      	bne.n	8024376 <__gethex+0x156>
 80242fe:	7873      	ldrb	r3, [r6, #1]
 8024300:	2b2b      	cmp	r3, #43	; 0x2b
 8024302:	d02c      	beq.n	802435e <__gethex+0x13e>
 8024304:	2b2d      	cmp	r3, #45	; 0x2d
 8024306:	d02e      	beq.n	8024366 <__gethex+0x146>
 8024308:	1c71      	adds	r1, r6, #1
 802430a:	f04f 0900 	mov.w	r9, #0
 802430e:	7808      	ldrb	r0, [r1, #0]
 8024310:	f7ff ff70 	bl	80241f4 <__hexdig_fun>
 8024314:	1e43      	subs	r3, r0, #1
 8024316:	b2db      	uxtb	r3, r3
 8024318:	2b18      	cmp	r3, #24
 802431a:	d82c      	bhi.n	8024376 <__gethex+0x156>
 802431c:	f1a0 0210 	sub.w	r2, r0, #16
 8024320:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8024324:	f7ff ff66 	bl	80241f4 <__hexdig_fun>
 8024328:	1e43      	subs	r3, r0, #1
 802432a:	b2db      	uxtb	r3, r3
 802432c:	2b18      	cmp	r3, #24
 802432e:	d91d      	bls.n	802436c <__gethex+0x14c>
 8024330:	f1b9 0f00 	cmp.w	r9, #0
 8024334:	d000      	beq.n	8024338 <__gethex+0x118>
 8024336:	4252      	negs	r2, r2
 8024338:	4415      	add	r5, r2
 802433a:	f8cb 1000 	str.w	r1, [fp]
 802433e:	b1e4      	cbz	r4, 802437a <__gethex+0x15a>
 8024340:	9b00      	ldr	r3, [sp, #0]
 8024342:	2b00      	cmp	r3, #0
 8024344:	bf14      	ite	ne
 8024346:	2700      	movne	r7, #0
 8024348:	2706      	moveq	r7, #6
 802434a:	4638      	mov	r0, r7
 802434c:	b009      	add	sp, #36	; 0x24
 802434e:	ecbd 8b02 	vpop	{d8}
 8024352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024356:	463e      	mov	r6, r7
 8024358:	4625      	mov	r5, r4
 802435a:	2401      	movs	r4, #1
 802435c:	e7ca      	b.n	80242f4 <__gethex+0xd4>
 802435e:	f04f 0900 	mov.w	r9, #0
 8024362:	1cb1      	adds	r1, r6, #2
 8024364:	e7d3      	b.n	802430e <__gethex+0xee>
 8024366:	f04f 0901 	mov.w	r9, #1
 802436a:	e7fa      	b.n	8024362 <__gethex+0x142>
 802436c:	230a      	movs	r3, #10
 802436e:	fb03 0202 	mla	r2, r3, r2, r0
 8024372:	3a10      	subs	r2, #16
 8024374:	e7d4      	b.n	8024320 <__gethex+0x100>
 8024376:	4631      	mov	r1, r6
 8024378:	e7df      	b.n	802433a <__gethex+0x11a>
 802437a:	1bf3      	subs	r3, r6, r7
 802437c:	3b01      	subs	r3, #1
 802437e:	4621      	mov	r1, r4
 8024380:	2b07      	cmp	r3, #7
 8024382:	dc0b      	bgt.n	802439c <__gethex+0x17c>
 8024384:	ee18 0a10 	vmov	r0, s16
 8024388:	f000 faec 	bl	8024964 <_Balloc>
 802438c:	4604      	mov	r4, r0
 802438e:	b940      	cbnz	r0, 80243a2 <__gethex+0x182>
 8024390:	4b5d      	ldr	r3, [pc, #372]	; (8024508 <__gethex+0x2e8>)
 8024392:	4602      	mov	r2, r0
 8024394:	21de      	movs	r1, #222	; 0xde
 8024396:	485d      	ldr	r0, [pc, #372]	; (802450c <__gethex+0x2ec>)
 8024398:	f7fc faba 	bl	8020910 <__assert_func>
 802439c:	3101      	adds	r1, #1
 802439e:	105b      	asrs	r3, r3, #1
 80243a0:	e7ee      	b.n	8024380 <__gethex+0x160>
 80243a2:	f100 0914 	add.w	r9, r0, #20
 80243a6:	f04f 0b00 	mov.w	fp, #0
 80243aa:	f1ca 0301 	rsb	r3, sl, #1
 80243ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80243b2:	f8cd b000 	str.w	fp, [sp]
 80243b6:	9306      	str	r3, [sp, #24]
 80243b8:	42b7      	cmp	r7, r6
 80243ba:	d340      	bcc.n	802443e <__gethex+0x21e>
 80243bc:	9802      	ldr	r0, [sp, #8]
 80243be:	9b00      	ldr	r3, [sp, #0]
 80243c0:	f840 3b04 	str.w	r3, [r0], #4
 80243c4:	eba0 0009 	sub.w	r0, r0, r9
 80243c8:	1080      	asrs	r0, r0, #2
 80243ca:	0146      	lsls	r6, r0, #5
 80243cc:	6120      	str	r0, [r4, #16]
 80243ce:	4618      	mov	r0, r3
 80243d0:	f000 fbba 	bl	8024b48 <__hi0bits>
 80243d4:	1a30      	subs	r0, r6, r0
 80243d6:	f8d8 6000 	ldr.w	r6, [r8]
 80243da:	42b0      	cmp	r0, r6
 80243dc:	dd63      	ble.n	80244a6 <__gethex+0x286>
 80243de:	1b87      	subs	r7, r0, r6
 80243e0:	4639      	mov	r1, r7
 80243e2:	4620      	mov	r0, r4
 80243e4:	f000 ff5e 	bl	80252a4 <__any_on>
 80243e8:	4682      	mov	sl, r0
 80243ea:	b1a8      	cbz	r0, 8024418 <__gethex+0x1f8>
 80243ec:	1e7b      	subs	r3, r7, #1
 80243ee:	1159      	asrs	r1, r3, #5
 80243f0:	f003 021f 	and.w	r2, r3, #31
 80243f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80243f8:	f04f 0a01 	mov.w	sl, #1
 80243fc:	fa0a f202 	lsl.w	r2, sl, r2
 8024400:	420a      	tst	r2, r1
 8024402:	d009      	beq.n	8024418 <__gethex+0x1f8>
 8024404:	4553      	cmp	r3, sl
 8024406:	dd05      	ble.n	8024414 <__gethex+0x1f4>
 8024408:	1eb9      	subs	r1, r7, #2
 802440a:	4620      	mov	r0, r4
 802440c:	f000 ff4a 	bl	80252a4 <__any_on>
 8024410:	2800      	cmp	r0, #0
 8024412:	d145      	bne.n	80244a0 <__gethex+0x280>
 8024414:	f04f 0a02 	mov.w	sl, #2
 8024418:	4639      	mov	r1, r7
 802441a:	4620      	mov	r0, r4
 802441c:	f7ff fe98 	bl	8024150 <rshift>
 8024420:	443d      	add	r5, r7
 8024422:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8024426:	42ab      	cmp	r3, r5
 8024428:	da4c      	bge.n	80244c4 <__gethex+0x2a4>
 802442a:	ee18 0a10 	vmov	r0, s16
 802442e:	4621      	mov	r1, r4
 8024430:	f000 fad8 	bl	80249e4 <_Bfree>
 8024434:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024436:	2300      	movs	r3, #0
 8024438:	6013      	str	r3, [r2, #0]
 802443a:	27a3      	movs	r7, #163	; 0xa3
 802443c:	e785      	b.n	802434a <__gethex+0x12a>
 802443e:	1e73      	subs	r3, r6, #1
 8024440:	9a05      	ldr	r2, [sp, #20]
 8024442:	9303      	str	r3, [sp, #12]
 8024444:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8024448:	4293      	cmp	r3, r2
 802444a:	d019      	beq.n	8024480 <__gethex+0x260>
 802444c:	f1bb 0f20 	cmp.w	fp, #32
 8024450:	d107      	bne.n	8024462 <__gethex+0x242>
 8024452:	9b02      	ldr	r3, [sp, #8]
 8024454:	9a00      	ldr	r2, [sp, #0]
 8024456:	f843 2b04 	str.w	r2, [r3], #4
 802445a:	9302      	str	r3, [sp, #8]
 802445c:	2300      	movs	r3, #0
 802445e:	9300      	str	r3, [sp, #0]
 8024460:	469b      	mov	fp, r3
 8024462:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8024466:	f7ff fec5 	bl	80241f4 <__hexdig_fun>
 802446a:	9b00      	ldr	r3, [sp, #0]
 802446c:	f000 000f 	and.w	r0, r0, #15
 8024470:	fa00 f00b 	lsl.w	r0, r0, fp
 8024474:	4303      	orrs	r3, r0
 8024476:	9300      	str	r3, [sp, #0]
 8024478:	f10b 0b04 	add.w	fp, fp, #4
 802447c:	9b03      	ldr	r3, [sp, #12]
 802447e:	e00d      	b.n	802449c <__gethex+0x27c>
 8024480:	9b03      	ldr	r3, [sp, #12]
 8024482:	9a06      	ldr	r2, [sp, #24]
 8024484:	4413      	add	r3, r2
 8024486:	42bb      	cmp	r3, r7
 8024488:	d3e0      	bcc.n	802444c <__gethex+0x22c>
 802448a:	4618      	mov	r0, r3
 802448c:	9901      	ldr	r1, [sp, #4]
 802448e:	9307      	str	r3, [sp, #28]
 8024490:	4652      	mov	r2, sl
 8024492:	f7fd fe93 	bl	80221bc <strncmp>
 8024496:	9b07      	ldr	r3, [sp, #28]
 8024498:	2800      	cmp	r0, #0
 802449a:	d1d7      	bne.n	802444c <__gethex+0x22c>
 802449c:	461e      	mov	r6, r3
 802449e:	e78b      	b.n	80243b8 <__gethex+0x198>
 80244a0:	f04f 0a03 	mov.w	sl, #3
 80244a4:	e7b8      	b.n	8024418 <__gethex+0x1f8>
 80244a6:	da0a      	bge.n	80244be <__gethex+0x29e>
 80244a8:	1a37      	subs	r7, r6, r0
 80244aa:	4621      	mov	r1, r4
 80244ac:	ee18 0a10 	vmov	r0, s16
 80244b0:	463a      	mov	r2, r7
 80244b2:	f000 fcb3 	bl	8024e1c <__lshift>
 80244b6:	1bed      	subs	r5, r5, r7
 80244b8:	4604      	mov	r4, r0
 80244ba:	f100 0914 	add.w	r9, r0, #20
 80244be:	f04f 0a00 	mov.w	sl, #0
 80244c2:	e7ae      	b.n	8024422 <__gethex+0x202>
 80244c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80244c8:	42a8      	cmp	r0, r5
 80244ca:	dd72      	ble.n	80245b2 <__gethex+0x392>
 80244cc:	1b45      	subs	r5, r0, r5
 80244ce:	42ae      	cmp	r6, r5
 80244d0:	dc36      	bgt.n	8024540 <__gethex+0x320>
 80244d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80244d6:	2b02      	cmp	r3, #2
 80244d8:	d02a      	beq.n	8024530 <__gethex+0x310>
 80244da:	2b03      	cmp	r3, #3
 80244dc:	d02c      	beq.n	8024538 <__gethex+0x318>
 80244de:	2b01      	cmp	r3, #1
 80244e0:	d11c      	bne.n	802451c <__gethex+0x2fc>
 80244e2:	42ae      	cmp	r6, r5
 80244e4:	d11a      	bne.n	802451c <__gethex+0x2fc>
 80244e6:	2e01      	cmp	r6, #1
 80244e8:	d112      	bne.n	8024510 <__gethex+0x2f0>
 80244ea:	9a04      	ldr	r2, [sp, #16]
 80244ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80244f0:	6013      	str	r3, [r2, #0]
 80244f2:	2301      	movs	r3, #1
 80244f4:	6123      	str	r3, [r4, #16]
 80244f6:	f8c9 3000 	str.w	r3, [r9]
 80244fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80244fc:	2762      	movs	r7, #98	; 0x62
 80244fe:	601c      	str	r4, [r3, #0]
 8024500:	e723      	b.n	802434a <__gethex+0x12a>
 8024502:	bf00      	nop
 8024504:	0802792c 	.word	0x0802792c
 8024508:	080278b6 	.word	0x080278b6
 802450c:	080278c7 	.word	0x080278c7
 8024510:	1e71      	subs	r1, r6, #1
 8024512:	4620      	mov	r0, r4
 8024514:	f000 fec6 	bl	80252a4 <__any_on>
 8024518:	2800      	cmp	r0, #0
 802451a:	d1e6      	bne.n	80244ea <__gethex+0x2ca>
 802451c:	ee18 0a10 	vmov	r0, s16
 8024520:	4621      	mov	r1, r4
 8024522:	f000 fa5f 	bl	80249e4 <_Bfree>
 8024526:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024528:	2300      	movs	r3, #0
 802452a:	6013      	str	r3, [r2, #0]
 802452c:	2750      	movs	r7, #80	; 0x50
 802452e:	e70c      	b.n	802434a <__gethex+0x12a>
 8024530:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024532:	2b00      	cmp	r3, #0
 8024534:	d1f2      	bne.n	802451c <__gethex+0x2fc>
 8024536:	e7d8      	b.n	80244ea <__gethex+0x2ca>
 8024538:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802453a:	2b00      	cmp	r3, #0
 802453c:	d1d5      	bne.n	80244ea <__gethex+0x2ca>
 802453e:	e7ed      	b.n	802451c <__gethex+0x2fc>
 8024540:	1e6f      	subs	r7, r5, #1
 8024542:	f1ba 0f00 	cmp.w	sl, #0
 8024546:	d131      	bne.n	80245ac <__gethex+0x38c>
 8024548:	b127      	cbz	r7, 8024554 <__gethex+0x334>
 802454a:	4639      	mov	r1, r7
 802454c:	4620      	mov	r0, r4
 802454e:	f000 fea9 	bl	80252a4 <__any_on>
 8024552:	4682      	mov	sl, r0
 8024554:	117b      	asrs	r3, r7, #5
 8024556:	2101      	movs	r1, #1
 8024558:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 802455c:	f007 071f 	and.w	r7, r7, #31
 8024560:	fa01 f707 	lsl.w	r7, r1, r7
 8024564:	421f      	tst	r7, r3
 8024566:	4629      	mov	r1, r5
 8024568:	4620      	mov	r0, r4
 802456a:	bf18      	it	ne
 802456c:	f04a 0a02 	orrne.w	sl, sl, #2
 8024570:	1b76      	subs	r6, r6, r5
 8024572:	f7ff fded 	bl	8024150 <rshift>
 8024576:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802457a:	2702      	movs	r7, #2
 802457c:	f1ba 0f00 	cmp.w	sl, #0
 8024580:	d048      	beq.n	8024614 <__gethex+0x3f4>
 8024582:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8024586:	2b02      	cmp	r3, #2
 8024588:	d015      	beq.n	80245b6 <__gethex+0x396>
 802458a:	2b03      	cmp	r3, #3
 802458c:	d017      	beq.n	80245be <__gethex+0x39e>
 802458e:	2b01      	cmp	r3, #1
 8024590:	d109      	bne.n	80245a6 <__gethex+0x386>
 8024592:	f01a 0f02 	tst.w	sl, #2
 8024596:	d006      	beq.n	80245a6 <__gethex+0x386>
 8024598:	f8d9 0000 	ldr.w	r0, [r9]
 802459c:	ea4a 0a00 	orr.w	sl, sl, r0
 80245a0:	f01a 0f01 	tst.w	sl, #1
 80245a4:	d10e      	bne.n	80245c4 <__gethex+0x3a4>
 80245a6:	f047 0710 	orr.w	r7, r7, #16
 80245aa:	e033      	b.n	8024614 <__gethex+0x3f4>
 80245ac:	f04f 0a01 	mov.w	sl, #1
 80245b0:	e7d0      	b.n	8024554 <__gethex+0x334>
 80245b2:	2701      	movs	r7, #1
 80245b4:	e7e2      	b.n	802457c <__gethex+0x35c>
 80245b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80245b8:	f1c3 0301 	rsb	r3, r3, #1
 80245bc:	9315      	str	r3, [sp, #84]	; 0x54
 80245be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80245c0:	2b00      	cmp	r3, #0
 80245c2:	d0f0      	beq.n	80245a6 <__gethex+0x386>
 80245c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80245c8:	f104 0314 	add.w	r3, r4, #20
 80245cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80245d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80245d4:	f04f 0c00 	mov.w	ip, #0
 80245d8:	4618      	mov	r0, r3
 80245da:	f853 2b04 	ldr.w	r2, [r3], #4
 80245de:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80245e2:	d01c      	beq.n	802461e <__gethex+0x3fe>
 80245e4:	3201      	adds	r2, #1
 80245e6:	6002      	str	r2, [r0, #0]
 80245e8:	2f02      	cmp	r7, #2
 80245ea:	f104 0314 	add.w	r3, r4, #20
 80245ee:	d13f      	bne.n	8024670 <__gethex+0x450>
 80245f0:	f8d8 2000 	ldr.w	r2, [r8]
 80245f4:	3a01      	subs	r2, #1
 80245f6:	42b2      	cmp	r2, r6
 80245f8:	d10a      	bne.n	8024610 <__gethex+0x3f0>
 80245fa:	1171      	asrs	r1, r6, #5
 80245fc:	2201      	movs	r2, #1
 80245fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8024602:	f006 061f 	and.w	r6, r6, #31
 8024606:	fa02 f606 	lsl.w	r6, r2, r6
 802460a:	421e      	tst	r6, r3
 802460c:	bf18      	it	ne
 802460e:	4617      	movne	r7, r2
 8024610:	f047 0720 	orr.w	r7, r7, #32
 8024614:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024616:	601c      	str	r4, [r3, #0]
 8024618:	9b04      	ldr	r3, [sp, #16]
 802461a:	601d      	str	r5, [r3, #0]
 802461c:	e695      	b.n	802434a <__gethex+0x12a>
 802461e:	4299      	cmp	r1, r3
 8024620:	f843 cc04 	str.w	ip, [r3, #-4]
 8024624:	d8d8      	bhi.n	80245d8 <__gethex+0x3b8>
 8024626:	68a3      	ldr	r3, [r4, #8]
 8024628:	459b      	cmp	fp, r3
 802462a:	db19      	blt.n	8024660 <__gethex+0x440>
 802462c:	6861      	ldr	r1, [r4, #4]
 802462e:	ee18 0a10 	vmov	r0, s16
 8024632:	3101      	adds	r1, #1
 8024634:	f000 f996 	bl	8024964 <_Balloc>
 8024638:	4681      	mov	r9, r0
 802463a:	b918      	cbnz	r0, 8024644 <__gethex+0x424>
 802463c:	4b1a      	ldr	r3, [pc, #104]	; (80246a8 <__gethex+0x488>)
 802463e:	4602      	mov	r2, r0
 8024640:	2184      	movs	r1, #132	; 0x84
 8024642:	e6a8      	b.n	8024396 <__gethex+0x176>
 8024644:	6922      	ldr	r2, [r4, #16]
 8024646:	3202      	adds	r2, #2
 8024648:	f104 010c 	add.w	r1, r4, #12
 802464c:	0092      	lsls	r2, r2, #2
 802464e:	300c      	adds	r0, #12
 8024650:	f7fc fb36 	bl	8020cc0 <memcpy>
 8024654:	4621      	mov	r1, r4
 8024656:	ee18 0a10 	vmov	r0, s16
 802465a:	f000 f9c3 	bl	80249e4 <_Bfree>
 802465e:	464c      	mov	r4, r9
 8024660:	6923      	ldr	r3, [r4, #16]
 8024662:	1c5a      	adds	r2, r3, #1
 8024664:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8024668:	6122      	str	r2, [r4, #16]
 802466a:	2201      	movs	r2, #1
 802466c:	615a      	str	r2, [r3, #20]
 802466e:	e7bb      	b.n	80245e8 <__gethex+0x3c8>
 8024670:	6922      	ldr	r2, [r4, #16]
 8024672:	455a      	cmp	r2, fp
 8024674:	dd0b      	ble.n	802468e <__gethex+0x46e>
 8024676:	2101      	movs	r1, #1
 8024678:	4620      	mov	r0, r4
 802467a:	f7ff fd69 	bl	8024150 <rshift>
 802467e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8024682:	3501      	adds	r5, #1
 8024684:	42ab      	cmp	r3, r5
 8024686:	f6ff aed0 	blt.w	802442a <__gethex+0x20a>
 802468a:	2701      	movs	r7, #1
 802468c:	e7c0      	b.n	8024610 <__gethex+0x3f0>
 802468e:	f016 061f 	ands.w	r6, r6, #31
 8024692:	d0fa      	beq.n	802468a <__gethex+0x46a>
 8024694:	4453      	add	r3, sl
 8024696:	f1c6 0620 	rsb	r6, r6, #32
 802469a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802469e:	f000 fa53 	bl	8024b48 <__hi0bits>
 80246a2:	42b0      	cmp	r0, r6
 80246a4:	dbe7      	blt.n	8024676 <__gethex+0x456>
 80246a6:	e7f0      	b.n	802468a <__gethex+0x46a>
 80246a8:	080278b6 	.word	0x080278b6

080246ac <L_shift>:
 80246ac:	f1c2 0208 	rsb	r2, r2, #8
 80246b0:	0092      	lsls	r2, r2, #2
 80246b2:	b570      	push	{r4, r5, r6, lr}
 80246b4:	f1c2 0620 	rsb	r6, r2, #32
 80246b8:	6843      	ldr	r3, [r0, #4]
 80246ba:	6804      	ldr	r4, [r0, #0]
 80246bc:	fa03 f506 	lsl.w	r5, r3, r6
 80246c0:	432c      	orrs	r4, r5
 80246c2:	40d3      	lsrs	r3, r2
 80246c4:	6004      	str	r4, [r0, #0]
 80246c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80246ca:	4288      	cmp	r0, r1
 80246cc:	d3f4      	bcc.n	80246b8 <L_shift+0xc>
 80246ce:	bd70      	pop	{r4, r5, r6, pc}

080246d0 <__match>:
 80246d0:	b530      	push	{r4, r5, lr}
 80246d2:	6803      	ldr	r3, [r0, #0]
 80246d4:	3301      	adds	r3, #1
 80246d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80246da:	b914      	cbnz	r4, 80246e2 <__match+0x12>
 80246dc:	6003      	str	r3, [r0, #0]
 80246de:	2001      	movs	r0, #1
 80246e0:	bd30      	pop	{r4, r5, pc}
 80246e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80246e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80246ea:	2d19      	cmp	r5, #25
 80246ec:	bf98      	it	ls
 80246ee:	3220      	addls	r2, #32
 80246f0:	42a2      	cmp	r2, r4
 80246f2:	d0f0      	beq.n	80246d6 <__match+0x6>
 80246f4:	2000      	movs	r0, #0
 80246f6:	e7f3      	b.n	80246e0 <__match+0x10>

080246f8 <__hexnan>:
 80246f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246fc:	680b      	ldr	r3, [r1, #0]
 80246fe:	115e      	asrs	r6, r3, #5
 8024700:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8024704:	f013 031f 	ands.w	r3, r3, #31
 8024708:	b087      	sub	sp, #28
 802470a:	bf18      	it	ne
 802470c:	3604      	addne	r6, #4
 802470e:	2500      	movs	r5, #0
 8024710:	1f37      	subs	r7, r6, #4
 8024712:	4690      	mov	r8, r2
 8024714:	6802      	ldr	r2, [r0, #0]
 8024716:	9301      	str	r3, [sp, #4]
 8024718:	4682      	mov	sl, r0
 802471a:	f846 5c04 	str.w	r5, [r6, #-4]
 802471e:	46b9      	mov	r9, r7
 8024720:	463c      	mov	r4, r7
 8024722:	9502      	str	r5, [sp, #8]
 8024724:	46ab      	mov	fp, r5
 8024726:	7851      	ldrb	r1, [r2, #1]
 8024728:	1c53      	adds	r3, r2, #1
 802472a:	9303      	str	r3, [sp, #12]
 802472c:	b341      	cbz	r1, 8024780 <__hexnan+0x88>
 802472e:	4608      	mov	r0, r1
 8024730:	9205      	str	r2, [sp, #20]
 8024732:	9104      	str	r1, [sp, #16]
 8024734:	f7ff fd5e 	bl	80241f4 <__hexdig_fun>
 8024738:	2800      	cmp	r0, #0
 802473a:	d14f      	bne.n	80247dc <__hexnan+0xe4>
 802473c:	9904      	ldr	r1, [sp, #16]
 802473e:	9a05      	ldr	r2, [sp, #20]
 8024740:	2920      	cmp	r1, #32
 8024742:	d818      	bhi.n	8024776 <__hexnan+0x7e>
 8024744:	9b02      	ldr	r3, [sp, #8]
 8024746:	459b      	cmp	fp, r3
 8024748:	dd13      	ble.n	8024772 <__hexnan+0x7a>
 802474a:	454c      	cmp	r4, r9
 802474c:	d206      	bcs.n	802475c <__hexnan+0x64>
 802474e:	2d07      	cmp	r5, #7
 8024750:	dc04      	bgt.n	802475c <__hexnan+0x64>
 8024752:	462a      	mov	r2, r5
 8024754:	4649      	mov	r1, r9
 8024756:	4620      	mov	r0, r4
 8024758:	f7ff ffa8 	bl	80246ac <L_shift>
 802475c:	4544      	cmp	r4, r8
 802475e:	d950      	bls.n	8024802 <__hexnan+0x10a>
 8024760:	2300      	movs	r3, #0
 8024762:	f1a4 0904 	sub.w	r9, r4, #4
 8024766:	f844 3c04 	str.w	r3, [r4, #-4]
 802476a:	f8cd b008 	str.w	fp, [sp, #8]
 802476e:	464c      	mov	r4, r9
 8024770:	461d      	mov	r5, r3
 8024772:	9a03      	ldr	r2, [sp, #12]
 8024774:	e7d7      	b.n	8024726 <__hexnan+0x2e>
 8024776:	2929      	cmp	r1, #41	; 0x29
 8024778:	d156      	bne.n	8024828 <__hexnan+0x130>
 802477a:	3202      	adds	r2, #2
 802477c:	f8ca 2000 	str.w	r2, [sl]
 8024780:	f1bb 0f00 	cmp.w	fp, #0
 8024784:	d050      	beq.n	8024828 <__hexnan+0x130>
 8024786:	454c      	cmp	r4, r9
 8024788:	d206      	bcs.n	8024798 <__hexnan+0xa0>
 802478a:	2d07      	cmp	r5, #7
 802478c:	dc04      	bgt.n	8024798 <__hexnan+0xa0>
 802478e:	462a      	mov	r2, r5
 8024790:	4649      	mov	r1, r9
 8024792:	4620      	mov	r0, r4
 8024794:	f7ff ff8a 	bl	80246ac <L_shift>
 8024798:	4544      	cmp	r4, r8
 802479a:	d934      	bls.n	8024806 <__hexnan+0x10e>
 802479c:	f1a8 0204 	sub.w	r2, r8, #4
 80247a0:	4623      	mov	r3, r4
 80247a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80247a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80247aa:	429f      	cmp	r7, r3
 80247ac:	d2f9      	bcs.n	80247a2 <__hexnan+0xaa>
 80247ae:	1b3b      	subs	r3, r7, r4
 80247b0:	f023 0303 	bic.w	r3, r3, #3
 80247b4:	3304      	adds	r3, #4
 80247b6:	3401      	adds	r4, #1
 80247b8:	3e03      	subs	r6, #3
 80247ba:	42b4      	cmp	r4, r6
 80247bc:	bf88      	it	hi
 80247be:	2304      	movhi	r3, #4
 80247c0:	4443      	add	r3, r8
 80247c2:	2200      	movs	r2, #0
 80247c4:	f843 2b04 	str.w	r2, [r3], #4
 80247c8:	429f      	cmp	r7, r3
 80247ca:	d2fb      	bcs.n	80247c4 <__hexnan+0xcc>
 80247cc:	683b      	ldr	r3, [r7, #0]
 80247ce:	b91b      	cbnz	r3, 80247d8 <__hexnan+0xe0>
 80247d0:	4547      	cmp	r7, r8
 80247d2:	d127      	bne.n	8024824 <__hexnan+0x12c>
 80247d4:	2301      	movs	r3, #1
 80247d6:	603b      	str	r3, [r7, #0]
 80247d8:	2005      	movs	r0, #5
 80247da:	e026      	b.n	802482a <__hexnan+0x132>
 80247dc:	3501      	adds	r5, #1
 80247de:	2d08      	cmp	r5, #8
 80247e0:	f10b 0b01 	add.w	fp, fp, #1
 80247e4:	dd06      	ble.n	80247f4 <__hexnan+0xfc>
 80247e6:	4544      	cmp	r4, r8
 80247e8:	d9c3      	bls.n	8024772 <__hexnan+0x7a>
 80247ea:	2300      	movs	r3, #0
 80247ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80247f0:	2501      	movs	r5, #1
 80247f2:	3c04      	subs	r4, #4
 80247f4:	6822      	ldr	r2, [r4, #0]
 80247f6:	f000 000f 	and.w	r0, r0, #15
 80247fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80247fe:	6022      	str	r2, [r4, #0]
 8024800:	e7b7      	b.n	8024772 <__hexnan+0x7a>
 8024802:	2508      	movs	r5, #8
 8024804:	e7b5      	b.n	8024772 <__hexnan+0x7a>
 8024806:	9b01      	ldr	r3, [sp, #4]
 8024808:	2b00      	cmp	r3, #0
 802480a:	d0df      	beq.n	80247cc <__hexnan+0xd4>
 802480c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024810:	f1c3 0320 	rsb	r3, r3, #32
 8024814:	fa22 f303 	lsr.w	r3, r2, r3
 8024818:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802481c:	401a      	ands	r2, r3
 802481e:	f846 2c04 	str.w	r2, [r6, #-4]
 8024822:	e7d3      	b.n	80247cc <__hexnan+0xd4>
 8024824:	3f04      	subs	r7, #4
 8024826:	e7d1      	b.n	80247cc <__hexnan+0xd4>
 8024828:	2004      	movs	r0, #4
 802482a:	b007      	add	sp, #28
 802482c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024830 <_localeconv_r>:
 8024830:	4800      	ldr	r0, [pc, #0]	; (8024834 <_localeconv_r+0x4>)
 8024832:	4770      	bx	lr
 8024834:	200001f4 	.word	0x200001f4

08024838 <_lseek_r>:
 8024838:	b538      	push	{r3, r4, r5, lr}
 802483a:	4d07      	ldr	r5, [pc, #28]	; (8024858 <_lseek_r+0x20>)
 802483c:	4604      	mov	r4, r0
 802483e:	4608      	mov	r0, r1
 8024840:	4611      	mov	r1, r2
 8024842:	2200      	movs	r2, #0
 8024844:	602a      	str	r2, [r5, #0]
 8024846:	461a      	mov	r2, r3
 8024848:	f7dd ff84 	bl	8002754 <_lseek>
 802484c:	1c43      	adds	r3, r0, #1
 802484e:	d102      	bne.n	8024856 <_lseek_r+0x1e>
 8024850:	682b      	ldr	r3, [r5, #0]
 8024852:	b103      	cbz	r3, 8024856 <_lseek_r+0x1e>
 8024854:	6023      	str	r3, [r4, #0]
 8024856:	bd38      	pop	{r3, r4, r5, pc}
 8024858:	20013644 	.word	0x20013644

0802485c <__swhatbuf_r>:
 802485c:	b570      	push	{r4, r5, r6, lr}
 802485e:	460e      	mov	r6, r1
 8024860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024864:	2900      	cmp	r1, #0
 8024866:	b096      	sub	sp, #88	; 0x58
 8024868:	4614      	mov	r4, r2
 802486a:	461d      	mov	r5, r3
 802486c:	da08      	bge.n	8024880 <__swhatbuf_r+0x24>
 802486e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8024872:	2200      	movs	r2, #0
 8024874:	602a      	str	r2, [r5, #0]
 8024876:	061a      	lsls	r2, r3, #24
 8024878:	d410      	bmi.n	802489c <__swhatbuf_r+0x40>
 802487a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802487e:	e00e      	b.n	802489e <__swhatbuf_r+0x42>
 8024880:	466a      	mov	r2, sp
 8024882:	f000 ff1f 	bl	80256c4 <_fstat_r>
 8024886:	2800      	cmp	r0, #0
 8024888:	dbf1      	blt.n	802486e <__swhatbuf_r+0x12>
 802488a:	9a01      	ldr	r2, [sp, #4]
 802488c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024890:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024894:	425a      	negs	r2, r3
 8024896:	415a      	adcs	r2, r3
 8024898:	602a      	str	r2, [r5, #0]
 802489a:	e7ee      	b.n	802487a <__swhatbuf_r+0x1e>
 802489c:	2340      	movs	r3, #64	; 0x40
 802489e:	2000      	movs	r0, #0
 80248a0:	6023      	str	r3, [r4, #0]
 80248a2:	b016      	add	sp, #88	; 0x58
 80248a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080248a8 <__smakebuf_r>:
 80248a8:	898b      	ldrh	r3, [r1, #12]
 80248aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80248ac:	079d      	lsls	r5, r3, #30
 80248ae:	4606      	mov	r6, r0
 80248b0:	460c      	mov	r4, r1
 80248b2:	d507      	bpl.n	80248c4 <__smakebuf_r+0x1c>
 80248b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80248b8:	6023      	str	r3, [r4, #0]
 80248ba:	6123      	str	r3, [r4, #16]
 80248bc:	2301      	movs	r3, #1
 80248be:	6163      	str	r3, [r4, #20]
 80248c0:	b002      	add	sp, #8
 80248c2:	bd70      	pop	{r4, r5, r6, pc}
 80248c4:	ab01      	add	r3, sp, #4
 80248c6:	466a      	mov	r2, sp
 80248c8:	f7ff ffc8 	bl	802485c <__swhatbuf_r>
 80248cc:	9900      	ldr	r1, [sp, #0]
 80248ce:	4605      	mov	r5, r0
 80248d0:	4630      	mov	r0, r6
 80248d2:	f7fc fa81 	bl	8020dd8 <_malloc_r>
 80248d6:	b948      	cbnz	r0, 80248ec <__smakebuf_r+0x44>
 80248d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80248dc:	059a      	lsls	r2, r3, #22
 80248de:	d4ef      	bmi.n	80248c0 <__smakebuf_r+0x18>
 80248e0:	f023 0303 	bic.w	r3, r3, #3
 80248e4:	f043 0302 	orr.w	r3, r3, #2
 80248e8:	81a3      	strh	r3, [r4, #12]
 80248ea:	e7e3      	b.n	80248b4 <__smakebuf_r+0xc>
 80248ec:	4b0d      	ldr	r3, [pc, #52]	; (8024924 <__smakebuf_r+0x7c>)
 80248ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80248f0:	89a3      	ldrh	r3, [r4, #12]
 80248f2:	6020      	str	r0, [r4, #0]
 80248f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80248f8:	81a3      	strh	r3, [r4, #12]
 80248fa:	9b00      	ldr	r3, [sp, #0]
 80248fc:	6163      	str	r3, [r4, #20]
 80248fe:	9b01      	ldr	r3, [sp, #4]
 8024900:	6120      	str	r0, [r4, #16]
 8024902:	b15b      	cbz	r3, 802491c <__smakebuf_r+0x74>
 8024904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024908:	4630      	mov	r0, r6
 802490a:	f000 feed 	bl	80256e8 <_isatty_r>
 802490e:	b128      	cbz	r0, 802491c <__smakebuf_r+0x74>
 8024910:	89a3      	ldrh	r3, [r4, #12]
 8024912:	f023 0303 	bic.w	r3, r3, #3
 8024916:	f043 0301 	orr.w	r3, r3, #1
 802491a:	81a3      	strh	r3, [r4, #12]
 802491c:	89a0      	ldrh	r0, [r4, #12]
 802491e:	4305      	orrs	r5, r0
 8024920:	81a5      	strh	r5, [r4, #12]
 8024922:	e7cd      	b.n	80248c0 <__smakebuf_r+0x18>
 8024924:	080209d9 	.word	0x080209d9

08024928 <__ascii_mbtowc>:
 8024928:	b082      	sub	sp, #8
 802492a:	b901      	cbnz	r1, 802492e <__ascii_mbtowc+0x6>
 802492c:	a901      	add	r1, sp, #4
 802492e:	b142      	cbz	r2, 8024942 <__ascii_mbtowc+0x1a>
 8024930:	b14b      	cbz	r3, 8024946 <__ascii_mbtowc+0x1e>
 8024932:	7813      	ldrb	r3, [r2, #0]
 8024934:	600b      	str	r3, [r1, #0]
 8024936:	7812      	ldrb	r2, [r2, #0]
 8024938:	1e10      	subs	r0, r2, #0
 802493a:	bf18      	it	ne
 802493c:	2001      	movne	r0, #1
 802493e:	b002      	add	sp, #8
 8024940:	4770      	bx	lr
 8024942:	4610      	mov	r0, r2
 8024944:	e7fb      	b.n	802493e <__ascii_mbtowc+0x16>
 8024946:	f06f 0001 	mvn.w	r0, #1
 802494a:	e7f8      	b.n	802493e <__ascii_mbtowc+0x16>

0802494c <__malloc_lock>:
 802494c:	4801      	ldr	r0, [pc, #4]	; (8024954 <__malloc_lock+0x8>)
 802494e:	f7fc b994 	b.w	8020c7a <__retarget_lock_acquire_recursive>
 8024952:	bf00      	nop
 8024954:	20013639 	.word	0x20013639

08024958 <__malloc_unlock>:
 8024958:	4801      	ldr	r0, [pc, #4]	; (8024960 <__malloc_unlock+0x8>)
 802495a:	f7fc b98f 	b.w	8020c7c <__retarget_lock_release_recursive>
 802495e:	bf00      	nop
 8024960:	20013639 	.word	0x20013639

08024964 <_Balloc>:
 8024964:	b570      	push	{r4, r5, r6, lr}
 8024966:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8024968:	4604      	mov	r4, r0
 802496a:	460d      	mov	r5, r1
 802496c:	b976      	cbnz	r6, 802498c <_Balloc+0x28>
 802496e:	2010      	movs	r0, #16
 8024970:	f7fc f986 	bl	8020c80 <malloc>
 8024974:	4602      	mov	r2, r0
 8024976:	6260      	str	r0, [r4, #36]	; 0x24
 8024978:	b920      	cbnz	r0, 8024984 <_Balloc+0x20>
 802497a:	4b18      	ldr	r3, [pc, #96]	; (80249dc <_Balloc+0x78>)
 802497c:	4818      	ldr	r0, [pc, #96]	; (80249e0 <_Balloc+0x7c>)
 802497e:	2166      	movs	r1, #102	; 0x66
 8024980:	f7fb ffc6 	bl	8020910 <__assert_func>
 8024984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024988:	6006      	str	r6, [r0, #0]
 802498a:	60c6      	str	r6, [r0, #12]
 802498c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802498e:	68f3      	ldr	r3, [r6, #12]
 8024990:	b183      	cbz	r3, 80249b4 <_Balloc+0x50>
 8024992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024994:	68db      	ldr	r3, [r3, #12]
 8024996:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802499a:	b9b8      	cbnz	r0, 80249cc <_Balloc+0x68>
 802499c:	2101      	movs	r1, #1
 802499e:	fa01 f605 	lsl.w	r6, r1, r5
 80249a2:	1d72      	adds	r2, r6, #5
 80249a4:	0092      	lsls	r2, r2, #2
 80249a6:	4620      	mov	r0, r4
 80249a8:	f7fc f9ba 	bl	8020d20 <_calloc_r>
 80249ac:	b160      	cbz	r0, 80249c8 <_Balloc+0x64>
 80249ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80249b2:	e00e      	b.n	80249d2 <_Balloc+0x6e>
 80249b4:	2221      	movs	r2, #33	; 0x21
 80249b6:	2104      	movs	r1, #4
 80249b8:	4620      	mov	r0, r4
 80249ba:	f7fc f9b1 	bl	8020d20 <_calloc_r>
 80249be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80249c0:	60f0      	str	r0, [r6, #12]
 80249c2:	68db      	ldr	r3, [r3, #12]
 80249c4:	2b00      	cmp	r3, #0
 80249c6:	d1e4      	bne.n	8024992 <_Balloc+0x2e>
 80249c8:	2000      	movs	r0, #0
 80249ca:	bd70      	pop	{r4, r5, r6, pc}
 80249cc:	6802      	ldr	r2, [r0, #0]
 80249ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80249d2:	2300      	movs	r3, #0
 80249d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80249d8:	e7f7      	b.n	80249ca <_Balloc+0x66>
 80249da:	bf00      	nop
 80249dc:	0802778a 	.word	0x0802778a
 80249e0:	08027940 	.word	0x08027940

080249e4 <_Bfree>:
 80249e4:	b570      	push	{r4, r5, r6, lr}
 80249e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80249e8:	4605      	mov	r5, r0
 80249ea:	460c      	mov	r4, r1
 80249ec:	b976      	cbnz	r6, 8024a0c <_Bfree+0x28>
 80249ee:	2010      	movs	r0, #16
 80249f0:	f7fc f946 	bl	8020c80 <malloc>
 80249f4:	4602      	mov	r2, r0
 80249f6:	6268      	str	r0, [r5, #36]	; 0x24
 80249f8:	b920      	cbnz	r0, 8024a04 <_Bfree+0x20>
 80249fa:	4b09      	ldr	r3, [pc, #36]	; (8024a20 <_Bfree+0x3c>)
 80249fc:	4809      	ldr	r0, [pc, #36]	; (8024a24 <_Bfree+0x40>)
 80249fe:	218a      	movs	r1, #138	; 0x8a
 8024a00:	f7fb ff86 	bl	8020910 <__assert_func>
 8024a04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024a08:	6006      	str	r6, [r0, #0]
 8024a0a:	60c6      	str	r6, [r0, #12]
 8024a0c:	b13c      	cbz	r4, 8024a1e <_Bfree+0x3a>
 8024a0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8024a10:	6862      	ldr	r2, [r4, #4]
 8024a12:	68db      	ldr	r3, [r3, #12]
 8024a14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024a18:	6021      	str	r1, [r4, #0]
 8024a1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8024a1e:	bd70      	pop	{r4, r5, r6, pc}
 8024a20:	0802778a 	.word	0x0802778a
 8024a24:	08027940 	.word	0x08027940

08024a28 <__multadd>:
 8024a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024a2c:	690d      	ldr	r5, [r1, #16]
 8024a2e:	4607      	mov	r7, r0
 8024a30:	460c      	mov	r4, r1
 8024a32:	461e      	mov	r6, r3
 8024a34:	f101 0c14 	add.w	ip, r1, #20
 8024a38:	2000      	movs	r0, #0
 8024a3a:	f8dc 3000 	ldr.w	r3, [ip]
 8024a3e:	b299      	uxth	r1, r3
 8024a40:	fb02 6101 	mla	r1, r2, r1, r6
 8024a44:	0c1e      	lsrs	r6, r3, #16
 8024a46:	0c0b      	lsrs	r3, r1, #16
 8024a48:	fb02 3306 	mla	r3, r2, r6, r3
 8024a4c:	b289      	uxth	r1, r1
 8024a4e:	3001      	adds	r0, #1
 8024a50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024a54:	4285      	cmp	r5, r0
 8024a56:	f84c 1b04 	str.w	r1, [ip], #4
 8024a5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8024a5e:	dcec      	bgt.n	8024a3a <__multadd+0x12>
 8024a60:	b30e      	cbz	r6, 8024aa6 <__multadd+0x7e>
 8024a62:	68a3      	ldr	r3, [r4, #8]
 8024a64:	42ab      	cmp	r3, r5
 8024a66:	dc19      	bgt.n	8024a9c <__multadd+0x74>
 8024a68:	6861      	ldr	r1, [r4, #4]
 8024a6a:	4638      	mov	r0, r7
 8024a6c:	3101      	adds	r1, #1
 8024a6e:	f7ff ff79 	bl	8024964 <_Balloc>
 8024a72:	4680      	mov	r8, r0
 8024a74:	b928      	cbnz	r0, 8024a82 <__multadd+0x5a>
 8024a76:	4602      	mov	r2, r0
 8024a78:	4b0c      	ldr	r3, [pc, #48]	; (8024aac <__multadd+0x84>)
 8024a7a:	480d      	ldr	r0, [pc, #52]	; (8024ab0 <__multadd+0x88>)
 8024a7c:	21b5      	movs	r1, #181	; 0xb5
 8024a7e:	f7fb ff47 	bl	8020910 <__assert_func>
 8024a82:	6922      	ldr	r2, [r4, #16]
 8024a84:	3202      	adds	r2, #2
 8024a86:	f104 010c 	add.w	r1, r4, #12
 8024a8a:	0092      	lsls	r2, r2, #2
 8024a8c:	300c      	adds	r0, #12
 8024a8e:	f7fc f917 	bl	8020cc0 <memcpy>
 8024a92:	4621      	mov	r1, r4
 8024a94:	4638      	mov	r0, r7
 8024a96:	f7ff ffa5 	bl	80249e4 <_Bfree>
 8024a9a:	4644      	mov	r4, r8
 8024a9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8024aa0:	3501      	adds	r5, #1
 8024aa2:	615e      	str	r6, [r3, #20]
 8024aa4:	6125      	str	r5, [r4, #16]
 8024aa6:	4620      	mov	r0, r4
 8024aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024aac:	080278b6 	.word	0x080278b6
 8024ab0:	08027940 	.word	0x08027940

08024ab4 <__s2b>:
 8024ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024ab8:	460c      	mov	r4, r1
 8024aba:	4615      	mov	r5, r2
 8024abc:	461f      	mov	r7, r3
 8024abe:	2209      	movs	r2, #9
 8024ac0:	3308      	adds	r3, #8
 8024ac2:	4606      	mov	r6, r0
 8024ac4:	fb93 f3f2 	sdiv	r3, r3, r2
 8024ac8:	2100      	movs	r1, #0
 8024aca:	2201      	movs	r2, #1
 8024acc:	429a      	cmp	r2, r3
 8024ace:	db09      	blt.n	8024ae4 <__s2b+0x30>
 8024ad0:	4630      	mov	r0, r6
 8024ad2:	f7ff ff47 	bl	8024964 <_Balloc>
 8024ad6:	b940      	cbnz	r0, 8024aea <__s2b+0x36>
 8024ad8:	4602      	mov	r2, r0
 8024ada:	4b19      	ldr	r3, [pc, #100]	; (8024b40 <__s2b+0x8c>)
 8024adc:	4819      	ldr	r0, [pc, #100]	; (8024b44 <__s2b+0x90>)
 8024ade:	21ce      	movs	r1, #206	; 0xce
 8024ae0:	f7fb ff16 	bl	8020910 <__assert_func>
 8024ae4:	0052      	lsls	r2, r2, #1
 8024ae6:	3101      	adds	r1, #1
 8024ae8:	e7f0      	b.n	8024acc <__s2b+0x18>
 8024aea:	9b08      	ldr	r3, [sp, #32]
 8024aec:	6143      	str	r3, [r0, #20]
 8024aee:	2d09      	cmp	r5, #9
 8024af0:	f04f 0301 	mov.w	r3, #1
 8024af4:	6103      	str	r3, [r0, #16]
 8024af6:	dd16      	ble.n	8024b26 <__s2b+0x72>
 8024af8:	f104 0909 	add.w	r9, r4, #9
 8024afc:	46c8      	mov	r8, r9
 8024afe:	442c      	add	r4, r5
 8024b00:	f818 3b01 	ldrb.w	r3, [r8], #1
 8024b04:	4601      	mov	r1, r0
 8024b06:	3b30      	subs	r3, #48	; 0x30
 8024b08:	220a      	movs	r2, #10
 8024b0a:	4630      	mov	r0, r6
 8024b0c:	f7ff ff8c 	bl	8024a28 <__multadd>
 8024b10:	45a0      	cmp	r8, r4
 8024b12:	d1f5      	bne.n	8024b00 <__s2b+0x4c>
 8024b14:	f1a5 0408 	sub.w	r4, r5, #8
 8024b18:	444c      	add	r4, r9
 8024b1a:	1b2d      	subs	r5, r5, r4
 8024b1c:	1963      	adds	r3, r4, r5
 8024b1e:	42bb      	cmp	r3, r7
 8024b20:	db04      	blt.n	8024b2c <__s2b+0x78>
 8024b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024b26:	340a      	adds	r4, #10
 8024b28:	2509      	movs	r5, #9
 8024b2a:	e7f6      	b.n	8024b1a <__s2b+0x66>
 8024b2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8024b30:	4601      	mov	r1, r0
 8024b32:	3b30      	subs	r3, #48	; 0x30
 8024b34:	220a      	movs	r2, #10
 8024b36:	4630      	mov	r0, r6
 8024b38:	f7ff ff76 	bl	8024a28 <__multadd>
 8024b3c:	e7ee      	b.n	8024b1c <__s2b+0x68>
 8024b3e:	bf00      	nop
 8024b40:	080278b6 	.word	0x080278b6
 8024b44:	08027940 	.word	0x08027940

08024b48 <__hi0bits>:
 8024b48:	0c03      	lsrs	r3, r0, #16
 8024b4a:	041b      	lsls	r3, r3, #16
 8024b4c:	b9d3      	cbnz	r3, 8024b84 <__hi0bits+0x3c>
 8024b4e:	0400      	lsls	r0, r0, #16
 8024b50:	2310      	movs	r3, #16
 8024b52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8024b56:	bf04      	itt	eq
 8024b58:	0200      	lsleq	r0, r0, #8
 8024b5a:	3308      	addeq	r3, #8
 8024b5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8024b60:	bf04      	itt	eq
 8024b62:	0100      	lsleq	r0, r0, #4
 8024b64:	3304      	addeq	r3, #4
 8024b66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8024b6a:	bf04      	itt	eq
 8024b6c:	0080      	lsleq	r0, r0, #2
 8024b6e:	3302      	addeq	r3, #2
 8024b70:	2800      	cmp	r0, #0
 8024b72:	db05      	blt.n	8024b80 <__hi0bits+0x38>
 8024b74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8024b78:	f103 0301 	add.w	r3, r3, #1
 8024b7c:	bf08      	it	eq
 8024b7e:	2320      	moveq	r3, #32
 8024b80:	4618      	mov	r0, r3
 8024b82:	4770      	bx	lr
 8024b84:	2300      	movs	r3, #0
 8024b86:	e7e4      	b.n	8024b52 <__hi0bits+0xa>

08024b88 <__lo0bits>:
 8024b88:	6803      	ldr	r3, [r0, #0]
 8024b8a:	f013 0207 	ands.w	r2, r3, #7
 8024b8e:	4601      	mov	r1, r0
 8024b90:	d00b      	beq.n	8024baa <__lo0bits+0x22>
 8024b92:	07da      	lsls	r2, r3, #31
 8024b94:	d423      	bmi.n	8024bde <__lo0bits+0x56>
 8024b96:	0798      	lsls	r0, r3, #30
 8024b98:	bf49      	itett	mi
 8024b9a:	085b      	lsrmi	r3, r3, #1
 8024b9c:	089b      	lsrpl	r3, r3, #2
 8024b9e:	2001      	movmi	r0, #1
 8024ba0:	600b      	strmi	r3, [r1, #0]
 8024ba2:	bf5c      	itt	pl
 8024ba4:	600b      	strpl	r3, [r1, #0]
 8024ba6:	2002      	movpl	r0, #2
 8024ba8:	4770      	bx	lr
 8024baa:	b298      	uxth	r0, r3
 8024bac:	b9a8      	cbnz	r0, 8024bda <__lo0bits+0x52>
 8024bae:	0c1b      	lsrs	r3, r3, #16
 8024bb0:	2010      	movs	r0, #16
 8024bb2:	b2da      	uxtb	r2, r3
 8024bb4:	b90a      	cbnz	r2, 8024bba <__lo0bits+0x32>
 8024bb6:	3008      	adds	r0, #8
 8024bb8:	0a1b      	lsrs	r3, r3, #8
 8024bba:	071a      	lsls	r2, r3, #28
 8024bbc:	bf04      	itt	eq
 8024bbe:	091b      	lsreq	r3, r3, #4
 8024bc0:	3004      	addeq	r0, #4
 8024bc2:	079a      	lsls	r2, r3, #30
 8024bc4:	bf04      	itt	eq
 8024bc6:	089b      	lsreq	r3, r3, #2
 8024bc8:	3002      	addeq	r0, #2
 8024bca:	07da      	lsls	r2, r3, #31
 8024bcc:	d403      	bmi.n	8024bd6 <__lo0bits+0x4e>
 8024bce:	085b      	lsrs	r3, r3, #1
 8024bd0:	f100 0001 	add.w	r0, r0, #1
 8024bd4:	d005      	beq.n	8024be2 <__lo0bits+0x5a>
 8024bd6:	600b      	str	r3, [r1, #0]
 8024bd8:	4770      	bx	lr
 8024bda:	4610      	mov	r0, r2
 8024bdc:	e7e9      	b.n	8024bb2 <__lo0bits+0x2a>
 8024bde:	2000      	movs	r0, #0
 8024be0:	4770      	bx	lr
 8024be2:	2020      	movs	r0, #32
 8024be4:	4770      	bx	lr
	...

08024be8 <__i2b>:
 8024be8:	b510      	push	{r4, lr}
 8024bea:	460c      	mov	r4, r1
 8024bec:	2101      	movs	r1, #1
 8024bee:	f7ff feb9 	bl	8024964 <_Balloc>
 8024bf2:	4602      	mov	r2, r0
 8024bf4:	b928      	cbnz	r0, 8024c02 <__i2b+0x1a>
 8024bf6:	4b05      	ldr	r3, [pc, #20]	; (8024c0c <__i2b+0x24>)
 8024bf8:	4805      	ldr	r0, [pc, #20]	; (8024c10 <__i2b+0x28>)
 8024bfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8024bfe:	f7fb fe87 	bl	8020910 <__assert_func>
 8024c02:	2301      	movs	r3, #1
 8024c04:	6144      	str	r4, [r0, #20]
 8024c06:	6103      	str	r3, [r0, #16]
 8024c08:	bd10      	pop	{r4, pc}
 8024c0a:	bf00      	nop
 8024c0c:	080278b6 	.word	0x080278b6
 8024c10:	08027940 	.word	0x08027940

08024c14 <__multiply>:
 8024c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c18:	4691      	mov	r9, r2
 8024c1a:	690a      	ldr	r2, [r1, #16]
 8024c1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8024c20:	429a      	cmp	r2, r3
 8024c22:	bfb8      	it	lt
 8024c24:	460b      	movlt	r3, r1
 8024c26:	460c      	mov	r4, r1
 8024c28:	bfbc      	itt	lt
 8024c2a:	464c      	movlt	r4, r9
 8024c2c:	4699      	movlt	r9, r3
 8024c2e:	6927      	ldr	r7, [r4, #16]
 8024c30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8024c34:	68a3      	ldr	r3, [r4, #8]
 8024c36:	6861      	ldr	r1, [r4, #4]
 8024c38:	eb07 060a 	add.w	r6, r7, sl
 8024c3c:	42b3      	cmp	r3, r6
 8024c3e:	b085      	sub	sp, #20
 8024c40:	bfb8      	it	lt
 8024c42:	3101      	addlt	r1, #1
 8024c44:	f7ff fe8e 	bl	8024964 <_Balloc>
 8024c48:	b930      	cbnz	r0, 8024c58 <__multiply+0x44>
 8024c4a:	4602      	mov	r2, r0
 8024c4c:	4b44      	ldr	r3, [pc, #272]	; (8024d60 <__multiply+0x14c>)
 8024c4e:	4845      	ldr	r0, [pc, #276]	; (8024d64 <__multiply+0x150>)
 8024c50:	f240 115d 	movw	r1, #349	; 0x15d
 8024c54:	f7fb fe5c 	bl	8020910 <__assert_func>
 8024c58:	f100 0514 	add.w	r5, r0, #20
 8024c5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8024c60:	462b      	mov	r3, r5
 8024c62:	2200      	movs	r2, #0
 8024c64:	4543      	cmp	r3, r8
 8024c66:	d321      	bcc.n	8024cac <__multiply+0x98>
 8024c68:	f104 0314 	add.w	r3, r4, #20
 8024c6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8024c70:	f109 0314 	add.w	r3, r9, #20
 8024c74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8024c78:	9202      	str	r2, [sp, #8]
 8024c7a:	1b3a      	subs	r2, r7, r4
 8024c7c:	3a15      	subs	r2, #21
 8024c7e:	f022 0203 	bic.w	r2, r2, #3
 8024c82:	3204      	adds	r2, #4
 8024c84:	f104 0115 	add.w	r1, r4, #21
 8024c88:	428f      	cmp	r7, r1
 8024c8a:	bf38      	it	cc
 8024c8c:	2204      	movcc	r2, #4
 8024c8e:	9201      	str	r2, [sp, #4]
 8024c90:	9a02      	ldr	r2, [sp, #8]
 8024c92:	9303      	str	r3, [sp, #12]
 8024c94:	429a      	cmp	r2, r3
 8024c96:	d80c      	bhi.n	8024cb2 <__multiply+0x9e>
 8024c98:	2e00      	cmp	r6, #0
 8024c9a:	dd03      	ble.n	8024ca4 <__multiply+0x90>
 8024c9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8024ca0:	2b00      	cmp	r3, #0
 8024ca2:	d05a      	beq.n	8024d5a <__multiply+0x146>
 8024ca4:	6106      	str	r6, [r0, #16]
 8024ca6:	b005      	add	sp, #20
 8024ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cac:	f843 2b04 	str.w	r2, [r3], #4
 8024cb0:	e7d8      	b.n	8024c64 <__multiply+0x50>
 8024cb2:	f8b3 a000 	ldrh.w	sl, [r3]
 8024cb6:	f1ba 0f00 	cmp.w	sl, #0
 8024cba:	d024      	beq.n	8024d06 <__multiply+0xf2>
 8024cbc:	f104 0e14 	add.w	lr, r4, #20
 8024cc0:	46a9      	mov	r9, r5
 8024cc2:	f04f 0c00 	mov.w	ip, #0
 8024cc6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8024cca:	f8d9 1000 	ldr.w	r1, [r9]
 8024cce:	fa1f fb82 	uxth.w	fp, r2
 8024cd2:	b289      	uxth	r1, r1
 8024cd4:	fb0a 110b 	mla	r1, sl, fp, r1
 8024cd8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8024cdc:	f8d9 2000 	ldr.w	r2, [r9]
 8024ce0:	4461      	add	r1, ip
 8024ce2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8024ce6:	fb0a c20b 	mla	r2, sl, fp, ip
 8024cea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8024cee:	b289      	uxth	r1, r1
 8024cf0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8024cf4:	4577      	cmp	r7, lr
 8024cf6:	f849 1b04 	str.w	r1, [r9], #4
 8024cfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8024cfe:	d8e2      	bhi.n	8024cc6 <__multiply+0xb2>
 8024d00:	9a01      	ldr	r2, [sp, #4]
 8024d02:	f845 c002 	str.w	ip, [r5, r2]
 8024d06:	9a03      	ldr	r2, [sp, #12]
 8024d08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8024d0c:	3304      	adds	r3, #4
 8024d0e:	f1b9 0f00 	cmp.w	r9, #0
 8024d12:	d020      	beq.n	8024d56 <__multiply+0x142>
 8024d14:	6829      	ldr	r1, [r5, #0]
 8024d16:	f104 0c14 	add.w	ip, r4, #20
 8024d1a:	46ae      	mov	lr, r5
 8024d1c:	f04f 0a00 	mov.w	sl, #0
 8024d20:	f8bc b000 	ldrh.w	fp, [ip]
 8024d24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8024d28:	fb09 220b 	mla	r2, r9, fp, r2
 8024d2c:	4492      	add	sl, r2
 8024d2e:	b289      	uxth	r1, r1
 8024d30:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8024d34:	f84e 1b04 	str.w	r1, [lr], #4
 8024d38:	f85c 2b04 	ldr.w	r2, [ip], #4
 8024d3c:	f8be 1000 	ldrh.w	r1, [lr]
 8024d40:	0c12      	lsrs	r2, r2, #16
 8024d42:	fb09 1102 	mla	r1, r9, r2, r1
 8024d46:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8024d4a:	4567      	cmp	r7, ip
 8024d4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8024d50:	d8e6      	bhi.n	8024d20 <__multiply+0x10c>
 8024d52:	9a01      	ldr	r2, [sp, #4]
 8024d54:	50a9      	str	r1, [r5, r2]
 8024d56:	3504      	adds	r5, #4
 8024d58:	e79a      	b.n	8024c90 <__multiply+0x7c>
 8024d5a:	3e01      	subs	r6, #1
 8024d5c:	e79c      	b.n	8024c98 <__multiply+0x84>
 8024d5e:	bf00      	nop
 8024d60:	080278b6 	.word	0x080278b6
 8024d64:	08027940 	.word	0x08027940

08024d68 <__pow5mult>:
 8024d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024d6c:	4615      	mov	r5, r2
 8024d6e:	f012 0203 	ands.w	r2, r2, #3
 8024d72:	4606      	mov	r6, r0
 8024d74:	460f      	mov	r7, r1
 8024d76:	d007      	beq.n	8024d88 <__pow5mult+0x20>
 8024d78:	4c25      	ldr	r4, [pc, #148]	; (8024e10 <__pow5mult+0xa8>)
 8024d7a:	3a01      	subs	r2, #1
 8024d7c:	2300      	movs	r3, #0
 8024d7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8024d82:	f7ff fe51 	bl	8024a28 <__multadd>
 8024d86:	4607      	mov	r7, r0
 8024d88:	10ad      	asrs	r5, r5, #2
 8024d8a:	d03d      	beq.n	8024e08 <__pow5mult+0xa0>
 8024d8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8024d8e:	b97c      	cbnz	r4, 8024db0 <__pow5mult+0x48>
 8024d90:	2010      	movs	r0, #16
 8024d92:	f7fb ff75 	bl	8020c80 <malloc>
 8024d96:	4602      	mov	r2, r0
 8024d98:	6270      	str	r0, [r6, #36]	; 0x24
 8024d9a:	b928      	cbnz	r0, 8024da8 <__pow5mult+0x40>
 8024d9c:	4b1d      	ldr	r3, [pc, #116]	; (8024e14 <__pow5mult+0xac>)
 8024d9e:	481e      	ldr	r0, [pc, #120]	; (8024e18 <__pow5mult+0xb0>)
 8024da0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8024da4:	f7fb fdb4 	bl	8020910 <__assert_func>
 8024da8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8024dac:	6004      	str	r4, [r0, #0]
 8024dae:	60c4      	str	r4, [r0, #12]
 8024db0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8024db4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8024db8:	b94c      	cbnz	r4, 8024dce <__pow5mult+0x66>
 8024dba:	f240 2171 	movw	r1, #625	; 0x271
 8024dbe:	4630      	mov	r0, r6
 8024dc0:	f7ff ff12 	bl	8024be8 <__i2b>
 8024dc4:	2300      	movs	r3, #0
 8024dc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8024dca:	4604      	mov	r4, r0
 8024dcc:	6003      	str	r3, [r0, #0]
 8024dce:	f04f 0900 	mov.w	r9, #0
 8024dd2:	07eb      	lsls	r3, r5, #31
 8024dd4:	d50a      	bpl.n	8024dec <__pow5mult+0x84>
 8024dd6:	4639      	mov	r1, r7
 8024dd8:	4622      	mov	r2, r4
 8024dda:	4630      	mov	r0, r6
 8024ddc:	f7ff ff1a 	bl	8024c14 <__multiply>
 8024de0:	4639      	mov	r1, r7
 8024de2:	4680      	mov	r8, r0
 8024de4:	4630      	mov	r0, r6
 8024de6:	f7ff fdfd 	bl	80249e4 <_Bfree>
 8024dea:	4647      	mov	r7, r8
 8024dec:	106d      	asrs	r5, r5, #1
 8024dee:	d00b      	beq.n	8024e08 <__pow5mult+0xa0>
 8024df0:	6820      	ldr	r0, [r4, #0]
 8024df2:	b938      	cbnz	r0, 8024e04 <__pow5mult+0x9c>
 8024df4:	4622      	mov	r2, r4
 8024df6:	4621      	mov	r1, r4
 8024df8:	4630      	mov	r0, r6
 8024dfa:	f7ff ff0b 	bl	8024c14 <__multiply>
 8024dfe:	6020      	str	r0, [r4, #0]
 8024e00:	f8c0 9000 	str.w	r9, [r0]
 8024e04:	4604      	mov	r4, r0
 8024e06:	e7e4      	b.n	8024dd2 <__pow5mult+0x6a>
 8024e08:	4638      	mov	r0, r7
 8024e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024e0e:	bf00      	nop
 8024e10:	08027a90 	.word	0x08027a90
 8024e14:	0802778a 	.word	0x0802778a
 8024e18:	08027940 	.word	0x08027940

08024e1c <__lshift>:
 8024e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024e20:	460c      	mov	r4, r1
 8024e22:	6849      	ldr	r1, [r1, #4]
 8024e24:	6923      	ldr	r3, [r4, #16]
 8024e26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8024e2a:	68a3      	ldr	r3, [r4, #8]
 8024e2c:	4607      	mov	r7, r0
 8024e2e:	4691      	mov	r9, r2
 8024e30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8024e34:	f108 0601 	add.w	r6, r8, #1
 8024e38:	42b3      	cmp	r3, r6
 8024e3a:	db0b      	blt.n	8024e54 <__lshift+0x38>
 8024e3c:	4638      	mov	r0, r7
 8024e3e:	f7ff fd91 	bl	8024964 <_Balloc>
 8024e42:	4605      	mov	r5, r0
 8024e44:	b948      	cbnz	r0, 8024e5a <__lshift+0x3e>
 8024e46:	4602      	mov	r2, r0
 8024e48:	4b2a      	ldr	r3, [pc, #168]	; (8024ef4 <__lshift+0xd8>)
 8024e4a:	482b      	ldr	r0, [pc, #172]	; (8024ef8 <__lshift+0xdc>)
 8024e4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8024e50:	f7fb fd5e 	bl	8020910 <__assert_func>
 8024e54:	3101      	adds	r1, #1
 8024e56:	005b      	lsls	r3, r3, #1
 8024e58:	e7ee      	b.n	8024e38 <__lshift+0x1c>
 8024e5a:	2300      	movs	r3, #0
 8024e5c:	f100 0114 	add.w	r1, r0, #20
 8024e60:	f100 0210 	add.w	r2, r0, #16
 8024e64:	4618      	mov	r0, r3
 8024e66:	4553      	cmp	r3, sl
 8024e68:	db37      	blt.n	8024eda <__lshift+0xbe>
 8024e6a:	6920      	ldr	r0, [r4, #16]
 8024e6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8024e70:	f104 0314 	add.w	r3, r4, #20
 8024e74:	f019 091f 	ands.w	r9, r9, #31
 8024e78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8024e7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8024e80:	d02f      	beq.n	8024ee2 <__lshift+0xc6>
 8024e82:	f1c9 0e20 	rsb	lr, r9, #32
 8024e86:	468a      	mov	sl, r1
 8024e88:	f04f 0c00 	mov.w	ip, #0
 8024e8c:	681a      	ldr	r2, [r3, #0]
 8024e8e:	fa02 f209 	lsl.w	r2, r2, r9
 8024e92:	ea42 020c 	orr.w	r2, r2, ip
 8024e96:	f84a 2b04 	str.w	r2, [sl], #4
 8024e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8024e9e:	4298      	cmp	r0, r3
 8024ea0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8024ea4:	d8f2      	bhi.n	8024e8c <__lshift+0x70>
 8024ea6:	1b03      	subs	r3, r0, r4
 8024ea8:	3b15      	subs	r3, #21
 8024eaa:	f023 0303 	bic.w	r3, r3, #3
 8024eae:	3304      	adds	r3, #4
 8024eb0:	f104 0215 	add.w	r2, r4, #21
 8024eb4:	4290      	cmp	r0, r2
 8024eb6:	bf38      	it	cc
 8024eb8:	2304      	movcc	r3, #4
 8024eba:	f841 c003 	str.w	ip, [r1, r3]
 8024ebe:	f1bc 0f00 	cmp.w	ip, #0
 8024ec2:	d001      	beq.n	8024ec8 <__lshift+0xac>
 8024ec4:	f108 0602 	add.w	r6, r8, #2
 8024ec8:	3e01      	subs	r6, #1
 8024eca:	4638      	mov	r0, r7
 8024ecc:	612e      	str	r6, [r5, #16]
 8024ece:	4621      	mov	r1, r4
 8024ed0:	f7ff fd88 	bl	80249e4 <_Bfree>
 8024ed4:	4628      	mov	r0, r5
 8024ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024eda:	f842 0f04 	str.w	r0, [r2, #4]!
 8024ede:	3301      	adds	r3, #1
 8024ee0:	e7c1      	b.n	8024e66 <__lshift+0x4a>
 8024ee2:	3904      	subs	r1, #4
 8024ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8024ee8:	f841 2f04 	str.w	r2, [r1, #4]!
 8024eec:	4298      	cmp	r0, r3
 8024eee:	d8f9      	bhi.n	8024ee4 <__lshift+0xc8>
 8024ef0:	e7ea      	b.n	8024ec8 <__lshift+0xac>
 8024ef2:	bf00      	nop
 8024ef4:	080278b6 	.word	0x080278b6
 8024ef8:	08027940 	.word	0x08027940

08024efc <__mcmp>:
 8024efc:	b530      	push	{r4, r5, lr}
 8024efe:	6902      	ldr	r2, [r0, #16]
 8024f00:	690c      	ldr	r4, [r1, #16]
 8024f02:	1b12      	subs	r2, r2, r4
 8024f04:	d10e      	bne.n	8024f24 <__mcmp+0x28>
 8024f06:	f100 0314 	add.w	r3, r0, #20
 8024f0a:	3114      	adds	r1, #20
 8024f0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8024f10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8024f14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8024f18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8024f1c:	42a5      	cmp	r5, r4
 8024f1e:	d003      	beq.n	8024f28 <__mcmp+0x2c>
 8024f20:	d305      	bcc.n	8024f2e <__mcmp+0x32>
 8024f22:	2201      	movs	r2, #1
 8024f24:	4610      	mov	r0, r2
 8024f26:	bd30      	pop	{r4, r5, pc}
 8024f28:	4283      	cmp	r3, r0
 8024f2a:	d3f3      	bcc.n	8024f14 <__mcmp+0x18>
 8024f2c:	e7fa      	b.n	8024f24 <__mcmp+0x28>
 8024f2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024f32:	e7f7      	b.n	8024f24 <__mcmp+0x28>

08024f34 <__mdiff>:
 8024f34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f38:	460c      	mov	r4, r1
 8024f3a:	4606      	mov	r6, r0
 8024f3c:	4611      	mov	r1, r2
 8024f3e:	4620      	mov	r0, r4
 8024f40:	4690      	mov	r8, r2
 8024f42:	f7ff ffdb 	bl	8024efc <__mcmp>
 8024f46:	1e05      	subs	r5, r0, #0
 8024f48:	d110      	bne.n	8024f6c <__mdiff+0x38>
 8024f4a:	4629      	mov	r1, r5
 8024f4c:	4630      	mov	r0, r6
 8024f4e:	f7ff fd09 	bl	8024964 <_Balloc>
 8024f52:	b930      	cbnz	r0, 8024f62 <__mdiff+0x2e>
 8024f54:	4b3a      	ldr	r3, [pc, #232]	; (8025040 <__mdiff+0x10c>)
 8024f56:	4602      	mov	r2, r0
 8024f58:	f240 2132 	movw	r1, #562	; 0x232
 8024f5c:	4839      	ldr	r0, [pc, #228]	; (8025044 <__mdiff+0x110>)
 8024f5e:	f7fb fcd7 	bl	8020910 <__assert_func>
 8024f62:	2301      	movs	r3, #1
 8024f64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8024f68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f6c:	bfa4      	itt	ge
 8024f6e:	4643      	movge	r3, r8
 8024f70:	46a0      	movge	r8, r4
 8024f72:	4630      	mov	r0, r6
 8024f74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8024f78:	bfa6      	itte	ge
 8024f7a:	461c      	movge	r4, r3
 8024f7c:	2500      	movge	r5, #0
 8024f7e:	2501      	movlt	r5, #1
 8024f80:	f7ff fcf0 	bl	8024964 <_Balloc>
 8024f84:	b920      	cbnz	r0, 8024f90 <__mdiff+0x5c>
 8024f86:	4b2e      	ldr	r3, [pc, #184]	; (8025040 <__mdiff+0x10c>)
 8024f88:	4602      	mov	r2, r0
 8024f8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8024f8e:	e7e5      	b.n	8024f5c <__mdiff+0x28>
 8024f90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8024f94:	6926      	ldr	r6, [r4, #16]
 8024f96:	60c5      	str	r5, [r0, #12]
 8024f98:	f104 0914 	add.w	r9, r4, #20
 8024f9c:	f108 0514 	add.w	r5, r8, #20
 8024fa0:	f100 0e14 	add.w	lr, r0, #20
 8024fa4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8024fa8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8024fac:	f108 0210 	add.w	r2, r8, #16
 8024fb0:	46f2      	mov	sl, lr
 8024fb2:	2100      	movs	r1, #0
 8024fb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8024fb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8024fbc:	fa1f f883 	uxth.w	r8, r3
 8024fc0:	fa11 f18b 	uxtah	r1, r1, fp
 8024fc4:	0c1b      	lsrs	r3, r3, #16
 8024fc6:	eba1 0808 	sub.w	r8, r1, r8
 8024fca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8024fce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8024fd2:	fa1f f888 	uxth.w	r8, r8
 8024fd6:	1419      	asrs	r1, r3, #16
 8024fd8:	454e      	cmp	r6, r9
 8024fda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8024fde:	f84a 3b04 	str.w	r3, [sl], #4
 8024fe2:	d8e7      	bhi.n	8024fb4 <__mdiff+0x80>
 8024fe4:	1b33      	subs	r3, r6, r4
 8024fe6:	3b15      	subs	r3, #21
 8024fe8:	f023 0303 	bic.w	r3, r3, #3
 8024fec:	3304      	adds	r3, #4
 8024fee:	3415      	adds	r4, #21
 8024ff0:	42a6      	cmp	r6, r4
 8024ff2:	bf38      	it	cc
 8024ff4:	2304      	movcc	r3, #4
 8024ff6:	441d      	add	r5, r3
 8024ff8:	4473      	add	r3, lr
 8024ffa:	469e      	mov	lr, r3
 8024ffc:	462e      	mov	r6, r5
 8024ffe:	4566      	cmp	r6, ip
 8025000:	d30e      	bcc.n	8025020 <__mdiff+0xec>
 8025002:	f10c 0203 	add.w	r2, ip, #3
 8025006:	1b52      	subs	r2, r2, r5
 8025008:	f022 0203 	bic.w	r2, r2, #3
 802500c:	3d03      	subs	r5, #3
 802500e:	45ac      	cmp	ip, r5
 8025010:	bf38      	it	cc
 8025012:	2200      	movcc	r2, #0
 8025014:	441a      	add	r2, r3
 8025016:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802501a:	b17b      	cbz	r3, 802503c <__mdiff+0x108>
 802501c:	6107      	str	r7, [r0, #16]
 802501e:	e7a3      	b.n	8024f68 <__mdiff+0x34>
 8025020:	f856 8b04 	ldr.w	r8, [r6], #4
 8025024:	fa11 f288 	uxtah	r2, r1, r8
 8025028:	1414      	asrs	r4, r2, #16
 802502a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802502e:	b292      	uxth	r2, r2
 8025030:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8025034:	f84e 2b04 	str.w	r2, [lr], #4
 8025038:	1421      	asrs	r1, r4, #16
 802503a:	e7e0      	b.n	8024ffe <__mdiff+0xca>
 802503c:	3f01      	subs	r7, #1
 802503e:	e7ea      	b.n	8025016 <__mdiff+0xe2>
 8025040:	080278b6 	.word	0x080278b6
 8025044:	08027940 	.word	0x08027940

08025048 <__ulp>:
 8025048:	b082      	sub	sp, #8
 802504a:	ed8d 0b00 	vstr	d0, [sp]
 802504e:	9b01      	ldr	r3, [sp, #4]
 8025050:	4912      	ldr	r1, [pc, #72]	; (802509c <__ulp+0x54>)
 8025052:	4019      	ands	r1, r3
 8025054:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8025058:	2900      	cmp	r1, #0
 802505a:	dd05      	ble.n	8025068 <__ulp+0x20>
 802505c:	2200      	movs	r2, #0
 802505e:	460b      	mov	r3, r1
 8025060:	ec43 2b10 	vmov	d0, r2, r3
 8025064:	b002      	add	sp, #8
 8025066:	4770      	bx	lr
 8025068:	4249      	negs	r1, r1
 802506a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802506e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8025072:	f04f 0200 	mov.w	r2, #0
 8025076:	f04f 0300 	mov.w	r3, #0
 802507a:	da04      	bge.n	8025086 <__ulp+0x3e>
 802507c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8025080:	fa41 f300 	asr.w	r3, r1, r0
 8025084:	e7ec      	b.n	8025060 <__ulp+0x18>
 8025086:	f1a0 0114 	sub.w	r1, r0, #20
 802508a:	291e      	cmp	r1, #30
 802508c:	bfda      	itte	le
 802508e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8025092:	fa20 f101 	lsrle.w	r1, r0, r1
 8025096:	2101      	movgt	r1, #1
 8025098:	460a      	mov	r2, r1
 802509a:	e7e1      	b.n	8025060 <__ulp+0x18>
 802509c:	7ff00000 	.word	0x7ff00000

080250a0 <__b2d>:
 80250a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80250a2:	6905      	ldr	r5, [r0, #16]
 80250a4:	f100 0714 	add.w	r7, r0, #20
 80250a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80250ac:	1f2e      	subs	r6, r5, #4
 80250ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80250b2:	4620      	mov	r0, r4
 80250b4:	f7ff fd48 	bl	8024b48 <__hi0bits>
 80250b8:	f1c0 0320 	rsb	r3, r0, #32
 80250bc:	280a      	cmp	r0, #10
 80250be:	f8df c07c 	ldr.w	ip, [pc, #124]	; 802513c <__b2d+0x9c>
 80250c2:	600b      	str	r3, [r1, #0]
 80250c4:	dc14      	bgt.n	80250f0 <__b2d+0x50>
 80250c6:	f1c0 0e0b 	rsb	lr, r0, #11
 80250ca:	fa24 f10e 	lsr.w	r1, r4, lr
 80250ce:	42b7      	cmp	r7, r6
 80250d0:	ea41 030c 	orr.w	r3, r1, ip
 80250d4:	bf34      	ite	cc
 80250d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80250da:	2100      	movcs	r1, #0
 80250dc:	3015      	adds	r0, #21
 80250de:	fa04 f000 	lsl.w	r0, r4, r0
 80250e2:	fa21 f10e 	lsr.w	r1, r1, lr
 80250e6:	ea40 0201 	orr.w	r2, r0, r1
 80250ea:	ec43 2b10 	vmov	d0, r2, r3
 80250ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80250f0:	42b7      	cmp	r7, r6
 80250f2:	bf3a      	itte	cc
 80250f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80250f8:	f1a5 0608 	subcc.w	r6, r5, #8
 80250fc:	2100      	movcs	r1, #0
 80250fe:	380b      	subs	r0, #11
 8025100:	d017      	beq.n	8025132 <__b2d+0x92>
 8025102:	f1c0 0c20 	rsb	ip, r0, #32
 8025106:	fa04 f500 	lsl.w	r5, r4, r0
 802510a:	42be      	cmp	r6, r7
 802510c:	fa21 f40c 	lsr.w	r4, r1, ip
 8025110:	ea45 0504 	orr.w	r5, r5, r4
 8025114:	bf8c      	ite	hi
 8025116:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802511a:	2400      	movls	r4, #0
 802511c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8025120:	fa01 f000 	lsl.w	r0, r1, r0
 8025124:	fa24 f40c 	lsr.w	r4, r4, ip
 8025128:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802512c:	ea40 0204 	orr.w	r2, r0, r4
 8025130:	e7db      	b.n	80250ea <__b2d+0x4a>
 8025132:	ea44 030c 	orr.w	r3, r4, ip
 8025136:	460a      	mov	r2, r1
 8025138:	e7d7      	b.n	80250ea <__b2d+0x4a>
 802513a:	bf00      	nop
 802513c:	3ff00000 	.word	0x3ff00000

08025140 <__d2b>:
 8025140:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8025144:	4689      	mov	r9, r1
 8025146:	2101      	movs	r1, #1
 8025148:	ec57 6b10 	vmov	r6, r7, d0
 802514c:	4690      	mov	r8, r2
 802514e:	f7ff fc09 	bl	8024964 <_Balloc>
 8025152:	4604      	mov	r4, r0
 8025154:	b930      	cbnz	r0, 8025164 <__d2b+0x24>
 8025156:	4602      	mov	r2, r0
 8025158:	4b25      	ldr	r3, [pc, #148]	; (80251f0 <__d2b+0xb0>)
 802515a:	4826      	ldr	r0, [pc, #152]	; (80251f4 <__d2b+0xb4>)
 802515c:	f240 310a 	movw	r1, #778	; 0x30a
 8025160:	f7fb fbd6 	bl	8020910 <__assert_func>
 8025164:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8025168:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802516c:	bb35      	cbnz	r5, 80251bc <__d2b+0x7c>
 802516e:	2e00      	cmp	r6, #0
 8025170:	9301      	str	r3, [sp, #4]
 8025172:	d028      	beq.n	80251c6 <__d2b+0x86>
 8025174:	4668      	mov	r0, sp
 8025176:	9600      	str	r6, [sp, #0]
 8025178:	f7ff fd06 	bl	8024b88 <__lo0bits>
 802517c:	9900      	ldr	r1, [sp, #0]
 802517e:	b300      	cbz	r0, 80251c2 <__d2b+0x82>
 8025180:	9a01      	ldr	r2, [sp, #4]
 8025182:	f1c0 0320 	rsb	r3, r0, #32
 8025186:	fa02 f303 	lsl.w	r3, r2, r3
 802518a:	430b      	orrs	r3, r1
 802518c:	40c2      	lsrs	r2, r0
 802518e:	6163      	str	r3, [r4, #20]
 8025190:	9201      	str	r2, [sp, #4]
 8025192:	9b01      	ldr	r3, [sp, #4]
 8025194:	61a3      	str	r3, [r4, #24]
 8025196:	2b00      	cmp	r3, #0
 8025198:	bf14      	ite	ne
 802519a:	2202      	movne	r2, #2
 802519c:	2201      	moveq	r2, #1
 802519e:	6122      	str	r2, [r4, #16]
 80251a0:	b1d5      	cbz	r5, 80251d8 <__d2b+0x98>
 80251a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80251a6:	4405      	add	r5, r0
 80251a8:	f8c9 5000 	str.w	r5, [r9]
 80251ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80251b0:	f8c8 0000 	str.w	r0, [r8]
 80251b4:	4620      	mov	r0, r4
 80251b6:	b003      	add	sp, #12
 80251b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80251bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80251c0:	e7d5      	b.n	802516e <__d2b+0x2e>
 80251c2:	6161      	str	r1, [r4, #20]
 80251c4:	e7e5      	b.n	8025192 <__d2b+0x52>
 80251c6:	a801      	add	r0, sp, #4
 80251c8:	f7ff fcde 	bl	8024b88 <__lo0bits>
 80251cc:	9b01      	ldr	r3, [sp, #4]
 80251ce:	6163      	str	r3, [r4, #20]
 80251d0:	2201      	movs	r2, #1
 80251d2:	6122      	str	r2, [r4, #16]
 80251d4:	3020      	adds	r0, #32
 80251d6:	e7e3      	b.n	80251a0 <__d2b+0x60>
 80251d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80251dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80251e0:	f8c9 0000 	str.w	r0, [r9]
 80251e4:	6918      	ldr	r0, [r3, #16]
 80251e6:	f7ff fcaf 	bl	8024b48 <__hi0bits>
 80251ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80251ee:	e7df      	b.n	80251b0 <__d2b+0x70>
 80251f0:	080278b6 	.word	0x080278b6
 80251f4:	08027940 	.word	0x08027940

080251f8 <__ratio>:
 80251f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251fc:	4688      	mov	r8, r1
 80251fe:	4669      	mov	r1, sp
 8025200:	4681      	mov	r9, r0
 8025202:	f7ff ff4d 	bl	80250a0 <__b2d>
 8025206:	a901      	add	r1, sp, #4
 8025208:	4640      	mov	r0, r8
 802520a:	ec55 4b10 	vmov	r4, r5, d0
 802520e:	f7ff ff47 	bl	80250a0 <__b2d>
 8025212:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8025216:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802521a:	eba3 0c02 	sub.w	ip, r3, r2
 802521e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8025222:	1a9b      	subs	r3, r3, r2
 8025224:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8025228:	ec51 0b10 	vmov	r0, r1, d0
 802522c:	2b00      	cmp	r3, #0
 802522e:	bfd6      	itet	le
 8025230:	460a      	movle	r2, r1
 8025232:	462a      	movgt	r2, r5
 8025234:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8025238:	468b      	mov	fp, r1
 802523a:	462f      	mov	r7, r5
 802523c:	bfd4      	ite	le
 802523e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8025242:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8025246:	4620      	mov	r0, r4
 8025248:	ee10 2a10 	vmov	r2, s0
 802524c:	465b      	mov	r3, fp
 802524e:	4639      	mov	r1, r7
 8025250:	f7db fb2c 	bl	80008ac <__aeabi_ddiv>
 8025254:	ec41 0b10 	vmov	d0, r0, r1
 8025258:	b003      	add	sp, #12
 802525a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802525e <__copybits>:
 802525e:	3901      	subs	r1, #1
 8025260:	b570      	push	{r4, r5, r6, lr}
 8025262:	1149      	asrs	r1, r1, #5
 8025264:	6914      	ldr	r4, [r2, #16]
 8025266:	3101      	adds	r1, #1
 8025268:	f102 0314 	add.w	r3, r2, #20
 802526c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8025270:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8025274:	1f05      	subs	r5, r0, #4
 8025276:	42a3      	cmp	r3, r4
 8025278:	d30c      	bcc.n	8025294 <__copybits+0x36>
 802527a:	1aa3      	subs	r3, r4, r2
 802527c:	3b11      	subs	r3, #17
 802527e:	f023 0303 	bic.w	r3, r3, #3
 8025282:	3211      	adds	r2, #17
 8025284:	42a2      	cmp	r2, r4
 8025286:	bf88      	it	hi
 8025288:	2300      	movhi	r3, #0
 802528a:	4418      	add	r0, r3
 802528c:	2300      	movs	r3, #0
 802528e:	4288      	cmp	r0, r1
 8025290:	d305      	bcc.n	802529e <__copybits+0x40>
 8025292:	bd70      	pop	{r4, r5, r6, pc}
 8025294:	f853 6b04 	ldr.w	r6, [r3], #4
 8025298:	f845 6f04 	str.w	r6, [r5, #4]!
 802529c:	e7eb      	b.n	8025276 <__copybits+0x18>
 802529e:	f840 3b04 	str.w	r3, [r0], #4
 80252a2:	e7f4      	b.n	802528e <__copybits+0x30>

080252a4 <__any_on>:
 80252a4:	f100 0214 	add.w	r2, r0, #20
 80252a8:	6900      	ldr	r0, [r0, #16]
 80252aa:	114b      	asrs	r3, r1, #5
 80252ac:	4298      	cmp	r0, r3
 80252ae:	b510      	push	{r4, lr}
 80252b0:	db11      	blt.n	80252d6 <__any_on+0x32>
 80252b2:	dd0a      	ble.n	80252ca <__any_on+0x26>
 80252b4:	f011 011f 	ands.w	r1, r1, #31
 80252b8:	d007      	beq.n	80252ca <__any_on+0x26>
 80252ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80252be:	fa24 f001 	lsr.w	r0, r4, r1
 80252c2:	fa00 f101 	lsl.w	r1, r0, r1
 80252c6:	428c      	cmp	r4, r1
 80252c8:	d10b      	bne.n	80252e2 <__any_on+0x3e>
 80252ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80252ce:	4293      	cmp	r3, r2
 80252d0:	d803      	bhi.n	80252da <__any_on+0x36>
 80252d2:	2000      	movs	r0, #0
 80252d4:	bd10      	pop	{r4, pc}
 80252d6:	4603      	mov	r3, r0
 80252d8:	e7f7      	b.n	80252ca <__any_on+0x26>
 80252da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80252de:	2900      	cmp	r1, #0
 80252e0:	d0f5      	beq.n	80252ce <__any_on+0x2a>
 80252e2:	2001      	movs	r0, #1
 80252e4:	e7f6      	b.n	80252d4 <__any_on+0x30>

080252e6 <_realloc_r>:
 80252e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80252e8:	4607      	mov	r7, r0
 80252ea:	4614      	mov	r4, r2
 80252ec:	460e      	mov	r6, r1
 80252ee:	b921      	cbnz	r1, 80252fa <_realloc_r+0x14>
 80252f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80252f4:	4611      	mov	r1, r2
 80252f6:	f7fb bd6f 	b.w	8020dd8 <_malloc_r>
 80252fa:	b922      	cbnz	r2, 8025306 <_realloc_r+0x20>
 80252fc:	f7fb fd20 	bl	8020d40 <_free_r>
 8025300:	4625      	mov	r5, r4
 8025302:	4628      	mov	r0, r5
 8025304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025306:	f000 f9ff 	bl	8025708 <_malloc_usable_size_r>
 802530a:	42a0      	cmp	r0, r4
 802530c:	d20f      	bcs.n	802532e <_realloc_r+0x48>
 802530e:	4621      	mov	r1, r4
 8025310:	4638      	mov	r0, r7
 8025312:	f7fb fd61 	bl	8020dd8 <_malloc_r>
 8025316:	4605      	mov	r5, r0
 8025318:	2800      	cmp	r0, #0
 802531a:	d0f2      	beq.n	8025302 <_realloc_r+0x1c>
 802531c:	4631      	mov	r1, r6
 802531e:	4622      	mov	r2, r4
 8025320:	f7fb fcce 	bl	8020cc0 <memcpy>
 8025324:	4631      	mov	r1, r6
 8025326:	4638      	mov	r0, r7
 8025328:	f7fb fd0a 	bl	8020d40 <_free_r>
 802532c:	e7e9      	b.n	8025302 <_realloc_r+0x1c>
 802532e:	4635      	mov	r5, r6
 8025330:	e7e7      	b.n	8025302 <_realloc_r+0x1c>

08025332 <__ssputs_r>:
 8025332:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025336:	688e      	ldr	r6, [r1, #8]
 8025338:	429e      	cmp	r6, r3
 802533a:	4682      	mov	sl, r0
 802533c:	460c      	mov	r4, r1
 802533e:	4690      	mov	r8, r2
 8025340:	461f      	mov	r7, r3
 8025342:	d838      	bhi.n	80253b6 <__ssputs_r+0x84>
 8025344:	898a      	ldrh	r2, [r1, #12]
 8025346:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802534a:	d032      	beq.n	80253b2 <__ssputs_r+0x80>
 802534c:	6825      	ldr	r5, [r4, #0]
 802534e:	6909      	ldr	r1, [r1, #16]
 8025350:	eba5 0901 	sub.w	r9, r5, r1
 8025354:	6965      	ldr	r5, [r4, #20]
 8025356:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802535a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802535e:	3301      	adds	r3, #1
 8025360:	444b      	add	r3, r9
 8025362:	106d      	asrs	r5, r5, #1
 8025364:	429d      	cmp	r5, r3
 8025366:	bf38      	it	cc
 8025368:	461d      	movcc	r5, r3
 802536a:	0553      	lsls	r3, r2, #21
 802536c:	d531      	bpl.n	80253d2 <__ssputs_r+0xa0>
 802536e:	4629      	mov	r1, r5
 8025370:	f7fb fd32 	bl	8020dd8 <_malloc_r>
 8025374:	4606      	mov	r6, r0
 8025376:	b950      	cbnz	r0, 802538e <__ssputs_r+0x5c>
 8025378:	230c      	movs	r3, #12
 802537a:	f8ca 3000 	str.w	r3, [sl]
 802537e:	89a3      	ldrh	r3, [r4, #12]
 8025380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025384:	81a3      	strh	r3, [r4, #12]
 8025386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802538a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802538e:	6921      	ldr	r1, [r4, #16]
 8025390:	464a      	mov	r2, r9
 8025392:	f7fb fc95 	bl	8020cc0 <memcpy>
 8025396:	89a3      	ldrh	r3, [r4, #12]
 8025398:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802539c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80253a0:	81a3      	strh	r3, [r4, #12]
 80253a2:	6126      	str	r6, [r4, #16]
 80253a4:	6165      	str	r5, [r4, #20]
 80253a6:	444e      	add	r6, r9
 80253a8:	eba5 0509 	sub.w	r5, r5, r9
 80253ac:	6026      	str	r6, [r4, #0]
 80253ae:	60a5      	str	r5, [r4, #8]
 80253b0:	463e      	mov	r6, r7
 80253b2:	42be      	cmp	r6, r7
 80253b4:	d900      	bls.n	80253b8 <__ssputs_r+0x86>
 80253b6:	463e      	mov	r6, r7
 80253b8:	6820      	ldr	r0, [r4, #0]
 80253ba:	4632      	mov	r2, r6
 80253bc:	4641      	mov	r1, r8
 80253be:	f7fb fc8d 	bl	8020cdc <memmove>
 80253c2:	68a3      	ldr	r3, [r4, #8]
 80253c4:	1b9b      	subs	r3, r3, r6
 80253c6:	60a3      	str	r3, [r4, #8]
 80253c8:	6823      	ldr	r3, [r4, #0]
 80253ca:	4433      	add	r3, r6
 80253cc:	6023      	str	r3, [r4, #0]
 80253ce:	2000      	movs	r0, #0
 80253d0:	e7db      	b.n	802538a <__ssputs_r+0x58>
 80253d2:	462a      	mov	r2, r5
 80253d4:	f7ff ff87 	bl	80252e6 <_realloc_r>
 80253d8:	4606      	mov	r6, r0
 80253da:	2800      	cmp	r0, #0
 80253dc:	d1e1      	bne.n	80253a2 <__ssputs_r+0x70>
 80253de:	6921      	ldr	r1, [r4, #16]
 80253e0:	4650      	mov	r0, sl
 80253e2:	f7fb fcad 	bl	8020d40 <_free_r>
 80253e6:	e7c7      	b.n	8025378 <__ssputs_r+0x46>

080253e8 <_svfiprintf_r>:
 80253e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253ec:	4698      	mov	r8, r3
 80253ee:	898b      	ldrh	r3, [r1, #12]
 80253f0:	061b      	lsls	r3, r3, #24
 80253f2:	b09d      	sub	sp, #116	; 0x74
 80253f4:	4607      	mov	r7, r0
 80253f6:	460d      	mov	r5, r1
 80253f8:	4614      	mov	r4, r2
 80253fa:	d50e      	bpl.n	802541a <_svfiprintf_r+0x32>
 80253fc:	690b      	ldr	r3, [r1, #16]
 80253fe:	b963      	cbnz	r3, 802541a <_svfiprintf_r+0x32>
 8025400:	2140      	movs	r1, #64	; 0x40
 8025402:	f7fb fce9 	bl	8020dd8 <_malloc_r>
 8025406:	6028      	str	r0, [r5, #0]
 8025408:	6128      	str	r0, [r5, #16]
 802540a:	b920      	cbnz	r0, 8025416 <_svfiprintf_r+0x2e>
 802540c:	230c      	movs	r3, #12
 802540e:	603b      	str	r3, [r7, #0]
 8025410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025414:	e0d1      	b.n	80255ba <_svfiprintf_r+0x1d2>
 8025416:	2340      	movs	r3, #64	; 0x40
 8025418:	616b      	str	r3, [r5, #20]
 802541a:	2300      	movs	r3, #0
 802541c:	9309      	str	r3, [sp, #36]	; 0x24
 802541e:	2320      	movs	r3, #32
 8025420:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025424:	f8cd 800c 	str.w	r8, [sp, #12]
 8025428:	2330      	movs	r3, #48	; 0x30
 802542a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80255d4 <_svfiprintf_r+0x1ec>
 802542e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025432:	f04f 0901 	mov.w	r9, #1
 8025436:	4623      	mov	r3, r4
 8025438:	469a      	mov	sl, r3
 802543a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802543e:	b10a      	cbz	r2, 8025444 <_svfiprintf_r+0x5c>
 8025440:	2a25      	cmp	r2, #37	; 0x25
 8025442:	d1f9      	bne.n	8025438 <_svfiprintf_r+0x50>
 8025444:	ebba 0b04 	subs.w	fp, sl, r4
 8025448:	d00b      	beq.n	8025462 <_svfiprintf_r+0x7a>
 802544a:	465b      	mov	r3, fp
 802544c:	4622      	mov	r2, r4
 802544e:	4629      	mov	r1, r5
 8025450:	4638      	mov	r0, r7
 8025452:	f7ff ff6e 	bl	8025332 <__ssputs_r>
 8025456:	3001      	adds	r0, #1
 8025458:	f000 80aa 	beq.w	80255b0 <_svfiprintf_r+0x1c8>
 802545c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802545e:	445a      	add	r2, fp
 8025460:	9209      	str	r2, [sp, #36]	; 0x24
 8025462:	f89a 3000 	ldrb.w	r3, [sl]
 8025466:	2b00      	cmp	r3, #0
 8025468:	f000 80a2 	beq.w	80255b0 <_svfiprintf_r+0x1c8>
 802546c:	2300      	movs	r3, #0
 802546e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025476:	f10a 0a01 	add.w	sl, sl, #1
 802547a:	9304      	str	r3, [sp, #16]
 802547c:	9307      	str	r3, [sp, #28]
 802547e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025482:	931a      	str	r3, [sp, #104]	; 0x68
 8025484:	4654      	mov	r4, sl
 8025486:	2205      	movs	r2, #5
 8025488:	f814 1b01 	ldrb.w	r1, [r4], #1
 802548c:	4851      	ldr	r0, [pc, #324]	; (80255d4 <_svfiprintf_r+0x1ec>)
 802548e:	f7da fed7 	bl	8000240 <memchr>
 8025492:	9a04      	ldr	r2, [sp, #16]
 8025494:	b9d8      	cbnz	r0, 80254ce <_svfiprintf_r+0xe6>
 8025496:	06d0      	lsls	r0, r2, #27
 8025498:	bf44      	itt	mi
 802549a:	2320      	movmi	r3, #32
 802549c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80254a0:	0711      	lsls	r1, r2, #28
 80254a2:	bf44      	itt	mi
 80254a4:	232b      	movmi	r3, #43	; 0x2b
 80254a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80254aa:	f89a 3000 	ldrb.w	r3, [sl]
 80254ae:	2b2a      	cmp	r3, #42	; 0x2a
 80254b0:	d015      	beq.n	80254de <_svfiprintf_r+0xf6>
 80254b2:	9a07      	ldr	r2, [sp, #28]
 80254b4:	4654      	mov	r4, sl
 80254b6:	2000      	movs	r0, #0
 80254b8:	f04f 0c0a 	mov.w	ip, #10
 80254bc:	4621      	mov	r1, r4
 80254be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80254c2:	3b30      	subs	r3, #48	; 0x30
 80254c4:	2b09      	cmp	r3, #9
 80254c6:	d94e      	bls.n	8025566 <_svfiprintf_r+0x17e>
 80254c8:	b1b0      	cbz	r0, 80254f8 <_svfiprintf_r+0x110>
 80254ca:	9207      	str	r2, [sp, #28]
 80254cc:	e014      	b.n	80254f8 <_svfiprintf_r+0x110>
 80254ce:	eba0 0308 	sub.w	r3, r0, r8
 80254d2:	fa09 f303 	lsl.w	r3, r9, r3
 80254d6:	4313      	orrs	r3, r2
 80254d8:	9304      	str	r3, [sp, #16]
 80254da:	46a2      	mov	sl, r4
 80254dc:	e7d2      	b.n	8025484 <_svfiprintf_r+0x9c>
 80254de:	9b03      	ldr	r3, [sp, #12]
 80254e0:	1d19      	adds	r1, r3, #4
 80254e2:	681b      	ldr	r3, [r3, #0]
 80254e4:	9103      	str	r1, [sp, #12]
 80254e6:	2b00      	cmp	r3, #0
 80254e8:	bfbb      	ittet	lt
 80254ea:	425b      	neglt	r3, r3
 80254ec:	f042 0202 	orrlt.w	r2, r2, #2
 80254f0:	9307      	strge	r3, [sp, #28]
 80254f2:	9307      	strlt	r3, [sp, #28]
 80254f4:	bfb8      	it	lt
 80254f6:	9204      	strlt	r2, [sp, #16]
 80254f8:	7823      	ldrb	r3, [r4, #0]
 80254fa:	2b2e      	cmp	r3, #46	; 0x2e
 80254fc:	d10c      	bne.n	8025518 <_svfiprintf_r+0x130>
 80254fe:	7863      	ldrb	r3, [r4, #1]
 8025500:	2b2a      	cmp	r3, #42	; 0x2a
 8025502:	d135      	bne.n	8025570 <_svfiprintf_r+0x188>
 8025504:	9b03      	ldr	r3, [sp, #12]
 8025506:	1d1a      	adds	r2, r3, #4
 8025508:	681b      	ldr	r3, [r3, #0]
 802550a:	9203      	str	r2, [sp, #12]
 802550c:	2b00      	cmp	r3, #0
 802550e:	bfb8      	it	lt
 8025510:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8025514:	3402      	adds	r4, #2
 8025516:	9305      	str	r3, [sp, #20]
 8025518:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80255e4 <_svfiprintf_r+0x1fc>
 802551c:	7821      	ldrb	r1, [r4, #0]
 802551e:	2203      	movs	r2, #3
 8025520:	4650      	mov	r0, sl
 8025522:	f7da fe8d 	bl	8000240 <memchr>
 8025526:	b140      	cbz	r0, 802553a <_svfiprintf_r+0x152>
 8025528:	2340      	movs	r3, #64	; 0x40
 802552a:	eba0 000a 	sub.w	r0, r0, sl
 802552e:	fa03 f000 	lsl.w	r0, r3, r0
 8025532:	9b04      	ldr	r3, [sp, #16]
 8025534:	4303      	orrs	r3, r0
 8025536:	3401      	adds	r4, #1
 8025538:	9304      	str	r3, [sp, #16]
 802553a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802553e:	4826      	ldr	r0, [pc, #152]	; (80255d8 <_svfiprintf_r+0x1f0>)
 8025540:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025544:	2206      	movs	r2, #6
 8025546:	f7da fe7b 	bl	8000240 <memchr>
 802554a:	2800      	cmp	r0, #0
 802554c:	d038      	beq.n	80255c0 <_svfiprintf_r+0x1d8>
 802554e:	4b23      	ldr	r3, [pc, #140]	; (80255dc <_svfiprintf_r+0x1f4>)
 8025550:	bb1b      	cbnz	r3, 802559a <_svfiprintf_r+0x1b2>
 8025552:	9b03      	ldr	r3, [sp, #12]
 8025554:	3307      	adds	r3, #7
 8025556:	f023 0307 	bic.w	r3, r3, #7
 802555a:	3308      	adds	r3, #8
 802555c:	9303      	str	r3, [sp, #12]
 802555e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025560:	4433      	add	r3, r6
 8025562:	9309      	str	r3, [sp, #36]	; 0x24
 8025564:	e767      	b.n	8025436 <_svfiprintf_r+0x4e>
 8025566:	fb0c 3202 	mla	r2, ip, r2, r3
 802556a:	460c      	mov	r4, r1
 802556c:	2001      	movs	r0, #1
 802556e:	e7a5      	b.n	80254bc <_svfiprintf_r+0xd4>
 8025570:	2300      	movs	r3, #0
 8025572:	3401      	adds	r4, #1
 8025574:	9305      	str	r3, [sp, #20]
 8025576:	4619      	mov	r1, r3
 8025578:	f04f 0c0a 	mov.w	ip, #10
 802557c:	4620      	mov	r0, r4
 802557e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025582:	3a30      	subs	r2, #48	; 0x30
 8025584:	2a09      	cmp	r2, #9
 8025586:	d903      	bls.n	8025590 <_svfiprintf_r+0x1a8>
 8025588:	2b00      	cmp	r3, #0
 802558a:	d0c5      	beq.n	8025518 <_svfiprintf_r+0x130>
 802558c:	9105      	str	r1, [sp, #20]
 802558e:	e7c3      	b.n	8025518 <_svfiprintf_r+0x130>
 8025590:	fb0c 2101 	mla	r1, ip, r1, r2
 8025594:	4604      	mov	r4, r0
 8025596:	2301      	movs	r3, #1
 8025598:	e7f0      	b.n	802557c <_svfiprintf_r+0x194>
 802559a:	ab03      	add	r3, sp, #12
 802559c:	9300      	str	r3, [sp, #0]
 802559e:	462a      	mov	r2, r5
 80255a0:	4b0f      	ldr	r3, [pc, #60]	; (80255e0 <_svfiprintf_r+0x1f8>)
 80255a2:	a904      	add	r1, sp, #16
 80255a4:	4638      	mov	r0, r7
 80255a6:	f7fb fe6b 	bl	8021280 <_printf_float>
 80255aa:	1c42      	adds	r2, r0, #1
 80255ac:	4606      	mov	r6, r0
 80255ae:	d1d6      	bne.n	802555e <_svfiprintf_r+0x176>
 80255b0:	89ab      	ldrh	r3, [r5, #12]
 80255b2:	065b      	lsls	r3, r3, #25
 80255b4:	f53f af2c 	bmi.w	8025410 <_svfiprintf_r+0x28>
 80255b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80255ba:	b01d      	add	sp, #116	; 0x74
 80255bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255c0:	ab03      	add	r3, sp, #12
 80255c2:	9300      	str	r3, [sp, #0]
 80255c4:	462a      	mov	r2, r5
 80255c6:	4b06      	ldr	r3, [pc, #24]	; (80255e0 <_svfiprintf_r+0x1f8>)
 80255c8:	a904      	add	r1, sp, #16
 80255ca:	4638      	mov	r0, r7
 80255cc:	f7fc f8fc 	bl	80217c8 <_printf_i>
 80255d0:	e7eb      	b.n	80255aa <_svfiprintf_r+0x1c2>
 80255d2:	bf00      	nop
 80255d4:	08027740 	.word	0x08027740
 80255d8:	0802774a 	.word	0x0802774a
 80255dc:	08021281 	.word	0x08021281
 80255e0:	08025333 	.word	0x08025333
 80255e4:	08027746 	.word	0x08027746

080255e8 <_read_r>:
 80255e8:	b538      	push	{r3, r4, r5, lr}
 80255ea:	4d07      	ldr	r5, [pc, #28]	; (8025608 <_read_r+0x20>)
 80255ec:	4604      	mov	r4, r0
 80255ee:	4608      	mov	r0, r1
 80255f0:	4611      	mov	r1, r2
 80255f2:	2200      	movs	r2, #0
 80255f4:	602a      	str	r2, [r5, #0]
 80255f6:	461a      	mov	r2, r3
 80255f8:	f7dd f868 	bl	80026cc <_read>
 80255fc:	1c43      	adds	r3, r0, #1
 80255fe:	d102      	bne.n	8025606 <_read_r+0x1e>
 8025600:	682b      	ldr	r3, [r5, #0]
 8025602:	b103      	cbz	r3, 8025606 <_read_r+0x1e>
 8025604:	6023      	str	r3, [r4, #0]
 8025606:	bd38      	pop	{r3, r4, r5, pc}
 8025608:	20013644 	.word	0x20013644
 802560c:	00000000 	.word	0x00000000

08025610 <nan>:
 8025610:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8025618 <nan+0x8>
 8025614:	4770      	bx	lr
 8025616:	bf00      	nop
 8025618:	00000000 	.word	0x00000000
 802561c:	7ff80000 	.word	0x7ff80000

08025620 <_raise_r>:
 8025620:	291f      	cmp	r1, #31
 8025622:	b538      	push	{r3, r4, r5, lr}
 8025624:	4604      	mov	r4, r0
 8025626:	460d      	mov	r5, r1
 8025628:	d904      	bls.n	8025634 <_raise_r+0x14>
 802562a:	2316      	movs	r3, #22
 802562c:	6003      	str	r3, [r0, #0]
 802562e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025632:	bd38      	pop	{r3, r4, r5, pc}
 8025634:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025636:	b112      	cbz	r2, 802563e <_raise_r+0x1e>
 8025638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802563c:	b94b      	cbnz	r3, 8025652 <_raise_r+0x32>
 802563e:	4620      	mov	r0, r4
 8025640:	f000 f830 	bl	80256a4 <_getpid_r>
 8025644:	462a      	mov	r2, r5
 8025646:	4601      	mov	r1, r0
 8025648:	4620      	mov	r0, r4
 802564a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802564e:	f000 b817 	b.w	8025680 <_kill_r>
 8025652:	2b01      	cmp	r3, #1
 8025654:	d00a      	beq.n	802566c <_raise_r+0x4c>
 8025656:	1c59      	adds	r1, r3, #1
 8025658:	d103      	bne.n	8025662 <_raise_r+0x42>
 802565a:	2316      	movs	r3, #22
 802565c:	6003      	str	r3, [r0, #0]
 802565e:	2001      	movs	r0, #1
 8025660:	e7e7      	b.n	8025632 <_raise_r+0x12>
 8025662:	2400      	movs	r4, #0
 8025664:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025668:	4628      	mov	r0, r5
 802566a:	4798      	blx	r3
 802566c:	2000      	movs	r0, #0
 802566e:	e7e0      	b.n	8025632 <_raise_r+0x12>

08025670 <raise>:
 8025670:	4b02      	ldr	r3, [pc, #8]	; (802567c <raise+0xc>)
 8025672:	4601      	mov	r1, r0
 8025674:	6818      	ldr	r0, [r3, #0]
 8025676:	f7ff bfd3 	b.w	8025620 <_raise_r>
 802567a:	bf00      	nop
 802567c:	2000009c 	.word	0x2000009c

08025680 <_kill_r>:
 8025680:	b538      	push	{r3, r4, r5, lr}
 8025682:	4d07      	ldr	r5, [pc, #28]	; (80256a0 <_kill_r+0x20>)
 8025684:	2300      	movs	r3, #0
 8025686:	4604      	mov	r4, r0
 8025688:	4608      	mov	r0, r1
 802568a:	4611      	mov	r1, r2
 802568c:	602b      	str	r3, [r5, #0]
 802568e:	f7dd f803 	bl	8002698 <_kill>
 8025692:	1c43      	adds	r3, r0, #1
 8025694:	d102      	bne.n	802569c <_kill_r+0x1c>
 8025696:	682b      	ldr	r3, [r5, #0]
 8025698:	b103      	cbz	r3, 802569c <_kill_r+0x1c>
 802569a:	6023      	str	r3, [r4, #0]
 802569c:	bd38      	pop	{r3, r4, r5, pc}
 802569e:	bf00      	nop
 80256a0:	20013644 	.word	0x20013644

080256a4 <_getpid_r>:
 80256a4:	f7dc bff0 	b.w	8002688 <_getpid>

080256a8 <__ascii_wctomb>:
 80256a8:	b149      	cbz	r1, 80256be <__ascii_wctomb+0x16>
 80256aa:	2aff      	cmp	r2, #255	; 0xff
 80256ac:	bf85      	ittet	hi
 80256ae:	238a      	movhi	r3, #138	; 0x8a
 80256b0:	6003      	strhi	r3, [r0, #0]
 80256b2:	700a      	strbls	r2, [r1, #0]
 80256b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80256b8:	bf98      	it	ls
 80256ba:	2001      	movls	r0, #1
 80256bc:	4770      	bx	lr
 80256be:	4608      	mov	r0, r1
 80256c0:	4770      	bx	lr
	...

080256c4 <_fstat_r>:
 80256c4:	b538      	push	{r3, r4, r5, lr}
 80256c6:	4d07      	ldr	r5, [pc, #28]	; (80256e4 <_fstat_r+0x20>)
 80256c8:	2300      	movs	r3, #0
 80256ca:	4604      	mov	r4, r0
 80256cc:	4608      	mov	r0, r1
 80256ce:	4611      	mov	r1, r2
 80256d0:	602b      	str	r3, [r5, #0]
 80256d2:	f7dd f824 	bl	800271e <_fstat>
 80256d6:	1c43      	adds	r3, r0, #1
 80256d8:	d102      	bne.n	80256e0 <_fstat_r+0x1c>
 80256da:	682b      	ldr	r3, [r5, #0]
 80256dc:	b103      	cbz	r3, 80256e0 <_fstat_r+0x1c>
 80256de:	6023      	str	r3, [r4, #0]
 80256e0:	bd38      	pop	{r3, r4, r5, pc}
 80256e2:	bf00      	nop
 80256e4:	20013644 	.word	0x20013644

080256e8 <_isatty_r>:
 80256e8:	b538      	push	{r3, r4, r5, lr}
 80256ea:	4d06      	ldr	r5, [pc, #24]	; (8025704 <_isatty_r+0x1c>)
 80256ec:	2300      	movs	r3, #0
 80256ee:	4604      	mov	r4, r0
 80256f0:	4608      	mov	r0, r1
 80256f2:	602b      	str	r3, [r5, #0]
 80256f4:	f7dd f823 	bl	800273e <_isatty>
 80256f8:	1c43      	adds	r3, r0, #1
 80256fa:	d102      	bne.n	8025702 <_isatty_r+0x1a>
 80256fc:	682b      	ldr	r3, [r5, #0]
 80256fe:	b103      	cbz	r3, 8025702 <_isatty_r+0x1a>
 8025700:	6023      	str	r3, [r4, #0]
 8025702:	bd38      	pop	{r3, r4, r5, pc}
 8025704:	20013644 	.word	0x20013644

08025708 <_malloc_usable_size_r>:
 8025708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802570c:	1f18      	subs	r0, r3, #4
 802570e:	2b00      	cmp	r3, #0
 8025710:	bfbc      	itt	lt
 8025712:	580b      	ldrlt	r3, [r1, r0]
 8025714:	18c0      	addlt	r0, r0, r3
 8025716:	4770      	bx	lr

08025718 <_init>:
 8025718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802571a:	bf00      	nop
 802571c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802571e:	bc08      	pop	{r3}
 8025720:	469e      	mov	lr, r3
 8025722:	4770      	bx	lr

08025724 <_fini>:
 8025724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025726:	bf00      	nop
 8025728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802572a:	bc08      	pop	{r3}
 802572c:	469e      	mov	lr, r3
 802572e:	4770      	bx	lr
